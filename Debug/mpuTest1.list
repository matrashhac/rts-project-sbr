
mpuTest1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e40  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000360  08007010  08007010  00008010  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007370  08007370  00009060  2**0
                  CONTENTS
  4 .ARM          00000008  08007370  08007370  00008370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007378  08007378  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007378  08007378  00008378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800737c  0800737c  0000837c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007380  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001048  20000060  080073e0  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010a8  080073e0  000090a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018d65  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003166  00000000  00000000  00021df5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e8  00000000  00000000  00024f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000106e  00000000  00000000  00026448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003e56  00000000  00000000  000274b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000188f3  00000000  00000000  0002b30c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd3e0  00000000  00000000  00043bff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00120fdf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060c0  00000000  00000000  00121024  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  001270e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006ff8 	.word	0x08006ff8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08006ff8 	.word	0x08006ff8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2f>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b74:	bf24      	itt	cs
 8000b76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b7e:	d90d      	bls.n	8000b9c <__aeabi_d2f+0x30>
 8000b80:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b8c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b94:	bf08      	it	eq
 8000b96:	f020 0001 	biceq.w	r0, r0, #1
 8000b9a:	4770      	bx	lr
 8000b9c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ba0:	d121      	bne.n	8000be6 <__aeabi_d2f+0x7a>
 8000ba2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ba6:	bfbc      	itt	lt
 8000ba8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bac:	4770      	bxlt	lr
 8000bae:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bb2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb6:	f1c2 0218 	rsb	r2, r2, #24
 8000bba:	f1c2 0c20 	rsb	ip, r2, #32
 8000bbe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc6:	bf18      	it	ne
 8000bc8:	f040 0001 	orrne.w	r0, r0, #1
 8000bcc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd8:	ea40 000c 	orr.w	r0, r0, ip
 8000bdc:	fa23 f302 	lsr.w	r3, r3, r2
 8000be0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be4:	e7cc      	b.n	8000b80 <__aeabi_d2f+0x14>
 8000be6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bea:	d107      	bne.n	8000bfc <__aeabi_d2f+0x90>
 8000bec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bf6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bfa:	4770      	bxne	lr
 8000bfc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c00:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c04:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <__aeabi_uldivmod>:
 8000c0c:	b953      	cbnz	r3, 8000c24 <__aeabi_uldivmod+0x18>
 8000c0e:	b94a      	cbnz	r2, 8000c24 <__aeabi_uldivmod+0x18>
 8000c10:	2900      	cmp	r1, #0
 8000c12:	bf08      	it	eq
 8000c14:	2800      	cmpeq	r0, #0
 8000c16:	bf1c      	itt	ne
 8000c18:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c1c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c20:	f000 b96a 	b.w	8000ef8 <__aeabi_idiv0>
 8000c24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c2c:	f000 f806 	bl	8000c3c <__udivmoddi4>
 8000c30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c38:	b004      	add	sp, #16
 8000c3a:	4770      	bx	lr

08000c3c <__udivmoddi4>:
 8000c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c40:	9d08      	ldr	r5, [sp, #32]
 8000c42:	460c      	mov	r4, r1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d14e      	bne.n	8000ce6 <__udivmoddi4+0xaa>
 8000c48:	4694      	mov	ip, r2
 8000c4a:	458c      	cmp	ip, r1
 8000c4c:	4686      	mov	lr, r0
 8000c4e:	fab2 f282 	clz	r2, r2
 8000c52:	d962      	bls.n	8000d1a <__udivmoddi4+0xde>
 8000c54:	b14a      	cbz	r2, 8000c6a <__udivmoddi4+0x2e>
 8000c56:	f1c2 0320 	rsb	r3, r2, #32
 8000c5a:	4091      	lsls	r1, r2
 8000c5c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c64:	4319      	orrs	r1, r3
 8000c66:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6e:	fa1f f68c 	uxth.w	r6, ip
 8000c72:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c76:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c7a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c82:	fb04 f106 	mul.w	r1, r4, r6
 8000c86:	4299      	cmp	r1, r3
 8000c88:	d90a      	bls.n	8000ca0 <__udivmoddi4+0x64>
 8000c8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c92:	f080 8112 	bcs.w	8000eba <__udivmoddi4+0x27e>
 8000c96:	4299      	cmp	r1, r3
 8000c98:	f240 810f 	bls.w	8000eba <__udivmoddi4+0x27e>
 8000c9c:	3c02      	subs	r4, #2
 8000c9e:	4463      	add	r3, ip
 8000ca0:	1a59      	subs	r1, r3, r1
 8000ca2:	fa1f f38e 	uxth.w	r3, lr
 8000ca6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000caa:	fb07 1110 	mls	r1, r7, r0, r1
 8000cae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb2:	fb00 f606 	mul.w	r6, r0, r6
 8000cb6:	429e      	cmp	r6, r3
 8000cb8:	d90a      	bls.n	8000cd0 <__udivmoddi4+0x94>
 8000cba:	eb1c 0303 	adds.w	r3, ip, r3
 8000cbe:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000cc2:	f080 80fc 	bcs.w	8000ebe <__udivmoddi4+0x282>
 8000cc6:	429e      	cmp	r6, r3
 8000cc8:	f240 80f9 	bls.w	8000ebe <__udivmoddi4+0x282>
 8000ccc:	4463      	add	r3, ip
 8000cce:	3802      	subs	r0, #2
 8000cd0:	1b9b      	subs	r3, r3, r6
 8000cd2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	b11d      	cbz	r5, 8000ce2 <__udivmoddi4+0xa6>
 8000cda:	40d3      	lsrs	r3, r2
 8000cdc:	2200      	movs	r2, #0
 8000cde:	e9c5 3200 	strd	r3, r2, [r5]
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d905      	bls.n	8000cf6 <__udivmoddi4+0xba>
 8000cea:	b10d      	cbz	r5, 8000cf0 <__udivmoddi4+0xb4>
 8000cec:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4608      	mov	r0, r1
 8000cf4:	e7f5      	b.n	8000ce2 <__udivmoddi4+0xa6>
 8000cf6:	fab3 f183 	clz	r1, r3
 8000cfa:	2900      	cmp	r1, #0
 8000cfc:	d146      	bne.n	8000d8c <__udivmoddi4+0x150>
 8000cfe:	42a3      	cmp	r3, r4
 8000d00:	d302      	bcc.n	8000d08 <__udivmoddi4+0xcc>
 8000d02:	4290      	cmp	r0, r2
 8000d04:	f0c0 80f0 	bcc.w	8000ee8 <__udivmoddi4+0x2ac>
 8000d08:	1a86      	subs	r6, r0, r2
 8000d0a:	eb64 0303 	sbc.w	r3, r4, r3
 8000d0e:	2001      	movs	r0, #1
 8000d10:	2d00      	cmp	r5, #0
 8000d12:	d0e6      	beq.n	8000ce2 <__udivmoddi4+0xa6>
 8000d14:	e9c5 6300 	strd	r6, r3, [r5]
 8000d18:	e7e3      	b.n	8000ce2 <__udivmoddi4+0xa6>
 8000d1a:	2a00      	cmp	r2, #0
 8000d1c:	f040 8090 	bne.w	8000e40 <__udivmoddi4+0x204>
 8000d20:	eba1 040c 	sub.w	r4, r1, ip
 8000d24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d28:	fa1f f78c 	uxth.w	r7, ip
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d36:	fb08 4416 	mls	r4, r8, r6, r4
 8000d3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d3e:	fb07 f006 	mul.w	r0, r7, r6
 8000d42:	4298      	cmp	r0, r3
 8000d44:	d908      	bls.n	8000d58 <__udivmoddi4+0x11c>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d4e:	d202      	bcs.n	8000d56 <__udivmoddi4+0x11a>
 8000d50:	4298      	cmp	r0, r3
 8000d52:	f200 80cd 	bhi.w	8000ef0 <__udivmoddi4+0x2b4>
 8000d56:	4626      	mov	r6, r4
 8000d58:	1a1c      	subs	r4, r3, r0
 8000d5a:	fa1f f38e 	uxth.w	r3, lr
 8000d5e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d62:	fb08 4410 	mls	r4, r8, r0, r4
 8000d66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d6a:	fb00 f707 	mul.w	r7, r0, r7
 8000d6e:	429f      	cmp	r7, r3
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x148>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x146>
 8000d7c:	429f      	cmp	r7, r3
 8000d7e:	f200 80b0 	bhi.w	8000ee2 <__udivmoddi4+0x2a6>
 8000d82:	4620      	mov	r0, r4
 8000d84:	1bdb      	subs	r3, r3, r7
 8000d86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d8a:	e7a5      	b.n	8000cd8 <__udivmoddi4+0x9c>
 8000d8c:	f1c1 0620 	rsb	r6, r1, #32
 8000d90:	408b      	lsls	r3, r1
 8000d92:	fa22 f706 	lsr.w	r7, r2, r6
 8000d96:	431f      	orrs	r7, r3
 8000d98:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d9c:	fa04 f301 	lsl.w	r3, r4, r1
 8000da0:	ea43 030c 	orr.w	r3, r3, ip
 8000da4:	40f4      	lsrs	r4, r6
 8000da6:	fa00 f801 	lsl.w	r8, r0, r1
 8000daa:	0c38      	lsrs	r0, r7, #16
 8000dac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000db0:	fbb4 fef0 	udiv	lr, r4, r0
 8000db4:	fa1f fc87 	uxth.w	ip, r7
 8000db8:	fb00 441e 	mls	r4, r0, lr, r4
 8000dbc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc0:	fb0e f90c 	mul.w	r9, lr, ip
 8000dc4:	45a1      	cmp	r9, r4
 8000dc6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dca:	d90a      	bls.n	8000de2 <__udivmoddi4+0x1a6>
 8000dcc:	193c      	adds	r4, r7, r4
 8000dce:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dd2:	f080 8084 	bcs.w	8000ede <__udivmoddi4+0x2a2>
 8000dd6:	45a1      	cmp	r9, r4
 8000dd8:	f240 8081 	bls.w	8000ede <__udivmoddi4+0x2a2>
 8000ddc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000de0:	443c      	add	r4, r7
 8000de2:	eba4 0409 	sub.w	r4, r4, r9
 8000de6:	fa1f f983 	uxth.w	r9, r3
 8000dea:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dee:	fb00 4413 	mls	r4, r0, r3, r4
 8000df2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000df6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dfa:	45a4      	cmp	ip, r4
 8000dfc:	d907      	bls.n	8000e0e <__udivmoddi4+0x1d2>
 8000dfe:	193c      	adds	r4, r7, r4
 8000e00:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e04:	d267      	bcs.n	8000ed6 <__udivmoddi4+0x29a>
 8000e06:	45a4      	cmp	ip, r4
 8000e08:	d965      	bls.n	8000ed6 <__udivmoddi4+0x29a>
 8000e0a:	3b02      	subs	r3, #2
 8000e0c:	443c      	add	r4, r7
 8000e0e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e12:	fba0 9302 	umull	r9, r3, r0, r2
 8000e16:	eba4 040c 	sub.w	r4, r4, ip
 8000e1a:	429c      	cmp	r4, r3
 8000e1c:	46ce      	mov	lr, r9
 8000e1e:	469c      	mov	ip, r3
 8000e20:	d351      	bcc.n	8000ec6 <__udivmoddi4+0x28a>
 8000e22:	d04e      	beq.n	8000ec2 <__udivmoddi4+0x286>
 8000e24:	b155      	cbz	r5, 8000e3c <__udivmoddi4+0x200>
 8000e26:	ebb8 030e 	subs.w	r3, r8, lr
 8000e2a:	eb64 040c 	sbc.w	r4, r4, ip
 8000e2e:	fa04 f606 	lsl.w	r6, r4, r6
 8000e32:	40cb      	lsrs	r3, r1
 8000e34:	431e      	orrs	r6, r3
 8000e36:	40cc      	lsrs	r4, r1
 8000e38:	e9c5 6400 	strd	r6, r4, [r5]
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	e750      	b.n	8000ce2 <__udivmoddi4+0xa6>
 8000e40:	f1c2 0320 	rsb	r3, r2, #32
 8000e44:	fa20 f103 	lsr.w	r1, r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa24 f303 	lsr.w	r3, r4, r3
 8000e50:	4094      	lsls	r4, r2
 8000e52:	430c      	orrs	r4, r1
 8000e54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e58:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e5c:	fa1f f78c 	uxth.w	r7, ip
 8000e60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e64:	fb08 3110 	mls	r1, r8, r0, r3
 8000e68:	0c23      	lsrs	r3, r4, #16
 8000e6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e6e:	fb00 f107 	mul.w	r1, r0, r7
 8000e72:	4299      	cmp	r1, r3
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x24c>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e7e:	d22c      	bcs.n	8000eda <__udivmoddi4+0x29e>
 8000e80:	4299      	cmp	r1, r3
 8000e82:	d92a      	bls.n	8000eda <__udivmoddi4+0x29e>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1a5b      	subs	r3, r3, r1
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e90:	fb08 3311 	mls	r3, r8, r1, r3
 8000e94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e98:	fb01 f307 	mul.w	r3, r1, r7
 8000e9c:	42a3      	cmp	r3, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x276>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ea8:	d213      	bcs.n	8000ed2 <__udivmoddi4+0x296>
 8000eaa:	42a3      	cmp	r3, r4
 8000eac:	d911      	bls.n	8000ed2 <__udivmoddi4+0x296>
 8000eae:	3902      	subs	r1, #2
 8000eb0:	4464      	add	r4, ip
 8000eb2:	1ae4      	subs	r4, r4, r3
 8000eb4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000eb8:	e739      	b.n	8000d2e <__udivmoddi4+0xf2>
 8000eba:	4604      	mov	r4, r0
 8000ebc:	e6f0      	b.n	8000ca0 <__udivmoddi4+0x64>
 8000ebe:	4608      	mov	r0, r1
 8000ec0:	e706      	b.n	8000cd0 <__udivmoddi4+0x94>
 8000ec2:	45c8      	cmp	r8, r9
 8000ec4:	d2ae      	bcs.n	8000e24 <__udivmoddi4+0x1e8>
 8000ec6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eca:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ece:	3801      	subs	r0, #1
 8000ed0:	e7a8      	b.n	8000e24 <__udivmoddi4+0x1e8>
 8000ed2:	4631      	mov	r1, r6
 8000ed4:	e7ed      	b.n	8000eb2 <__udivmoddi4+0x276>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	e799      	b.n	8000e0e <__udivmoddi4+0x1d2>
 8000eda:	4630      	mov	r0, r6
 8000edc:	e7d4      	b.n	8000e88 <__udivmoddi4+0x24c>
 8000ede:	46d6      	mov	lr, sl
 8000ee0:	e77f      	b.n	8000de2 <__udivmoddi4+0x1a6>
 8000ee2:	4463      	add	r3, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e74d      	b.n	8000d84 <__udivmoddi4+0x148>
 8000ee8:	4606      	mov	r6, r0
 8000eea:	4623      	mov	r3, r4
 8000eec:	4608      	mov	r0, r1
 8000eee:	e70f      	b.n	8000d10 <__udivmoddi4+0xd4>
 8000ef0:	3e02      	subs	r6, #2
 8000ef2:	4463      	add	r3, ip
 8000ef4:	e730      	b.n	8000d58 <__udivmoddi4+0x11c>
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <myComfyPrint>:

extern UART_HandleTypeDef huart2;

uint8_t buff[2048] = { 0 };

void myComfyPrint(const char* string){
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	strncpy((char*) buff, string, sizeof(buff));
 8000f04:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f08:	6879      	ldr	r1, [r7, #4]
 8000f0a:	4809      	ldr	r0, [pc, #36]	@ (8000f30 <myComfyPrint+0x34>)
 8000f0c:	f005 f97e 	bl	800620c <strncpy>
	HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8000f10:	4807      	ldr	r0, [pc, #28]	@ (8000f30 <myComfyPrint+0x34>)
 8000f12:	f7ff f97d 	bl	8000210 <strlen>
 8000f16:	4603      	mov	r3, r0
 8000f18:	b29a      	uxth	r2, r3
 8000f1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f1e:	4904      	ldr	r1, [pc, #16]	@ (8000f30 <myComfyPrint+0x34>)
 8000f20:	4804      	ldr	r0, [pc, #16]	@ (8000f34 <myComfyPrint+0x38>)
 8000f22:	f004 fb5f 	bl	80055e4 <HAL_UART_Transmit>
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	2000007c 	.word	0x2000007c
 8000f34:	20000918 	.word	0x20000918

08000f38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f38:	b5b0      	push	{r4, r5, r7, lr}
 8000f3a:	f5ad 6d15 	sub.w	sp, sp, #2384	@ 0x950
 8000f3e:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f40:	f001 f9f4 	bl	800232c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f44:	f000 fbe2 	bl	800170c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f48:	f000 fd0a 	bl	8001960 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f4c:	f000 fcde 	bl	800190c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000f50:	f000 fc4a 	bl	80017e8 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000f54:	f000 fc76 	bl	8001844 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  //initialize mpu6050
  mpu6050_init();
 8000f58:	f000 fdd6 	bl	8001b08 <mpu6050_init>

  //initialize motors
  motor_init();
 8000f5c:	f000 fd88 	bl	8001a70 <motor_init>



  //while loop to wait until robot is in upright position
  //calculate angle from acceleration values
  float acc_angle_temp=1;
 8000f60:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000f64:	f607 1244 	addw	r2, r7, #2372	@ 0x944
 8000f68:	6013      	str	r3, [r2, #0]
  static uint8_t done_already = 0;
  char myString[256] = { 0 };
 8000f6a:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 8000f6e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	3304      	adds	r3, #4
 8000f78:	22fc      	movs	r2, #252	@ 0xfc
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f005 f93d 	bl	80061fc <memset>

  mpu6050_read(&mpu_values);
 8000f82:	488b      	ldr	r0, [pc, #556]	@ (80011b0 <main+0x278>)
 8000f84:	f000 ff1e 	bl	8001dc4 <mpu6050_read>

  if(done_already == 0){
 8000f88:	4b8a      	ldr	r3, [pc, #552]	@ (80011b4 <main+0x27c>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d172      	bne.n	8001076 <main+0x13e>
	  while(acc_angle_temp != 0){
 8000f90:	e062      	b.n	8001058 <main+0x120>
		  acc_angle_temp = atan2(mpu_values.acc_x, mpu_values.acc_z)*RAD_TO_DEG;	//*(180/M_PI) to convert from radian to degree
 8000f92:	4b87      	ldr	r3, [pc, #540]	@ (80011b0 <main+0x278>)
 8000f94:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff fae3 	bl	8000564 <__aeabi_i2d>
 8000f9e:	4604      	mov	r4, r0
 8000fa0:	460d      	mov	r5, r1
 8000fa2:	4b83      	ldr	r3, [pc, #524]	@ (80011b0 <main+0x278>)
 8000fa4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fadb 	bl	8000564 <__aeabi_i2d>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	ec43 2b11 	vmov	d1, r2, r3
 8000fb6:	ec45 4b10 	vmov	d0, r4, r5
 8000fba:	f005 fdb3 	bl	8006b24 <atan2>
 8000fbe:	ec51 0b10 	vmov	r0, r1, d0
 8000fc2:	f04f 0200 	mov.w	r2, #0
 8000fc6:	4b7c      	ldr	r3, [pc, #496]	@ (80011b8 <main+0x280>)
 8000fc8:	f7ff fb36 	bl	8000638 <__aeabi_dmul>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	460b      	mov	r3, r1
 8000fd0:	4610      	mov	r0, r2
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	a374      	add	r3, pc, #464	@ (adr r3, 80011a8 <main+0x270>)
 8000fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fda:	f7ff fc57 	bl	800088c <__aeabi_ddiv>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	4610      	mov	r0, r2
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f7ff fdc1 	bl	8000b6c <__aeabi_d2f>
 8000fea:	4603      	mov	r3, r0
 8000fec:	f607 1244 	addw	r2, r7, #2372	@ 0x944
 8000ff0:	6013      	str	r3, [r2, #0]
		  if(isnan(acc_angle_temp)){
 8000ff2:	f607 1344 	addw	r3, r7, #2372	@ 0x944
 8000ff6:	ed93 7a00 	vldr	s14, [r3]
 8000ffa:	f607 1344 	addw	r3, r7, #2372	@ 0x944
 8000ffe:	edd3 7a00 	vldr	s15, [r3]
 8001002:	eeb4 7a67 	vcmp.f32	s14, s15
 8001006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800100a:	d70b      	bvc.n	8001024 <main+0xec>
			  sprintf((char*) myString, "acc_angle_temp is NaN\r\n");
 800100c:	f607 030c 	addw	r3, r7, #2060	@ 0x80c
 8001010:	496a      	ldr	r1, [pc, #424]	@ (80011bc <main+0x284>)
 8001012:	4618      	mov	r0, r3
 8001014:	f005 f8d2 	bl	80061bc <siprintf>
			  myComfyPrint(myString);
 8001018:	f607 030c 	addw	r3, r7, #2060	@ 0x80c
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff ff6d 	bl	8000efc <myComfyPrint>
 8001022:	e016      	b.n	8001052 <main+0x11a>
		  }
		  else{
			  sprintf((char*) myString, "acc_angle_temp*100 = %d\r\n", (int) (acc_angle_temp*100));	//apparently floating numbers are disabled in print funcitons by defautl if using newlib
 8001024:	f607 1344 	addw	r3, r7, #2372	@ 0x944
 8001028:	edd3 7a00 	vldr	s15, [r3]
 800102c:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 80011c0 <main+0x288>
 8001030:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001034:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001038:	f607 030c 	addw	r3, r7, #2060	@ 0x80c
 800103c:	ee17 2a90 	vmov	r2, s15
 8001040:	4960      	ldr	r1, [pc, #384]	@ (80011c4 <main+0x28c>)
 8001042:	4618      	mov	r0, r3
 8001044:	f005 f8ba 	bl	80061bc <siprintf>
			  myComfyPrint(myString);
 8001048:	f607 030c 	addw	r3, r7, #2060	@ 0x80c
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff55 	bl	8000efc <myComfyPrint>
		  }

		  mpu6050_read(&mpu_values);
 8001052:	4857      	ldr	r0, [pc, #348]	@ (80011b0 <main+0x278>)
 8001054:	f000 feb6 	bl	8001dc4 <mpu6050_read>
	  while(acc_angle_temp != 0){
 8001058:	f607 1344 	addw	r3, r7, #2372	@ 0x944
 800105c:	edd3 7a00 	vldr	s15, [r3]
 8001060:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001068:	d193      	bne.n	8000f92 <main+0x5a>
	  }
	  done_already = 1;
 800106a:	4b52      	ldr	r3, [pc, #328]	@ (80011b4 <main+0x27c>)
 800106c:	2201      	movs	r2, #1
 800106e:	701a      	strb	r2, [r3, #0]
	  mpu6050_read(&mpu_values);
 8001070:	484f      	ldr	r0, [pc, #316]	@ (80011b0 <main+0x278>)
 8001072:	f000 fea7 	bl	8001dc4 <mpu6050_read>
  }
  sprintf((char*) myString, "Acceleration X = %d\r\nAcceleration Y = %d\r\nAcceleration Z = %d\r\n", mpu_values.acc_x, mpu_values.acc_y, mpu_values.acc_z);
 8001076:	4b4e      	ldr	r3, [pc, #312]	@ (80011b0 <main+0x278>)
 8001078:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800107c:	461a      	mov	r2, r3
 800107e:	4b4c      	ldr	r3, [pc, #304]	@ (80011b0 <main+0x278>)
 8001080:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001084:	4619      	mov	r1, r3
 8001086:	4b4a      	ldr	r3, [pc, #296]	@ (80011b0 <main+0x278>)
 8001088:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800108c:	f607 000c 	addw	r0, r7, #2060	@ 0x80c
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	460b      	mov	r3, r1
 8001094:	494c      	ldr	r1, [pc, #304]	@ (80011c8 <main+0x290>)
 8001096:	f005 f891 	bl	80061bc <siprintf>
  myComfyPrint(myString);
 800109a:	f607 030c 	addw	r3, r7, #2060	@ 0x80c
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ff2c 	bl	8000efc <myComfyPrint>
  sprintf((char*) myString, "Gyroscope X = %d\r\nGyroscope Y = %d\r\nGyroscope Z = %d\r\n", mpu_values.gyro_x, mpu_values.gyro_y, mpu_values.gyro_z);
 80010a4:	4b42      	ldr	r3, [pc, #264]	@ (80011b0 <main+0x278>)
 80010a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010aa:	461a      	mov	r2, r3
 80010ac:	4b40      	ldr	r3, [pc, #256]	@ (80011b0 <main+0x278>)
 80010ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010b2:	4619      	mov	r1, r3
 80010b4:	4b3e      	ldr	r3, [pc, #248]	@ (80011b0 <main+0x278>)
 80010b6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010ba:	f607 000c 	addw	r0, r7, #2060	@ 0x80c
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	460b      	mov	r3, r1
 80010c2:	4942      	ldr	r1, [pc, #264]	@ (80011cc <main+0x294>)
 80010c4:	f005 f87a 	bl	80061bc <siprintf>
  myComfyPrint(myString);
 80010c8:	f607 030c 	addw	r3, r7, #2060	@ 0x80c
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff ff15 	bl	8000efc <myComfyPrint>
	  //////////////////////////////////
	  //read values from mpu6050 BEGIN//
	  //////////////////////////////////

	  mpu6050_values_t mpu_values;
	  mpu6050_read(&mpu_values);
 80010d2:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 80010d6:	4618      	mov	r0, r3
 80010d8:	f000 fe74 	bl	8001dc4 <mpu6050_read>
	  sprintf((char*) myString, /*sizeof(buff),*/ "Acceleration X = %d\r\nAcceleration Y = %d\r\nAcceleration Z = %d\r\n", mpu_values.acc_x, mpu_values.acc_y, mpu_values.acc_z);
 80010dc:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 80010e0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80010e4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80010e8:	461a      	mov	r2, r3
 80010ea:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 80010ee:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80010f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80010f6:	4619      	mov	r1, r3
 80010f8:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 80010fc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001100:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001104:	4638      	mov	r0, r7
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	460b      	mov	r3, r1
 800110a:	492f      	ldr	r1, [pc, #188]	@ (80011c8 <main+0x290>)
 800110c:	f005 f856 	bl	80061bc <siprintf>
	  myComfyPrint(myString);
 8001110:	463b      	mov	r3, r7
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff fef2 	bl	8000efc <myComfyPrint>
	  sprintf((char*) myString, /*sizeof(buff),*/ "Gyroscope X = %d\r\nGyroscope Y = %d\r\nGyroscope Z = %d\r\n", mpu_values.gyro_x, mpu_values.gyro_y, mpu_values.gyro_z);
 8001118:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 800111c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001120:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001124:	461a      	mov	r2, r3
 8001126:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 800112a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800112e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001132:	4619      	mov	r1, r3
 8001134:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 8001138:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800113c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001140:	4638      	mov	r0, r7
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	460b      	mov	r3, r1
 8001146:	4921      	ldr	r1, [pc, #132]	@ (80011cc <main+0x294>)
 8001148:	f005 f838 	bl	80061bc <siprintf>
	  myComfyPrint(myString);
 800114c:	463b      	mov	r3, r7
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff fed4 	bl	8000efc <myComfyPrint>
	  //some debug stuff 1 BEGIN//
	  ////////////////////////////

	  static int16_t counter = 0;
	  static int16_t myArr[25] = { 0 };
	  myArr[counter] = mpu_values.gyro_y;
 8001154:	4b1e      	ldr	r3, [pc, #120]	@ (80011d0 <main+0x298>)
 8001156:	f9b3 3000 	ldrsh.w	r3, [r3]
 800115a:	461a      	mov	r2, r3
 800115c:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 8001160:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001164:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8001168:	4b1a      	ldr	r3, [pc, #104]	@ (80011d4 <main+0x29c>)
 800116a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  counter = (counter+1) % 25;
 800116e:	4b18      	ldr	r3, [pc, #96]	@ (80011d0 <main+0x298>)
 8001170:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001174:	1c5a      	adds	r2, r3, #1
 8001176:	4b18      	ldr	r3, [pc, #96]	@ (80011d8 <main+0x2a0>)
 8001178:	fb83 1302 	smull	r1, r3, r3, r2
 800117c:	10d9      	asrs	r1, r3, #3
 800117e:	17d3      	asrs	r3, r2, #31
 8001180:	1ac9      	subs	r1, r1, r3
 8001182:	460b      	mov	r3, r1
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	440b      	add	r3, r1
 8001188:	0099      	lsls	r1, r3, #2
 800118a:	440b      	add	r3, r1
 800118c:	1ad1      	subs	r1, r2, r3
 800118e:	b20a      	sxth	r2, r1
 8001190:	4b0f      	ldr	r3, [pc, #60]	@ (80011d0 <main+0x298>)
 8001192:	801a      	strh	r2, [r3, #0]
	  int32_t sum = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	f8c7 3940 	str.w	r3, [r7, #2368]	@ 0x940
	  for(int i = 0; i<25; i++){
 800119a:	2300      	movs	r3, #0
 800119c:	f8c7 393c 	str.w	r3, [r7, #2364]	@ 0x93c
 80011a0:	e02c      	b.n	80011fc <main+0x2c4>
 80011a2:	bf00      	nop
 80011a4:	f3af 8000 	nop.w
 80011a8:	54442d18 	.word	0x54442d18
 80011ac:	400921fb 	.word	0x400921fb
 80011b0:	20000960 	.word	0x20000960
 80011b4:	2000096c 	.word	0x2000096c
 80011b8:	40668000 	.word	0x40668000
 80011bc:	08007010 	.word	0x08007010
 80011c0:	42c80000 	.word	0x42c80000
 80011c4:	08007028 	.word	0x08007028
 80011c8:	08007044 	.word	0x08007044
 80011cc:	08007084 	.word	0x08007084
 80011d0:	2000096e 	.word	0x2000096e
 80011d4:	20000970 	.word	0x20000970
 80011d8:	51eb851f 	.word	0x51eb851f
		  sum += myArr[i];
 80011dc:	4a9a      	ldr	r2, [pc, #616]	@ (8001448 <main+0x510>)
 80011de:	f8d7 393c 	ldr.w	r3, [r7, #2364]	@ 0x93c
 80011e2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80011e6:	461a      	mov	r2, r3
 80011e8:	f8d7 3940 	ldr.w	r3, [r7, #2368]	@ 0x940
 80011ec:	4413      	add	r3, r2
 80011ee:	f8c7 3940 	str.w	r3, [r7, #2368]	@ 0x940
	  for(int i = 0; i<25; i++){
 80011f2:	f8d7 393c 	ldr.w	r3, [r7, #2364]	@ 0x93c
 80011f6:	3301      	adds	r3, #1
 80011f8:	f8c7 393c 	str.w	r3, [r7, #2364]	@ 0x93c
 80011fc:	f8d7 393c 	ldr.w	r3, [r7, #2364]	@ 0x93c
 8001200:	2b18      	cmp	r3, #24
 8001202:	ddeb      	ble.n	80011dc <main+0x2a4>
	  }
	  sprintf((char*) myString, "average gyro_y = %d\r\n", sum/25);
 8001204:	f8d7 3940 	ldr.w	r3, [r7, #2368]	@ 0x940
 8001208:	4a90      	ldr	r2, [pc, #576]	@ (800144c <main+0x514>)
 800120a:	fb82 1203 	smull	r1, r2, r2, r3
 800120e:	10d2      	asrs	r2, r2, #3
 8001210:	17db      	asrs	r3, r3, #31
 8001212:	1ad2      	subs	r2, r2, r3
 8001214:	463b      	mov	r3, r7
 8001216:	498e      	ldr	r1, [pc, #568]	@ (8001450 <main+0x518>)
 8001218:	4618      	mov	r0, r3
 800121a:	f004 ffcf 	bl	80061bc <siprintf>
	  myComfyPrint(myString);
 800121e:	463b      	mov	r3, r7
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff fe6b 	bl	8000efc <myComfyPrint>



	  static int16_t max_acc_x = INT16_MIN;
	  static int16_t min_acc_x = INT16_MAX;
	  if(mpu_values.acc_x > max_acc_x) max_acc_x = mpu_values.acc_x;
 8001226:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 800122a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800122e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8001232:	4b88      	ldr	r3, [pc, #544]	@ (8001454 <main+0x51c>)
 8001234:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001238:	429a      	cmp	r2, r3
 800123a:	dd07      	ble.n	800124c <main+0x314>
 800123c:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 8001240:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001244:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8001248:	4b82      	ldr	r3, [pc, #520]	@ (8001454 <main+0x51c>)
 800124a:	801a      	strh	r2, [r3, #0]
	  if(mpu_values.acc_x < min_acc_x) min_acc_x = mpu_values.acc_x;
 800124c:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 8001250:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001254:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8001258:	4b7f      	ldr	r3, [pc, #508]	@ (8001458 <main+0x520>)
 800125a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800125e:	429a      	cmp	r2, r3
 8001260:	da07      	bge.n	8001272 <main+0x33a>
 8001262:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 8001266:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800126a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800126e:	4b7a      	ldr	r3, [pc, #488]	@ (8001458 <main+0x520>)
 8001270:	801a      	strh	r2, [r3, #0]
	  sprintf((char*) myString, "max diff = %d\r\n", max_acc_x - min_acc_x);
 8001272:	4b78      	ldr	r3, [pc, #480]	@ (8001454 <main+0x51c>)
 8001274:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001278:	461a      	mov	r2, r3
 800127a:	4b77      	ldr	r3, [pc, #476]	@ (8001458 <main+0x520>)
 800127c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001280:	1ad2      	subs	r2, r2, r3
 8001282:	463b      	mov	r3, r7
 8001284:	4975      	ldr	r1, [pc, #468]	@ (800145c <main+0x524>)
 8001286:	4618      	mov	r0, r3
 8001288:	f004 ff98 	bl	80061bc <siprintf>
	  myComfyPrint(myString);
 800128c:	463b      	mov	r3, r7
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fe34 	bl	8000efc <myComfyPrint>
	  //calculate motor values BEGIN//
	  ////////////////////////////////

	  //calculate angle from acceleration values
	  float acc_angle;
	  acc_angle = atan2(mpu_values.acc_x, mpu_values.acc_z)*RAD_TO_DEG;	//*(180/M_PI) to convert from radian to degree
 8001294:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 8001298:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800129c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff f95f 	bl	8000564 <__aeabi_i2d>
 80012a6:	4604      	mov	r4, r0
 80012a8:	460d      	mov	r5, r1
 80012aa:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 80012ae:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80012b2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff f954 	bl	8000564 <__aeabi_i2d>
 80012bc:	4602      	mov	r2, r0
 80012be:	460b      	mov	r3, r1
 80012c0:	ec43 2b11 	vmov	d1, r2, r3
 80012c4:	ec45 4b10 	vmov	d0, r4, r5
 80012c8:	f005 fc2c 	bl	8006b24 <atan2>
 80012cc:	ec51 0b10 	vmov	r0, r1, d0
 80012d0:	f04f 0200 	mov.w	r2, #0
 80012d4:	4b62      	ldr	r3, [pc, #392]	@ (8001460 <main+0x528>)
 80012d6:	f7ff f9af 	bl	8000638 <__aeabi_dmul>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	4610      	mov	r0, r2
 80012e0:	4619      	mov	r1, r3
 80012e2:	a355      	add	r3, pc, #340	@ (adr r3, 8001438 <main+0x500>)
 80012e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e8:	f7ff fad0 	bl	800088c <__aeabi_ddiv>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4610      	mov	r0, r2
 80012f2:	4619      	mov	r1, r3
 80012f4:	f7ff fc3a 	bl	8000b6c <__aeabi_d2f>
 80012f8:	4603      	mov	r3, r0
 80012fa:	f507 6213 	add.w	r2, r7, #2352	@ 0x930
 80012fe:	6013      	str	r3, [r2, #0]

	  //debug prints
	  if(isnan(acc_angle)){
 8001300:	f507 6313 	add.w	r3, r7, #2352	@ 0x930
 8001304:	ed93 7a00 	vldr	s14, [r3]
 8001308:	f507 6313 	add.w	r3, r7, #2352	@ 0x930
 800130c:	edd3 7a00 	vldr	s15, [r3]
 8001310:	eeb4 7a67 	vcmp.f32	s14, s15
 8001314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001318:	d709      	bvc.n	800132e <main+0x3f6>
		  sprintf((char*) myString, "acc_angle is NaN\r\n");
 800131a:	463b      	mov	r3, r7
 800131c:	4951      	ldr	r1, [pc, #324]	@ (8001464 <main+0x52c>)
 800131e:	4618      	mov	r0, r3
 8001320:	f004 ff4c 	bl	80061bc <siprintf>
		  myComfyPrint(myString);
 8001324:	463b      	mov	r3, r7
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff fde8 	bl	8000efc <myComfyPrint>
 800132c:	e014      	b.n	8001358 <main+0x420>
	  }
	  else{
		  sprintf((char*) myString, "acc_angle*100 = %d\r\n", (int) (acc_angle*100));	//apparently floating numbers are disabled in print funcitons by defautl if using newlib
 800132e:	f507 6313 	add.w	r3, r7, #2352	@ 0x930
 8001332:	edd3 7a00 	vldr	s15, [r3]
 8001336:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8001468 <main+0x530>
 800133a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800133e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001342:	463b      	mov	r3, r7
 8001344:	ee17 2a90 	vmov	r2, s15
 8001348:	4948      	ldr	r1, [pc, #288]	@ (800146c <main+0x534>)
 800134a:	4618      	mov	r0, r3
 800134c:	f004 ff36 	bl	80061bc <siprintf>
		  myComfyPrint(myString);
 8001350:	463b      	mov	r3, r7
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff fdd2 	bl	8000efc <myComfyPrint>


	  //debug prints
	  static int16_t counter2 = 0;
	  static int16_t myArr2[100] = { 0 };
	  myArr2[counter2] = acc_angle;
 8001358:	4b45      	ldr	r3, [pc, #276]	@ (8001470 <main+0x538>)
 800135a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800135e:	461a      	mov	r2, r3
 8001360:	f507 6313 	add.w	r3, r7, #2352	@ 0x930
 8001364:	edd3 7a00 	vldr	s15, [r3]
 8001368:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800136c:	ee17 3a90 	vmov	r3, s15
 8001370:	b219      	sxth	r1, r3
 8001372:	4b40      	ldr	r3, [pc, #256]	@ (8001474 <main+0x53c>)
 8001374:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  counter2 = (counter2+1) % 100;
 8001378:	4b3d      	ldr	r3, [pc, #244]	@ (8001470 <main+0x538>)
 800137a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800137e:	3301      	adds	r3, #1
 8001380:	4a32      	ldr	r2, [pc, #200]	@ (800144c <main+0x514>)
 8001382:	fb82 1203 	smull	r1, r2, r2, r3
 8001386:	1151      	asrs	r1, r2, #5
 8001388:	17da      	asrs	r2, r3, #31
 800138a:	1a8a      	subs	r2, r1, r2
 800138c:	2164      	movs	r1, #100	@ 0x64
 800138e:	fb01 f202 	mul.w	r2, r1, r2
 8001392:	1a9a      	subs	r2, r3, r2
 8001394:	b212      	sxth	r2, r2
 8001396:	4b36      	ldr	r3, [pc, #216]	@ (8001470 <main+0x538>)
 8001398:	801a      	strh	r2, [r3, #0]
	  int32_t sum2 = 0;
 800139a:	2300      	movs	r3, #0
 800139c:	f8c7 3938 	str.w	r3, [r7, #2360]	@ 0x938
	  for(int i = 0; i<100; i++){
 80013a0:	2300      	movs	r3, #0
 80013a2:	f8c7 3934 	str.w	r3, [r7, #2356]	@ 0x934
 80013a6:	e00f      	b.n	80013c8 <main+0x490>
		  sum2 += myArr2[i];
 80013a8:	4a32      	ldr	r2, [pc, #200]	@ (8001474 <main+0x53c>)
 80013aa:	f8d7 3934 	ldr.w	r3, [r7, #2356]	@ 0x934
 80013ae:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80013b2:	461a      	mov	r2, r3
 80013b4:	f8d7 3938 	ldr.w	r3, [r7, #2360]	@ 0x938
 80013b8:	4413      	add	r3, r2
 80013ba:	f8c7 3938 	str.w	r3, [r7, #2360]	@ 0x938
	  for(int i = 0; i<100; i++){
 80013be:	f8d7 3934 	ldr.w	r3, [r7, #2356]	@ 0x934
 80013c2:	3301      	adds	r3, #1
 80013c4:	f8c7 3934 	str.w	r3, [r7, #2356]	@ 0x934
 80013c8:	f8d7 3934 	ldr.w	r3, [r7, #2356]	@ 0x934
 80013cc:	2b63      	cmp	r3, #99	@ 0x63
 80013ce:	ddeb      	ble.n	80013a8 <main+0x470>
	  }
	  sprintf((char*) myString, "average acc_angle*100000 = %d\r\n", (sum2*100000)/100);
 80013d0:	f8d7 3938 	ldr.w	r3, [r7, #2360]	@ 0x938
 80013d4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80013d8:	fb03 f202 	mul.w	r2, r3, r2
 80013dc:	463b      	mov	r3, r7
 80013de:	4926      	ldr	r1, [pc, #152]	@ (8001478 <main+0x540>)
 80013e0:	4618      	mov	r0, r3
 80013e2:	f004 feeb 	bl	80061bc <siprintf>
	  myComfyPrint(myString);
 80013e6:	463b      	mov	r3, r7
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff fd87 	bl	8000efc <myComfyPrint>
	  //debug prints


	  ////////////////////////////////
	  //calculate angle from gyroscope
	  float gyro_rate = mpu_values.gyro_y * (1000.0/INT16_MAX);	//500, because that is the range that the mpu6050 is set to currently
 80013ee:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 80013f2:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80013f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff f8b2 	bl	8000564 <__aeabi_i2d>
 8001400:	a30f      	add	r3, pc, #60	@ (adr r3, 8001440 <main+0x508>)
 8001402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001406:	f7ff f917 	bl	8000638 <__aeabi_dmul>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	4610      	mov	r0, r2
 8001410:	4619      	mov	r1, r3
 8001412:	f7ff fbab 	bl	8000b6c <__aeabi_d2f>
 8001416:	4603      	mov	r3, r0
 8001418:	f607 122c 	addw	r2, r7, #2348	@ 0x92c
 800141c:	6013      	str	r3, [r2, #0]
	  static float gyro_angle;
	  static uint32_t current_time=0;
	  static uint32_t last_time;
	  if(done_already == 1){	//this awkward if-else is just temporary, so the last_time  and current_time are not too far apart from eachother, as this would lead to very high motor values there
 800141e:	4b17      	ldr	r3, [pc, #92]	@ (800147c <main+0x544>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d12e      	bne.n	8001484 <main+0x54c>
		  last_time = HAL_GetTick();
 8001426:	f000 ffb7 	bl	8002398 <HAL_GetTick>
 800142a:	4603      	mov	r3, r0
 800142c:	4a14      	ldr	r2, [pc, #80]	@ (8001480 <main+0x548>)
 800142e:	6013      	str	r3, [r2, #0]
		  done_already = 2;
 8001430:	4b12      	ldr	r3, [pc, #72]	@ (800147c <main+0x544>)
 8001432:	2202      	movs	r2, #2
 8001434:	701a      	strb	r2, [r3, #0]
 8001436:	e029      	b.n	800148c <main+0x554>
 8001438:	54442d18 	.word	0x54442d18
 800143c:	400921fb 	.word	0x400921fb
 8001440:	807d00fa 	.word	0x807d00fa
 8001444:	3f9f403e 	.word	0x3f9f403e
 8001448:	20000970 	.word	0x20000970
 800144c:	51eb851f 	.word	0x51eb851f
 8001450:	080070bc 	.word	0x080070bc
 8001454:	20000000 	.word	0x20000000
 8001458:	20000002 	.word	0x20000002
 800145c:	080070d4 	.word	0x080070d4
 8001460:	40668000 	.word	0x40668000
 8001464:	080070e4 	.word	0x080070e4
 8001468:	42c80000 	.word	0x42c80000
 800146c:	080070f8 	.word	0x080070f8
 8001470:	200009a2 	.word	0x200009a2
 8001474:	200009a4 	.word	0x200009a4
 8001478:	08007110 	.word	0x08007110
 800147c:	2000096c 	.word	0x2000096c
 8001480:	20000a6c 	.word	0x20000a6c
	  }
	  else{
		  last_time = current_time;
 8001484:	4b92      	ldr	r3, [pc, #584]	@ (80016d0 <main+0x798>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a92      	ldr	r2, [pc, #584]	@ (80016d4 <main+0x79c>)
 800148a:	6013      	str	r3, [r2, #0]
	  }
	  current_time = HAL_GetTick();
 800148c:	f000 ff84 	bl	8002398 <HAL_GetTick>
 8001490:	4603      	mov	r3, r0
 8001492:	4a8f      	ldr	r2, [pc, #572]	@ (80016d0 <main+0x798>)
 8001494:	6013      	str	r3, [r2, #0]

	  gyro_angle = gyro_angle + gyro_rate*((float)(current_time-last_time)/1000);
 8001496:	4b8e      	ldr	r3, [pc, #568]	@ (80016d0 <main+0x798>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	4b8e      	ldr	r3, [pc, #568]	@ (80016d4 <main+0x79c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	ee07 3a90 	vmov	s15, r3
 80014a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014a8:	eddf 6a8b 	vldr	s13, [pc, #556]	@ 80016d8 <main+0x7a0>
 80014ac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80014b0:	f607 132c 	addw	r3, r7, #2348	@ 0x92c
 80014b4:	edd3 7a00 	vldr	s15, [r3]
 80014b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014bc:	4b87      	ldr	r3, [pc, #540]	@ (80016dc <main+0x7a4>)
 80014be:	edd3 7a00 	vldr	s15, [r3]
 80014c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014c6:	4b85      	ldr	r3, [pc, #532]	@ (80016dc <main+0x7a4>)
 80014c8:	edc3 7a00 	vstr	s15, [r3]
	  sprintf((char*) myString, "gyro_angle*100 = %d\r\n", (int) (gyro_angle*100));	//apparently floating numbers are disabled in print funcitons by defautl if using newlib
 80014cc:	4b83      	ldr	r3, [pc, #524]	@ (80016dc <main+0x7a4>)
 80014ce:	edd3 7a00 	vldr	s15, [r3]
 80014d2:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 80016e0 <main+0x7a8>
 80014d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014de:	463b      	mov	r3, r7
 80014e0:	ee17 2a90 	vmov	r2, s15
 80014e4:	497f      	ldr	r1, [pc, #508]	@ (80016e4 <main+0x7ac>)
 80014e6:	4618      	mov	r0, r3
 80014e8:	f004 fe68 	bl	80061bc <siprintf>
	  myComfyPrint(myString);
 80014ec:	463b      	mov	r3, r7
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff fd04 	bl	8000efc <myComfyPrint>

	  //////////////////////////////
	  //combine both values into one
	  static float current_angle=0;
	  static float last_angle=0;
	  float alpha = 0.9934;
 80014f4:	4b7c      	ldr	r3, [pc, #496]	@ (80016e8 <main+0x7b0>)
 80014f6:	f607 1228 	addw	r2, r7, #2344	@ 0x928
 80014fa:	6013      	str	r3, [r2, #0]
	  last_angle = current_angle;
 80014fc:	4b7b      	ldr	r3, [pc, #492]	@ (80016ec <main+0x7b4>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a7b      	ldr	r2, [pc, #492]	@ (80016f0 <main+0x7b8>)
 8001502:	6013      	str	r3, [r2, #0]
	  current_angle = alpha * (gyro_angle) + (float) (1-alpha) * acc_angle;
 8001504:	4b75      	ldr	r3, [pc, #468]	@ (80016dc <main+0x7a4>)
 8001506:	ed93 7a00 	vldr	s14, [r3]
 800150a:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 800150e:	edd3 7a00 	vldr	s15, [r3]
 8001512:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001516:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800151a:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 800151e:	edd3 7a00 	vldr	s15, [r3]
 8001522:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001526:	f507 6313 	add.w	r3, r7, #2352	@ 0x930
 800152a:	edd3 7a00 	vldr	s15, [r3]
 800152e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001532:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001536:	4b6d      	ldr	r3, [pc, #436]	@ (80016ec <main+0x7b4>)
 8001538:	edc3 7a00 	vstr	s15, [r3]

	  if(done_already == 2){	//awkward if, so last_angle is not extremely different from current_angle on the first iteration as this would possibly lead to very high motor values there
 800153c:	4b6d      	ldr	r3, [pc, #436]	@ (80016f4 <main+0x7bc>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b02      	cmp	r3, #2
 8001542:	d106      	bne.n	8001552 <main+0x61a>
		last_angle = current_angle;
 8001544:	4b69      	ldr	r3, [pc, #420]	@ (80016ec <main+0x7b4>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a69      	ldr	r2, [pc, #420]	@ (80016f0 <main+0x7b8>)
 800154a:	6013      	str	r3, [r2, #0]
		done_already = 3;
 800154c:	4b69      	ldr	r3, [pc, #420]	@ (80016f4 <main+0x7bc>)
 800154e:	2203      	movs	r2, #3
 8001550:	701a      	strb	r2, [r3, #0]
	  }

	  //debug print
	  sprintf((char*) myString, "combined_angle*100 = %d\r\n", (int) current_angle);
 8001552:	4b66      	ldr	r3, [pc, #408]	@ (80016ec <main+0x7b4>)
 8001554:	edd3 7a00 	vldr	s15, [r3]
 8001558:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800155c:	463b      	mov	r3, r7
 800155e:	ee17 2a90 	vmov	r2, s15
 8001562:	4965      	ldr	r1, [pc, #404]	@ (80016f8 <main+0x7c0>)
 8001564:	4618      	mov	r0, r3
 8001566:	f004 fe29 	bl	80061bc <siprintf>
	  myComfyPrint(myString);
 800156a:	463b      	mov	r3, r7
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff fcc5 	bl	8000efc <myComfyPrint>
	  //debug print

	  /////
	  //PID
	  float target_angle = 0;
 8001572:	f04f 0300 	mov.w	r3, #0
 8001576:	f607 1224 	addw	r2, r7, #2340	@ 0x924
 800157a:	6013      	str	r3, [r2, #0]
	  float deviation = current_angle - target_angle;
 800157c:	4b5b      	ldr	r3, [pc, #364]	@ (80016ec <main+0x7b4>)
 800157e:	ed93 7a00 	vldr	s14, [r3]
 8001582:	f607 1324 	addw	r3, r7, #2340	@ 0x924
 8001586:	edd3 7a00 	vldr	s15, [r3]
 800158a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800158e:	f507 6312 	add.w	r3, r7, #2336	@ 0x920
 8001592:	edc3 7a00 	vstr	s15, [r3]
	  static float deviation_sum;
	  deviation_sum = deviation_sum + deviation;
 8001596:	4b59      	ldr	r3, [pc, #356]	@ (80016fc <main+0x7c4>)
 8001598:	ed93 7a00 	vldr	s14, [r3]
 800159c:	f507 6312 	add.w	r3, r7, #2336	@ 0x920
 80015a0:	edd3 7a00 	vldr	s15, [r3]
 80015a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015a8:	4b54      	ldr	r3, [pc, #336]	@ (80016fc <main+0x7c4>)
 80015aa:	edc3 7a00 	vstr	s15, [r3]
	  //add constraining of max value of deviation_sum here

	  float Kp=12, Ki=0, Kd=0;
 80015ae:	4b54      	ldr	r3, [pc, #336]	@ (8001700 <main+0x7c8>)
 80015b0:	f607 121c 	addw	r2, r7, #2332	@ 0x91c
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	f04f 0300 	mov.w	r3, #0
 80015ba:	f607 1218 	addw	r2, r7, #2328	@ 0x918
 80015be:	6013      	str	r3, [r2, #0]
 80015c0:	f04f 0300 	mov.w	r3, #0
 80015c4:	f607 1214 	addw	r2, r7, #2324	@ 0x914
 80015c8:	6013      	str	r3, [r2, #0]
	  float motor_value_in_percent = Kp*deviation + Ki*deviation_sum*((float)(current_time-last_time)/1000) - Kd*(current_angle-last_angle)/((float)(current_time-last_time)/1000);
 80015ca:	f607 131c 	addw	r3, r7, #2332	@ 0x91c
 80015ce:	ed93 7a00 	vldr	s14, [r3]
 80015d2:	f507 6312 	add.w	r3, r7, #2336	@ 0x920
 80015d6:	edd3 7a00 	vldr	s15, [r3]
 80015da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015de:	4b47      	ldr	r3, [pc, #284]	@ (80016fc <main+0x7c4>)
 80015e0:	edd3 6a00 	vldr	s13, [r3]
 80015e4:	f607 1318 	addw	r3, r7, #2328	@ 0x918
 80015e8:	edd3 7a00 	vldr	s15, [r3]
 80015ec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80015f0:	4b37      	ldr	r3, [pc, #220]	@ (80016d0 <main+0x798>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4b37      	ldr	r3, [pc, #220]	@ (80016d4 <main+0x79c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	ee07 3a90 	vmov	s15, r3
 80015fe:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8001602:	eddf 5a35 	vldr	s11, [pc, #212]	@ 80016d8 <main+0x7a0>
 8001606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800160a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800160e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001612:	4b36      	ldr	r3, [pc, #216]	@ (80016ec <main+0x7b4>)
 8001614:	edd3 6a00 	vldr	s13, [r3]
 8001618:	4b35      	ldr	r3, [pc, #212]	@ (80016f0 <main+0x7b8>)
 800161a:	edd3 7a00 	vldr	s15, [r3]
 800161e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001622:	f607 1314 	addw	r3, r7, #2324	@ 0x914
 8001626:	edd3 7a00 	vldr	s15, [r3]
 800162a:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800162e:	4b28      	ldr	r3, [pc, #160]	@ (80016d0 <main+0x798>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	4b28      	ldr	r3, [pc, #160]	@ (80016d4 <main+0x79c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	ee07 3a90 	vmov	s15, r3
 800163c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001640:	eddf 5a25 	vldr	s11, [pc, #148]	@ 80016d8 <main+0x7a0>
 8001644:	eec7 6aa5 	vdiv.f32	s13, s15, s11
 8001648:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800164c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001650:	f507 6311 	add.w	r3, r7, #2320	@ 0x910
 8001654:	edc3 7a00 	vstr	s15, [r3]
	  int32_t motor_value = (motor_value_in_percent * MOTOR_MAX_SPEED) /100;
 8001658:	f507 6311 	add.w	r3, r7, #2320	@ 0x910
 800165c:	edd3 7a00 	vldr	s15, [r3]
 8001660:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001704 <main+0x7cc>
 8001664:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001668:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 80016e0 <main+0x7a8>
 800166c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001670:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001674:	ee17 3a90 	vmov	r3, s15
 8001678:	f8c7 390c 	str.w	r3, [r7, #2316]	@ 0x90c

	  ///////////////////////
	  //control motor BEGIN//
	  ///////////////////////

	  if(motor_value >= 0){
 800167c:	f8d7 390c 	ldr.w	r3, [r7, #2316]	@ 0x90c
 8001680:	2b00      	cmp	r3, #0
 8001682:	db0a      	blt.n	800169a <main+0x762>
		  motor_control(MOTOR_DIR_FORWARDS, (uint16_t) abs(motor_value));
 8001684:	f8d7 390c 	ldr.w	r3, [r7, #2316]	@ 0x90c
 8001688:	2b00      	cmp	r3, #0
 800168a:	bfb8      	it	lt
 800168c:	425b      	neglt	r3, r3
 800168e:	b29b      	uxth	r3, r3
 8001690:	4619      	mov	r1, r3
 8001692:	2000      	movs	r0, #0
 8001694:	f000 f9fa 	bl	8001a8c <motor_control>
 8001698:	e00d      	b.n	80016b6 <main+0x77e>
	  }
	  else if(motor_value < 0){
 800169a:	f8d7 390c 	ldr.w	r3, [r7, #2316]	@ 0x90c
 800169e:	2b00      	cmp	r3, #0
 80016a0:	da09      	bge.n	80016b6 <main+0x77e>
		  motor_control(MOTOR_DIR_BACKWARDS, (uint16_t) abs(motor_value));
 80016a2:	f8d7 390c 	ldr.w	r3, [r7, #2316]	@ 0x90c
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	bfb8      	it	lt
 80016aa:	425b      	neglt	r3, r3
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	4619      	mov	r1, r3
 80016b0:	2001      	movs	r0, #1
 80016b2:	f000 f9eb 	bl	8001a8c <motor_control>
	  }

	  sprintf((char*) myString, "calculated motorValue = %d\r\n", motor_value);
 80016b6:	463b      	mov	r3, r7
 80016b8:	f8d7 290c 	ldr.w	r2, [r7, #2316]	@ 0x90c
 80016bc:	4912      	ldr	r1, [pc, #72]	@ (8001708 <main+0x7d0>)
 80016be:	4618      	mov	r0, r3
 80016c0:	f004 fd7c 	bl	80061bc <siprintf>
	  myComfyPrint(myString);
 80016c4:	463b      	mov	r3, r7
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fc18 	bl	8000efc <myComfyPrint>
  {
 80016cc:	e501      	b.n	80010d2 <main+0x19a>
 80016ce:	bf00      	nop
 80016d0:	20000a70 	.word	0x20000a70
 80016d4:	20000a6c 	.word	0x20000a6c
 80016d8:	447a0000 	.word	0x447a0000
 80016dc:	20000a74 	.word	0x20000a74
 80016e0:	42c80000 	.word	0x42c80000
 80016e4:	08007130 	.word	0x08007130
 80016e8:	3f7e4f76 	.word	0x3f7e4f76
 80016ec:	20000a78 	.word	0x20000a78
 80016f0:	20000a7c 	.word	0x20000a7c
 80016f4:	2000096c 	.word	0x2000096c
 80016f8:	08007148 	.word	0x08007148
 80016fc:	20000a80 	.word	0x20000a80
 8001700:	41400000 	.word	0x41400000
 8001704:	46033c00 	.word	0x46033c00
 8001708:	08007164 	.word	0x08007164

0800170c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b094      	sub	sp, #80	@ 0x50
 8001710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001712:	f107 031c 	add.w	r3, r7, #28
 8001716:	2234      	movs	r2, #52	@ 0x34
 8001718:	2100      	movs	r1, #0
 800171a:	4618      	mov	r0, r3
 800171c:	f004 fd6e 	bl	80061fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001720:	f107 0308 	add.w	r3, r7, #8
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001730:	2300      	movs	r3, #0
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	4b2a      	ldr	r3, [pc, #168]	@ (80017e0 <SystemClock_Config+0xd4>)
 8001736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001738:	4a29      	ldr	r2, [pc, #164]	@ (80017e0 <SystemClock_Config+0xd4>)
 800173a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800173e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001740:	4b27      	ldr	r3, [pc, #156]	@ (80017e0 <SystemClock_Config+0xd4>)
 8001742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001744:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001748:	607b      	str	r3, [r7, #4]
 800174a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800174c:	2300      	movs	r3, #0
 800174e:	603b      	str	r3, [r7, #0]
 8001750:	4b24      	ldr	r3, [pc, #144]	@ (80017e4 <SystemClock_Config+0xd8>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001758:	4a22      	ldr	r2, [pc, #136]	@ (80017e4 <SystemClock_Config+0xd8>)
 800175a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800175e:	6013      	str	r3, [r2, #0]
 8001760:	4b20      	ldr	r3, [pc, #128]	@ (80017e4 <SystemClock_Config+0xd8>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001768:	603b      	str	r3, [r7, #0]
 800176a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800176c:	2302      	movs	r3, #2
 800176e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001770:	2301      	movs	r3, #1
 8001772:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001774:	2310      	movs	r3, #16
 8001776:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001778:	2302      	movs	r3, #2
 800177a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800177c:	2300      	movs	r3, #0
 800177e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001780:	2310      	movs	r3, #16
 8001782:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001784:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001788:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800178a:	2304      	movs	r3, #4
 800178c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800178e:	2302      	movs	r3, #2
 8001790:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001792:	2302      	movs	r3, #2
 8001794:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001796:	f107 031c 	add.w	r3, r7, #28
 800179a:	4618      	mov	r0, r3
 800179c:	f002 fd66 	bl	800426c <HAL_RCC_OscConfig>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80017a6:	f000 f95d 	bl	8001a64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017aa:	230f      	movs	r3, #15
 80017ac:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017ae:	2302      	movs	r3, #2
 80017b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017b2:	2300      	movs	r3, #0
 80017b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017bc:	2300      	movs	r3, #0
 80017be:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017c0:	f107 0308 	add.w	r3, r7, #8
 80017c4:	2102      	movs	r1, #2
 80017c6:	4618      	mov	r0, r3
 80017c8:	f002 f9d4 	bl	8003b74 <HAL_RCC_ClockConfig>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80017d2:	f000 f947 	bl	8001a64 <Error_Handler>
  }
}
 80017d6:	bf00      	nop
 80017d8:	3750      	adds	r7, #80	@ 0x50
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40023800 	.word	0x40023800
 80017e4:	40007000 	.word	0x40007000

080017e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017ec:	4b12      	ldr	r3, [pc, #72]	@ (8001838 <MX_I2C1_Init+0x50>)
 80017ee:	4a13      	ldr	r2, [pc, #76]	@ (800183c <MX_I2C1_Init+0x54>)
 80017f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017f2:	4b11      	ldr	r3, [pc, #68]	@ (8001838 <MX_I2C1_Init+0x50>)
 80017f4:	4a12      	ldr	r2, [pc, #72]	@ (8001840 <MX_I2C1_Init+0x58>)
 80017f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001838 <MX_I2C1_Init+0x50>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001838 <MX_I2C1_Init+0x50>)
 8001800:	2200      	movs	r2, #0
 8001802:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001804:	4b0c      	ldr	r3, [pc, #48]	@ (8001838 <MX_I2C1_Init+0x50>)
 8001806:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800180a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800180c:	4b0a      	ldr	r3, [pc, #40]	@ (8001838 <MX_I2C1_Init+0x50>)
 800180e:	2200      	movs	r2, #0
 8001810:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001812:	4b09      	ldr	r3, [pc, #36]	@ (8001838 <MX_I2C1_Init+0x50>)
 8001814:	2200      	movs	r2, #0
 8001816:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001818:	4b07      	ldr	r3, [pc, #28]	@ (8001838 <MX_I2C1_Init+0x50>)
 800181a:	2200      	movs	r2, #0
 800181c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800181e:	4b06      	ldr	r3, [pc, #24]	@ (8001838 <MX_I2C1_Init+0x50>)
 8001820:	2200      	movs	r2, #0
 8001822:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001824:	4804      	ldr	r0, [pc, #16]	@ (8001838 <MX_I2C1_Init+0x50>)
 8001826:	f001 f853 	bl	80028d0 <HAL_I2C_Init>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001830:	f000 f918 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}
 8001838:	2000087c 	.word	0x2000087c
 800183c:	40005400 	.word	0x40005400
 8001840:	000186a0 	.word	0x000186a0

08001844 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08a      	sub	sp, #40	@ 0x28
 8001848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800184a:	f107 0320 	add.w	r3, r7, #32
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001854:	1d3b      	adds	r3, r7, #4
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]
 800185c:	609a      	str	r2, [r3, #8]
 800185e:	60da      	str	r2, [r3, #12]
 8001860:	611a      	str	r2, [r3, #16]
 8001862:	615a      	str	r2, [r3, #20]
 8001864:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001866:	4b27      	ldr	r3, [pc, #156]	@ (8001904 <MX_TIM3_Init+0xc0>)
 8001868:	4a27      	ldr	r2, [pc, #156]	@ (8001908 <MX_TIM3_Init+0xc4>)
 800186a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800186c:	4b25      	ldr	r3, [pc, #148]	@ (8001904 <MX_TIM3_Init+0xc0>)
 800186e:	2200      	movs	r2, #0
 8001870:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001872:	4b24      	ldr	r3, [pc, #144]	@ (8001904 <MX_TIM3_Init+0xc0>)
 8001874:	2200      	movs	r2, #0
 8001876:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8400-1;
 8001878:	4b22      	ldr	r3, [pc, #136]	@ (8001904 <MX_TIM3_Init+0xc0>)
 800187a:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800187e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001880:	4b20      	ldr	r3, [pc, #128]	@ (8001904 <MX_TIM3_Init+0xc0>)
 8001882:	2200      	movs	r2, #0
 8001884:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001886:	4b1f      	ldr	r3, [pc, #124]	@ (8001904 <MX_TIM3_Init+0xc0>)
 8001888:	2200      	movs	r2, #0
 800188a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800188c:	481d      	ldr	r0, [pc, #116]	@ (8001904 <MX_TIM3_Init+0xc0>)
 800188e:	f003 f855 	bl	800493c <HAL_TIM_PWM_Init>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001898:	f000 f8e4 	bl	8001a64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800189c:	2300      	movs	r3, #0
 800189e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a0:	2300      	movs	r3, #0
 80018a2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018a4:	f107 0320 	add.w	r3, r7, #32
 80018a8:	4619      	mov	r1, r3
 80018aa:	4816      	ldr	r0, [pc, #88]	@ (8001904 <MX_TIM3_Init+0xc0>)
 80018ac:	f003 fdba 	bl	8005424 <HAL_TIMEx_MasterConfigSynchronization>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80018b6:	f000 f8d5 	bl	8001a64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018ba:	2360      	movs	r3, #96	@ 0x60
 80018bc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018c6:	2300      	movs	r3, #0
 80018c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018ca:	1d3b      	adds	r3, r7, #4
 80018cc:	2200      	movs	r2, #0
 80018ce:	4619      	mov	r1, r3
 80018d0:	480c      	ldr	r0, [pc, #48]	@ (8001904 <MX_TIM3_Init+0xc0>)
 80018d2:	f003 fa3b 	bl	8004d4c <HAL_TIM_PWM_ConfigChannel>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80018dc:	f000 f8c2 	bl	8001a64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018e0:	1d3b      	adds	r3, r7, #4
 80018e2:	2204      	movs	r2, #4
 80018e4:	4619      	mov	r1, r3
 80018e6:	4807      	ldr	r0, [pc, #28]	@ (8001904 <MX_TIM3_Init+0xc0>)
 80018e8:	f003 fa30 	bl	8004d4c <HAL_TIM_PWM_ConfigChannel>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80018f2:	f000 f8b7 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80018f6:	4803      	ldr	r0, [pc, #12]	@ (8001904 <MX_TIM3_Init+0xc0>)
 80018f8:	f000 fb62 	bl	8001fc0 <HAL_TIM_MspPostInit>

}
 80018fc:	bf00      	nop
 80018fe:	3728      	adds	r7, #40	@ 0x28
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	200008d0 	.word	0x200008d0
 8001908:	40000400 	.word	0x40000400

0800190c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001910:	4b11      	ldr	r3, [pc, #68]	@ (8001958 <MX_USART2_UART_Init+0x4c>)
 8001912:	4a12      	ldr	r2, [pc, #72]	@ (800195c <MX_USART2_UART_Init+0x50>)
 8001914:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001916:	4b10      	ldr	r3, [pc, #64]	@ (8001958 <MX_USART2_UART_Init+0x4c>)
 8001918:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800191c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800191e:	4b0e      	ldr	r3, [pc, #56]	@ (8001958 <MX_USART2_UART_Init+0x4c>)
 8001920:	2200      	movs	r2, #0
 8001922:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001924:	4b0c      	ldr	r3, [pc, #48]	@ (8001958 <MX_USART2_UART_Init+0x4c>)
 8001926:	2200      	movs	r2, #0
 8001928:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800192a:	4b0b      	ldr	r3, [pc, #44]	@ (8001958 <MX_USART2_UART_Init+0x4c>)
 800192c:	2200      	movs	r2, #0
 800192e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001930:	4b09      	ldr	r3, [pc, #36]	@ (8001958 <MX_USART2_UART_Init+0x4c>)
 8001932:	220c      	movs	r2, #12
 8001934:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001936:	4b08      	ldr	r3, [pc, #32]	@ (8001958 <MX_USART2_UART_Init+0x4c>)
 8001938:	2200      	movs	r2, #0
 800193a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800193c:	4b06      	ldr	r3, [pc, #24]	@ (8001958 <MX_USART2_UART_Init+0x4c>)
 800193e:	2200      	movs	r2, #0
 8001940:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001942:	4805      	ldr	r0, [pc, #20]	@ (8001958 <MX_USART2_UART_Init+0x4c>)
 8001944:	f003 fdfe 	bl	8005544 <HAL_UART_Init>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800194e:	f000 f889 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000918 	.word	0x20000918
 800195c:	40004400 	.word	0x40004400

08001960 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b08a      	sub	sp, #40	@ 0x28
 8001964:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001966:	f107 0314 	add.w	r3, r7, #20
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	609a      	str	r2, [r3, #8]
 8001972:	60da      	str	r2, [r3, #12]
 8001974:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	4b2e      	ldr	r3, [pc, #184]	@ (8001a34 <MX_GPIO_Init+0xd4>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197e:	4a2d      	ldr	r2, [pc, #180]	@ (8001a34 <MX_GPIO_Init+0xd4>)
 8001980:	f043 0304 	orr.w	r3, r3, #4
 8001984:	6313      	str	r3, [r2, #48]	@ 0x30
 8001986:	4b2b      	ldr	r3, [pc, #172]	@ (8001a34 <MX_GPIO_Init+0xd4>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198a:	f003 0304 	and.w	r3, r3, #4
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	4b27      	ldr	r3, [pc, #156]	@ (8001a34 <MX_GPIO_Init+0xd4>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199a:	4a26      	ldr	r2, [pc, #152]	@ (8001a34 <MX_GPIO_Init+0xd4>)
 800199c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019a2:	4b24      	ldr	r3, [pc, #144]	@ (8001a34 <MX_GPIO_Init+0xd4>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	60bb      	str	r3, [r7, #8]
 80019b2:	4b20      	ldr	r3, [pc, #128]	@ (8001a34 <MX_GPIO_Init+0xd4>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b6:	4a1f      	ldr	r2, [pc, #124]	@ (8001a34 <MX_GPIO_Init+0xd4>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019be:	4b1d      	ldr	r3, [pc, #116]	@ (8001a34 <MX_GPIO_Init+0xd4>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	60bb      	str	r3, [r7, #8]
 80019c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	607b      	str	r3, [r7, #4]
 80019ce:	4b19      	ldr	r3, [pc, #100]	@ (8001a34 <MX_GPIO_Init+0xd4>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d2:	4a18      	ldr	r2, [pc, #96]	@ (8001a34 <MX_GPIO_Init+0xd4>)
 80019d4:	f043 0302 	orr.w	r3, r3, #2
 80019d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019da:	4b16      	ldr	r3, [pc, #88]	@ (8001a34 <MX_GPIO_Init+0xd4>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	607b      	str	r3, [r7, #4]
 80019e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|MOTOR2_DIR_Pin|MOTOR3_DIR_Pin, GPIO_PIN_RESET);
 80019e6:	2200      	movs	r2, #0
 80019e8:	f44f 7118 	mov.w	r1, #608	@ 0x260
 80019ec:	4812      	ldr	r0, [pc, #72]	@ (8001a38 <MX_GPIO_Init+0xd8>)
 80019ee:	f000 ff55 	bl	800289c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019f8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80019fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a02:	f107 0314 	add.w	r3, r7, #20
 8001a06:	4619      	mov	r1, r3
 8001a08:	480c      	ldr	r0, [pc, #48]	@ (8001a3c <MX_GPIO_Init+0xdc>)
 8001a0a:	f000 fdb3 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin MOTOR2_DIR_Pin MOTOR3_DIR_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|MOTOR2_DIR_Pin|MOTOR3_DIR_Pin;
 8001a0e:	f44f 7318 	mov.w	r3, #608	@ 0x260
 8001a12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a14:	2301      	movs	r3, #1
 8001a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a20:	f107 0314 	add.w	r3, r7, #20
 8001a24:	4619      	mov	r1, r3
 8001a26:	4804      	ldr	r0, [pc, #16]	@ (8001a38 <MX_GPIO_Init+0xd8>)
 8001a28:	f000 fda4 	bl	8002574 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a2c:	bf00      	nop
 8001a2e:	3728      	adds	r7, #40	@ 0x28
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40023800 	.word	0x40023800
 8001a38:	40020000 	.word	0x40020000
 8001a3c:	40020800 	.word	0x40020800

08001a40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a04      	ldr	r2, [pc, #16]	@ (8001a60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d101      	bne.n	8001a56 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a52:	f000 fc8d 	bl	8002370 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40001000 	.word	0x40001000

08001a64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a68:	b672      	cpsid	i
}
 8001a6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a6c:	bf00      	nop
 8001a6e:	e7fd      	b.n	8001a6c <Error_Handler+0x8>

08001a70 <motor_init>:


extern TIM_HandleTypeDef htim3;


void motor_init(){
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
	//initialize PWM
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001a74:	2100      	movs	r1, #0
 8001a76:	4804      	ldr	r0, [pc, #16]	@ (8001a88 <motor_init+0x18>)
 8001a78:	f002 ffb0 	bl	80049dc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001a7c:	2104      	movs	r1, #4
 8001a7e:	4802      	ldr	r0, [pc, #8]	@ (8001a88 <motor_init+0x18>)
 8001a80:	f002 ffac 	bl	80049dc <HAL_TIM_PWM_Start>
}
 8001a84:	bf00      	nop
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	200008d0 	.word	0x200008d0

08001a8c <motor_control>:

void motor_control(uint8_t direction, uint16_t speed){
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	460a      	mov	r2, r1
 8001a96:	71fb      	strb	r3, [r7, #7]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	80bb      	strh	r3, [r7, #4]
  //direction 0=forward, 1=backward, everything else leaves the current direction
  //speed 0=off, 255=max

  //Error Handling
  if(speed<0) speed=0;
  if(speed>MOTOR_MAX_SPEED) speed=MOTOR_MAX_SPEED;
 8001a9c:	88bb      	ldrh	r3, [r7, #4]
 8001a9e:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d902      	bls.n	8001aac <motor_control+0x20>
 8001aa6:	f242 03cf 	movw	r3, #8399	@ 0x20cf
 8001aaa:	80bb      	strh	r3, [r7, #4]

  //set motor direction
  switch(direction){
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d002      	beq.n	8001ab8 <motor_control+0x2c>
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d00c      	beq.n	8001ad0 <motor_control+0x44>
	  HAL_GPIO_WritePin(MOTOR2_DIR_GPIO_Port, MOTOR2_DIR_Pin, GPIO_PIN_SET);
	  HAL_GPIO_WritePin(MOTOR3_DIR_GPIO_Port, MOTOR3_DIR_Pin, GPIO_PIN_SET);
	  break;
  default:
	  //do nothing
	  break;
 8001ab6:	e017      	b.n	8001ae8 <motor_control+0x5c>
	  HAL_GPIO_WritePin(MOTOR2_DIR_GPIO_Port, MOTOR2_DIR_Pin, GPIO_PIN_RESET);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	2140      	movs	r1, #64	@ 0x40
 8001abc:	4810      	ldr	r0, [pc, #64]	@ (8001b00 <motor_control+0x74>)
 8001abe:	f000 feed 	bl	800289c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(MOTOR3_DIR_GPIO_Port, MOTOR3_DIR_Pin, GPIO_PIN_RESET);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ac8:	480d      	ldr	r0, [pc, #52]	@ (8001b00 <motor_control+0x74>)
 8001aca:	f000 fee7 	bl	800289c <HAL_GPIO_WritePin>
	  break;
 8001ace:	e00b      	b.n	8001ae8 <motor_control+0x5c>
	  HAL_GPIO_WritePin(MOTOR2_DIR_GPIO_Port, MOTOR2_DIR_Pin, GPIO_PIN_SET);
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	2140      	movs	r1, #64	@ 0x40
 8001ad4:	480a      	ldr	r0, [pc, #40]	@ (8001b00 <motor_control+0x74>)
 8001ad6:	f000 fee1 	bl	800289c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(MOTOR3_DIR_GPIO_Port, MOTOR3_DIR_Pin, GPIO_PIN_SET);
 8001ada:	2201      	movs	r2, #1
 8001adc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ae0:	4807      	ldr	r0, [pc, #28]	@ (8001b00 <motor_control+0x74>)
 8001ae2:	f000 fedb 	bl	800289c <HAL_GPIO_WritePin>
	  break;
 8001ae6:	bf00      	nop
  }

  //set motor speed
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, speed);
 8001ae8:	4b06      	ldr	r3, [pc, #24]	@ (8001b04 <motor_control+0x78>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	88ba      	ldrh	r2, [r7, #4]
 8001aee:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, speed);
 8001af0:	4b04      	ldr	r3, [pc, #16]	@ (8001b04 <motor_control+0x78>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	88ba      	ldrh	r2, [r7, #4]
 8001af6:	639a      	str	r2, [r3, #56]	@ 0x38

}
 8001af8:	bf00      	nop
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40020000 	.word	0x40020000
 8001b04:	200008d0 	.word	0x200008d0

08001b08 <mpu6050_init>:
#include <string.h>

extern I2C_HandleTypeDef hi2c1;
extern UART_HandleTypeDef huart2;

void mpu6050_init(){
 8001b08:	b5b0      	push	{r4, r5, r7, lr}
 8001b0a:	b0c6      	sub	sp, #280	@ 0x118
 8001b0c:	af04      	add	r7, sp, #16

	uint8_t buff[256] = { 0 };
 8001b0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001b12:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	3304      	adds	r3, #4
 8001b1c:	22fc      	movs	r2, #252	@ 0xfc
 8001b1e:	2100      	movs	r1, #0
 8001b20:	4618      	mov	r0, r3
 8001b22:	f004 fb6b 	bl	80061fc <memset>

	//check if MPU is ready
	  if(HAL_I2C_IsDeviceReady(&hi2c1, (DEVICE_ADDRESS<<1) +0, 1, 100) == HAL_OK){
 8001b26:	2364      	movs	r3, #100	@ 0x64
 8001b28:	2201      	movs	r2, #1
 8001b2a:	21d0      	movs	r1, #208	@ 0xd0
 8001b2c:	489b      	ldr	r0, [pc, #620]	@ (8001d9c <mpu6050_init+0x294>)
 8001b2e:	f001 fb3f 	bl	80031b0 <HAL_I2C_IsDeviceReady>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d11a      	bne.n	8001b6e <mpu6050_init+0x66>
		  strcpy((char*) buff, "The device is ready\r\n");
 8001b38:	f107 0308 	add.w	r3, r7, #8
 8001b3c:	4a98      	ldr	r2, [pc, #608]	@ (8001da0 <mpu6050_init+0x298>)
 8001b3e:	461c      	mov	r4, r3
 8001b40:	4615      	mov	r5, r2
 8001b42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b46:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b4a:	6020      	str	r0, [r4, #0]
 8001b4c:	3404      	adds	r4, #4
 8001b4e:	8021      	strh	r1, [r4, #0]
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8001b50:	f107 0308 	add.w	r3, r7, #8
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7fe fb5b 	bl	8000210 <strlen>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	f107 0108 	add.w	r1, r7, #8
 8001b62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b66:	488f      	ldr	r0, [pc, #572]	@ (8001da4 <mpu6050_init+0x29c>)
 8001b68:	f003 fd3c 	bl	80055e4 <HAL_UART_Transmit>
 8001b6c:	e01a      	b.n	8001ba4 <mpu6050_init+0x9c>
	  }
	  else{
		  strcpy((char*) buff, "The device is not ready. Check the cables\r\n");
 8001b6e:	f107 0308 	add.w	r3, r7, #8
 8001b72:	4a8d      	ldr	r2, [pc, #564]	@ (8001da8 <mpu6050_init+0x2a0>)
 8001b74:	461c      	mov	r4, r3
 8001b76:	4615      	mov	r5, r2
 8001b78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b80:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8001b88:	f107 0308 	add.w	r3, r7, #8
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7fe fb3f 	bl	8000210 <strlen>
 8001b92:	4603      	mov	r3, r0
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	f107 0108 	add.w	r1, r7, #8
 8001b9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b9e:	4881      	ldr	r0, [pc, #516]	@ (8001da4 <mpu6050_init+0x29c>)
 8001ba0:	f003 fd20 	bl	80055e4 <HAL_UART_Transmit>
	  }

	  //configure gyroscope
	  uint8_t gyroscope_range = FS_GYRO_1000;	//set gyroscope range to 500 °/s
 8001ba4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001ba8:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8001bac:	2210      	movs	r2, #16
 8001bae:	701a      	strb	r2, [r3, #0]
	  if(HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS<<1) +0, REG_CONFIG_GYRO, 1, &gyroscope_range, sizeof(gyroscope_range), 100) == HAL_OK){
 8001bb0:	2364      	movs	r3, #100	@ 0x64
 8001bb2:	9302      	str	r3, [sp, #8]
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	9301      	str	r3, [sp, #4]
 8001bb8:	1dfb      	adds	r3, r7, #7
 8001bba:	9300      	str	r3, [sp, #0]
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	221b      	movs	r2, #27
 8001bc0:	21d0      	movs	r1, #208	@ 0xd0
 8001bc2:	4876      	ldr	r0, [pc, #472]	@ (8001d9c <mpu6050_init+0x294>)
 8001bc4:	f000 ffc8 	bl	8002b58 <HAL_I2C_Mem_Write>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d11d      	bne.n	8001c0a <mpu6050_init+0x102>
		  strcpy((char*) buff, "gyroscope range successfully set\r\n");
 8001bce:	f107 0308 	add.w	r3, r7, #8
 8001bd2:	4a76      	ldr	r2, [pc, #472]	@ (8001dac <mpu6050_init+0x2a4>)
 8001bd4:	461c      	mov	r4, r3
 8001bd6:	4615      	mov	r5, r2
 8001bd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001be0:	682b      	ldr	r3, [r5, #0]
 8001be2:	461a      	mov	r2, r3
 8001be4:	8022      	strh	r2, [r4, #0]
 8001be6:	3402      	adds	r4, #2
 8001be8:	0c1b      	lsrs	r3, r3, #16
 8001bea:	7023      	strb	r3, [r4, #0]
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8001bec:	f107 0308 	add.w	r3, r7, #8
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7fe fb0d 	bl	8000210 <strlen>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	f107 0108 	add.w	r1, r7, #8
 8001bfe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c02:	4868      	ldr	r0, [pc, #416]	@ (8001da4 <mpu6050_init+0x29c>)
 8001c04:	f003 fcee 	bl	80055e4 <HAL_UART_Transmit>
 8001c08:	e018      	b.n	8001c3c <mpu6050_init+0x134>
	  }
	  else{
		  strcpy((char*) buff, "failed setting gyroscope range\r\n");
 8001c0a:	f107 0308 	add.w	r3, r7, #8
 8001c0e:	4a68      	ldr	r2, [pc, #416]	@ (8001db0 <mpu6050_init+0x2a8>)
 8001c10:	461c      	mov	r4, r3
 8001c12:	4615      	mov	r5, r2
 8001c14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c1c:	682b      	ldr	r3, [r5, #0]
 8001c1e:	7023      	strb	r3, [r4, #0]
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8001c20:	f107 0308 	add.w	r3, r7, #8
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7fe faf3 	bl	8000210 <strlen>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	f107 0108 	add.w	r1, r7, #8
 8001c32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c36:	485b      	ldr	r0, [pc, #364]	@ (8001da4 <mpu6050_init+0x29c>)
 8001c38:	f003 fcd4 	bl	80055e4 <HAL_UART_Transmit>
	  }

	  //configure accelerometer
	  uint8_t accelerometer_range = FS_ACC_2G;	//set gyroscope range to 500 °/s
 8001c3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001c40:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 8001c44:	2200      	movs	r2, #0
 8001c46:	701a      	strb	r2, [r3, #0]
	  if(HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS<<1) +0, REG_CONFIG_ACC, 1, &accelerometer_range, sizeof(accelerometer_range), 100) == HAL_OK){
 8001c48:	2364      	movs	r3, #100	@ 0x64
 8001c4a:	9302      	str	r3, [sp, #8]
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	9301      	str	r3, [sp, #4]
 8001c50:	1dbb      	adds	r3, r7, #6
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	2301      	movs	r3, #1
 8001c56:	221c      	movs	r2, #28
 8001c58:	21d0      	movs	r1, #208	@ 0xd0
 8001c5a:	4850      	ldr	r0, [pc, #320]	@ (8001d9c <mpu6050_init+0x294>)
 8001c5c:	f000 ff7c 	bl	8002b58 <HAL_I2C_Mem_Write>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d11f      	bne.n	8001ca6 <mpu6050_init+0x19e>
		  strcpy((char*) buff, "accelerometer range successfully set\r\n");
 8001c66:	f107 0308 	add.w	r3, r7, #8
 8001c6a:	4a52      	ldr	r2, [pc, #328]	@ (8001db4 <mpu6050_init+0x2ac>)
 8001c6c:	461c      	mov	r4, r3
 8001c6e:	4615      	mov	r5, r2
 8001c70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c78:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c7c:	6020      	str	r0, [r4, #0]
 8001c7e:	3404      	adds	r4, #4
 8001c80:	8021      	strh	r1, [r4, #0]
 8001c82:	3402      	adds	r4, #2
 8001c84:	0c0b      	lsrs	r3, r1, #16
 8001c86:	7023      	strb	r3, [r4, #0]
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8001c88:	f107 0308 	add.w	r3, r7, #8
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7fe fabf 	bl	8000210 <strlen>
 8001c92:	4603      	mov	r3, r0
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	f107 0108 	add.w	r1, r7, #8
 8001c9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c9e:	4841      	ldr	r0, [pc, #260]	@ (8001da4 <mpu6050_init+0x29c>)
 8001ca0:	f003 fca0 	bl	80055e4 <HAL_UART_Transmit>
 8001ca4:	e01b      	b.n	8001cde <mpu6050_init+0x1d6>
	  }
	  else{
		  strcpy((char*) buff, "failed setting accelerometer range\r\n");
 8001ca6:	f107 0308 	add.w	r3, r7, #8
 8001caa:	4a43      	ldr	r2, [pc, #268]	@ (8001db8 <mpu6050_init+0x2b0>)
 8001cac:	461c      	mov	r4, r3
 8001cae:	4615      	mov	r5, r2
 8001cb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cb8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001cbc:	6020      	str	r0, [r4, #0]
 8001cbe:	3404      	adds	r4, #4
 8001cc0:	7021      	strb	r1, [r4, #0]
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8001cc2:	f107 0308 	add.w	r3, r7, #8
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7fe faa2 	bl	8000210 <strlen>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	f107 0108 	add.w	r1, r7, #8
 8001cd4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001cd8:	4832      	ldr	r0, [pc, #200]	@ (8001da4 <mpu6050_init+0x29c>)
 8001cda:	f003 fc83 	bl	80055e4 <HAL_UART_Transmit>
	  }

	  //set low pass filter
	  uint8_t lpf_setting = LPF_44;
 8001cde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001ce2:	f2a3 1303 	subw	r3, r3, #259	@ 0x103
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	701a      	strb	r2, [r3, #0]
	  HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS<<1) +0, REG_LOW_PASS_FILTER, 1, &lpf_setting, sizeof(lpf_setting), 100);
 8001cea:	2364      	movs	r3, #100	@ 0x64
 8001cec:	9302      	str	r3, [sp, #8]
 8001cee:	2301      	movs	r3, #1
 8001cf0:	9301      	str	r3, [sp, #4]
 8001cf2:	1d7b      	adds	r3, r7, #5
 8001cf4:	9300      	str	r3, [sp, #0]
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	221a      	movs	r2, #26
 8001cfa:	21d0      	movs	r1, #208	@ 0xd0
 8001cfc:	4827      	ldr	r0, [pc, #156]	@ (8001d9c <mpu6050_init+0x294>)
 8001cfe:	f000 ff2b 	bl	8002b58 <HAL_I2C_Mem_Write>

	  //deactivate sleep
	  uint8_t asdf_flags = 0b00001000;	//set the '1' also to '0' if you want the temperature sensor to be enabled
 8001d02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001d06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001d0a:	2208      	movs	r2, #8
 8001d0c:	701a      	strb	r2, [r3, #0]
	  if(HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS<<1) +0, REG_USR_CTRL, 1, &asdf_flags, sizeof(asdf_flags), 100) == HAL_OK){
 8001d0e:	2364      	movs	r3, #100	@ 0x64
 8001d10:	9302      	str	r3, [sp, #8]
 8001d12:	2301      	movs	r3, #1
 8001d14:	9301      	str	r3, [sp, #4]
 8001d16:	1d3b      	adds	r3, r7, #4
 8001d18:	9300      	str	r3, [sp, #0]
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	226b      	movs	r2, #107	@ 0x6b
 8001d1e:	21d0      	movs	r1, #208	@ 0xd0
 8001d20:	481e      	ldr	r0, [pc, #120]	@ (8001d9c <mpu6050_init+0x294>)
 8001d22:	f000 ff19 	bl	8002b58 <HAL_I2C_Mem_Write>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d119      	bne.n	8001d60 <mpu6050_init+0x258>
		  strcpy((char*) buff, "disablin sleep successfully\r\n");
 8001d2c:	f107 0308 	add.w	r3, r7, #8
 8001d30:	4a22      	ldr	r2, [pc, #136]	@ (8001dbc <mpu6050_init+0x2b4>)
 8001d32:	461c      	mov	r4, r3
 8001d34:	4615      	mov	r5, r2
 8001d36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d3a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001d3e:	c407      	stmia	r4!, {r0, r1, r2}
 8001d40:	8023      	strh	r3, [r4, #0]
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8001d42:	f107 0308 	add.w	r3, r7, #8
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7fe fa62 	bl	8000210 <strlen>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	f107 0108 	add.w	r1, r7, #8
 8001d54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d58:	4812      	ldr	r0, [pc, #72]	@ (8001da4 <mpu6050_init+0x29c>)
 8001d5a:	f003 fc43 	bl	80055e4 <HAL_UART_Transmit>
	  else{
		  strcpy((char*) buff, "error disabling sleep\r\n");
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
	  }

}
 8001d5e:	e018      	b.n	8001d92 <mpu6050_init+0x28a>
		  strcpy((char*) buff, "error disabling sleep\r\n");
 8001d60:	f107 0308 	add.w	r3, r7, #8
 8001d64:	4a16      	ldr	r2, [pc, #88]	@ (8001dc0 <mpu6050_init+0x2b8>)
 8001d66:	461c      	mov	r4, r3
 8001d68:	4615      	mov	r5, r2
 8001d6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d6e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001d72:	e884 0003 	stmia.w	r4, {r0, r1}
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8001d76:	f107 0308 	add.w	r3, r7, #8
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7fe fa48 	bl	8000210 <strlen>
 8001d80:	4603      	mov	r3, r0
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	f107 0108 	add.w	r1, r7, #8
 8001d88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d8c:	4805      	ldr	r0, [pc, #20]	@ (8001da4 <mpu6050_init+0x29c>)
 8001d8e:	f003 fc29 	bl	80055e4 <HAL_UART_Transmit>
}
 8001d92:	bf00      	nop
 8001d94:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bdb0      	pop	{r4, r5, r7, pc}
 8001d9c:	2000087c 	.word	0x2000087c
 8001da0:	0800719c 	.word	0x0800719c
 8001da4:	20000918 	.word	0x20000918
 8001da8:	080071b4 	.word	0x080071b4
 8001dac:	080071e0 	.word	0x080071e0
 8001db0:	08007204 	.word	0x08007204
 8001db4:	08007228 	.word	0x08007228
 8001db8:	08007250 	.word	0x08007250
 8001dbc:	08007278 	.word	0x08007278
 8001dc0:	08007298 	.word	0x08007298

08001dc4 <mpu6050_read>:



void mpu6050_read(mpu6050_values_t* values){
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b088      	sub	sp, #32
 8001dc8:	af04      	add	r7, sp, #16
 8001dca:	6078      	str	r0, [r7, #4]

	  uint8_t buff[6] = { 0 };
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60bb      	str	r3, [r7, #8]
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	81bb      	strh	r3, [r7, #12]
	  HAL_I2C_Mem_Read(&hi2c1, (DEVICE_ADDRESS<<1) +1, REG_ACC_DATA, 1, buff, sizeof(buff), 100);
 8001dd4:	2364      	movs	r3, #100	@ 0x64
 8001dd6:	9302      	str	r3, [sp, #8]
 8001dd8:	2306      	movs	r3, #6
 8001dda:	9301      	str	r3, [sp, #4]
 8001ddc:	f107 0308 	add.w	r3, r7, #8
 8001de0:	9300      	str	r3, [sp, #0]
 8001de2:	2301      	movs	r3, #1
 8001de4:	223b      	movs	r2, #59	@ 0x3b
 8001de6:	21d1      	movs	r1, #209	@ 0xd1
 8001de8:	4829      	ldr	r0, [pc, #164]	@ (8001e90 <mpu6050_read+0xcc>)
 8001dea:	f000 ffaf 	bl	8002d4c <HAL_I2C_Mem_Read>
	  values->acc_x = (uint16_t) (buff[0]<<8) + buff[1];
 8001dee:	7a3b      	ldrb	r3, [r7, #8]
 8001df0:	021b      	lsls	r3, r3, #8
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	7a7a      	ldrb	r2, [r7, #9]
 8001df6:	4413      	add	r3, r2
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	b21a      	sxth	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	80da      	strh	r2, [r3, #6]
	  values->acc_y = (uint16_t) (buff[2]<<8) + buff[3];
 8001e00:	7abb      	ldrb	r3, [r7, #10]
 8001e02:	021b      	lsls	r3, r3, #8
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	7afa      	ldrb	r2, [r7, #11]
 8001e08:	4413      	add	r3, r2
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	b21a      	sxth	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	811a      	strh	r2, [r3, #8]
	  values->acc_z = (uint16_t) (buff[4]<<8) + buff[5];
 8001e12:	7b3b      	ldrb	r3, [r7, #12]
 8001e14:	021b      	lsls	r3, r3, #8
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	7b7a      	ldrb	r2, [r7, #13]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	b21a      	sxth	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	815a      	strh	r2, [r3, #10]

	  HAL_I2C_Mem_Read(&hi2c1, (DEVICE_ADDRESS<<1) +1, REG_GYRO_DATA, 1, buff, sizeof(buff), 100);
 8001e24:	2364      	movs	r3, #100	@ 0x64
 8001e26:	9302      	str	r3, [sp, #8]
 8001e28:	2306      	movs	r3, #6
 8001e2a:	9301      	str	r3, [sp, #4]
 8001e2c:	f107 0308 	add.w	r3, r7, #8
 8001e30:	9300      	str	r3, [sp, #0]
 8001e32:	2301      	movs	r3, #1
 8001e34:	2243      	movs	r2, #67	@ 0x43
 8001e36:	21d1      	movs	r1, #209	@ 0xd1
 8001e38:	4815      	ldr	r0, [pc, #84]	@ (8001e90 <mpu6050_read+0xcc>)
 8001e3a:	f000 ff87 	bl	8002d4c <HAL_I2C_Mem_Read>
	  values->gyro_x = (uint16_t) (buff[0]<<8) + buff[1];
 8001e3e:	7a3b      	ldrb	r3, [r7, #8]
 8001e40:	021b      	lsls	r3, r3, #8
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	7a7a      	ldrb	r2, [r7, #9]
 8001e46:	4413      	add	r3, r2
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	b21a      	sxth	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	801a      	strh	r2, [r3, #0]
	  values->gyro_y = (uint16_t) (buff[2]<<8) + buff[3];
 8001e50:	7abb      	ldrb	r3, [r7, #10]
 8001e52:	021b      	lsls	r3, r3, #8
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	7afa      	ldrb	r2, [r7, #11]
 8001e58:	4413      	add	r3, r2
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	b21a      	sxth	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	805a      	strh	r2, [r3, #2]
	  values->gyro_z = (uint16_t) (buff[4]<<8) + buff[5];
 8001e62:	7b3b      	ldrb	r3, [r7, #12]
 8001e64:	021b      	lsls	r3, r3, #8
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	7b7a      	ldrb	r2, [r7, #13]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	b21a      	sxth	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	809a      	strh	r2, [r3, #4]

	  //apply offsets
	  values->gyro_y += GYRO_Y_OFFSET_1000;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	330c      	adds	r3, #12
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	b21a      	sxth	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	805a      	strh	r2, [r3, #2]

}
 8001e86:	bf00      	nop
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	2000087c 	.word	0x2000087c

08001e94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	607b      	str	r3, [r7, #4]
 8001e9e:	4b12      	ldr	r3, [pc, #72]	@ (8001ee8 <HAL_MspInit+0x54>)
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea2:	4a11      	ldr	r2, [pc, #68]	@ (8001ee8 <HAL_MspInit+0x54>)
 8001ea4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ea8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8001ee8 <HAL_MspInit+0x54>)
 8001eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001eb2:	607b      	str	r3, [r7, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	603b      	str	r3, [r7, #0]
 8001eba:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee8 <HAL_MspInit+0x54>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ebe:	4a0a      	ldr	r2, [pc, #40]	@ (8001ee8 <HAL_MspInit+0x54>)
 8001ec0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ec4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ec6:	4b08      	ldr	r3, [pc, #32]	@ (8001ee8 <HAL_MspInit+0x54>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ece:	603b      	str	r3, [r7, #0]
 8001ed0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	210f      	movs	r1, #15
 8001ed6:	f06f 0001 	mvn.w	r0, #1
 8001eda:	f000 fb21 	bl	8002520 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40023800 	.word	0x40023800

08001eec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b08a      	sub	sp, #40	@ 0x28
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef4:	f107 0314 	add.w	r3, r7, #20
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	60da      	str	r2, [r3, #12]
 8001f02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a19      	ldr	r2, [pc, #100]	@ (8001f70 <HAL_I2C_MspInit+0x84>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d12c      	bne.n	8001f68 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	613b      	str	r3, [r7, #16]
 8001f12:	4b18      	ldr	r3, [pc, #96]	@ (8001f74 <HAL_I2C_MspInit+0x88>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f16:	4a17      	ldr	r2, [pc, #92]	@ (8001f74 <HAL_I2C_MspInit+0x88>)
 8001f18:	f043 0302 	orr.w	r3, r3, #2
 8001f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f1e:	4b15      	ldr	r3, [pc, #84]	@ (8001f74 <HAL_I2C_MspInit+0x88>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	613b      	str	r3, [r7, #16]
 8001f28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f2a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f30:	2312      	movs	r3, #18
 8001f32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f34:	2301      	movs	r3, #1
 8001f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f3c:	2304      	movs	r3, #4
 8001f3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f40:	f107 0314 	add.w	r3, r7, #20
 8001f44:	4619      	mov	r1, r3
 8001f46:	480c      	ldr	r0, [pc, #48]	@ (8001f78 <HAL_I2C_MspInit+0x8c>)
 8001f48:	f000 fb14 	bl	8002574 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	4b08      	ldr	r3, [pc, #32]	@ (8001f74 <HAL_I2C_MspInit+0x88>)
 8001f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f54:	4a07      	ldr	r2, [pc, #28]	@ (8001f74 <HAL_I2C_MspInit+0x88>)
 8001f56:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f5c:	4b05      	ldr	r3, [pc, #20]	@ (8001f74 <HAL_I2C_MspInit+0x88>)
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001f68:	bf00      	nop
 8001f6a:	3728      	adds	r7, #40	@ 0x28
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40005400 	.word	0x40005400
 8001f74:	40023800 	.word	0x40023800
 8001f78:	40020400 	.word	0x40020400

08001f7c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a0b      	ldr	r2, [pc, #44]	@ (8001fb8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d10d      	bne.n	8001faa <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	4b0a      	ldr	r3, [pc, #40]	@ (8001fbc <HAL_TIM_PWM_MspInit+0x40>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f96:	4a09      	ldr	r2, [pc, #36]	@ (8001fbc <HAL_TIM_PWM_MspInit+0x40>)
 8001f98:	f043 0302 	orr.w	r3, r3, #2
 8001f9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f9e:	4b07      	ldr	r3, [pc, #28]	@ (8001fbc <HAL_TIM_PWM_MspInit+0x40>)
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001faa:	bf00      	nop
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	40000400 	.word	0x40000400
 8001fbc:	40023800 	.word	0x40023800

08001fc0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08a      	sub	sp, #40	@ 0x28
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc8:	f107 0314 	add.w	r3, r7, #20
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	60da      	str	r2, [r3, #12]
 8001fd6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a21      	ldr	r2, [pc, #132]	@ (8002064 <HAL_TIM_MspPostInit+0xa4>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d13b      	bne.n	800205a <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	613b      	str	r3, [r7, #16]
 8001fe6:	4b20      	ldr	r3, [pc, #128]	@ (8002068 <HAL_TIM_MspPostInit+0xa8>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fea:	4a1f      	ldr	r2, [pc, #124]	@ (8002068 <HAL_TIM_MspPostInit+0xa8>)
 8001fec:	f043 0301 	orr.w	r3, r3, #1
 8001ff0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ff2:	4b1d      	ldr	r3, [pc, #116]	@ (8002068 <HAL_TIM_MspPostInit+0xa8>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	613b      	str	r3, [r7, #16]
 8001ffc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	4b19      	ldr	r3, [pc, #100]	@ (8002068 <HAL_TIM_MspPostInit+0xa8>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002006:	4a18      	ldr	r2, [pc, #96]	@ (8002068 <HAL_TIM_MspPostInit+0xa8>)
 8002008:	f043 0302 	orr.w	r3, r3, #2
 800200c:	6313      	str	r3, [r2, #48]	@ 0x30
 800200e:	4b16      	ldr	r3, [pc, #88]	@ (8002068 <HAL_TIM_MspPostInit+0xa8>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800201a:	2380      	movs	r3, #128	@ 0x80
 800201c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201e:	2302      	movs	r3, #2
 8002020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002026:	2300      	movs	r3, #0
 8002028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800202a:	2302      	movs	r3, #2
 800202c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800202e:	f107 0314 	add.w	r3, r7, #20
 8002032:	4619      	mov	r1, r3
 8002034:	480d      	ldr	r0, [pc, #52]	@ (800206c <HAL_TIM_MspPostInit+0xac>)
 8002036:	f000 fa9d 	bl	8002574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800203a:	2310      	movs	r3, #16
 800203c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203e:	2302      	movs	r3, #2
 8002040:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002042:	2300      	movs	r3, #0
 8002044:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002046:	2300      	movs	r3, #0
 8002048:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800204a:	2302      	movs	r3, #2
 800204c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800204e:	f107 0314 	add.w	r3, r7, #20
 8002052:	4619      	mov	r1, r3
 8002054:	4806      	ldr	r0, [pc, #24]	@ (8002070 <HAL_TIM_MspPostInit+0xb0>)
 8002056:	f000 fa8d 	bl	8002574 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800205a:	bf00      	nop
 800205c:	3728      	adds	r7, #40	@ 0x28
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40000400 	.word	0x40000400
 8002068:	40023800 	.word	0x40023800
 800206c:	40020000 	.word	0x40020000
 8002070:	40020400 	.word	0x40020400

08002074 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08a      	sub	sp, #40	@ 0x28
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800207c:	f107 0314 	add.w	r3, r7, #20
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	60da      	str	r2, [r3, #12]
 800208a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a19      	ldr	r2, [pc, #100]	@ (80020f8 <HAL_UART_MspInit+0x84>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d12b      	bne.n	80020ee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	613b      	str	r3, [r7, #16]
 800209a:	4b18      	ldr	r3, [pc, #96]	@ (80020fc <HAL_UART_MspInit+0x88>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209e:	4a17      	ldr	r2, [pc, #92]	@ (80020fc <HAL_UART_MspInit+0x88>)
 80020a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80020a6:	4b15      	ldr	r3, [pc, #84]	@ (80020fc <HAL_UART_MspInit+0x88>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ae:	613b      	str	r3, [r7, #16]
 80020b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	4b11      	ldr	r3, [pc, #68]	@ (80020fc <HAL_UART_MspInit+0x88>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ba:	4a10      	ldr	r2, [pc, #64]	@ (80020fc <HAL_UART_MspInit+0x88>)
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020c2:	4b0e      	ldr	r3, [pc, #56]	@ (80020fc <HAL_UART_MspInit+0x88>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80020ce:	230c      	movs	r3, #12
 80020d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d2:	2302      	movs	r3, #2
 80020d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d6:	2300      	movs	r3, #0
 80020d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020da:	2303      	movs	r3, #3
 80020dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020de:	2307      	movs	r3, #7
 80020e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e2:	f107 0314 	add.w	r3, r7, #20
 80020e6:	4619      	mov	r1, r3
 80020e8:	4805      	ldr	r0, [pc, #20]	@ (8002100 <HAL_UART_MspInit+0x8c>)
 80020ea:	f000 fa43 	bl	8002574 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80020ee:	bf00      	nop
 80020f0:	3728      	adds	r7, #40	@ 0x28
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40004400 	.word	0x40004400
 80020fc:	40023800 	.word	0x40023800
 8002100:	40020000 	.word	0x40020000

08002104 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b08e      	sub	sp, #56	@ 0x38
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800210c:	2300      	movs	r3, #0
 800210e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002110:	2300      	movs	r3, #0
 8002112:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002114:	2300      	movs	r3, #0
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	4b33      	ldr	r3, [pc, #204]	@ (80021e8 <HAL_InitTick+0xe4>)
 800211a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211c:	4a32      	ldr	r2, [pc, #200]	@ (80021e8 <HAL_InitTick+0xe4>)
 800211e:	f043 0310 	orr.w	r3, r3, #16
 8002122:	6413      	str	r3, [r2, #64]	@ 0x40
 8002124:	4b30      	ldr	r3, [pc, #192]	@ (80021e8 <HAL_InitTick+0xe4>)
 8002126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002128:	f003 0310 	and.w	r3, r3, #16
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002130:	f107 0210 	add.w	r2, r7, #16
 8002134:	f107 0314 	add.w	r3, r7, #20
 8002138:	4611      	mov	r1, r2
 800213a:	4618      	mov	r0, r3
 800213c:	f001 fe34 	bl	8003da8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002140:	6a3b      	ldr	r3, [r7, #32]
 8002142:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002146:	2b00      	cmp	r3, #0
 8002148:	d103      	bne.n	8002152 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800214a:	f001 fe05 	bl	8003d58 <HAL_RCC_GetPCLK1Freq>
 800214e:	6378      	str	r0, [r7, #52]	@ 0x34
 8002150:	e004      	b.n	800215c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002152:	f001 fe01 	bl	8003d58 <HAL_RCC_GetPCLK1Freq>
 8002156:	4603      	mov	r3, r0
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800215c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800215e:	4a23      	ldr	r2, [pc, #140]	@ (80021ec <HAL_InitTick+0xe8>)
 8002160:	fba2 2303 	umull	r2, r3, r2, r3
 8002164:	0c9b      	lsrs	r3, r3, #18
 8002166:	3b01      	subs	r3, #1
 8002168:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800216a:	4b21      	ldr	r3, [pc, #132]	@ (80021f0 <HAL_InitTick+0xec>)
 800216c:	4a21      	ldr	r2, [pc, #132]	@ (80021f4 <HAL_InitTick+0xf0>)
 800216e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002170:	4b1f      	ldr	r3, [pc, #124]	@ (80021f0 <HAL_InitTick+0xec>)
 8002172:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002176:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002178:	4a1d      	ldr	r2, [pc, #116]	@ (80021f0 <HAL_InitTick+0xec>)
 800217a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800217c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800217e:	4b1c      	ldr	r3, [pc, #112]	@ (80021f0 <HAL_InitTick+0xec>)
 8002180:	2200      	movs	r2, #0
 8002182:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002184:	4b1a      	ldr	r3, [pc, #104]	@ (80021f0 <HAL_InitTick+0xec>)
 8002186:	2200      	movs	r2, #0
 8002188:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800218a:	4b19      	ldr	r3, [pc, #100]	@ (80021f0 <HAL_InitTick+0xec>)
 800218c:	2200      	movs	r2, #0
 800218e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002190:	4817      	ldr	r0, [pc, #92]	@ (80021f0 <HAL_InitTick+0xec>)
 8002192:	f002 fb09 	bl	80047a8 <HAL_TIM_Base_Init>
 8002196:	4603      	mov	r3, r0
 8002198:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800219c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d11b      	bne.n	80021dc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80021a4:	4812      	ldr	r0, [pc, #72]	@ (80021f0 <HAL_InitTick+0xec>)
 80021a6:	f002 fb59 	bl	800485c <HAL_TIM_Base_Start_IT>
 80021aa:	4603      	mov	r3, r0
 80021ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80021b0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d111      	bne.n	80021dc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80021b8:	2036      	movs	r0, #54	@ 0x36
 80021ba:	f000 f9cd 	bl	8002558 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2b0f      	cmp	r3, #15
 80021c2:	d808      	bhi.n	80021d6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80021c4:	2200      	movs	r2, #0
 80021c6:	6879      	ldr	r1, [r7, #4]
 80021c8:	2036      	movs	r0, #54	@ 0x36
 80021ca:	f000 f9a9 	bl	8002520 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021ce:	4a0a      	ldr	r2, [pc, #40]	@ (80021f8 <HAL_InitTick+0xf4>)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6013      	str	r3, [r2, #0]
 80021d4:	e002      	b.n	80021dc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80021dc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3738      	adds	r7, #56	@ 0x38
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40023800 	.word	0x40023800
 80021ec:	431bde83 	.word	0x431bde83
 80021f0:	20000a84 	.word	0x20000a84
 80021f4:	40001000 	.word	0x40001000
 80021f8:	20000008 	.word	0x20000008

080021fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002200:	bf00      	nop
 8002202:	e7fd      	b.n	8002200 <NMI_Handler+0x4>

08002204 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002208:	bf00      	nop
 800220a:	e7fd      	b.n	8002208 <HardFault_Handler+0x4>

0800220c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002210:	bf00      	nop
 8002212:	e7fd      	b.n	8002210 <MemManage_Handler+0x4>

08002214 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002218:	bf00      	nop
 800221a:	e7fd      	b.n	8002218 <BusFault_Handler+0x4>

0800221c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002220:	bf00      	nop
 8002222:	e7fd      	b.n	8002220 <UsageFault_Handler+0x4>

08002224 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002228:	bf00      	nop
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
	...

08002234 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002238:	4802      	ldr	r0, [pc, #8]	@ (8002244 <TIM6_DAC_IRQHandler+0x10>)
 800223a:	f002 fc97 	bl	8004b6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	20000a84 	.word	0x20000a84

08002248 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002250:	4a14      	ldr	r2, [pc, #80]	@ (80022a4 <_sbrk+0x5c>)
 8002252:	4b15      	ldr	r3, [pc, #84]	@ (80022a8 <_sbrk+0x60>)
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800225c:	4b13      	ldr	r3, [pc, #76]	@ (80022ac <_sbrk+0x64>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d102      	bne.n	800226a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002264:	4b11      	ldr	r3, [pc, #68]	@ (80022ac <_sbrk+0x64>)
 8002266:	4a12      	ldr	r2, [pc, #72]	@ (80022b0 <_sbrk+0x68>)
 8002268:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800226a:	4b10      	ldr	r3, [pc, #64]	@ (80022ac <_sbrk+0x64>)
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4413      	add	r3, r2
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	429a      	cmp	r2, r3
 8002276:	d207      	bcs.n	8002288 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002278:	f003 ffdc 	bl	8006234 <__errno>
 800227c:	4603      	mov	r3, r0
 800227e:	220c      	movs	r2, #12
 8002280:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002282:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002286:	e009      	b.n	800229c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002288:	4b08      	ldr	r3, [pc, #32]	@ (80022ac <_sbrk+0x64>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800228e:	4b07      	ldr	r3, [pc, #28]	@ (80022ac <_sbrk+0x64>)
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4413      	add	r3, r2
 8002296:	4a05      	ldr	r2, [pc, #20]	@ (80022ac <_sbrk+0x64>)
 8002298:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800229a:	68fb      	ldr	r3, [r7, #12]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	20020000 	.word	0x20020000
 80022a8:	00000400 	.word	0x00000400
 80022ac:	20000acc 	.word	0x20000acc
 80022b0:	200010a8 	.word	0x200010a8

080022b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022b8:	4b06      	ldr	r3, [pc, #24]	@ (80022d4 <SystemInit+0x20>)
 80022ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022be:	4a05      	ldr	r2, [pc, #20]	@ (80022d4 <SystemInit+0x20>)
 80022c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022c8:	bf00      	nop
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80022d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002310 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80022dc:	f7ff ffea 	bl	80022b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022e0:	480c      	ldr	r0, [pc, #48]	@ (8002314 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022e2:	490d      	ldr	r1, [pc, #52]	@ (8002318 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022e4:	4a0d      	ldr	r2, [pc, #52]	@ (800231c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022e8:	e002      	b.n	80022f0 <LoopCopyDataInit>

080022ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ee:	3304      	adds	r3, #4

080022f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022f4:	d3f9      	bcc.n	80022ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002320 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022f8:	4c0a      	ldr	r4, [pc, #40]	@ (8002324 <LoopFillZerobss+0x22>)
  movs r3, #0
 80022fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022fc:	e001      	b.n	8002302 <LoopFillZerobss>

080022fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002300:	3204      	adds	r2, #4

08002302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002304:	d3fb      	bcc.n	80022fe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002306:	f003 ff9b 	bl	8006240 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800230a:	f7fe fe15 	bl	8000f38 <main>
  bx  lr    
 800230e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002310:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002314:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002318:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800231c:	08007380 	.word	0x08007380
  ldr r2, =_sbss
 8002320:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002324:	200010a8 	.word	0x200010a8

08002328 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002328:	e7fe      	b.n	8002328 <ADC_IRQHandler>
	...

0800232c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002330:	4b0e      	ldr	r3, [pc, #56]	@ (800236c <HAL_Init+0x40>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a0d      	ldr	r2, [pc, #52]	@ (800236c <HAL_Init+0x40>)
 8002336:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800233a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800233c:	4b0b      	ldr	r3, [pc, #44]	@ (800236c <HAL_Init+0x40>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a0a      	ldr	r2, [pc, #40]	@ (800236c <HAL_Init+0x40>)
 8002342:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002346:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002348:	4b08      	ldr	r3, [pc, #32]	@ (800236c <HAL_Init+0x40>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a07      	ldr	r2, [pc, #28]	@ (800236c <HAL_Init+0x40>)
 800234e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002352:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002354:	2003      	movs	r0, #3
 8002356:	f000 f8d8 	bl	800250a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800235a:	200f      	movs	r0, #15
 800235c:	f7ff fed2 	bl	8002104 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002360:	f7ff fd98 	bl	8001e94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40023c00 	.word	0x40023c00

08002370 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002374:	4b06      	ldr	r3, [pc, #24]	@ (8002390 <HAL_IncTick+0x20>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	461a      	mov	r2, r3
 800237a:	4b06      	ldr	r3, [pc, #24]	@ (8002394 <HAL_IncTick+0x24>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4413      	add	r3, r2
 8002380:	4a04      	ldr	r2, [pc, #16]	@ (8002394 <HAL_IncTick+0x24>)
 8002382:	6013      	str	r3, [r2, #0]
}
 8002384:	bf00      	nop
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	2000000c 	.word	0x2000000c
 8002394:	20000ad0 	.word	0x20000ad0

08002398 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  return uwTick;
 800239c:	4b03      	ldr	r3, [pc, #12]	@ (80023ac <HAL_GetTick+0x14>)
 800239e:	681b      	ldr	r3, [r3, #0]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	20000ad0 	.word	0x20000ad0

080023b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023c0:	4b0c      	ldr	r3, [pc, #48]	@ (80023f4 <__NVIC_SetPriorityGrouping+0x44>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023c6:	68ba      	ldr	r2, [r7, #8]
 80023c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023cc:	4013      	ands	r3, r2
 80023ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023e2:	4a04      	ldr	r2, [pc, #16]	@ (80023f4 <__NVIC_SetPriorityGrouping+0x44>)
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	60d3      	str	r3, [r2, #12]
}
 80023e8:	bf00      	nop
 80023ea:	3714      	adds	r7, #20
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	e000ed00 	.word	0xe000ed00

080023f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023fc:	4b04      	ldr	r3, [pc, #16]	@ (8002410 <__NVIC_GetPriorityGrouping+0x18>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	0a1b      	lsrs	r3, r3, #8
 8002402:	f003 0307 	and.w	r3, r3, #7
}
 8002406:	4618      	mov	r0, r3
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	e000ed00 	.word	0xe000ed00

08002414 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800241e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002422:	2b00      	cmp	r3, #0
 8002424:	db0b      	blt.n	800243e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002426:	79fb      	ldrb	r3, [r7, #7]
 8002428:	f003 021f 	and.w	r2, r3, #31
 800242c:	4907      	ldr	r1, [pc, #28]	@ (800244c <__NVIC_EnableIRQ+0x38>)
 800242e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002432:	095b      	lsrs	r3, r3, #5
 8002434:	2001      	movs	r0, #1
 8002436:	fa00 f202 	lsl.w	r2, r0, r2
 800243a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	e000e100 	.word	0xe000e100

08002450 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	6039      	str	r1, [r7, #0]
 800245a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800245c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002460:	2b00      	cmp	r3, #0
 8002462:	db0a      	blt.n	800247a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	b2da      	uxtb	r2, r3
 8002468:	490c      	ldr	r1, [pc, #48]	@ (800249c <__NVIC_SetPriority+0x4c>)
 800246a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246e:	0112      	lsls	r2, r2, #4
 8002470:	b2d2      	uxtb	r2, r2
 8002472:	440b      	add	r3, r1
 8002474:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002478:	e00a      	b.n	8002490 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	b2da      	uxtb	r2, r3
 800247e:	4908      	ldr	r1, [pc, #32]	@ (80024a0 <__NVIC_SetPriority+0x50>)
 8002480:	79fb      	ldrb	r3, [r7, #7]
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	3b04      	subs	r3, #4
 8002488:	0112      	lsls	r2, r2, #4
 800248a:	b2d2      	uxtb	r2, r2
 800248c:	440b      	add	r3, r1
 800248e:	761a      	strb	r2, [r3, #24]
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	e000e100 	.word	0xe000e100
 80024a0:	e000ed00 	.word	0xe000ed00

080024a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b089      	sub	sp, #36	@ 0x24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	f1c3 0307 	rsb	r3, r3, #7
 80024be:	2b04      	cmp	r3, #4
 80024c0:	bf28      	it	cs
 80024c2:	2304      	movcs	r3, #4
 80024c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	3304      	adds	r3, #4
 80024ca:	2b06      	cmp	r3, #6
 80024cc:	d902      	bls.n	80024d4 <NVIC_EncodePriority+0x30>
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	3b03      	subs	r3, #3
 80024d2:	e000      	b.n	80024d6 <NVIC_EncodePriority+0x32>
 80024d4:	2300      	movs	r3, #0
 80024d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	43da      	mvns	r2, r3
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	401a      	ands	r2, r3
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024ec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	fa01 f303 	lsl.w	r3, r1, r3
 80024f6:	43d9      	mvns	r1, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024fc:	4313      	orrs	r3, r2
         );
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3724      	adds	r7, #36	@ 0x24
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b082      	sub	sp, #8
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f7ff ff4c 	bl	80023b0 <__NVIC_SetPriorityGrouping>
}
 8002518:	bf00      	nop
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
 800252c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800252e:	2300      	movs	r3, #0
 8002530:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002532:	f7ff ff61 	bl	80023f8 <__NVIC_GetPriorityGrouping>
 8002536:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	68b9      	ldr	r1, [r7, #8]
 800253c:	6978      	ldr	r0, [r7, #20]
 800253e:	f7ff ffb1 	bl	80024a4 <NVIC_EncodePriority>
 8002542:	4602      	mov	r2, r0
 8002544:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002548:	4611      	mov	r1, r2
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff ff80 	bl	8002450 <__NVIC_SetPriority>
}
 8002550:	bf00      	nop
 8002552:	3718      	adds	r7, #24
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	4603      	mov	r3, r0
 8002560:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff ff54 	bl	8002414 <__NVIC_EnableIRQ>
}
 800256c:	bf00      	nop
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002574:	b480      	push	{r7}
 8002576:	b089      	sub	sp, #36	@ 0x24
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800257e:	2300      	movs	r3, #0
 8002580:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002582:	2300      	movs	r3, #0
 8002584:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002586:	2300      	movs	r3, #0
 8002588:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800258a:	2300      	movs	r3, #0
 800258c:	61fb      	str	r3, [r7, #28]
 800258e:	e165      	b.n	800285c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002590:	2201      	movs	r2, #1
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	4013      	ands	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	f040 8154 	bne.w	8002856 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f003 0303 	and.w	r3, r3, #3
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d005      	beq.n	80025c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d130      	bne.n	8002628 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	2203      	movs	r2, #3
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43db      	mvns	r3, r3
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	4013      	ands	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	68da      	ldr	r2, [r3, #12]
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025fc:	2201      	movs	r2, #1
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4013      	ands	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	091b      	lsrs	r3, r3, #4
 8002612:	f003 0201 	and.w	r2, r3, #1
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4313      	orrs	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 0303 	and.w	r3, r3, #3
 8002630:	2b03      	cmp	r3, #3
 8002632:	d017      	beq.n	8002664 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	2203      	movs	r2, #3
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	43db      	mvns	r3, r3
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4013      	ands	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4313      	orrs	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 0303 	and.w	r3, r3, #3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d123      	bne.n	80026b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	08da      	lsrs	r2, r3, #3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	3208      	adds	r2, #8
 8002678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800267c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	220f      	movs	r2, #15
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	43db      	mvns	r3, r3
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4013      	ands	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	691a      	ldr	r2, [r3, #16]
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	08da      	lsrs	r2, r3, #3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	3208      	adds	r2, #8
 80026b2:	69b9      	ldr	r1, [r7, #24]
 80026b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	2203      	movs	r2, #3
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	43db      	mvns	r3, r3
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	4013      	ands	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f003 0203 	and.w	r2, r3, #3
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 80ae 	beq.w	8002856 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026fa:	2300      	movs	r3, #0
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	4b5d      	ldr	r3, [pc, #372]	@ (8002874 <HAL_GPIO_Init+0x300>)
 8002700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002702:	4a5c      	ldr	r2, [pc, #368]	@ (8002874 <HAL_GPIO_Init+0x300>)
 8002704:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002708:	6453      	str	r3, [r2, #68]	@ 0x44
 800270a:	4b5a      	ldr	r3, [pc, #360]	@ (8002874 <HAL_GPIO_Init+0x300>)
 800270c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800270e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002716:	4a58      	ldr	r2, [pc, #352]	@ (8002878 <HAL_GPIO_Init+0x304>)
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	089b      	lsrs	r3, r3, #2
 800271c:	3302      	adds	r3, #2
 800271e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002722:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	f003 0303 	and.w	r3, r3, #3
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	220f      	movs	r2, #15
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	43db      	mvns	r3, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4013      	ands	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a4f      	ldr	r2, [pc, #316]	@ (800287c <HAL_GPIO_Init+0x308>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d025      	beq.n	800278e <HAL_GPIO_Init+0x21a>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a4e      	ldr	r2, [pc, #312]	@ (8002880 <HAL_GPIO_Init+0x30c>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d01f      	beq.n	800278a <HAL_GPIO_Init+0x216>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a4d      	ldr	r2, [pc, #308]	@ (8002884 <HAL_GPIO_Init+0x310>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d019      	beq.n	8002786 <HAL_GPIO_Init+0x212>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a4c      	ldr	r2, [pc, #304]	@ (8002888 <HAL_GPIO_Init+0x314>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d013      	beq.n	8002782 <HAL_GPIO_Init+0x20e>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a4b      	ldr	r2, [pc, #300]	@ (800288c <HAL_GPIO_Init+0x318>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d00d      	beq.n	800277e <HAL_GPIO_Init+0x20a>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a4a      	ldr	r2, [pc, #296]	@ (8002890 <HAL_GPIO_Init+0x31c>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d007      	beq.n	800277a <HAL_GPIO_Init+0x206>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a49      	ldr	r2, [pc, #292]	@ (8002894 <HAL_GPIO_Init+0x320>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d101      	bne.n	8002776 <HAL_GPIO_Init+0x202>
 8002772:	2306      	movs	r3, #6
 8002774:	e00c      	b.n	8002790 <HAL_GPIO_Init+0x21c>
 8002776:	2307      	movs	r3, #7
 8002778:	e00a      	b.n	8002790 <HAL_GPIO_Init+0x21c>
 800277a:	2305      	movs	r3, #5
 800277c:	e008      	b.n	8002790 <HAL_GPIO_Init+0x21c>
 800277e:	2304      	movs	r3, #4
 8002780:	e006      	b.n	8002790 <HAL_GPIO_Init+0x21c>
 8002782:	2303      	movs	r3, #3
 8002784:	e004      	b.n	8002790 <HAL_GPIO_Init+0x21c>
 8002786:	2302      	movs	r3, #2
 8002788:	e002      	b.n	8002790 <HAL_GPIO_Init+0x21c>
 800278a:	2301      	movs	r3, #1
 800278c:	e000      	b.n	8002790 <HAL_GPIO_Init+0x21c>
 800278e:	2300      	movs	r3, #0
 8002790:	69fa      	ldr	r2, [r7, #28]
 8002792:	f002 0203 	and.w	r2, r2, #3
 8002796:	0092      	lsls	r2, r2, #2
 8002798:	4093      	lsls	r3, r2
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4313      	orrs	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027a0:	4935      	ldr	r1, [pc, #212]	@ (8002878 <HAL_GPIO_Init+0x304>)
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	089b      	lsrs	r3, r3, #2
 80027a6:	3302      	adds	r3, #2
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027ae:	4b3a      	ldr	r3, [pc, #232]	@ (8002898 <HAL_GPIO_Init+0x324>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	43db      	mvns	r3, r3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4013      	ands	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027d2:	4a31      	ldr	r2, [pc, #196]	@ (8002898 <HAL_GPIO_Init+0x324>)
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027d8:	4b2f      	ldr	r3, [pc, #188]	@ (8002898 <HAL_GPIO_Init+0x324>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	43db      	mvns	r3, r3
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	4013      	ands	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d003      	beq.n	80027fc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027fc:	4a26      	ldr	r2, [pc, #152]	@ (8002898 <HAL_GPIO_Init+0x324>)
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002802:	4b25      	ldr	r3, [pc, #148]	@ (8002898 <HAL_GPIO_Init+0x324>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	43db      	mvns	r3, r3
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	4013      	ands	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	4313      	orrs	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002826:	4a1c      	ldr	r2, [pc, #112]	@ (8002898 <HAL_GPIO_Init+0x324>)
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800282c:	4b1a      	ldr	r3, [pc, #104]	@ (8002898 <HAL_GPIO_Init+0x324>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	43db      	mvns	r3, r3
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4013      	ands	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d003      	beq.n	8002850 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	4313      	orrs	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002850:	4a11      	ldr	r2, [pc, #68]	@ (8002898 <HAL_GPIO_Init+0x324>)
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	3301      	adds	r3, #1
 800285a:	61fb      	str	r3, [r7, #28]
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	2b0f      	cmp	r3, #15
 8002860:	f67f ae96 	bls.w	8002590 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002864:	bf00      	nop
 8002866:	bf00      	nop
 8002868:	3724      	adds	r7, #36	@ 0x24
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	40023800 	.word	0x40023800
 8002878:	40013800 	.word	0x40013800
 800287c:	40020000 	.word	0x40020000
 8002880:	40020400 	.word	0x40020400
 8002884:	40020800 	.word	0x40020800
 8002888:	40020c00 	.word	0x40020c00
 800288c:	40021000 	.word	0x40021000
 8002890:	40021400 	.word	0x40021400
 8002894:	40021800 	.word	0x40021800
 8002898:	40013c00 	.word	0x40013c00

0800289c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	460b      	mov	r3, r1
 80028a6:	807b      	strh	r3, [r7, #2]
 80028a8:	4613      	mov	r3, r2
 80028aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028ac:	787b      	ldrb	r3, [r7, #1]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028b2:	887a      	ldrh	r2, [r7, #2]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028b8:	e003      	b.n	80028c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028ba:	887b      	ldrh	r3, [r7, #2]
 80028bc:	041a      	lsls	r2, r3, #16
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	619a      	str	r2, [r3, #24]
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
	...

080028d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e12b      	b.n	8002b3a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d106      	bne.n	80028fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7ff faf8 	bl	8001eec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2224      	movs	r2, #36	@ 0x24
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 0201 	bic.w	r2, r2, #1
 8002912:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002922:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002932:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002934:	f001 fa10 	bl	8003d58 <HAL_RCC_GetPCLK1Freq>
 8002938:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	4a81      	ldr	r2, [pc, #516]	@ (8002b44 <HAL_I2C_Init+0x274>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d807      	bhi.n	8002954 <HAL_I2C_Init+0x84>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	4a80      	ldr	r2, [pc, #512]	@ (8002b48 <HAL_I2C_Init+0x278>)
 8002948:	4293      	cmp	r3, r2
 800294a:	bf94      	ite	ls
 800294c:	2301      	movls	r3, #1
 800294e:	2300      	movhi	r3, #0
 8002950:	b2db      	uxtb	r3, r3
 8002952:	e006      	b.n	8002962 <HAL_I2C_Init+0x92>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	4a7d      	ldr	r2, [pc, #500]	@ (8002b4c <HAL_I2C_Init+0x27c>)
 8002958:	4293      	cmp	r3, r2
 800295a:	bf94      	ite	ls
 800295c:	2301      	movls	r3, #1
 800295e:	2300      	movhi	r3, #0
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e0e7      	b.n	8002b3a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	4a78      	ldr	r2, [pc, #480]	@ (8002b50 <HAL_I2C_Init+0x280>)
 800296e:	fba2 2303 	umull	r2, r3, r2, r3
 8002972:	0c9b      	lsrs	r3, r3, #18
 8002974:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68ba      	ldr	r2, [r7, #8]
 8002986:	430a      	orrs	r2, r1
 8002988:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6a1b      	ldr	r3, [r3, #32]
 8002990:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	4a6a      	ldr	r2, [pc, #424]	@ (8002b44 <HAL_I2C_Init+0x274>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d802      	bhi.n	80029a4 <HAL_I2C_Init+0xd4>
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	3301      	adds	r3, #1
 80029a2:	e009      	b.n	80029b8 <HAL_I2C_Init+0xe8>
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80029aa:	fb02 f303 	mul.w	r3, r2, r3
 80029ae:	4a69      	ldr	r2, [pc, #420]	@ (8002b54 <HAL_I2C_Init+0x284>)
 80029b0:	fba2 2303 	umull	r2, r3, r2, r3
 80029b4:	099b      	lsrs	r3, r3, #6
 80029b6:	3301      	adds	r3, #1
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6812      	ldr	r2, [r2, #0]
 80029bc:	430b      	orrs	r3, r1
 80029be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80029ca:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	495c      	ldr	r1, [pc, #368]	@ (8002b44 <HAL_I2C_Init+0x274>)
 80029d4:	428b      	cmp	r3, r1
 80029d6:	d819      	bhi.n	8002a0c <HAL_I2C_Init+0x13c>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	1e59      	subs	r1, r3, #1
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80029e6:	1c59      	adds	r1, r3, #1
 80029e8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80029ec:	400b      	ands	r3, r1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00a      	beq.n	8002a08 <HAL_I2C_Init+0x138>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	1e59      	subs	r1, r3, #1
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a00:	3301      	adds	r3, #1
 8002a02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a06:	e051      	b.n	8002aac <HAL_I2C_Init+0x1dc>
 8002a08:	2304      	movs	r3, #4
 8002a0a:	e04f      	b.n	8002aac <HAL_I2C_Init+0x1dc>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d111      	bne.n	8002a38 <HAL_I2C_Init+0x168>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	1e58      	subs	r0, r3, #1
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6859      	ldr	r1, [r3, #4]
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	440b      	add	r3, r1
 8002a22:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a26:	3301      	adds	r3, #1
 8002a28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	bf0c      	ite	eq
 8002a30:	2301      	moveq	r3, #1
 8002a32:	2300      	movne	r3, #0
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	e012      	b.n	8002a5e <HAL_I2C_Init+0x18e>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	1e58      	subs	r0, r3, #1
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6859      	ldr	r1, [r3, #4]
 8002a40:	460b      	mov	r3, r1
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	440b      	add	r3, r1
 8002a46:	0099      	lsls	r1, r3, #2
 8002a48:	440b      	add	r3, r1
 8002a4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a4e:	3301      	adds	r3, #1
 8002a50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	bf0c      	ite	eq
 8002a58:	2301      	moveq	r3, #1
 8002a5a:	2300      	movne	r3, #0
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <HAL_I2C_Init+0x196>
 8002a62:	2301      	movs	r3, #1
 8002a64:	e022      	b.n	8002aac <HAL_I2C_Init+0x1dc>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d10e      	bne.n	8002a8c <HAL_I2C_Init+0x1bc>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	1e58      	subs	r0, r3, #1
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6859      	ldr	r1, [r3, #4]
 8002a76:	460b      	mov	r3, r1
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	440b      	add	r3, r1
 8002a7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a80:	3301      	adds	r3, #1
 8002a82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a8a:	e00f      	b.n	8002aac <HAL_I2C_Init+0x1dc>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	1e58      	subs	r0, r3, #1
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6859      	ldr	r1, [r3, #4]
 8002a94:	460b      	mov	r3, r1
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	440b      	add	r3, r1
 8002a9a:	0099      	lsls	r1, r3, #2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aa8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002aac:	6879      	ldr	r1, [r7, #4]
 8002aae:	6809      	ldr	r1, [r1, #0]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69da      	ldr	r2, [r3, #28]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	430a      	orrs	r2, r1
 8002ace:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002ada:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	6911      	ldr	r1, [r2, #16]
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	68d2      	ldr	r2, [r2, #12]
 8002ae6:	4311      	orrs	r1, r2
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	6812      	ldr	r2, [r2, #0]
 8002aec:	430b      	orrs	r3, r1
 8002aee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	695a      	ldr	r2, [r3, #20]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	431a      	orrs	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f042 0201 	orr.w	r2, r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2220      	movs	r2, #32
 8002b26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	000186a0 	.word	0x000186a0
 8002b48:	001e847f 	.word	0x001e847f
 8002b4c:	003d08ff 	.word	0x003d08ff
 8002b50:	431bde83 	.word	0x431bde83
 8002b54:	10624dd3 	.word	0x10624dd3

08002b58 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b088      	sub	sp, #32
 8002b5c:	af02      	add	r7, sp, #8
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	4608      	mov	r0, r1
 8002b62:	4611      	mov	r1, r2
 8002b64:	461a      	mov	r2, r3
 8002b66:	4603      	mov	r3, r0
 8002b68:	817b      	strh	r3, [r7, #10]
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	813b      	strh	r3, [r7, #8]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b72:	f7ff fc11 	bl	8002398 <HAL_GetTick>
 8002b76:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	2b20      	cmp	r3, #32
 8002b82:	f040 80d9 	bne.w	8002d38 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	9300      	str	r3, [sp, #0]
 8002b8a:	2319      	movs	r3, #25
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	496d      	ldr	r1, [pc, #436]	@ (8002d44 <HAL_I2C_Mem_Write+0x1ec>)
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f000 fdb9 	bl	8003708 <I2C_WaitOnFlagUntilTimeout>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	e0cc      	b.n	8002d3a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d101      	bne.n	8002bae <HAL_I2C_Mem_Write+0x56>
 8002baa:	2302      	movs	r3, #2
 8002bac:	e0c5      	b.n	8002d3a <HAL_I2C_Mem_Write+0x1e2>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0301 	and.w	r3, r3, #1
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d007      	beq.n	8002bd4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f042 0201 	orr.w	r2, r2, #1
 8002bd2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002be2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2221      	movs	r2, #33	@ 0x21
 8002be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2240      	movs	r2, #64	@ 0x40
 8002bf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6a3a      	ldr	r2, [r7, #32]
 8002bfe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002c04:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	4a4d      	ldr	r2, [pc, #308]	@ (8002d48 <HAL_I2C_Mem_Write+0x1f0>)
 8002c14:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c16:	88f8      	ldrh	r0, [r7, #6]
 8002c18:	893a      	ldrh	r2, [r7, #8]
 8002c1a:	8979      	ldrh	r1, [r7, #10]
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	9301      	str	r3, [sp, #4]
 8002c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c22:	9300      	str	r3, [sp, #0]
 8002c24:	4603      	mov	r3, r0
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f000 fbf0 	bl	800340c <I2C_RequestMemoryWrite>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d052      	beq.n	8002cd8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e081      	b.n	8002d3a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f000 fe7e 	bl	800393c <I2C_WaitOnTXEFlagUntilTimeout>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00d      	beq.n	8002c62 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	d107      	bne.n	8002c5e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c5c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e06b      	b.n	8002d3a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c66:	781a      	ldrb	r2, [r3, #0]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c72:	1c5a      	adds	r2, r3, #1
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	2b04      	cmp	r3, #4
 8002c9e:	d11b      	bne.n	8002cd8 <HAL_I2C_Mem_Write+0x180>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d017      	beq.n	8002cd8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cac:	781a      	ldrb	r2, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb8:	1c5a      	adds	r2, r3, #1
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1aa      	bne.n	8002c36 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f000 fe71 	bl	80039cc <I2C_WaitOnBTFFlagUntilTimeout>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00d      	beq.n	8002d0c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf4:	2b04      	cmp	r3, #4
 8002cf6:	d107      	bne.n	8002d08 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d06:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e016      	b.n	8002d3a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2220      	movs	r2, #32
 8002d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002d34:	2300      	movs	r3, #0
 8002d36:	e000      	b.n	8002d3a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002d38:	2302      	movs	r3, #2
  }
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3718      	adds	r7, #24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	00100002 	.word	0x00100002
 8002d48:	ffff0000 	.word	0xffff0000

08002d4c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b08c      	sub	sp, #48	@ 0x30
 8002d50:	af02      	add	r7, sp, #8
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	4608      	mov	r0, r1
 8002d56:	4611      	mov	r1, r2
 8002d58:	461a      	mov	r2, r3
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	817b      	strh	r3, [r7, #10]
 8002d5e:	460b      	mov	r3, r1
 8002d60:	813b      	strh	r3, [r7, #8]
 8002d62:	4613      	mov	r3, r2
 8002d64:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d66:	f7ff fb17 	bl	8002398 <HAL_GetTick>
 8002d6a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b20      	cmp	r3, #32
 8002d76:	f040 8214 	bne.w	80031a2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7c:	9300      	str	r3, [sp, #0]
 8002d7e:	2319      	movs	r3, #25
 8002d80:	2201      	movs	r2, #1
 8002d82:	497b      	ldr	r1, [pc, #492]	@ (8002f70 <HAL_I2C_Mem_Read+0x224>)
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f000 fcbf 	bl	8003708 <I2C_WaitOnFlagUntilTimeout>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002d90:	2302      	movs	r3, #2
 8002d92:	e207      	b.n	80031a4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d101      	bne.n	8002da2 <HAL_I2C_Mem_Read+0x56>
 8002d9e:	2302      	movs	r3, #2
 8002da0:	e200      	b.n	80031a4 <HAL_I2C_Mem_Read+0x458>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d007      	beq.n	8002dc8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f042 0201 	orr.w	r2, r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002dd6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2222      	movs	r2, #34	@ 0x22
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2240      	movs	r2, #64	@ 0x40
 8002de4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002df2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002df8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4a5b      	ldr	r2, [pc, #364]	@ (8002f74 <HAL_I2C_Mem_Read+0x228>)
 8002e08:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e0a:	88f8      	ldrh	r0, [r7, #6]
 8002e0c:	893a      	ldrh	r2, [r7, #8]
 8002e0e:	8979      	ldrh	r1, [r7, #10]
 8002e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e12:	9301      	str	r3, [sp, #4]
 8002e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	4603      	mov	r3, r0
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f000 fb8c 	bl	8003538 <I2C_RequestMemoryRead>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e1bc      	b.n	80031a4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d113      	bne.n	8002e5a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e32:	2300      	movs	r3, #0
 8002e34:	623b      	str	r3, [r7, #32]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	623b      	str	r3, [r7, #32]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	623b      	str	r3, [r7, #32]
 8002e46:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	e190      	b.n	800317c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d11b      	bne.n	8002e9a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e72:	2300      	movs	r3, #0
 8002e74:	61fb      	str	r3, [r7, #28]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	61fb      	str	r3, [r7, #28]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	61fb      	str	r3, [r7, #28]
 8002e86:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	e170      	b.n	800317c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d11b      	bne.n	8002eda <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002eb0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ec0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	61bb      	str	r3, [r7, #24]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	695b      	ldr	r3, [r3, #20]
 8002ecc:	61bb      	str	r3, [r7, #24]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	61bb      	str	r3, [r7, #24]
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	e150      	b.n	800317c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eda:	2300      	movs	r3, #0
 8002edc:	617b      	str	r3, [r7, #20]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	695b      	ldr	r3, [r3, #20]
 8002ee4:	617b      	str	r3, [r7, #20]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	617b      	str	r3, [r7, #20]
 8002eee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002ef0:	e144      	b.n	800317c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ef6:	2b03      	cmp	r3, #3
 8002ef8:	f200 80f1 	bhi.w	80030de <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d123      	bne.n	8002f4c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f06:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f000 fda7 	bl	8003a5c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e145      	b.n	80031a4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	691a      	ldr	r2, [r3, #16]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f22:	b2d2      	uxtb	r2, r2
 8002f24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2a:	1c5a      	adds	r2, r3, #1
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f34:	3b01      	subs	r3, #1
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	3b01      	subs	r3, #1
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f4a:	e117      	b.n	800317c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d14e      	bne.n	8002ff2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	4906      	ldr	r1, [pc, #24]	@ (8002f78 <HAL_I2C_Mem_Read+0x22c>)
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f000 fbd2 	bl	8003708 <I2C_WaitOnFlagUntilTimeout>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d008      	beq.n	8002f7c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e11a      	b.n	80031a4 <HAL_I2C_Mem_Read+0x458>
 8002f6e:	bf00      	nop
 8002f70:	00100002 	.word	0x00100002
 8002f74:	ffff0000 	.word	0xffff0000
 8002f78:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	691a      	ldr	r2, [r3, #16]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f96:	b2d2      	uxtb	r2, r2
 8002f98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9e:	1c5a      	adds	r2, r3, #1
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	691a      	ldr	r2, [r3, #16]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc8:	b2d2      	uxtb	r2, r2
 8002fca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd0:	1c5a      	adds	r2, r3, #1
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ff0:	e0c4      	b.n	800317c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	496c      	ldr	r1, [pc, #432]	@ (80031ac <HAL_I2C_Mem_Read+0x460>)
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f000 fb83 	bl	8003708 <I2C_WaitOnFlagUntilTimeout>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e0cb      	b.n	80031a4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800301a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	691a      	ldr	r2, [r3, #16]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003026:	b2d2      	uxtb	r2, r2
 8003028:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302e:	1c5a      	adds	r2, r3, #1
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003038:	3b01      	subs	r3, #1
 800303a:	b29a      	uxth	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003044:	b29b      	uxth	r3, r3
 8003046:	3b01      	subs	r3, #1
 8003048:	b29a      	uxth	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800304e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003054:	2200      	movs	r2, #0
 8003056:	4955      	ldr	r1, [pc, #340]	@ (80031ac <HAL_I2C_Mem_Read+0x460>)
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f000 fb55 	bl	8003708 <I2C_WaitOnFlagUntilTimeout>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e09d      	b.n	80031a4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003076:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	691a      	ldr	r2, [r3, #16]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800308a:	1c5a      	adds	r2, r3, #1
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003094:	3b01      	subs	r3, #1
 8003096:	b29a      	uxth	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	3b01      	subs	r3, #1
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	691a      	ldr	r2, [r3, #16]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b4:	b2d2      	uxtb	r2, r2
 80030b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030bc:	1c5a      	adds	r2, r3, #1
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030c6:	3b01      	subs	r3, #1
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	3b01      	subs	r3, #1
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80030dc:	e04e      	b.n	800317c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030e0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 fcba 	bl	8003a5c <I2C_WaitOnRXNEFlagUntilTimeout>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e058      	b.n	80031a4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	691a      	ldr	r2, [r3, #16]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030fc:	b2d2      	uxtb	r2, r2
 80030fe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003104:	1c5a      	adds	r2, r3, #1
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800310e:	3b01      	subs	r3, #1
 8003110:	b29a      	uxth	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800311a:	b29b      	uxth	r3, r3
 800311c:	3b01      	subs	r3, #1
 800311e:	b29a      	uxth	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	f003 0304 	and.w	r3, r3, #4
 800312e:	2b04      	cmp	r3, #4
 8003130:	d124      	bne.n	800317c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003136:	2b03      	cmp	r3, #3
 8003138:	d107      	bne.n	800314a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003148:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	691a      	ldr	r2, [r3, #16]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003154:	b2d2      	uxtb	r2, r2
 8003156:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315c:	1c5a      	adds	r2, r3, #1
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003166:	3b01      	subs	r3, #1
 8003168:	b29a      	uxth	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003172:	b29b      	uxth	r3, r3
 8003174:	3b01      	subs	r3, #1
 8003176:	b29a      	uxth	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003180:	2b00      	cmp	r3, #0
 8003182:	f47f aeb6 	bne.w	8002ef2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2220      	movs	r2, #32
 800318a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800319e:	2300      	movs	r3, #0
 80031a0:	e000      	b.n	80031a4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80031a2:	2302      	movs	r3, #2
  }
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3728      	adds	r7, #40	@ 0x28
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	00010004 	.word	0x00010004

080031b0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b08a      	sub	sp, #40	@ 0x28
 80031b4:	af02      	add	r7, sp, #8
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	607a      	str	r2, [r7, #4]
 80031ba:	603b      	str	r3, [r7, #0]
 80031bc:	460b      	mov	r3, r1
 80031be:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80031c0:	f7ff f8ea 	bl	8002398 <HAL_GetTick>
 80031c4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80031c6:	2300      	movs	r3, #0
 80031c8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b20      	cmp	r3, #32
 80031d4:	f040 8111 	bne.w	80033fa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	2319      	movs	r3, #25
 80031de:	2201      	movs	r2, #1
 80031e0:	4988      	ldr	r1, [pc, #544]	@ (8003404 <HAL_I2C_IsDeviceReady+0x254>)
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f000 fa90 	bl	8003708 <I2C_WaitOnFlagUntilTimeout>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80031ee:	2302      	movs	r3, #2
 80031f0:	e104      	b.n	80033fc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d101      	bne.n	8003200 <HAL_I2C_IsDeviceReady+0x50>
 80031fc:	2302      	movs	r3, #2
 80031fe:	e0fd      	b.n	80033fc <HAL_I2C_IsDeviceReady+0x24c>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b01      	cmp	r3, #1
 8003214:	d007      	beq.n	8003226 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f042 0201 	orr.w	r2, r2, #1
 8003224:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003234:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2224      	movs	r2, #36	@ 0x24
 800323a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4a70      	ldr	r2, [pc, #448]	@ (8003408 <HAL_I2C_IsDeviceReady+0x258>)
 8003248:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003258:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	2200      	movs	r2, #0
 8003262:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f000 fa4e 	bl	8003708 <I2C_WaitOnFlagUntilTimeout>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00d      	beq.n	800328e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800327c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003280:	d103      	bne.n	800328a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003288:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e0b6      	b.n	80033fc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800328e:	897b      	ldrh	r3, [r7, #10]
 8003290:	b2db      	uxtb	r3, r3
 8003292:	461a      	mov	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800329c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800329e:	f7ff f87b 	bl	8002398 <HAL_GetTick>
 80032a2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	bf0c      	ite	eq
 80032b2:	2301      	moveq	r3, #1
 80032b4:	2300      	movne	r3, #0
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032c8:	bf0c      	ite	eq
 80032ca:	2301      	moveq	r3, #1
 80032cc:	2300      	movne	r3, #0
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80032d2:	e025      	b.n	8003320 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80032d4:	f7ff f860 	bl	8002398 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d302      	bcc.n	80032ea <HAL_I2C_IsDeviceReady+0x13a>
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d103      	bne.n	80032f2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	22a0      	movs	r2, #160	@ 0xa0
 80032ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	695b      	ldr	r3, [r3, #20]
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	bf0c      	ite	eq
 8003300:	2301      	moveq	r3, #1
 8003302:	2300      	movne	r3, #0
 8003304:	b2db      	uxtb	r3, r3
 8003306:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003312:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003316:	bf0c      	ite	eq
 8003318:	2301      	moveq	r3, #1
 800331a:	2300      	movne	r3, #0
 800331c:	b2db      	uxtb	r3, r3
 800331e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003326:	b2db      	uxtb	r3, r3
 8003328:	2ba0      	cmp	r3, #160	@ 0xa0
 800332a:	d005      	beq.n	8003338 <HAL_I2C_IsDeviceReady+0x188>
 800332c:	7dfb      	ldrb	r3, [r7, #23]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d102      	bne.n	8003338 <HAL_I2C_IsDeviceReady+0x188>
 8003332:	7dbb      	ldrb	r3, [r7, #22]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d0cd      	beq.n	80032d4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2220      	movs	r2, #32
 800333c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b02      	cmp	r3, #2
 800334c:	d129      	bne.n	80033a2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800335c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800335e:	2300      	movs	r3, #0
 8003360:	613b      	str	r3, [r7, #16]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	613b      	str	r3, [r7, #16]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	613b      	str	r3, [r7, #16]
 8003372:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	2319      	movs	r3, #25
 800337a:	2201      	movs	r2, #1
 800337c:	4921      	ldr	r1, [pc, #132]	@ (8003404 <HAL_I2C_IsDeviceReady+0x254>)
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f000 f9c2 	bl	8003708 <I2C_WaitOnFlagUntilTimeout>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e036      	b.n	80033fc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2220      	movs	r2, #32
 8003392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800339e:	2300      	movs	r3, #0
 80033a0:	e02c      	b.n	80033fc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033b0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80033ba:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	2319      	movs	r3, #25
 80033c2:	2201      	movs	r2, #1
 80033c4:	490f      	ldr	r1, [pc, #60]	@ (8003404 <HAL_I2C_IsDeviceReady+0x254>)
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 f99e 	bl	8003708 <I2C_WaitOnFlagUntilTimeout>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e012      	b.n	80033fc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	3301      	adds	r3, #1
 80033da:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	f4ff af32 	bcc.w	800324a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2220      	movs	r2, #32
 80033ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e000      	b.n	80033fc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80033fa:	2302      	movs	r3, #2
  }
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3720      	adds	r7, #32
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	00100002 	.word	0x00100002
 8003408:	ffff0000 	.word	0xffff0000

0800340c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b088      	sub	sp, #32
 8003410:	af02      	add	r7, sp, #8
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	4608      	mov	r0, r1
 8003416:	4611      	mov	r1, r2
 8003418:	461a      	mov	r2, r3
 800341a:	4603      	mov	r3, r0
 800341c:	817b      	strh	r3, [r7, #10]
 800341e:	460b      	mov	r3, r1
 8003420:	813b      	strh	r3, [r7, #8]
 8003422:	4613      	mov	r3, r2
 8003424:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003434:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	6a3b      	ldr	r3, [r7, #32]
 800343c:	2200      	movs	r2, #0
 800343e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f000 f960 	bl	8003708 <I2C_WaitOnFlagUntilTimeout>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00d      	beq.n	800346a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003458:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800345c:	d103      	bne.n	8003466 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003464:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e05f      	b.n	800352a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800346a:	897b      	ldrh	r3, [r7, #10]
 800346c:	b2db      	uxtb	r3, r3
 800346e:	461a      	mov	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003478:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800347a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800347c:	6a3a      	ldr	r2, [r7, #32]
 800347e:	492d      	ldr	r1, [pc, #180]	@ (8003534 <I2C_RequestMemoryWrite+0x128>)
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f000 f9bb 	bl	80037fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e04c      	b.n	800352a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003490:	2300      	movs	r3, #0
 8003492:	617b      	str	r3, [r7, #20]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	617b      	str	r3, [r7, #20]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	617b      	str	r3, [r7, #20]
 80034a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034a8:	6a39      	ldr	r1, [r7, #32]
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f000 fa46 	bl	800393c <I2C_WaitOnTXEFlagUntilTimeout>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00d      	beq.n	80034d2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ba:	2b04      	cmp	r3, #4
 80034bc:	d107      	bne.n	80034ce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e02b      	b.n	800352a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034d2:	88fb      	ldrh	r3, [r7, #6]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d105      	bne.n	80034e4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034d8:	893b      	ldrh	r3, [r7, #8]
 80034da:	b2da      	uxtb	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	611a      	str	r2, [r3, #16]
 80034e2:	e021      	b.n	8003528 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80034e4:	893b      	ldrh	r3, [r7, #8]
 80034e6:	0a1b      	lsrs	r3, r3, #8
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	b2da      	uxtb	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034f4:	6a39      	ldr	r1, [r7, #32]
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 fa20 	bl	800393c <I2C_WaitOnTXEFlagUntilTimeout>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00d      	beq.n	800351e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003506:	2b04      	cmp	r3, #4
 8003508:	d107      	bne.n	800351a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003518:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e005      	b.n	800352a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800351e:	893b      	ldrh	r3, [r7, #8]
 8003520:	b2da      	uxtb	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3718      	adds	r7, #24
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	00010002 	.word	0x00010002

08003538 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b088      	sub	sp, #32
 800353c:	af02      	add	r7, sp, #8
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	4608      	mov	r0, r1
 8003542:	4611      	mov	r1, r2
 8003544:	461a      	mov	r2, r3
 8003546:	4603      	mov	r3, r0
 8003548:	817b      	strh	r3, [r7, #10]
 800354a:	460b      	mov	r3, r1
 800354c:	813b      	strh	r3, [r7, #8]
 800354e:	4613      	mov	r3, r2
 8003550:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003560:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003570:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	6a3b      	ldr	r3, [r7, #32]
 8003578:	2200      	movs	r2, #0
 800357a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f000 f8c2 	bl	8003708 <I2C_WaitOnFlagUntilTimeout>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00d      	beq.n	80035a6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003594:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003598:	d103      	bne.n	80035a2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035a0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e0aa      	b.n	80036fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035a6:	897b      	ldrh	r3, [r7, #10]
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	461a      	mov	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80035b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b8:	6a3a      	ldr	r2, [r7, #32]
 80035ba:	4952      	ldr	r1, [pc, #328]	@ (8003704 <I2C_RequestMemoryRead+0x1cc>)
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f000 f91d 	bl	80037fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d001      	beq.n	80035cc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e097      	b.n	80036fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035cc:	2300      	movs	r3, #0
 80035ce:	617b      	str	r3, [r7, #20]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	617b      	str	r3, [r7, #20]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	617b      	str	r3, [r7, #20]
 80035e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035e4:	6a39      	ldr	r1, [r7, #32]
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	f000 f9a8 	bl	800393c <I2C_WaitOnTXEFlagUntilTimeout>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00d      	beq.n	800360e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f6:	2b04      	cmp	r3, #4
 80035f8:	d107      	bne.n	800360a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003608:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e076      	b.n	80036fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800360e:	88fb      	ldrh	r3, [r7, #6]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d105      	bne.n	8003620 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003614:	893b      	ldrh	r3, [r7, #8]
 8003616:	b2da      	uxtb	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	611a      	str	r2, [r3, #16]
 800361e:	e021      	b.n	8003664 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003620:	893b      	ldrh	r3, [r7, #8]
 8003622:	0a1b      	lsrs	r3, r3, #8
 8003624:	b29b      	uxth	r3, r3
 8003626:	b2da      	uxtb	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800362e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003630:	6a39      	ldr	r1, [r7, #32]
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f000 f982 	bl	800393c <I2C_WaitOnTXEFlagUntilTimeout>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00d      	beq.n	800365a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003642:	2b04      	cmp	r3, #4
 8003644:	d107      	bne.n	8003656 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003654:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e050      	b.n	80036fc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800365a:	893b      	ldrh	r3, [r7, #8]
 800365c:	b2da      	uxtb	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003664:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003666:	6a39      	ldr	r1, [r7, #32]
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f000 f967 	bl	800393c <I2C_WaitOnTXEFlagUntilTimeout>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00d      	beq.n	8003690 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003678:	2b04      	cmp	r3, #4
 800367a:	d107      	bne.n	800368c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800368a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e035      	b.n	80036fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800369e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	6a3b      	ldr	r3, [r7, #32]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f000 f82b 	bl	8003708 <I2C_WaitOnFlagUntilTimeout>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00d      	beq.n	80036d4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036c6:	d103      	bne.n	80036d0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036ce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e013      	b.n	80036fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80036d4:	897b      	ldrh	r3, [r7, #10]
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	f043 0301 	orr.w	r3, r3, #1
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e6:	6a3a      	ldr	r2, [r7, #32]
 80036e8:	4906      	ldr	r1, [pc, #24]	@ (8003704 <I2C_RequestMemoryRead+0x1cc>)
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 f886 	bl	80037fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e000      	b.n	80036fc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3718      	adds	r7, #24
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	00010002 	.word	0x00010002

08003708 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	603b      	str	r3, [r7, #0]
 8003714:	4613      	mov	r3, r2
 8003716:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003718:	e048      	b.n	80037ac <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003720:	d044      	beq.n	80037ac <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003722:	f7fe fe39 	bl	8002398 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	429a      	cmp	r2, r3
 8003730:	d302      	bcc.n	8003738 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d139      	bne.n	80037ac <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	0c1b      	lsrs	r3, r3, #16
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b01      	cmp	r3, #1
 8003740:	d10d      	bne.n	800375e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	43da      	mvns	r2, r3
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	4013      	ands	r3, r2
 800374e:	b29b      	uxth	r3, r3
 8003750:	2b00      	cmp	r3, #0
 8003752:	bf0c      	ite	eq
 8003754:	2301      	moveq	r3, #1
 8003756:	2300      	movne	r3, #0
 8003758:	b2db      	uxtb	r3, r3
 800375a:	461a      	mov	r2, r3
 800375c:	e00c      	b.n	8003778 <I2C_WaitOnFlagUntilTimeout+0x70>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	43da      	mvns	r2, r3
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	4013      	ands	r3, r2
 800376a:	b29b      	uxth	r3, r3
 800376c:	2b00      	cmp	r3, #0
 800376e:	bf0c      	ite	eq
 8003770:	2301      	moveq	r3, #1
 8003772:	2300      	movne	r3, #0
 8003774:	b2db      	uxtb	r3, r3
 8003776:	461a      	mov	r2, r3
 8003778:	79fb      	ldrb	r3, [r7, #7]
 800377a:	429a      	cmp	r2, r3
 800377c:	d116      	bne.n	80037ac <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2220      	movs	r2, #32
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003798:	f043 0220 	orr.w	r2, r3, #32
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e023      	b.n	80037f4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	0c1b      	lsrs	r3, r3, #16
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d10d      	bne.n	80037d2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	695b      	ldr	r3, [r3, #20]
 80037bc:	43da      	mvns	r2, r3
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	4013      	ands	r3, r2
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	bf0c      	ite	eq
 80037c8:	2301      	moveq	r3, #1
 80037ca:	2300      	movne	r3, #0
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	461a      	mov	r2, r3
 80037d0:	e00c      	b.n	80037ec <I2C_WaitOnFlagUntilTimeout+0xe4>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	43da      	mvns	r2, r3
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	4013      	ands	r3, r2
 80037de:	b29b      	uxth	r3, r3
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	bf0c      	ite	eq
 80037e4:	2301      	moveq	r3, #1
 80037e6:	2300      	movne	r3, #0
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	461a      	mov	r2, r3
 80037ec:	79fb      	ldrb	r3, [r7, #7]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d093      	beq.n	800371a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
 8003808:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800380a:	e071      	b.n	80038f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003816:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800381a:	d123      	bne.n	8003864 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800382a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003834:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2220      	movs	r2, #32
 8003840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003850:	f043 0204 	orr.w	r2, r3, #4
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e067      	b.n	8003934 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800386a:	d041      	beq.n	80038f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800386c:	f7fe fd94 	bl	8002398 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	429a      	cmp	r2, r3
 800387a:	d302      	bcc.n	8003882 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d136      	bne.n	80038f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	0c1b      	lsrs	r3, r3, #16
 8003886:	b2db      	uxtb	r3, r3
 8003888:	2b01      	cmp	r3, #1
 800388a:	d10c      	bne.n	80038a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	43da      	mvns	r2, r3
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	4013      	ands	r3, r2
 8003898:	b29b      	uxth	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	bf14      	ite	ne
 800389e:	2301      	movne	r3, #1
 80038a0:	2300      	moveq	r3, #0
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	e00b      	b.n	80038be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	43da      	mvns	r2, r3
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	4013      	ands	r3, r2
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	bf14      	ite	ne
 80038b8:	2301      	movne	r3, #1
 80038ba:	2300      	moveq	r3, #0
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d016      	beq.n	80038f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2220      	movs	r2, #32
 80038cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038dc:	f043 0220 	orr.w	r2, r3, #32
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e021      	b.n	8003934 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	0c1b      	lsrs	r3, r3, #16
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d10c      	bne.n	8003914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	43da      	mvns	r2, r3
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	4013      	ands	r3, r2
 8003906:	b29b      	uxth	r3, r3
 8003908:	2b00      	cmp	r3, #0
 800390a:	bf14      	ite	ne
 800390c:	2301      	movne	r3, #1
 800390e:	2300      	moveq	r3, #0
 8003910:	b2db      	uxtb	r3, r3
 8003912:	e00b      	b.n	800392c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	43da      	mvns	r2, r3
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	4013      	ands	r3, r2
 8003920:	b29b      	uxth	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	bf14      	ite	ne
 8003926:	2301      	movne	r3, #1
 8003928:	2300      	moveq	r3, #0
 800392a:	b2db      	uxtb	r3, r3
 800392c:	2b00      	cmp	r3, #0
 800392e:	f47f af6d 	bne.w	800380c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3710      	adds	r7, #16
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003948:	e034      	b.n	80039b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f000 f8e3 	bl	8003b16 <I2C_IsAcknowledgeFailed>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e034      	b.n	80039c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003960:	d028      	beq.n	80039b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003962:	f7fe fd19 	bl	8002398 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	68ba      	ldr	r2, [r7, #8]
 800396e:	429a      	cmp	r2, r3
 8003970:	d302      	bcc.n	8003978 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d11d      	bne.n	80039b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003982:	2b80      	cmp	r3, #128	@ 0x80
 8003984:	d016      	beq.n	80039b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2220      	movs	r2, #32
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a0:	f043 0220 	orr.w	r2, r3, #32
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e007      	b.n	80039c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039be:	2b80      	cmp	r3, #128	@ 0x80
 80039c0:	d1c3      	bne.n	800394a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80039c2:	2300      	movs	r3, #0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3710      	adds	r7, #16
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039d8:	e034      	b.n	8003a44 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f000 f89b 	bl	8003b16 <I2C_IsAcknowledgeFailed>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e034      	b.n	8003a54 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039f0:	d028      	beq.n	8003a44 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039f2:	f7fe fcd1 	bl	8002398 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	68ba      	ldr	r2, [r7, #8]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d302      	bcc.n	8003a08 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d11d      	bne.n	8003a44 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	f003 0304 	and.w	r3, r3, #4
 8003a12:	2b04      	cmp	r3, #4
 8003a14:	d016      	beq.n	8003a44 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2220      	movs	r2, #32
 8003a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a30:	f043 0220 	orr.w	r2, r3, #32
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e007      	b.n	8003a54 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	f003 0304 	and.w	r3, r3, #4
 8003a4e:	2b04      	cmp	r3, #4
 8003a50:	d1c3      	bne.n	80039da <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a68:	e049      	b.n	8003afe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	f003 0310 	and.w	r3, r3, #16
 8003a74:	2b10      	cmp	r3, #16
 8003a76:	d119      	bne.n	8003aac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f06f 0210 	mvn.w	r2, #16
 8003a80:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e030      	b.n	8003b0e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aac:	f7fe fc74 	bl	8002398 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	68ba      	ldr	r2, [r7, #8]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d302      	bcc.n	8003ac2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d11d      	bne.n	8003afe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	695b      	ldr	r3, [r3, #20]
 8003ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003acc:	2b40      	cmp	r3, #64	@ 0x40
 8003ace:	d016      	beq.n	8003afe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aea:	f043 0220 	orr.w	r2, r3, #32
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e007      	b.n	8003b0e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b08:	2b40      	cmp	r3, #64	@ 0x40
 8003b0a:	d1ae      	bne.n	8003a6a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b083      	sub	sp, #12
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	695b      	ldr	r3, [r3, #20]
 8003b24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b2c:	d11b      	bne.n	8003b66 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003b36:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2220      	movs	r2, #32
 8003b42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b52:	f043 0204 	orr.w	r2, r3, #4
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e000      	b.n	8003b68 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d101      	bne.n	8003b88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e0cc      	b.n	8003d22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b88:	4b68      	ldr	r3, [pc, #416]	@ (8003d2c <HAL_RCC_ClockConfig+0x1b8>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 030f 	and.w	r3, r3, #15
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d90c      	bls.n	8003bb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b96:	4b65      	ldr	r3, [pc, #404]	@ (8003d2c <HAL_RCC_ClockConfig+0x1b8>)
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	b2d2      	uxtb	r2, r2
 8003b9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b9e:	4b63      	ldr	r3, [pc, #396]	@ (8003d2c <HAL_RCC_ClockConfig+0x1b8>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 030f 	and.w	r3, r3, #15
 8003ba6:	683a      	ldr	r2, [r7, #0]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d001      	beq.n	8003bb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e0b8      	b.n	8003d22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d020      	beq.n	8003bfe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0304 	and.w	r3, r3, #4
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d005      	beq.n	8003bd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bc8:	4b59      	ldr	r3, [pc, #356]	@ (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	4a58      	ldr	r2, [pc, #352]	@ (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003bce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003bd2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0308 	and.w	r3, r3, #8
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d005      	beq.n	8003bec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003be0:	4b53      	ldr	r3, [pc, #332]	@ (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	4a52      	ldr	r2, [pc, #328]	@ (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003be6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003bea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bec:	4b50      	ldr	r3, [pc, #320]	@ (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	494d      	ldr	r1, [pc, #308]	@ (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d044      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d107      	bne.n	8003c22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c12:	4b47      	ldr	r3, [pc, #284]	@ (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d119      	bne.n	8003c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e07f      	b.n	8003d22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d003      	beq.n	8003c32 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c2e:	2b03      	cmp	r3, #3
 8003c30:	d107      	bne.n	8003c42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c32:	4b3f      	ldr	r3, [pc, #252]	@ (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d109      	bne.n	8003c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e06f      	b.n	8003d22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c42:	4b3b      	ldr	r3, [pc, #236]	@ (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e067      	b.n	8003d22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c52:	4b37      	ldr	r3, [pc, #220]	@ (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f023 0203 	bic.w	r2, r3, #3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	4934      	ldr	r1, [pc, #208]	@ (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c64:	f7fe fb98 	bl	8002398 <HAL_GetTick>
 8003c68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c6a:	e00a      	b.n	8003c82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c6c:	f7fe fb94 	bl	8002398 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e04f      	b.n	8003d22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c82:	4b2b      	ldr	r3, [pc, #172]	@ (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f003 020c 	and.w	r2, r3, #12
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d1eb      	bne.n	8003c6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c94:	4b25      	ldr	r3, [pc, #148]	@ (8003d2c <HAL_RCC_ClockConfig+0x1b8>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 030f 	and.w	r3, r3, #15
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d20c      	bcs.n	8003cbc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ca2:	4b22      	ldr	r3, [pc, #136]	@ (8003d2c <HAL_RCC_ClockConfig+0x1b8>)
 8003ca4:	683a      	ldr	r2, [r7, #0]
 8003ca6:	b2d2      	uxtb	r2, r2
 8003ca8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003caa:	4b20      	ldr	r3, [pc, #128]	@ (8003d2c <HAL_RCC_ClockConfig+0x1b8>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 030f 	and.w	r3, r3, #15
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d001      	beq.n	8003cbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e032      	b.n	8003d22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0304 	and.w	r3, r3, #4
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d008      	beq.n	8003cda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cc8:	4b19      	ldr	r3, [pc, #100]	@ (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	4916      	ldr	r1, [pc, #88]	@ (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0308 	and.w	r3, r3, #8
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d009      	beq.n	8003cfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ce6:	4b12      	ldr	r3, [pc, #72]	@ (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	490e      	ldr	r1, [pc, #56]	@ (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cfa:	f000 f887 	bl	8003e0c <HAL_RCC_GetSysClockFreq>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	4b0b      	ldr	r3, [pc, #44]	@ (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	091b      	lsrs	r3, r3, #4
 8003d06:	f003 030f 	and.w	r3, r3, #15
 8003d0a:	490a      	ldr	r1, [pc, #40]	@ (8003d34 <HAL_RCC_ClockConfig+0x1c0>)
 8003d0c:	5ccb      	ldrb	r3, [r1, r3]
 8003d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d12:	4a09      	ldr	r2, [pc, #36]	@ (8003d38 <HAL_RCC_ClockConfig+0x1c4>)
 8003d14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003d16:	4b09      	ldr	r3, [pc, #36]	@ (8003d3c <HAL_RCC_ClockConfig+0x1c8>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7fe f9f2 	bl	8002104 <HAL_InitTick>

  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	40023c00 	.word	0x40023c00
 8003d30:	40023800 	.word	0x40023800
 8003d34:	080072b0 	.word	0x080072b0
 8003d38:	20000004 	.word	0x20000004
 8003d3c:	20000008 	.word	0x20000008

08003d40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d44:	4b03      	ldr	r3, [pc, #12]	@ (8003d54 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d46:	681b      	ldr	r3, [r3, #0]
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	20000004 	.word	0x20000004

08003d58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d5c:	f7ff fff0 	bl	8003d40 <HAL_RCC_GetHCLKFreq>
 8003d60:	4602      	mov	r2, r0
 8003d62:	4b05      	ldr	r3, [pc, #20]	@ (8003d78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	0a9b      	lsrs	r3, r3, #10
 8003d68:	f003 0307 	and.w	r3, r3, #7
 8003d6c:	4903      	ldr	r1, [pc, #12]	@ (8003d7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d6e:	5ccb      	ldrb	r3, [r1, r3]
 8003d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	40023800 	.word	0x40023800
 8003d7c:	080072c0 	.word	0x080072c0

08003d80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d84:	f7ff ffdc 	bl	8003d40 <HAL_RCC_GetHCLKFreq>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	4b05      	ldr	r3, [pc, #20]	@ (8003da0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	0b5b      	lsrs	r3, r3, #13
 8003d90:	f003 0307 	and.w	r3, r3, #7
 8003d94:	4903      	ldr	r1, [pc, #12]	@ (8003da4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d96:	5ccb      	ldrb	r3, [r1, r3]
 8003d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	40023800 	.word	0x40023800
 8003da4:	080072c0 	.word	0x080072c0

08003da8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	220f      	movs	r2, #15
 8003db6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003db8:	4b12      	ldr	r3, [pc, #72]	@ (8003e04 <HAL_RCC_GetClockConfig+0x5c>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f003 0203 	and.w	r2, r3, #3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8003e04 <HAL_RCC_GetClockConfig+0x5c>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8003e04 <HAL_RCC_GetClockConfig+0x5c>)
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003ddc:	4b09      	ldr	r3, [pc, #36]	@ (8003e04 <HAL_RCC_GetClockConfig+0x5c>)
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	08db      	lsrs	r3, r3, #3
 8003de2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003dea:	4b07      	ldr	r3, [pc, #28]	@ (8003e08 <HAL_RCC_GetClockConfig+0x60>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 020f 	and.w	r2, r3, #15
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	601a      	str	r2, [r3, #0]
}
 8003df6:	bf00      	nop
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	40023800 	.word	0x40023800
 8003e08:	40023c00 	.word	0x40023c00

08003e0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e10:	b0ae      	sub	sp, #184	@ 0xb8
 8003e12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003e14:	2300      	movs	r3, #0
 8003e16:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003e20:	2300      	movs	r3, #0
 8003e22:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003e26:	2300      	movs	r3, #0
 8003e28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e32:	4bcb      	ldr	r3, [pc, #812]	@ (8004160 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f003 030c 	and.w	r3, r3, #12
 8003e3a:	2b0c      	cmp	r3, #12
 8003e3c:	f200 8206 	bhi.w	800424c <HAL_RCC_GetSysClockFreq+0x440>
 8003e40:	a201      	add	r2, pc, #4	@ (adr r2, 8003e48 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e46:	bf00      	nop
 8003e48:	08003e7d 	.word	0x08003e7d
 8003e4c:	0800424d 	.word	0x0800424d
 8003e50:	0800424d 	.word	0x0800424d
 8003e54:	0800424d 	.word	0x0800424d
 8003e58:	08003e85 	.word	0x08003e85
 8003e5c:	0800424d 	.word	0x0800424d
 8003e60:	0800424d 	.word	0x0800424d
 8003e64:	0800424d 	.word	0x0800424d
 8003e68:	08003e8d 	.word	0x08003e8d
 8003e6c:	0800424d 	.word	0x0800424d
 8003e70:	0800424d 	.word	0x0800424d
 8003e74:	0800424d 	.word	0x0800424d
 8003e78:	0800407d 	.word	0x0800407d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e7c:	4bb9      	ldr	r3, [pc, #740]	@ (8004164 <HAL_RCC_GetSysClockFreq+0x358>)
 8003e7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003e82:	e1e7      	b.n	8004254 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e84:	4bb8      	ldr	r3, [pc, #736]	@ (8004168 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003e86:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003e8a:	e1e3      	b.n	8004254 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e8c:	4bb4      	ldr	r3, [pc, #720]	@ (8004160 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e98:	4bb1      	ldr	r3, [pc, #708]	@ (8004160 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d071      	beq.n	8003f88 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ea4:	4bae      	ldr	r3, [pc, #696]	@ (8004160 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	099b      	lsrs	r3, r3, #6
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003eb0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003eb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003eb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ebc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003ec6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003eca:	4622      	mov	r2, r4
 8003ecc:	462b      	mov	r3, r5
 8003ece:	f04f 0000 	mov.w	r0, #0
 8003ed2:	f04f 0100 	mov.w	r1, #0
 8003ed6:	0159      	lsls	r1, r3, #5
 8003ed8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003edc:	0150      	lsls	r0, r2, #5
 8003ede:	4602      	mov	r2, r0
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	4621      	mov	r1, r4
 8003ee4:	1a51      	subs	r1, r2, r1
 8003ee6:	6439      	str	r1, [r7, #64]	@ 0x40
 8003ee8:	4629      	mov	r1, r5
 8003eea:	eb63 0301 	sbc.w	r3, r3, r1
 8003eee:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ef0:	f04f 0200 	mov.w	r2, #0
 8003ef4:	f04f 0300 	mov.w	r3, #0
 8003ef8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003efc:	4649      	mov	r1, r9
 8003efe:	018b      	lsls	r3, r1, #6
 8003f00:	4641      	mov	r1, r8
 8003f02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f06:	4641      	mov	r1, r8
 8003f08:	018a      	lsls	r2, r1, #6
 8003f0a:	4641      	mov	r1, r8
 8003f0c:	1a51      	subs	r1, r2, r1
 8003f0e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003f10:	4649      	mov	r1, r9
 8003f12:	eb63 0301 	sbc.w	r3, r3, r1
 8003f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f18:	f04f 0200 	mov.w	r2, #0
 8003f1c:	f04f 0300 	mov.w	r3, #0
 8003f20:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003f24:	4649      	mov	r1, r9
 8003f26:	00cb      	lsls	r3, r1, #3
 8003f28:	4641      	mov	r1, r8
 8003f2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f2e:	4641      	mov	r1, r8
 8003f30:	00ca      	lsls	r2, r1, #3
 8003f32:	4610      	mov	r0, r2
 8003f34:	4619      	mov	r1, r3
 8003f36:	4603      	mov	r3, r0
 8003f38:	4622      	mov	r2, r4
 8003f3a:	189b      	adds	r3, r3, r2
 8003f3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f3e:	462b      	mov	r3, r5
 8003f40:	460a      	mov	r2, r1
 8003f42:	eb42 0303 	adc.w	r3, r2, r3
 8003f46:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f48:	f04f 0200 	mov.w	r2, #0
 8003f4c:	f04f 0300 	mov.w	r3, #0
 8003f50:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003f54:	4629      	mov	r1, r5
 8003f56:	024b      	lsls	r3, r1, #9
 8003f58:	4621      	mov	r1, r4
 8003f5a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f5e:	4621      	mov	r1, r4
 8003f60:	024a      	lsls	r2, r1, #9
 8003f62:	4610      	mov	r0, r2
 8003f64:	4619      	mov	r1, r3
 8003f66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003f70:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003f74:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003f78:	f7fc fe48 	bl	8000c0c <__aeabi_uldivmod>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	460b      	mov	r3, r1
 8003f80:	4613      	mov	r3, r2
 8003f82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f86:	e067      	b.n	8004058 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f88:	4b75      	ldr	r3, [pc, #468]	@ (8004160 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	099b      	lsrs	r3, r3, #6
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003f94:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003f98:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fa0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003fa6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003faa:	4622      	mov	r2, r4
 8003fac:	462b      	mov	r3, r5
 8003fae:	f04f 0000 	mov.w	r0, #0
 8003fb2:	f04f 0100 	mov.w	r1, #0
 8003fb6:	0159      	lsls	r1, r3, #5
 8003fb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fbc:	0150      	lsls	r0, r2, #5
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	4621      	mov	r1, r4
 8003fc4:	1a51      	subs	r1, r2, r1
 8003fc6:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003fc8:	4629      	mov	r1, r5
 8003fca:	eb63 0301 	sbc.w	r3, r3, r1
 8003fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fd0:	f04f 0200 	mov.w	r2, #0
 8003fd4:	f04f 0300 	mov.w	r3, #0
 8003fd8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003fdc:	4649      	mov	r1, r9
 8003fde:	018b      	lsls	r3, r1, #6
 8003fe0:	4641      	mov	r1, r8
 8003fe2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fe6:	4641      	mov	r1, r8
 8003fe8:	018a      	lsls	r2, r1, #6
 8003fea:	4641      	mov	r1, r8
 8003fec:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ff0:	4649      	mov	r1, r9
 8003ff2:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ff6:	f04f 0200 	mov.w	r2, #0
 8003ffa:	f04f 0300 	mov.w	r3, #0
 8003ffe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004002:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004006:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800400a:	4692      	mov	sl, r2
 800400c:	469b      	mov	fp, r3
 800400e:	4623      	mov	r3, r4
 8004010:	eb1a 0303 	adds.w	r3, sl, r3
 8004014:	623b      	str	r3, [r7, #32]
 8004016:	462b      	mov	r3, r5
 8004018:	eb4b 0303 	adc.w	r3, fp, r3
 800401c:	627b      	str	r3, [r7, #36]	@ 0x24
 800401e:	f04f 0200 	mov.w	r2, #0
 8004022:	f04f 0300 	mov.w	r3, #0
 8004026:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800402a:	4629      	mov	r1, r5
 800402c:	028b      	lsls	r3, r1, #10
 800402e:	4621      	mov	r1, r4
 8004030:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004034:	4621      	mov	r1, r4
 8004036:	028a      	lsls	r2, r1, #10
 8004038:	4610      	mov	r0, r2
 800403a:	4619      	mov	r1, r3
 800403c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004040:	2200      	movs	r2, #0
 8004042:	673b      	str	r3, [r7, #112]	@ 0x70
 8004044:	677a      	str	r2, [r7, #116]	@ 0x74
 8004046:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800404a:	f7fc fddf 	bl	8000c0c <__aeabi_uldivmod>
 800404e:	4602      	mov	r2, r0
 8004050:	460b      	mov	r3, r1
 8004052:	4613      	mov	r3, r2
 8004054:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004058:	4b41      	ldr	r3, [pc, #260]	@ (8004160 <HAL_RCC_GetSysClockFreq+0x354>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	0c1b      	lsrs	r3, r3, #16
 800405e:	f003 0303 	and.w	r3, r3, #3
 8004062:	3301      	adds	r3, #1
 8004064:	005b      	lsls	r3, r3, #1
 8004066:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800406a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800406e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004072:	fbb2 f3f3 	udiv	r3, r2, r3
 8004076:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800407a:	e0eb      	b.n	8004254 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800407c:	4b38      	ldr	r3, [pc, #224]	@ (8004160 <HAL_RCC_GetSysClockFreq+0x354>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004084:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004088:	4b35      	ldr	r3, [pc, #212]	@ (8004160 <HAL_RCC_GetSysClockFreq+0x354>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d06b      	beq.n	800416c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004094:	4b32      	ldr	r3, [pc, #200]	@ (8004160 <HAL_RCC_GetSysClockFreq+0x354>)
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	099b      	lsrs	r3, r3, #6
 800409a:	2200      	movs	r2, #0
 800409c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800409e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80040a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80040a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040a6:	663b      	str	r3, [r7, #96]	@ 0x60
 80040a8:	2300      	movs	r3, #0
 80040aa:	667b      	str	r3, [r7, #100]	@ 0x64
 80040ac:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80040b0:	4622      	mov	r2, r4
 80040b2:	462b      	mov	r3, r5
 80040b4:	f04f 0000 	mov.w	r0, #0
 80040b8:	f04f 0100 	mov.w	r1, #0
 80040bc:	0159      	lsls	r1, r3, #5
 80040be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040c2:	0150      	lsls	r0, r2, #5
 80040c4:	4602      	mov	r2, r0
 80040c6:	460b      	mov	r3, r1
 80040c8:	4621      	mov	r1, r4
 80040ca:	1a51      	subs	r1, r2, r1
 80040cc:	61b9      	str	r1, [r7, #24]
 80040ce:	4629      	mov	r1, r5
 80040d0:	eb63 0301 	sbc.w	r3, r3, r1
 80040d4:	61fb      	str	r3, [r7, #28]
 80040d6:	f04f 0200 	mov.w	r2, #0
 80040da:	f04f 0300 	mov.w	r3, #0
 80040de:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80040e2:	4659      	mov	r1, fp
 80040e4:	018b      	lsls	r3, r1, #6
 80040e6:	4651      	mov	r1, sl
 80040e8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040ec:	4651      	mov	r1, sl
 80040ee:	018a      	lsls	r2, r1, #6
 80040f0:	4651      	mov	r1, sl
 80040f2:	ebb2 0801 	subs.w	r8, r2, r1
 80040f6:	4659      	mov	r1, fp
 80040f8:	eb63 0901 	sbc.w	r9, r3, r1
 80040fc:	f04f 0200 	mov.w	r2, #0
 8004100:	f04f 0300 	mov.w	r3, #0
 8004104:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004108:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800410c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004110:	4690      	mov	r8, r2
 8004112:	4699      	mov	r9, r3
 8004114:	4623      	mov	r3, r4
 8004116:	eb18 0303 	adds.w	r3, r8, r3
 800411a:	613b      	str	r3, [r7, #16]
 800411c:	462b      	mov	r3, r5
 800411e:	eb49 0303 	adc.w	r3, r9, r3
 8004122:	617b      	str	r3, [r7, #20]
 8004124:	f04f 0200 	mov.w	r2, #0
 8004128:	f04f 0300 	mov.w	r3, #0
 800412c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004130:	4629      	mov	r1, r5
 8004132:	024b      	lsls	r3, r1, #9
 8004134:	4621      	mov	r1, r4
 8004136:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800413a:	4621      	mov	r1, r4
 800413c:	024a      	lsls	r2, r1, #9
 800413e:	4610      	mov	r0, r2
 8004140:	4619      	mov	r1, r3
 8004142:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004146:	2200      	movs	r2, #0
 8004148:	65bb      	str	r3, [r7, #88]	@ 0x58
 800414a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800414c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004150:	f7fc fd5c 	bl	8000c0c <__aeabi_uldivmod>
 8004154:	4602      	mov	r2, r0
 8004156:	460b      	mov	r3, r1
 8004158:	4613      	mov	r3, r2
 800415a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800415e:	e065      	b.n	800422c <HAL_RCC_GetSysClockFreq+0x420>
 8004160:	40023800 	.word	0x40023800
 8004164:	00f42400 	.word	0x00f42400
 8004168:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800416c:	4b3d      	ldr	r3, [pc, #244]	@ (8004264 <HAL_RCC_GetSysClockFreq+0x458>)
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	099b      	lsrs	r3, r3, #6
 8004172:	2200      	movs	r2, #0
 8004174:	4618      	mov	r0, r3
 8004176:	4611      	mov	r1, r2
 8004178:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800417c:	653b      	str	r3, [r7, #80]	@ 0x50
 800417e:	2300      	movs	r3, #0
 8004180:	657b      	str	r3, [r7, #84]	@ 0x54
 8004182:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004186:	4642      	mov	r2, r8
 8004188:	464b      	mov	r3, r9
 800418a:	f04f 0000 	mov.w	r0, #0
 800418e:	f04f 0100 	mov.w	r1, #0
 8004192:	0159      	lsls	r1, r3, #5
 8004194:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004198:	0150      	lsls	r0, r2, #5
 800419a:	4602      	mov	r2, r0
 800419c:	460b      	mov	r3, r1
 800419e:	4641      	mov	r1, r8
 80041a0:	1a51      	subs	r1, r2, r1
 80041a2:	60b9      	str	r1, [r7, #8]
 80041a4:	4649      	mov	r1, r9
 80041a6:	eb63 0301 	sbc.w	r3, r3, r1
 80041aa:	60fb      	str	r3, [r7, #12]
 80041ac:	f04f 0200 	mov.w	r2, #0
 80041b0:	f04f 0300 	mov.w	r3, #0
 80041b4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80041b8:	4659      	mov	r1, fp
 80041ba:	018b      	lsls	r3, r1, #6
 80041bc:	4651      	mov	r1, sl
 80041be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041c2:	4651      	mov	r1, sl
 80041c4:	018a      	lsls	r2, r1, #6
 80041c6:	4651      	mov	r1, sl
 80041c8:	1a54      	subs	r4, r2, r1
 80041ca:	4659      	mov	r1, fp
 80041cc:	eb63 0501 	sbc.w	r5, r3, r1
 80041d0:	f04f 0200 	mov.w	r2, #0
 80041d4:	f04f 0300 	mov.w	r3, #0
 80041d8:	00eb      	lsls	r3, r5, #3
 80041da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041de:	00e2      	lsls	r2, r4, #3
 80041e0:	4614      	mov	r4, r2
 80041e2:	461d      	mov	r5, r3
 80041e4:	4643      	mov	r3, r8
 80041e6:	18e3      	adds	r3, r4, r3
 80041e8:	603b      	str	r3, [r7, #0]
 80041ea:	464b      	mov	r3, r9
 80041ec:	eb45 0303 	adc.w	r3, r5, r3
 80041f0:	607b      	str	r3, [r7, #4]
 80041f2:	f04f 0200 	mov.w	r2, #0
 80041f6:	f04f 0300 	mov.w	r3, #0
 80041fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041fe:	4629      	mov	r1, r5
 8004200:	028b      	lsls	r3, r1, #10
 8004202:	4621      	mov	r1, r4
 8004204:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004208:	4621      	mov	r1, r4
 800420a:	028a      	lsls	r2, r1, #10
 800420c:	4610      	mov	r0, r2
 800420e:	4619      	mov	r1, r3
 8004210:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004214:	2200      	movs	r2, #0
 8004216:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004218:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800421a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800421e:	f7fc fcf5 	bl	8000c0c <__aeabi_uldivmod>
 8004222:	4602      	mov	r2, r0
 8004224:	460b      	mov	r3, r1
 8004226:	4613      	mov	r3, r2
 8004228:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800422c:	4b0d      	ldr	r3, [pc, #52]	@ (8004264 <HAL_RCC_GetSysClockFreq+0x458>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	0f1b      	lsrs	r3, r3, #28
 8004232:	f003 0307 	and.w	r3, r3, #7
 8004236:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800423a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800423e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004242:	fbb2 f3f3 	udiv	r3, r2, r3
 8004246:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800424a:	e003      	b.n	8004254 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800424c:	4b06      	ldr	r3, [pc, #24]	@ (8004268 <HAL_RCC_GetSysClockFreq+0x45c>)
 800424e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004252:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004254:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004258:	4618      	mov	r0, r3
 800425a:	37b8      	adds	r7, #184	@ 0xb8
 800425c:	46bd      	mov	sp, r7
 800425e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004262:	bf00      	nop
 8004264:	40023800 	.word	0x40023800
 8004268:	00f42400 	.word	0x00f42400

0800426c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b086      	sub	sp, #24
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e28d      	b.n	800479a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	f000 8083 	beq.w	8004392 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800428c:	4b94      	ldr	r3, [pc, #592]	@ (80044e0 <HAL_RCC_OscConfig+0x274>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f003 030c 	and.w	r3, r3, #12
 8004294:	2b04      	cmp	r3, #4
 8004296:	d019      	beq.n	80042cc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004298:	4b91      	ldr	r3, [pc, #580]	@ (80044e0 <HAL_RCC_OscConfig+0x274>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f003 030c 	and.w	r3, r3, #12
        || \
 80042a0:	2b08      	cmp	r3, #8
 80042a2:	d106      	bne.n	80042b2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80042a4:	4b8e      	ldr	r3, [pc, #568]	@ (80044e0 <HAL_RCC_OscConfig+0x274>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042b0:	d00c      	beq.n	80042cc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042b2:	4b8b      	ldr	r3, [pc, #556]	@ (80044e0 <HAL_RCC_OscConfig+0x274>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80042ba:	2b0c      	cmp	r3, #12
 80042bc:	d112      	bne.n	80042e4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042be:	4b88      	ldr	r3, [pc, #544]	@ (80044e0 <HAL_RCC_OscConfig+0x274>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042ca:	d10b      	bne.n	80042e4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042cc:	4b84      	ldr	r3, [pc, #528]	@ (80044e0 <HAL_RCC_OscConfig+0x274>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d05b      	beq.n	8004390 <HAL_RCC_OscConfig+0x124>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d157      	bne.n	8004390 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e25a      	b.n	800479a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042ec:	d106      	bne.n	80042fc <HAL_RCC_OscConfig+0x90>
 80042ee:	4b7c      	ldr	r3, [pc, #496]	@ (80044e0 <HAL_RCC_OscConfig+0x274>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a7b      	ldr	r2, [pc, #492]	@ (80044e0 <HAL_RCC_OscConfig+0x274>)
 80042f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042f8:	6013      	str	r3, [r2, #0]
 80042fa:	e01d      	b.n	8004338 <HAL_RCC_OscConfig+0xcc>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004304:	d10c      	bne.n	8004320 <HAL_RCC_OscConfig+0xb4>
 8004306:	4b76      	ldr	r3, [pc, #472]	@ (80044e0 <HAL_RCC_OscConfig+0x274>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a75      	ldr	r2, [pc, #468]	@ (80044e0 <HAL_RCC_OscConfig+0x274>)
 800430c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004310:	6013      	str	r3, [r2, #0]
 8004312:	4b73      	ldr	r3, [pc, #460]	@ (80044e0 <HAL_RCC_OscConfig+0x274>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a72      	ldr	r2, [pc, #456]	@ (80044e0 <HAL_RCC_OscConfig+0x274>)
 8004318:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800431c:	6013      	str	r3, [r2, #0]
 800431e:	e00b      	b.n	8004338 <HAL_RCC_OscConfig+0xcc>
 8004320:	4b6f      	ldr	r3, [pc, #444]	@ (80044e0 <HAL_RCC_OscConfig+0x274>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a6e      	ldr	r2, [pc, #440]	@ (80044e0 <HAL_RCC_OscConfig+0x274>)
 8004326:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800432a:	6013      	str	r3, [r2, #0]
 800432c:	4b6c      	ldr	r3, [pc, #432]	@ (80044e0 <HAL_RCC_OscConfig+0x274>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a6b      	ldr	r2, [pc, #428]	@ (80044e0 <HAL_RCC_OscConfig+0x274>)
 8004332:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004336:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d013      	beq.n	8004368 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004340:	f7fe f82a 	bl	8002398 <HAL_GetTick>
 8004344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004346:	e008      	b.n	800435a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004348:	f7fe f826 	bl	8002398 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b64      	cmp	r3, #100	@ 0x64
 8004354:	d901      	bls.n	800435a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e21f      	b.n	800479a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800435a:	4b61      	ldr	r3, [pc, #388]	@ (80044e0 <HAL_RCC_OscConfig+0x274>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d0f0      	beq.n	8004348 <HAL_RCC_OscConfig+0xdc>
 8004366:	e014      	b.n	8004392 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004368:	f7fe f816 	bl	8002398 <HAL_GetTick>
 800436c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004370:	f7fe f812 	bl	8002398 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b64      	cmp	r3, #100	@ 0x64
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e20b      	b.n	800479a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004382:	4b57      	ldr	r3, [pc, #348]	@ (80044e0 <HAL_RCC_OscConfig+0x274>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1f0      	bne.n	8004370 <HAL_RCC_OscConfig+0x104>
 800438e:	e000      	b.n	8004392 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d06f      	beq.n	800447e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800439e:	4b50      	ldr	r3, [pc, #320]	@ (80044e0 <HAL_RCC_OscConfig+0x274>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f003 030c 	and.w	r3, r3, #12
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d017      	beq.n	80043da <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80043aa:	4b4d      	ldr	r3, [pc, #308]	@ (80044e0 <HAL_RCC_OscConfig+0x274>)
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f003 030c 	and.w	r3, r3, #12
        || \
 80043b2:	2b08      	cmp	r3, #8
 80043b4:	d105      	bne.n	80043c2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80043b6:	4b4a      	ldr	r3, [pc, #296]	@ (80044e0 <HAL_RCC_OscConfig+0x274>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00b      	beq.n	80043da <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043c2:	4b47      	ldr	r3, [pc, #284]	@ (80044e0 <HAL_RCC_OscConfig+0x274>)
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80043ca:	2b0c      	cmp	r3, #12
 80043cc:	d11c      	bne.n	8004408 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043ce:	4b44      	ldr	r3, [pc, #272]	@ (80044e0 <HAL_RCC_OscConfig+0x274>)
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d116      	bne.n	8004408 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043da:	4b41      	ldr	r3, [pc, #260]	@ (80044e0 <HAL_RCC_OscConfig+0x274>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d005      	beq.n	80043f2 <HAL_RCC_OscConfig+0x186>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d001      	beq.n	80043f2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e1d3      	b.n	800479a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043f2:	4b3b      	ldr	r3, [pc, #236]	@ (80044e0 <HAL_RCC_OscConfig+0x274>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	00db      	lsls	r3, r3, #3
 8004400:	4937      	ldr	r1, [pc, #220]	@ (80044e0 <HAL_RCC_OscConfig+0x274>)
 8004402:	4313      	orrs	r3, r2
 8004404:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004406:	e03a      	b.n	800447e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d020      	beq.n	8004452 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004410:	4b34      	ldr	r3, [pc, #208]	@ (80044e4 <HAL_RCC_OscConfig+0x278>)
 8004412:	2201      	movs	r2, #1
 8004414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004416:	f7fd ffbf 	bl	8002398 <HAL_GetTick>
 800441a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800441c:	e008      	b.n	8004430 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800441e:	f7fd ffbb 	bl	8002398 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	2b02      	cmp	r3, #2
 800442a:	d901      	bls.n	8004430 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e1b4      	b.n	800479a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004430:	4b2b      	ldr	r3, [pc, #172]	@ (80044e0 <HAL_RCC_OscConfig+0x274>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d0f0      	beq.n	800441e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800443c:	4b28      	ldr	r3, [pc, #160]	@ (80044e0 <HAL_RCC_OscConfig+0x274>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	00db      	lsls	r3, r3, #3
 800444a:	4925      	ldr	r1, [pc, #148]	@ (80044e0 <HAL_RCC_OscConfig+0x274>)
 800444c:	4313      	orrs	r3, r2
 800444e:	600b      	str	r3, [r1, #0]
 8004450:	e015      	b.n	800447e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004452:	4b24      	ldr	r3, [pc, #144]	@ (80044e4 <HAL_RCC_OscConfig+0x278>)
 8004454:	2200      	movs	r2, #0
 8004456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004458:	f7fd ff9e 	bl	8002398 <HAL_GetTick>
 800445c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800445e:	e008      	b.n	8004472 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004460:	f7fd ff9a 	bl	8002398 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b02      	cmp	r3, #2
 800446c:	d901      	bls.n	8004472 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e193      	b.n	800479a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004472:	4b1b      	ldr	r3, [pc, #108]	@ (80044e0 <HAL_RCC_OscConfig+0x274>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1f0      	bne.n	8004460 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0308 	and.w	r3, r3, #8
 8004486:	2b00      	cmp	r3, #0
 8004488:	d036      	beq.n	80044f8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d016      	beq.n	80044c0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004492:	4b15      	ldr	r3, [pc, #84]	@ (80044e8 <HAL_RCC_OscConfig+0x27c>)
 8004494:	2201      	movs	r2, #1
 8004496:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004498:	f7fd ff7e 	bl	8002398 <HAL_GetTick>
 800449c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800449e:	e008      	b.n	80044b2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044a0:	f7fd ff7a 	bl	8002398 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e173      	b.n	800479a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044b2:	4b0b      	ldr	r3, [pc, #44]	@ (80044e0 <HAL_RCC_OscConfig+0x274>)
 80044b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d0f0      	beq.n	80044a0 <HAL_RCC_OscConfig+0x234>
 80044be:	e01b      	b.n	80044f8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044c0:	4b09      	ldr	r3, [pc, #36]	@ (80044e8 <HAL_RCC_OscConfig+0x27c>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c6:	f7fd ff67 	bl	8002398 <HAL_GetTick>
 80044ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044cc:	e00e      	b.n	80044ec <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044ce:	f7fd ff63 	bl	8002398 <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d907      	bls.n	80044ec <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e15c      	b.n	800479a <HAL_RCC_OscConfig+0x52e>
 80044e0:	40023800 	.word	0x40023800
 80044e4:	42470000 	.word	0x42470000
 80044e8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044ec:	4b8a      	ldr	r3, [pc, #552]	@ (8004718 <HAL_RCC_OscConfig+0x4ac>)
 80044ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044f0:	f003 0302 	and.w	r3, r3, #2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1ea      	bne.n	80044ce <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0304 	and.w	r3, r3, #4
 8004500:	2b00      	cmp	r3, #0
 8004502:	f000 8097 	beq.w	8004634 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004506:	2300      	movs	r3, #0
 8004508:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800450a:	4b83      	ldr	r3, [pc, #524]	@ (8004718 <HAL_RCC_OscConfig+0x4ac>)
 800450c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d10f      	bne.n	8004536 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004516:	2300      	movs	r3, #0
 8004518:	60bb      	str	r3, [r7, #8]
 800451a:	4b7f      	ldr	r3, [pc, #508]	@ (8004718 <HAL_RCC_OscConfig+0x4ac>)
 800451c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800451e:	4a7e      	ldr	r2, [pc, #504]	@ (8004718 <HAL_RCC_OscConfig+0x4ac>)
 8004520:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004524:	6413      	str	r3, [r2, #64]	@ 0x40
 8004526:	4b7c      	ldr	r3, [pc, #496]	@ (8004718 <HAL_RCC_OscConfig+0x4ac>)
 8004528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800452e:	60bb      	str	r3, [r7, #8]
 8004530:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004532:	2301      	movs	r3, #1
 8004534:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004536:	4b79      	ldr	r3, [pc, #484]	@ (800471c <HAL_RCC_OscConfig+0x4b0>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800453e:	2b00      	cmp	r3, #0
 8004540:	d118      	bne.n	8004574 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004542:	4b76      	ldr	r3, [pc, #472]	@ (800471c <HAL_RCC_OscConfig+0x4b0>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a75      	ldr	r2, [pc, #468]	@ (800471c <HAL_RCC_OscConfig+0x4b0>)
 8004548:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800454c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800454e:	f7fd ff23 	bl	8002398 <HAL_GetTick>
 8004552:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004554:	e008      	b.n	8004568 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004556:	f7fd ff1f 	bl	8002398 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	2b02      	cmp	r3, #2
 8004562:	d901      	bls.n	8004568 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e118      	b.n	800479a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004568:	4b6c      	ldr	r3, [pc, #432]	@ (800471c <HAL_RCC_OscConfig+0x4b0>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004570:	2b00      	cmp	r3, #0
 8004572:	d0f0      	beq.n	8004556 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d106      	bne.n	800458a <HAL_RCC_OscConfig+0x31e>
 800457c:	4b66      	ldr	r3, [pc, #408]	@ (8004718 <HAL_RCC_OscConfig+0x4ac>)
 800457e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004580:	4a65      	ldr	r2, [pc, #404]	@ (8004718 <HAL_RCC_OscConfig+0x4ac>)
 8004582:	f043 0301 	orr.w	r3, r3, #1
 8004586:	6713      	str	r3, [r2, #112]	@ 0x70
 8004588:	e01c      	b.n	80045c4 <HAL_RCC_OscConfig+0x358>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	2b05      	cmp	r3, #5
 8004590:	d10c      	bne.n	80045ac <HAL_RCC_OscConfig+0x340>
 8004592:	4b61      	ldr	r3, [pc, #388]	@ (8004718 <HAL_RCC_OscConfig+0x4ac>)
 8004594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004596:	4a60      	ldr	r2, [pc, #384]	@ (8004718 <HAL_RCC_OscConfig+0x4ac>)
 8004598:	f043 0304 	orr.w	r3, r3, #4
 800459c:	6713      	str	r3, [r2, #112]	@ 0x70
 800459e:	4b5e      	ldr	r3, [pc, #376]	@ (8004718 <HAL_RCC_OscConfig+0x4ac>)
 80045a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045a2:	4a5d      	ldr	r2, [pc, #372]	@ (8004718 <HAL_RCC_OscConfig+0x4ac>)
 80045a4:	f043 0301 	orr.w	r3, r3, #1
 80045a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80045aa:	e00b      	b.n	80045c4 <HAL_RCC_OscConfig+0x358>
 80045ac:	4b5a      	ldr	r3, [pc, #360]	@ (8004718 <HAL_RCC_OscConfig+0x4ac>)
 80045ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045b0:	4a59      	ldr	r2, [pc, #356]	@ (8004718 <HAL_RCC_OscConfig+0x4ac>)
 80045b2:	f023 0301 	bic.w	r3, r3, #1
 80045b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80045b8:	4b57      	ldr	r3, [pc, #348]	@ (8004718 <HAL_RCC_OscConfig+0x4ac>)
 80045ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045bc:	4a56      	ldr	r2, [pc, #344]	@ (8004718 <HAL_RCC_OscConfig+0x4ac>)
 80045be:	f023 0304 	bic.w	r3, r3, #4
 80045c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d015      	beq.n	80045f8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045cc:	f7fd fee4 	bl	8002398 <HAL_GetTick>
 80045d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d2:	e00a      	b.n	80045ea <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045d4:	f7fd fee0 	bl	8002398 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e0d7      	b.n	800479a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ea:	4b4b      	ldr	r3, [pc, #300]	@ (8004718 <HAL_RCC_OscConfig+0x4ac>)
 80045ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d0ee      	beq.n	80045d4 <HAL_RCC_OscConfig+0x368>
 80045f6:	e014      	b.n	8004622 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f8:	f7fd fece 	bl	8002398 <HAL_GetTick>
 80045fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045fe:	e00a      	b.n	8004616 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004600:	f7fd feca 	bl	8002398 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800460e:	4293      	cmp	r3, r2
 8004610:	d901      	bls.n	8004616 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e0c1      	b.n	800479a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004616:	4b40      	ldr	r3, [pc, #256]	@ (8004718 <HAL_RCC_OscConfig+0x4ac>)
 8004618:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1ee      	bne.n	8004600 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004622:	7dfb      	ldrb	r3, [r7, #23]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d105      	bne.n	8004634 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004628:	4b3b      	ldr	r3, [pc, #236]	@ (8004718 <HAL_RCC_OscConfig+0x4ac>)
 800462a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800462c:	4a3a      	ldr	r2, [pc, #232]	@ (8004718 <HAL_RCC_OscConfig+0x4ac>)
 800462e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004632:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	2b00      	cmp	r3, #0
 800463a:	f000 80ad 	beq.w	8004798 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800463e:	4b36      	ldr	r3, [pc, #216]	@ (8004718 <HAL_RCC_OscConfig+0x4ac>)
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f003 030c 	and.w	r3, r3, #12
 8004646:	2b08      	cmp	r3, #8
 8004648:	d060      	beq.n	800470c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	2b02      	cmp	r3, #2
 8004650:	d145      	bne.n	80046de <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004652:	4b33      	ldr	r3, [pc, #204]	@ (8004720 <HAL_RCC_OscConfig+0x4b4>)
 8004654:	2200      	movs	r2, #0
 8004656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004658:	f7fd fe9e 	bl	8002398 <HAL_GetTick>
 800465c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800465e:	e008      	b.n	8004672 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004660:	f7fd fe9a 	bl	8002398 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b02      	cmp	r3, #2
 800466c:	d901      	bls.n	8004672 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e093      	b.n	800479a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004672:	4b29      	ldr	r3, [pc, #164]	@ (8004718 <HAL_RCC_OscConfig+0x4ac>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1f0      	bne.n	8004660 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	69da      	ldr	r2, [r3, #28]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	431a      	orrs	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800468c:	019b      	lsls	r3, r3, #6
 800468e:	431a      	orrs	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004694:	085b      	lsrs	r3, r3, #1
 8004696:	3b01      	subs	r3, #1
 8004698:	041b      	lsls	r3, r3, #16
 800469a:	431a      	orrs	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046a0:	061b      	lsls	r3, r3, #24
 80046a2:	431a      	orrs	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a8:	071b      	lsls	r3, r3, #28
 80046aa:	491b      	ldr	r1, [pc, #108]	@ (8004718 <HAL_RCC_OscConfig+0x4ac>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004720 <HAL_RCC_OscConfig+0x4b4>)
 80046b2:	2201      	movs	r2, #1
 80046b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b6:	f7fd fe6f 	bl	8002398 <HAL_GetTick>
 80046ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046bc:	e008      	b.n	80046d0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046be:	f7fd fe6b 	bl	8002398 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d901      	bls.n	80046d0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e064      	b.n	800479a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046d0:	4b11      	ldr	r3, [pc, #68]	@ (8004718 <HAL_RCC_OscConfig+0x4ac>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d0f0      	beq.n	80046be <HAL_RCC_OscConfig+0x452>
 80046dc:	e05c      	b.n	8004798 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046de:	4b10      	ldr	r3, [pc, #64]	@ (8004720 <HAL_RCC_OscConfig+0x4b4>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e4:	f7fd fe58 	bl	8002398 <HAL_GetTick>
 80046e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046ea:	e008      	b.n	80046fe <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ec:	f7fd fe54 	bl	8002398 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e04d      	b.n	800479a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046fe:	4b06      	ldr	r3, [pc, #24]	@ (8004718 <HAL_RCC_OscConfig+0x4ac>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1f0      	bne.n	80046ec <HAL_RCC_OscConfig+0x480>
 800470a:	e045      	b.n	8004798 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d107      	bne.n	8004724 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e040      	b.n	800479a <HAL_RCC_OscConfig+0x52e>
 8004718:	40023800 	.word	0x40023800
 800471c:	40007000 	.word	0x40007000
 8004720:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004724:	4b1f      	ldr	r3, [pc, #124]	@ (80047a4 <HAL_RCC_OscConfig+0x538>)
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d030      	beq.n	8004794 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800473c:	429a      	cmp	r2, r3
 800473e:	d129      	bne.n	8004794 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800474a:	429a      	cmp	r2, r3
 800474c:	d122      	bne.n	8004794 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004754:	4013      	ands	r3, r2
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800475a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800475c:	4293      	cmp	r3, r2
 800475e:	d119      	bne.n	8004794 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800476a:	085b      	lsrs	r3, r3, #1
 800476c:	3b01      	subs	r3, #1
 800476e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004770:	429a      	cmp	r2, r3
 8004772:	d10f      	bne.n	8004794 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800477e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004780:	429a      	cmp	r2, r3
 8004782:	d107      	bne.n	8004794 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800478e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004790:	429a      	cmp	r2, r3
 8004792:	d001      	beq.n	8004798 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e000      	b.n	800479a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3718      	adds	r7, #24
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	40023800 	.word	0x40023800

080047a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e041      	b.n	800483e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d106      	bne.n	80047d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 f839 	bl	8004846 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2202      	movs	r2, #2
 80047d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	3304      	adds	r3, #4
 80047e4:	4619      	mov	r1, r3
 80047e6:	4610      	mov	r0, r2
 80047e8:	f000 fb9a 	bl	8004f20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3708      	adds	r7, #8
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004846:	b480      	push	{r7}
 8004848:	b083      	sub	sp, #12
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800484e:	bf00      	nop
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
	...

0800485c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2b01      	cmp	r3, #1
 800486e:	d001      	beq.n	8004874 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e04e      	b.n	8004912 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2202      	movs	r2, #2
 8004878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68da      	ldr	r2, [r3, #12]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f042 0201 	orr.w	r2, r2, #1
 800488a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a23      	ldr	r2, [pc, #140]	@ (8004920 <HAL_TIM_Base_Start_IT+0xc4>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d022      	beq.n	80048dc <HAL_TIM_Base_Start_IT+0x80>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800489e:	d01d      	beq.n	80048dc <HAL_TIM_Base_Start_IT+0x80>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a1f      	ldr	r2, [pc, #124]	@ (8004924 <HAL_TIM_Base_Start_IT+0xc8>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d018      	beq.n	80048dc <HAL_TIM_Base_Start_IT+0x80>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a1e      	ldr	r2, [pc, #120]	@ (8004928 <HAL_TIM_Base_Start_IT+0xcc>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d013      	beq.n	80048dc <HAL_TIM_Base_Start_IT+0x80>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a1c      	ldr	r2, [pc, #112]	@ (800492c <HAL_TIM_Base_Start_IT+0xd0>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d00e      	beq.n	80048dc <HAL_TIM_Base_Start_IT+0x80>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a1b      	ldr	r2, [pc, #108]	@ (8004930 <HAL_TIM_Base_Start_IT+0xd4>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d009      	beq.n	80048dc <HAL_TIM_Base_Start_IT+0x80>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a19      	ldr	r2, [pc, #100]	@ (8004934 <HAL_TIM_Base_Start_IT+0xd8>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d004      	beq.n	80048dc <HAL_TIM_Base_Start_IT+0x80>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a18      	ldr	r2, [pc, #96]	@ (8004938 <HAL_TIM_Base_Start_IT+0xdc>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d111      	bne.n	8004900 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f003 0307 	and.w	r3, r3, #7
 80048e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2b06      	cmp	r3, #6
 80048ec:	d010      	beq.n	8004910 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f042 0201 	orr.w	r2, r2, #1
 80048fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048fe:	e007      	b.n	8004910 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f042 0201 	orr.w	r2, r2, #1
 800490e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3714      	adds	r7, #20
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	40010000 	.word	0x40010000
 8004924:	40000400 	.word	0x40000400
 8004928:	40000800 	.word	0x40000800
 800492c:	40000c00 	.word	0x40000c00
 8004930:	40010400 	.word	0x40010400
 8004934:	40014000 	.word	0x40014000
 8004938:	40001800 	.word	0x40001800

0800493c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b082      	sub	sp, #8
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d101      	bne.n	800494e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e041      	b.n	80049d2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004954:	b2db      	uxtb	r3, r3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d106      	bne.n	8004968 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f7fd fb0a 	bl	8001f7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2202      	movs	r2, #2
 800496c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	3304      	adds	r3, #4
 8004978:	4619      	mov	r1, r3
 800497a:	4610      	mov	r0, r2
 800497c:	f000 fad0 	bl	8004f20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3708      	adds	r7, #8
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
	...

080049dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d109      	bne.n	8004a00 <HAL_TIM_PWM_Start+0x24>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	bf14      	ite	ne
 80049f8:	2301      	movne	r3, #1
 80049fa:	2300      	moveq	r3, #0
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	e022      	b.n	8004a46 <HAL_TIM_PWM_Start+0x6a>
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	2b04      	cmp	r3, #4
 8004a04:	d109      	bne.n	8004a1a <HAL_TIM_PWM_Start+0x3e>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	bf14      	ite	ne
 8004a12:	2301      	movne	r3, #1
 8004a14:	2300      	moveq	r3, #0
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	e015      	b.n	8004a46 <HAL_TIM_PWM_Start+0x6a>
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	2b08      	cmp	r3, #8
 8004a1e:	d109      	bne.n	8004a34 <HAL_TIM_PWM_Start+0x58>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	bf14      	ite	ne
 8004a2c:	2301      	movne	r3, #1
 8004a2e:	2300      	moveq	r3, #0
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	e008      	b.n	8004a46 <HAL_TIM_PWM_Start+0x6a>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	bf14      	ite	ne
 8004a40:	2301      	movne	r3, #1
 8004a42:	2300      	moveq	r3, #0
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e07c      	b.n	8004b48 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d104      	bne.n	8004a5e <HAL_TIM_PWM_Start+0x82>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2202      	movs	r2, #2
 8004a58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a5c:	e013      	b.n	8004a86 <HAL_TIM_PWM_Start+0xaa>
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	2b04      	cmp	r3, #4
 8004a62:	d104      	bne.n	8004a6e <HAL_TIM_PWM_Start+0x92>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2202      	movs	r2, #2
 8004a68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a6c:	e00b      	b.n	8004a86 <HAL_TIM_PWM_Start+0xaa>
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	2b08      	cmp	r3, #8
 8004a72:	d104      	bne.n	8004a7e <HAL_TIM_PWM_Start+0xa2>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2202      	movs	r2, #2
 8004a78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a7c:	e003      	b.n	8004a86 <HAL_TIM_PWM_Start+0xaa>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2202      	movs	r2, #2
 8004a82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	6839      	ldr	r1, [r7, #0]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 fca2 	bl	80053d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a2d      	ldr	r2, [pc, #180]	@ (8004b50 <HAL_TIM_PWM_Start+0x174>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d004      	beq.n	8004aa8 <HAL_TIM_PWM_Start+0xcc>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a2c      	ldr	r2, [pc, #176]	@ (8004b54 <HAL_TIM_PWM_Start+0x178>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d101      	bne.n	8004aac <HAL_TIM_PWM_Start+0xd0>
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e000      	b.n	8004aae <HAL_TIM_PWM_Start+0xd2>
 8004aac:	2300      	movs	r3, #0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d007      	beq.n	8004ac2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004ac0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a22      	ldr	r2, [pc, #136]	@ (8004b50 <HAL_TIM_PWM_Start+0x174>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d022      	beq.n	8004b12 <HAL_TIM_PWM_Start+0x136>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ad4:	d01d      	beq.n	8004b12 <HAL_TIM_PWM_Start+0x136>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a1f      	ldr	r2, [pc, #124]	@ (8004b58 <HAL_TIM_PWM_Start+0x17c>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d018      	beq.n	8004b12 <HAL_TIM_PWM_Start+0x136>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a1d      	ldr	r2, [pc, #116]	@ (8004b5c <HAL_TIM_PWM_Start+0x180>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d013      	beq.n	8004b12 <HAL_TIM_PWM_Start+0x136>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a1c      	ldr	r2, [pc, #112]	@ (8004b60 <HAL_TIM_PWM_Start+0x184>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d00e      	beq.n	8004b12 <HAL_TIM_PWM_Start+0x136>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a16      	ldr	r2, [pc, #88]	@ (8004b54 <HAL_TIM_PWM_Start+0x178>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d009      	beq.n	8004b12 <HAL_TIM_PWM_Start+0x136>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a18      	ldr	r2, [pc, #96]	@ (8004b64 <HAL_TIM_PWM_Start+0x188>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d004      	beq.n	8004b12 <HAL_TIM_PWM_Start+0x136>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a16      	ldr	r2, [pc, #88]	@ (8004b68 <HAL_TIM_PWM_Start+0x18c>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d111      	bne.n	8004b36 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f003 0307 	and.w	r3, r3, #7
 8004b1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2b06      	cmp	r3, #6
 8004b22:	d010      	beq.n	8004b46 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f042 0201 	orr.w	r2, r2, #1
 8004b32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b34:	e007      	b.n	8004b46 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f042 0201 	orr.w	r2, r2, #1
 8004b44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3710      	adds	r7, #16
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	40010000 	.word	0x40010000
 8004b54:	40010400 	.word	0x40010400
 8004b58:	40000400 	.word	0x40000400
 8004b5c:	40000800 	.word	0x40000800
 8004b60:	40000c00 	.word	0x40000c00
 8004b64:	40014000 	.word	0x40014000
 8004b68:	40001800 	.word	0x40001800

08004b6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d020      	beq.n	8004bd0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f003 0302 	and.w	r3, r3, #2
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d01b      	beq.n	8004bd0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f06f 0202 	mvn.w	r2, #2
 8004ba0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	f003 0303 	and.w	r3, r3, #3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d003      	beq.n	8004bbe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f994 	bl	8004ee4 <HAL_TIM_IC_CaptureCallback>
 8004bbc:	e005      	b.n	8004bca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f986 	bl	8004ed0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 f997 	bl	8004ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	f003 0304 	and.w	r3, r3, #4
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d020      	beq.n	8004c1c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f003 0304 	and.w	r3, r3, #4
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d01b      	beq.n	8004c1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f06f 0204 	mvn.w	r2, #4
 8004bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2202      	movs	r2, #2
 8004bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d003      	beq.n	8004c0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f96e 	bl	8004ee4 <HAL_TIM_IC_CaptureCallback>
 8004c08:	e005      	b.n	8004c16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f960 	bl	8004ed0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 f971 	bl	8004ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	f003 0308 	and.w	r3, r3, #8
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d020      	beq.n	8004c68 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f003 0308 	and.w	r3, r3, #8
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d01b      	beq.n	8004c68 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f06f 0208 	mvn.w	r2, #8
 8004c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2204      	movs	r2, #4
 8004c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	69db      	ldr	r3, [r3, #28]
 8004c46:	f003 0303 	and.w	r3, r3, #3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d003      	beq.n	8004c56 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f948 	bl	8004ee4 <HAL_TIM_IC_CaptureCallback>
 8004c54:	e005      	b.n	8004c62 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f93a 	bl	8004ed0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f000 f94b 	bl	8004ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	f003 0310 	and.w	r3, r3, #16
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d020      	beq.n	8004cb4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f003 0310 	and.w	r3, r3, #16
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d01b      	beq.n	8004cb4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f06f 0210 	mvn.w	r2, #16
 8004c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2208      	movs	r2, #8
 8004c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	69db      	ldr	r3, [r3, #28]
 8004c92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d003      	beq.n	8004ca2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 f922 	bl	8004ee4 <HAL_TIM_IC_CaptureCallback>
 8004ca0:	e005      	b.n	8004cae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 f914 	bl	8004ed0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f000 f925 	bl	8004ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	f003 0301 	and.w	r3, r3, #1
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00c      	beq.n	8004cd8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d007      	beq.n	8004cd8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f06f 0201 	mvn.w	r2, #1
 8004cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f7fc feb4 	bl	8001a40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00c      	beq.n	8004cfc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d007      	beq.n	8004cfc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 fc1a 	bl	8005530 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00c      	beq.n	8004d20 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d007      	beq.n	8004d20 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 f8f6 	bl	8004f0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	f003 0320 	and.w	r3, r3, #32
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00c      	beq.n	8004d44 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f003 0320 	and.w	r3, r3, #32
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d007      	beq.n	8004d44 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f06f 0220 	mvn.w	r2, #32
 8004d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 fbec 	bl	800551c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d44:	bf00      	nop
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b086      	sub	sp, #24
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d101      	bne.n	8004d6a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d66:	2302      	movs	r3, #2
 8004d68:	e0ae      	b.n	8004ec8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2b0c      	cmp	r3, #12
 8004d76:	f200 809f 	bhi.w	8004eb8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004d7a:	a201      	add	r2, pc, #4	@ (adr r2, 8004d80 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d80:	08004db5 	.word	0x08004db5
 8004d84:	08004eb9 	.word	0x08004eb9
 8004d88:	08004eb9 	.word	0x08004eb9
 8004d8c:	08004eb9 	.word	0x08004eb9
 8004d90:	08004df5 	.word	0x08004df5
 8004d94:	08004eb9 	.word	0x08004eb9
 8004d98:	08004eb9 	.word	0x08004eb9
 8004d9c:	08004eb9 	.word	0x08004eb9
 8004da0:	08004e37 	.word	0x08004e37
 8004da4:	08004eb9 	.word	0x08004eb9
 8004da8:	08004eb9 	.word	0x08004eb9
 8004dac:	08004eb9 	.word	0x08004eb9
 8004db0:	08004e77 	.word	0x08004e77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68b9      	ldr	r1, [r7, #8]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 f95c 	bl	8005078 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	699a      	ldr	r2, [r3, #24]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f042 0208 	orr.w	r2, r2, #8
 8004dce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	699a      	ldr	r2, [r3, #24]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f022 0204 	bic.w	r2, r2, #4
 8004dde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6999      	ldr	r1, [r3, #24]
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	691a      	ldr	r2, [r3, #16]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	619a      	str	r2, [r3, #24]
      break;
 8004df2:	e064      	b.n	8004ebe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68b9      	ldr	r1, [r7, #8]
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f000 f9ac 	bl	8005158 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	699a      	ldr	r2, [r3, #24]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	699a      	ldr	r2, [r3, #24]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6999      	ldr	r1, [r3, #24]
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	021a      	lsls	r2, r3, #8
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	430a      	orrs	r2, r1
 8004e32:	619a      	str	r2, [r3, #24]
      break;
 8004e34:	e043      	b.n	8004ebe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68b9      	ldr	r1, [r7, #8]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f000 fa01 	bl	8005244 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	69da      	ldr	r2, [r3, #28]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f042 0208 	orr.w	r2, r2, #8
 8004e50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	69da      	ldr	r2, [r3, #28]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f022 0204 	bic.w	r2, r2, #4
 8004e60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	69d9      	ldr	r1, [r3, #28]
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	691a      	ldr	r2, [r3, #16]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	430a      	orrs	r2, r1
 8004e72:	61da      	str	r2, [r3, #28]
      break;
 8004e74:	e023      	b.n	8004ebe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68b9      	ldr	r1, [r7, #8]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f000 fa55 	bl	800532c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	69da      	ldr	r2, [r3, #28]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	69da      	ldr	r2, [r3, #28]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ea0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	69d9      	ldr	r1, [r3, #28]
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	021a      	lsls	r2, r3, #8
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	61da      	str	r2, [r3, #28]
      break;
 8004eb6:	e002      	b.n	8004ebe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	75fb      	strb	r3, [r7, #23]
      break;
 8004ebc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3718      	adds	r7, #24
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f00:	bf00      	nop
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f14:	bf00      	nop
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b085      	sub	sp, #20
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a46      	ldr	r2, [pc, #280]	@ (800504c <TIM_Base_SetConfig+0x12c>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d013      	beq.n	8004f60 <TIM_Base_SetConfig+0x40>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f3e:	d00f      	beq.n	8004f60 <TIM_Base_SetConfig+0x40>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a43      	ldr	r2, [pc, #268]	@ (8005050 <TIM_Base_SetConfig+0x130>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d00b      	beq.n	8004f60 <TIM_Base_SetConfig+0x40>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a42      	ldr	r2, [pc, #264]	@ (8005054 <TIM_Base_SetConfig+0x134>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d007      	beq.n	8004f60 <TIM_Base_SetConfig+0x40>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a41      	ldr	r2, [pc, #260]	@ (8005058 <TIM_Base_SetConfig+0x138>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d003      	beq.n	8004f60 <TIM_Base_SetConfig+0x40>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a40      	ldr	r2, [pc, #256]	@ (800505c <TIM_Base_SetConfig+0x13c>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d108      	bne.n	8004f72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a35      	ldr	r2, [pc, #212]	@ (800504c <TIM_Base_SetConfig+0x12c>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d02b      	beq.n	8004fd2 <TIM_Base_SetConfig+0xb2>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f80:	d027      	beq.n	8004fd2 <TIM_Base_SetConfig+0xb2>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a32      	ldr	r2, [pc, #200]	@ (8005050 <TIM_Base_SetConfig+0x130>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d023      	beq.n	8004fd2 <TIM_Base_SetConfig+0xb2>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a31      	ldr	r2, [pc, #196]	@ (8005054 <TIM_Base_SetConfig+0x134>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d01f      	beq.n	8004fd2 <TIM_Base_SetConfig+0xb2>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a30      	ldr	r2, [pc, #192]	@ (8005058 <TIM_Base_SetConfig+0x138>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d01b      	beq.n	8004fd2 <TIM_Base_SetConfig+0xb2>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a2f      	ldr	r2, [pc, #188]	@ (800505c <TIM_Base_SetConfig+0x13c>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d017      	beq.n	8004fd2 <TIM_Base_SetConfig+0xb2>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a2e      	ldr	r2, [pc, #184]	@ (8005060 <TIM_Base_SetConfig+0x140>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d013      	beq.n	8004fd2 <TIM_Base_SetConfig+0xb2>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a2d      	ldr	r2, [pc, #180]	@ (8005064 <TIM_Base_SetConfig+0x144>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d00f      	beq.n	8004fd2 <TIM_Base_SetConfig+0xb2>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a2c      	ldr	r2, [pc, #176]	@ (8005068 <TIM_Base_SetConfig+0x148>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d00b      	beq.n	8004fd2 <TIM_Base_SetConfig+0xb2>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a2b      	ldr	r2, [pc, #172]	@ (800506c <TIM_Base_SetConfig+0x14c>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d007      	beq.n	8004fd2 <TIM_Base_SetConfig+0xb2>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a2a      	ldr	r2, [pc, #168]	@ (8005070 <TIM_Base_SetConfig+0x150>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d003      	beq.n	8004fd2 <TIM_Base_SetConfig+0xb2>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a29      	ldr	r2, [pc, #164]	@ (8005074 <TIM_Base_SetConfig+0x154>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d108      	bne.n	8004fe4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	689a      	ldr	r2, [r3, #8]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a10      	ldr	r2, [pc, #64]	@ (800504c <TIM_Base_SetConfig+0x12c>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d003      	beq.n	8005018 <TIM_Base_SetConfig+0xf8>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a12      	ldr	r2, [pc, #72]	@ (800505c <TIM_Base_SetConfig+0x13c>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d103      	bne.n	8005020 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	691a      	ldr	r2, [r3, #16]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	2b01      	cmp	r3, #1
 8005030:	d105      	bne.n	800503e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	f023 0201 	bic.w	r2, r3, #1
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	611a      	str	r2, [r3, #16]
  }
}
 800503e:	bf00      	nop
 8005040:	3714      	adds	r7, #20
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	40010000 	.word	0x40010000
 8005050:	40000400 	.word	0x40000400
 8005054:	40000800 	.word	0x40000800
 8005058:	40000c00 	.word	0x40000c00
 800505c:	40010400 	.word	0x40010400
 8005060:	40014000 	.word	0x40014000
 8005064:	40014400 	.word	0x40014400
 8005068:	40014800 	.word	0x40014800
 800506c:	40001800 	.word	0x40001800
 8005070:	40001c00 	.word	0x40001c00
 8005074:	40002000 	.word	0x40002000

08005078 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005078:	b480      	push	{r7}
 800507a:	b087      	sub	sp, #28
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a1b      	ldr	r3, [r3, #32]
 800508c:	f023 0201 	bic.w	r2, r3, #1
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f023 0303 	bic.w	r3, r3, #3
 80050ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	f023 0302 	bic.w	r3, r3, #2
 80050c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a20      	ldr	r2, [pc, #128]	@ (8005150 <TIM_OC1_SetConfig+0xd8>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d003      	beq.n	80050dc <TIM_OC1_SetConfig+0x64>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a1f      	ldr	r2, [pc, #124]	@ (8005154 <TIM_OC1_SetConfig+0xdc>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d10c      	bne.n	80050f6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	f023 0308 	bic.w	r3, r3, #8
 80050e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	697a      	ldr	r2, [r7, #20]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	f023 0304 	bic.w	r3, r3, #4
 80050f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a15      	ldr	r2, [pc, #84]	@ (8005150 <TIM_OC1_SetConfig+0xd8>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d003      	beq.n	8005106 <TIM_OC1_SetConfig+0x8e>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a14      	ldr	r2, [pc, #80]	@ (8005154 <TIM_OC1_SetConfig+0xdc>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d111      	bne.n	800512a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800510c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005114:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	693a      	ldr	r2, [r7, #16]
 800511c:	4313      	orrs	r3, r2
 800511e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	699b      	ldr	r3, [r3, #24]
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	4313      	orrs	r3, r2
 8005128:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	685a      	ldr	r2, [r3, #4]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	621a      	str	r2, [r3, #32]
}
 8005144:	bf00      	nop
 8005146:	371c      	adds	r7, #28
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr
 8005150:	40010000 	.word	0x40010000
 8005154:	40010400 	.word	0x40010400

08005158 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005158:	b480      	push	{r7}
 800515a:	b087      	sub	sp, #28
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a1b      	ldr	r3, [r3, #32]
 800516c:	f023 0210 	bic.w	r2, r3, #16
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800518e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	021b      	lsls	r3, r3, #8
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	4313      	orrs	r3, r2
 800519a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	f023 0320 	bic.w	r3, r3, #32
 80051a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	011b      	lsls	r3, r3, #4
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a22      	ldr	r2, [pc, #136]	@ (800523c <TIM_OC2_SetConfig+0xe4>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d003      	beq.n	80051c0 <TIM_OC2_SetConfig+0x68>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a21      	ldr	r2, [pc, #132]	@ (8005240 <TIM_OC2_SetConfig+0xe8>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d10d      	bne.n	80051dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	011b      	lsls	r3, r3, #4
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a17      	ldr	r2, [pc, #92]	@ (800523c <TIM_OC2_SetConfig+0xe4>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d003      	beq.n	80051ec <TIM_OC2_SetConfig+0x94>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a16      	ldr	r2, [pc, #88]	@ (8005240 <TIM_OC2_SetConfig+0xe8>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d113      	bne.n	8005214 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80051f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80051fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	695b      	ldr	r3, [r3, #20]
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	4313      	orrs	r3, r2
 8005206:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	693a      	ldr	r2, [r7, #16]
 8005210:	4313      	orrs	r3, r2
 8005212:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	685a      	ldr	r2, [r3, #4]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	621a      	str	r2, [r3, #32]
}
 800522e:	bf00      	nop
 8005230:	371c      	adds	r7, #28
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	40010000 	.word	0x40010000
 8005240:	40010400 	.word	0x40010400

08005244 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005244:	b480      	push	{r7}
 8005246:	b087      	sub	sp, #28
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a1b      	ldr	r3, [r3, #32]
 8005258:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	69db      	ldr	r3, [r3, #28]
 800526a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f023 0303 	bic.w	r3, r3, #3
 800527a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	4313      	orrs	r3, r2
 8005284:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800528c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	021b      	lsls	r3, r3, #8
 8005294:	697a      	ldr	r2, [r7, #20]
 8005296:	4313      	orrs	r3, r2
 8005298:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a21      	ldr	r2, [pc, #132]	@ (8005324 <TIM_OC3_SetConfig+0xe0>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d003      	beq.n	80052aa <TIM_OC3_SetConfig+0x66>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a20      	ldr	r2, [pc, #128]	@ (8005328 <TIM_OC3_SetConfig+0xe4>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d10d      	bne.n	80052c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80052b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	021b      	lsls	r3, r3, #8
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80052c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a16      	ldr	r2, [pc, #88]	@ (8005324 <TIM_OC3_SetConfig+0xe0>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d003      	beq.n	80052d6 <TIM_OC3_SetConfig+0x92>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a15      	ldr	r2, [pc, #84]	@ (8005328 <TIM_OC3_SetConfig+0xe4>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d113      	bne.n	80052fe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80052dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80052e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	011b      	lsls	r3, r3, #4
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	011b      	lsls	r3, r3, #4
 80052f8:	693a      	ldr	r2, [r7, #16]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	685a      	ldr	r2, [r3, #4]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	621a      	str	r2, [r3, #32]
}
 8005318:	bf00      	nop
 800531a:	371c      	adds	r7, #28
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr
 8005324:	40010000 	.word	0x40010000
 8005328:	40010400 	.word	0x40010400

0800532c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800532c:	b480      	push	{r7}
 800532e:	b087      	sub	sp, #28
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	69db      	ldr	r3, [r3, #28]
 8005352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800535a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005362:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	021b      	lsls	r3, r3, #8
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	4313      	orrs	r3, r2
 800536e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005376:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	031b      	lsls	r3, r3, #12
 800537e:	693a      	ldr	r2, [r7, #16]
 8005380:	4313      	orrs	r3, r2
 8005382:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a12      	ldr	r2, [pc, #72]	@ (80053d0 <TIM_OC4_SetConfig+0xa4>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d003      	beq.n	8005394 <TIM_OC4_SetConfig+0x68>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a11      	ldr	r2, [pc, #68]	@ (80053d4 <TIM_OC4_SetConfig+0xa8>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d109      	bne.n	80053a8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800539a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	695b      	ldr	r3, [r3, #20]
 80053a0:	019b      	lsls	r3, r3, #6
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	685a      	ldr	r2, [r3, #4]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	693a      	ldr	r2, [r7, #16]
 80053c0:	621a      	str	r2, [r3, #32]
}
 80053c2:	bf00      	nop
 80053c4:	371c      	adds	r7, #28
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	40010000 	.word	0x40010000
 80053d4:	40010400 	.word	0x40010400

080053d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053d8:	b480      	push	{r7}
 80053da:	b087      	sub	sp, #28
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	f003 031f 	and.w	r3, r3, #31
 80053ea:	2201      	movs	r2, #1
 80053ec:	fa02 f303 	lsl.w	r3, r2, r3
 80053f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6a1a      	ldr	r2, [r3, #32]
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	43db      	mvns	r3, r3
 80053fa:	401a      	ands	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6a1a      	ldr	r2, [r3, #32]
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	f003 031f 	and.w	r3, r3, #31
 800540a:	6879      	ldr	r1, [r7, #4]
 800540c:	fa01 f303 	lsl.w	r3, r1, r3
 8005410:	431a      	orrs	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	621a      	str	r2, [r3, #32]
}
 8005416:	bf00      	nop
 8005418:	371c      	adds	r7, #28
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
	...

08005424 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005434:	2b01      	cmp	r3, #1
 8005436:	d101      	bne.n	800543c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005438:	2302      	movs	r3, #2
 800543a:	e05a      	b.n	80054f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2202      	movs	r2, #2
 8005448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005462:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	4313      	orrs	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a21      	ldr	r2, [pc, #132]	@ (8005500 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d022      	beq.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005488:	d01d      	beq.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a1d      	ldr	r2, [pc, #116]	@ (8005504 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d018      	beq.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a1b      	ldr	r2, [pc, #108]	@ (8005508 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d013      	beq.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a1a      	ldr	r2, [pc, #104]	@ (800550c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d00e      	beq.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a18      	ldr	r2, [pc, #96]	@ (8005510 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d009      	beq.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a17      	ldr	r2, [pc, #92]	@ (8005514 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d004      	beq.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a15      	ldr	r2, [pc, #84]	@ (8005518 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d10c      	bne.n	80054e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3714      	adds	r7, #20
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	40010000 	.word	0x40010000
 8005504:	40000400 	.word	0x40000400
 8005508:	40000800 	.word	0x40000800
 800550c:	40000c00 	.word	0x40000c00
 8005510:	40010400 	.word	0x40010400
 8005514:	40014000 	.word	0x40014000
 8005518:	40001800 	.word	0x40001800

0800551c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005524:	bf00      	nop
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005538:	bf00      	nop
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d101      	bne.n	8005556 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e042      	b.n	80055dc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800555c:	b2db      	uxtb	r3, r3
 800555e:	2b00      	cmp	r3, #0
 8005560:	d106      	bne.n	8005570 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f7fc fd82 	bl	8002074 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2224      	movs	r2, #36	@ 0x24
 8005574:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68da      	ldr	r2, [r3, #12]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005586:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 f973 	bl	8005874 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	691a      	ldr	r2, [r3, #16]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800559c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	695a      	ldr	r2, [r3, #20]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80055ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68da      	ldr	r2, [r3, #12]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80055bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2220      	movs	r2, #32
 80055c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2220      	movs	r2, #32
 80055d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3708      	adds	r7, #8
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b08a      	sub	sp, #40	@ 0x28
 80055e8:	af02      	add	r7, sp, #8
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	603b      	str	r3, [r7, #0]
 80055f0:	4613      	mov	r3, r2
 80055f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80055f4:	2300      	movs	r3, #0
 80055f6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	2b20      	cmp	r3, #32
 8005602:	d175      	bne.n	80056f0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d002      	beq.n	8005610 <HAL_UART_Transmit+0x2c>
 800560a:	88fb      	ldrh	r3, [r7, #6]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d101      	bne.n	8005614 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e06e      	b.n	80056f2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2221      	movs	r2, #33	@ 0x21
 800561e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005622:	f7fc feb9 	bl	8002398 <HAL_GetTick>
 8005626:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	88fa      	ldrh	r2, [r7, #6]
 800562c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	88fa      	ldrh	r2, [r7, #6]
 8005632:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800563c:	d108      	bne.n	8005650 <HAL_UART_Transmit+0x6c>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d104      	bne.n	8005650 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005646:	2300      	movs	r3, #0
 8005648:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	61bb      	str	r3, [r7, #24]
 800564e:	e003      	b.n	8005658 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005654:	2300      	movs	r3, #0
 8005656:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005658:	e02e      	b.n	80056b8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	9300      	str	r3, [sp, #0]
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	2200      	movs	r2, #0
 8005662:	2180      	movs	r1, #128	@ 0x80
 8005664:	68f8      	ldr	r0, [r7, #12]
 8005666:	f000 f848 	bl	80056fa <UART_WaitOnFlagUntilTimeout>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d005      	beq.n	800567c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2220      	movs	r2, #32
 8005674:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e03a      	b.n	80056f2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d10b      	bne.n	800569a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	881b      	ldrh	r3, [r3, #0]
 8005686:	461a      	mov	r2, r3
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005690:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	3302      	adds	r3, #2
 8005696:	61bb      	str	r3, [r7, #24]
 8005698:	e007      	b.n	80056aa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	781a      	ldrb	r2, [r3, #0]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	3301      	adds	r3, #1
 80056a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	3b01      	subs	r3, #1
 80056b2:	b29a      	uxth	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80056bc:	b29b      	uxth	r3, r3
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1cb      	bne.n	800565a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	9300      	str	r3, [sp, #0]
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	2200      	movs	r2, #0
 80056ca:	2140      	movs	r1, #64	@ 0x40
 80056cc:	68f8      	ldr	r0, [r7, #12]
 80056ce:	f000 f814 	bl	80056fa <UART_WaitOnFlagUntilTimeout>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d005      	beq.n	80056e4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2220      	movs	r2, #32
 80056dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e006      	b.n	80056f2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2220      	movs	r2, #32
 80056e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80056ec:	2300      	movs	r3, #0
 80056ee:	e000      	b.n	80056f2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80056f0:	2302      	movs	r3, #2
  }
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3720      	adds	r7, #32
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}

080056fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80056fa:	b580      	push	{r7, lr}
 80056fc:	b086      	sub	sp, #24
 80056fe:	af00      	add	r7, sp, #0
 8005700:	60f8      	str	r0, [r7, #12]
 8005702:	60b9      	str	r1, [r7, #8]
 8005704:	603b      	str	r3, [r7, #0]
 8005706:	4613      	mov	r3, r2
 8005708:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800570a:	e03b      	b.n	8005784 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800570c:	6a3b      	ldr	r3, [r7, #32]
 800570e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005712:	d037      	beq.n	8005784 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005714:	f7fc fe40 	bl	8002398 <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	6a3a      	ldr	r2, [r7, #32]
 8005720:	429a      	cmp	r2, r3
 8005722:	d302      	bcc.n	800572a <UART_WaitOnFlagUntilTimeout+0x30>
 8005724:	6a3b      	ldr	r3, [r7, #32]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d101      	bne.n	800572e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e03a      	b.n	80057a4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	f003 0304 	and.w	r3, r3, #4
 8005738:	2b00      	cmp	r3, #0
 800573a:	d023      	beq.n	8005784 <UART_WaitOnFlagUntilTimeout+0x8a>
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	2b80      	cmp	r3, #128	@ 0x80
 8005740:	d020      	beq.n	8005784 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	2b40      	cmp	r3, #64	@ 0x40
 8005746:	d01d      	beq.n	8005784 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0308 	and.w	r3, r3, #8
 8005752:	2b08      	cmp	r3, #8
 8005754:	d116      	bne.n	8005784 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005756:	2300      	movs	r3, #0
 8005758:	617b      	str	r3, [r7, #20]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	617b      	str	r3, [r7, #20]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	617b      	str	r3, [r7, #20]
 800576a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800576c:	68f8      	ldr	r0, [r7, #12]
 800576e:	f000 f81d 	bl	80057ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2208      	movs	r2, #8
 8005776:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2200      	movs	r2, #0
 800577c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e00f      	b.n	80057a4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	4013      	ands	r3, r2
 800578e:	68ba      	ldr	r2, [r7, #8]
 8005790:	429a      	cmp	r2, r3
 8005792:	bf0c      	ite	eq
 8005794:	2301      	moveq	r3, #1
 8005796:	2300      	movne	r3, #0
 8005798:	b2db      	uxtb	r3, r3
 800579a:	461a      	mov	r2, r3
 800579c:	79fb      	ldrb	r3, [r7, #7]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d0b4      	beq.n	800570c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3718      	adds	r7, #24
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b095      	sub	sp, #84	@ 0x54
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	330c      	adds	r3, #12
 80057ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057be:	e853 3f00 	ldrex	r3, [r3]
 80057c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80057c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	330c      	adds	r3, #12
 80057d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80057d4:	643a      	str	r2, [r7, #64]	@ 0x40
 80057d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80057da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80057dc:	e841 2300 	strex	r3, r2, [r1]
 80057e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80057e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d1e5      	bne.n	80057b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	3314      	adds	r3, #20
 80057ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f0:	6a3b      	ldr	r3, [r7, #32]
 80057f2:	e853 3f00 	ldrex	r3, [r3]
 80057f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	f023 0301 	bic.w	r3, r3, #1
 80057fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	3314      	adds	r3, #20
 8005806:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005808:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800580a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800580e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005810:	e841 2300 	strex	r3, r2, [r1]
 8005814:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005818:	2b00      	cmp	r3, #0
 800581a:	d1e5      	bne.n	80057e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005820:	2b01      	cmp	r3, #1
 8005822:	d119      	bne.n	8005858 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	330c      	adds	r3, #12
 800582a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	e853 3f00 	ldrex	r3, [r3]
 8005832:	60bb      	str	r3, [r7, #8]
   return(result);
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	f023 0310 	bic.w	r3, r3, #16
 800583a:	647b      	str	r3, [r7, #68]	@ 0x44
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	330c      	adds	r3, #12
 8005842:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005844:	61ba      	str	r2, [r7, #24]
 8005846:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005848:	6979      	ldr	r1, [r7, #20]
 800584a:	69ba      	ldr	r2, [r7, #24]
 800584c:	e841 2300 	strex	r3, r2, [r1]
 8005850:	613b      	str	r3, [r7, #16]
   return(result);
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1e5      	bne.n	8005824 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2220      	movs	r2, #32
 800585c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005866:	bf00      	nop
 8005868:	3754      	adds	r7, #84	@ 0x54
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
	...

08005874 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005874:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005878:	b0c0      	sub	sp, #256	@ 0x100
 800587a:	af00      	add	r7, sp, #0
 800587c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800588c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005890:	68d9      	ldr	r1, [r3, #12]
 8005892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	ea40 0301 	orr.w	r3, r0, r1
 800589c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800589e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058a2:	689a      	ldr	r2, [r3, #8]
 80058a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	431a      	orrs	r2, r3
 80058ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	431a      	orrs	r2, r3
 80058b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058b8:	69db      	ldr	r3, [r3, #28]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80058c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80058cc:	f021 010c 	bic.w	r1, r1, #12
 80058d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80058da:	430b      	orrs	r3, r1
 80058dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80058ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ee:	6999      	ldr	r1, [r3, #24]
 80058f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	ea40 0301 	orr.w	r3, r0, r1
 80058fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	4b8f      	ldr	r3, [pc, #572]	@ (8005b40 <UART_SetConfig+0x2cc>)
 8005904:	429a      	cmp	r2, r3
 8005906:	d005      	beq.n	8005914 <UART_SetConfig+0xa0>
 8005908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	4b8d      	ldr	r3, [pc, #564]	@ (8005b44 <UART_SetConfig+0x2d0>)
 8005910:	429a      	cmp	r2, r3
 8005912:	d104      	bne.n	800591e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005914:	f7fe fa34 	bl	8003d80 <HAL_RCC_GetPCLK2Freq>
 8005918:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800591c:	e003      	b.n	8005926 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800591e:	f7fe fa1b 	bl	8003d58 <HAL_RCC_GetPCLK1Freq>
 8005922:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800592a:	69db      	ldr	r3, [r3, #28]
 800592c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005930:	f040 810c 	bne.w	8005b4c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005934:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005938:	2200      	movs	r2, #0
 800593a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800593e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005942:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005946:	4622      	mov	r2, r4
 8005948:	462b      	mov	r3, r5
 800594a:	1891      	adds	r1, r2, r2
 800594c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800594e:	415b      	adcs	r3, r3
 8005950:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005952:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005956:	4621      	mov	r1, r4
 8005958:	eb12 0801 	adds.w	r8, r2, r1
 800595c:	4629      	mov	r1, r5
 800595e:	eb43 0901 	adc.w	r9, r3, r1
 8005962:	f04f 0200 	mov.w	r2, #0
 8005966:	f04f 0300 	mov.w	r3, #0
 800596a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800596e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005972:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005976:	4690      	mov	r8, r2
 8005978:	4699      	mov	r9, r3
 800597a:	4623      	mov	r3, r4
 800597c:	eb18 0303 	adds.w	r3, r8, r3
 8005980:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005984:	462b      	mov	r3, r5
 8005986:	eb49 0303 	adc.w	r3, r9, r3
 800598a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800598e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800599a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800599e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80059a2:	460b      	mov	r3, r1
 80059a4:	18db      	adds	r3, r3, r3
 80059a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80059a8:	4613      	mov	r3, r2
 80059aa:	eb42 0303 	adc.w	r3, r2, r3
 80059ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80059b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80059b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80059b8:	f7fb f928 	bl	8000c0c <__aeabi_uldivmod>
 80059bc:	4602      	mov	r2, r0
 80059be:	460b      	mov	r3, r1
 80059c0:	4b61      	ldr	r3, [pc, #388]	@ (8005b48 <UART_SetConfig+0x2d4>)
 80059c2:	fba3 2302 	umull	r2, r3, r3, r2
 80059c6:	095b      	lsrs	r3, r3, #5
 80059c8:	011c      	lsls	r4, r3, #4
 80059ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059ce:	2200      	movs	r2, #0
 80059d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80059d4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80059d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80059dc:	4642      	mov	r2, r8
 80059de:	464b      	mov	r3, r9
 80059e0:	1891      	adds	r1, r2, r2
 80059e2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80059e4:	415b      	adcs	r3, r3
 80059e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80059ec:	4641      	mov	r1, r8
 80059ee:	eb12 0a01 	adds.w	sl, r2, r1
 80059f2:	4649      	mov	r1, r9
 80059f4:	eb43 0b01 	adc.w	fp, r3, r1
 80059f8:	f04f 0200 	mov.w	r2, #0
 80059fc:	f04f 0300 	mov.w	r3, #0
 8005a00:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a04:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a0c:	4692      	mov	sl, r2
 8005a0e:	469b      	mov	fp, r3
 8005a10:	4643      	mov	r3, r8
 8005a12:	eb1a 0303 	adds.w	r3, sl, r3
 8005a16:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a1a:	464b      	mov	r3, r9
 8005a1c:	eb4b 0303 	adc.w	r3, fp, r3
 8005a20:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a30:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005a34:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005a38:	460b      	mov	r3, r1
 8005a3a:	18db      	adds	r3, r3, r3
 8005a3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a3e:	4613      	mov	r3, r2
 8005a40:	eb42 0303 	adc.w	r3, r2, r3
 8005a44:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005a4a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005a4e:	f7fb f8dd 	bl	8000c0c <__aeabi_uldivmod>
 8005a52:	4602      	mov	r2, r0
 8005a54:	460b      	mov	r3, r1
 8005a56:	4611      	mov	r1, r2
 8005a58:	4b3b      	ldr	r3, [pc, #236]	@ (8005b48 <UART_SetConfig+0x2d4>)
 8005a5a:	fba3 2301 	umull	r2, r3, r3, r1
 8005a5e:	095b      	lsrs	r3, r3, #5
 8005a60:	2264      	movs	r2, #100	@ 0x64
 8005a62:	fb02 f303 	mul.w	r3, r2, r3
 8005a66:	1acb      	subs	r3, r1, r3
 8005a68:	00db      	lsls	r3, r3, #3
 8005a6a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005a6e:	4b36      	ldr	r3, [pc, #216]	@ (8005b48 <UART_SetConfig+0x2d4>)
 8005a70:	fba3 2302 	umull	r2, r3, r3, r2
 8005a74:	095b      	lsrs	r3, r3, #5
 8005a76:	005b      	lsls	r3, r3, #1
 8005a78:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005a7c:	441c      	add	r4, r3
 8005a7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a82:	2200      	movs	r2, #0
 8005a84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a88:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005a8c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005a90:	4642      	mov	r2, r8
 8005a92:	464b      	mov	r3, r9
 8005a94:	1891      	adds	r1, r2, r2
 8005a96:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005a98:	415b      	adcs	r3, r3
 8005a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005aa0:	4641      	mov	r1, r8
 8005aa2:	1851      	adds	r1, r2, r1
 8005aa4:	6339      	str	r1, [r7, #48]	@ 0x30
 8005aa6:	4649      	mov	r1, r9
 8005aa8:	414b      	adcs	r3, r1
 8005aaa:	637b      	str	r3, [r7, #52]	@ 0x34
 8005aac:	f04f 0200 	mov.w	r2, #0
 8005ab0:	f04f 0300 	mov.w	r3, #0
 8005ab4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005ab8:	4659      	mov	r1, fp
 8005aba:	00cb      	lsls	r3, r1, #3
 8005abc:	4651      	mov	r1, sl
 8005abe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ac2:	4651      	mov	r1, sl
 8005ac4:	00ca      	lsls	r2, r1, #3
 8005ac6:	4610      	mov	r0, r2
 8005ac8:	4619      	mov	r1, r3
 8005aca:	4603      	mov	r3, r0
 8005acc:	4642      	mov	r2, r8
 8005ace:	189b      	adds	r3, r3, r2
 8005ad0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ad4:	464b      	mov	r3, r9
 8005ad6:	460a      	mov	r2, r1
 8005ad8:	eb42 0303 	adc.w	r3, r2, r3
 8005adc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005aec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005af0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005af4:	460b      	mov	r3, r1
 8005af6:	18db      	adds	r3, r3, r3
 8005af8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005afa:	4613      	mov	r3, r2
 8005afc:	eb42 0303 	adc.w	r3, r2, r3
 8005b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005b06:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005b0a:	f7fb f87f 	bl	8000c0c <__aeabi_uldivmod>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	460b      	mov	r3, r1
 8005b12:	4b0d      	ldr	r3, [pc, #52]	@ (8005b48 <UART_SetConfig+0x2d4>)
 8005b14:	fba3 1302 	umull	r1, r3, r3, r2
 8005b18:	095b      	lsrs	r3, r3, #5
 8005b1a:	2164      	movs	r1, #100	@ 0x64
 8005b1c:	fb01 f303 	mul.w	r3, r1, r3
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	00db      	lsls	r3, r3, #3
 8005b24:	3332      	adds	r3, #50	@ 0x32
 8005b26:	4a08      	ldr	r2, [pc, #32]	@ (8005b48 <UART_SetConfig+0x2d4>)
 8005b28:	fba2 2303 	umull	r2, r3, r2, r3
 8005b2c:	095b      	lsrs	r3, r3, #5
 8005b2e:	f003 0207 	and.w	r2, r3, #7
 8005b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4422      	add	r2, r4
 8005b3a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b3c:	e106      	b.n	8005d4c <UART_SetConfig+0x4d8>
 8005b3e:	bf00      	nop
 8005b40:	40011000 	.word	0x40011000
 8005b44:	40011400 	.word	0x40011400
 8005b48:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b50:	2200      	movs	r2, #0
 8005b52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005b56:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005b5a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005b5e:	4642      	mov	r2, r8
 8005b60:	464b      	mov	r3, r9
 8005b62:	1891      	adds	r1, r2, r2
 8005b64:	6239      	str	r1, [r7, #32]
 8005b66:	415b      	adcs	r3, r3
 8005b68:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b6e:	4641      	mov	r1, r8
 8005b70:	1854      	adds	r4, r2, r1
 8005b72:	4649      	mov	r1, r9
 8005b74:	eb43 0501 	adc.w	r5, r3, r1
 8005b78:	f04f 0200 	mov.w	r2, #0
 8005b7c:	f04f 0300 	mov.w	r3, #0
 8005b80:	00eb      	lsls	r3, r5, #3
 8005b82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b86:	00e2      	lsls	r2, r4, #3
 8005b88:	4614      	mov	r4, r2
 8005b8a:	461d      	mov	r5, r3
 8005b8c:	4643      	mov	r3, r8
 8005b8e:	18e3      	adds	r3, r4, r3
 8005b90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005b94:	464b      	mov	r3, r9
 8005b96:	eb45 0303 	adc.w	r3, r5, r3
 8005b9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005baa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005bae:	f04f 0200 	mov.w	r2, #0
 8005bb2:	f04f 0300 	mov.w	r3, #0
 8005bb6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005bba:	4629      	mov	r1, r5
 8005bbc:	008b      	lsls	r3, r1, #2
 8005bbe:	4621      	mov	r1, r4
 8005bc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bc4:	4621      	mov	r1, r4
 8005bc6:	008a      	lsls	r2, r1, #2
 8005bc8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005bcc:	f7fb f81e 	bl	8000c0c <__aeabi_uldivmod>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	4b60      	ldr	r3, [pc, #384]	@ (8005d58 <UART_SetConfig+0x4e4>)
 8005bd6:	fba3 2302 	umull	r2, r3, r3, r2
 8005bda:	095b      	lsrs	r3, r3, #5
 8005bdc:	011c      	lsls	r4, r3, #4
 8005bde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005be2:	2200      	movs	r2, #0
 8005be4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005be8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005bec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005bf0:	4642      	mov	r2, r8
 8005bf2:	464b      	mov	r3, r9
 8005bf4:	1891      	adds	r1, r2, r2
 8005bf6:	61b9      	str	r1, [r7, #24]
 8005bf8:	415b      	adcs	r3, r3
 8005bfa:	61fb      	str	r3, [r7, #28]
 8005bfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c00:	4641      	mov	r1, r8
 8005c02:	1851      	adds	r1, r2, r1
 8005c04:	6139      	str	r1, [r7, #16]
 8005c06:	4649      	mov	r1, r9
 8005c08:	414b      	adcs	r3, r1
 8005c0a:	617b      	str	r3, [r7, #20]
 8005c0c:	f04f 0200 	mov.w	r2, #0
 8005c10:	f04f 0300 	mov.w	r3, #0
 8005c14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c18:	4659      	mov	r1, fp
 8005c1a:	00cb      	lsls	r3, r1, #3
 8005c1c:	4651      	mov	r1, sl
 8005c1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c22:	4651      	mov	r1, sl
 8005c24:	00ca      	lsls	r2, r1, #3
 8005c26:	4610      	mov	r0, r2
 8005c28:	4619      	mov	r1, r3
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	4642      	mov	r2, r8
 8005c2e:	189b      	adds	r3, r3, r2
 8005c30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005c34:	464b      	mov	r3, r9
 8005c36:	460a      	mov	r2, r1
 8005c38:	eb42 0303 	adc.w	r3, r2, r3
 8005c3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005c4a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005c4c:	f04f 0200 	mov.w	r2, #0
 8005c50:	f04f 0300 	mov.w	r3, #0
 8005c54:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005c58:	4649      	mov	r1, r9
 8005c5a:	008b      	lsls	r3, r1, #2
 8005c5c:	4641      	mov	r1, r8
 8005c5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c62:	4641      	mov	r1, r8
 8005c64:	008a      	lsls	r2, r1, #2
 8005c66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005c6a:	f7fa ffcf 	bl	8000c0c <__aeabi_uldivmod>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	460b      	mov	r3, r1
 8005c72:	4611      	mov	r1, r2
 8005c74:	4b38      	ldr	r3, [pc, #224]	@ (8005d58 <UART_SetConfig+0x4e4>)
 8005c76:	fba3 2301 	umull	r2, r3, r3, r1
 8005c7a:	095b      	lsrs	r3, r3, #5
 8005c7c:	2264      	movs	r2, #100	@ 0x64
 8005c7e:	fb02 f303 	mul.w	r3, r2, r3
 8005c82:	1acb      	subs	r3, r1, r3
 8005c84:	011b      	lsls	r3, r3, #4
 8005c86:	3332      	adds	r3, #50	@ 0x32
 8005c88:	4a33      	ldr	r2, [pc, #204]	@ (8005d58 <UART_SetConfig+0x4e4>)
 8005c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c8e:	095b      	lsrs	r3, r3, #5
 8005c90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c94:	441c      	add	r4, r3
 8005c96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c9e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005ca0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005ca4:	4642      	mov	r2, r8
 8005ca6:	464b      	mov	r3, r9
 8005ca8:	1891      	adds	r1, r2, r2
 8005caa:	60b9      	str	r1, [r7, #8]
 8005cac:	415b      	adcs	r3, r3
 8005cae:	60fb      	str	r3, [r7, #12]
 8005cb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005cb4:	4641      	mov	r1, r8
 8005cb6:	1851      	adds	r1, r2, r1
 8005cb8:	6039      	str	r1, [r7, #0]
 8005cba:	4649      	mov	r1, r9
 8005cbc:	414b      	adcs	r3, r1
 8005cbe:	607b      	str	r3, [r7, #4]
 8005cc0:	f04f 0200 	mov.w	r2, #0
 8005cc4:	f04f 0300 	mov.w	r3, #0
 8005cc8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ccc:	4659      	mov	r1, fp
 8005cce:	00cb      	lsls	r3, r1, #3
 8005cd0:	4651      	mov	r1, sl
 8005cd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cd6:	4651      	mov	r1, sl
 8005cd8:	00ca      	lsls	r2, r1, #3
 8005cda:	4610      	mov	r0, r2
 8005cdc:	4619      	mov	r1, r3
 8005cde:	4603      	mov	r3, r0
 8005ce0:	4642      	mov	r2, r8
 8005ce2:	189b      	adds	r3, r3, r2
 8005ce4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ce6:	464b      	mov	r3, r9
 8005ce8:	460a      	mov	r2, r1
 8005cea:	eb42 0303 	adc.w	r3, r2, r3
 8005cee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	663b      	str	r3, [r7, #96]	@ 0x60
 8005cfa:	667a      	str	r2, [r7, #100]	@ 0x64
 8005cfc:	f04f 0200 	mov.w	r2, #0
 8005d00:	f04f 0300 	mov.w	r3, #0
 8005d04:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005d08:	4649      	mov	r1, r9
 8005d0a:	008b      	lsls	r3, r1, #2
 8005d0c:	4641      	mov	r1, r8
 8005d0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d12:	4641      	mov	r1, r8
 8005d14:	008a      	lsls	r2, r1, #2
 8005d16:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005d1a:	f7fa ff77 	bl	8000c0c <__aeabi_uldivmod>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	460b      	mov	r3, r1
 8005d22:	4b0d      	ldr	r3, [pc, #52]	@ (8005d58 <UART_SetConfig+0x4e4>)
 8005d24:	fba3 1302 	umull	r1, r3, r3, r2
 8005d28:	095b      	lsrs	r3, r3, #5
 8005d2a:	2164      	movs	r1, #100	@ 0x64
 8005d2c:	fb01 f303 	mul.w	r3, r1, r3
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	011b      	lsls	r3, r3, #4
 8005d34:	3332      	adds	r3, #50	@ 0x32
 8005d36:	4a08      	ldr	r2, [pc, #32]	@ (8005d58 <UART_SetConfig+0x4e4>)
 8005d38:	fba2 2303 	umull	r2, r3, r2, r3
 8005d3c:	095b      	lsrs	r3, r3, #5
 8005d3e:	f003 020f 	and.w	r2, r3, #15
 8005d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4422      	add	r2, r4
 8005d4a:	609a      	str	r2, [r3, #8]
}
 8005d4c:	bf00      	nop
 8005d4e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005d52:	46bd      	mov	sp, r7
 8005d54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d58:	51eb851f 	.word	0x51eb851f

08005d5c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005d60:	4b05      	ldr	r3, [pc, #20]	@ (8005d78 <SysTick_Handler+0x1c>)
 8005d62:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005d64:	f000 f998 	bl	8006098 <xTaskGetSchedulerState>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d001      	beq.n	8005d72 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005d6e:	f000 fa03 	bl	8006178 <xPortSysTickHandler>
  }
}
 8005d72:	bf00      	nop
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	e000e010 	.word	0xe000e010

08005d7c <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b085      	sub	sp, #20
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	689a      	ldr	r2, [r3, #8]
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	683a      	ldr	r2, [r7, #0]
 8005da0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	683a      	ldr	r2, [r7, #0]
 8005da6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	1c5a      	adds	r2, r3, #1
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	601a      	str	r2, [r3, #0]
}
 8005db8:	bf00      	nop
 8005dba:	3714      	adds	r7, #20
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	6892      	ldr	r2, [r2, #8]
 8005dda:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	6852      	ldr	r2, [r2, #4]
 8005de4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d103      	bne.n	8005df8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	689a      	ldr	r2, [r3, #8]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	1e5a      	subs	r2, r3, #1
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3714      	adds	r7, #20
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b086      	sub	sp, #24
 8005e1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e22:	4b4f      	ldr	r3, [pc, #316]	@ (8005f60 <xTaskIncrementTick+0x148>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	f040 8090 	bne.w	8005f4c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005e2c:	4b4d      	ldr	r3, [pc, #308]	@ (8005f64 <xTaskIncrementTick+0x14c>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	3301      	adds	r3, #1
 8005e32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005e34:	4a4b      	ldr	r2, [pc, #300]	@ (8005f64 <xTaskIncrementTick+0x14c>)
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d121      	bne.n	8005e84 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005e40:	4b49      	ldr	r3, [pc, #292]	@ (8005f68 <xTaskIncrementTick+0x150>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00b      	beq.n	8005e62 <xTaskIncrementTick+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e4e:	f383 8811 	msr	BASEPRI, r3
 8005e52:	f3bf 8f6f 	isb	sy
 8005e56:	f3bf 8f4f 	dsb	sy
 8005e5a:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005e5c:	bf00      	nop
 8005e5e:	bf00      	nop
 8005e60:	e7fd      	b.n	8005e5e <xTaskIncrementTick+0x46>
 8005e62:	4b41      	ldr	r3, [pc, #260]	@ (8005f68 <xTaskIncrementTick+0x150>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	60fb      	str	r3, [r7, #12]
 8005e68:	4b40      	ldr	r3, [pc, #256]	@ (8005f6c <xTaskIncrementTick+0x154>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a3e      	ldr	r2, [pc, #248]	@ (8005f68 <xTaskIncrementTick+0x150>)
 8005e6e:	6013      	str	r3, [r2, #0]
 8005e70:	4a3e      	ldr	r2, [pc, #248]	@ (8005f6c <xTaskIncrementTick+0x154>)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6013      	str	r3, [r2, #0]
 8005e76:	4b3e      	ldr	r3, [pc, #248]	@ (8005f70 <xTaskIncrementTick+0x158>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	4a3c      	ldr	r2, [pc, #240]	@ (8005f70 <xTaskIncrementTick+0x158>)
 8005e7e:	6013      	str	r3, [r2, #0]
 8005e80:	f000 f8ea 	bl	8006058 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005e84:	4b3b      	ldr	r3, [pc, #236]	@ (8005f74 <xTaskIncrementTick+0x15c>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d349      	bcc.n	8005f22 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e8e:	4b36      	ldr	r3, [pc, #216]	@ (8005f68 <xTaskIncrementTick+0x150>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d104      	bne.n	8005ea2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e98:	4b36      	ldr	r3, [pc, #216]	@ (8005f74 <xTaskIncrementTick+0x15c>)
 8005e9a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005e9e:	601a      	str	r2, [r3, #0]
					break;
 8005ea0:	e03f      	b.n	8005f22 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ea2:	4b31      	ldr	r3, [pc, #196]	@ (8005f68 <xTaskIncrementTick+0x150>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005eb2:	693a      	ldr	r2, [r7, #16]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d203      	bcs.n	8005ec2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005eba:	4a2e      	ldr	r2, [pc, #184]	@ (8005f74 <xTaskIncrementTick+0x15c>)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005ec0:	e02f      	b.n	8005f22 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	3304      	adds	r3, #4
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7ff ff7c 	bl	8005dc4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d004      	beq.n	8005ede <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	3318      	adds	r3, #24
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f7ff ff73 	bl	8005dc4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ee2:	4b25      	ldr	r3, [pc, #148]	@ (8005f78 <xTaskIncrementTick+0x160>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d903      	bls.n	8005ef2 <xTaskIncrementTick+0xda>
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eee:	4a22      	ldr	r2, [pc, #136]	@ (8005f78 <xTaskIncrementTick+0x160>)
 8005ef0:	6013      	str	r3, [r2, #0]
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	4413      	add	r3, r2
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	4a1f      	ldr	r2, [pc, #124]	@ (8005f7c <xTaskIncrementTick+0x164>)
 8005f00:	441a      	add	r2, r3
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	3304      	adds	r3, #4
 8005f06:	4619      	mov	r1, r3
 8005f08:	4610      	mov	r0, r2
 8005f0a:	f7ff ff37 	bl	8005d7c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f12:	4b1b      	ldr	r3, [pc, #108]	@ (8005f80 <xTaskIncrementTick+0x168>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d3b8      	bcc.n	8005e8e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f20:	e7b5      	b.n	8005e8e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005f22:	4b17      	ldr	r3, [pc, #92]	@ (8005f80 <xTaskIncrementTick+0x168>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f28:	4914      	ldr	r1, [pc, #80]	@ (8005f7c <xTaskIncrementTick+0x164>)
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	4413      	add	r3, r2
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	440b      	add	r3, r1
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d901      	bls.n	8005f3e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005f3e:	4b11      	ldr	r3, [pc, #68]	@ (8005f84 <xTaskIncrementTick+0x16c>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d007      	beq.n	8005f56 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005f46:	2301      	movs	r3, #1
 8005f48:	617b      	str	r3, [r7, #20]
 8005f4a:	e004      	b.n	8005f56 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8005f88 <xTaskIncrementTick+0x170>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	3301      	adds	r3, #1
 8005f52:	4a0d      	ldr	r2, [pc, #52]	@ (8005f88 <xTaskIncrementTick+0x170>)
 8005f54:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005f56:	697b      	ldr	r3, [r7, #20]
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3718      	adds	r7, #24
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	20000f5c 	.word	0x20000f5c
 8005f64:	20000f40 	.word	0x20000f40
 8005f68:	20000f38 	.word	0x20000f38
 8005f6c:	20000f3c 	.word	0x20000f3c
 8005f70:	20000f54 	.word	0x20000f54
 8005f74:	20000f58 	.word	0x20000f58
 8005f78:	20000f44 	.word	0x20000f44
 8005f7c:	20000ad8 	.word	0x20000ad8
 8005f80:	20000ad4 	.word	0x20000ad4
 8005f84:	20000f50 	.word	0x20000f50
 8005f88:	20000f4c 	.word	0x20000f4c

08005f8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005f92:	4b2b      	ldr	r3, [pc, #172]	@ (8006040 <vTaskSwitchContext+0xb4>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d003      	beq.n	8005fa2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005f9a:	4b2a      	ldr	r3, [pc, #168]	@ (8006044 <vTaskSwitchContext+0xb8>)
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005fa0:	e047      	b.n	8006032 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005fa2:	4b28      	ldr	r3, [pc, #160]	@ (8006044 <vTaskSwitchContext+0xb8>)
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fa8:	4b27      	ldr	r3, [pc, #156]	@ (8006048 <vTaskSwitchContext+0xbc>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	60fb      	str	r3, [r7, #12]
 8005fae:	e011      	b.n	8005fd4 <vTaskSwitchContext+0x48>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d10b      	bne.n	8005fce <vTaskSwitchContext+0x42>
	__asm volatile
 8005fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fba:	f383 8811 	msr	BASEPRI, r3
 8005fbe:	f3bf 8f6f 	isb	sy
 8005fc2:	f3bf 8f4f 	dsb	sy
 8005fc6:	607b      	str	r3, [r7, #4]
}
 8005fc8:	bf00      	nop
 8005fca:	bf00      	nop
 8005fcc:	e7fd      	b.n	8005fca <vTaskSwitchContext+0x3e>
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	3b01      	subs	r3, #1
 8005fd2:	60fb      	str	r3, [r7, #12]
 8005fd4:	491d      	ldr	r1, [pc, #116]	@ (800604c <vTaskSwitchContext+0xc0>)
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	4613      	mov	r3, r2
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	4413      	add	r3, r2
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	440b      	add	r3, r1
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d0e3      	beq.n	8005fb0 <vTaskSwitchContext+0x24>
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	4613      	mov	r3, r2
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	4413      	add	r3, r2
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	4a16      	ldr	r2, [pc, #88]	@ (800604c <vTaskSwitchContext+0xc0>)
 8005ff4:	4413      	add	r3, r2
 8005ff6:	60bb      	str	r3, [r7, #8]
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	685a      	ldr	r2, [r3, #4]
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	605a      	str	r2, [r3, #4]
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	685a      	ldr	r2, [r3, #4]
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	3308      	adds	r3, #8
 800600a:	429a      	cmp	r2, r3
 800600c:	d104      	bne.n	8006018 <vTaskSwitchContext+0x8c>
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	685a      	ldr	r2, [r3, #4]
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	605a      	str	r2, [r3, #4]
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	4a0c      	ldr	r2, [pc, #48]	@ (8006050 <vTaskSwitchContext+0xc4>)
 8006020:	6013      	str	r3, [r2, #0]
 8006022:	4a09      	ldr	r2, [pc, #36]	@ (8006048 <vTaskSwitchContext+0xbc>)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006028:	4b09      	ldr	r3, [pc, #36]	@ (8006050 <vTaskSwitchContext+0xc4>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	3354      	adds	r3, #84	@ 0x54
 800602e:	4a09      	ldr	r2, [pc, #36]	@ (8006054 <vTaskSwitchContext+0xc8>)
 8006030:	6013      	str	r3, [r2, #0]
}
 8006032:	bf00      	nop
 8006034:	3714      	adds	r7, #20
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
 800603e:	bf00      	nop
 8006040:	20000f5c 	.word	0x20000f5c
 8006044:	20000f50 	.word	0x20000f50
 8006048:	20000f44 	.word	0x20000f44
 800604c:	20000ad8 	.word	0x20000ad8
 8006050:	20000ad4 	.word	0x20000ad4
 8006054:	20000010 	.word	0x20000010

08006058 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800605e:	4b0c      	ldr	r3, [pc, #48]	@ (8006090 <prvResetNextTaskUnblockTime+0x38>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d104      	bne.n	8006072 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006068:	4b0a      	ldr	r3, [pc, #40]	@ (8006094 <prvResetNextTaskUnblockTime+0x3c>)
 800606a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800606e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006070:	e008      	b.n	8006084 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006072:	4b07      	ldr	r3, [pc, #28]	@ (8006090 <prvResetNextTaskUnblockTime+0x38>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	4a04      	ldr	r2, [pc, #16]	@ (8006094 <prvResetNextTaskUnblockTime+0x3c>)
 8006082:	6013      	str	r3, [r2, #0]
}
 8006084:	bf00      	nop
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr
 8006090:	20000f38 	.word	0x20000f38
 8006094:	20000f58 	.word	0x20000f58

08006098 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800609e:	4b0b      	ldr	r3, [pc, #44]	@ (80060cc <xTaskGetSchedulerState+0x34>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d102      	bne.n	80060ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80060a6:	2301      	movs	r3, #1
 80060a8:	607b      	str	r3, [r7, #4]
 80060aa:	e008      	b.n	80060be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060ac:	4b08      	ldr	r3, [pc, #32]	@ (80060d0 <xTaskGetSchedulerState+0x38>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d102      	bne.n	80060ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80060b4:	2302      	movs	r3, #2
 80060b6:	607b      	str	r3, [r7, #4]
 80060b8:	e001      	b.n	80060be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80060ba:	2300      	movs	r3, #0
 80060bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80060be:	687b      	ldr	r3, [r7, #4]
	}
 80060c0:	4618      	mov	r0, r3
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr
 80060cc:	20000f48 	.word	0x20000f48
 80060d0:	20000f5c 	.word	0x20000f5c
	...

080060e0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80060e0:	4b07      	ldr	r3, [pc, #28]	@ (8006100 <pxCurrentTCBConst2>)
 80060e2:	6819      	ldr	r1, [r3, #0]
 80060e4:	6808      	ldr	r0, [r1, #0]
 80060e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060ea:	f380 8809 	msr	PSP, r0
 80060ee:	f3bf 8f6f 	isb	sy
 80060f2:	f04f 0000 	mov.w	r0, #0
 80060f6:	f380 8811 	msr	BASEPRI, r0
 80060fa:	4770      	bx	lr
 80060fc:	f3af 8000 	nop.w

08006100 <pxCurrentTCBConst2>:
 8006100:	20000ad4 	.word	0x20000ad4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006104:	bf00      	nop
 8006106:	bf00      	nop
	...

08006110 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006110:	f3ef 8009 	mrs	r0, PSP
 8006114:	f3bf 8f6f 	isb	sy
 8006118:	4b15      	ldr	r3, [pc, #84]	@ (8006170 <pxCurrentTCBConst>)
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	f01e 0f10 	tst.w	lr, #16
 8006120:	bf08      	it	eq
 8006122:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006126:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800612a:	6010      	str	r0, [r2, #0]
 800612c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006130:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006134:	f380 8811 	msr	BASEPRI, r0
 8006138:	f3bf 8f4f 	dsb	sy
 800613c:	f3bf 8f6f 	isb	sy
 8006140:	f7ff ff24 	bl	8005f8c <vTaskSwitchContext>
 8006144:	f04f 0000 	mov.w	r0, #0
 8006148:	f380 8811 	msr	BASEPRI, r0
 800614c:	bc09      	pop	{r0, r3}
 800614e:	6819      	ldr	r1, [r3, #0]
 8006150:	6808      	ldr	r0, [r1, #0]
 8006152:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006156:	f01e 0f10 	tst.w	lr, #16
 800615a:	bf08      	it	eq
 800615c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006160:	f380 8809 	msr	PSP, r0
 8006164:	f3bf 8f6f 	isb	sy
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	f3af 8000 	nop.w

08006170 <pxCurrentTCBConst>:
 8006170:	20000ad4 	.word	0x20000ad4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006174:	bf00      	nop
 8006176:	bf00      	nop

08006178 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
	__asm volatile
 800617e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	607b      	str	r3, [r7, #4]
}
 8006190:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006192:	f7ff fe41 	bl	8005e18 <xTaskIncrementTick>
 8006196:	4603      	mov	r3, r0
 8006198:	2b00      	cmp	r3, #0
 800619a:	d003      	beq.n	80061a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800619c:	4b06      	ldr	r3, [pc, #24]	@ (80061b8 <xPortSysTickHandler+0x40>)
 800619e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061a2:	601a      	str	r2, [r3, #0]
 80061a4:	2300      	movs	r3, #0
 80061a6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80061ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80061b0:	bf00      	nop
 80061b2:	3708      	adds	r7, #8
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	e000ed04 	.word	0xe000ed04

080061bc <siprintf>:
 80061bc:	b40e      	push	{r1, r2, r3}
 80061be:	b500      	push	{lr}
 80061c0:	b09c      	sub	sp, #112	@ 0x70
 80061c2:	ab1d      	add	r3, sp, #116	@ 0x74
 80061c4:	9002      	str	r0, [sp, #8]
 80061c6:	9006      	str	r0, [sp, #24]
 80061c8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80061cc:	4809      	ldr	r0, [pc, #36]	@ (80061f4 <siprintf+0x38>)
 80061ce:	9107      	str	r1, [sp, #28]
 80061d0:	9104      	str	r1, [sp, #16]
 80061d2:	4909      	ldr	r1, [pc, #36]	@ (80061f8 <siprintf+0x3c>)
 80061d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80061d8:	9105      	str	r1, [sp, #20]
 80061da:	6800      	ldr	r0, [r0, #0]
 80061dc:	9301      	str	r3, [sp, #4]
 80061de:	a902      	add	r1, sp, #8
 80061e0:	f000 f9b6 	bl	8006550 <_svfiprintf_r>
 80061e4:	9b02      	ldr	r3, [sp, #8]
 80061e6:	2200      	movs	r2, #0
 80061e8:	701a      	strb	r2, [r3, #0]
 80061ea:	b01c      	add	sp, #112	@ 0x70
 80061ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80061f0:	b003      	add	sp, #12
 80061f2:	4770      	bx	lr
 80061f4:	20000010 	.word	0x20000010
 80061f8:	ffff0208 	.word	0xffff0208

080061fc <memset>:
 80061fc:	4402      	add	r2, r0
 80061fe:	4603      	mov	r3, r0
 8006200:	4293      	cmp	r3, r2
 8006202:	d100      	bne.n	8006206 <memset+0xa>
 8006204:	4770      	bx	lr
 8006206:	f803 1b01 	strb.w	r1, [r3], #1
 800620a:	e7f9      	b.n	8006200 <memset+0x4>

0800620c <strncpy>:
 800620c:	b510      	push	{r4, lr}
 800620e:	3901      	subs	r1, #1
 8006210:	4603      	mov	r3, r0
 8006212:	b132      	cbz	r2, 8006222 <strncpy+0x16>
 8006214:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006218:	f803 4b01 	strb.w	r4, [r3], #1
 800621c:	3a01      	subs	r2, #1
 800621e:	2c00      	cmp	r4, #0
 8006220:	d1f7      	bne.n	8006212 <strncpy+0x6>
 8006222:	441a      	add	r2, r3
 8006224:	2100      	movs	r1, #0
 8006226:	4293      	cmp	r3, r2
 8006228:	d100      	bne.n	800622c <strncpy+0x20>
 800622a:	bd10      	pop	{r4, pc}
 800622c:	f803 1b01 	strb.w	r1, [r3], #1
 8006230:	e7f9      	b.n	8006226 <strncpy+0x1a>
	...

08006234 <__errno>:
 8006234:	4b01      	ldr	r3, [pc, #4]	@ (800623c <__errno+0x8>)
 8006236:	6818      	ldr	r0, [r3, #0]
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop
 800623c:	20000010 	.word	0x20000010

08006240 <__libc_init_array>:
 8006240:	b570      	push	{r4, r5, r6, lr}
 8006242:	4d0d      	ldr	r5, [pc, #52]	@ (8006278 <__libc_init_array+0x38>)
 8006244:	4c0d      	ldr	r4, [pc, #52]	@ (800627c <__libc_init_array+0x3c>)
 8006246:	1b64      	subs	r4, r4, r5
 8006248:	10a4      	asrs	r4, r4, #2
 800624a:	2600      	movs	r6, #0
 800624c:	42a6      	cmp	r6, r4
 800624e:	d109      	bne.n	8006264 <__libc_init_array+0x24>
 8006250:	4d0b      	ldr	r5, [pc, #44]	@ (8006280 <__libc_init_array+0x40>)
 8006252:	4c0c      	ldr	r4, [pc, #48]	@ (8006284 <__libc_init_array+0x44>)
 8006254:	f000 fed0 	bl	8006ff8 <_init>
 8006258:	1b64      	subs	r4, r4, r5
 800625a:	10a4      	asrs	r4, r4, #2
 800625c:	2600      	movs	r6, #0
 800625e:	42a6      	cmp	r6, r4
 8006260:	d105      	bne.n	800626e <__libc_init_array+0x2e>
 8006262:	bd70      	pop	{r4, r5, r6, pc}
 8006264:	f855 3b04 	ldr.w	r3, [r5], #4
 8006268:	4798      	blx	r3
 800626a:	3601      	adds	r6, #1
 800626c:	e7ee      	b.n	800624c <__libc_init_array+0xc>
 800626e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006272:	4798      	blx	r3
 8006274:	3601      	adds	r6, #1
 8006276:	e7f2      	b.n	800625e <__libc_init_array+0x1e>
 8006278:	08007378 	.word	0x08007378
 800627c:	08007378 	.word	0x08007378
 8006280:	08007378 	.word	0x08007378
 8006284:	0800737c 	.word	0x0800737c

08006288 <__retarget_lock_acquire_recursive>:
 8006288:	4770      	bx	lr

0800628a <__retarget_lock_release_recursive>:
 800628a:	4770      	bx	lr

0800628c <memcpy>:
 800628c:	440a      	add	r2, r1
 800628e:	4291      	cmp	r1, r2
 8006290:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006294:	d100      	bne.n	8006298 <memcpy+0xc>
 8006296:	4770      	bx	lr
 8006298:	b510      	push	{r4, lr}
 800629a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800629e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062a2:	4291      	cmp	r1, r2
 80062a4:	d1f9      	bne.n	800629a <memcpy+0xe>
 80062a6:	bd10      	pop	{r4, pc}

080062a8 <_free_r>:
 80062a8:	b538      	push	{r3, r4, r5, lr}
 80062aa:	4605      	mov	r5, r0
 80062ac:	2900      	cmp	r1, #0
 80062ae:	d041      	beq.n	8006334 <_free_r+0x8c>
 80062b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062b4:	1f0c      	subs	r4, r1, #4
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	bfb8      	it	lt
 80062ba:	18e4      	addlt	r4, r4, r3
 80062bc:	f000 f8e0 	bl	8006480 <__malloc_lock>
 80062c0:	4a1d      	ldr	r2, [pc, #116]	@ (8006338 <_free_r+0x90>)
 80062c2:	6813      	ldr	r3, [r2, #0]
 80062c4:	b933      	cbnz	r3, 80062d4 <_free_r+0x2c>
 80062c6:	6063      	str	r3, [r4, #4]
 80062c8:	6014      	str	r4, [r2, #0]
 80062ca:	4628      	mov	r0, r5
 80062cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062d0:	f000 b8dc 	b.w	800648c <__malloc_unlock>
 80062d4:	42a3      	cmp	r3, r4
 80062d6:	d908      	bls.n	80062ea <_free_r+0x42>
 80062d8:	6820      	ldr	r0, [r4, #0]
 80062da:	1821      	adds	r1, r4, r0
 80062dc:	428b      	cmp	r3, r1
 80062de:	bf01      	itttt	eq
 80062e0:	6819      	ldreq	r1, [r3, #0]
 80062e2:	685b      	ldreq	r3, [r3, #4]
 80062e4:	1809      	addeq	r1, r1, r0
 80062e6:	6021      	streq	r1, [r4, #0]
 80062e8:	e7ed      	b.n	80062c6 <_free_r+0x1e>
 80062ea:	461a      	mov	r2, r3
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	b10b      	cbz	r3, 80062f4 <_free_r+0x4c>
 80062f0:	42a3      	cmp	r3, r4
 80062f2:	d9fa      	bls.n	80062ea <_free_r+0x42>
 80062f4:	6811      	ldr	r1, [r2, #0]
 80062f6:	1850      	adds	r0, r2, r1
 80062f8:	42a0      	cmp	r0, r4
 80062fa:	d10b      	bne.n	8006314 <_free_r+0x6c>
 80062fc:	6820      	ldr	r0, [r4, #0]
 80062fe:	4401      	add	r1, r0
 8006300:	1850      	adds	r0, r2, r1
 8006302:	4283      	cmp	r3, r0
 8006304:	6011      	str	r1, [r2, #0]
 8006306:	d1e0      	bne.n	80062ca <_free_r+0x22>
 8006308:	6818      	ldr	r0, [r3, #0]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	6053      	str	r3, [r2, #4]
 800630e:	4408      	add	r0, r1
 8006310:	6010      	str	r0, [r2, #0]
 8006312:	e7da      	b.n	80062ca <_free_r+0x22>
 8006314:	d902      	bls.n	800631c <_free_r+0x74>
 8006316:	230c      	movs	r3, #12
 8006318:	602b      	str	r3, [r5, #0]
 800631a:	e7d6      	b.n	80062ca <_free_r+0x22>
 800631c:	6820      	ldr	r0, [r4, #0]
 800631e:	1821      	adds	r1, r4, r0
 8006320:	428b      	cmp	r3, r1
 8006322:	bf04      	itt	eq
 8006324:	6819      	ldreq	r1, [r3, #0]
 8006326:	685b      	ldreq	r3, [r3, #4]
 8006328:	6063      	str	r3, [r4, #4]
 800632a:	bf04      	itt	eq
 800632c:	1809      	addeq	r1, r1, r0
 800632e:	6021      	streq	r1, [r4, #0]
 8006330:	6054      	str	r4, [r2, #4]
 8006332:	e7ca      	b.n	80062ca <_free_r+0x22>
 8006334:	bd38      	pop	{r3, r4, r5, pc}
 8006336:	bf00      	nop
 8006338:	200010a4 	.word	0x200010a4

0800633c <sbrk_aligned>:
 800633c:	b570      	push	{r4, r5, r6, lr}
 800633e:	4e0f      	ldr	r6, [pc, #60]	@ (800637c <sbrk_aligned+0x40>)
 8006340:	460c      	mov	r4, r1
 8006342:	6831      	ldr	r1, [r6, #0]
 8006344:	4605      	mov	r5, r0
 8006346:	b911      	cbnz	r1, 800634e <sbrk_aligned+0x12>
 8006348:	f000 fba6 	bl	8006a98 <_sbrk_r>
 800634c:	6030      	str	r0, [r6, #0]
 800634e:	4621      	mov	r1, r4
 8006350:	4628      	mov	r0, r5
 8006352:	f000 fba1 	bl	8006a98 <_sbrk_r>
 8006356:	1c43      	adds	r3, r0, #1
 8006358:	d103      	bne.n	8006362 <sbrk_aligned+0x26>
 800635a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800635e:	4620      	mov	r0, r4
 8006360:	bd70      	pop	{r4, r5, r6, pc}
 8006362:	1cc4      	adds	r4, r0, #3
 8006364:	f024 0403 	bic.w	r4, r4, #3
 8006368:	42a0      	cmp	r0, r4
 800636a:	d0f8      	beq.n	800635e <sbrk_aligned+0x22>
 800636c:	1a21      	subs	r1, r4, r0
 800636e:	4628      	mov	r0, r5
 8006370:	f000 fb92 	bl	8006a98 <_sbrk_r>
 8006374:	3001      	adds	r0, #1
 8006376:	d1f2      	bne.n	800635e <sbrk_aligned+0x22>
 8006378:	e7ef      	b.n	800635a <sbrk_aligned+0x1e>
 800637a:	bf00      	nop
 800637c:	200010a0 	.word	0x200010a0

08006380 <_malloc_r>:
 8006380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006384:	1ccd      	adds	r5, r1, #3
 8006386:	f025 0503 	bic.w	r5, r5, #3
 800638a:	3508      	adds	r5, #8
 800638c:	2d0c      	cmp	r5, #12
 800638e:	bf38      	it	cc
 8006390:	250c      	movcc	r5, #12
 8006392:	2d00      	cmp	r5, #0
 8006394:	4606      	mov	r6, r0
 8006396:	db01      	blt.n	800639c <_malloc_r+0x1c>
 8006398:	42a9      	cmp	r1, r5
 800639a:	d904      	bls.n	80063a6 <_malloc_r+0x26>
 800639c:	230c      	movs	r3, #12
 800639e:	6033      	str	r3, [r6, #0]
 80063a0:	2000      	movs	r0, #0
 80063a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800647c <_malloc_r+0xfc>
 80063aa:	f000 f869 	bl	8006480 <__malloc_lock>
 80063ae:	f8d8 3000 	ldr.w	r3, [r8]
 80063b2:	461c      	mov	r4, r3
 80063b4:	bb44      	cbnz	r4, 8006408 <_malloc_r+0x88>
 80063b6:	4629      	mov	r1, r5
 80063b8:	4630      	mov	r0, r6
 80063ba:	f7ff ffbf 	bl	800633c <sbrk_aligned>
 80063be:	1c43      	adds	r3, r0, #1
 80063c0:	4604      	mov	r4, r0
 80063c2:	d158      	bne.n	8006476 <_malloc_r+0xf6>
 80063c4:	f8d8 4000 	ldr.w	r4, [r8]
 80063c8:	4627      	mov	r7, r4
 80063ca:	2f00      	cmp	r7, #0
 80063cc:	d143      	bne.n	8006456 <_malloc_r+0xd6>
 80063ce:	2c00      	cmp	r4, #0
 80063d0:	d04b      	beq.n	800646a <_malloc_r+0xea>
 80063d2:	6823      	ldr	r3, [r4, #0]
 80063d4:	4639      	mov	r1, r7
 80063d6:	4630      	mov	r0, r6
 80063d8:	eb04 0903 	add.w	r9, r4, r3
 80063dc:	f000 fb5c 	bl	8006a98 <_sbrk_r>
 80063e0:	4581      	cmp	r9, r0
 80063e2:	d142      	bne.n	800646a <_malloc_r+0xea>
 80063e4:	6821      	ldr	r1, [r4, #0]
 80063e6:	1a6d      	subs	r5, r5, r1
 80063e8:	4629      	mov	r1, r5
 80063ea:	4630      	mov	r0, r6
 80063ec:	f7ff ffa6 	bl	800633c <sbrk_aligned>
 80063f0:	3001      	adds	r0, #1
 80063f2:	d03a      	beq.n	800646a <_malloc_r+0xea>
 80063f4:	6823      	ldr	r3, [r4, #0]
 80063f6:	442b      	add	r3, r5
 80063f8:	6023      	str	r3, [r4, #0]
 80063fa:	f8d8 3000 	ldr.w	r3, [r8]
 80063fe:	685a      	ldr	r2, [r3, #4]
 8006400:	bb62      	cbnz	r2, 800645c <_malloc_r+0xdc>
 8006402:	f8c8 7000 	str.w	r7, [r8]
 8006406:	e00f      	b.n	8006428 <_malloc_r+0xa8>
 8006408:	6822      	ldr	r2, [r4, #0]
 800640a:	1b52      	subs	r2, r2, r5
 800640c:	d420      	bmi.n	8006450 <_malloc_r+0xd0>
 800640e:	2a0b      	cmp	r2, #11
 8006410:	d917      	bls.n	8006442 <_malloc_r+0xc2>
 8006412:	1961      	adds	r1, r4, r5
 8006414:	42a3      	cmp	r3, r4
 8006416:	6025      	str	r5, [r4, #0]
 8006418:	bf18      	it	ne
 800641a:	6059      	strne	r1, [r3, #4]
 800641c:	6863      	ldr	r3, [r4, #4]
 800641e:	bf08      	it	eq
 8006420:	f8c8 1000 	streq.w	r1, [r8]
 8006424:	5162      	str	r2, [r4, r5]
 8006426:	604b      	str	r3, [r1, #4]
 8006428:	4630      	mov	r0, r6
 800642a:	f000 f82f 	bl	800648c <__malloc_unlock>
 800642e:	f104 000b 	add.w	r0, r4, #11
 8006432:	1d23      	adds	r3, r4, #4
 8006434:	f020 0007 	bic.w	r0, r0, #7
 8006438:	1ac2      	subs	r2, r0, r3
 800643a:	bf1c      	itt	ne
 800643c:	1a1b      	subne	r3, r3, r0
 800643e:	50a3      	strne	r3, [r4, r2]
 8006440:	e7af      	b.n	80063a2 <_malloc_r+0x22>
 8006442:	6862      	ldr	r2, [r4, #4]
 8006444:	42a3      	cmp	r3, r4
 8006446:	bf0c      	ite	eq
 8006448:	f8c8 2000 	streq.w	r2, [r8]
 800644c:	605a      	strne	r2, [r3, #4]
 800644e:	e7eb      	b.n	8006428 <_malloc_r+0xa8>
 8006450:	4623      	mov	r3, r4
 8006452:	6864      	ldr	r4, [r4, #4]
 8006454:	e7ae      	b.n	80063b4 <_malloc_r+0x34>
 8006456:	463c      	mov	r4, r7
 8006458:	687f      	ldr	r7, [r7, #4]
 800645a:	e7b6      	b.n	80063ca <_malloc_r+0x4a>
 800645c:	461a      	mov	r2, r3
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	42a3      	cmp	r3, r4
 8006462:	d1fb      	bne.n	800645c <_malloc_r+0xdc>
 8006464:	2300      	movs	r3, #0
 8006466:	6053      	str	r3, [r2, #4]
 8006468:	e7de      	b.n	8006428 <_malloc_r+0xa8>
 800646a:	230c      	movs	r3, #12
 800646c:	6033      	str	r3, [r6, #0]
 800646e:	4630      	mov	r0, r6
 8006470:	f000 f80c 	bl	800648c <__malloc_unlock>
 8006474:	e794      	b.n	80063a0 <_malloc_r+0x20>
 8006476:	6005      	str	r5, [r0, #0]
 8006478:	e7d6      	b.n	8006428 <_malloc_r+0xa8>
 800647a:	bf00      	nop
 800647c:	200010a4 	.word	0x200010a4

08006480 <__malloc_lock>:
 8006480:	4801      	ldr	r0, [pc, #4]	@ (8006488 <__malloc_lock+0x8>)
 8006482:	f7ff bf01 	b.w	8006288 <__retarget_lock_acquire_recursive>
 8006486:	bf00      	nop
 8006488:	2000109c 	.word	0x2000109c

0800648c <__malloc_unlock>:
 800648c:	4801      	ldr	r0, [pc, #4]	@ (8006494 <__malloc_unlock+0x8>)
 800648e:	f7ff befc 	b.w	800628a <__retarget_lock_release_recursive>
 8006492:	bf00      	nop
 8006494:	2000109c 	.word	0x2000109c

08006498 <__ssputs_r>:
 8006498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800649c:	688e      	ldr	r6, [r1, #8]
 800649e:	461f      	mov	r7, r3
 80064a0:	42be      	cmp	r6, r7
 80064a2:	680b      	ldr	r3, [r1, #0]
 80064a4:	4682      	mov	sl, r0
 80064a6:	460c      	mov	r4, r1
 80064a8:	4690      	mov	r8, r2
 80064aa:	d82d      	bhi.n	8006508 <__ssputs_r+0x70>
 80064ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80064b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80064b4:	d026      	beq.n	8006504 <__ssputs_r+0x6c>
 80064b6:	6965      	ldr	r5, [r4, #20]
 80064b8:	6909      	ldr	r1, [r1, #16]
 80064ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80064be:	eba3 0901 	sub.w	r9, r3, r1
 80064c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80064c6:	1c7b      	adds	r3, r7, #1
 80064c8:	444b      	add	r3, r9
 80064ca:	106d      	asrs	r5, r5, #1
 80064cc:	429d      	cmp	r5, r3
 80064ce:	bf38      	it	cc
 80064d0:	461d      	movcc	r5, r3
 80064d2:	0553      	lsls	r3, r2, #21
 80064d4:	d527      	bpl.n	8006526 <__ssputs_r+0x8e>
 80064d6:	4629      	mov	r1, r5
 80064d8:	f7ff ff52 	bl	8006380 <_malloc_r>
 80064dc:	4606      	mov	r6, r0
 80064de:	b360      	cbz	r0, 800653a <__ssputs_r+0xa2>
 80064e0:	6921      	ldr	r1, [r4, #16]
 80064e2:	464a      	mov	r2, r9
 80064e4:	f7ff fed2 	bl	800628c <memcpy>
 80064e8:	89a3      	ldrh	r3, [r4, #12]
 80064ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80064ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064f2:	81a3      	strh	r3, [r4, #12]
 80064f4:	6126      	str	r6, [r4, #16]
 80064f6:	6165      	str	r5, [r4, #20]
 80064f8:	444e      	add	r6, r9
 80064fa:	eba5 0509 	sub.w	r5, r5, r9
 80064fe:	6026      	str	r6, [r4, #0]
 8006500:	60a5      	str	r5, [r4, #8]
 8006502:	463e      	mov	r6, r7
 8006504:	42be      	cmp	r6, r7
 8006506:	d900      	bls.n	800650a <__ssputs_r+0x72>
 8006508:	463e      	mov	r6, r7
 800650a:	6820      	ldr	r0, [r4, #0]
 800650c:	4632      	mov	r2, r6
 800650e:	4641      	mov	r1, r8
 8006510:	f000 faa8 	bl	8006a64 <memmove>
 8006514:	68a3      	ldr	r3, [r4, #8]
 8006516:	1b9b      	subs	r3, r3, r6
 8006518:	60a3      	str	r3, [r4, #8]
 800651a:	6823      	ldr	r3, [r4, #0]
 800651c:	4433      	add	r3, r6
 800651e:	6023      	str	r3, [r4, #0]
 8006520:	2000      	movs	r0, #0
 8006522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006526:	462a      	mov	r2, r5
 8006528:	f000 fac6 	bl	8006ab8 <_realloc_r>
 800652c:	4606      	mov	r6, r0
 800652e:	2800      	cmp	r0, #0
 8006530:	d1e0      	bne.n	80064f4 <__ssputs_r+0x5c>
 8006532:	6921      	ldr	r1, [r4, #16]
 8006534:	4650      	mov	r0, sl
 8006536:	f7ff feb7 	bl	80062a8 <_free_r>
 800653a:	230c      	movs	r3, #12
 800653c:	f8ca 3000 	str.w	r3, [sl]
 8006540:	89a3      	ldrh	r3, [r4, #12]
 8006542:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006546:	81a3      	strh	r3, [r4, #12]
 8006548:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800654c:	e7e9      	b.n	8006522 <__ssputs_r+0x8a>
	...

08006550 <_svfiprintf_r>:
 8006550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006554:	4698      	mov	r8, r3
 8006556:	898b      	ldrh	r3, [r1, #12]
 8006558:	061b      	lsls	r3, r3, #24
 800655a:	b09d      	sub	sp, #116	@ 0x74
 800655c:	4607      	mov	r7, r0
 800655e:	460d      	mov	r5, r1
 8006560:	4614      	mov	r4, r2
 8006562:	d510      	bpl.n	8006586 <_svfiprintf_r+0x36>
 8006564:	690b      	ldr	r3, [r1, #16]
 8006566:	b973      	cbnz	r3, 8006586 <_svfiprintf_r+0x36>
 8006568:	2140      	movs	r1, #64	@ 0x40
 800656a:	f7ff ff09 	bl	8006380 <_malloc_r>
 800656e:	6028      	str	r0, [r5, #0]
 8006570:	6128      	str	r0, [r5, #16]
 8006572:	b930      	cbnz	r0, 8006582 <_svfiprintf_r+0x32>
 8006574:	230c      	movs	r3, #12
 8006576:	603b      	str	r3, [r7, #0]
 8006578:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800657c:	b01d      	add	sp, #116	@ 0x74
 800657e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006582:	2340      	movs	r3, #64	@ 0x40
 8006584:	616b      	str	r3, [r5, #20]
 8006586:	2300      	movs	r3, #0
 8006588:	9309      	str	r3, [sp, #36]	@ 0x24
 800658a:	2320      	movs	r3, #32
 800658c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006590:	f8cd 800c 	str.w	r8, [sp, #12]
 8006594:	2330      	movs	r3, #48	@ 0x30
 8006596:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006734 <_svfiprintf_r+0x1e4>
 800659a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800659e:	f04f 0901 	mov.w	r9, #1
 80065a2:	4623      	mov	r3, r4
 80065a4:	469a      	mov	sl, r3
 80065a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065aa:	b10a      	cbz	r2, 80065b0 <_svfiprintf_r+0x60>
 80065ac:	2a25      	cmp	r2, #37	@ 0x25
 80065ae:	d1f9      	bne.n	80065a4 <_svfiprintf_r+0x54>
 80065b0:	ebba 0b04 	subs.w	fp, sl, r4
 80065b4:	d00b      	beq.n	80065ce <_svfiprintf_r+0x7e>
 80065b6:	465b      	mov	r3, fp
 80065b8:	4622      	mov	r2, r4
 80065ba:	4629      	mov	r1, r5
 80065bc:	4638      	mov	r0, r7
 80065be:	f7ff ff6b 	bl	8006498 <__ssputs_r>
 80065c2:	3001      	adds	r0, #1
 80065c4:	f000 80a7 	beq.w	8006716 <_svfiprintf_r+0x1c6>
 80065c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80065ca:	445a      	add	r2, fp
 80065cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80065ce:	f89a 3000 	ldrb.w	r3, [sl]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	f000 809f 	beq.w	8006716 <_svfiprintf_r+0x1c6>
 80065d8:	2300      	movs	r3, #0
 80065da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80065de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065e2:	f10a 0a01 	add.w	sl, sl, #1
 80065e6:	9304      	str	r3, [sp, #16]
 80065e8:	9307      	str	r3, [sp, #28]
 80065ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80065ee:	931a      	str	r3, [sp, #104]	@ 0x68
 80065f0:	4654      	mov	r4, sl
 80065f2:	2205      	movs	r2, #5
 80065f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065f8:	484e      	ldr	r0, [pc, #312]	@ (8006734 <_svfiprintf_r+0x1e4>)
 80065fa:	f7f9 fe11 	bl	8000220 <memchr>
 80065fe:	9a04      	ldr	r2, [sp, #16]
 8006600:	b9d8      	cbnz	r0, 800663a <_svfiprintf_r+0xea>
 8006602:	06d0      	lsls	r0, r2, #27
 8006604:	bf44      	itt	mi
 8006606:	2320      	movmi	r3, #32
 8006608:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800660c:	0711      	lsls	r1, r2, #28
 800660e:	bf44      	itt	mi
 8006610:	232b      	movmi	r3, #43	@ 0x2b
 8006612:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006616:	f89a 3000 	ldrb.w	r3, [sl]
 800661a:	2b2a      	cmp	r3, #42	@ 0x2a
 800661c:	d015      	beq.n	800664a <_svfiprintf_r+0xfa>
 800661e:	9a07      	ldr	r2, [sp, #28]
 8006620:	4654      	mov	r4, sl
 8006622:	2000      	movs	r0, #0
 8006624:	f04f 0c0a 	mov.w	ip, #10
 8006628:	4621      	mov	r1, r4
 800662a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800662e:	3b30      	subs	r3, #48	@ 0x30
 8006630:	2b09      	cmp	r3, #9
 8006632:	d94b      	bls.n	80066cc <_svfiprintf_r+0x17c>
 8006634:	b1b0      	cbz	r0, 8006664 <_svfiprintf_r+0x114>
 8006636:	9207      	str	r2, [sp, #28]
 8006638:	e014      	b.n	8006664 <_svfiprintf_r+0x114>
 800663a:	eba0 0308 	sub.w	r3, r0, r8
 800663e:	fa09 f303 	lsl.w	r3, r9, r3
 8006642:	4313      	orrs	r3, r2
 8006644:	9304      	str	r3, [sp, #16]
 8006646:	46a2      	mov	sl, r4
 8006648:	e7d2      	b.n	80065f0 <_svfiprintf_r+0xa0>
 800664a:	9b03      	ldr	r3, [sp, #12]
 800664c:	1d19      	adds	r1, r3, #4
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	9103      	str	r1, [sp, #12]
 8006652:	2b00      	cmp	r3, #0
 8006654:	bfbb      	ittet	lt
 8006656:	425b      	neglt	r3, r3
 8006658:	f042 0202 	orrlt.w	r2, r2, #2
 800665c:	9307      	strge	r3, [sp, #28]
 800665e:	9307      	strlt	r3, [sp, #28]
 8006660:	bfb8      	it	lt
 8006662:	9204      	strlt	r2, [sp, #16]
 8006664:	7823      	ldrb	r3, [r4, #0]
 8006666:	2b2e      	cmp	r3, #46	@ 0x2e
 8006668:	d10a      	bne.n	8006680 <_svfiprintf_r+0x130>
 800666a:	7863      	ldrb	r3, [r4, #1]
 800666c:	2b2a      	cmp	r3, #42	@ 0x2a
 800666e:	d132      	bne.n	80066d6 <_svfiprintf_r+0x186>
 8006670:	9b03      	ldr	r3, [sp, #12]
 8006672:	1d1a      	adds	r2, r3, #4
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	9203      	str	r2, [sp, #12]
 8006678:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800667c:	3402      	adds	r4, #2
 800667e:	9305      	str	r3, [sp, #20]
 8006680:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006744 <_svfiprintf_r+0x1f4>
 8006684:	7821      	ldrb	r1, [r4, #0]
 8006686:	2203      	movs	r2, #3
 8006688:	4650      	mov	r0, sl
 800668a:	f7f9 fdc9 	bl	8000220 <memchr>
 800668e:	b138      	cbz	r0, 80066a0 <_svfiprintf_r+0x150>
 8006690:	9b04      	ldr	r3, [sp, #16]
 8006692:	eba0 000a 	sub.w	r0, r0, sl
 8006696:	2240      	movs	r2, #64	@ 0x40
 8006698:	4082      	lsls	r2, r0
 800669a:	4313      	orrs	r3, r2
 800669c:	3401      	adds	r4, #1
 800669e:	9304      	str	r3, [sp, #16]
 80066a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066a4:	4824      	ldr	r0, [pc, #144]	@ (8006738 <_svfiprintf_r+0x1e8>)
 80066a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80066aa:	2206      	movs	r2, #6
 80066ac:	f7f9 fdb8 	bl	8000220 <memchr>
 80066b0:	2800      	cmp	r0, #0
 80066b2:	d036      	beq.n	8006722 <_svfiprintf_r+0x1d2>
 80066b4:	4b21      	ldr	r3, [pc, #132]	@ (800673c <_svfiprintf_r+0x1ec>)
 80066b6:	bb1b      	cbnz	r3, 8006700 <_svfiprintf_r+0x1b0>
 80066b8:	9b03      	ldr	r3, [sp, #12]
 80066ba:	3307      	adds	r3, #7
 80066bc:	f023 0307 	bic.w	r3, r3, #7
 80066c0:	3308      	adds	r3, #8
 80066c2:	9303      	str	r3, [sp, #12]
 80066c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066c6:	4433      	add	r3, r6
 80066c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80066ca:	e76a      	b.n	80065a2 <_svfiprintf_r+0x52>
 80066cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80066d0:	460c      	mov	r4, r1
 80066d2:	2001      	movs	r0, #1
 80066d4:	e7a8      	b.n	8006628 <_svfiprintf_r+0xd8>
 80066d6:	2300      	movs	r3, #0
 80066d8:	3401      	adds	r4, #1
 80066da:	9305      	str	r3, [sp, #20]
 80066dc:	4619      	mov	r1, r3
 80066de:	f04f 0c0a 	mov.w	ip, #10
 80066e2:	4620      	mov	r0, r4
 80066e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066e8:	3a30      	subs	r2, #48	@ 0x30
 80066ea:	2a09      	cmp	r2, #9
 80066ec:	d903      	bls.n	80066f6 <_svfiprintf_r+0x1a6>
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d0c6      	beq.n	8006680 <_svfiprintf_r+0x130>
 80066f2:	9105      	str	r1, [sp, #20]
 80066f4:	e7c4      	b.n	8006680 <_svfiprintf_r+0x130>
 80066f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80066fa:	4604      	mov	r4, r0
 80066fc:	2301      	movs	r3, #1
 80066fe:	e7f0      	b.n	80066e2 <_svfiprintf_r+0x192>
 8006700:	ab03      	add	r3, sp, #12
 8006702:	9300      	str	r3, [sp, #0]
 8006704:	462a      	mov	r2, r5
 8006706:	4b0e      	ldr	r3, [pc, #56]	@ (8006740 <_svfiprintf_r+0x1f0>)
 8006708:	a904      	add	r1, sp, #16
 800670a:	4638      	mov	r0, r7
 800670c:	f3af 8000 	nop.w
 8006710:	1c42      	adds	r2, r0, #1
 8006712:	4606      	mov	r6, r0
 8006714:	d1d6      	bne.n	80066c4 <_svfiprintf_r+0x174>
 8006716:	89ab      	ldrh	r3, [r5, #12]
 8006718:	065b      	lsls	r3, r3, #25
 800671a:	f53f af2d 	bmi.w	8006578 <_svfiprintf_r+0x28>
 800671e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006720:	e72c      	b.n	800657c <_svfiprintf_r+0x2c>
 8006722:	ab03      	add	r3, sp, #12
 8006724:	9300      	str	r3, [sp, #0]
 8006726:	462a      	mov	r2, r5
 8006728:	4b05      	ldr	r3, [pc, #20]	@ (8006740 <_svfiprintf_r+0x1f0>)
 800672a:	a904      	add	r1, sp, #16
 800672c:	4638      	mov	r0, r7
 800672e:	f000 f879 	bl	8006824 <_printf_i>
 8006732:	e7ed      	b.n	8006710 <_svfiprintf_r+0x1c0>
 8006734:	080072c8 	.word	0x080072c8
 8006738:	080072d2 	.word	0x080072d2
 800673c:	00000000 	.word	0x00000000
 8006740:	08006499 	.word	0x08006499
 8006744:	080072ce 	.word	0x080072ce

08006748 <_printf_common>:
 8006748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800674c:	4616      	mov	r6, r2
 800674e:	4698      	mov	r8, r3
 8006750:	688a      	ldr	r2, [r1, #8]
 8006752:	690b      	ldr	r3, [r1, #16]
 8006754:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006758:	4293      	cmp	r3, r2
 800675a:	bfb8      	it	lt
 800675c:	4613      	movlt	r3, r2
 800675e:	6033      	str	r3, [r6, #0]
 8006760:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006764:	4607      	mov	r7, r0
 8006766:	460c      	mov	r4, r1
 8006768:	b10a      	cbz	r2, 800676e <_printf_common+0x26>
 800676a:	3301      	adds	r3, #1
 800676c:	6033      	str	r3, [r6, #0]
 800676e:	6823      	ldr	r3, [r4, #0]
 8006770:	0699      	lsls	r1, r3, #26
 8006772:	bf42      	ittt	mi
 8006774:	6833      	ldrmi	r3, [r6, #0]
 8006776:	3302      	addmi	r3, #2
 8006778:	6033      	strmi	r3, [r6, #0]
 800677a:	6825      	ldr	r5, [r4, #0]
 800677c:	f015 0506 	ands.w	r5, r5, #6
 8006780:	d106      	bne.n	8006790 <_printf_common+0x48>
 8006782:	f104 0a19 	add.w	sl, r4, #25
 8006786:	68e3      	ldr	r3, [r4, #12]
 8006788:	6832      	ldr	r2, [r6, #0]
 800678a:	1a9b      	subs	r3, r3, r2
 800678c:	42ab      	cmp	r3, r5
 800678e:	dc26      	bgt.n	80067de <_printf_common+0x96>
 8006790:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006794:	6822      	ldr	r2, [r4, #0]
 8006796:	3b00      	subs	r3, #0
 8006798:	bf18      	it	ne
 800679a:	2301      	movne	r3, #1
 800679c:	0692      	lsls	r2, r2, #26
 800679e:	d42b      	bmi.n	80067f8 <_printf_common+0xb0>
 80067a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80067a4:	4641      	mov	r1, r8
 80067a6:	4638      	mov	r0, r7
 80067a8:	47c8      	blx	r9
 80067aa:	3001      	adds	r0, #1
 80067ac:	d01e      	beq.n	80067ec <_printf_common+0xa4>
 80067ae:	6823      	ldr	r3, [r4, #0]
 80067b0:	6922      	ldr	r2, [r4, #16]
 80067b2:	f003 0306 	and.w	r3, r3, #6
 80067b6:	2b04      	cmp	r3, #4
 80067b8:	bf02      	ittt	eq
 80067ba:	68e5      	ldreq	r5, [r4, #12]
 80067bc:	6833      	ldreq	r3, [r6, #0]
 80067be:	1aed      	subeq	r5, r5, r3
 80067c0:	68a3      	ldr	r3, [r4, #8]
 80067c2:	bf0c      	ite	eq
 80067c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067c8:	2500      	movne	r5, #0
 80067ca:	4293      	cmp	r3, r2
 80067cc:	bfc4      	itt	gt
 80067ce:	1a9b      	subgt	r3, r3, r2
 80067d0:	18ed      	addgt	r5, r5, r3
 80067d2:	2600      	movs	r6, #0
 80067d4:	341a      	adds	r4, #26
 80067d6:	42b5      	cmp	r5, r6
 80067d8:	d11a      	bne.n	8006810 <_printf_common+0xc8>
 80067da:	2000      	movs	r0, #0
 80067dc:	e008      	b.n	80067f0 <_printf_common+0xa8>
 80067de:	2301      	movs	r3, #1
 80067e0:	4652      	mov	r2, sl
 80067e2:	4641      	mov	r1, r8
 80067e4:	4638      	mov	r0, r7
 80067e6:	47c8      	blx	r9
 80067e8:	3001      	adds	r0, #1
 80067ea:	d103      	bne.n	80067f4 <_printf_common+0xac>
 80067ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80067f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067f4:	3501      	adds	r5, #1
 80067f6:	e7c6      	b.n	8006786 <_printf_common+0x3e>
 80067f8:	18e1      	adds	r1, r4, r3
 80067fa:	1c5a      	adds	r2, r3, #1
 80067fc:	2030      	movs	r0, #48	@ 0x30
 80067fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006802:	4422      	add	r2, r4
 8006804:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006808:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800680c:	3302      	adds	r3, #2
 800680e:	e7c7      	b.n	80067a0 <_printf_common+0x58>
 8006810:	2301      	movs	r3, #1
 8006812:	4622      	mov	r2, r4
 8006814:	4641      	mov	r1, r8
 8006816:	4638      	mov	r0, r7
 8006818:	47c8      	blx	r9
 800681a:	3001      	adds	r0, #1
 800681c:	d0e6      	beq.n	80067ec <_printf_common+0xa4>
 800681e:	3601      	adds	r6, #1
 8006820:	e7d9      	b.n	80067d6 <_printf_common+0x8e>
	...

08006824 <_printf_i>:
 8006824:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006828:	7e0f      	ldrb	r7, [r1, #24]
 800682a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800682c:	2f78      	cmp	r7, #120	@ 0x78
 800682e:	4691      	mov	r9, r2
 8006830:	4680      	mov	r8, r0
 8006832:	460c      	mov	r4, r1
 8006834:	469a      	mov	sl, r3
 8006836:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800683a:	d807      	bhi.n	800684c <_printf_i+0x28>
 800683c:	2f62      	cmp	r7, #98	@ 0x62
 800683e:	d80a      	bhi.n	8006856 <_printf_i+0x32>
 8006840:	2f00      	cmp	r7, #0
 8006842:	f000 80d2 	beq.w	80069ea <_printf_i+0x1c6>
 8006846:	2f58      	cmp	r7, #88	@ 0x58
 8006848:	f000 80b9 	beq.w	80069be <_printf_i+0x19a>
 800684c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006850:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006854:	e03a      	b.n	80068cc <_printf_i+0xa8>
 8006856:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800685a:	2b15      	cmp	r3, #21
 800685c:	d8f6      	bhi.n	800684c <_printf_i+0x28>
 800685e:	a101      	add	r1, pc, #4	@ (adr r1, 8006864 <_printf_i+0x40>)
 8006860:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006864:	080068bd 	.word	0x080068bd
 8006868:	080068d1 	.word	0x080068d1
 800686c:	0800684d 	.word	0x0800684d
 8006870:	0800684d 	.word	0x0800684d
 8006874:	0800684d 	.word	0x0800684d
 8006878:	0800684d 	.word	0x0800684d
 800687c:	080068d1 	.word	0x080068d1
 8006880:	0800684d 	.word	0x0800684d
 8006884:	0800684d 	.word	0x0800684d
 8006888:	0800684d 	.word	0x0800684d
 800688c:	0800684d 	.word	0x0800684d
 8006890:	080069d1 	.word	0x080069d1
 8006894:	080068fb 	.word	0x080068fb
 8006898:	0800698b 	.word	0x0800698b
 800689c:	0800684d 	.word	0x0800684d
 80068a0:	0800684d 	.word	0x0800684d
 80068a4:	080069f3 	.word	0x080069f3
 80068a8:	0800684d 	.word	0x0800684d
 80068ac:	080068fb 	.word	0x080068fb
 80068b0:	0800684d 	.word	0x0800684d
 80068b4:	0800684d 	.word	0x0800684d
 80068b8:	08006993 	.word	0x08006993
 80068bc:	6833      	ldr	r3, [r6, #0]
 80068be:	1d1a      	adds	r2, r3, #4
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	6032      	str	r2, [r6, #0]
 80068c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80068c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80068cc:	2301      	movs	r3, #1
 80068ce:	e09d      	b.n	8006a0c <_printf_i+0x1e8>
 80068d0:	6833      	ldr	r3, [r6, #0]
 80068d2:	6820      	ldr	r0, [r4, #0]
 80068d4:	1d19      	adds	r1, r3, #4
 80068d6:	6031      	str	r1, [r6, #0]
 80068d8:	0606      	lsls	r6, r0, #24
 80068da:	d501      	bpl.n	80068e0 <_printf_i+0xbc>
 80068dc:	681d      	ldr	r5, [r3, #0]
 80068de:	e003      	b.n	80068e8 <_printf_i+0xc4>
 80068e0:	0645      	lsls	r5, r0, #25
 80068e2:	d5fb      	bpl.n	80068dc <_printf_i+0xb8>
 80068e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80068e8:	2d00      	cmp	r5, #0
 80068ea:	da03      	bge.n	80068f4 <_printf_i+0xd0>
 80068ec:	232d      	movs	r3, #45	@ 0x2d
 80068ee:	426d      	negs	r5, r5
 80068f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068f4:	4859      	ldr	r0, [pc, #356]	@ (8006a5c <_printf_i+0x238>)
 80068f6:	230a      	movs	r3, #10
 80068f8:	e011      	b.n	800691e <_printf_i+0xfa>
 80068fa:	6821      	ldr	r1, [r4, #0]
 80068fc:	6833      	ldr	r3, [r6, #0]
 80068fe:	0608      	lsls	r0, r1, #24
 8006900:	f853 5b04 	ldr.w	r5, [r3], #4
 8006904:	d402      	bmi.n	800690c <_printf_i+0xe8>
 8006906:	0649      	lsls	r1, r1, #25
 8006908:	bf48      	it	mi
 800690a:	b2ad      	uxthmi	r5, r5
 800690c:	2f6f      	cmp	r7, #111	@ 0x6f
 800690e:	4853      	ldr	r0, [pc, #332]	@ (8006a5c <_printf_i+0x238>)
 8006910:	6033      	str	r3, [r6, #0]
 8006912:	bf14      	ite	ne
 8006914:	230a      	movne	r3, #10
 8006916:	2308      	moveq	r3, #8
 8006918:	2100      	movs	r1, #0
 800691a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800691e:	6866      	ldr	r6, [r4, #4]
 8006920:	60a6      	str	r6, [r4, #8]
 8006922:	2e00      	cmp	r6, #0
 8006924:	bfa2      	ittt	ge
 8006926:	6821      	ldrge	r1, [r4, #0]
 8006928:	f021 0104 	bicge.w	r1, r1, #4
 800692c:	6021      	strge	r1, [r4, #0]
 800692e:	b90d      	cbnz	r5, 8006934 <_printf_i+0x110>
 8006930:	2e00      	cmp	r6, #0
 8006932:	d04b      	beq.n	80069cc <_printf_i+0x1a8>
 8006934:	4616      	mov	r6, r2
 8006936:	fbb5 f1f3 	udiv	r1, r5, r3
 800693a:	fb03 5711 	mls	r7, r3, r1, r5
 800693e:	5dc7      	ldrb	r7, [r0, r7]
 8006940:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006944:	462f      	mov	r7, r5
 8006946:	42bb      	cmp	r3, r7
 8006948:	460d      	mov	r5, r1
 800694a:	d9f4      	bls.n	8006936 <_printf_i+0x112>
 800694c:	2b08      	cmp	r3, #8
 800694e:	d10b      	bne.n	8006968 <_printf_i+0x144>
 8006950:	6823      	ldr	r3, [r4, #0]
 8006952:	07df      	lsls	r7, r3, #31
 8006954:	d508      	bpl.n	8006968 <_printf_i+0x144>
 8006956:	6923      	ldr	r3, [r4, #16]
 8006958:	6861      	ldr	r1, [r4, #4]
 800695a:	4299      	cmp	r1, r3
 800695c:	bfde      	ittt	le
 800695e:	2330      	movle	r3, #48	@ 0x30
 8006960:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006964:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006968:	1b92      	subs	r2, r2, r6
 800696a:	6122      	str	r2, [r4, #16]
 800696c:	f8cd a000 	str.w	sl, [sp]
 8006970:	464b      	mov	r3, r9
 8006972:	aa03      	add	r2, sp, #12
 8006974:	4621      	mov	r1, r4
 8006976:	4640      	mov	r0, r8
 8006978:	f7ff fee6 	bl	8006748 <_printf_common>
 800697c:	3001      	adds	r0, #1
 800697e:	d14a      	bne.n	8006a16 <_printf_i+0x1f2>
 8006980:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006984:	b004      	add	sp, #16
 8006986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800698a:	6823      	ldr	r3, [r4, #0]
 800698c:	f043 0320 	orr.w	r3, r3, #32
 8006990:	6023      	str	r3, [r4, #0]
 8006992:	4833      	ldr	r0, [pc, #204]	@ (8006a60 <_printf_i+0x23c>)
 8006994:	2778      	movs	r7, #120	@ 0x78
 8006996:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800699a:	6823      	ldr	r3, [r4, #0]
 800699c:	6831      	ldr	r1, [r6, #0]
 800699e:	061f      	lsls	r7, r3, #24
 80069a0:	f851 5b04 	ldr.w	r5, [r1], #4
 80069a4:	d402      	bmi.n	80069ac <_printf_i+0x188>
 80069a6:	065f      	lsls	r7, r3, #25
 80069a8:	bf48      	it	mi
 80069aa:	b2ad      	uxthmi	r5, r5
 80069ac:	6031      	str	r1, [r6, #0]
 80069ae:	07d9      	lsls	r1, r3, #31
 80069b0:	bf44      	itt	mi
 80069b2:	f043 0320 	orrmi.w	r3, r3, #32
 80069b6:	6023      	strmi	r3, [r4, #0]
 80069b8:	b11d      	cbz	r5, 80069c2 <_printf_i+0x19e>
 80069ba:	2310      	movs	r3, #16
 80069bc:	e7ac      	b.n	8006918 <_printf_i+0xf4>
 80069be:	4827      	ldr	r0, [pc, #156]	@ (8006a5c <_printf_i+0x238>)
 80069c0:	e7e9      	b.n	8006996 <_printf_i+0x172>
 80069c2:	6823      	ldr	r3, [r4, #0]
 80069c4:	f023 0320 	bic.w	r3, r3, #32
 80069c8:	6023      	str	r3, [r4, #0]
 80069ca:	e7f6      	b.n	80069ba <_printf_i+0x196>
 80069cc:	4616      	mov	r6, r2
 80069ce:	e7bd      	b.n	800694c <_printf_i+0x128>
 80069d0:	6833      	ldr	r3, [r6, #0]
 80069d2:	6825      	ldr	r5, [r4, #0]
 80069d4:	6961      	ldr	r1, [r4, #20]
 80069d6:	1d18      	adds	r0, r3, #4
 80069d8:	6030      	str	r0, [r6, #0]
 80069da:	062e      	lsls	r6, r5, #24
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	d501      	bpl.n	80069e4 <_printf_i+0x1c0>
 80069e0:	6019      	str	r1, [r3, #0]
 80069e2:	e002      	b.n	80069ea <_printf_i+0x1c6>
 80069e4:	0668      	lsls	r0, r5, #25
 80069e6:	d5fb      	bpl.n	80069e0 <_printf_i+0x1bc>
 80069e8:	8019      	strh	r1, [r3, #0]
 80069ea:	2300      	movs	r3, #0
 80069ec:	6123      	str	r3, [r4, #16]
 80069ee:	4616      	mov	r6, r2
 80069f0:	e7bc      	b.n	800696c <_printf_i+0x148>
 80069f2:	6833      	ldr	r3, [r6, #0]
 80069f4:	1d1a      	adds	r2, r3, #4
 80069f6:	6032      	str	r2, [r6, #0]
 80069f8:	681e      	ldr	r6, [r3, #0]
 80069fa:	6862      	ldr	r2, [r4, #4]
 80069fc:	2100      	movs	r1, #0
 80069fe:	4630      	mov	r0, r6
 8006a00:	f7f9 fc0e 	bl	8000220 <memchr>
 8006a04:	b108      	cbz	r0, 8006a0a <_printf_i+0x1e6>
 8006a06:	1b80      	subs	r0, r0, r6
 8006a08:	6060      	str	r0, [r4, #4]
 8006a0a:	6863      	ldr	r3, [r4, #4]
 8006a0c:	6123      	str	r3, [r4, #16]
 8006a0e:	2300      	movs	r3, #0
 8006a10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a14:	e7aa      	b.n	800696c <_printf_i+0x148>
 8006a16:	6923      	ldr	r3, [r4, #16]
 8006a18:	4632      	mov	r2, r6
 8006a1a:	4649      	mov	r1, r9
 8006a1c:	4640      	mov	r0, r8
 8006a1e:	47d0      	blx	sl
 8006a20:	3001      	adds	r0, #1
 8006a22:	d0ad      	beq.n	8006980 <_printf_i+0x15c>
 8006a24:	6823      	ldr	r3, [r4, #0]
 8006a26:	079b      	lsls	r3, r3, #30
 8006a28:	d413      	bmi.n	8006a52 <_printf_i+0x22e>
 8006a2a:	68e0      	ldr	r0, [r4, #12]
 8006a2c:	9b03      	ldr	r3, [sp, #12]
 8006a2e:	4298      	cmp	r0, r3
 8006a30:	bfb8      	it	lt
 8006a32:	4618      	movlt	r0, r3
 8006a34:	e7a6      	b.n	8006984 <_printf_i+0x160>
 8006a36:	2301      	movs	r3, #1
 8006a38:	4632      	mov	r2, r6
 8006a3a:	4649      	mov	r1, r9
 8006a3c:	4640      	mov	r0, r8
 8006a3e:	47d0      	blx	sl
 8006a40:	3001      	adds	r0, #1
 8006a42:	d09d      	beq.n	8006980 <_printf_i+0x15c>
 8006a44:	3501      	adds	r5, #1
 8006a46:	68e3      	ldr	r3, [r4, #12]
 8006a48:	9903      	ldr	r1, [sp, #12]
 8006a4a:	1a5b      	subs	r3, r3, r1
 8006a4c:	42ab      	cmp	r3, r5
 8006a4e:	dcf2      	bgt.n	8006a36 <_printf_i+0x212>
 8006a50:	e7eb      	b.n	8006a2a <_printf_i+0x206>
 8006a52:	2500      	movs	r5, #0
 8006a54:	f104 0619 	add.w	r6, r4, #25
 8006a58:	e7f5      	b.n	8006a46 <_printf_i+0x222>
 8006a5a:	bf00      	nop
 8006a5c:	080072d9 	.word	0x080072d9
 8006a60:	080072ea 	.word	0x080072ea

08006a64 <memmove>:
 8006a64:	4288      	cmp	r0, r1
 8006a66:	b510      	push	{r4, lr}
 8006a68:	eb01 0402 	add.w	r4, r1, r2
 8006a6c:	d902      	bls.n	8006a74 <memmove+0x10>
 8006a6e:	4284      	cmp	r4, r0
 8006a70:	4623      	mov	r3, r4
 8006a72:	d807      	bhi.n	8006a84 <memmove+0x20>
 8006a74:	1e43      	subs	r3, r0, #1
 8006a76:	42a1      	cmp	r1, r4
 8006a78:	d008      	beq.n	8006a8c <memmove+0x28>
 8006a7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a82:	e7f8      	b.n	8006a76 <memmove+0x12>
 8006a84:	4402      	add	r2, r0
 8006a86:	4601      	mov	r1, r0
 8006a88:	428a      	cmp	r2, r1
 8006a8a:	d100      	bne.n	8006a8e <memmove+0x2a>
 8006a8c:	bd10      	pop	{r4, pc}
 8006a8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a96:	e7f7      	b.n	8006a88 <memmove+0x24>

08006a98 <_sbrk_r>:
 8006a98:	b538      	push	{r3, r4, r5, lr}
 8006a9a:	4d06      	ldr	r5, [pc, #24]	@ (8006ab4 <_sbrk_r+0x1c>)
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	4604      	mov	r4, r0
 8006aa0:	4608      	mov	r0, r1
 8006aa2:	602b      	str	r3, [r5, #0]
 8006aa4:	f7fb fbd0 	bl	8002248 <_sbrk>
 8006aa8:	1c43      	adds	r3, r0, #1
 8006aaa:	d102      	bne.n	8006ab2 <_sbrk_r+0x1a>
 8006aac:	682b      	ldr	r3, [r5, #0]
 8006aae:	b103      	cbz	r3, 8006ab2 <_sbrk_r+0x1a>
 8006ab0:	6023      	str	r3, [r4, #0]
 8006ab2:	bd38      	pop	{r3, r4, r5, pc}
 8006ab4:	20001098 	.word	0x20001098

08006ab8 <_realloc_r>:
 8006ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006abc:	4680      	mov	r8, r0
 8006abe:	4615      	mov	r5, r2
 8006ac0:	460c      	mov	r4, r1
 8006ac2:	b921      	cbnz	r1, 8006ace <_realloc_r+0x16>
 8006ac4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ac8:	4611      	mov	r1, r2
 8006aca:	f7ff bc59 	b.w	8006380 <_malloc_r>
 8006ace:	b92a      	cbnz	r2, 8006adc <_realloc_r+0x24>
 8006ad0:	f7ff fbea 	bl	80062a8 <_free_r>
 8006ad4:	2400      	movs	r4, #0
 8006ad6:	4620      	mov	r0, r4
 8006ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006adc:	f000 f81a 	bl	8006b14 <_malloc_usable_size_r>
 8006ae0:	4285      	cmp	r5, r0
 8006ae2:	4606      	mov	r6, r0
 8006ae4:	d802      	bhi.n	8006aec <_realloc_r+0x34>
 8006ae6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006aea:	d8f4      	bhi.n	8006ad6 <_realloc_r+0x1e>
 8006aec:	4629      	mov	r1, r5
 8006aee:	4640      	mov	r0, r8
 8006af0:	f7ff fc46 	bl	8006380 <_malloc_r>
 8006af4:	4607      	mov	r7, r0
 8006af6:	2800      	cmp	r0, #0
 8006af8:	d0ec      	beq.n	8006ad4 <_realloc_r+0x1c>
 8006afa:	42b5      	cmp	r5, r6
 8006afc:	462a      	mov	r2, r5
 8006afe:	4621      	mov	r1, r4
 8006b00:	bf28      	it	cs
 8006b02:	4632      	movcs	r2, r6
 8006b04:	f7ff fbc2 	bl	800628c <memcpy>
 8006b08:	4621      	mov	r1, r4
 8006b0a:	4640      	mov	r0, r8
 8006b0c:	f7ff fbcc 	bl	80062a8 <_free_r>
 8006b10:	463c      	mov	r4, r7
 8006b12:	e7e0      	b.n	8006ad6 <_realloc_r+0x1e>

08006b14 <_malloc_usable_size_r>:
 8006b14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b18:	1f18      	subs	r0, r3, #4
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	bfbc      	itt	lt
 8006b1e:	580b      	ldrlt	r3, [r1, r0]
 8006b20:	18c0      	addlt	r0, r0, r3
 8006b22:	4770      	bx	lr

08006b24 <atan2>:
 8006b24:	f000 b800 	b.w	8006b28 <__ieee754_atan2>

08006b28 <__ieee754_atan2>:
 8006b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b2c:	ec57 6b11 	vmov	r6, r7, d1
 8006b30:	4273      	negs	r3, r6
 8006b32:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8006cb0 <__ieee754_atan2+0x188>
 8006b36:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8006b3a:	4333      	orrs	r3, r6
 8006b3c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8006b40:	4543      	cmp	r3, r8
 8006b42:	ec51 0b10 	vmov	r0, r1, d0
 8006b46:	4635      	mov	r5, r6
 8006b48:	d809      	bhi.n	8006b5e <__ieee754_atan2+0x36>
 8006b4a:	4244      	negs	r4, r0
 8006b4c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006b50:	4304      	orrs	r4, r0
 8006b52:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8006b56:	4544      	cmp	r4, r8
 8006b58:	468e      	mov	lr, r1
 8006b5a:	4681      	mov	r9, r0
 8006b5c:	d907      	bls.n	8006b6e <__ieee754_atan2+0x46>
 8006b5e:	4632      	mov	r2, r6
 8006b60:	463b      	mov	r3, r7
 8006b62:	f7f9 fbb3 	bl	80002cc <__adddf3>
 8006b66:	ec41 0b10 	vmov	d0, r0, r1
 8006b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b6e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8006b72:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8006b76:	4334      	orrs	r4, r6
 8006b78:	d103      	bne.n	8006b82 <__ieee754_atan2+0x5a>
 8006b7a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b7e:	f000 b89b 	b.w	8006cb8 <atan>
 8006b82:	17bc      	asrs	r4, r7, #30
 8006b84:	f004 0402 	and.w	r4, r4, #2
 8006b88:	ea53 0909 	orrs.w	r9, r3, r9
 8006b8c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8006b90:	d107      	bne.n	8006ba2 <__ieee754_atan2+0x7a>
 8006b92:	2c02      	cmp	r4, #2
 8006b94:	d05f      	beq.n	8006c56 <__ieee754_atan2+0x12e>
 8006b96:	2c03      	cmp	r4, #3
 8006b98:	d1e5      	bne.n	8006b66 <__ieee754_atan2+0x3e>
 8006b9a:	a141      	add	r1, pc, #260	@ (adr r1, 8006ca0 <__ieee754_atan2+0x178>)
 8006b9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ba0:	e7e1      	b.n	8006b66 <__ieee754_atan2+0x3e>
 8006ba2:	4315      	orrs	r5, r2
 8006ba4:	d106      	bne.n	8006bb4 <__ieee754_atan2+0x8c>
 8006ba6:	f1be 0f00 	cmp.w	lr, #0
 8006baa:	da5f      	bge.n	8006c6c <__ieee754_atan2+0x144>
 8006bac:	a13e      	add	r1, pc, #248	@ (adr r1, 8006ca8 <__ieee754_atan2+0x180>)
 8006bae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bb2:	e7d8      	b.n	8006b66 <__ieee754_atan2+0x3e>
 8006bb4:	4542      	cmp	r2, r8
 8006bb6:	d10f      	bne.n	8006bd8 <__ieee754_atan2+0xb0>
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 8006bbe:	d107      	bne.n	8006bd0 <__ieee754_atan2+0xa8>
 8006bc0:	2c02      	cmp	r4, #2
 8006bc2:	d84c      	bhi.n	8006c5e <__ieee754_atan2+0x136>
 8006bc4:	4b34      	ldr	r3, [pc, #208]	@ (8006c98 <__ieee754_atan2+0x170>)
 8006bc6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006bca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006bce:	e7ca      	b.n	8006b66 <__ieee754_atan2+0x3e>
 8006bd0:	2c02      	cmp	r4, #2
 8006bd2:	d848      	bhi.n	8006c66 <__ieee754_atan2+0x13e>
 8006bd4:	4b31      	ldr	r3, [pc, #196]	@ (8006c9c <__ieee754_atan2+0x174>)
 8006bd6:	e7f6      	b.n	8006bc6 <__ieee754_atan2+0x9e>
 8006bd8:	4543      	cmp	r3, r8
 8006bda:	d0e4      	beq.n	8006ba6 <__ieee754_atan2+0x7e>
 8006bdc:	1a9b      	subs	r3, r3, r2
 8006bde:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8006be2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006be6:	da1e      	bge.n	8006c26 <__ieee754_atan2+0xfe>
 8006be8:	2f00      	cmp	r7, #0
 8006bea:	da01      	bge.n	8006bf0 <__ieee754_atan2+0xc8>
 8006bec:	323c      	adds	r2, #60	@ 0x3c
 8006bee:	db1e      	blt.n	8006c2e <__ieee754_atan2+0x106>
 8006bf0:	4632      	mov	r2, r6
 8006bf2:	463b      	mov	r3, r7
 8006bf4:	f7f9 fe4a 	bl	800088c <__aeabi_ddiv>
 8006bf8:	ec41 0b10 	vmov	d0, r0, r1
 8006bfc:	f000 f9f4 	bl	8006fe8 <fabs>
 8006c00:	f000 f85a 	bl	8006cb8 <atan>
 8006c04:	ec51 0b10 	vmov	r0, r1, d0
 8006c08:	2c01      	cmp	r4, #1
 8006c0a:	d013      	beq.n	8006c34 <__ieee754_atan2+0x10c>
 8006c0c:	2c02      	cmp	r4, #2
 8006c0e:	d015      	beq.n	8006c3c <__ieee754_atan2+0x114>
 8006c10:	2c00      	cmp	r4, #0
 8006c12:	d0a8      	beq.n	8006b66 <__ieee754_atan2+0x3e>
 8006c14:	a318      	add	r3, pc, #96	@ (adr r3, 8006c78 <__ieee754_atan2+0x150>)
 8006c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1a:	f7f9 fb55 	bl	80002c8 <__aeabi_dsub>
 8006c1e:	a318      	add	r3, pc, #96	@ (adr r3, 8006c80 <__ieee754_atan2+0x158>)
 8006c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c24:	e014      	b.n	8006c50 <__ieee754_atan2+0x128>
 8006c26:	a118      	add	r1, pc, #96	@ (adr r1, 8006c88 <__ieee754_atan2+0x160>)
 8006c28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c2c:	e7ec      	b.n	8006c08 <__ieee754_atan2+0xe0>
 8006c2e:	2000      	movs	r0, #0
 8006c30:	2100      	movs	r1, #0
 8006c32:	e7e9      	b.n	8006c08 <__ieee754_atan2+0xe0>
 8006c34:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006c38:	4619      	mov	r1, r3
 8006c3a:	e794      	b.n	8006b66 <__ieee754_atan2+0x3e>
 8006c3c:	a30e      	add	r3, pc, #56	@ (adr r3, 8006c78 <__ieee754_atan2+0x150>)
 8006c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c42:	f7f9 fb41 	bl	80002c8 <__aeabi_dsub>
 8006c46:	4602      	mov	r2, r0
 8006c48:	460b      	mov	r3, r1
 8006c4a:	a10d      	add	r1, pc, #52	@ (adr r1, 8006c80 <__ieee754_atan2+0x158>)
 8006c4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c50:	f7f9 fb3a 	bl	80002c8 <__aeabi_dsub>
 8006c54:	e787      	b.n	8006b66 <__ieee754_atan2+0x3e>
 8006c56:	a10a      	add	r1, pc, #40	@ (adr r1, 8006c80 <__ieee754_atan2+0x158>)
 8006c58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c5c:	e783      	b.n	8006b66 <__ieee754_atan2+0x3e>
 8006c5e:	a10c      	add	r1, pc, #48	@ (adr r1, 8006c90 <__ieee754_atan2+0x168>)
 8006c60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c64:	e77f      	b.n	8006b66 <__ieee754_atan2+0x3e>
 8006c66:	2000      	movs	r0, #0
 8006c68:	2100      	movs	r1, #0
 8006c6a:	e77c      	b.n	8006b66 <__ieee754_atan2+0x3e>
 8006c6c:	a106      	add	r1, pc, #24	@ (adr r1, 8006c88 <__ieee754_atan2+0x160>)
 8006c6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c72:	e778      	b.n	8006b66 <__ieee754_atan2+0x3e>
 8006c74:	f3af 8000 	nop.w
 8006c78:	33145c07 	.word	0x33145c07
 8006c7c:	3ca1a626 	.word	0x3ca1a626
 8006c80:	54442d18 	.word	0x54442d18
 8006c84:	400921fb 	.word	0x400921fb
 8006c88:	54442d18 	.word	0x54442d18
 8006c8c:	3ff921fb 	.word	0x3ff921fb
 8006c90:	54442d18 	.word	0x54442d18
 8006c94:	3fe921fb 	.word	0x3fe921fb
 8006c98:	08007318 	.word	0x08007318
 8006c9c:	08007300 	.word	0x08007300
 8006ca0:	54442d18 	.word	0x54442d18
 8006ca4:	c00921fb 	.word	0xc00921fb
 8006ca8:	54442d18 	.word	0x54442d18
 8006cac:	bff921fb 	.word	0xbff921fb
 8006cb0:	7ff00000 	.word	0x7ff00000
 8006cb4:	00000000 	.word	0x00000000

08006cb8 <atan>:
 8006cb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cbc:	ec55 4b10 	vmov	r4, r5, d0
 8006cc0:	4bbf      	ldr	r3, [pc, #764]	@ (8006fc0 <atan+0x308>)
 8006cc2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8006cc6:	429e      	cmp	r6, r3
 8006cc8:	46ab      	mov	fp, r5
 8006cca:	d918      	bls.n	8006cfe <atan+0x46>
 8006ccc:	4bbd      	ldr	r3, [pc, #756]	@ (8006fc4 <atan+0x30c>)
 8006cce:	429e      	cmp	r6, r3
 8006cd0:	d801      	bhi.n	8006cd6 <atan+0x1e>
 8006cd2:	d109      	bne.n	8006ce8 <atan+0x30>
 8006cd4:	b144      	cbz	r4, 8006ce8 <atan+0x30>
 8006cd6:	4622      	mov	r2, r4
 8006cd8:	462b      	mov	r3, r5
 8006cda:	4620      	mov	r0, r4
 8006cdc:	4629      	mov	r1, r5
 8006cde:	f7f9 faf5 	bl	80002cc <__adddf3>
 8006ce2:	4604      	mov	r4, r0
 8006ce4:	460d      	mov	r5, r1
 8006ce6:	e006      	b.n	8006cf6 <atan+0x3e>
 8006ce8:	f1bb 0f00 	cmp.w	fp, #0
 8006cec:	f340 812b 	ble.w	8006f46 <atan+0x28e>
 8006cf0:	a597      	add	r5, pc, #604	@ (adr r5, 8006f50 <atan+0x298>)
 8006cf2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006cf6:	ec45 4b10 	vmov	d0, r4, r5
 8006cfa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cfe:	4bb2      	ldr	r3, [pc, #712]	@ (8006fc8 <atan+0x310>)
 8006d00:	429e      	cmp	r6, r3
 8006d02:	d813      	bhi.n	8006d2c <atan+0x74>
 8006d04:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8006d08:	429e      	cmp	r6, r3
 8006d0a:	d80c      	bhi.n	8006d26 <atan+0x6e>
 8006d0c:	a392      	add	r3, pc, #584	@ (adr r3, 8006f58 <atan+0x2a0>)
 8006d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d12:	4620      	mov	r0, r4
 8006d14:	4629      	mov	r1, r5
 8006d16:	f7f9 fad9 	bl	80002cc <__adddf3>
 8006d1a:	4bac      	ldr	r3, [pc, #688]	@ (8006fcc <atan+0x314>)
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f7f9 ff1b 	bl	8000b58 <__aeabi_dcmpgt>
 8006d22:	2800      	cmp	r0, #0
 8006d24:	d1e7      	bne.n	8006cf6 <atan+0x3e>
 8006d26:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8006d2a:	e029      	b.n	8006d80 <atan+0xc8>
 8006d2c:	f000 f95c 	bl	8006fe8 <fabs>
 8006d30:	4ba7      	ldr	r3, [pc, #668]	@ (8006fd0 <atan+0x318>)
 8006d32:	429e      	cmp	r6, r3
 8006d34:	ec55 4b10 	vmov	r4, r5, d0
 8006d38:	f200 80bc 	bhi.w	8006eb4 <atan+0x1fc>
 8006d3c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8006d40:	429e      	cmp	r6, r3
 8006d42:	f200 809e 	bhi.w	8006e82 <atan+0x1ca>
 8006d46:	4622      	mov	r2, r4
 8006d48:	462b      	mov	r3, r5
 8006d4a:	4620      	mov	r0, r4
 8006d4c:	4629      	mov	r1, r5
 8006d4e:	f7f9 fabd 	bl	80002cc <__adddf3>
 8006d52:	4b9e      	ldr	r3, [pc, #632]	@ (8006fcc <atan+0x314>)
 8006d54:	2200      	movs	r2, #0
 8006d56:	f7f9 fab7 	bl	80002c8 <__aeabi_dsub>
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	4606      	mov	r6, r0
 8006d5e:	460f      	mov	r7, r1
 8006d60:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006d64:	4620      	mov	r0, r4
 8006d66:	4629      	mov	r1, r5
 8006d68:	f7f9 fab0 	bl	80002cc <__adddf3>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	460b      	mov	r3, r1
 8006d70:	4630      	mov	r0, r6
 8006d72:	4639      	mov	r1, r7
 8006d74:	f7f9 fd8a 	bl	800088c <__aeabi_ddiv>
 8006d78:	f04f 0a00 	mov.w	sl, #0
 8006d7c:	4604      	mov	r4, r0
 8006d7e:	460d      	mov	r5, r1
 8006d80:	4622      	mov	r2, r4
 8006d82:	462b      	mov	r3, r5
 8006d84:	4620      	mov	r0, r4
 8006d86:	4629      	mov	r1, r5
 8006d88:	f7f9 fc56 	bl	8000638 <__aeabi_dmul>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	460b      	mov	r3, r1
 8006d90:	4680      	mov	r8, r0
 8006d92:	4689      	mov	r9, r1
 8006d94:	f7f9 fc50 	bl	8000638 <__aeabi_dmul>
 8006d98:	a371      	add	r3, pc, #452	@ (adr r3, 8006f60 <atan+0x2a8>)
 8006d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9e:	4606      	mov	r6, r0
 8006da0:	460f      	mov	r7, r1
 8006da2:	f7f9 fc49 	bl	8000638 <__aeabi_dmul>
 8006da6:	a370      	add	r3, pc, #448	@ (adr r3, 8006f68 <atan+0x2b0>)
 8006da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dac:	f7f9 fa8e 	bl	80002cc <__adddf3>
 8006db0:	4632      	mov	r2, r6
 8006db2:	463b      	mov	r3, r7
 8006db4:	f7f9 fc40 	bl	8000638 <__aeabi_dmul>
 8006db8:	a36d      	add	r3, pc, #436	@ (adr r3, 8006f70 <atan+0x2b8>)
 8006dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dbe:	f7f9 fa85 	bl	80002cc <__adddf3>
 8006dc2:	4632      	mov	r2, r6
 8006dc4:	463b      	mov	r3, r7
 8006dc6:	f7f9 fc37 	bl	8000638 <__aeabi_dmul>
 8006dca:	a36b      	add	r3, pc, #428	@ (adr r3, 8006f78 <atan+0x2c0>)
 8006dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd0:	f7f9 fa7c 	bl	80002cc <__adddf3>
 8006dd4:	4632      	mov	r2, r6
 8006dd6:	463b      	mov	r3, r7
 8006dd8:	f7f9 fc2e 	bl	8000638 <__aeabi_dmul>
 8006ddc:	a368      	add	r3, pc, #416	@ (adr r3, 8006f80 <atan+0x2c8>)
 8006dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de2:	f7f9 fa73 	bl	80002cc <__adddf3>
 8006de6:	4632      	mov	r2, r6
 8006de8:	463b      	mov	r3, r7
 8006dea:	f7f9 fc25 	bl	8000638 <__aeabi_dmul>
 8006dee:	a366      	add	r3, pc, #408	@ (adr r3, 8006f88 <atan+0x2d0>)
 8006df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df4:	f7f9 fa6a 	bl	80002cc <__adddf3>
 8006df8:	4642      	mov	r2, r8
 8006dfa:	464b      	mov	r3, r9
 8006dfc:	f7f9 fc1c 	bl	8000638 <__aeabi_dmul>
 8006e00:	a363      	add	r3, pc, #396	@ (adr r3, 8006f90 <atan+0x2d8>)
 8006e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e06:	4680      	mov	r8, r0
 8006e08:	4689      	mov	r9, r1
 8006e0a:	4630      	mov	r0, r6
 8006e0c:	4639      	mov	r1, r7
 8006e0e:	f7f9 fc13 	bl	8000638 <__aeabi_dmul>
 8006e12:	a361      	add	r3, pc, #388	@ (adr r3, 8006f98 <atan+0x2e0>)
 8006e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e18:	f7f9 fa56 	bl	80002c8 <__aeabi_dsub>
 8006e1c:	4632      	mov	r2, r6
 8006e1e:	463b      	mov	r3, r7
 8006e20:	f7f9 fc0a 	bl	8000638 <__aeabi_dmul>
 8006e24:	a35e      	add	r3, pc, #376	@ (adr r3, 8006fa0 <atan+0x2e8>)
 8006e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2a:	f7f9 fa4d 	bl	80002c8 <__aeabi_dsub>
 8006e2e:	4632      	mov	r2, r6
 8006e30:	463b      	mov	r3, r7
 8006e32:	f7f9 fc01 	bl	8000638 <__aeabi_dmul>
 8006e36:	a35c      	add	r3, pc, #368	@ (adr r3, 8006fa8 <atan+0x2f0>)
 8006e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e3c:	f7f9 fa44 	bl	80002c8 <__aeabi_dsub>
 8006e40:	4632      	mov	r2, r6
 8006e42:	463b      	mov	r3, r7
 8006e44:	f7f9 fbf8 	bl	8000638 <__aeabi_dmul>
 8006e48:	a359      	add	r3, pc, #356	@ (adr r3, 8006fb0 <atan+0x2f8>)
 8006e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e4e:	f7f9 fa3b 	bl	80002c8 <__aeabi_dsub>
 8006e52:	4632      	mov	r2, r6
 8006e54:	463b      	mov	r3, r7
 8006e56:	f7f9 fbef 	bl	8000638 <__aeabi_dmul>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	4640      	mov	r0, r8
 8006e60:	4649      	mov	r1, r9
 8006e62:	f7f9 fa33 	bl	80002cc <__adddf3>
 8006e66:	4622      	mov	r2, r4
 8006e68:	462b      	mov	r3, r5
 8006e6a:	f7f9 fbe5 	bl	8000638 <__aeabi_dmul>
 8006e6e:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 8006e72:	4602      	mov	r2, r0
 8006e74:	460b      	mov	r3, r1
 8006e76:	d148      	bne.n	8006f0a <atan+0x252>
 8006e78:	4620      	mov	r0, r4
 8006e7a:	4629      	mov	r1, r5
 8006e7c:	f7f9 fa24 	bl	80002c8 <__aeabi_dsub>
 8006e80:	e72f      	b.n	8006ce2 <atan+0x2a>
 8006e82:	4b52      	ldr	r3, [pc, #328]	@ (8006fcc <atan+0x314>)
 8006e84:	2200      	movs	r2, #0
 8006e86:	4620      	mov	r0, r4
 8006e88:	4629      	mov	r1, r5
 8006e8a:	f7f9 fa1d 	bl	80002c8 <__aeabi_dsub>
 8006e8e:	4b4f      	ldr	r3, [pc, #316]	@ (8006fcc <atan+0x314>)
 8006e90:	4606      	mov	r6, r0
 8006e92:	460f      	mov	r7, r1
 8006e94:	2200      	movs	r2, #0
 8006e96:	4620      	mov	r0, r4
 8006e98:	4629      	mov	r1, r5
 8006e9a:	f7f9 fa17 	bl	80002cc <__adddf3>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	4630      	mov	r0, r6
 8006ea4:	4639      	mov	r1, r7
 8006ea6:	f7f9 fcf1 	bl	800088c <__aeabi_ddiv>
 8006eaa:	f04f 0a01 	mov.w	sl, #1
 8006eae:	4604      	mov	r4, r0
 8006eb0:	460d      	mov	r5, r1
 8006eb2:	e765      	b.n	8006d80 <atan+0xc8>
 8006eb4:	4b47      	ldr	r3, [pc, #284]	@ (8006fd4 <atan+0x31c>)
 8006eb6:	429e      	cmp	r6, r3
 8006eb8:	d21c      	bcs.n	8006ef4 <atan+0x23c>
 8006eba:	4b47      	ldr	r3, [pc, #284]	@ (8006fd8 <atan+0x320>)
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	4629      	mov	r1, r5
 8006ec2:	f7f9 fa01 	bl	80002c8 <__aeabi_dsub>
 8006ec6:	4b44      	ldr	r3, [pc, #272]	@ (8006fd8 <atan+0x320>)
 8006ec8:	4606      	mov	r6, r0
 8006eca:	460f      	mov	r7, r1
 8006ecc:	2200      	movs	r2, #0
 8006ece:	4620      	mov	r0, r4
 8006ed0:	4629      	mov	r1, r5
 8006ed2:	f7f9 fbb1 	bl	8000638 <__aeabi_dmul>
 8006ed6:	4b3d      	ldr	r3, [pc, #244]	@ (8006fcc <atan+0x314>)
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f7f9 f9f7 	bl	80002cc <__adddf3>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	460b      	mov	r3, r1
 8006ee2:	4630      	mov	r0, r6
 8006ee4:	4639      	mov	r1, r7
 8006ee6:	f7f9 fcd1 	bl	800088c <__aeabi_ddiv>
 8006eea:	f04f 0a02 	mov.w	sl, #2
 8006eee:	4604      	mov	r4, r0
 8006ef0:	460d      	mov	r5, r1
 8006ef2:	e745      	b.n	8006d80 <atan+0xc8>
 8006ef4:	4622      	mov	r2, r4
 8006ef6:	462b      	mov	r3, r5
 8006ef8:	4938      	ldr	r1, [pc, #224]	@ (8006fdc <atan+0x324>)
 8006efa:	2000      	movs	r0, #0
 8006efc:	f7f9 fcc6 	bl	800088c <__aeabi_ddiv>
 8006f00:	f04f 0a03 	mov.w	sl, #3
 8006f04:	4604      	mov	r4, r0
 8006f06:	460d      	mov	r5, r1
 8006f08:	e73a      	b.n	8006d80 <atan+0xc8>
 8006f0a:	4b35      	ldr	r3, [pc, #212]	@ (8006fe0 <atan+0x328>)
 8006f0c:	4e35      	ldr	r6, [pc, #212]	@ (8006fe4 <atan+0x32c>)
 8006f0e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f16:	f7f9 f9d7 	bl	80002c8 <__aeabi_dsub>
 8006f1a:	4622      	mov	r2, r4
 8006f1c:	462b      	mov	r3, r5
 8006f1e:	f7f9 f9d3 	bl	80002c8 <__aeabi_dsub>
 8006f22:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8006f26:	4602      	mov	r2, r0
 8006f28:	460b      	mov	r3, r1
 8006f2a:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006f2e:	f7f9 f9cb 	bl	80002c8 <__aeabi_dsub>
 8006f32:	f1bb 0f00 	cmp.w	fp, #0
 8006f36:	4604      	mov	r4, r0
 8006f38:	460d      	mov	r5, r1
 8006f3a:	f6bf aedc 	bge.w	8006cf6 <atan+0x3e>
 8006f3e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006f42:	461d      	mov	r5, r3
 8006f44:	e6d7      	b.n	8006cf6 <atan+0x3e>
 8006f46:	a51c      	add	r5, pc, #112	@ (adr r5, 8006fb8 <atan+0x300>)
 8006f48:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006f4c:	e6d3      	b.n	8006cf6 <atan+0x3e>
 8006f4e:	bf00      	nop
 8006f50:	54442d18 	.word	0x54442d18
 8006f54:	3ff921fb 	.word	0x3ff921fb
 8006f58:	8800759c 	.word	0x8800759c
 8006f5c:	7e37e43c 	.word	0x7e37e43c
 8006f60:	e322da11 	.word	0xe322da11
 8006f64:	3f90ad3a 	.word	0x3f90ad3a
 8006f68:	24760deb 	.word	0x24760deb
 8006f6c:	3fa97b4b 	.word	0x3fa97b4b
 8006f70:	a0d03d51 	.word	0xa0d03d51
 8006f74:	3fb10d66 	.word	0x3fb10d66
 8006f78:	c54c206e 	.word	0xc54c206e
 8006f7c:	3fb745cd 	.word	0x3fb745cd
 8006f80:	920083ff 	.word	0x920083ff
 8006f84:	3fc24924 	.word	0x3fc24924
 8006f88:	5555550d 	.word	0x5555550d
 8006f8c:	3fd55555 	.word	0x3fd55555
 8006f90:	2c6a6c2f 	.word	0x2c6a6c2f
 8006f94:	bfa2b444 	.word	0xbfa2b444
 8006f98:	52defd9a 	.word	0x52defd9a
 8006f9c:	3fadde2d 	.word	0x3fadde2d
 8006fa0:	af749a6d 	.word	0xaf749a6d
 8006fa4:	3fb3b0f2 	.word	0x3fb3b0f2
 8006fa8:	fe231671 	.word	0xfe231671
 8006fac:	3fbc71c6 	.word	0x3fbc71c6
 8006fb0:	9998ebc4 	.word	0x9998ebc4
 8006fb4:	3fc99999 	.word	0x3fc99999
 8006fb8:	54442d18 	.word	0x54442d18
 8006fbc:	bff921fb 	.word	0xbff921fb
 8006fc0:	440fffff 	.word	0x440fffff
 8006fc4:	7ff00000 	.word	0x7ff00000
 8006fc8:	3fdbffff 	.word	0x3fdbffff
 8006fcc:	3ff00000 	.word	0x3ff00000
 8006fd0:	3ff2ffff 	.word	0x3ff2ffff
 8006fd4:	40038000 	.word	0x40038000
 8006fd8:	3ff80000 	.word	0x3ff80000
 8006fdc:	bff00000 	.word	0xbff00000
 8006fe0:	08007330 	.word	0x08007330
 8006fe4:	08007350 	.word	0x08007350

08006fe8 <fabs>:
 8006fe8:	ec51 0b10 	vmov	r0, r1, d0
 8006fec:	4602      	mov	r2, r0
 8006fee:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006ff2:	ec43 2b10 	vmov	d0, r2, r3
 8006ff6:	4770      	bx	lr

08006ff8 <_init>:
 8006ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ffa:	bf00      	nop
 8006ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ffe:	bc08      	pop	{r3}
 8007000:	469e      	mov	lr, r3
 8007002:	4770      	bx	lr

08007004 <_fini>:
 8007004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007006:	bf00      	nop
 8007008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800700a:	bc08      	pop	{r3}
 800700c:	469e      	mov	lr, r3
 800700e:	4770      	bx	lr
