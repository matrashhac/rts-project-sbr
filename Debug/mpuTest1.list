
mpuTest1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065e8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000348  080067b8  080067b8  000077b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b00  08006b00  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  08006b00  08006b00  00007b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b08  08006b08  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b08  08006b08  00007b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006b0c  08006b0c  00007b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006b10  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b74  20000060  08006b70  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bd4  08006b70  00008bd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000107ec  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021cd  00000000  00000000  0001887c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f40  00000000  00000000  0001aa50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c13  00000000  00000000  0001b990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022bf8  00000000  00000000  0001c5a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012f85  00000000  00000000  0003f19b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d41d0  00000000  00000000  00052120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001262f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048f8  00000000  00000000  00126334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0012ac2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080067a0 	.word	0x080067a0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	080067a0 	.word	0x080067a0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2f>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b74:	bf24      	itt	cs
 8000b76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b7e:	d90d      	bls.n	8000b9c <__aeabi_d2f+0x30>
 8000b80:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b8c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b94:	bf08      	it	eq
 8000b96:	f020 0001 	biceq.w	r0, r0, #1
 8000b9a:	4770      	bx	lr
 8000b9c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ba0:	d121      	bne.n	8000be6 <__aeabi_d2f+0x7a>
 8000ba2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ba6:	bfbc      	itt	lt
 8000ba8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bac:	4770      	bxlt	lr
 8000bae:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bb2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb6:	f1c2 0218 	rsb	r2, r2, #24
 8000bba:	f1c2 0c20 	rsb	ip, r2, #32
 8000bbe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc6:	bf18      	it	ne
 8000bc8:	f040 0001 	orrne.w	r0, r0, #1
 8000bcc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd8:	ea40 000c 	orr.w	r0, r0, ip
 8000bdc:	fa23 f302 	lsr.w	r3, r3, r2
 8000be0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be4:	e7cc      	b.n	8000b80 <__aeabi_d2f+0x14>
 8000be6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bea:	d107      	bne.n	8000bfc <__aeabi_d2f+0x90>
 8000bec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bf6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bfa:	4770      	bxne	lr
 8000bfc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c00:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c04:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <__aeabi_uldivmod>:
 8000c0c:	b953      	cbnz	r3, 8000c24 <__aeabi_uldivmod+0x18>
 8000c0e:	b94a      	cbnz	r2, 8000c24 <__aeabi_uldivmod+0x18>
 8000c10:	2900      	cmp	r1, #0
 8000c12:	bf08      	it	eq
 8000c14:	2800      	cmpeq	r0, #0
 8000c16:	bf1c      	itt	ne
 8000c18:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c1c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c20:	f000 b96a 	b.w	8000ef8 <__aeabi_idiv0>
 8000c24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c2c:	f000 f806 	bl	8000c3c <__udivmoddi4>
 8000c30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c38:	b004      	add	sp, #16
 8000c3a:	4770      	bx	lr

08000c3c <__udivmoddi4>:
 8000c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c40:	9d08      	ldr	r5, [sp, #32]
 8000c42:	460c      	mov	r4, r1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d14e      	bne.n	8000ce6 <__udivmoddi4+0xaa>
 8000c48:	4694      	mov	ip, r2
 8000c4a:	458c      	cmp	ip, r1
 8000c4c:	4686      	mov	lr, r0
 8000c4e:	fab2 f282 	clz	r2, r2
 8000c52:	d962      	bls.n	8000d1a <__udivmoddi4+0xde>
 8000c54:	b14a      	cbz	r2, 8000c6a <__udivmoddi4+0x2e>
 8000c56:	f1c2 0320 	rsb	r3, r2, #32
 8000c5a:	4091      	lsls	r1, r2
 8000c5c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c64:	4319      	orrs	r1, r3
 8000c66:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6e:	fa1f f68c 	uxth.w	r6, ip
 8000c72:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c76:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c7a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c82:	fb04 f106 	mul.w	r1, r4, r6
 8000c86:	4299      	cmp	r1, r3
 8000c88:	d90a      	bls.n	8000ca0 <__udivmoddi4+0x64>
 8000c8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c92:	f080 8112 	bcs.w	8000eba <__udivmoddi4+0x27e>
 8000c96:	4299      	cmp	r1, r3
 8000c98:	f240 810f 	bls.w	8000eba <__udivmoddi4+0x27e>
 8000c9c:	3c02      	subs	r4, #2
 8000c9e:	4463      	add	r3, ip
 8000ca0:	1a59      	subs	r1, r3, r1
 8000ca2:	fa1f f38e 	uxth.w	r3, lr
 8000ca6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000caa:	fb07 1110 	mls	r1, r7, r0, r1
 8000cae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb2:	fb00 f606 	mul.w	r6, r0, r6
 8000cb6:	429e      	cmp	r6, r3
 8000cb8:	d90a      	bls.n	8000cd0 <__udivmoddi4+0x94>
 8000cba:	eb1c 0303 	adds.w	r3, ip, r3
 8000cbe:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000cc2:	f080 80fc 	bcs.w	8000ebe <__udivmoddi4+0x282>
 8000cc6:	429e      	cmp	r6, r3
 8000cc8:	f240 80f9 	bls.w	8000ebe <__udivmoddi4+0x282>
 8000ccc:	4463      	add	r3, ip
 8000cce:	3802      	subs	r0, #2
 8000cd0:	1b9b      	subs	r3, r3, r6
 8000cd2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	b11d      	cbz	r5, 8000ce2 <__udivmoddi4+0xa6>
 8000cda:	40d3      	lsrs	r3, r2
 8000cdc:	2200      	movs	r2, #0
 8000cde:	e9c5 3200 	strd	r3, r2, [r5]
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d905      	bls.n	8000cf6 <__udivmoddi4+0xba>
 8000cea:	b10d      	cbz	r5, 8000cf0 <__udivmoddi4+0xb4>
 8000cec:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4608      	mov	r0, r1
 8000cf4:	e7f5      	b.n	8000ce2 <__udivmoddi4+0xa6>
 8000cf6:	fab3 f183 	clz	r1, r3
 8000cfa:	2900      	cmp	r1, #0
 8000cfc:	d146      	bne.n	8000d8c <__udivmoddi4+0x150>
 8000cfe:	42a3      	cmp	r3, r4
 8000d00:	d302      	bcc.n	8000d08 <__udivmoddi4+0xcc>
 8000d02:	4290      	cmp	r0, r2
 8000d04:	f0c0 80f0 	bcc.w	8000ee8 <__udivmoddi4+0x2ac>
 8000d08:	1a86      	subs	r6, r0, r2
 8000d0a:	eb64 0303 	sbc.w	r3, r4, r3
 8000d0e:	2001      	movs	r0, #1
 8000d10:	2d00      	cmp	r5, #0
 8000d12:	d0e6      	beq.n	8000ce2 <__udivmoddi4+0xa6>
 8000d14:	e9c5 6300 	strd	r6, r3, [r5]
 8000d18:	e7e3      	b.n	8000ce2 <__udivmoddi4+0xa6>
 8000d1a:	2a00      	cmp	r2, #0
 8000d1c:	f040 8090 	bne.w	8000e40 <__udivmoddi4+0x204>
 8000d20:	eba1 040c 	sub.w	r4, r1, ip
 8000d24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d28:	fa1f f78c 	uxth.w	r7, ip
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d36:	fb08 4416 	mls	r4, r8, r6, r4
 8000d3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d3e:	fb07 f006 	mul.w	r0, r7, r6
 8000d42:	4298      	cmp	r0, r3
 8000d44:	d908      	bls.n	8000d58 <__udivmoddi4+0x11c>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d4e:	d202      	bcs.n	8000d56 <__udivmoddi4+0x11a>
 8000d50:	4298      	cmp	r0, r3
 8000d52:	f200 80cd 	bhi.w	8000ef0 <__udivmoddi4+0x2b4>
 8000d56:	4626      	mov	r6, r4
 8000d58:	1a1c      	subs	r4, r3, r0
 8000d5a:	fa1f f38e 	uxth.w	r3, lr
 8000d5e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d62:	fb08 4410 	mls	r4, r8, r0, r4
 8000d66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d6a:	fb00 f707 	mul.w	r7, r0, r7
 8000d6e:	429f      	cmp	r7, r3
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x148>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x146>
 8000d7c:	429f      	cmp	r7, r3
 8000d7e:	f200 80b0 	bhi.w	8000ee2 <__udivmoddi4+0x2a6>
 8000d82:	4620      	mov	r0, r4
 8000d84:	1bdb      	subs	r3, r3, r7
 8000d86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d8a:	e7a5      	b.n	8000cd8 <__udivmoddi4+0x9c>
 8000d8c:	f1c1 0620 	rsb	r6, r1, #32
 8000d90:	408b      	lsls	r3, r1
 8000d92:	fa22 f706 	lsr.w	r7, r2, r6
 8000d96:	431f      	orrs	r7, r3
 8000d98:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d9c:	fa04 f301 	lsl.w	r3, r4, r1
 8000da0:	ea43 030c 	orr.w	r3, r3, ip
 8000da4:	40f4      	lsrs	r4, r6
 8000da6:	fa00 f801 	lsl.w	r8, r0, r1
 8000daa:	0c38      	lsrs	r0, r7, #16
 8000dac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000db0:	fbb4 fef0 	udiv	lr, r4, r0
 8000db4:	fa1f fc87 	uxth.w	ip, r7
 8000db8:	fb00 441e 	mls	r4, r0, lr, r4
 8000dbc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc0:	fb0e f90c 	mul.w	r9, lr, ip
 8000dc4:	45a1      	cmp	r9, r4
 8000dc6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dca:	d90a      	bls.n	8000de2 <__udivmoddi4+0x1a6>
 8000dcc:	193c      	adds	r4, r7, r4
 8000dce:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dd2:	f080 8084 	bcs.w	8000ede <__udivmoddi4+0x2a2>
 8000dd6:	45a1      	cmp	r9, r4
 8000dd8:	f240 8081 	bls.w	8000ede <__udivmoddi4+0x2a2>
 8000ddc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000de0:	443c      	add	r4, r7
 8000de2:	eba4 0409 	sub.w	r4, r4, r9
 8000de6:	fa1f f983 	uxth.w	r9, r3
 8000dea:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dee:	fb00 4413 	mls	r4, r0, r3, r4
 8000df2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000df6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dfa:	45a4      	cmp	ip, r4
 8000dfc:	d907      	bls.n	8000e0e <__udivmoddi4+0x1d2>
 8000dfe:	193c      	adds	r4, r7, r4
 8000e00:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e04:	d267      	bcs.n	8000ed6 <__udivmoddi4+0x29a>
 8000e06:	45a4      	cmp	ip, r4
 8000e08:	d965      	bls.n	8000ed6 <__udivmoddi4+0x29a>
 8000e0a:	3b02      	subs	r3, #2
 8000e0c:	443c      	add	r4, r7
 8000e0e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e12:	fba0 9302 	umull	r9, r3, r0, r2
 8000e16:	eba4 040c 	sub.w	r4, r4, ip
 8000e1a:	429c      	cmp	r4, r3
 8000e1c:	46ce      	mov	lr, r9
 8000e1e:	469c      	mov	ip, r3
 8000e20:	d351      	bcc.n	8000ec6 <__udivmoddi4+0x28a>
 8000e22:	d04e      	beq.n	8000ec2 <__udivmoddi4+0x286>
 8000e24:	b155      	cbz	r5, 8000e3c <__udivmoddi4+0x200>
 8000e26:	ebb8 030e 	subs.w	r3, r8, lr
 8000e2a:	eb64 040c 	sbc.w	r4, r4, ip
 8000e2e:	fa04 f606 	lsl.w	r6, r4, r6
 8000e32:	40cb      	lsrs	r3, r1
 8000e34:	431e      	orrs	r6, r3
 8000e36:	40cc      	lsrs	r4, r1
 8000e38:	e9c5 6400 	strd	r6, r4, [r5]
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	e750      	b.n	8000ce2 <__udivmoddi4+0xa6>
 8000e40:	f1c2 0320 	rsb	r3, r2, #32
 8000e44:	fa20 f103 	lsr.w	r1, r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa24 f303 	lsr.w	r3, r4, r3
 8000e50:	4094      	lsls	r4, r2
 8000e52:	430c      	orrs	r4, r1
 8000e54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e58:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e5c:	fa1f f78c 	uxth.w	r7, ip
 8000e60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e64:	fb08 3110 	mls	r1, r8, r0, r3
 8000e68:	0c23      	lsrs	r3, r4, #16
 8000e6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e6e:	fb00 f107 	mul.w	r1, r0, r7
 8000e72:	4299      	cmp	r1, r3
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x24c>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e7e:	d22c      	bcs.n	8000eda <__udivmoddi4+0x29e>
 8000e80:	4299      	cmp	r1, r3
 8000e82:	d92a      	bls.n	8000eda <__udivmoddi4+0x29e>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1a5b      	subs	r3, r3, r1
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e90:	fb08 3311 	mls	r3, r8, r1, r3
 8000e94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e98:	fb01 f307 	mul.w	r3, r1, r7
 8000e9c:	42a3      	cmp	r3, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x276>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ea8:	d213      	bcs.n	8000ed2 <__udivmoddi4+0x296>
 8000eaa:	42a3      	cmp	r3, r4
 8000eac:	d911      	bls.n	8000ed2 <__udivmoddi4+0x296>
 8000eae:	3902      	subs	r1, #2
 8000eb0:	4464      	add	r4, ip
 8000eb2:	1ae4      	subs	r4, r4, r3
 8000eb4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000eb8:	e739      	b.n	8000d2e <__udivmoddi4+0xf2>
 8000eba:	4604      	mov	r4, r0
 8000ebc:	e6f0      	b.n	8000ca0 <__udivmoddi4+0x64>
 8000ebe:	4608      	mov	r0, r1
 8000ec0:	e706      	b.n	8000cd0 <__udivmoddi4+0x94>
 8000ec2:	45c8      	cmp	r8, r9
 8000ec4:	d2ae      	bcs.n	8000e24 <__udivmoddi4+0x1e8>
 8000ec6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eca:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ece:	3801      	subs	r0, #1
 8000ed0:	e7a8      	b.n	8000e24 <__udivmoddi4+0x1e8>
 8000ed2:	4631      	mov	r1, r6
 8000ed4:	e7ed      	b.n	8000eb2 <__udivmoddi4+0x276>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	e799      	b.n	8000e0e <__udivmoddi4+0x1d2>
 8000eda:	4630      	mov	r0, r6
 8000edc:	e7d4      	b.n	8000e88 <__udivmoddi4+0x24c>
 8000ede:	46d6      	mov	lr, sl
 8000ee0:	e77f      	b.n	8000de2 <__udivmoddi4+0x1a6>
 8000ee2:	4463      	add	r3, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e74d      	b.n	8000d84 <__udivmoddi4+0x148>
 8000ee8:	4606      	mov	r6, r0
 8000eea:	4623      	mov	r3, r4
 8000eec:	4608      	mov	r0, r1
 8000eee:	e70f      	b.n	8000d10 <__udivmoddi4+0xd4>
 8000ef0:	3e02      	subs	r6, #2
 8000ef2:	4463      	add	r3, ip
 8000ef4:	e730      	b.n	8000d58 <__udivmoddi4+0x11c>
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <myComfyPrint>:

extern UART_HandleTypeDef huart2;

uint8_t buff[2048] = { 0 };

void myComfyPrint(const char* string){
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	strncpy((char*) buff, string, sizeof(buff));
 8000f04:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f08:	6879      	ldr	r1, [r7, #4]
 8000f0a:	4809      	ldr	r0, [pc, #36]	@ (8000f30 <myComfyPrint+0x34>)
 8000f0c:	f004 fd52 	bl	80059b4 <strncpy>
	HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8000f10:	4807      	ldr	r0, [pc, #28]	@ (8000f30 <myComfyPrint+0x34>)
 8000f12:	f7ff f97d 	bl	8000210 <strlen>
 8000f16:	4603      	mov	r3, r0
 8000f18:	b29a      	uxth	r2, r3
 8000f1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f1e:	4904      	ldr	r1, [pc, #16]	@ (8000f30 <myComfyPrint+0x34>)
 8000f20:	4804      	ldr	r0, [pc, #16]	@ (8000f34 <myComfyPrint+0x38>)
 8000f22:	f004 f963 	bl	80051ec <HAL_UART_Transmit>
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	2000007c 	.word	0x2000007c
 8000f34:	20000918 	.word	0x20000918

08000f38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f38:	b5b0      	push	{r4, r5, r7, lr}
 8000f3a:	f5ad 6d15 	sub.w	sp, sp, #2384	@ 0x950
 8000f3e:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f40:	f001 f9a8 	bl	8002294 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f44:	f000 fbe2 	bl	800170c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f48:	f000 fd0a 	bl	8001960 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f4c:	f000 fcde 	bl	800190c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000f50:	f000 fc4a 	bl	80017e8 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000f54:	f000 fc76 	bl	8001844 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  //initialize mpu6050
  mpu6050_init();
 8000f58:	f000 fde8 	bl	8001b2c <mpu6050_init>

  //initialize motors
  motor_init();
 8000f5c:	f000 fd9a 	bl	8001a94 <motor_init>



  //while loop to wait until robot is in upright position
  //calculate angle from acceleration values
  float acc_angle_temp=1;
 8000f60:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000f64:	f607 1244 	addw	r2, r7, #2372	@ 0x944
 8000f68:	6013      	str	r3, [r2, #0]
  static uint8_t done_already = 0;
  char myString[256] = { 0 };
 8000f6a:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 8000f6e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	3304      	adds	r3, #4
 8000f78:	22fc      	movs	r2, #252	@ 0xfc
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f004 fd11 	bl	80059a4 <memset>

  mpu6050_read(&mpu_values);
 8000f82:	488b      	ldr	r0, [pc, #556]	@ (80011b0 <main+0x278>)
 8000f84:	f000 ff42 	bl	8001e0c <mpu6050_read>

  if(done_already == 0){
 8000f88:	4b8a      	ldr	r3, [pc, #552]	@ (80011b4 <main+0x27c>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d172      	bne.n	8001076 <main+0x13e>
	  while(acc_angle_temp != 0){
 8000f90:	e062      	b.n	8001058 <main+0x120>
		  acc_angle_temp = atan2(mpu_values.acc_x, mpu_values.acc_z)*RAD_TO_DEG;	//*(180/M_PI) to convert from radian to degree
 8000f92:	4b87      	ldr	r3, [pc, #540]	@ (80011b0 <main+0x278>)
 8000f94:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff fae3 	bl	8000564 <__aeabi_i2d>
 8000f9e:	4604      	mov	r4, r0
 8000fa0:	460d      	mov	r5, r1
 8000fa2:	4b83      	ldr	r3, [pc, #524]	@ (80011b0 <main+0x278>)
 8000fa4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fadb 	bl	8000564 <__aeabi_i2d>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	ec43 2b11 	vmov	d1, r2, r3
 8000fb6:	ec45 4b10 	vmov	d0, r4, r5
 8000fba:	f005 f987 	bl	80062cc <atan2>
 8000fbe:	ec51 0b10 	vmov	r0, r1, d0
 8000fc2:	f04f 0200 	mov.w	r2, #0
 8000fc6:	4b7c      	ldr	r3, [pc, #496]	@ (80011b8 <main+0x280>)
 8000fc8:	f7ff fb36 	bl	8000638 <__aeabi_dmul>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	460b      	mov	r3, r1
 8000fd0:	4610      	mov	r0, r2
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	a374      	add	r3, pc, #464	@ (adr r3, 80011a8 <main+0x270>)
 8000fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fda:	f7ff fc57 	bl	800088c <__aeabi_ddiv>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	4610      	mov	r0, r2
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f7ff fdc1 	bl	8000b6c <__aeabi_d2f>
 8000fea:	4603      	mov	r3, r0
 8000fec:	f607 1244 	addw	r2, r7, #2372	@ 0x944
 8000ff0:	6013      	str	r3, [r2, #0]
		  if(isnan(acc_angle_temp)){
 8000ff2:	f607 1344 	addw	r3, r7, #2372	@ 0x944
 8000ff6:	ed93 7a00 	vldr	s14, [r3]
 8000ffa:	f607 1344 	addw	r3, r7, #2372	@ 0x944
 8000ffe:	edd3 7a00 	vldr	s15, [r3]
 8001002:	eeb4 7a67 	vcmp.f32	s14, s15
 8001006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800100a:	d70b      	bvc.n	8001024 <main+0xec>
			  sprintf((char*) myString, "acc_angle_temp is NaN\r\n");
 800100c:	f607 030c 	addw	r3, r7, #2060	@ 0x80c
 8001010:	496a      	ldr	r1, [pc, #424]	@ (80011bc <main+0x284>)
 8001012:	4618      	mov	r0, r3
 8001014:	f004 fca6 	bl	8005964 <siprintf>
			  myComfyPrint(myString);
 8001018:	f607 030c 	addw	r3, r7, #2060	@ 0x80c
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff ff6d 	bl	8000efc <myComfyPrint>
 8001022:	e016      	b.n	8001052 <main+0x11a>
		  }
		  else{
			  sprintf((char*) myString, "acc_angle_temp*100 = %d\r\n", (int) (acc_angle_temp*100));	//apparently floating numbers are disabled in print funcitons by defautl if using newlib
 8001024:	f607 1344 	addw	r3, r7, #2372	@ 0x944
 8001028:	edd3 7a00 	vldr	s15, [r3]
 800102c:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 80011c0 <main+0x288>
 8001030:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001034:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001038:	f607 030c 	addw	r3, r7, #2060	@ 0x80c
 800103c:	ee17 2a90 	vmov	r2, s15
 8001040:	4960      	ldr	r1, [pc, #384]	@ (80011c4 <main+0x28c>)
 8001042:	4618      	mov	r0, r3
 8001044:	f004 fc8e 	bl	8005964 <siprintf>
			  myComfyPrint(myString);
 8001048:	f607 030c 	addw	r3, r7, #2060	@ 0x80c
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff55 	bl	8000efc <myComfyPrint>
		  }

		  mpu6050_read(&mpu_values);
 8001052:	4857      	ldr	r0, [pc, #348]	@ (80011b0 <main+0x278>)
 8001054:	f000 feda 	bl	8001e0c <mpu6050_read>
	  while(acc_angle_temp != 0){
 8001058:	f607 1344 	addw	r3, r7, #2372	@ 0x944
 800105c:	edd3 7a00 	vldr	s15, [r3]
 8001060:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001068:	d193      	bne.n	8000f92 <main+0x5a>
	  }
	  done_already = 1;
 800106a:	4b52      	ldr	r3, [pc, #328]	@ (80011b4 <main+0x27c>)
 800106c:	2201      	movs	r2, #1
 800106e:	701a      	strb	r2, [r3, #0]
	  mpu6050_read(&mpu_values);
 8001070:	484f      	ldr	r0, [pc, #316]	@ (80011b0 <main+0x278>)
 8001072:	f000 fecb 	bl	8001e0c <mpu6050_read>
  }
  sprintf((char*) myString, "Acceleration X = %d\r\nAcceleration Y = %d\r\nAcceleration Z = %d\r\n", mpu_values.acc_x, mpu_values.acc_y, mpu_values.acc_z);
 8001076:	4b4e      	ldr	r3, [pc, #312]	@ (80011b0 <main+0x278>)
 8001078:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800107c:	461a      	mov	r2, r3
 800107e:	4b4c      	ldr	r3, [pc, #304]	@ (80011b0 <main+0x278>)
 8001080:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001084:	4619      	mov	r1, r3
 8001086:	4b4a      	ldr	r3, [pc, #296]	@ (80011b0 <main+0x278>)
 8001088:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800108c:	f607 000c 	addw	r0, r7, #2060	@ 0x80c
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	460b      	mov	r3, r1
 8001094:	494c      	ldr	r1, [pc, #304]	@ (80011c8 <main+0x290>)
 8001096:	f004 fc65 	bl	8005964 <siprintf>
  myComfyPrint(myString);
 800109a:	f607 030c 	addw	r3, r7, #2060	@ 0x80c
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ff2c 	bl	8000efc <myComfyPrint>
  sprintf((char*) myString, "Gyroscope X = %d\r\nGyroscope Y = %d\r\nGyroscope Z = %d\r\n", mpu_values.gyro_x, mpu_values.gyro_y, mpu_values.gyro_z);
 80010a4:	4b42      	ldr	r3, [pc, #264]	@ (80011b0 <main+0x278>)
 80010a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010aa:	461a      	mov	r2, r3
 80010ac:	4b40      	ldr	r3, [pc, #256]	@ (80011b0 <main+0x278>)
 80010ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010b2:	4619      	mov	r1, r3
 80010b4:	4b3e      	ldr	r3, [pc, #248]	@ (80011b0 <main+0x278>)
 80010b6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010ba:	f607 000c 	addw	r0, r7, #2060	@ 0x80c
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	460b      	mov	r3, r1
 80010c2:	4942      	ldr	r1, [pc, #264]	@ (80011cc <main+0x294>)
 80010c4:	f004 fc4e 	bl	8005964 <siprintf>
  myComfyPrint(myString);
 80010c8:	f607 030c 	addw	r3, r7, #2060	@ 0x80c
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff ff15 	bl	8000efc <myComfyPrint>
	  //////////////////////////////////
	  //read values from mpu6050 BEGIN//
	  //////////////////////////////////

	  mpu6050_values_t mpu_values;
	  mpu6050_read(&mpu_values);
 80010d2:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 80010d6:	4618      	mov	r0, r3
 80010d8:	f000 fe98 	bl	8001e0c <mpu6050_read>
	  sprintf((char*) myString, /*sizeof(buff),*/ "Acceleration X = %d\r\nAcceleration Y = %d\r\nAcceleration Z = %d\r\n", mpu_values.acc_x, mpu_values.acc_y, mpu_values.acc_z);
 80010dc:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 80010e0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80010e4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80010e8:	461a      	mov	r2, r3
 80010ea:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 80010ee:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80010f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80010f6:	4619      	mov	r1, r3
 80010f8:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 80010fc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001100:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001104:	4638      	mov	r0, r7
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	460b      	mov	r3, r1
 800110a:	492f      	ldr	r1, [pc, #188]	@ (80011c8 <main+0x290>)
 800110c:	f004 fc2a 	bl	8005964 <siprintf>
	  myComfyPrint(myString);
 8001110:	463b      	mov	r3, r7
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff fef2 	bl	8000efc <myComfyPrint>
	  sprintf((char*) myString, /*sizeof(buff),*/ "Gyroscope X = %d\r\nGyroscope Y = %d\r\nGyroscope Z = %d\r\n", mpu_values.gyro_x, mpu_values.gyro_y, mpu_values.gyro_z);
 8001118:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 800111c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001120:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001124:	461a      	mov	r2, r3
 8001126:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 800112a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800112e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001132:	4619      	mov	r1, r3
 8001134:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 8001138:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800113c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001140:	4638      	mov	r0, r7
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	460b      	mov	r3, r1
 8001146:	4921      	ldr	r1, [pc, #132]	@ (80011cc <main+0x294>)
 8001148:	f004 fc0c 	bl	8005964 <siprintf>
	  myComfyPrint(myString);
 800114c:	463b      	mov	r3, r7
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff fed4 	bl	8000efc <myComfyPrint>
	  //some debug stuff 1 BEGIN//
	  ////////////////////////////

	  static int16_t counter = 0;
	  static int16_t myArr[25] = { 0 };
	  myArr[counter] = mpu_values.gyro_y;
 8001154:	4b1e      	ldr	r3, [pc, #120]	@ (80011d0 <main+0x298>)
 8001156:	f9b3 3000 	ldrsh.w	r3, [r3]
 800115a:	461a      	mov	r2, r3
 800115c:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 8001160:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001164:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8001168:	4b1a      	ldr	r3, [pc, #104]	@ (80011d4 <main+0x29c>)
 800116a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  counter = (counter+1) % 25;
 800116e:	4b18      	ldr	r3, [pc, #96]	@ (80011d0 <main+0x298>)
 8001170:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001174:	1c5a      	adds	r2, r3, #1
 8001176:	4b18      	ldr	r3, [pc, #96]	@ (80011d8 <main+0x2a0>)
 8001178:	fb83 1302 	smull	r1, r3, r3, r2
 800117c:	10d9      	asrs	r1, r3, #3
 800117e:	17d3      	asrs	r3, r2, #31
 8001180:	1ac9      	subs	r1, r1, r3
 8001182:	460b      	mov	r3, r1
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	440b      	add	r3, r1
 8001188:	0099      	lsls	r1, r3, #2
 800118a:	440b      	add	r3, r1
 800118c:	1ad1      	subs	r1, r2, r3
 800118e:	b20a      	sxth	r2, r1
 8001190:	4b0f      	ldr	r3, [pc, #60]	@ (80011d0 <main+0x298>)
 8001192:	801a      	strh	r2, [r3, #0]
	  int32_t sum = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	f8c7 3940 	str.w	r3, [r7, #2368]	@ 0x940
	  for(int i = 0; i<25; i++){
 800119a:	2300      	movs	r3, #0
 800119c:	f8c7 393c 	str.w	r3, [r7, #2364]	@ 0x93c
 80011a0:	e02c      	b.n	80011fc <main+0x2c4>
 80011a2:	bf00      	nop
 80011a4:	f3af 8000 	nop.w
 80011a8:	54442d18 	.word	0x54442d18
 80011ac:	400921fb 	.word	0x400921fb
 80011b0:	20000960 	.word	0x20000960
 80011b4:	2000096c 	.word	0x2000096c
 80011b8:	40668000 	.word	0x40668000
 80011bc:	080067b8 	.word	0x080067b8
 80011c0:	42c80000 	.word	0x42c80000
 80011c4:	080067d0 	.word	0x080067d0
 80011c8:	080067ec 	.word	0x080067ec
 80011cc:	0800682c 	.word	0x0800682c
 80011d0:	2000096e 	.word	0x2000096e
 80011d4:	20000970 	.word	0x20000970
 80011d8:	51eb851f 	.word	0x51eb851f
		  sum += myArr[i];
 80011dc:	4a9a      	ldr	r2, [pc, #616]	@ (8001448 <main+0x510>)
 80011de:	f8d7 393c 	ldr.w	r3, [r7, #2364]	@ 0x93c
 80011e2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80011e6:	461a      	mov	r2, r3
 80011e8:	f8d7 3940 	ldr.w	r3, [r7, #2368]	@ 0x940
 80011ec:	4413      	add	r3, r2
 80011ee:	f8c7 3940 	str.w	r3, [r7, #2368]	@ 0x940
	  for(int i = 0; i<25; i++){
 80011f2:	f8d7 393c 	ldr.w	r3, [r7, #2364]	@ 0x93c
 80011f6:	3301      	adds	r3, #1
 80011f8:	f8c7 393c 	str.w	r3, [r7, #2364]	@ 0x93c
 80011fc:	f8d7 393c 	ldr.w	r3, [r7, #2364]	@ 0x93c
 8001200:	2b18      	cmp	r3, #24
 8001202:	ddeb      	ble.n	80011dc <main+0x2a4>
	  }
	  sprintf((char*) myString, "average gyro_y = %d\r\n", sum/25);
 8001204:	f8d7 3940 	ldr.w	r3, [r7, #2368]	@ 0x940
 8001208:	4a90      	ldr	r2, [pc, #576]	@ (800144c <main+0x514>)
 800120a:	fb82 1203 	smull	r1, r2, r2, r3
 800120e:	10d2      	asrs	r2, r2, #3
 8001210:	17db      	asrs	r3, r3, #31
 8001212:	1ad2      	subs	r2, r2, r3
 8001214:	463b      	mov	r3, r7
 8001216:	498e      	ldr	r1, [pc, #568]	@ (8001450 <main+0x518>)
 8001218:	4618      	mov	r0, r3
 800121a:	f004 fba3 	bl	8005964 <siprintf>
	  myComfyPrint(myString);
 800121e:	463b      	mov	r3, r7
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff fe6b 	bl	8000efc <myComfyPrint>



	  static int16_t max_acc_x = INT16_MIN;
	  static int16_t min_acc_x = INT16_MAX;
	  if(mpu_values.acc_x > max_acc_x) max_acc_x = mpu_values.acc_x;
 8001226:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 800122a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800122e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8001232:	4b88      	ldr	r3, [pc, #544]	@ (8001454 <main+0x51c>)
 8001234:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001238:	429a      	cmp	r2, r3
 800123a:	dd07      	ble.n	800124c <main+0x314>
 800123c:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 8001240:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001244:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8001248:	4b82      	ldr	r3, [pc, #520]	@ (8001454 <main+0x51c>)
 800124a:	801a      	strh	r2, [r3, #0]
	  if(mpu_values.acc_x < min_acc_x) min_acc_x = mpu_values.acc_x;
 800124c:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 8001250:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001254:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8001258:	4b7f      	ldr	r3, [pc, #508]	@ (8001458 <main+0x520>)
 800125a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800125e:	429a      	cmp	r2, r3
 8001260:	da07      	bge.n	8001272 <main+0x33a>
 8001262:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 8001266:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800126a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800126e:	4b7a      	ldr	r3, [pc, #488]	@ (8001458 <main+0x520>)
 8001270:	801a      	strh	r2, [r3, #0]
	  sprintf((char*) myString, "max diff = %d\r\n", max_acc_x - min_acc_x);
 8001272:	4b78      	ldr	r3, [pc, #480]	@ (8001454 <main+0x51c>)
 8001274:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001278:	461a      	mov	r2, r3
 800127a:	4b77      	ldr	r3, [pc, #476]	@ (8001458 <main+0x520>)
 800127c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001280:	1ad2      	subs	r2, r2, r3
 8001282:	463b      	mov	r3, r7
 8001284:	4975      	ldr	r1, [pc, #468]	@ (800145c <main+0x524>)
 8001286:	4618      	mov	r0, r3
 8001288:	f004 fb6c 	bl	8005964 <siprintf>
	  myComfyPrint(myString);
 800128c:	463b      	mov	r3, r7
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fe34 	bl	8000efc <myComfyPrint>
	  //calculate motor values BEGIN//
	  ////////////////////////////////

	  //calculate angle from acceleration values
	  float acc_angle;
	  acc_angle = atan2(mpu_values.acc_x, mpu_values.acc_z)*RAD_TO_DEG;	//*(180/M_PI) to convert from radian to degree
 8001294:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 8001298:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800129c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff f95f 	bl	8000564 <__aeabi_i2d>
 80012a6:	4604      	mov	r4, r0
 80012a8:	460d      	mov	r5, r1
 80012aa:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 80012ae:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80012b2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff f954 	bl	8000564 <__aeabi_i2d>
 80012bc:	4602      	mov	r2, r0
 80012be:	460b      	mov	r3, r1
 80012c0:	ec43 2b11 	vmov	d1, r2, r3
 80012c4:	ec45 4b10 	vmov	d0, r4, r5
 80012c8:	f005 f800 	bl	80062cc <atan2>
 80012cc:	ec51 0b10 	vmov	r0, r1, d0
 80012d0:	f04f 0200 	mov.w	r2, #0
 80012d4:	4b62      	ldr	r3, [pc, #392]	@ (8001460 <main+0x528>)
 80012d6:	f7ff f9af 	bl	8000638 <__aeabi_dmul>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	4610      	mov	r0, r2
 80012e0:	4619      	mov	r1, r3
 80012e2:	a355      	add	r3, pc, #340	@ (adr r3, 8001438 <main+0x500>)
 80012e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e8:	f7ff fad0 	bl	800088c <__aeabi_ddiv>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4610      	mov	r0, r2
 80012f2:	4619      	mov	r1, r3
 80012f4:	f7ff fc3a 	bl	8000b6c <__aeabi_d2f>
 80012f8:	4603      	mov	r3, r0
 80012fa:	f507 6213 	add.w	r2, r7, #2352	@ 0x930
 80012fe:	6013      	str	r3, [r2, #0]

	  //debug prints
	  if(isnan(acc_angle)){
 8001300:	f507 6313 	add.w	r3, r7, #2352	@ 0x930
 8001304:	ed93 7a00 	vldr	s14, [r3]
 8001308:	f507 6313 	add.w	r3, r7, #2352	@ 0x930
 800130c:	edd3 7a00 	vldr	s15, [r3]
 8001310:	eeb4 7a67 	vcmp.f32	s14, s15
 8001314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001318:	d709      	bvc.n	800132e <main+0x3f6>
		  sprintf((char*) myString, "acc_angle is NaN\r\n");
 800131a:	463b      	mov	r3, r7
 800131c:	4951      	ldr	r1, [pc, #324]	@ (8001464 <main+0x52c>)
 800131e:	4618      	mov	r0, r3
 8001320:	f004 fb20 	bl	8005964 <siprintf>
		  myComfyPrint(myString);
 8001324:	463b      	mov	r3, r7
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff fde8 	bl	8000efc <myComfyPrint>
 800132c:	e014      	b.n	8001358 <main+0x420>
	  }
	  else{
		  sprintf((char*) myString, "acc_angle*100 = %d\r\n", (int) (acc_angle*100));	//apparently floating numbers are disabled in print funcitons by defautl if using newlib
 800132e:	f507 6313 	add.w	r3, r7, #2352	@ 0x930
 8001332:	edd3 7a00 	vldr	s15, [r3]
 8001336:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8001468 <main+0x530>
 800133a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800133e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001342:	463b      	mov	r3, r7
 8001344:	ee17 2a90 	vmov	r2, s15
 8001348:	4948      	ldr	r1, [pc, #288]	@ (800146c <main+0x534>)
 800134a:	4618      	mov	r0, r3
 800134c:	f004 fb0a 	bl	8005964 <siprintf>
		  myComfyPrint(myString);
 8001350:	463b      	mov	r3, r7
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff fdd2 	bl	8000efc <myComfyPrint>


	  //debug prints
	  static int16_t counter2 = 0;
	  static int16_t myArr2[100] = { 0 };
	  myArr2[counter2] = acc_angle;
 8001358:	4b45      	ldr	r3, [pc, #276]	@ (8001470 <main+0x538>)
 800135a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800135e:	461a      	mov	r2, r3
 8001360:	f507 6313 	add.w	r3, r7, #2352	@ 0x930
 8001364:	edd3 7a00 	vldr	s15, [r3]
 8001368:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800136c:	ee17 3a90 	vmov	r3, s15
 8001370:	b219      	sxth	r1, r3
 8001372:	4b40      	ldr	r3, [pc, #256]	@ (8001474 <main+0x53c>)
 8001374:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  counter2 = (counter2+1) % 100;
 8001378:	4b3d      	ldr	r3, [pc, #244]	@ (8001470 <main+0x538>)
 800137a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800137e:	3301      	adds	r3, #1
 8001380:	4a32      	ldr	r2, [pc, #200]	@ (800144c <main+0x514>)
 8001382:	fb82 1203 	smull	r1, r2, r2, r3
 8001386:	1151      	asrs	r1, r2, #5
 8001388:	17da      	asrs	r2, r3, #31
 800138a:	1a8a      	subs	r2, r1, r2
 800138c:	2164      	movs	r1, #100	@ 0x64
 800138e:	fb01 f202 	mul.w	r2, r1, r2
 8001392:	1a9a      	subs	r2, r3, r2
 8001394:	b212      	sxth	r2, r2
 8001396:	4b36      	ldr	r3, [pc, #216]	@ (8001470 <main+0x538>)
 8001398:	801a      	strh	r2, [r3, #0]
	  int32_t sum2 = 0;
 800139a:	2300      	movs	r3, #0
 800139c:	f8c7 3938 	str.w	r3, [r7, #2360]	@ 0x938
	  for(int i = 0; i<100; i++){
 80013a0:	2300      	movs	r3, #0
 80013a2:	f8c7 3934 	str.w	r3, [r7, #2356]	@ 0x934
 80013a6:	e00f      	b.n	80013c8 <main+0x490>
		  sum2 += myArr2[i];
 80013a8:	4a32      	ldr	r2, [pc, #200]	@ (8001474 <main+0x53c>)
 80013aa:	f8d7 3934 	ldr.w	r3, [r7, #2356]	@ 0x934
 80013ae:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80013b2:	461a      	mov	r2, r3
 80013b4:	f8d7 3938 	ldr.w	r3, [r7, #2360]	@ 0x938
 80013b8:	4413      	add	r3, r2
 80013ba:	f8c7 3938 	str.w	r3, [r7, #2360]	@ 0x938
	  for(int i = 0; i<100; i++){
 80013be:	f8d7 3934 	ldr.w	r3, [r7, #2356]	@ 0x934
 80013c2:	3301      	adds	r3, #1
 80013c4:	f8c7 3934 	str.w	r3, [r7, #2356]	@ 0x934
 80013c8:	f8d7 3934 	ldr.w	r3, [r7, #2356]	@ 0x934
 80013cc:	2b63      	cmp	r3, #99	@ 0x63
 80013ce:	ddeb      	ble.n	80013a8 <main+0x470>
	  }
	  sprintf((char*) myString, "average acc_angle*100000 = %d\r\n", (sum2*100000)/100);
 80013d0:	f8d7 3938 	ldr.w	r3, [r7, #2360]	@ 0x938
 80013d4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80013d8:	fb03 f202 	mul.w	r2, r3, r2
 80013dc:	463b      	mov	r3, r7
 80013de:	4926      	ldr	r1, [pc, #152]	@ (8001478 <main+0x540>)
 80013e0:	4618      	mov	r0, r3
 80013e2:	f004 fabf 	bl	8005964 <siprintf>
	  myComfyPrint(myString);
 80013e6:	463b      	mov	r3, r7
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff fd87 	bl	8000efc <myComfyPrint>
	  //debug prints


	  ////////////////////////////////
	  //calculate angle from gyroscope
	  float gyro_rate = mpu_values.gyro_y * (1000.0/INT16_MAX);	//500, because that is the range that the mpu6050 is set to currently
 80013ee:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 80013f2:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80013f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff f8b2 	bl	8000564 <__aeabi_i2d>
 8001400:	a30f      	add	r3, pc, #60	@ (adr r3, 8001440 <main+0x508>)
 8001402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001406:	f7ff f917 	bl	8000638 <__aeabi_dmul>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	4610      	mov	r0, r2
 8001410:	4619      	mov	r1, r3
 8001412:	f7ff fbab 	bl	8000b6c <__aeabi_d2f>
 8001416:	4603      	mov	r3, r0
 8001418:	f607 122c 	addw	r2, r7, #2348	@ 0x92c
 800141c:	6013      	str	r3, [r2, #0]
	  static float gyro_angle;
	  static uint32_t current_time=0;
	  static uint32_t last_time;
	  if(done_already == 1){	//this awkward if-else is just temporary, so the last_time  and current_time are not too far apart from eachother, as this would lead to very high motor values there
 800141e:	4b17      	ldr	r3, [pc, #92]	@ (800147c <main+0x544>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d12e      	bne.n	8001484 <main+0x54c>
		  last_time = HAL_GetTick();
 8001426:	f000 ff9b 	bl	8002360 <HAL_GetTick>
 800142a:	4603      	mov	r3, r0
 800142c:	4a14      	ldr	r2, [pc, #80]	@ (8001480 <main+0x548>)
 800142e:	6013      	str	r3, [r2, #0]
		  done_already = 2;
 8001430:	4b12      	ldr	r3, [pc, #72]	@ (800147c <main+0x544>)
 8001432:	2202      	movs	r2, #2
 8001434:	701a      	strb	r2, [r3, #0]
 8001436:	e029      	b.n	800148c <main+0x554>
 8001438:	54442d18 	.word	0x54442d18
 800143c:	400921fb 	.word	0x400921fb
 8001440:	807d00fa 	.word	0x807d00fa
 8001444:	3f9f403e 	.word	0x3f9f403e
 8001448:	20000970 	.word	0x20000970
 800144c:	51eb851f 	.word	0x51eb851f
 8001450:	08006864 	.word	0x08006864
 8001454:	20000000 	.word	0x20000000
 8001458:	20000002 	.word	0x20000002
 800145c:	0800687c 	.word	0x0800687c
 8001460:	40668000 	.word	0x40668000
 8001464:	0800688c 	.word	0x0800688c
 8001468:	42c80000 	.word	0x42c80000
 800146c:	080068a0 	.word	0x080068a0
 8001470:	200009a2 	.word	0x200009a2
 8001474:	200009a4 	.word	0x200009a4
 8001478:	080068b8 	.word	0x080068b8
 800147c:	2000096c 	.word	0x2000096c
 8001480:	20000a6c 	.word	0x20000a6c
	  }
	  else{
		  last_time = current_time;
 8001484:	4b92      	ldr	r3, [pc, #584]	@ (80016d0 <main+0x798>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a92      	ldr	r2, [pc, #584]	@ (80016d4 <main+0x79c>)
 800148a:	6013      	str	r3, [r2, #0]
	  }
	  current_time = HAL_GetTick();
 800148c:	f000 ff68 	bl	8002360 <HAL_GetTick>
 8001490:	4603      	mov	r3, r0
 8001492:	4a8f      	ldr	r2, [pc, #572]	@ (80016d0 <main+0x798>)
 8001494:	6013      	str	r3, [r2, #0]

	  gyro_angle = gyro_angle + gyro_rate*((float)(current_time-last_time)/1000);
 8001496:	4b8e      	ldr	r3, [pc, #568]	@ (80016d0 <main+0x798>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	4b8e      	ldr	r3, [pc, #568]	@ (80016d4 <main+0x79c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	ee07 3a90 	vmov	s15, r3
 80014a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014a8:	eddf 6a8b 	vldr	s13, [pc, #556]	@ 80016d8 <main+0x7a0>
 80014ac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80014b0:	f607 132c 	addw	r3, r7, #2348	@ 0x92c
 80014b4:	edd3 7a00 	vldr	s15, [r3]
 80014b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014bc:	4b87      	ldr	r3, [pc, #540]	@ (80016dc <main+0x7a4>)
 80014be:	edd3 7a00 	vldr	s15, [r3]
 80014c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014c6:	4b85      	ldr	r3, [pc, #532]	@ (80016dc <main+0x7a4>)
 80014c8:	edc3 7a00 	vstr	s15, [r3]
	  sprintf((char*) myString, "gyro_angle*100 = %d\r\n", (int) (gyro_angle*100));	//apparently floating numbers are disabled in print funcitons by defautl if using newlib
 80014cc:	4b83      	ldr	r3, [pc, #524]	@ (80016dc <main+0x7a4>)
 80014ce:	edd3 7a00 	vldr	s15, [r3]
 80014d2:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 80016e0 <main+0x7a8>
 80014d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014de:	463b      	mov	r3, r7
 80014e0:	ee17 2a90 	vmov	r2, s15
 80014e4:	497f      	ldr	r1, [pc, #508]	@ (80016e4 <main+0x7ac>)
 80014e6:	4618      	mov	r0, r3
 80014e8:	f004 fa3c 	bl	8005964 <siprintf>
	  myComfyPrint(myString);
 80014ec:	463b      	mov	r3, r7
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff fd04 	bl	8000efc <myComfyPrint>

	  //////////////////////////////
	  //combine both values into one
	  static float current_angle=0;
	  static float last_angle=0;
	  float alpha = 0.9934;
 80014f4:	4b7c      	ldr	r3, [pc, #496]	@ (80016e8 <main+0x7b0>)
 80014f6:	f607 1228 	addw	r2, r7, #2344	@ 0x928
 80014fa:	6013      	str	r3, [r2, #0]
	  last_angle = current_angle;
 80014fc:	4b7b      	ldr	r3, [pc, #492]	@ (80016ec <main+0x7b4>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a7b      	ldr	r2, [pc, #492]	@ (80016f0 <main+0x7b8>)
 8001502:	6013      	str	r3, [r2, #0]
	  current_angle = alpha * (gyro_angle) + (float) (1-alpha) * acc_angle;
 8001504:	4b75      	ldr	r3, [pc, #468]	@ (80016dc <main+0x7a4>)
 8001506:	ed93 7a00 	vldr	s14, [r3]
 800150a:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 800150e:	edd3 7a00 	vldr	s15, [r3]
 8001512:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001516:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800151a:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 800151e:	edd3 7a00 	vldr	s15, [r3]
 8001522:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001526:	f507 6313 	add.w	r3, r7, #2352	@ 0x930
 800152a:	edd3 7a00 	vldr	s15, [r3]
 800152e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001532:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001536:	4b6d      	ldr	r3, [pc, #436]	@ (80016ec <main+0x7b4>)
 8001538:	edc3 7a00 	vstr	s15, [r3]

	  if(done_already == 2){	//awkward if, so last_angle is not extremely different from current_angle on the first iteration as this would possibly lead to very high motor values there
 800153c:	4b6d      	ldr	r3, [pc, #436]	@ (80016f4 <main+0x7bc>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b02      	cmp	r3, #2
 8001542:	d106      	bne.n	8001552 <main+0x61a>
		last_angle = current_angle;
 8001544:	4b69      	ldr	r3, [pc, #420]	@ (80016ec <main+0x7b4>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a69      	ldr	r2, [pc, #420]	@ (80016f0 <main+0x7b8>)
 800154a:	6013      	str	r3, [r2, #0]
		done_already = 3;
 800154c:	4b69      	ldr	r3, [pc, #420]	@ (80016f4 <main+0x7bc>)
 800154e:	2203      	movs	r2, #3
 8001550:	701a      	strb	r2, [r3, #0]
	  }

	  //debug print
	  sprintf((char*) myString, "combined_angle*100 = %d\r\n", (int) current_angle);
 8001552:	4b66      	ldr	r3, [pc, #408]	@ (80016ec <main+0x7b4>)
 8001554:	edd3 7a00 	vldr	s15, [r3]
 8001558:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800155c:	463b      	mov	r3, r7
 800155e:	ee17 2a90 	vmov	r2, s15
 8001562:	4965      	ldr	r1, [pc, #404]	@ (80016f8 <main+0x7c0>)
 8001564:	4618      	mov	r0, r3
 8001566:	f004 f9fd 	bl	8005964 <siprintf>
	  myComfyPrint(myString);
 800156a:	463b      	mov	r3, r7
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff fcc5 	bl	8000efc <myComfyPrint>
	  //debug print

	  /////
	  //PID
	  float target_angle = 0;
 8001572:	f04f 0300 	mov.w	r3, #0
 8001576:	f607 1224 	addw	r2, r7, #2340	@ 0x924
 800157a:	6013      	str	r3, [r2, #0]
	  float deviation = current_angle - target_angle;
 800157c:	4b5b      	ldr	r3, [pc, #364]	@ (80016ec <main+0x7b4>)
 800157e:	ed93 7a00 	vldr	s14, [r3]
 8001582:	f607 1324 	addw	r3, r7, #2340	@ 0x924
 8001586:	edd3 7a00 	vldr	s15, [r3]
 800158a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800158e:	f507 6312 	add.w	r3, r7, #2336	@ 0x920
 8001592:	edc3 7a00 	vstr	s15, [r3]
	  static float deviation_sum;
	  deviation_sum = deviation_sum + deviation;
 8001596:	4b59      	ldr	r3, [pc, #356]	@ (80016fc <main+0x7c4>)
 8001598:	ed93 7a00 	vldr	s14, [r3]
 800159c:	f507 6312 	add.w	r3, r7, #2336	@ 0x920
 80015a0:	edd3 7a00 	vldr	s15, [r3]
 80015a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015a8:	4b54      	ldr	r3, [pc, #336]	@ (80016fc <main+0x7c4>)
 80015aa:	edc3 7a00 	vstr	s15, [r3]
	  //add constraining of max value of deviation_sum here

	  float Kp=12, Ki=0, Kd=0;
 80015ae:	4b54      	ldr	r3, [pc, #336]	@ (8001700 <main+0x7c8>)
 80015b0:	f607 121c 	addw	r2, r7, #2332	@ 0x91c
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	f04f 0300 	mov.w	r3, #0
 80015ba:	f607 1218 	addw	r2, r7, #2328	@ 0x918
 80015be:	6013      	str	r3, [r2, #0]
 80015c0:	f04f 0300 	mov.w	r3, #0
 80015c4:	f607 1214 	addw	r2, r7, #2324	@ 0x914
 80015c8:	6013      	str	r3, [r2, #0]
	  float motor_value_in_percent = Kp*deviation + Ki*deviation_sum*((float)(current_time-last_time)/1000) - Kd*(current_angle-last_angle)/((float)(current_time-last_time)/1000);
 80015ca:	f607 131c 	addw	r3, r7, #2332	@ 0x91c
 80015ce:	ed93 7a00 	vldr	s14, [r3]
 80015d2:	f507 6312 	add.w	r3, r7, #2336	@ 0x920
 80015d6:	edd3 7a00 	vldr	s15, [r3]
 80015da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015de:	4b47      	ldr	r3, [pc, #284]	@ (80016fc <main+0x7c4>)
 80015e0:	edd3 6a00 	vldr	s13, [r3]
 80015e4:	f607 1318 	addw	r3, r7, #2328	@ 0x918
 80015e8:	edd3 7a00 	vldr	s15, [r3]
 80015ec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80015f0:	4b37      	ldr	r3, [pc, #220]	@ (80016d0 <main+0x798>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4b37      	ldr	r3, [pc, #220]	@ (80016d4 <main+0x79c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	ee07 3a90 	vmov	s15, r3
 80015fe:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8001602:	eddf 5a35 	vldr	s11, [pc, #212]	@ 80016d8 <main+0x7a0>
 8001606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800160a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800160e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001612:	4b36      	ldr	r3, [pc, #216]	@ (80016ec <main+0x7b4>)
 8001614:	edd3 6a00 	vldr	s13, [r3]
 8001618:	4b35      	ldr	r3, [pc, #212]	@ (80016f0 <main+0x7b8>)
 800161a:	edd3 7a00 	vldr	s15, [r3]
 800161e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001622:	f607 1314 	addw	r3, r7, #2324	@ 0x914
 8001626:	edd3 7a00 	vldr	s15, [r3]
 800162a:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800162e:	4b28      	ldr	r3, [pc, #160]	@ (80016d0 <main+0x798>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	4b28      	ldr	r3, [pc, #160]	@ (80016d4 <main+0x79c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	ee07 3a90 	vmov	s15, r3
 800163c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001640:	eddf 5a25 	vldr	s11, [pc, #148]	@ 80016d8 <main+0x7a0>
 8001644:	eec7 6aa5 	vdiv.f32	s13, s15, s11
 8001648:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800164c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001650:	f507 6311 	add.w	r3, r7, #2320	@ 0x910
 8001654:	edc3 7a00 	vstr	s15, [r3]
	  int32_t motor_value = (motor_value_in_percent * MOTOR_MAX_SPEED) /100;
 8001658:	f507 6311 	add.w	r3, r7, #2320	@ 0x910
 800165c:	edd3 7a00 	vldr	s15, [r3]
 8001660:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001704 <main+0x7cc>
 8001664:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001668:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 80016e0 <main+0x7a8>
 800166c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001670:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001674:	ee17 3a90 	vmov	r3, s15
 8001678:	f8c7 390c 	str.w	r3, [r7, #2316]	@ 0x90c

	  ///////////////////////
	  //control motor BEGIN//
	  ///////////////////////

	  if(motor_value >= 0){
 800167c:	f8d7 390c 	ldr.w	r3, [r7, #2316]	@ 0x90c
 8001680:	2b00      	cmp	r3, #0
 8001682:	db0a      	blt.n	800169a <main+0x762>
		  motor_control(MOTOR_DIR_FORWARDS, (uint16_t) abs(motor_value));
 8001684:	f8d7 390c 	ldr.w	r3, [r7, #2316]	@ 0x90c
 8001688:	2b00      	cmp	r3, #0
 800168a:	bfb8      	it	lt
 800168c:	425b      	neglt	r3, r3
 800168e:	b29b      	uxth	r3, r3
 8001690:	4619      	mov	r1, r3
 8001692:	2000      	movs	r0, #0
 8001694:	f000 fa0c 	bl	8001ab0 <motor_control>
 8001698:	e00d      	b.n	80016b6 <main+0x77e>
	  }
	  else if(motor_value < 0){
 800169a:	f8d7 390c 	ldr.w	r3, [r7, #2316]	@ 0x90c
 800169e:	2b00      	cmp	r3, #0
 80016a0:	da09      	bge.n	80016b6 <main+0x77e>
		  motor_control(MOTOR_DIR_BACKWARDS, (uint16_t) abs(motor_value));
 80016a2:	f8d7 390c 	ldr.w	r3, [r7, #2316]	@ 0x90c
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	bfb8      	it	lt
 80016aa:	425b      	neglt	r3, r3
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	4619      	mov	r1, r3
 80016b0:	2001      	movs	r0, #1
 80016b2:	f000 f9fd 	bl	8001ab0 <motor_control>
	  }

	  sprintf((char*) myString, "calculated motorValue = %d\r\n", motor_value);
 80016b6:	463b      	mov	r3, r7
 80016b8:	f8d7 290c 	ldr.w	r2, [r7, #2316]	@ 0x90c
 80016bc:	4912      	ldr	r1, [pc, #72]	@ (8001708 <main+0x7d0>)
 80016be:	4618      	mov	r0, r3
 80016c0:	f004 f950 	bl	8005964 <siprintf>
	  myComfyPrint(myString);
 80016c4:	463b      	mov	r3, r7
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fc18 	bl	8000efc <myComfyPrint>
  {
 80016cc:	e501      	b.n	80010d2 <main+0x19a>
 80016ce:	bf00      	nop
 80016d0:	20000a70 	.word	0x20000a70
 80016d4:	20000a6c 	.word	0x20000a6c
 80016d8:	447a0000 	.word	0x447a0000
 80016dc:	20000a74 	.word	0x20000a74
 80016e0:	42c80000 	.word	0x42c80000
 80016e4:	080068d8 	.word	0x080068d8
 80016e8:	3f7e4f76 	.word	0x3f7e4f76
 80016ec:	20000a78 	.word	0x20000a78
 80016f0:	20000a7c 	.word	0x20000a7c
 80016f4:	2000096c 	.word	0x2000096c
 80016f8:	080068f0 	.word	0x080068f0
 80016fc:	20000a80 	.word	0x20000a80
 8001700:	41400000 	.word	0x41400000
 8001704:	46033c00 	.word	0x46033c00
 8001708:	0800690c 	.word	0x0800690c

0800170c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b094      	sub	sp, #80	@ 0x50
 8001710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001712:	f107 031c 	add.w	r3, r7, #28
 8001716:	2234      	movs	r2, #52	@ 0x34
 8001718:	2100      	movs	r1, #0
 800171a:	4618      	mov	r0, r3
 800171c:	f004 f942 	bl	80059a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001720:	f107 0308 	add.w	r3, r7, #8
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001730:	2300      	movs	r3, #0
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	4b2a      	ldr	r3, [pc, #168]	@ (80017e0 <SystemClock_Config+0xd4>)
 8001736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001738:	4a29      	ldr	r2, [pc, #164]	@ (80017e0 <SystemClock_Config+0xd4>)
 800173a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800173e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001740:	4b27      	ldr	r3, [pc, #156]	@ (80017e0 <SystemClock_Config+0xd4>)
 8001742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001744:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001748:	607b      	str	r3, [r7, #4]
 800174a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800174c:	2300      	movs	r3, #0
 800174e:	603b      	str	r3, [r7, #0]
 8001750:	4b24      	ldr	r3, [pc, #144]	@ (80017e4 <SystemClock_Config+0xd8>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001758:	4a22      	ldr	r2, [pc, #136]	@ (80017e4 <SystemClock_Config+0xd8>)
 800175a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800175e:	6013      	str	r3, [r2, #0]
 8001760:	4b20      	ldr	r3, [pc, #128]	@ (80017e4 <SystemClock_Config+0xd8>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001768:	603b      	str	r3, [r7, #0]
 800176a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800176c:	2302      	movs	r3, #2
 800176e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001770:	2301      	movs	r3, #1
 8001772:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001774:	2310      	movs	r3, #16
 8001776:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001778:	2302      	movs	r3, #2
 800177a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800177c:	2300      	movs	r3, #0
 800177e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001780:	2310      	movs	r3, #16
 8001782:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001784:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001788:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800178a:	2304      	movs	r3, #4
 800178c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800178e:	2302      	movs	r3, #2
 8001790:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001792:	2302      	movs	r3, #2
 8001794:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001796:	f107 031c 	add.w	r3, r7, #28
 800179a:	4618      	mov	r0, r3
 800179c:	f002 fd60 	bl	8004260 <HAL_RCC_OscConfig>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80017a6:	f000 f96e 	bl	8001a86 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017aa:	230f      	movs	r3, #15
 80017ac:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017ae:	2302      	movs	r3, #2
 80017b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017b2:	2300      	movs	r3, #0
 80017b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017bc:	2300      	movs	r3, #0
 80017be:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017c0:	f107 0308 	add.w	r3, r7, #8
 80017c4:	2102      	movs	r1, #2
 80017c6:	4618      	mov	r0, r3
 80017c8:	f002 fa00 	bl	8003bcc <HAL_RCC_ClockConfig>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80017d2:	f000 f958 	bl	8001a86 <Error_Handler>
  }
}
 80017d6:	bf00      	nop
 80017d8:	3750      	adds	r7, #80	@ 0x50
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40023800 	.word	0x40023800
 80017e4:	40007000 	.word	0x40007000

080017e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017ec:	4b12      	ldr	r3, [pc, #72]	@ (8001838 <MX_I2C1_Init+0x50>)
 80017ee:	4a13      	ldr	r2, [pc, #76]	@ (800183c <MX_I2C1_Init+0x54>)
 80017f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017f2:	4b11      	ldr	r3, [pc, #68]	@ (8001838 <MX_I2C1_Init+0x50>)
 80017f4:	4a12      	ldr	r2, [pc, #72]	@ (8001840 <MX_I2C1_Init+0x58>)
 80017f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001838 <MX_I2C1_Init+0x50>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001838 <MX_I2C1_Init+0x50>)
 8001800:	2200      	movs	r2, #0
 8001802:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001804:	4b0c      	ldr	r3, [pc, #48]	@ (8001838 <MX_I2C1_Init+0x50>)
 8001806:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800180a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800180c:	4b0a      	ldr	r3, [pc, #40]	@ (8001838 <MX_I2C1_Init+0x50>)
 800180e:	2200      	movs	r2, #0
 8001810:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001812:	4b09      	ldr	r3, [pc, #36]	@ (8001838 <MX_I2C1_Init+0x50>)
 8001814:	2200      	movs	r2, #0
 8001816:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001818:	4b07      	ldr	r3, [pc, #28]	@ (8001838 <MX_I2C1_Init+0x50>)
 800181a:	2200      	movs	r2, #0
 800181c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800181e:	4b06      	ldr	r3, [pc, #24]	@ (8001838 <MX_I2C1_Init+0x50>)
 8001820:	2200      	movs	r2, #0
 8001822:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001824:	4804      	ldr	r0, [pc, #16]	@ (8001838 <MX_I2C1_Init+0x50>)
 8001826:	f001 f87f 	bl	8002928 <HAL_I2C_Init>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001830:	f000 f929 	bl	8001a86 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}
 8001838:	2000087c 	.word	0x2000087c
 800183c:	40005400 	.word	0x40005400
 8001840:	000186a0 	.word	0x000186a0

08001844 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08a      	sub	sp, #40	@ 0x28
 8001848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800184a:	f107 0320 	add.w	r3, r7, #32
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001854:	1d3b      	adds	r3, r7, #4
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]
 800185c:	609a      	str	r2, [r3, #8]
 800185e:	60da      	str	r2, [r3, #12]
 8001860:	611a      	str	r2, [r3, #16]
 8001862:	615a      	str	r2, [r3, #20]
 8001864:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001866:	4b27      	ldr	r3, [pc, #156]	@ (8001904 <MX_TIM3_Init+0xc0>)
 8001868:	4a27      	ldr	r2, [pc, #156]	@ (8001908 <MX_TIM3_Init+0xc4>)
 800186a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800186c:	4b25      	ldr	r3, [pc, #148]	@ (8001904 <MX_TIM3_Init+0xc0>)
 800186e:	2200      	movs	r2, #0
 8001870:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001872:	4b24      	ldr	r3, [pc, #144]	@ (8001904 <MX_TIM3_Init+0xc0>)
 8001874:	2200      	movs	r2, #0
 8001876:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8400-1;
 8001878:	4b22      	ldr	r3, [pc, #136]	@ (8001904 <MX_TIM3_Init+0xc0>)
 800187a:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800187e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001880:	4b20      	ldr	r3, [pc, #128]	@ (8001904 <MX_TIM3_Init+0xc0>)
 8001882:	2200      	movs	r2, #0
 8001884:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001886:	4b1f      	ldr	r3, [pc, #124]	@ (8001904 <MX_TIM3_Init+0xc0>)
 8001888:	2200      	movs	r2, #0
 800188a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800188c:	481d      	ldr	r0, [pc, #116]	@ (8001904 <MX_TIM3_Init+0xc0>)
 800188e:	f002 ff85 	bl	800479c <HAL_TIM_PWM_Init>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001898:	f000 f8f5 	bl	8001a86 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800189c:	2300      	movs	r3, #0
 800189e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a0:	2300      	movs	r3, #0
 80018a2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018a4:	f107 0320 	add.w	r3, r7, #32
 80018a8:	4619      	mov	r1, r3
 80018aa:	4816      	ldr	r0, [pc, #88]	@ (8001904 <MX_TIM3_Init+0xc0>)
 80018ac:	f003 fbd2 	bl	8005054 <HAL_TIMEx_MasterConfigSynchronization>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80018b6:	f000 f8e6 	bl	8001a86 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018ba:	2360      	movs	r3, #96	@ 0x60
 80018bc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018c6:	2300      	movs	r3, #0
 80018c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018ca:	1d3b      	adds	r3, r7, #4
 80018cc:	2200      	movs	r2, #0
 80018ce:	4619      	mov	r1, r3
 80018d0:	480c      	ldr	r0, [pc, #48]	@ (8001904 <MX_TIM3_Init+0xc0>)
 80018d2:	f003 f87b 	bl	80049cc <HAL_TIM_PWM_ConfigChannel>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80018dc:	f000 f8d3 	bl	8001a86 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018e0:	1d3b      	adds	r3, r7, #4
 80018e2:	2204      	movs	r2, #4
 80018e4:	4619      	mov	r1, r3
 80018e6:	4807      	ldr	r0, [pc, #28]	@ (8001904 <MX_TIM3_Init+0xc0>)
 80018e8:	f003 f870 	bl	80049cc <HAL_TIM_PWM_ConfigChannel>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80018f2:	f000 f8c8 	bl	8001a86 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80018f6:	4803      	ldr	r0, [pc, #12]	@ (8001904 <MX_TIM3_Init+0xc0>)
 80018f8:	f000 fb82 	bl	8002000 <HAL_TIM_MspPostInit>

}
 80018fc:	bf00      	nop
 80018fe:	3728      	adds	r7, #40	@ 0x28
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	200008d0 	.word	0x200008d0
 8001908:	40000400 	.word	0x40000400

0800190c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001910:	4b11      	ldr	r3, [pc, #68]	@ (8001958 <MX_USART2_UART_Init+0x4c>)
 8001912:	4a12      	ldr	r2, [pc, #72]	@ (800195c <MX_USART2_UART_Init+0x50>)
 8001914:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001916:	4b10      	ldr	r3, [pc, #64]	@ (8001958 <MX_USART2_UART_Init+0x4c>)
 8001918:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800191c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800191e:	4b0e      	ldr	r3, [pc, #56]	@ (8001958 <MX_USART2_UART_Init+0x4c>)
 8001920:	2200      	movs	r2, #0
 8001922:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001924:	4b0c      	ldr	r3, [pc, #48]	@ (8001958 <MX_USART2_UART_Init+0x4c>)
 8001926:	2200      	movs	r2, #0
 8001928:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800192a:	4b0b      	ldr	r3, [pc, #44]	@ (8001958 <MX_USART2_UART_Init+0x4c>)
 800192c:	2200      	movs	r2, #0
 800192e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001930:	4b09      	ldr	r3, [pc, #36]	@ (8001958 <MX_USART2_UART_Init+0x4c>)
 8001932:	220c      	movs	r2, #12
 8001934:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001936:	4b08      	ldr	r3, [pc, #32]	@ (8001958 <MX_USART2_UART_Init+0x4c>)
 8001938:	2200      	movs	r2, #0
 800193a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800193c:	4b06      	ldr	r3, [pc, #24]	@ (8001958 <MX_USART2_UART_Init+0x4c>)
 800193e:	2200      	movs	r2, #0
 8001940:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001942:	4805      	ldr	r0, [pc, #20]	@ (8001958 <MX_USART2_UART_Init+0x4c>)
 8001944:	f003 fc02 	bl	800514c <HAL_UART_Init>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800194e:	f000 f89a 	bl	8001a86 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000918 	.word	0x20000918
 800195c:	40004400 	.word	0x40004400

08001960 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b08a      	sub	sp, #40	@ 0x28
 8001964:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001966:	f107 0314 	add.w	r3, r7, #20
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	609a      	str	r2, [r3, #8]
 8001972:	60da      	str	r2, [r3, #12]
 8001974:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	4b39      	ldr	r3, [pc, #228]	@ (8001a60 <MX_GPIO_Init+0x100>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197e:	4a38      	ldr	r2, [pc, #224]	@ (8001a60 <MX_GPIO_Init+0x100>)
 8001980:	f043 0304 	orr.w	r3, r3, #4
 8001984:	6313      	str	r3, [r2, #48]	@ 0x30
 8001986:	4b36      	ldr	r3, [pc, #216]	@ (8001a60 <MX_GPIO_Init+0x100>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198a:	f003 0304 	and.w	r3, r3, #4
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	4b32      	ldr	r3, [pc, #200]	@ (8001a60 <MX_GPIO_Init+0x100>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199a:	4a31      	ldr	r2, [pc, #196]	@ (8001a60 <MX_GPIO_Init+0x100>)
 800199c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019a2:	4b2f      	ldr	r3, [pc, #188]	@ (8001a60 <MX_GPIO_Init+0x100>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	60bb      	str	r3, [r7, #8]
 80019b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001a60 <MX_GPIO_Init+0x100>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b6:	4a2a      	ldr	r2, [pc, #168]	@ (8001a60 <MX_GPIO_Init+0x100>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019be:	4b28      	ldr	r3, [pc, #160]	@ (8001a60 <MX_GPIO_Init+0x100>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	60bb      	str	r3, [r7, #8]
 80019c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	607b      	str	r3, [r7, #4]
 80019ce:	4b24      	ldr	r3, [pc, #144]	@ (8001a60 <MX_GPIO_Init+0x100>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d2:	4a23      	ldr	r2, [pc, #140]	@ (8001a60 <MX_GPIO_Init+0x100>)
 80019d4:	f043 0302 	orr.w	r3, r3, #2
 80019d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019da:	4b21      	ldr	r3, [pc, #132]	@ (8001a60 <MX_GPIO_Init+0x100>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	607b      	str	r3, [r7, #4]
 80019e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|MOTOR2_DIR_Pin|MOTOR3_DIR_Pin, GPIO_PIN_RESET);
 80019e6:	2200      	movs	r2, #0
 80019e8:	f44f 7118 	mov.w	r1, #608	@ 0x260
 80019ec:	481d      	ldr	r0, [pc, #116]	@ (8001a64 <MX_GPIO_Init+0x104>)
 80019ee:	f000 ff69 	bl	80028c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80019f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019f8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80019fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a02:	f107 0314 	add.w	r3, r7, #20
 8001a06:	4619      	mov	r1, r3
 8001a08:	4817      	ldr	r0, [pc, #92]	@ (8001a68 <MX_GPIO_Init+0x108>)
 8001a0a:	f000 fdc7 	bl	800259c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin MOTOR2_DIR_Pin MOTOR3_DIR_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|MOTOR2_DIR_Pin|MOTOR3_DIR_Pin;
 8001a0e:	f44f 7318 	mov.w	r3, #608	@ 0x260
 8001a12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a14:	2301      	movs	r3, #1
 8001a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a20:	f107 0314 	add.w	r3, r7, #20
 8001a24:	4619      	mov	r1, r3
 8001a26:	480f      	ldr	r0, [pc, #60]	@ (8001a64 <MX_GPIO_Init+0x104>)
 8001a28:	f000 fdb8 	bl	800259c <HAL_GPIO_Init>

  /*Configure GPIO pin : MPU6050_INT_Pin */
  GPIO_InitStruct.Pin = MPU6050_INT_Pin;
 8001a2c:	2320      	movs	r3, #32
 8001a2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a30:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001a34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a36:	2302      	movs	r3, #2
 8001a38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MPU6050_INT_GPIO_Port, &GPIO_InitStruct);
 8001a3a:	f107 0314 	add.w	r3, r7, #20
 8001a3e:	4619      	mov	r1, r3
 8001a40:	480a      	ldr	r0, [pc, #40]	@ (8001a6c <MX_GPIO_Init+0x10c>)
 8001a42:	f000 fdab 	bl	800259c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001a46:	2200      	movs	r2, #0
 8001a48:	2100      	movs	r1, #0
 8001a4a:	2017      	movs	r0, #23
 8001a4c:	f000 fd6f 	bl	800252e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a50:	2017      	movs	r0, #23
 8001a52:	f000 fd88 	bl	8002566 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a56:	bf00      	nop
 8001a58:	3728      	adds	r7, #40	@ 0x28
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40023800 	.word	0x40023800
 8001a64:	40020000 	.word	0x40020000
 8001a68:	40020800 	.word	0x40020800
 8001a6c:	40020400 	.word	0x40020400

08001a70 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == MPU6050_INT_Pin){
	  //do stuff when mpu6050 says data is ready for reading
  }
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a86:	b480      	push	{r7}
 8001a88:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a8a:	b672      	cpsid	i
}
 8001a8c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a8e:	bf00      	nop
 8001a90:	e7fd      	b.n	8001a8e <Error_Handler+0x8>
	...

08001a94 <motor_init>:


extern TIM_HandleTypeDef htim3;


void motor_init(){
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
	//initialize PWM
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001a98:	2100      	movs	r1, #0
 8001a9a:	4804      	ldr	r0, [pc, #16]	@ (8001aac <motor_init+0x18>)
 8001a9c:	f002 fece 	bl	800483c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001aa0:	2104      	movs	r1, #4
 8001aa2:	4802      	ldr	r0, [pc, #8]	@ (8001aac <motor_init+0x18>)
 8001aa4:	f002 feca 	bl	800483c <HAL_TIM_PWM_Start>
}
 8001aa8:	bf00      	nop
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	200008d0 	.word	0x200008d0

08001ab0 <motor_control>:

void motor_control(uint8_t direction, uint16_t speed){
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	460a      	mov	r2, r1
 8001aba:	71fb      	strb	r3, [r7, #7]
 8001abc:	4613      	mov	r3, r2
 8001abe:	80bb      	strh	r3, [r7, #4]
  //direction 0=forward, 1=backward, everything else leaves the current direction
  //speed 0=off, 255=max

  //Error Handling
  if(speed<0) speed=0;
  if(speed>MOTOR_MAX_SPEED) speed=MOTOR_MAX_SPEED;
 8001ac0:	88bb      	ldrh	r3, [r7, #4]
 8001ac2:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d902      	bls.n	8001ad0 <motor_control+0x20>
 8001aca:	f242 03cf 	movw	r3, #8399	@ 0x20cf
 8001ace:	80bb      	strh	r3, [r7, #4]

  //set motor direction
  switch(direction){
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d002      	beq.n	8001adc <motor_control+0x2c>
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d00c      	beq.n	8001af4 <motor_control+0x44>
	  HAL_GPIO_WritePin(MOTOR2_DIR_GPIO_Port, MOTOR2_DIR_Pin, GPIO_PIN_SET);
	  HAL_GPIO_WritePin(MOTOR3_DIR_GPIO_Port, MOTOR3_DIR_Pin, GPIO_PIN_SET);
	  break;
  default:
	  //do nothing
	  break;
 8001ada:	e017      	b.n	8001b0c <motor_control+0x5c>
	  HAL_GPIO_WritePin(MOTOR2_DIR_GPIO_Port, MOTOR2_DIR_Pin, GPIO_PIN_RESET);
 8001adc:	2200      	movs	r2, #0
 8001ade:	2140      	movs	r1, #64	@ 0x40
 8001ae0:	4810      	ldr	r0, [pc, #64]	@ (8001b24 <motor_control+0x74>)
 8001ae2:	f000 feef 	bl	80028c4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(MOTOR3_DIR_GPIO_Port, MOTOR3_DIR_Pin, GPIO_PIN_RESET);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001aec:	480d      	ldr	r0, [pc, #52]	@ (8001b24 <motor_control+0x74>)
 8001aee:	f000 fee9 	bl	80028c4 <HAL_GPIO_WritePin>
	  break;
 8001af2:	e00b      	b.n	8001b0c <motor_control+0x5c>
	  HAL_GPIO_WritePin(MOTOR2_DIR_GPIO_Port, MOTOR2_DIR_Pin, GPIO_PIN_SET);
 8001af4:	2201      	movs	r2, #1
 8001af6:	2140      	movs	r1, #64	@ 0x40
 8001af8:	480a      	ldr	r0, [pc, #40]	@ (8001b24 <motor_control+0x74>)
 8001afa:	f000 fee3 	bl	80028c4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(MOTOR3_DIR_GPIO_Port, MOTOR3_DIR_Pin, GPIO_PIN_SET);
 8001afe:	2201      	movs	r2, #1
 8001b00:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b04:	4807      	ldr	r0, [pc, #28]	@ (8001b24 <motor_control+0x74>)
 8001b06:	f000 fedd 	bl	80028c4 <HAL_GPIO_WritePin>
	  break;
 8001b0a:	bf00      	nop
  }

  //set motor speed
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, speed);
 8001b0c:	4b06      	ldr	r3, [pc, #24]	@ (8001b28 <motor_control+0x78>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	88ba      	ldrh	r2, [r7, #4]
 8001b12:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, speed);
 8001b14:	4b04      	ldr	r3, [pc, #16]	@ (8001b28 <motor_control+0x78>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	88ba      	ldrh	r2, [r7, #4]
 8001b1a:	639a      	str	r2, [r3, #56]	@ 0x38

}
 8001b1c:	bf00      	nop
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40020000 	.word	0x40020000
 8001b28:	200008d0 	.word	0x200008d0

08001b2c <mpu6050_init>:
#include <string.h>

extern I2C_HandleTypeDef hi2c1;
extern UART_HandleTypeDef huart2;

void mpu6050_init(){
 8001b2c:	b5b0      	push	{r4, r5, r7, lr}
 8001b2e:	b0c6      	sub	sp, #280	@ 0x118
 8001b30:	af04      	add	r7, sp, #16

	uint8_t buff[256] = { 0 };
 8001b32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001b36:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	3304      	adds	r3, #4
 8001b40:	22fc      	movs	r2, #252	@ 0xfc
 8001b42:	2100      	movs	r1, #0
 8001b44:	4618      	mov	r0, r3
 8001b46:	f003 ff2d 	bl	80059a4 <memset>

	//check if MPU is ready
	  if(HAL_I2C_IsDeviceReady(&hi2c1, (DEVICE_ADDRESS<<1) +0, 1, 100) == HAL_OK){
 8001b4a:	2364      	movs	r3, #100	@ 0x64
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	21d0      	movs	r1, #208	@ 0xd0
 8001b50:	48a4      	ldr	r0, [pc, #656]	@ (8001de4 <mpu6050_init+0x2b8>)
 8001b52:	f001 fb59 	bl	8003208 <HAL_I2C_IsDeviceReady>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d11a      	bne.n	8001b92 <mpu6050_init+0x66>
		  strcpy((char*) buff, "The device is ready\r\n");
 8001b5c:	f107 0308 	add.w	r3, r7, #8
 8001b60:	4aa1      	ldr	r2, [pc, #644]	@ (8001de8 <mpu6050_init+0x2bc>)
 8001b62:	461c      	mov	r4, r3
 8001b64:	4615      	mov	r5, r2
 8001b66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b6a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b6e:	6020      	str	r0, [r4, #0]
 8001b70:	3404      	adds	r4, #4
 8001b72:	8021      	strh	r1, [r4, #0]
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8001b74:	f107 0308 	add.w	r3, r7, #8
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7fe fb49 	bl	8000210 <strlen>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	f107 0108 	add.w	r1, r7, #8
 8001b86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b8a:	4898      	ldr	r0, [pc, #608]	@ (8001dec <mpu6050_init+0x2c0>)
 8001b8c:	f003 fb2e 	bl	80051ec <HAL_UART_Transmit>
 8001b90:	e01a      	b.n	8001bc8 <mpu6050_init+0x9c>
	  }
	  else{
		  strcpy((char*) buff, "The device is not ready. Check the cables\r\n");
 8001b92:	f107 0308 	add.w	r3, r7, #8
 8001b96:	4a96      	ldr	r2, [pc, #600]	@ (8001df0 <mpu6050_init+0x2c4>)
 8001b98:	461c      	mov	r4, r3
 8001b9a:	4615      	mov	r5, r2
 8001b9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ba0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ba2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ba4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ba8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8001bac:	f107 0308 	add.w	r3, r7, #8
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7fe fb2d 	bl	8000210 <strlen>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	f107 0108 	add.w	r1, r7, #8
 8001bbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bc2:	488a      	ldr	r0, [pc, #552]	@ (8001dec <mpu6050_init+0x2c0>)
 8001bc4:	f003 fb12 	bl	80051ec <HAL_UART_Transmit>
	  }

	  //configure gyroscope
	  uint8_t gyroscope_range = FS_GYRO_1000;	//set gyroscope range to 500 °/s
 8001bc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001bcc:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8001bd0:	2210      	movs	r2, #16
 8001bd2:	701a      	strb	r2, [r3, #0]
	  if(HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS<<1) +0, REG_CONFIG_GYRO, 1, &gyroscope_range, sizeof(gyroscope_range), 100) == HAL_OK){
 8001bd4:	2364      	movs	r3, #100	@ 0x64
 8001bd6:	9302      	str	r3, [sp, #8]
 8001bd8:	2301      	movs	r3, #1
 8001bda:	9301      	str	r3, [sp, #4]
 8001bdc:	1dfb      	adds	r3, r7, #7
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	2301      	movs	r3, #1
 8001be2:	221b      	movs	r2, #27
 8001be4:	21d0      	movs	r1, #208	@ 0xd0
 8001be6:	487f      	ldr	r0, [pc, #508]	@ (8001de4 <mpu6050_init+0x2b8>)
 8001be8:	f000 ffe2 	bl	8002bb0 <HAL_I2C_Mem_Write>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d11d      	bne.n	8001c2e <mpu6050_init+0x102>
		  strcpy((char*) buff, "gyroscope range successfully set\r\n");
 8001bf2:	f107 0308 	add.w	r3, r7, #8
 8001bf6:	4a7f      	ldr	r2, [pc, #508]	@ (8001df4 <mpu6050_init+0x2c8>)
 8001bf8:	461c      	mov	r4, r3
 8001bfa:	4615      	mov	r5, r2
 8001bfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c04:	682b      	ldr	r3, [r5, #0]
 8001c06:	461a      	mov	r2, r3
 8001c08:	8022      	strh	r2, [r4, #0]
 8001c0a:	3402      	adds	r4, #2
 8001c0c:	0c1b      	lsrs	r3, r3, #16
 8001c0e:	7023      	strb	r3, [r4, #0]
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8001c10:	f107 0308 	add.w	r3, r7, #8
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7fe fafb 	bl	8000210 <strlen>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	f107 0108 	add.w	r1, r7, #8
 8001c22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c26:	4871      	ldr	r0, [pc, #452]	@ (8001dec <mpu6050_init+0x2c0>)
 8001c28:	f003 fae0 	bl	80051ec <HAL_UART_Transmit>
 8001c2c:	e018      	b.n	8001c60 <mpu6050_init+0x134>
	  }
	  else{
		  strcpy((char*) buff, "failed setting gyroscope range\r\n");
 8001c2e:	f107 0308 	add.w	r3, r7, #8
 8001c32:	4a71      	ldr	r2, [pc, #452]	@ (8001df8 <mpu6050_init+0x2cc>)
 8001c34:	461c      	mov	r4, r3
 8001c36:	4615      	mov	r5, r2
 8001c38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c40:	682b      	ldr	r3, [r5, #0]
 8001c42:	7023      	strb	r3, [r4, #0]
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8001c44:	f107 0308 	add.w	r3, r7, #8
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7fe fae1 	bl	8000210 <strlen>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	f107 0108 	add.w	r1, r7, #8
 8001c56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c5a:	4864      	ldr	r0, [pc, #400]	@ (8001dec <mpu6050_init+0x2c0>)
 8001c5c:	f003 fac6 	bl	80051ec <HAL_UART_Transmit>
	  }

	  //configure accelerometer
	  uint8_t accelerometer_range = FS_ACC_2G;	//set gyroscope range to 500 °/s
 8001c60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001c64:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 8001c68:	2200      	movs	r2, #0
 8001c6a:	701a      	strb	r2, [r3, #0]
	  if(HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS<<1) +0, REG_CONFIG_ACC, 1, &accelerometer_range, sizeof(accelerometer_range), 100) == HAL_OK){
 8001c6c:	2364      	movs	r3, #100	@ 0x64
 8001c6e:	9302      	str	r3, [sp, #8]
 8001c70:	2301      	movs	r3, #1
 8001c72:	9301      	str	r3, [sp, #4]
 8001c74:	1dbb      	adds	r3, r7, #6
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	2301      	movs	r3, #1
 8001c7a:	221c      	movs	r2, #28
 8001c7c:	21d0      	movs	r1, #208	@ 0xd0
 8001c7e:	4859      	ldr	r0, [pc, #356]	@ (8001de4 <mpu6050_init+0x2b8>)
 8001c80:	f000 ff96 	bl	8002bb0 <HAL_I2C_Mem_Write>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d11f      	bne.n	8001cca <mpu6050_init+0x19e>
		  strcpy((char*) buff, "accelerometer range successfully set\r\n");
 8001c8a:	f107 0308 	add.w	r3, r7, #8
 8001c8e:	4a5b      	ldr	r2, [pc, #364]	@ (8001dfc <mpu6050_init+0x2d0>)
 8001c90:	461c      	mov	r4, r3
 8001c92:	4615      	mov	r5, r2
 8001c94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c9c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001ca0:	6020      	str	r0, [r4, #0]
 8001ca2:	3404      	adds	r4, #4
 8001ca4:	8021      	strh	r1, [r4, #0]
 8001ca6:	3402      	adds	r4, #2
 8001ca8:	0c0b      	lsrs	r3, r1, #16
 8001caa:	7023      	strb	r3, [r4, #0]
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8001cac:	f107 0308 	add.w	r3, r7, #8
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7fe faad 	bl	8000210 <strlen>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	f107 0108 	add.w	r1, r7, #8
 8001cbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001cc2:	484a      	ldr	r0, [pc, #296]	@ (8001dec <mpu6050_init+0x2c0>)
 8001cc4:	f003 fa92 	bl	80051ec <HAL_UART_Transmit>
 8001cc8:	e01b      	b.n	8001d02 <mpu6050_init+0x1d6>
	  }
	  else{
		  strcpy((char*) buff, "failed setting accelerometer range\r\n");
 8001cca:	f107 0308 	add.w	r3, r7, #8
 8001cce:	4a4c      	ldr	r2, [pc, #304]	@ (8001e00 <mpu6050_init+0x2d4>)
 8001cd0:	461c      	mov	r4, r3
 8001cd2:	4615      	mov	r5, r2
 8001cd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cdc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001ce0:	6020      	str	r0, [r4, #0]
 8001ce2:	3404      	adds	r4, #4
 8001ce4:	7021      	strb	r1, [r4, #0]
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8001ce6:	f107 0308 	add.w	r3, r7, #8
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe fa90 	bl	8000210 <strlen>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	f107 0108 	add.w	r1, r7, #8
 8001cf8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001cfc:	483b      	ldr	r0, [pc, #236]	@ (8001dec <mpu6050_init+0x2c0>)
 8001cfe:	f003 fa75 	bl	80051ec <HAL_UART_Transmit>
	  }

	  //set low pass filter
	  uint8_t lpf_setting = LPF_44;
 8001d02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001d06:	f2a3 1303 	subw	r3, r3, #259	@ 0x103
 8001d0a:	2203      	movs	r2, #3
 8001d0c:	701a      	strb	r2, [r3, #0]
	  HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS<<1) +0, REG_LOW_PASS_FILTER, 1, &lpf_setting, sizeof(lpf_setting), 100);
 8001d0e:	2364      	movs	r3, #100	@ 0x64
 8001d10:	9302      	str	r3, [sp, #8]
 8001d12:	2301      	movs	r3, #1
 8001d14:	9301      	str	r3, [sp, #4]
 8001d16:	1d7b      	adds	r3, r7, #5
 8001d18:	9300      	str	r3, [sp, #0]
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	221a      	movs	r2, #26
 8001d1e:	21d0      	movs	r1, #208	@ 0xd0
 8001d20:	4830      	ldr	r0, [pc, #192]	@ (8001de4 <mpu6050_init+0x2b8>)
 8001d22:	f000 ff45 	bl	8002bb0 <HAL_I2C_Mem_Write>

	  //enable interrupt to signal that data is ready to be read
	  uint8_t interrupt_signal = INT_DATA_READY;
 8001d26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001d2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001d2e:	2201      	movs	r2, #1
 8001d30:	701a      	strb	r2, [r3, #0]
	  HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS<<1) +0, REG_INTERRUPT, 1, &interrupt_signal, sizeof(interrupt_signal), 100);
 8001d32:	2364      	movs	r3, #100	@ 0x64
 8001d34:	9302      	str	r3, [sp, #8]
 8001d36:	2301      	movs	r3, #1
 8001d38:	9301      	str	r3, [sp, #4]
 8001d3a:	1d3b      	adds	r3, r7, #4
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	2301      	movs	r3, #1
 8001d40:	2238      	movs	r2, #56	@ 0x38
 8001d42:	21d0      	movs	r1, #208	@ 0xd0
 8001d44:	4827      	ldr	r0, [pc, #156]	@ (8001de4 <mpu6050_init+0x2b8>)
 8001d46:	f000 ff33 	bl	8002bb0 <HAL_I2C_Mem_Write>

	  //deactivate sleep
	  uint8_t asdf_flags = 0b00001000;	//set the '1' also to '0' if you want the temperature sensor to be enabled
 8001d4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001d4e:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 8001d52:	2208      	movs	r2, #8
 8001d54:	701a      	strb	r2, [r3, #0]
	  if(HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS<<1) +0, REG_USR_CTRL, 1, &asdf_flags, sizeof(asdf_flags), 100) == HAL_OK){
 8001d56:	2364      	movs	r3, #100	@ 0x64
 8001d58:	9302      	str	r3, [sp, #8]
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	9301      	str	r3, [sp, #4]
 8001d5e:	1cfb      	adds	r3, r7, #3
 8001d60:	9300      	str	r3, [sp, #0]
 8001d62:	2301      	movs	r3, #1
 8001d64:	226b      	movs	r2, #107	@ 0x6b
 8001d66:	21d0      	movs	r1, #208	@ 0xd0
 8001d68:	481e      	ldr	r0, [pc, #120]	@ (8001de4 <mpu6050_init+0x2b8>)
 8001d6a:	f000 ff21 	bl	8002bb0 <HAL_I2C_Mem_Write>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d119      	bne.n	8001da8 <mpu6050_init+0x27c>
		  strcpy((char*) buff, "disablin sleep successfully\r\n");
 8001d74:	f107 0308 	add.w	r3, r7, #8
 8001d78:	4a22      	ldr	r2, [pc, #136]	@ (8001e04 <mpu6050_init+0x2d8>)
 8001d7a:	461c      	mov	r4, r3
 8001d7c:	4615      	mov	r5, r2
 8001d7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d82:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001d86:	c407      	stmia	r4!, {r0, r1, r2}
 8001d88:	8023      	strh	r3, [r4, #0]
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8001d8a:	f107 0308 	add.w	r3, r7, #8
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe fa3e 	bl	8000210 <strlen>
 8001d94:	4603      	mov	r3, r0
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	f107 0108 	add.w	r1, r7, #8
 8001d9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001da0:	4812      	ldr	r0, [pc, #72]	@ (8001dec <mpu6050_init+0x2c0>)
 8001da2:	f003 fa23 	bl	80051ec <HAL_UART_Transmit>
	  else{
		  strcpy((char*) buff, "error disabling sleep\r\n");
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
	  }

}
 8001da6:	e018      	b.n	8001dda <mpu6050_init+0x2ae>
		  strcpy((char*) buff, "error disabling sleep\r\n");
 8001da8:	f107 0308 	add.w	r3, r7, #8
 8001dac:	4a16      	ldr	r2, [pc, #88]	@ (8001e08 <mpu6050_init+0x2dc>)
 8001dae:	461c      	mov	r4, r3
 8001db0:	4615      	mov	r5, r2
 8001db2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001db4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001db6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001dba:	e884 0003 	stmia.w	r4, {r0, r1}
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8001dbe:	f107 0308 	add.w	r3, r7, #8
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7fe fa24 	bl	8000210 <strlen>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	f107 0108 	add.w	r1, r7, #8
 8001dd0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001dd4:	4805      	ldr	r0, [pc, #20]	@ (8001dec <mpu6050_init+0x2c0>)
 8001dd6:	f003 fa09 	bl	80051ec <HAL_UART_Transmit>
}
 8001dda:	bf00      	nop
 8001ddc:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bdb0      	pop	{r4, r5, r7, pc}
 8001de4:	2000087c 	.word	0x2000087c
 8001de8:	0800692c 	.word	0x0800692c
 8001dec:	20000918 	.word	0x20000918
 8001df0:	08006944 	.word	0x08006944
 8001df4:	08006970 	.word	0x08006970
 8001df8:	08006994 	.word	0x08006994
 8001dfc:	080069b8 	.word	0x080069b8
 8001e00:	080069e0 	.word	0x080069e0
 8001e04:	08006a08 	.word	0x08006a08
 8001e08:	08006a28 	.word	0x08006a28

08001e0c <mpu6050_read>:



void mpu6050_read(mpu6050_values_t* values){
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b088      	sub	sp, #32
 8001e10:	af04      	add	r7, sp, #16
 8001e12:	6078      	str	r0, [r7, #4]

	  uint8_t buff[6] = { 0 };
 8001e14:	2300      	movs	r3, #0
 8001e16:	60bb      	str	r3, [r7, #8]
 8001e18:	2300      	movs	r3, #0
 8001e1a:	81bb      	strh	r3, [r7, #12]
	  HAL_I2C_Mem_Read(&hi2c1, (DEVICE_ADDRESS<<1) +1, REG_ACC_DATA, 1, buff, sizeof(buff), 100);
 8001e1c:	2364      	movs	r3, #100	@ 0x64
 8001e1e:	9302      	str	r3, [sp, #8]
 8001e20:	2306      	movs	r3, #6
 8001e22:	9301      	str	r3, [sp, #4]
 8001e24:	f107 0308 	add.w	r3, r7, #8
 8001e28:	9300      	str	r3, [sp, #0]
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	223b      	movs	r2, #59	@ 0x3b
 8001e2e:	21d1      	movs	r1, #209	@ 0xd1
 8001e30:	4829      	ldr	r0, [pc, #164]	@ (8001ed8 <mpu6050_read+0xcc>)
 8001e32:	f000 ffb7 	bl	8002da4 <HAL_I2C_Mem_Read>
	  values->acc_x = (uint16_t) (buff[0]<<8) + buff[1];
 8001e36:	7a3b      	ldrb	r3, [r7, #8]
 8001e38:	021b      	lsls	r3, r3, #8
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	7a7a      	ldrb	r2, [r7, #9]
 8001e3e:	4413      	add	r3, r2
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	b21a      	sxth	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	80da      	strh	r2, [r3, #6]
	  values->acc_y = (uint16_t) (buff[2]<<8) + buff[3];
 8001e48:	7abb      	ldrb	r3, [r7, #10]
 8001e4a:	021b      	lsls	r3, r3, #8
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	7afa      	ldrb	r2, [r7, #11]
 8001e50:	4413      	add	r3, r2
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	b21a      	sxth	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	811a      	strh	r2, [r3, #8]
	  values->acc_z = (uint16_t) (buff[4]<<8) + buff[5];
 8001e5a:	7b3b      	ldrb	r3, [r7, #12]
 8001e5c:	021b      	lsls	r3, r3, #8
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	7b7a      	ldrb	r2, [r7, #13]
 8001e62:	4413      	add	r3, r2
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	b21a      	sxth	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	815a      	strh	r2, [r3, #10]

	  HAL_I2C_Mem_Read(&hi2c1, (DEVICE_ADDRESS<<1) +1, REG_GYRO_DATA, 1, buff, sizeof(buff), 100);
 8001e6c:	2364      	movs	r3, #100	@ 0x64
 8001e6e:	9302      	str	r3, [sp, #8]
 8001e70:	2306      	movs	r3, #6
 8001e72:	9301      	str	r3, [sp, #4]
 8001e74:	f107 0308 	add.w	r3, r7, #8
 8001e78:	9300      	str	r3, [sp, #0]
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	2243      	movs	r2, #67	@ 0x43
 8001e7e:	21d1      	movs	r1, #209	@ 0xd1
 8001e80:	4815      	ldr	r0, [pc, #84]	@ (8001ed8 <mpu6050_read+0xcc>)
 8001e82:	f000 ff8f 	bl	8002da4 <HAL_I2C_Mem_Read>
	  values->gyro_x = (uint16_t) (buff[0]<<8) + buff[1];
 8001e86:	7a3b      	ldrb	r3, [r7, #8]
 8001e88:	021b      	lsls	r3, r3, #8
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	7a7a      	ldrb	r2, [r7, #9]
 8001e8e:	4413      	add	r3, r2
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	b21a      	sxth	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	801a      	strh	r2, [r3, #0]
	  values->gyro_y = (uint16_t) (buff[2]<<8) + buff[3];
 8001e98:	7abb      	ldrb	r3, [r7, #10]
 8001e9a:	021b      	lsls	r3, r3, #8
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	7afa      	ldrb	r2, [r7, #11]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	b21a      	sxth	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	805a      	strh	r2, [r3, #2]
	  values->gyro_z = (uint16_t) (buff[4]<<8) + buff[5];
 8001eaa:	7b3b      	ldrb	r3, [r7, #12]
 8001eac:	021b      	lsls	r3, r3, #8
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	7b7a      	ldrb	r2, [r7, #13]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	b21a      	sxth	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	809a      	strh	r2, [r3, #4]

	  //apply offsets
	  values->gyro_y += GYRO_Y_OFFSET_1000;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	330c      	adds	r3, #12
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	b21a      	sxth	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	805a      	strh	r2, [r3, #2]

}
 8001ece:	bf00      	nop
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	2000087c 	.word	0x2000087c

08001edc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	607b      	str	r3, [r7, #4]
 8001ee6:	4b10      	ldr	r3, [pc, #64]	@ (8001f28 <HAL_MspInit+0x4c>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eea:	4a0f      	ldr	r2, [pc, #60]	@ (8001f28 <HAL_MspInit+0x4c>)
 8001eec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ef0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8001f28 <HAL_MspInit+0x4c>)
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001efa:	607b      	str	r3, [r7, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	603b      	str	r3, [r7, #0]
 8001f02:	4b09      	ldr	r3, [pc, #36]	@ (8001f28 <HAL_MspInit+0x4c>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f06:	4a08      	ldr	r2, [pc, #32]	@ (8001f28 <HAL_MspInit+0x4c>)
 8001f08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f0e:	4b06      	ldr	r3, [pc, #24]	@ (8001f28 <HAL_MspInit+0x4c>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f16:	603b      	str	r3, [r7, #0]
 8001f18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	40023800 	.word	0x40023800

08001f2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08a      	sub	sp, #40	@ 0x28
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f34:	f107 0314 	add.w	r3, r7, #20
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	60da      	str	r2, [r3, #12]
 8001f42:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a19      	ldr	r2, [pc, #100]	@ (8001fb0 <HAL_I2C_MspInit+0x84>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d12c      	bne.n	8001fa8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	613b      	str	r3, [r7, #16]
 8001f52:	4b18      	ldr	r3, [pc, #96]	@ (8001fb4 <HAL_I2C_MspInit+0x88>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f56:	4a17      	ldr	r2, [pc, #92]	@ (8001fb4 <HAL_I2C_MspInit+0x88>)
 8001f58:	f043 0302 	orr.w	r3, r3, #2
 8001f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f5e:	4b15      	ldr	r3, [pc, #84]	@ (8001fb4 <HAL_I2C_MspInit+0x88>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	613b      	str	r3, [r7, #16]
 8001f68:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f6a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f70:	2312      	movs	r3, #18
 8001f72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f74:	2301      	movs	r3, #1
 8001f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f7c:	2304      	movs	r3, #4
 8001f7e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f80:	f107 0314 	add.w	r3, r7, #20
 8001f84:	4619      	mov	r1, r3
 8001f86:	480c      	ldr	r0, [pc, #48]	@ (8001fb8 <HAL_I2C_MspInit+0x8c>)
 8001f88:	f000 fb08 	bl	800259c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	4b08      	ldr	r3, [pc, #32]	@ (8001fb4 <HAL_I2C_MspInit+0x88>)
 8001f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f94:	4a07      	ldr	r2, [pc, #28]	@ (8001fb4 <HAL_I2C_MspInit+0x88>)
 8001f96:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f9c:	4b05      	ldr	r3, [pc, #20]	@ (8001fb4 <HAL_I2C_MspInit+0x88>)
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001fa8:	bf00      	nop
 8001faa:	3728      	adds	r7, #40	@ 0x28
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40005400 	.word	0x40005400
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	40020400 	.word	0x40020400

08001fbc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a0b      	ldr	r2, [pc, #44]	@ (8001ff8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d10d      	bne.n	8001fea <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ffc <HAL_TIM_PWM_MspInit+0x40>)
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd6:	4a09      	ldr	r2, [pc, #36]	@ (8001ffc <HAL_TIM_PWM_MspInit+0x40>)
 8001fd8:	f043 0302 	orr.w	r3, r3, #2
 8001fdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fde:	4b07      	ldr	r3, [pc, #28]	@ (8001ffc <HAL_TIM_PWM_MspInit+0x40>)
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001fea:	bf00      	nop
 8001fec:	3714      	adds	r7, #20
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	40000400 	.word	0x40000400
 8001ffc:	40023800 	.word	0x40023800

08002000 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b08a      	sub	sp, #40	@ 0x28
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002008:	f107 0314 	add.w	r3, r7, #20
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	605a      	str	r2, [r3, #4]
 8002012:	609a      	str	r2, [r3, #8]
 8002014:	60da      	str	r2, [r3, #12]
 8002016:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a21      	ldr	r2, [pc, #132]	@ (80020a4 <HAL_TIM_MspPostInit+0xa4>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d13b      	bne.n	800209a <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	613b      	str	r3, [r7, #16]
 8002026:	4b20      	ldr	r3, [pc, #128]	@ (80020a8 <HAL_TIM_MspPostInit+0xa8>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202a:	4a1f      	ldr	r2, [pc, #124]	@ (80020a8 <HAL_TIM_MspPostInit+0xa8>)
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	6313      	str	r3, [r2, #48]	@ 0x30
 8002032:	4b1d      	ldr	r3, [pc, #116]	@ (80020a8 <HAL_TIM_MspPostInit+0xa8>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	613b      	str	r3, [r7, #16]
 800203c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	4b19      	ldr	r3, [pc, #100]	@ (80020a8 <HAL_TIM_MspPostInit+0xa8>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002046:	4a18      	ldr	r2, [pc, #96]	@ (80020a8 <HAL_TIM_MspPostInit+0xa8>)
 8002048:	f043 0302 	orr.w	r3, r3, #2
 800204c:	6313      	str	r3, [r2, #48]	@ 0x30
 800204e:	4b16      	ldr	r3, [pc, #88]	@ (80020a8 <HAL_TIM_MspPostInit+0xa8>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800205a:	2380      	movs	r3, #128	@ 0x80
 800205c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205e:	2302      	movs	r3, #2
 8002060:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002062:	2300      	movs	r3, #0
 8002064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002066:	2300      	movs	r3, #0
 8002068:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800206a:	2302      	movs	r3, #2
 800206c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206e:	f107 0314 	add.w	r3, r7, #20
 8002072:	4619      	mov	r1, r3
 8002074:	480d      	ldr	r0, [pc, #52]	@ (80020ac <HAL_TIM_MspPostInit+0xac>)
 8002076:	f000 fa91 	bl	800259c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800207a:	2310      	movs	r3, #16
 800207c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207e:	2302      	movs	r3, #2
 8002080:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002082:	2300      	movs	r3, #0
 8002084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002086:	2300      	movs	r3, #0
 8002088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800208a:	2302      	movs	r3, #2
 800208c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800208e:	f107 0314 	add.w	r3, r7, #20
 8002092:	4619      	mov	r1, r3
 8002094:	4806      	ldr	r0, [pc, #24]	@ (80020b0 <HAL_TIM_MspPostInit+0xb0>)
 8002096:	f000 fa81 	bl	800259c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800209a:	bf00      	nop
 800209c:	3728      	adds	r7, #40	@ 0x28
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40000400 	.word	0x40000400
 80020a8:	40023800 	.word	0x40023800
 80020ac:	40020000 	.word	0x40020000
 80020b0:	40020400 	.word	0x40020400

080020b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b08a      	sub	sp, #40	@ 0x28
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020bc:	f107 0314 	add.w	r3, r7, #20
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	609a      	str	r2, [r3, #8]
 80020c8:	60da      	str	r2, [r3, #12]
 80020ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a19      	ldr	r2, [pc, #100]	@ (8002138 <HAL_UART_MspInit+0x84>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d12b      	bne.n	800212e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	613b      	str	r3, [r7, #16]
 80020da:	4b18      	ldr	r3, [pc, #96]	@ (800213c <HAL_UART_MspInit+0x88>)
 80020dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020de:	4a17      	ldr	r2, [pc, #92]	@ (800213c <HAL_UART_MspInit+0x88>)
 80020e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80020e6:	4b15      	ldr	r3, [pc, #84]	@ (800213c <HAL_UART_MspInit+0x88>)
 80020e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ee:	613b      	str	r3, [r7, #16]
 80020f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	4b11      	ldr	r3, [pc, #68]	@ (800213c <HAL_UART_MspInit+0x88>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fa:	4a10      	ldr	r2, [pc, #64]	@ (800213c <HAL_UART_MspInit+0x88>)
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	6313      	str	r3, [r2, #48]	@ 0x30
 8002102:	4b0e      	ldr	r3, [pc, #56]	@ (800213c <HAL_UART_MspInit+0x88>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800210e:	230c      	movs	r3, #12
 8002110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002112:	2302      	movs	r3, #2
 8002114:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002116:	2300      	movs	r3, #0
 8002118:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800211a:	2303      	movs	r3, #3
 800211c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800211e:	2307      	movs	r3, #7
 8002120:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002122:	f107 0314 	add.w	r3, r7, #20
 8002126:	4619      	mov	r1, r3
 8002128:	4805      	ldr	r0, [pc, #20]	@ (8002140 <HAL_UART_MspInit+0x8c>)
 800212a:	f000 fa37 	bl	800259c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800212e:	bf00      	nop
 8002130:	3728      	adds	r7, #40	@ 0x28
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	40004400 	.word	0x40004400
 800213c:	40023800 	.word	0x40023800
 8002140:	40020000 	.word	0x40020000

08002144 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002148:	bf00      	nop
 800214a:	e7fd      	b.n	8002148 <NMI_Handler+0x4>

0800214c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002150:	bf00      	nop
 8002152:	e7fd      	b.n	8002150 <HardFault_Handler+0x4>

08002154 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002158:	bf00      	nop
 800215a:	e7fd      	b.n	8002158 <MemManage_Handler+0x4>

0800215c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002160:	bf00      	nop
 8002162:	e7fd      	b.n	8002160 <BusFault_Handler+0x4>

08002164 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002168:	bf00      	nop
 800216a:	e7fd      	b.n	8002168 <UsageFault_Handler+0x4>

0800216c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002170:	bf00      	nop
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800217a:	b480      	push	{r7}
 800217c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800217e:	bf00      	nop
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800219a:	f000 f8cd 	bl	8002338 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MPU6050_INT_Pin);
 80021a6:	2020      	movs	r0, #32
 80021a8:	f000 fba6 	bl	80028f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80021ac:	bf00      	nop
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021b8:	4a14      	ldr	r2, [pc, #80]	@ (800220c <_sbrk+0x5c>)
 80021ba:	4b15      	ldr	r3, [pc, #84]	@ (8002210 <_sbrk+0x60>)
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021c4:	4b13      	ldr	r3, [pc, #76]	@ (8002214 <_sbrk+0x64>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d102      	bne.n	80021d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021cc:	4b11      	ldr	r3, [pc, #68]	@ (8002214 <_sbrk+0x64>)
 80021ce:	4a12      	ldr	r2, [pc, #72]	@ (8002218 <_sbrk+0x68>)
 80021d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021d2:	4b10      	ldr	r3, [pc, #64]	@ (8002214 <_sbrk+0x64>)
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4413      	add	r3, r2
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d207      	bcs.n	80021f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021e0:	f003 fbfc 	bl	80059dc <__errno>
 80021e4:	4603      	mov	r3, r0
 80021e6:	220c      	movs	r2, #12
 80021e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021ee:	e009      	b.n	8002204 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021f0:	4b08      	ldr	r3, [pc, #32]	@ (8002214 <_sbrk+0x64>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021f6:	4b07      	ldr	r3, [pc, #28]	@ (8002214 <_sbrk+0x64>)
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4413      	add	r3, r2
 80021fe:	4a05      	ldr	r2, [pc, #20]	@ (8002214 <_sbrk+0x64>)
 8002200:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002202:	68fb      	ldr	r3, [r7, #12]
}
 8002204:	4618      	mov	r0, r3
 8002206:	3718      	adds	r7, #24
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	20020000 	.word	0x20020000
 8002210:	00000400 	.word	0x00000400
 8002214:	20000a84 	.word	0x20000a84
 8002218:	20000bd8 	.word	0x20000bd8

0800221c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002220:	4b06      	ldr	r3, [pc, #24]	@ (800223c <SystemInit+0x20>)
 8002222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002226:	4a05      	ldr	r2, [pc, #20]	@ (800223c <SystemInit+0x20>)
 8002228:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800222c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	e000ed00 	.word	0xe000ed00

08002240 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002240:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002278 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002244:	f7ff ffea 	bl	800221c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002248:	480c      	ldr	r0, [pc, #48]	@ (800227c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800224a:	490d      	ldr	r1, [pc, #52]	@ (8002280 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800224c:	4a0d      	ldr	r2, [pc, #52]	@ (8002284 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800224e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002250:	e002      	b.n	8002258 <LoopCopyDataInit>

08002252 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002252:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002254:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002256:	3304      	adds	r3, #4

08002258 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002258:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800225a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800225c:	d3f9      	bcc.n	8002252 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800225e:	4a0a      	ldr	r2, [pc, #40]	@ (8002288 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002260:	4c0a      	ldr	r4, [pc, #40]	@ (800228c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002262:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002264:	e001      	b.n	800226a <LoopFillZerobss>

08002266 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002266:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002268:	3204      	adds	r2, #4

0800226a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800226a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800226c:	d3fb      	bcc.n	8002266 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800226e:	f003 fbbb 	bl	80059e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002272:	f7fe fe61 	bl	8000f38 <main>
  bx  lr    
 8002276:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002278:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800227c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002280:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002284:	08006b10 	.word	0x08006b10
  ldr r2, =_sbss
 8002288:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800228c:	20000bd4 	.word	0x20000bd4

08002290 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002290:	e7fe      	b.n	8002290 <ADC_IRQHandler>
	...

08002294 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002298:	4b0e      	ldr	r3, [pc, #56]	@ (80022d4 <HAL_Init+0x40>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a0d      	ldr	r2, [pc, #52]	@ (80022d4 <HAL_Init+0x40>)
 800229e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022a4:	4b0b      	ldr	r3, [pc, #44]	@ (80022d4 <HAL_Init+0x40>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a0a      	ldr	r2, [pc, #40]	@ (80022d4 <HAL_Init+0x40>)
 80022aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022b0:	4b08      	ldr	r3, [pc, #32]	@ (80022d4 <HAL_Init+0x40>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a07      	ldr	r2, [pc, #28]	@ (80022d4 <HAL_Init+0x40>)
 80022b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022bc:	2003      	movs	r0, #3
 80022be:	f000 f92b 	bl	8002518 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022c2:	200f      	movs	r0, #15
 80022c4:	f000 f808 	bl	80022d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022c8:	f7ff fe08 	bl	8001edc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40023c00 	.word	0x40023c00

080022d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022e0:	4b12      	ldr	r3, [pc, #72]	@ (800232c <HAL_InitTick+0x54>)
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	4b12      	ldr	r3, [pc, #72]	@ (8002330 <HAL_InitTick+0x58>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	4619      	mov	r1, r3
 80022ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80022f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 f943 	bl	8002582 <HAL_SYSTICK_Config>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e00e      	b.n	8002324 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b0f      	cmp	r3, #15
 800230a:	d80a      	bhi.n	8002322 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800230c:	2200      	movs	r2, #0
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002314:	f000 f90b 	bl	800252e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002318:	4a06      	ldr	r2, [pc, #24]	@ (8002334 <HAL_InitTick+0x5c>)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800231e:	2300      	movs	r3, #0
 8002320:	e000      	b.n	8002324 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
}
 8002324:	4618      	mov	r0, r3
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	20000004 	.word	0x20000004
 8002330:	2000000c 	.word	0x2000000c
 8002334:	20000008 	.word	0x20000008

08002338 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800233c:	4b06      	ldr	r3, [pc, #24]	@ (8002358 <HAL_IncTick+0x20>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	461a      	mov	r2, r3
 8002342:	4b06      	ldr	r3, [pc, #24]	@ (800235c <HAL_IncTick+0x24>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4413      	add	r3, r2
 8002348:	4a04      	ldr	r2, [pc, #16]	@ (800235c <HAL_IncTick+0x24>)
 800234a:	6013      	str	r3, [r2, #0]
}
 800234c:	bf00      	nop
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	2000000c 	.word	0x2000000c
 800235c:	20000a88 	.word	0x20000a88

08002360 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  return uwTick;
 8002364:	4b03      	ldr	r3, [pc, #12]	@ (8002374 <HAL_GetTick+0x14>)
 8002366:	681b      	ldr	r3, [r3, #0]
}
 8002368:	4618      	mov	r0, r3
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	20000a88 	.word	0x20000a88

08002378 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002388:	4b0c      	ldr	r3, [pc, #48]	@ (80023bc <__NVIC_SetPriorityGrouping+0x44>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002394:	4013      	ands	r3, r2
 8002396:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023aa:	4a04      	ldr	r2, [pc, #16]	@ (80023bc <__NVIC_SetPriorityGrouping+0x44>)
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	60d3      	str	r3, [r2, #12]
}
 80023b0:	bf00      	nop
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	e000ed00 	.word	0xe000ed00

080023c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023c4:	4b04      	ldr	r3, [pc, #16]	@ (80023d8 <__NVIC_GetPriorityGrouping+0x18>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	0a1b      	lsrs	r3, r3, #8
 80023ca:	f003 0307 	and.w	r3, r3, #7
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	e000ed00 	.word	0xe000ed00

080023dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	db0b      	blt.n	8002406 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ee:	79fb      	ldrb	r3, [r7, #7]
 80023f0:	f003 021f 	and.w	r2, r3, #31
 80023f4:	4907      	ldr	r1, [pc, #28]	@ (8002414 <__NVIC_EnableIRQ+0x38>)
 80023f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fa:	095b      	lsrs	r3, r3, #5
 80023fc:	2001      	movs	r0, #1
 80023fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	e000e100 	.word	0xe000e100

08002418 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	6039      	str	r1, [r7, #0]
 8002422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002428:	2b00      	cmp	r3, #0
 800242a:	db0a      	blt.n	8002442 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	b2da      	uxtb	r2, r3
 8002430:	490c      	ldr	r1, [pc, #48]	@ (8002464 <__NVIC_SetPriority+0x4c>)
 8002432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002436:	0112      	lsls	r2, r2, #4
 8002438:	b2d2      	uxtb	r2, r2
 800243a:	440b      	add	r3, r1
 800243c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002440:	e00a      	b.n	8002458 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	b2da      	uxtb	r2, r3
 8002446:	4908      	ldr	r1, [pc, #32]	@ (8002468 <__NVIC_SetPriority+0x50>)
 8002448:	79fb      	ldrb	r3, [r7, #7]
 800244a:	f003 030f 	and.w	r3, r3, #15
 800244e:	3b04      	subs	r3, #4
 8002450:	0112      	lsls	r2, r2, #4
 8002452:	b2d2      	uxtb	r2, r2
 8002454:	440b      	add	r3, r1
 8002456:	761a      	strb	r2, [r3, #24]
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	e000e100 	.word	0xe000e100
 8002468:	e000ed00 	.word	0xe000ed00

0800246c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800246c:	b480      	push	{r7}
 800246e:	b089      	sub	sp, #36	@ 0x24
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f003 0307 	and.w	r3, r3, #7
 800247e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	f1c3 0307 	rsb	r3, r3, #7
 8002486:	2b04      	cmp	r3, #4
 8002488:	bf28      	it	cs
 800248a:	2304      	movcs	r3, #4
 800248c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	3304      	adds	r3, #4
 8002492:	2b06      	cmp	r3, #6
 8002494:	d902      	bls.n	800249c <NVIC_EncodePriority+0x30>
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	3b03      	subs	r3, #3
 800249a:	e000      	b.n	800249e <NVIC_EncodePriority+0x32>
 800249c:	2300      	movs	r3, #0
 800249e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	43da      	mvns	r2, r3
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	401a      	ands	r2, r3
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024b4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	fa01 f303 	lsl.w	r3, r1, r3
 80024be:	43d9      	mvns	r1, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c4:	4313      	orrs	r3, r2
         );
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3724      	adds	r7, #36	@ 0x24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
	...

080024d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	3b01      	subs	r3, #1
 80024e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024e4:	d301      	bcc.n	80024ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024e6:	2301      	movs	r3, #1
 80024e8:	e00f      	b.n	800250a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002514 <SysTick_Config+0x40>)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3b01      	subs	r3, #1
 80024f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024f2:	210f      	movs	r1, #15
 80024f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80024f8:	f7ff ff8e 	bl	8002418 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024fc:	4b05      	ldr	r3, [pc, #20]	@ (8002514 <SysTick_Config+0x40>)
 80024fe:	2200      	movs	r2, #0
 8002500:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002502:	4b04      	ldr	r3, [pc, #16]	@ (8002514 <SysTick_Config+0x40>)
 8002504:	2207      	movs	r2, #7
 8002506:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	e000e010 	.word	0xe000e010

08002518 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f7ff ff29 	bl	8002378 <__NVIC_SetPriorityGrouping>
}
 8002526:	bf00      	nop
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800252e:	b580      	push	{r7, lr}
 8002530:	b086      	sub	sp, #24
 8002532:	af00      	add	r7, sp, #0
 8002534:	4603      	mov	r3, r0
 8002536:	60b9      	str	r1, [r7, #8]
 8002538:	607a      	str	r2, [r7, #4]
 800253a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800253c:	2300      	movs	r3, #0
 800253e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002540:	f7ff ff3e 	bl	80023c0 <__NVIC_GetPriorityGrouping>
 8002544:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	68b9      	ldr	r1, [r7, #8]
 800254a:	6978      	ldr	r0, [r7, #20]
 800254c:	f7ff ff8e 	bl	800246c <NVIC_EncodePriority>
 8002550:	4602      	mov	r2, r0
 8002552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002556:	4611      	mov	r1, r2
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff ff5d 	bl	8002418 <__NVIC_SetPriority>
}
 800255e:	bf00      	nop
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b082      	sub	sp, #8
 800256a:	af00      	add	r7, sp, #0
 800256c:	4603      	mov	r3, r0
 800256e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff ff31 	bl	80023dc <__NVIC_EnableIRQ>
}
 800257a:	bf00      	nop
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b082      	sub	sp, #8
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7ff ffa2 	bl	80024d4 <SysTick_Config>
 8002590:	4603      	mov	r3, r0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
	...

0800259c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800259c:	b480      	push	{r7}
 800259e:	b089      	sub	sp, #36	@ 0x24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025a6:	2300      	movs	r3, #0
 80025a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025ae:	2300      	movs	r3, #0
 80025b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025b2:	2300      	movs	r3, #0
 80025b4:	61fb      	str	r3, [r7, #28]
 80025b6:	e165      	b.n	8002884 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025b8:	2201      	movs	r2, #1
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	697a      	ldr	r2, [r7, #20]
 80025c8:	4013      	ands	r3, r2
 80025ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	f040 8154 	bne.w	800287e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f003 0303 	and.w	r3, r3, #3
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d005      	beq.n	80025ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d130      	bne.n	8002650 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	2203      	movs	r2, #3
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	43db      	mvns	r3, r3
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	4013      	ands	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	68da      	ldr	r2, [r3, #12]
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4313      	orrs	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002624:	2201      	movs	r2, #1
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	43db      	mvns	r3, r3
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	4013      	ands	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	091b      	lsrs	r3, r3, #4
 800263a:	f003 0201 	and.w	r2, r3, #1
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	4313      	orrs	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f003 0303 	and.w	r3, r3, #3
 8002658:	2b03      	cmp	r3, #3
 800265a:	d017      	beq.n	800268c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	2203      	movs	r2, #3
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	43db      	mvns	r3, r3
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4013      	ands	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4313      	orrs	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f003 0303 	and.w	r3, r3, #3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d123      	bne.n	80026e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	08da      	lsrs	r2, r3, #3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3208      	adds	r2, #8
 80026a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	f003 0307 	and.w	r3, r3, #7
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	220f      	movs	r2, #15
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	43db      	mvns	r3, r3
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4013      	ands	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	691a      	ldr	r2, [r3, #16]
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	f003 0307 	and.w	r3, r3, #7
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	08da      	lsrs	r2, r3, #3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	3208      	adds	r2, #8
 80026da:	69b9      	ldr	r1, [r7, #24]
 80026dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	2203      	movs	r2, #3
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	43db      	mvns	r3, r3
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4013      	ands	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f003 0203 	and.w	r2, r3, #3
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	4313      	orrs	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800271c:	2b00      	cmp	r3, #0
 800271e:	f000 80ae 	beq.w	800287e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	4b5d      	ldr	r3, [pc, #372]	@ (800289c <HAL_GPIO_Init+0x300>)
 8002728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800272a:	4a5c      	ldr	r2, [pc, #368]	@ (800289c <HAL_GPIO_Init+0x300>)
 800272c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002730:	6453      	str	r3, [r2, #68]	@ 0x44
 8002732:	4b5a      	ldr	r3, [pc, #360]	@ (800289c <HAL_GPIO_Init+0x300>)
 8002734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002736:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800273e:	4a58      	ldr	r2, [pc, #352]	@ (80028a0 <HAL_GPIO_Init+0x304>)
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	089b      	lsrs	r3, r3, #2
 8002744:	3302      	adds	r3, #2
 8002746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800274a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	f003 0303 	and.w	r3, r3, #3
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	220f      	movs	r2, #15
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	43db      	mvns	r3, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4013      	ands	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a4f      	ldr	r2, [pc, #316]	@ (80028a4 <HAL_GPIO_Init+0x308>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d025      	beq.n	80027b6 <HAL_GPIO_Init+0x21a>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a4e      	ldr	r2, [pc, #312]	@ (80028a8 <HAL_GPIO_Init+0x30c>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d01f      	beq.n	80027b2 <HAL_GPIO_Init+0x216>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a4d      	ldr	r2, [pc, #308]	@ (80028ac <HAL_GPIO_Init+0x310>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d019      	beq.n	80027ae <HAL_GPIO_Init+0x212>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a4c      	ldr	r2, [pc, #304]	@ (80028b0 <HAL_GPIO_Init+0x314>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d013      	beq.n	80027aa <HAL_GPIO_Init+0x20e>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a4b      	ldr	r2, [pc, #300]	@ (80028b4 <HAL_GPIO_Init+0x318>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d00d      	beq.n	80027a6 <HAL_GPIO_Init+0x20a>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a4a      	ldr	r2, [pc, #296]	@ (80028b8 <HAL_GPIO_Init+0x31c>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d007      	beq.n	80027a2 <HAL_GPIO_Init+0x206>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a49      	ldr	r2, [pc, #292]	@ (80028bc <HAL_GPIO_Init+0x320>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d101      	bne.n	800279e <HAL_GPIO_Init+0x202>
 800279a:	2306      	movs	r3, #6
 800279c:	e00c      	b.n	80027b8 <HAL_GPIO_Init+0x21c>
 800279e:	2307      	movs	r3, #7
 80027a0:	e00a      	b.n	80027b8 <HAL_GPIO_Init+0x21c>
 80027a2:	2305      	movs	r3, #5
 80027a4:	e008      	b.n	80027b8 <HAL_GPIO_Init+0x21c>
 80027a6:	2304      	movs	r3, #4
 80027a8:	e006      	b.n	80027b8 <HAL_GPIO_Init+0x21c>
 80027aa:	2303      	movs	r3, #3
 80027ac:	e004      	b.n	80027b8 <HAL_GPIO_Init+0x21c>
 80027ae:	2302      	movs	r3, #2
 80027b0:	e002      	b.n	80027b8 <HAL_GPIO_Init+0x21c>
 80027b2:	2301      	movs	r3, #1
 80027b4:	e000      	b.n	80027b8 <HAL_GPIO_Init+0x21c>
 80027b6:	2300      	movs	r3, #0
 80027b8:	69fa      	ldr	r2, [r7, #28]
 80027ba:	f002 0203 	and.w	r2, r2, #3
 80027be:	0092      	lsls	r2, r2, #2
 80027c0:	4093      	lsls	r3, r2
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027c8:	4935      	ldr	r1, [pc, #212]	@ (80028a0 <HAL_GPIO_Init+0x304>)
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	089b      	lsrs	r3, r3, #2
 80027ce:	3302      	adds	r3, #2
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027d6:	4b3a      	ldr	r3, [pc, #232]	@ (80028c0 <HAL_GPIO_Init+0x324>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	43db      	mvns	r3, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4013      	ands	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027fa:	4a31      	ldr	r2, [pc, #196]	@ (80028c0 <HAL_GPIO_Init+0x324>)
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002800:	4b2f      	ldr	r3, [pc, #188]	@ (80028c0 <HAL_GPIO_Init+0x324>)
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	43db      	mvns	r3, r3
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4013      	ands	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d003      	beq.n	8002824 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	4313      	orrs	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002824:	4a26      	ldr	r2, [pc, #152]	@ (80028c0 <HAL_GPIO_Init+0x324>)
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800282a:	4b25      	ldr	r3, [pc, #148]	@ (80028c0 <HAL_GPIO_Init+0x324>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	43db      	mvns	r3, r3
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	4013      	ands	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	4313      	orrs	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800284e:	4a1c      	ldr	r2, [pc, #112]	@ (80028c0 <HAL_GPIO_Init+0x324>)
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002854:	4b1a      	ldr	r3, [pc, #104]	@ (80028c0 <HAL_GPIO_Init+0x324>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	43db      	mvns	r3, r3
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	4013      	ands	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d003      	beq.n	8002878 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	4313      	orrs	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002878:	4a11      	ldr	r2, [pc, #68]	@ (80028c0 <HAL_GPIO_Init+0x324>)
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	3301      	adds	r3, #1
 8002882:	61fb      	str	r3, [r7, #28]
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	2b0f      	cmp	r3, #15
 8002888:	f67f ae96 	bls.w	80025b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800288c:	bf00      	nop
 800288e:	bf00      	nop
 8002890:	3724      	adds	r7, #36	@ 0x24
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	40023800 	.word	0x40023800
 80028a0:	40013800 	.word	0x40013800
 80028a4:	40020000 	.word	0x40020000
 80028a8:	40020400 	.word	0x40020400
 80028ac:	40020800 	.word	0x40020800
 80028b0:	40020c00 	.word	0x40020c00
 80028b4:	40021000 	.word	0x40021000
 80028b8:	40021400 	.word	0x40021400
 80028bc:	40021800 	.word	0x40021800
 80028c0:	40013c00 	.word	0x40013c00

080028c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	460b      	mov	r3, r1
 80028ce:	807b      	strh	r3, [r7, #2]
 80028d0:	4613      	mov	r3, r2
 80028d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028d4:	787b      	ldrb	r3, [r7, #1]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028da:	887a      	ldrh	r2, [r7, #2]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028e0:	e003      	b.n	80028ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028e2:	887b      	ldrh	r3, [r7, #2]
 80028e4:	041a      	lsls	r2, r3, #16
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	619a      	str	r2, [r3, #24]
}
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
	...

080028f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	4603      	mov	r3, r0
 8002900:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002902:	4b08      	ldr	r3, [pc, #32]	@ (8002924 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002904:	695a      	ldr	r2, [r3, #20]
 8002906:	88fb      	ldrh	r3, [r7, #6]
 8002908:	4013      	ands	r3, r2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d006      	beq.n	800291c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800290e:	4a05      	ldr	r2, [pc, #20]	@ (8002924 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002910:	88fb      	ldrh	r3, [r7, #6]
 8002912:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002914:	88fb      	ldrh	r3, [r7, #6]
 8002916:	4618      	mov	r0, r3
 8002918:	f7ff f8aa 	bl	8001a70 <HAL_GPIO_EXTI_Callback>
  }
}
 800291c:	bf00      	nop
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40013c00 	.word	0x40013c00

08002928 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e12b      	b.n	8002b92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d106      	bne.n	8002954 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f7ff faec 	bl	8001f2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2224      	movs	r2, #36	@ 0x24
 8002958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 0201 	bic.w	r2, r2, #1
 800296a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800297a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800298a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800298c:	f001 fa10 	bl	8003db0 <HAL_RCC_GetPCLK1Freq>
 8002990:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	4a81      	ldr	r2, [pc, #516]	@ (8002b9c <HAL_I2C_Init+0x274>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d807      	bhi.n	80029ac <HAL_I2C_Init+0x84>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	4a80      	ldr	r2, [pc, #512]	@ (8002ba0 <HAL_I2C_Init+0x278>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	bf94      	ite	ls
 80029a4:	2301      	movls	r3, #1
 80029a6:	2300      	movhi	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	e006      	b.n	80029ba <HAL_I2C_Init+0x92>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4a7d      	ldr	r2, [pc, #500]	@ (8002ba4 <HAL_I2C_Init+0x27c>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	bf94      	ite	ls
 80029b4:	2301      	movls	r3, #1
 80029b6:	2300      	movhi	r3, #0
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e0e7      	b.n	8002b92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	4a78      	ldr	r2, [pc, #480]	@ (8002ba8 <HAL_I2C_Init+0x280>)
 80029c6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ca:	0c9b      	lsrs	r3, r3, #18
 80029cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68ba      	ldr	r2, [r7, #8]
 80029de:	430a      	orrs	r2, r1
 80029e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	4a6a      	ldr	r2, [pc, #424]	@ (8002b9c <HAL_I2C_Init+0x274>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d802      	bhi.n	80029fc <HAL_I2C_Init+0xd4>
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	3301      	adds	r3, #1
 80029fa:	e009      	b.n	8002a10 <HAL_I2C_Init+0xe8>
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002a02:	fb02 f303 	mul.w	r3, r2, r3
 8002a06:	4a69      	ldr	r2, [pc, #420]	@ (8002bac <HAL_I2C_Init+0x284>)
 8002a08:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0c:	099b      	lsrs	r3, r3, #6
 8002a0e:	3301      	adds	r3, #1
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	6812      	ldr	r2, [r2, #0]
 8002a14:	430b      	orrs	r3, r1
 8002a16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002a22:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	495c      	ldr	r1, [pc, #368]	@ (8002b9c <HAL_I2C_Init+0x274>)
 8002a2c:	428b      	cmp	r3, r1
 8002a2e:	d819      	bhi.n	8002a64 <HAL_I2C_Init+0x13c>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	1e59      	subs	r1, r3, #1
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a3e:	1c59      	adds	r1, r3, #1
 8002a40:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002a44:	400b      	ands	r3, r1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00a      	beq.n	8002a60 <HAL_I2C_Init+0x138>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	1e59      	subs	r1, r3, #1
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a58:	3301      	adds	r3, #1
 8002a5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a5e:	e051      	b.n	8002b04 <HAL_I2C_Init+0x1dc>
 8002a60:	2304      	movs	r3, #4
 8002a62:	e04f      	b.n	8002b04 <HAL_I2C_Init+0x1dc>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d111      	bne.n	8002a90 <HAL_I2C_Init+0x168>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	1e58      	subs	r0, r3, #1
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6859      	ldr	r1, [r3, #4]
 8002a74:	460b      	mov	r3, r1
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	440b      	add	r3, r1
 8002a7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a7e:	3301      	adds	r3, #1
 8002a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	bf0c      	ite	eq
 8002a88:	2301      	moveq	r3, #1
 8002a8a:	2300      	movne	r3, #0
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	e012      	b.n	8002ab6 <HAL_I2C_Init+0x18e>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	1e58      	subs	r0, r3, #1
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6859      	ldr	r1, [r3, #4]
 8002a98:	460b      	mov	r3, r1
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	0099      	lsls	r1, r3, #2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	bf0c      	ite	eq
 8002ab0:	2301      	moveq	r3, #1
 8002ab2:	2300      	movne	r3, #0
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <HAL_I2C_Init+0x196>
 8002aba:	2301      	movs	r3, #1
 8002abc:	e022      	b.n	8002b04 <HAL_I2C_Init+0x1dc>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10e      	bne.n	8002ae4 <HAL_I2C_Init+0x1bc>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	1e58      	subs	r0, r3, #1
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6859      	ldr	r1, [r3, #4]
 8002ace:	460b      	mov	r3, r1
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	440b      	add	r3, r1
 8002ad4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ad8:	3301      	adds	r3, #1
 8002ada:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ade:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ae2:	e00f      	b.n	8002b04 <HAL_I2C_Init+0x1dc>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	1e58      	subs	r0, r3, #1
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6859      	ldr	r1, [r3, #4]
 8002aec:	460b      	mov	r3, r1
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	0099      	lsls	r1, r3, #2
 8002af4:	440b      	add	r3, r1
 8002af6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002afa:	3301      	adds	r3, #1
 8002afc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b00:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	6809      	ldr	r1, [r1, #0]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	69da      	ldr	r2, [r3, #28]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002b32:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6911      	ldr	r1, [r2, #16]
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	68d2      	ldr	r2, [r2, #12]
 8002b3e:	4311      	orrs	r1, r2
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	6812      	ldr	r2, [r2, #0]
 8002b44:	430b      	orrs	r3, r1
 8002b46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	695a      	ldr	r2, [r3, #20]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	430a      	orrs	r2, r1
 8002b62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f042 0201 	orr.w	r2, r2, #1
 8002b72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2220      	movs	r2, #32
 8002b7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	000186a0 	.word	0x000186a0
 8002ba0:	001e847f 	.word	0x001e847f
 8002ba4:	003d08ff 	.word	0x003d08ff
 8002ba8:	431bde83 	.word	0x431bde83
 8002bac:	10624dd3 	.word	0x10624dd3

08002bb0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b088      	sub	sp, #32
 8002bb4:	af02      	add	r7, sp, #8
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	4608      	mov	r0, r1
 8002bba:	4611      	mov	r1, r2
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	817b      	strh	r3, [r7, #10]
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	813b      	strh	r3, [r7, #8]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bca:	f7ff fbc9 	bl	8002360 <HAL_GetTick>
 8002bce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b20      	cmp	r3, #32
 8002bda:	f040 80d9 	bne.w	8002d90 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	9300      	str	r3, [sp, #0]
 8002be2:	2319      	movs	r3, #25
 8002be4:	2201      	movs	r2, #1
 8002be6:	496d      	ldr	r1, [pc, #436]	@ (8002d9c <HAL_I2C_Mem_Write+0x1ec>)
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	f000 fdb9 	bl	8003760 <I2C_WaitOnFlagUntilTimeout>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	e0cc      	b.n	8002d92 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d101      	bne.n	8002c06 <HAL_I2C_Mem_Write+0x56>
 8002c02:	2302      	movs	r3, #2
 8002c04:	e0c5      	b.n	8002d92 <HAL_I2C_Mem_Write+0x1e2>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d007      	beq.n	8002c2c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f042 0201 	orr.w	r2, r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2221      	movs	r2, #33	@ 0x21
 8002c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2240      	movs	r2, #64	@ 0x40
 8002c48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6a3a      	ldr	r2, [r7, #32]
 8002c56:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002c5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4a4d      	ldr	r2, [pc, #308]	@ (8002da0 <HAL_I2C_Mem_Write+0x1f0>)
 8002c6c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c6e:	88f8      	ldrh	r0, [r7, #6]
 8002c70:	893a      	ldrh	r2, [r7, #8]
 8002c72:	8979      	ldrh	r1, [r7, #10]
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	9301      	str	r3, [sp, #4]
 8002c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f000 fbf0 	bl	8003464 <I2C_RequestMemoryWrite>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d052      	beq.n	8002d30 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e081      	b.n	8002d92 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f000 fe7e 	bl	8003994 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00d      	beq.n	8002cba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	d107      	bne.n	8002cb6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cb4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e06b      	b.n	8002d92 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cbe:	781a      	ldrb	r2, [r3, #0]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cca:	1c5a      	adds	r2, r3, #1
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b04      	cmp	r3, #4
 8002cf6:	d11b      	bne.n	8002d30 <HAL_I2C_Mem_Write+0x180>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d017      	beq.n	8002d30 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d04:	781a      	ldrb	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d10:	1c5a      	adds	r2, r3, #1
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1aa      	bne.n	8002c8e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f000 fe71 	bl	8003a24 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00d      	beq.n	8002d64 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4c:	2b04      	cmp	r3, #4
 8002d4e:	d107      	bne.n	8002d60 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d5e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e016      	b.n	8002d92 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2220      	movs	r2, #32
 8002d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	e000      	b.n	8002d92 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002d90:	2302      	movs	r3, #2
  }
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3718      	adds	r7, #24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	00100002 	.word	0x00100002
 8002da0:	ffff0000 	.word	0xffff0000

08002da4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b08c      	sub	sp, #48	@ 0x30
 8002da8:	af02      	add	r7, sp, #8
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	4608      	mov	r0, r1
 8002dae:	4611      	mov	r1, r2
 8002db0:	461a      	mov	r2, r3
 8002db2:	4603      	mov	r3, r0
 8002db4:	817b      	strh	r3, [r7, #10]
 8002db6:	460b      	mov	r3, r1
 8002db8:	813b      	strh	r3, [r7, #8]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002dbe:	f7ff facf 	bl	8002360 <HAL_GetTick>
 8002dc2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2b20      	cmp	r3, #32
 8002dce:	f040 8214 	bne.w	80031fa <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd4:	9300      	str	r3, [sp, #0]
 8002dd6:	2319      	movs	r3, #25
 8002dd8:	2201      	movs	r2, #1
 8002dda:	497b      	ldr	r1, [pc, #492]	@ (8002fc8 <HAL_I2C_Mem_Read+0x224>)
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f000 fcbf 	bl	8003760 <I2C_WaitOnFlagUntilTimeout>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002de8:	2302      	movs	r3, #2
 8002dea:	e207      	b.n	80031fc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d101      	bne.n	8002dfa <HAL_I2C_Mem_Read+0x56>
 8002df6:	2302      	movs	r3, #2
 8002df8:	e200      	b.n	80031fc <HAL_I2C_Mem_Read+0x458>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d007      	beq.n	8002e20 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f042 0201 	orr.w	r2, r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2222      	movs	r2, #34	@ 0x22
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2240      	movs	r2, #64	@ 0x40
 8002e3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e4a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002e50:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	4a5b      	ldr	r2, [pc, #364]	@ (8002fcc <HAL_I2C_Mem_Read+0x228>)
 8002e60:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e62:	88f8      	ldrh	r0, [r7, #6]
 8002e64:	893a      	ldrh	r2, [r7, #8]
 8002e66:	8979      	ldrh	r1, [r7, #10]
 8002e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6a:	9301      	str	r3, [sp, #4]
 8002e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e6e:	9300      	str	r3, [sp, #0]
 8002e70:	4603      	mov	r3, r0
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f000 fb8c 	bl	8003590 <I2C_RequestMemoryRead>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e1bc      	b.n	80031fc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d113      	bne.n	8002eb2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	623b      	str	r3, [r7, #32]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	623b      	str	r3, [r7, #32]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	623b      	str	r3, [r7, #32]
 8002e9e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	e190      	b.n	80031d4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d11b      	bne.n	8002ef2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ec8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61fb      	str	r3, [r7, #28]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	61fb      	str	r3, [r7, #28]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	61fb      	str	r3, [r7, #28]
 8002ede:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	e170      	b.n	80031d4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d11b      	bne.n	8002f32 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f08:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	61bb      	str	r3, [r7, #24]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	695b      	ldr	r3, [r3, #20]
 8002f24:	61bb      	str	r3, [r7, #24]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	61bb      	str	r3, [r7, #24]
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	e150      	b.n	80031d4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f32:	2300      	movs	r3, #0
 8002f34:	617b      	str	r3, [r7, #20]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	617b      	str	r3, [r7, #20]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	617b      	str	r3, [r7, #20]
 8002f46:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002f48:	e144      	b.n	80031d4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f4e:	2b03      	cmp	r3, #3
 8002f50:	f200 80f1 	bhi.w	8003136 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d123      	bne.n	8002fa4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f5e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f000 fda7 	bl	8003ab4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e145      	b.n	80031fc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	691a      	ldr	r2, [r3, #16]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7a:	b2d2      	uxtb	r2, r2
 8002f7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f82:	1c5a      	adds	r2, r3, #1
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002fa2:	e117      	b.n	80031d4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d14e      	bne.n	800304a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fae:	9300      	str	r3, [sp, #0]
 8002fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	4906      	ldr	r1, [pc, #24]	@ (8002fd0 <HAL_I2C_Mem_Read+0x22c>)
 8002fb6:	68f8      	ldr	r0, [r7, #12]
 8002fb8:	f000 fbd2 	bl	8003760 <I2C_WaitOnFlagUntilTimeout>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d008      	beq.n	8002fd4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e11a      	b.n	80031fc <HAL_I2C_Mem_Read+0x458>
 8002fc6:	bf00      	nop
 8002fc8:	00100002 	.word	0x00100002
 8002fcc:	ffff0000 	.word	0xffff0000
 8002fd0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fe2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	691a      	ldr	r2, [r3, #16]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff6:	1c5a      	adds	r2, r3, #1
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003000:	3b01      	subs	r3, #1
 8003002:	b29a      	uxth	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800300c:	b29b      	uxth	r3, r3
 800300e:	3b01      	subs	r3, #1
 8003010:	b29a      	uxth	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	691a      	ldr	r2, [r3, #16]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003020:	b2d2      	uxtb	r2, r2
 8003022:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003028:	1c5a      	adds	r2, r3, #1
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003032:	3b01      	subs	r3, #1
 8003034:	b29a      	uxth	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800303e:	b29b      	uxth	r3, r3
 8003040:	3b01      	subs	r3, #1
 8003042:	b29a      	uxth	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003048:	e0c4      	b.n	80031d4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800304a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304c:	9300      	str	r3, [sp, #0]
 800304e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003050:	2200      	movs	r2, #0
 8003052:	496c      	ldr	r1, [pc, #432]	@ (8003204 <HAL_I2C_Mem_Read+0x460>)
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 fb83 	bl	8003760 <I2C_WaitOnFlagUntilTimeout>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e0cb      	b.n	80031fc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003072:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	691a      	ldr	r2, [r3, #16]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307e:	b2d2      	uxtb	r2, r2
 8003080:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003086:	1c5a      	adds	r2, r3, #1
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003090:	3b01      	subs	r3, #1
 8003092:	b29a      	uxth	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800309c:	b29b      	uxth	r3, r3
 800309e:	3b01      	subs	r3, #1
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030ac:	2200      	movs	r2, #0
 80030ae:	4955      	ldr	r1, [pc, #340]	@ (8003204 <HAL_I2C_Mem_Read+0x460>)
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f000 fb55 	bl	8003760 <I2C_WaitOnFlagUntilTimeout>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e09d      	b.n	80031fc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	691a      	ldr	r2, [r3, #16]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030da:	b2d2      	uxtb	r2, r2
 80030dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e2:	1c5a      	adds	r2, r3, #1
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ec:	3b01      	subs	r3, #1
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	3b01      	subs	r3, #1
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	691a      	ldr	r2, [r3, #16]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310c:	b2d2      	uxtb	r2, r2
 800310e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003114:	1c5a      	adds	r2, r3, #1
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800311e:	3b01      	subs	r3, #1
 8003120:	b29a      	uxth	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800312a:	b29b      	uxth	r3, r3
 800312c:	3b01      	subs	r3, #1
 800312e:	b29a      	uxth	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003134:	e04e      	b.n	80031d4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003136:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003138:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 fcba 	bl	8003ab4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e058      	b.n	80031fc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	691a      	ldr	r2, [r3, #16]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003154:	b2d2      	uxtb	r2, r2
 8003156:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315c:	1c5a      	adds	r2, r3, #1
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003166:	3b01      	subs	r3, #1
 8003168:	b29a      	uxth	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003172:	b29b      	uxth	r3, r3
 8003174:	3b01      	subs	r3, #1
 8003176:	b29a      	uxth	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	f003 0304 	and.w	r3, r3, #4
 8003186:	2b04      	cmp	r3, #4
 8003188:	d124      	bne.n	80031d4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800318e:	2b03      	cmp	r3, #3
 8003190:	d107      	bne.n	80031a2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031a0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	691a      	ldr	r2, [r3, #16]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ac:	b2d2      	uxtb	r2, r2
 80031ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b4:	1c5a      	adds	r2, r3, #1
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031be:	3b01      	subs	r3, #1
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	3b01      	subs	r3, #1
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f47f aeb6 	bne.w	8002f4a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2220      	movs	r2, #32
 80031e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80031f6:	2300      	movs	r3, #0
 80031f8:	e000      	b.n	80031fc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80031fa:	2302      	movs	r3, #2
  }
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3728      	adds	r7, #40	@ 0x28
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	00010004 	.word	0x00010004

08003208 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b08a      	sub	sp, #40	@ 0x28
 800320c:	af02      	add	r7, sp, #8
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	607a      	str	r2, [r7, #4]
 8003212:	603b      	str	r3, [r7, #0]
 8003214:	460b      	mov	r3, r1
 8003216:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003218:	f7ff f8a2 	bl	8002360 <HAL_GetTick>
 800321c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800321e:	2300      	movs	r3, #0
 8003220:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b20      	cmp	r3, #32
 800322c:	f040 8111 	bne.w	8003452 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	2319      	movs	r3, #25
 8003236:	2201      	movs	r2, #1
 8003238:	4988      	ldr	r1, [pc, #544]	@ (800345c <HAL_I2C_IsDeviceReady+0x254>)
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f000 fa90 	bl	8003760 <I2C_WaitOnFlagUntilTimeout>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003246:	2302      	movs	r3, #2
 8003248:	e104      	b.n	8003454 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003250:	2b01      	cmp	r3, #1
 8003252:	d101      	bne.n	8003258 <HAL_I2C_IsDeviceReady+0x50>
 8003254:	2302      	movs	r3, #2
 8003256:	e0fd      	b.n	8003454 <HAL_I2C_IsDeviceReady+0x24c>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b01      	cmp	r3, #1
 800326c:	d007      	beq.n	800327e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f042 0201 	orr.w	r2, r2, #1
 800327c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800328c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2224      	movs	r2, #36	@ 0x24
 8003292:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	4a70      	ldr	r2, [pc, #448]	@ (8003460 <HAL_I2C_IsDeviceReady+0x258>)
 80032a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032b0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	9300      	str	r3, [sp, #0]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f000 fa4e 	bl	8003760 <I2C_WaitOnFlagUntilTimeout>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00d      	beq.n	80032e6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032d8:	d103      	bne.n	80032e2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032e0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e0b6      	b.n	8003454 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032e6:	897b      	ldrh	r3, [r7, #10]
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	461a      	mov	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80032f4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80032f6:	f7ff f833 	bl	8002360 <HAL_GetTick>
 80032fa:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b02      	cmp	r3, #2
 8003308:	bf0c      	ite	eq
 800330a:	2301      	moveq	r3, #1
 800330c:	2300      	movne	r3, #0
 800330e:	b2db      	uxtb	r3, r3
 8003310:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800331c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003320:	bf0c      	ite	eq
 8003322:	2301      	moveq	r3, #1
 8003324:	2300      	movne	r3, #0
 8003326:	b2db      	uxtb	r3, r3
 8003328:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800332a:	e025      	b.n	8003378 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800332c:	f7ff f818 	bl	8002360 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	429a      	cmp	r2, r3
 800333a:	d302      	bcc.n	8003342 <HAL_I2C_IsDeviceReady+0x13a>
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d103      	bne.n	800334a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	22a0      	movs	r2, #160	@ 0xa0
 8003346:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	695b      	ldr	r3, [r3, #20]
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b02      	cmp	r3, #2
 8003356:	bf0c      	ite	eq
 8003358:	2301      	moveq	r3, #1
 800335a:	2300      	movne	r3, #0
 800335c:	b2db      	uxtb	r3, r3
 800335e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800336a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800336e:	bf0c      	ite	eq
 8003370:	2301      	moveq	r3, #1
 8003372:	2300      	movne	r3, #0
 8003374:	b2db      	uxtb	r3, r3
 8003376:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800337e:	b2db      	uxtb	r3, r3
 8003380:	2ba0      	cmp	r3, #160	@ 0xa0
 8003382:	d005      	beq.n	8003390 <HAL_I2C_IsDeviceReady+0x188>
 8003384:	7dfb      	ldrb	r3, [r7, #23]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d102      	bne.n	8003390 <HAL_I2C_IsDeviceReady+0x188>
 800338a:	7dbb      	ldrb	r3, [r7, #22]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d0cd      	beq.n	800332c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2220      	movs	r2, #32
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d129      	bne.n	80033fa <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033b4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033b6:	2300      	movs	r3, #0
 80033b8:	613b      	str	r3, [r7, #16]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	613b      	str	r3, [r7, #16]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	613b      	str	r3, [r7, #16]
 80033ca:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	9300      	str	r3, [sp, #0]
 80033d0:	2319      	movs	r3, #25
 80033d2:	2201      	movs	r2, #1
 80033d4:	4921      	ldr	r1, [pc, #132]	@ (800345c <HAL_I2C_IsDeviceReady+0x254>)
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f000 f9c2 	bl	8003760 <I2C_WaitOnFlagUntilTimeout>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e036      	b.n	8003454 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2220      	movs	r2, #32
 80033ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80033f6:	2300      	movs	r3, #0
 80033f8:	e02c      	b.n	8003454 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003408:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003412:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	9300      	str	r3, [sp, #0]
 8003418:	2319      	movs	r3, #25
 800341a:	2201      	movs	r2, #1
 800341c:	490f      	ldr	r1, [pc, #60]	@ (800345c <HAL_I2C_IsDeviceReady+0x254>)
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f000 f99e 	bl	8003760 <I2C_WaitOnFlagUntilTimeout>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e012      	b.n	8003454 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	3301      	adds	r3, #1
 8003432:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	429a      	cmp	r2, r3
 800343a:	f4ff af32 	bcc.w	80032a2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2220      	movs	r2, #32
 8003442:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e000      	b.n	8003454 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003452:	2302      	movs	r3, #2
  }
}
 8003454:	4618      	mov	r0, r3
 8003456:	3720      	adds	r7, #32
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	00100002 	.word	0x00100002
 8003460:	ffff0000 	.word	0xffff0000

08003464 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b088      	sub	sp, #32
 8003468:	af02      	add	r7, sp, #8
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	4608      	mov	r0, r1
 800346e:	4611      	mov	r1, r2
 8003470:	461a      	mov	r2, r3
 8003472:	4603      	mov	r3, r0
 8003474:	817b      	strh	r3, [r7, #10]
 8003476:	460b      	mov	r3, r1
 8003478:	813b      	strh	r3, [r7, #8]
 800347a:	4613      	mov	r3, r2
 800347c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800348c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800348e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	6a3b      	ldr	r3, [r7, #32]
 8003494:	2200      	movs	r2, #0
 8003496:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f000 f960 	bl	8003760 <I2C_WaitOnFlagUntilTimeout>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00d      	beq.n	80034c2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034b4:	d103      	bne.n	80034be <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e05f      	b.n	8003582 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034c2:	897b      	ldrh	r3, [r7, #10]
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	461a      	mov	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80034d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d4:	6a3a      	ldr	r2, [r7, #32]
 80034d6:	492d      	ldr	r1, [pc, #180]	@ (800358c <I2C_RequestMemoryWrite+0x128>)
 80034d8:	68f8      	ldr	r0, [r7, #12]
 80034da:	f000 f9bb 	bl	8003854 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d001      	beq.n	80034e8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e04c      	b.n	8003582 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034e8:	2300      	movs	r3, #0
 80034ea:	617b      	str	r3, [r7, #20]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	617b      	str	r3, [r7, #20]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003500:	6a39      	ldr	r1, [r7, #32]
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 fa46 	bl	8003994 <I2C_WaitOnTXEFlagUntilTimeout>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00d      	beq.n	800352a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003512:	2b04      	cmp	r3, #4
 8003514:	d107      	bne.n	8003526 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003524:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e02b      	b.n	8003582 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800352a:	88fb      	ldrh	r3, [r7, #6]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d105      	bne.n	800353c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003530:	893b      	ldrh	r3, [r7, #8]
 8003532:	b2da      	uxtb	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	611a      	str	r2, [r3, #16]
 800353a:	e021      	b.n	8003580 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800353c:	893b      	ldrh	r3, [r7, #8]
 800353e:	0a1b      	lsrs	r3, r3, #8
 8003540:	b29b      	uxth	r3, r3
 8003542:	b2da      	uxtb	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800354a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800354c:	6a39      	ldr	r1, [r7, #32]
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f000 fa20 	bl	8003994 <I2C_WaitOnTXEFlagUntilTimeout>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00d      	beq.n	8003576 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355e:	2b04      	cmp	r3, #4
 8003560:	d107      	bne.n	8003572 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003570:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e005      	b.n	8003582 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003576:	893b      	ldrh	r3, [r7, #8]
 8003578:	b2da      	uxtb	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3718      	adds	r7, #24
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	00010002 	.word	0x00010002

08003590 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b088      	sub	sp, #32
 8003594:	af02      	add	r7, sp, #8
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	4608      	mov	r0, r1
 800359a:	4611      	mov	r1, r2
 800359c:	461a      	mov	r2, r3
 800359e:	4603      	mov	r3, r0
 80035a0:	817b      	strh	r3, [r7, #10]
 80035a2:	460b      	mov	r3, r1
 80035a4:	813b      	strh	r3, [r7, #8]
 80035a6:	4613      	mov	r3, r2
 80035a8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80035b8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035cc:	9300      	str	r3, [sp, #0]
 80035ce:	6a3b      	ldr	r3, [r7, #32]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f000 f8c2 	bl	8003760 <I2C_WaitOnFlagUntilTimeout>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00d      	beq.n	80035fe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035f0:	d103      	bne.n	80035fa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035f8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e0aa      	b.n	8003754 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035fe:	897b      	ldrh	r3, [r7, #10]
 8003600:	b2db      	uxtb	r3, r3
 8003602:	461a      	mov	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800360c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800360e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003610:	6a3a      	ldr	r2, [r7, #32]
 8003612:	4952      	ldr	r1, [pc, #328]	@ (800375c <I2C_RequestMemoryRead+0x1cc>)
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f000 f91d 	bl	8003854 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e097      	b.n	8003754 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003624:	2300      	movs	r3, #0
 8003626:	617b      	str	r3, [r7, #20]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	617b      	str	r3, [r7, #20]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	617b      	str	r3, [r7, #20]
 8003638:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800363a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800363c:	6a39      	ldr	r1, [r7, #32]
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f000 f9a8 	bl	8003994 <I2C_WaitOnTXEFlagUntilTimeout>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00d      	beq.n	8003666 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364e:	2b04      	cmp	r3, #4
 8003650:	d107      	bne.n	8003662 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003660:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e076      	b.n	8003754 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003666:	88fb      	ldrh	r3, [r7, #6]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d105      	bne.n	8003678 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800366c:	893b      	ldrh	r3, [r7, #8]
 800366e:	b2da      	uxtb	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	611a      	str	r2, [r3, #16]
 8003676:	e021      	b.n	80036bc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003678:	893b      	ldrh	r3, [r7, #8]
 800367a:	0a1b      	lsrs	r3, r3, #8
 800367c:	b29b      	uxth	r3, r3
 800367e:	b2da      	uxtb	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003686:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003688:	6a39      	ldr	r1, [r7, #32]
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f000 f982 	bl	8003994 <I2C_WaitOnTXEFlagUntilTimeout>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00d      	beq.n	80036b2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369a:	2b04      	cmp	r3, #4
 800369c:	d107      	bne.n	80036ae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e050      	b.n	8003754 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036b2:	893b      	ldrh	r3, [r7, #8]
 80036b4:	b2da      	uxtb	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036be:	6a39      	ldr	r1, [r7, #32]
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f000 f967 	bl	8003994 <I2C_WaitOnTXEFlagUntilTimeout>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00d      	beq.n	80036e8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d0:	2b04      	cmp	r3, #4
 80036d2:	d107      	bne.n	80036e4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036e2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e035      	b.n	8003754 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036f6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	6a3b      	ldr	r3, [r7, #32]
 80036fe:	2200      	movs	r2, #0
 8003700:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f000 f82b 	bl	8003760 <I2C_WaitOnFlagUntilTimeout>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00d      	beq.n	800372c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800371a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800371e:	d103      	bne.n	8003728 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003726:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e013      	b.n	8003754 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800372c:	897b      	ldrh	r3, [r7, #10]
 800372e:	b2db      	uxtb	r3, r3
 8003730:	f043 0301 	orr.w	r3, r3, #1
 8003734:	b2da      	uxtb	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800373c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373e:	6a3a      	ldr	r2, [r7, #32]
 8003740:	4906      	ldr	r1, [pc, #24]	@ (800375c <I2C_RequestMemoryRead+0x1cc>)
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f000 f886 	bl	8003854 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e000      	b.n	8003754 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	3718      	adds	r7, #24
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	00010002 	.word	0x00010002

08003760 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	603b      	str	r3, [r7, #0]
 800376c:	4613      	mov	r3, r2
 800376e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003770:	e048      	b.n	8003804 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003778:	d044      	beq.n	8003804 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800377a:	f7fe fdf1 	bl	8002360 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	429a      	cmp	r2, r3
 8003788:	d302      	bcc.n	8003790 <I2C_WaitOnFlagUntilTimeout+0x30>
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d139      	bne.n	8003804 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	0c1b      	lsrs	r3, r3, #16
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b01      	cmp	r3, #1
 8003798:	d10d      	bne.n	80037b6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	43da      	mvns	r2, r3
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	4013      	ands	r3, r2
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	bf0c      	ite	eq
 80037ac:	2301      	moveq	r3, #1
 80037ae:	2300      	movne	r3, #0
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	461a      	mov	r2, r3
 80037b4:	e00c      	b.n	80037d0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	43da      	mvns	r2, r3
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	4013      	ands	r3, r2
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	bf0c      	ite	eq
 80037c8:	2301      	moveq	r3, #1
 80037ca:	2300      	movne	r3, #0
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	461a      	mov	r2, r3
 80037d0:	79fb      	ldrb	r3, [r7, #7]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d116      	bne.n	8003804 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2220      	movs	r2, #32
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f0:	f043 0220 	orr.w	r2, r3, #32
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e023      	b.n	800384c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	0c1b      	lsrs	r3, r3, #16
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b01      	cmp	r3, #1
 800380c:	d10d      	bne.n	800382a <I2C_WaitOnFlagUntilTimeout+0xca>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	695b      	ldr	r3, [r3, #20]
 8003814:	43da      	mvns	r2, r3
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	4013      	ands	r3, r2
 800381a:	b29b      	uxth	r3, r3
 800381c:	2b00      	cmp	r3, #0
 800381e:	bf0c      	ite	eq
 8003820:	2301      	moveq	r3, #1
 8003822:	2300      	movne	r3, #0
 8003824:	b2db      	uxtb	r3, r3
 8003826:	461a      	mov	r2, r3
 8003828:	e00c      	b.n	8003844 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	43da      	mvns	r2, r3
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	4013      	ands	r3, r2
 8003836:	b29b      	uxth	r3, r3
 8003838:	2b00      	cmp	r3, #0
 800383a:	bf0c      	ite	eq
 800383c:	2301      	moveq	r3, #1
 800383e:	2300      	movne	r3, #0
 8003840:	b2db      	uxtb	r3, r3
 8003842:	461a      	mov	r2, r3
 8003844:	79fb      	ldrb	r3, [r7, #7]
 8003846:	429a      	cmp	r2, r3
 8003848:	d093      	beq.n	8003772 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
 8003860:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003862:	e071      	b.n	8003948 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800386e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003872:	d123      	bne.n	80038bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003882:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800388c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2220      	movs	r2, #32
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a8:	f043 0204 	orr.w	r2, r3, #4
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e067      	b.n	800398c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038c2:	d041      	beq.n	8003948 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038c4:	f7fe fd4c 	bl	8002360 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d302      	bcc.n	80038da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d136      	bne.n	8003948 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	0c1b      	lsrs	r3, r3, #16
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d10c      	bne.n	80038fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	43da      	mvns	r2, r3
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	4013      	ands	r3, r2
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	bf14      	ite	ne
 80038f6:	2301      	movne	r3, #1
 80038f8:	2300      	moveq	r3, #0
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	e00b      	b.n	8003916 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	43da      	mvns	r2, r3
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	4013      	ands	r3, r2
 800390a:	b29b      	uxth	r3, r3
 800390c:	2b00      	cmp	r3, #0
 800390e:	bf14      	ite	ne
 8003910:	2301      	movne	r3, #1
 8003912:	2300      	moveq	r3, #0
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d016      	beq.n	8003948 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2220      	movs	r2, #32
 8003924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003934:	f043 0220 	orr.w	r2, r3, #32
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e021      	b.n	800398c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	0c1b      	lsrs	r3, r3, #16
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b01      	cmp	r3, #1
 8003950:	d10c      	bne.n	800396c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	43da      	mvns	r2, r3
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	4013      	ands	r3, r2
 800395e:	b29b      	uxth	r3, r3
 8003960:	2b00      	cmp	r3, #0
 8003962:	bf14      	ite	ne
 8003964:	2301      	movne	r3, #1
 8003966:	2300      	moveq	r3, #0
 8003968:	b2db      	uxtb	r3, r3
 800396a:	e00b      	b.n	8003984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	43da      	mvns	r2, r3
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	4013      	ands	r3, r2
 8003978:	b29b      	uxth	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	bf14      	ite	ne
 800397e:	2301      	movne	r3, #1
 8003980:	2300      	moveq	r3, #0
 8003982:	b2db      	uxtb	r3, r3
 8003984:	2b00      	cmp	r3, #0
 8003986:	f47f af6d 	bne.w	8003864 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039a0:	e034      	b.n	8003a0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 f8e3 	bl	8003b6e <I2C_IsAcknowledgeFailed>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e034      	b.n	8003a1c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039b8:	d028      	beq.n	8003a0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ba:	f7fe fcd1 	bl	8002360 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d302      	bcc.n	80039d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d11d      	bne.n	8003a0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039da:	2b80      	cmp	r3, #128	@ 0x80
 80039dc:	d016      	beq.n	8003a0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2220      	movs	r2, #32
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f8:	f043 0220 	orr.w	r2, r3, #32
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e007      	b.n	8003a1c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a16:	2b80      	cmp	r3, #128	@ 0x80
 8003a18:	d1c3      	bne.n	80039a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a30:	e034      	b.n	8003a9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f000 f89b 	bl	8003b6e <I2C_IsAcknowledgeFailed>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e034      	b.n	8003aac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a48:	d028      	beq.n	8003a9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a4a:	f7fe fc89 	bl	8002360 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	68ba      	ldr	r2, [r7, #8]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d302      	bcc.n	8003a60 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d11d      	bne.n	8003a9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	f003 0304 	and.w	r3, r3, #4
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	d016      	beq.n	8003a9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2220      	movs	r2, #32
 8003a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a88:	f043 0220 	orr.w	r2, r3, #32
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e007      	b.n	8003aac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	f003 0304 	and.w	r3, r3, #4
 8003aa6:	2b04      	cmp	r3, #4
 8003aa8:	d1c3      	bne.n	8003a32 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3710      	adds	r7, #16
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ac0:	e049      	b.n	8003b56 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	695b      	ldr	r3, [r3, #20]
 8003ac8:	f003 0310 	and.w	r3, r3, #16
 8003acc:	2b10      	cmp	r3, #16
 8003ace:	d119      	bne.n	8003b04 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f06f 0210 	mvn.w	r2, #16
 8003ad8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e030      	b.n	8003b66 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b04:	f7fe fc2c 	bl	8002360 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d302      	bcc.n	8003b1a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d11d      	bne.n	8003b56 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	695b      	ldr	r3, [r3, #20]
 8003b20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b24:	2b40      	cmp	r3, #64	@ 0x40
 8003b26:	d016      	beq.n	8003b56 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2220      	movs	r2, #32
 8003b32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b42:	f043 0220 	orr.w	r2, r3, #32
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e007      	b.n	8003b66 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b60:	2b40      	cmp	r3, #64	@ 0x40
 8003b62:	d1ae      	bne.n	8003ac2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b083      	sub	sp, #12
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	695b      	ldr	r3, [r3, #20]
 8003b7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b84:	d11b      	bne.n	8003bbe <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003b8e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003baa:	f043 0204 	orr.w	r2, r3, #4
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e000      	b.n	8003bc0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d101      	bne.n	8003be0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e0cc      	b.n	8003d7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003be0:	4b68      	ldr	r3, [pc, #416]	@ (8003d84 <HAL_RCC_ClockConfig+0x1b8>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 030f 	and.w	r3, r3, #15
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d90c      	bls.n	8003c08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bee:	4b65      	ldr	r3, [pc, #404]	@ (8003d84 <HAL_RCC_ClockConfig+0x1b8>)
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	b2d2      	uxtb	r2, r2
 8003bf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bf6:	4b63      	ldr	r3, [pc, #396]	@ (8003d84 <HAL_RCC_ClockConfig+0x1b8>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 030f 	and.w	r3, r3, #15
 8003bfe:	683a      	ldr	r2, [r7, #0]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d001      	beq.n	8003c08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e0b8      	b.n	8003d7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d020      	beq.n	8003c56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0304 	and.w	r3, r3, #4
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d005      	beq.n	8003c2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c20:	4b59      	ldr	r3, [pc, #356]	@ (8003d88 <HAL_RCC_ClockConfig+0x1bc>)
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	4a58      	ldr	r2, [pc, #352]	@ (8003d88 <HAL_RCC_ClockConfig+0x1bc>)
 8003c26:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003c2a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0308 	and.w	r3, r3, #8
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d005      	beq.n	8003c44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c38:	4b53      	ldr	r3, [pc, #332]	@ (8003d88 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	4a52      	ldr	r2, [pc, #328]	@ (8003d88 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003c42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c44:	4b50      	ldr	r3, [pc, #320]	@ (8003d88 <HAL_RCC_ClockConfig+0x1bc>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	494d      	ldr	r1, [pc, #308]	@ (8003d88 <HAL_RCC_ClockConfig+0x1bc>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d044      	beq.n	8003cec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d107      	bne.n	8003c7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c6a:	4b47      	ldr	r3, [pc, #284]	@ (8003d88 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d119      	bne.n	8003caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e07f      	b.n	8003d7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d003      	beq.n	8003c8a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c86:	2b03      	cmp	r3, #3
 8003c88:	d107      	bne.n	8003c9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c8a:	4b3f      	ldr	r3, [pc, #252]	@ (8003d88 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d109      	bne.n	8003caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e06f      	b.n	8003d7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c9a:	4b3b      	ldr	r3, [pc, #236]	@ (8003d88 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e067      	b.n	8003d7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003caa:	4b37      	ldr	r3, [pc, #220]	@ (8003d88 <HAL_RCC_ClockConfig+0x1bc>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f023 0203 	bic.w	r2, r3, #3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	4934      	ldr	r1, [pc, #208]	@ (8003d88 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cbc:	f7fe fb50 	bl	8002360 <HAL_GetTick>
 8003cc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cc2:	e00a      	b.n	8003cda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cc4:	f7fe fb4c 	bl	8002360 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e04f      	b.n	8003d7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cda:	4b2b      	ldr	r3, [pc, #172]	@ (8003d88 <HAL_RCC_ClockConfig+0x1bc>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f003 020c 	and.w	r2, r3, #12
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d1eb      	bne.n	8003cc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cec:	4b25      	ldr	r3, [pc, #148]	@ (8003d84 <HAL_RCC_ClockConfig+0x1b8>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 030f 	and.w	r3, r3, #15
 8003cf4:	683a      	ldr	r2, [r7, #0]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d20c      	bcs.n	8003d14 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cfa:	4b22      	ldr	r3, [pc, #136]	@ (8003d84 <HAL_RCC_ClockConfig+0x1b8>)
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	b2d2      	uxtb	r2, r2
 8003d00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d02:	4b20      	ldr	r3, [pc, #128]	@ (8003d84 <HAL_RCC_ClockConfig+0x1b8>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 030f 	and.w	r3, r3, #15
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d001      	beq.n	8003d14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e032      	b.n	8003d7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0304 	and.w	r3, r3, #4
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d008      	beq.n	8003d32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d20:	4b19      	ldr	r3, [pc, #100]	@ (8003d88 <HAL_RCC_ClockConfig+0x1bc>)
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	4916      	ldr	r1, [pc, #88]	@ (8003d88 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0308 	and.w	r3, r3, #8
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d009      	beq.n	8003d52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d3e:	4b12      	ldr	r3, [pc, #72]	@ (8003d88 <HAL_RCC_ClockConfig+0x1bc>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	490e      	ldr	r1, [pc, #56]	@ (8003d88 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d52:	f000 f855 	bl	8003e00 <HAL_RCC_GetSysClockFreq>
 8003d56:	4602      	mov	r2, r0
 8003d58:	4b0b      	ldr	r3, [pc, #44]	@ (8003d88 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	091b      	lsrs	r3, r3, #4
 8003d5e:	f003 030f 	and.w	r3, r3, #15
 8003d62:	490a      	ldr	r1, [pc, #40]	@ (8003d8c <HAL_RCC_ClockConfig+0x1c0>)
 8003d64:	5ccb      	ldrb	r3, [r1, r3]
 8003d66:	fa22 f303 	lsr.w	r3, r2, r3
 8003d6a:	4a09      	ldr	r2, [pc, #36]	@ (8003d90 <HAL_RCC_ClockConfig+0x1c4>)
 8003d6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003d6e:	4b09      	ldr	r3, [pc, #36]	@ (8003d94 <HAL_RCC_ClockConfig+0x1c8>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7fe fab0 	bl	80022d8 <HAL_InitTick>

  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	40023c00 	.word	0x40023c00
 8003d88:	40023800 	.word	0x40023800
 8003d8c:	08006a40 	.word	0x08006a40
 8003d90:	20000004 	.word	0x20000004
 8003d94:	20000008 	.word	0x20000008

08003d98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d9c:	4b03      	ldr	r3, [pc, #12]	@ (8003dac <HAL_RCC_GetHCLKFreq+0x14>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	20000004 	.word	0x20000004

08003db0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003db4:	f7ff fff0 	bl	8003d98 <HAL_RCC_GetHCLKFreq>
 8003db8:	4602      	mov	r2, r0
 8003dba:	4b05      	ldr	r3, [pc, #20]	@ (8003dd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	0a9b      	lsrs	r3, r3, #10
 8003dc0:	f003 0307 	and.w	r3, r3, #7
 8003dc4:	4903      	ldr	r1, [pc, #12]	@ (8003dd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dc6:	5ccb      	ldrb	r3, [r1, r3]
 8003dc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	40023800 	.word	0x40023800
 8003dd4:	08006a50 	.word	0x08006a50

08003dd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ddc:	f7ff ffdc 	bl	8003d98 <HAL_RCC_GetHCLKFreq>
 8003de0:	4602      	mov	r2, r0
 8003de2:	4b05      	ldr	r3, [pc, #20]	@ (8003df8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	0b5b      	lsrs	r3, r3, #13
 8003de8:	f003 0307 	and.w	r3, r3, #7
 8003dec:	4903      	ldr	r1, [pc, #12]	@ (8003dfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dee:	5ccb      	ldrb	r3, [r1, r3]
 8003df0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	40023800 	.word	0x40023800
 8003dfc:	08006a50 	.word	0x08006a50

08003e00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e04:	b0ae      	sub	sp, #184	@ 0xb8
 8003e06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003e14:	2300      	movs	r3, #0
 8003e16:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003e20:	2300      	movs	r3, #0
 8003e22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e26:	4bcb      	ldr	r3, [pc, #812]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f003 030c 	and.w	r3, r3, #12
 8003e2e:	2b0c      	cmp	r3, #12
 8003e30:	f200 8206 	bhi.w	8004240 <HAL_RCC_GetSysClockFreq+0x440>
 8003e34:	a201      	add	r2, pc, #4	@ (adr r2, 8003e3c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e3a:	bf00      	nop
 8003e3c:	08003e71 	.word	0x08003e71
 8003e40:	08004241 	.word	0x08004241
 8003e44:	08004241 	.word	0x08004241
 8003e48:	08004241 	.word	0x08004241
 8003e4c:	08003e79 	.word	0x08003e79
 8003e50:	08004241 	.word	0x08004241
 8003e54:	08004241 	.word	0x08004241
 8003e58:	08004241 	.word	0x08004241
 8003e5c:	08003e81 	.word	0x08003e81
 8003e60:	08004241 	.word	0x08004241
 8003e64:	08004241 	.word	0x08004241
 8003e68:	08004241 	.word	0x08004241
 8003e6c:	08004071 	.word	0x08004071
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e70:	4bb9      	ldr	r3, [pc, #740]	@ (8004158 <HAL_RCC_GetSysClockFreq+0x358>)
 8003e72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003e76:	e1e7      	b.n	8004248 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e78:	4bb8      	ldr	r3, [pc, #736]	@ (800415c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003e7a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003e7e:	e1e3      	b.n	8004248 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e80:	4bb4      	ldr	r3, [pc, #720]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e8c:	4bb1      	ldr	r3, [pc, #708]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d071      	beq.n	8003f7c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e98:	4bae      	ldr	r3, [pc, #696]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	099b      	lsrs	r3, r3, #6
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003ea4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003ea8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eb0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003eba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003ebe:	4622      	mov	r2, r4
 8003ec0:	462b      	mov	r3, r5
 8003ec2:	f04f 0000 	mov.w	r0, #0
 8003ec6:	f04f 0100 	mov.w	r1, #0
 8003eca:	0159      	lsls	r1, r3, #5
 8003ecc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ed0:	0150      	lsls	r0, r2, #5
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	4621      	mov	r1, r4
 8003ed8:	1a51      	subs	r1, r2, r1
 8003eda:	6439      	str	r1, [r7, #64]	@ 0x40
 8003edc:	4629      	mov	r1, r5
 8003ede:	eb63 0301 	sbc.w	r3, r3, r1
 8003ee2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ee4:	f04f 0200 	mov.w	r2, #0
 8003ee8:	f04f 0300 	mov.w	r3, #0
 8003eec:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003ef0:	4649      	mov	r1, r9
 8003ef2:	018b      	lsls	r3, r1, #6
 8003ef4:	4641      	mov	r1, r8
 8003ef6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003efa:	4641      	mov	r1, r8
 8003efc:	018a      	lsls	r2, r1, #6
 8003efe:	4641      	mov	r1, r8
 8003f00:	1a51      	subs	r1, r2, r1
 8003f02:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003f04:	4649      	mov	r1, r9
 8003f06:	eb63 0301 	sbc.w	r3, r3, r1
 8003f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f0c:	f04f 0200 	mov.w	r2, #0
 8003f10:	f04f 0300 	mov.w	r3, #0
 8003f14:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003f18:	4649      	mov	r1, r9
 8003f1a:	00cb      	lsls	r3, r1, #3
 8003f1c:	4641      	mov	r1, r8
 8003f1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f22:	4641      	mov	r1, r8
 8003f24:	00ca      	lsls	r2, r1, #3
 8003f26:	4610      	mov	r0, r2
 8003f28:	4619      	mov	r1, r3
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	4622      	mov	r2, r4
 8003f2e:	189b      	adds	r3, r3, r2
 8003f30:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f32:	462b      	mov	r3, r5
 8003f34:	460a      	mov	r2, r1
 8003f36:	eb42 0303 	adc.w	r3, r2, r3
 8003f3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f3c:	f04f 0200 	mov.w	r2, #0
 8003f40:	f04f 0300 	mov.w	r3, #0
 8003f44:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003f48:	4629      	mov	r1, r5
 8003f4a:	024b      	lsls	r3, r1, #9
 8003f4c:	4621      	mov	r1, r4
 8003f4e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f52:	4621      	mov	r1, r4
 8003f54:	024a      	lsls	r2, r1, #9
 8003f56:	4610      	mov	r0, r2
 8003f58:	4619      	mov	r1, r3
 8003f5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003f64:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003f68:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003f6c:	f7fc fe4e 	bl	8000c0c <__aeabi_uldivmod>
 8003f70:	4602      	mov	r2, r0
 8003f72:	460b      	mov	r3, r1
 8003f74:	4613      	mov	r3, r2
 8003f76:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f7a:	e067      	b.n	800404c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f7c:	4b75      	ldr	r3, [pc, #468]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	099b      	lsrs	r3, r3, #6
 8003f82:	2200      	movs	r2, #0
 8003f84:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003f88:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003f8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f94:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003f96:	2300      	movs	r3, #0
 8003f98:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003f9a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003f9e:	4622      	mov	r2, r4
 8003fa0:	462b      	mov	r3, r5
 8003fa2:	f04f 0000 	mov.w	r0, #0
 8003fa6:	f04f 0100 	mov.w	r1, #0
 8003faa:	0159      	lsls	r1, r3, #5
 8003fac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fb0:	0150      	lsls	r0, r2, #5
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	4621      	mov	r1, r4
 8003fb8:	1a51      	subs	r1, r2, r1
 8003fba:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003fbc:	4629      	mov	r1, r5
 8003fbe:	eb63 0301 	sbc.w	r3, r3, r1
 8003fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fc4:	f04f 0200 	mov.w	r2, #0
 8003fc8:	f04f 0300 	mov.w	r3, #0
 8003fcc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003fd0:	4649      	mov	r1, r9
 8003fd2:	018b      	lsls	r3, r1, #6
 8003fd4:	4641      	mov	r1, r8
 8003fd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fda:	4641      	mov	r1, r8
 8003fdc:	018a      	lsls	r2, r1, #6
 8003fde:	4641      	mov	r1, r8
 8003fe0:	ebb2 0a01 	subs.w	sl, r2, r1
 8003fe4:	4649      	mov	r1, r9
 8003fe6:	eb63 0b01 	sbc.w	fp, r3, r1
 8003fea:	f04f 0200 	mov.w	r2, #0
 8003fee:	f04f 0300 	mov.w	r3, #0
 8003ff2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ff6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ffa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ffe:	4692      	mov	sl, r2
 8004000:	469b      	mov	fp, r3
 8004002:	4623      	mov	r3, r4
 8004004:	eb1a 0303 	adds.w	r3, sl, r3
 8004008:	623b      	str	r3, [r7, #32]
 800400a:	462b      	mov	r3, r5
 800400c:	eb4b 0303 	adc.w	r3, fp, r3
 8004010:	627b      	str	r3, [r7, #36]	@ 0x24
 8004012:	f04f 0200 	mov.w	r2, #0
 8004016:	f04f 0300 	mov.w	r3, #0
 800401a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800401e:	4629      	mov	r1, r5
 8004020:	028b      	lsls	r3, r1, #10
 8004022:	4621      	mov	r1, r4
 8004024:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004028:	4621      	mov	r1, r4
 800402a:	028a      	lsls	r2, r1, #10
 800402c:	4610      	mov	r0, r2
 800402e:	4619      	mov	r1, r3
 8004030:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004034:	2200      	movs	r2, #0
 8004036:	673b      	str	r3, [r7, #112]	@ 0x70
 8004038:	677a      	str	r2, [r7, #116]	@ 0x74
 800403a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800403e:	f7fc fde5 	bl	8000c0c <__aeabi_uldivmod>
 8004042:	4602      	mov	r2, r0
 8004044:	460b      	mov	r3, r1
 8004046:	4613      	mov	r3, r2
 8004048:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800404c:	4b41      	ldr	r3, [pc, #260]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x354>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	0c1b      	lsrs	r3, r3, #16
 8004052:	f003 0303 	and.w	r3, r3, #3
 8004056:	3301      	adds	r3, #1
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800405e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004062:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004066:	fbb2 f3f3 	udiv	r3, r2, r3
 800406a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800406e:	e0eb      	b.n	8004248 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004070:	4b38      	ldr	r3, [pc, #224]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x354>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004078:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800407c:	4b35      	ldr	r3, [pc, #212]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x354>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d06b      	beq.n	8004160 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004088:	4b32      	ldr	r3, [pc, #200]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x354>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	099b      	lsrs	r3, r3, #6
 800408e:	2200      	movs	r2, #0
 8004090:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004092:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004094:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800409a:	663b      	str	r3, [r7, #96]	@ 0x60
 800409c:	2300      	movs	r3, #0
 800409e:	667b      	str	r3, [r7, #100]	@ 0x64
 80040a0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80040a4:	4622      	mov	r2, r4
 80040a6:	462b      	mov	r3, r5
 80040a8:	f04f 0000 	mov.w	r0, #0
 80040ac:	f04f 0100 	mov.w	r1, #0
 80040b0:	0159      	lsls	r1, r3, #5
 80040b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040b6:	0150      	lsls	r0, r2, #5
 80040b8:	4602      	mov	r2, r0
 80040ba:	460b      	mov	r3, r1
 80040bc:	4621      	mov	r1, r4
 80040be:	1a51      	subs	r1, r2, r1
 80040c0:	61b9      	str	r1, [r7, #24]
 80040c2:	4629      	mov	r1, r5
 80040c4:	eb63 0301 	sbc.w	r3, r3, r1
 80040c8:	61fb      	str	r3, [r7, #28]
 80040ca:	f04f 0200 	mov.w	r2, #0
 80040ce:	f04f 0300 	mov.w	r3, #0
 80040d2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80040d6:	4659      	mov	r1, fp
 80040d8:	018b      	lsls	r3, r1, #6
 80040da:	4651      	mov	r1, sl
 80040dc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040e0:	4651      	mov	r1, sl
 80040e2:	018a      	lsls	r2, r1, #6
 80040e4:	4651      	mov	r1, sl
 80040e6:	ebb2 0801 	subs.w	r8, r2, r1
 80040ea:	4659      	mov	r1, fp
 80040ec:	eb63 0901 	sbc.w	r9, r3, r1
 80040f0:	f04f 0200 	mov.w	r2, #0
 80040f4:	f04f 0300 	mov.w	r3, #0
 80040f8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040fc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004100:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004104:	4690      	mov	r8, r2
 8004106:	4699      	mov	r9, r3
 8004108:	4623      	mov	r3, r4
 800410a:	eb18 0303 	adds.w	r3, r8, r3
 800410e:	613b      	str	r3, [r7, #16]
 8004110:	462b      	mov	r3, r5
 8004112:	eb49 0303 	adc.w	r3, r9, r3
 8004116:	617b      	str	r3, [r7, #20]
 8004118:	f04f 0200 	mov.w	r2, #0
 800411c:	f04f 0300 	mov.w	r3, #0
 8004120:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004124:	4629      	mov	r1, r5
 8004126:	024b      	lsls	r3, r1, #9
 8004128:	4621      	mov	r1, r4
 800412a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800412e:	4621      	mov	r1, r4
 8004130:	024a      	lsls	r2, r1, #9
 8004132:	4610      	mov	r0, r2
 8004134:	4619      	mov	r1, r3
 8004136:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800413a:	2200      	movs	r2, #0
 800413c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800413e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004140:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004144:	f7fc fd62 	bl	8000c0c <__aeabi_uldivmod>
 8004148:	4602      	mov	r2, r0
 800414a:	460b      	mov	r3, r1
 800414c:	4613      	mov	r3, r2
 800414e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004152:	e065      	b.n	8004220 <HAL_RCC_GetSysClockFreq+0x420>
 8004154:	40023800 	.word	0x40023800
 8004158:	00f42400 	.word	0x00f42400
 800415c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004160:	4b3d      	ldr	r3, [pc, #244]	@ (8004258 <HAL_RCC_GetSysClockFreq+0x458>)
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	099b      	lsrs	r3, r3, #6
 8004166:	2200      	movs	r2, #0
 8004168:	4618      	mov	r0, r3
 800416a:	4611      	mov	r1, r2
 800416c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004170:	653b      	str	r3, [r7, #80]	@ 0x50
 8004172:	2300      	movs	r3, #0
 8004174:	657b      	str	r3, [r7, #84]	@ 0x54
 8004176:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800417a:	4642      	mov	r2, r8
 800417c:	464b      	mov	r3, r9
 800417e:	f04f 0000 	mov.w	r0, #0
 8004182:	f04f 0100 	mov.w	r1, #0
 8004186:	0159      	lsls	r1, r3, #5
 8004188:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800418c:	0150      	lsls	r0, r2, #5
 800418e:	4602      	mov	r2, r0
 8004190:	460b      	mov	r3, r1
 8004192:	4641      	mov	r1, r8
 8004194:	1a51      	subs	r1, r2, r1
 8004196:	60b9      	str	r1, [r7, #8]
 8004198:	4649      	mov	r1, r9
 800419a:	eb63 0301 	sbc.w	r3, r3, r1
 800419e:	60fb      	str	r3, [r7, #12]
 80041a0:	f04f 0200 	mov.w	r2, #0
 80041a4:	f04f 0300 	mov.w	r3, #0
 80041a8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80041ac:	4659      	mov	r1, fp
 80041ae:	018b      	lsls	r3, r1, #6
 80041b0:	4651      	mov	r1, sl
 80041b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041b6:	4651      	mov	r1, sl
 80041b8:	018a      	lsls	r2, r1, #6
 80041ba:	4651      	mov	r1, sl
 80041bc:	1a54      	subs	r4, r2, r1
 80041be:	4659      	mov	r1, fp
 80041c0:	eb63 0501 	sbc.w	r5, r3, r1
 80041c4:	f04f 0200 	mov.w	r2, #0
 80041c8:	f04f 0300 	mov.w	r3, #0
 80041cc:	00eb      	lsls	r3, r5, #3
 80041ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041d2:	00e2      	lsls	r2, r4, #3
 80041d4:	4614      	mov	r4, r2
 80041d6:	461d      	mov	r5, r3
 80041d8:	4643      	mov	r3, r8
 80041da:	18e3      	adds	r3, r4, r3
 80041dc:	603b      	str	r3, [r7, #0]
 80041de:	464b      	mov	r3, r9
 80041e0:	eb45 0303 	adc.w	r3, r5, r3
 80041e4:	607b      	str	r3, [r7, #4]
 80041e6:	f04f 0200 	mov.w	r2, #0
 80041ea:	f04f 0300 	mov.w	r3, #0
 80041ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041f2:	4629      	mov	r1, r5
 80041f4:	028b      	lsls	r3, r1, #10
 80041f6:	4621      	mov	r1, r4
 80041f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041fc:	4621      	mov	r1, r4
 80041fe:	028a      	lsls	r2, r1, #10
 8004200:	4610      	mov	r0, r2
 8004202:	4619      	mov	r1, r3
 8004204:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004208:	2200      	movs	r2, #0
 800420a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800420c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800420e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004212:	f7fc fcfb 	bl	8000c0c <__aeabi_uldivmod>
 8004216:	4602      	mov	r2, r0
 8004218:	460b      	mov	r3, r1
 800421a:	4613      	mov	r3, r2
 800421c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004220:	4b0d      	ldr	r3, [pc, #52]	@ (8004258 <HAL_RCC_GetSysClockFreq+0x458>)
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	0f1b      	lsrs	r3, r3, #28
 8004226:	f003 0307 	and.w	r3, r3, #7
 800422a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800422e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004232:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004236:	fbb2 f3f3 	udiv	r3, r2, r3
 800423a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800423e:	e003      	b.n	8004248 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004240:	4b06      	ldr	r3, [pc, #24]	@ (800425c <HAL_RCC_GetSysClockFreq+0x45c>)
 8004242:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004246:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004248:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800424c:	4618      	mov	r0, r3
 800424e:	37b8      	adds	r7, #184	@ 0xb8
 8004250:	46bd      	mov	sp, r7
 8004252:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004256:	bf00      	nop
 8004258:	40023800 	.word	0x40023800
 800425c:	00f42400 	.word	0x00f42400

08004260 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e28d      	b.n	800478e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b00      	cmp	r3, #0
 800427c:	f000 8083 	beq.w	8004386 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004280:	4b94      	ldr	r3, [pc, #592]	@ (80044d4 <HAL_RCC_OscConfig+0x274>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f003 030c 	and.w	r3, r3, #12
 8004288:	2b04      	cmp	r3, #4
 800428a:	d019      	beq.n	80042c0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800428c:	4b91      	ldr	r3, [pc, #580]	@ (80044d4 <HAL_RCC_OscConfig+0x274>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f003 030c 	and.w	r3, r3, #12
        || \
 8004294:	2b08      	cmp	r3, #8
 8004296:	d106      	bne.n	80042a6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004298:	4b8e      	ldr	r3, [pc, #568]	@ (80044d4 <HAL_RCC_OscConfig+0x274>)
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042a4:	d00c      	beq.n	80042c0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042a6:	4b8b      	ldr	r3, [pc, #556]	@ (80044d4 <HAL_RCC_OscConfig+0x274>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80042ae:	2b0c      	cmp	r3, #12
 80042b0:	d112      	bne.n	80042d8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042b2:	4b88      	ldr	r3, [pc, #544]	@ (80044d4 <HAL_RCC_OscConfig+0x274>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042be:	d10b      	bne.n	80042d8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c0:	4b84      	ldr	r3, [pc, #528]	@ (80044d4 <HAL_RCC_OscConfig+0x274>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d05b      	beq.n	8004384 <HAL_RCC_OscConfig+0x124>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d157      	bne.n	8004384 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e25a      	b.n	800478e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042e0:	d106      	bne.n	80042f0 <HAL_RCC_OscConfig+0x90>
 80042e2:	4b7c      	ldr	r3, [pc, #496]	@ (80044d4 <HAL_RCC_OscConfig+0x274>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a7b      	ldr	r2, [pc, #492]	@ (80044d4 <HAL_RCC_OscConfig+0x274>)
 80042e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042ec:	6013      	str	r3, [r2, #0]
 80042ee:	e01d      	b.n	800432c <HAL_RCC_OscConfig+0xcc>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042f8:	d10c      	bne.n	8004314 <HAL_RCC_OscConfig+0xb4>
 80042fa:	4b76      	ldr	r3, [pc, #472]	@ (80044d4 <HAL_RCC_OscConfig+0x274>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a75      	ldr	r2, [pc, #468]	@ (80044d4 <HAL_RCC_OscConfig+0x274>)
 8004300:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004304:	6013      	str	r3, [r2, #0]
 8004306:	4b73      	ldr	r3, [pc, #460]	@ (80044d4 <HAL_RCC_OscConfig+0x274>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a72      	ldr	r2, [pc, #456]	@ (80044d4 <HAL_RCC_OscConfig+0x274>)
 800430c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004310:	6013      	str	r3, [r2, #0]
 8004312:	e00b      	b.n	800432c <HAL_RCC_OscConfig+0xcc>
 8004314:	4b6f      	ldr	r3, [pc, #444]	@ (80044d4 <HAL_RCC_OscConfig+0x274>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a6e      	ldr	r2, [pc, #440]	@ (80044d4 <HAL_RCC_OscConfig+0x274>)
 800431a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800431e:	6013      	str	r3, [r2, #0]
 8004320:	4b6c      	ldr	r3, [pc, #432]	@ (80044d4 <HAL_RCC_OscConfig+0x274>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a6b      	ldr	r2, [pc, #428]	@ (80044d4 <HAL_RCC_OscConfig+0x274>)
 8004326:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800432a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d013      	beq.n	800435c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004334:	f7fe f814 	bl	8002360 <HAL_GetTick>
 8004338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800433a:	e008      	b.n	800434e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800433c:	f7fe f810 	bl	8002360 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b64      	cmp	r3, #100	@ 0x64
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e21f      	b.n	800478e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800434e:	4b61      	ldr	r3, [pc, #388]	@ (80044d4 <HAL_RCC_OscConfig+0x274>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d0f0      	beq.n	800433c <HAL_RCC_OscConfig+0xdc>
 800435a:	e014      	b.n	8004386 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800435c:	f7fe f800 	bl	8002360 <HAL_GetTick>
 8004360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004362:	e008      	b.n	8004376 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004364:	f7fd fffc 	bl	8002360 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b64      	cmp	r3, #100	@ 0x64
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e20b      	b.n	800478e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004376:	4b57      	ldr	r3, [pc, #348]	@ (80044d4 <HAL_RCC_OscConfig+0x274>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1f0      	bne.n	8004364 <HAL_RCC_OscConfig+0x104>
 8004382:	e000      	b.n	8004386 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004384:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d06f      	beq.n	8004472 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004392:	4b50      	ldr	r3, [pc, #320]	@ (80044d4 <HAL_RCC_OscConfig+0x274>)
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f003 030c 	and.w	r3, r3, #12
 800439a:	2b00      	cmp	r3, #0
 800439c:	d017      	beq.n	80043ce <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800439e:	4b4d      	ldr	r3, [pc, #308]	@ (80044d4 <HAL_RCC_OscConfig+0x274>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f003 030c 	and.w	r3, r3, #12
        || \
 80043a6:	2b08      	cmp	r3, #8
 80043a8:	d105      	bne.n	80043b6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80043aa:	4b4a      	ldr	r3, [pc, #296]	@ (80044d4 <HAL_RCC_OscConfig+0x274>)
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00b      	beq.n	80043ce <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043b6:	4b47      	ldr	r3, [pc, #284]	@ (80044d4 <HAL_RCC_OscConfig+0x274>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80043be:	2b0c      	cmp	r3, #12
 80043c0:	d11c      	bne.n	80043fc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043c2:	4b44      	ldr	r3, [pc, #272]	@ (80044d4 <HAL_RCC_OscConfig+0x274>)
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d116      	bne.n	80043fc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ce:	4b41      	ldr	r3, [pc, #260]	@ (80044d4 <HAL_RCC_OscConfig+0x274>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d005      	beq.n	80043e6 <HAL_RCC_OscConfig+0x186>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d001      	beq.n	80043e6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e1d3      	b.n	800478e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043e6:	4b3b      	ldr	r3, [pc, #236]	@ (80044d4 <HAL_RCC_OscConfig+0x274>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	00db      	lsls	r3, r3, #3
 80043f4:	4937      	ldr	r1, [pc, #220]	@ (80044d4 <HAL_RCC_OscConfig+0x274>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043fa:	e03a      	b.n	8004472 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d020      	beq.n	8004446 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004404:	4b34      	ldr	r3, [pc, #208]	@ (80044d8 <HAL_RCC_OscConfig+0x278>)
 8004406:	2201      	movs	r2, #1
 8004408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440a:	f7fd ffa9 	bl	8002360 <HAL_GetTick>
 800440e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004410:	e008      	b.n	8004424 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004412:	f7fd ffa5 	bl	8002360 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d901      	bls.n	8004424 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e1b4      	b.n	800478e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004424:	4b2b      	ldr	r3, [pc, #172]	@ (80044d4 <HAL_RCC_OscConfig+0x274>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d0f0      	beq.n	8004412 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004430:	4b28      	ldr	r3, [pc, #160]	@ (80044d4 <HAL_RCC_OscConfig+0x274>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	00db      	lsls	r3, r3, #3
 800443e:	4925      	ldr	r1, [pc, #148]	@ (80044d4 <HAL_RCC_OscConfig+0x274>)
 8004440:	4313      	orrs	r3, r2
 8004442:	600b      	str	r3, [r1, #0]
 8004444:	e015      	b.n	8004472 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004446:	4b24      	ldr	r3, [pc, #144]	@ (80044d8 <HAL_RCC_OscConfig+0x278>)
 8004448:	2200      	movs	r2, #0
 800444a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800444c:	f7fd ff88 	bl	8002360 <HAL_GetTick>
 8004450:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004452:	e008      	b.n	8004466 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004454:	f7fd ff84 	bl	8002360 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b02      	cmp	r3, #2
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e193      	b.n	800478e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004466:	4b1b      	ldr	r3, [pc, #108]	@ (80044d4 <HAL_RCC_OscConfig+0x274>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1f0      	bne.n	8004454 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0308 	and.w	r3, r3, #8
 800447a:	2b00      	cmp	r3, #0
 800447c:	d036      	beq.n	80044ec <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d016      	beq.n	80044b4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004486:	4b15      	ldr	r3, [pc, #84]	@ (80044dc <HAL_RCC_OscConfig+0x27c>)
 8004488:	2201      	movs	r2, #1
 800448a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800448c:	f7fd ff68 	bl	8002360 <HAL_GetTick>
 8004490:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004492:	e008      	b.n	80044a6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004494:	f7fd ff64 	bl	8002360 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e173      	b.n	800478e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044a6:	4b0b      	ldr	r3, [pc, #44]	@ (80044d4 <HAL_RCC_OscConfig+0x274>)
 80044a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d0f0      	beq.n	8004494 <HAL_RCC_OscConfig+0x234>
 80044b2:	e01b      	b.n	80044ec <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044b4:	4b09      	ldr	r3, [pc, #36]	@ (80044dc <HAL_RCC_OscConfig+0x27c>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ba:	f7fd ff51 	bl	8002360 <HAL_GetTick>
 80044be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044c0:	e00e      	b.n	80044e0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044c2:	f7fd ff4d 	bl	8002360 <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d907      	bls.n	80044e0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e15c      	b.n	800478e <HAL_RCC_OscConfig+0x52e>
 80044d4:	40023800 	.word	0x40023800
 80044d8:	42470000 	.word	0x42470000
 80044dc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044e0:	4b8a      	ldr	r3, [pc, #552]	@ (800470c <HAL_RCC_OscConfig+0x4ac>)
 80044e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1ea      	bne.n	80044c2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0304 	and.w	r3, r3, #4
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 8097 	beq.w	8004628 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044fa:	2300      	movs	r3, #0
 80044fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044fe:	4b83      	ldr	r3, [pc, #524]	@ (800470c <HAL_RCC_OscConfig+0x4ac>)
 8004500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004502:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10f      	bne.n	800452a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800450a:	2300      	movs	r3, #0
 800450c:	60bb      	str	r3, [r7, #8]
 800450e:	4b7f      	ldr	r3, [pc, #508]	@ (800470c <HAL_RCC_OscConfig+0x4ac>)
 8004510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004512:	4a7e      	ldr	r2, [pc, #504]	@ (800470c <HAL_RCC_OscConfig+0x4ac>)
 8004514:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004518:	6413      	str	r3, [r2, #64]	@ 0x40
 800451a:	4b7c      	ldr	r3, [pc, #496]	@ (800470c <HAL_RCC_OscConfig+0x4ac>)
 800451c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800451e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004522:	60bb      	str	r3, [r7, #8]
 8004524:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004526:	2301      	movs	r3, #1
 8004528:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800452a:	4b79      	ldr	r3, [pc, #484]	@ (8004710 <HAL_RCC_OscConfig+0x4b0>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004532:	2b00      	cmp	r3, #0
 8004534:	d118      	bne.n	8004568 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004536:	4b76      	ldr	r3, [pc, #472]	@ (8004710 <HAL_RCC_OscConfig+0x4b0>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a75      	ldr	r2, [pc, #468]	@ (8004710 <HAL_RCC_OscConfig+0x4b0>)
 800453c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004540:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004542:	f7fd ff0d 	bl	8002360 <HAL_GetTick>
 8004546:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004548:	e008      	b.n	800455c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800454a:	f7fd ff09 	bl	8002360 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	2b02      	cmp	r3, #2
 8004556:	d901      	bls.n	800455c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e118      	b.n	800478e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800455c:	4b6c      	ldr	r3, [pc, #432]	@ (8004710 <HAL_RCC_OscConfig+0x4b0>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004564:	2b00      	cmp	r3, #0
 8004566:	d0f0      	beq.n	800454a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d106      	bne.n	800457e <HAL_RCC_OscConfig+0x31e>
 8004570:	4b66      	ldr	r3, [pc, #408]	@ (800470c <HAL_RCC_OscConfig+0x4ac>)
 8004572:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004574:	4a65      	ldr	r2, [pc, #404]	@ (800470c <HAL_RCC_OscConfig+0x4ac>)
 8004576:	f043 0301 	orr.w	r3, r3, #1
 800457a:	6713      	str	r3, [r2, #112]	@ 0x70
 800457c:	e01c      	b.n	80045b8 <HAL_RCC_OscConfig+0x358>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	2b05      	cmp	r3, #5
 8004584:	d10c      	bne.n	80045a0 <HAL_RCC_OscConfig+0x340>
 8004586:	4b61      	ldr	r3, [pc, #388]	@ (800470c <HAL_RCC_OscConfig+0x4ac>)
 8004588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800458a:	4a60      	ldr	r2, [pc, #384]	@ (800470c <HAL_RCC_OscConfig+0x4ac>)
 800458c:	f043 0304 	orr.w	r3, r3, #4
 8004590:	6713      	str	r3, [r2, #112]	@ 0x70
 8004592:	4b5e      	ldr	r3, [pc, #376]	@ (800470c <HAL_RCC_OscConfig+0x4ac>)
 8004594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004596:	4a5d      	ldr	r2, [pc, #372]	@ (800470c <HAL_RCC_OscConfig+0x4ac>)
 8004598:	f043 0301 	orr.w	r3, r3, #1
 800459c:	6713      	str	r3, [r2, #112]	@ 0x70
 800459e:	e00b      	b.n	80045b8 <HAL_RCC_OscConfig+0x358>
 80045a0:	4b5a      	ldr	r3, [pc, #360]	@ (800470c <HAL_RCC_OscConfig+0x4ac>)
 80045a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045a4:	4a59      	ldr	r2, [pc, #356]	@ (800470c <HAL_RCC_OscConfig+0x4ac>)
 80045a6:	f023 0301 	bic.w	r3, r3, #1
 80045aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80045ac:	4b57      	ldr	r3, [pc, #348]	@ (800470c <HAL_RCC_OscConfig+0x4ac>)
 80045ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045b0:	4a56      	ldr	r2, [pc, #344]	@ (800470c <HAL_RCC_OscConfig+0x4ac>)
 80045b2:	f023 0304 	bic.w	r3, r3, #4
 80045b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d015      	beq.n	80045ec <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045c0:	f7fd fece 	bl	8002360 <HAL_GetTick>
 80045c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045c6:	e00a      	b.n	80045de <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045c8:	f7fd feca 	bl	8002360 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e0d7      	b.n	800478e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045de:	4b4b      	ldr	r3, [pc, #300]	@ (800470c <HAL_RCC_OscConfig+0x4ac>)
 80045e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d0ee      	beq.n	80045c8 <HAL_RCC_OscConfig+0x368>
 80045ea:	e014      	b.n	8004616 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ec:	f7fd feb8 	bl	8002360 <HAL_GetTick>
 80045f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045f2:	e00a      	b.n	800460a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045f4:	f7fd feb4 	bl	8002360 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004602:	4293      	cmp	r3, r2
 8004604:	d901      	bls.n	800460a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e0c1      	b.n	800478e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800460a:	4b40      	ldr	r3, [pc, #256]	@ (800470c <HAL_RCC_OscConfig+0x4ac>)
 800460c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1ee      	bne.n	80045f4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004616:	7dfb      	ldrb	r3, [r7, #23]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d105      	bne.n	8004628 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800461c:	4b3b      	ldr	r3, [pc, #236]	@ (800470c <HAL_RCC_OscConfig+0x4ac>)
 800461e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004620:	4a3a      	ldr	r2, [pc, #232]	@ (800470c <HAL_RCC_OscConfig+0x4ac>)
 8004622:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004626:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 80ad 	beq.w	800478c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004632:	4b36      	ldr	r3, [pc, #216]	@ (800470c <HAL_RCC_OscConfig+0x4ac>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f003 030c 	and.w	r3, r3, #12
 800463a:	2b08      	cmp	r3, #8
 800463c:	d060      	beq.n	8004700 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	2b02      	cmp	r3, #2
 8004644:	d145      	bne.n	80046d2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004646:	4b33      	ldr	r3, [pc, #204]	@ (8004714 <HAL_RCC_OscConfig+0x4b4>)
 8004648:	2200      	movs	r2, #0
 800464a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464c:	f7fd fe88 	bl	8002360 <HAL_GetTick>
 8004650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004652:	e008      	b.n	8004666 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004654:	f7fd fe84 	bl	8002360 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d901      	bls.n	8004666 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e093      	b.n	800478e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004666:	4b29      	ldr	r3, [pc, #164]	@ (800470c <HAL_RCC_OscConfig+0x4ac>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1f0      	bne.n	8004654 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	69da      	ldr	r2, [r3, #28]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a1b      	ldr	r3, [r3, #32]
 800467a:	431a      	orrs	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004680:	019b      	lsls	r3, r3, #6
 8004682:	431a      	orrs	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004688:	085b      	lsrs	r3, r3, #1
 800468a:	3b01      	subs	r3, #1
 800468c:	041b      	lsls	r3, r3, #16
 800468e:	431a      	orrs	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004694:	061b      	lsls	r3, r3, #24
 8004696:	431a      	orrs	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800469c:	071b      	lsls	r3, r3, #28
 800469e:	491b      	ldr	r1, [pc, #108]	@ (800470c <HAL_RCC_OscConfig+0x4ac>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046a4:	4b1b      	ldr	r3, [pc, #108]	@ (8004714 <HAL_RCC_OscConfig+0x4b4>)
 80046a6:	2201      	movs	r2, #1
 80046a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046aa:	f7fd fe59 	bl	8002360 <HAL_GetTick>
 80046ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046b0:	e008      	b.n	80046c4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046b2:	f7fd fe55 	bl	8002360 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d901      	bls.n	80046c4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e064      	b.n	800478e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046c4:	4b11      	ldr	r3, [pc, #68]	@ (800470c <HAL_RCC_OscConfig+0x4ac>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d0f0      	beq.n	80046b2 <HAL_RCC_OscConfig+0x452>
 80046d0:	e05c      	b.n	800478c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046d2:	4b10      	ldr	r3, [pc, #64]	@ (8004714 <HAL_RCC_OscConfig+0x4b4>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d8:	f7fd fe42 	bl	8002360 <HAL_GetTick>
 80046dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046de:	e008      	b.n	80046f2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046e0:	f7fd fe3e 	bl	8002360 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e04d      	b.n	800478e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046f2:	4b06      	ldr	r3, [pc, #24]	@ (800470c <HAL_RCC_OscConfig+0x4ac>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1f0      	bne.n	80046e0 <HAL_RCC_OscConfig+0x480>
 80046fe:	e045      	b.n	800478c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d107      	bne.n	8004718 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e040      	b.n	800478e <HAL_RCC_OscConfig+0x52e>
 800470c:	40023800 	.word	0x40023800
 8004710:	40007000 	.word	0x40007000
 8004714:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004718:	4b1f      	ldr	r3, [pc, #124]	@ (8004798 <HAL_RCC_OscConfig+0x538>)
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d030      	beq.n	8004788 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004730:	429a      	cmp	r2, r3
 8004732:	d129      	bne.n	8004788 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800473e:	429a      	cmp	r2, r3
 8004740:	d122      	bne.n	8004788 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004748:	4013      	ands	r3, r2
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800474e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004750:	4293      	cmp	r3, r2
 8004752:	d119      	bne.n	8004788 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800475e:	085b      	lsrs	r3, r3, #1
 8004760:	3b01      	subs	r3, #1
 8004762:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004764:	429a      	cmp	r2, r3
 8004766:	d10f      	bne.n	8004788 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004772:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004774:	429a      	cmp	r2, r3
 8004776:	d107      	bne.n	8004788 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004782:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004784:	429a      	cmp	r2, r3
 8004786:	d001      	beq.n	800478c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e000      	b.n	800478e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3718      	adds	r7, #24
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	40023800 	.word	0x40023800

0800479c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e041      	b.n	8004832 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d106      	bne.n	80047c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f7fd fbfa 	bl	8001fbc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2202      	movs	r2, #2
 80047cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	3304      	adds	r3, #4
 80047d8:	4619      	mov	r1, r3
 80047da:	4610      	mov	r0, r2
 80047dc:	f000 f9b8 	bl	8004b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3708      	adds	r7, #8
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
	...

0800483c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d109      	bne.n	8004860 <HAL_TIM_PWM_Start+0x24>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b01      	cmp	r3, #1
 8004856:	bf14      	ite	ne
 8004858:	2301      	movne	r3, #1
 800485a:	2300      	moveq	r3, #0
 800485c:	b2db      	uxtb	r3, r3
 800485e:	e022      	b.n	80048a6 <HAL_TIM_PWM_Start+0x6a>
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	2b04      	cmp	r3, #4
 8004864:	d109      	bne.n	800487a <HAL_TIM_PWM_Start+0x3e>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b01      	cmp	r3, #1
 8004870:	bf14      	ite	ne
 8004872:	2301      	movne	r3, #1
 8004874:	2300      	moveq	r3, #0
 8004876:	b2db      	uxtb	r3, r3
 8004878:	e015      	b.n	80048a6 <HAL_TIM_PWM_Start+0x6a>
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	2b08      	cmp	r3, #8
 800487e:	d109      	bne.n	8004894 <HAL_TIM_PWM_Start+0x58>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004886:	b2db      	uxtb	r3, r3
 8004888:	2b01      	cmp	r3, #1
 800488a:	bf14      	ite	ne
 800488c:	2301      	movne	r3, #1
 800488e:	2300      	moveq	r3, #0
 8004890:	b2db      	uxtb	r3, r3
 8004892:	e008      	b.n	80048a6 <HAL_TIM_PWM_Start+0x6a>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b01      	cmp	r3, #1
 800489e:	bf14      	ite	ne
 80048a0:	2301      	movne	r3, #1
 80048a2:	2300      	moveq	r3, #0
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e07c      	b.n	80049a8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d104      	bne.n	80048be <HAL_TIM_PWM_Start+0x82>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2202      	movs	r2, #2
 80048b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048bc:	e013      	b.n	80048e6 <HAL_TIM_PWM_Start+0xaa>
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	2b04      	cmp	r3, #4
 80048c2:	d104      	bne.n	80048ce <HAL_TIM_PWM_Start+0x92>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2202      	movs	r2, #2
 80048c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048cc:	e00b      	b.n	80048e6 <HAL_TIM_PWM_Start+0xaa>
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2b08      	cmp	r3, #8
 80048d2:	d104      	bne.n	80048de <HAL_TIM_PWM_Start+0xa2>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2202      	movs	r2, #2
 80048d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048dc:	e003      	b.n	80048e6 <HAL_TIM_PWM_Start+0xaa>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2202      	movs	r2, #2
 80048e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2201      	movs	r2, #1
 80048ec:	6839      	ldr	r1, [r7, #0]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f000 fb8a 	bl	8005008 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a2d      	ldr	r2, [pc, #180]	@ (80049b0 <HAL_TIM_PWM_Start+0x174>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d004      	beq.n	8004908 <HAL_TIM_PWM_Start+0xcc>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a2c      	ldr	r2, [pc, #176]	@ (80049b4 <HAL_TIM_PWM_Start+0x178>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d101      	bne.n	800490c <HAL_TIM_PWM_Start+0xd0>
 8004908:	2301      	movs	r3, #1
 800490a:	e000      	b.n	800490e <HAL_TIM_PWM_Start+0xd2>
 800490c:	2300      	movs	r3, #0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d007      	beq.n	8004922 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004920:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a22      	ldr	r2, [pc, #136]	@ (80049b0 <HAL_TIM_PWM_Start+0x174>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d022      	beq.n	8004972 <HAL_TIM_PWM_Start+0x136>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004934:	d01d      	beq.n	8004972 <HAL_TIM_PWM_Start+0x136>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a1f      	ldr	r2, [pc, #124]	@ (80049b8 <HAL_TIM_PWM_Start+0x17c>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d018      	beq.n	8004972 <HAL_TIM_PWM_Start+0x136>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a1d      	ldr	r2, [pc, #116]	@ (80049bc <HAL_TIM_PWM_Start+0x180>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d013      	beq.n	8004972 <HAL_TIM_PWM_Start+0x136>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a1c      	ldr	r2, [pc, #112]	@ (80049c0 <HAL_TIM_PWM_Start+0x184>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d00e      	beq.n	8004972 <HAL_TIM_PWM_Start+0x136>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a16      	ldr	r2, [pc, #88]	@ (80049b4 <HAL_TIM_PWM_Start+0x178>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d009      	beq.n	8004972 <HAL_TIM_PWM_Start+0x136>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a18      	ldr	r2, [pc, #96]	@ (80049c4 <HAL_TIM_PWM_Start+0x188>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d004      	beq.n	8004972 <HAL_TIM_PWM_Start+0x136>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a16      	ldr	r2, [pc, #88]	@ (80049c8 <HAL_TIM_PWM_Start+0x18c>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d111      	bne.n	8004996 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f003 0307 	and.w	r3, r3, #7
 800497c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2b06      	cmp	r3, #6
 8004982:	d010      	beq.n	80049a6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f042 0201 	orr.w	r2, r2, #1
 8004992:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004994:	e007      	b.n	80049a6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f042 0201 	orr.w	r2, r2, #1
 80049a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	40010000 	.word	0x40010000
 80049b4:	40010400 	.word	0x40010400
 80049b8:	40000400 	.word	0x40000400
 80049bc:	40000800 	.word	0x40000800
 80049c0:	40000c00 	.word	0x40000c00
 80049c4:	40014000 	.word	0x40014000
 80049c8:	40001800 	.word	0x40001800

080049cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b086      	sub	sp, #24
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049d8:	2300      	movs	r3, #0
 80049da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d101      	bne.n	80049ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80049e6:	2302      	movs	r3, #2
 80049e8:	e0ae      	b.n	8004b48 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2b0c      	cmp	r3, #12
 80049f6:	f200 809f 	bhi.w	8004b38 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80049fa:	a201      	add	r2, pc, #4	@ (adr r2, 8004a00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80049fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a00:	08004a35 	.word	0x08004a35
 8004a04:	08004b39 	.word	0x08004b39
 8004a08:	08004b39 	.word	0x08004b39
 8004a0c:	08004b39 	.word	0x08004b39
 8004a10:	08004a75 	.word	0x08004a75
 8004a14:	08004b39 	.word	0x08004b39
 8004a18:	08004b39 	.word	0x08004b39
 8004a1c:	08004b39 	.word	0x08004b39
 8004a20:	08004ab7 	.word	0x08004ab7
 8004a24:	08004b39 	.word	0x08004b39
 8004a28:	08004b39 	.word	0x08004b39
 8004a2c:	08004b39 	.word	0x08004b39
 8004a30:	08004af7 	.word	0x08004af7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68b9      	ldr	r1, [r7, #8]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f000 f934 	bl	8004ca8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	699a      	ldr	r2, [r3, #24]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f042 0208 	orr.w	r2, r2, #8
 8004a4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	699a      	ldr	r2, [r3, #24]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f022 0204 	bic.w	r2, r2, #4
 8004a5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	6999      	ldr	r1, [r3, #24]
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	691a      	ldr	r2, [r3, #16]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	619a      	str	r2, [r3, #24]
      break;
 8004a72:	e064      	b.n	8004b3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68b9      	ldr	r1, [r7, #8]
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f000 f984 	bl	8004d88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	699a      	ldr	r2, [r3, #24]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	699a      	ldr	r2, [r3, #24]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	6999      	ldr	r1, [r3, #24]
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	021a      	lsls	r2, r3, #8
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	430a      	orrs	r2, r1
 8004ab2:	619a      	str	r2, [r3, #24]
      break;
 8004ab4:	e043      	b.n	8004b3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68b9      	ldr	r1, [r7, #8]
 8004abc:	4618      	mov	r0, r3
 8004abe:	f000 f9d9 	bl	8004e74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	69da      	ldr	r2, [r3, #28]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f042 0208 	orr.w	r2, r2, #8
 8004ad0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	69da      	ldr	r2, [r3, #28]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f022 0204 	bic.w	r2, r2, #4
 8004ae0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	69d9      	ldr	r1, [r3, #28]
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	691a      	ldr	r2, [r3, #16]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	430a      	orrs	r2, r1
 8004af2:	61da      	str	r2, [r3, #28]
      break;
 8004af4:	e023      	b.n	8004b3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68b9      	ldr	r1, [r7, #8]
 8004afc:	4618      	mov	r0, r3
 8004afe:	f000 fa2d 	bl	8004f5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	69da      	ldr	r2, [r3, #28]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	69da      	ldr	r2, [r3, #28]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	69d9      	ldr	r1, [r3, #28]
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	021a      	lsls	r2, r3, #8
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	430a      	orrs	r2, r1
 8004b34:	61da      	str	r2, [r3, #28]
      break;
 8004b36:	e002      	b.n	8004b3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	75fb      	strb	r3, [r7, #23]
      break;
 8004b3c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b46:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3718      	adds	r7, #24
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a46      	ldr	r2, [pc, #280]	@ (8004c7c <TIM_Base_SetConfig+0x12c>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d013      	beq.n	8004b90 <TIM_Base_SetConfig+0x40>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b6e:	d00f      	beq.n	8004b90 <TIM_Base_SetConfig+0x40>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a43      	ldr	r2, [pc, #268]	@ (8004c80 <TIM_Base_SetConfig+0x130>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d00b      	beq.n	8004b90 <TIM_Base_SetConfig+0x40>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a42      	ldr	r2, [pc, #264]	@ (8004c84 <TIM_Base_SetConfig+0x134>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d007      	beq.n	8004b90 <TIM_Base_SetConfig+0x40>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a41      	ldr	r2, [pc, #260]	@ (8004c88 <TIM_Base_SetConfig+0x138>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d003      	beq.n	8004b90 <TIM_Base_SetConfig+0x40>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a40      	ldr	r2, [pc, #256]	@ (8004c8c <TIM_Base_SetConfig+0x13c>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d108      	bne.n	8004ba2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a35      	ldr	r2, [pc, #212]	@ (8004c7c <TIM_Base_SetConfig+0x12c>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d02b      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bb0:	d027      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a32      	ldr	r2, [pc, #200]	@ (8004c80 <TIM_Base_SetConfig+0x130>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d023      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a31      	ldr	r2, [pc, #196]	@ (8004c84 <TIM_Base_SetConfig+0x134>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d01f      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a30      	ldr	r2, [pc, #192]	@ (8004c88 <TIM_Base_SetConfig+0x138>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d01b      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a2f      	ldr	r2, [pc, #188]	@ (8004c8c <TIM_Base_SetConfig+0x13c>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d017      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a2e      	ldr	r2, [pc, #184]	@ (8004c90 <TIM_Base_SetConfig+0x140>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d013      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a2d      	ldr	r2, [pc, #180]	@ (8004c94 <TIM_Base_SetConfig+0x144>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d00f      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a2c      	ldr	r2, [pc, #176]	@ (8004c98 <TIM_Base_SetConfig+0x148>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d00b      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a2b      	ldr	r2, [pc, #172]	@ (8004c9c <TIM_Base_SetConfig+0x14c>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d007      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a2a      	ldr	r2, [pc, #168]	@ (8004ca0 <TIM_Base_SetConfig+0x150>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d003      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a29      	ldr	r2, [pc, #164]	@ (8004ca4 <TIM_Base_SetConfig+0x154>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d108      	bne.n	8004c14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	689a      	ldr	r2, [r3, #8]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a10      	ldr	r2, [pc, #64]	@ (8004c7c <TIM_Base_SetConfig+0x12c>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d003      	beq.n	8004c48 <TIM_Base_SetConfig+0xf8>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a12      	ldr	r2, [pc, #72]	@ (8004c8c <TIM_Base_SetConfig+0x13c>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d103      	bne.n	8004c50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	691a      	ldr	r2, [r3, #16]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d105      	bne.n	8004c6e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	f023 0201 	bic.w	r2, r3, #1
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	611a      	str	r2, [r3, #16]
  }
}
 8004c6e:	bf00      	nop
 8004c70:	3714      	adds	r7, #20
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	40010000 	.word	0x40010000
 8004c80:	40000400 	.word	0x40000400
 8004c84:	40000800 	.word	0x40000800
 8004c88:	40000c00 	.word	0x40000c00
 8004c8c:	40010400 	.word	0x40010400
 8004c90:	40014000 	.word	0x40014000
 8004c94:	40014400 	.word	0x40014400
 8004c98:	40014800 	.word	0x40014800
 8004c9c:	40001800 	.word	0x40001800
 8004ca0:	40001c00 	.word	0x40001c00
 8004ca4:	40002000 	.word	0x40002000

08004ca8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b087      	sub	sp, #28
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a1b      	ldr	r3, [r3, #32]
 8004cbc:	f023 0201 	bic.w	r2, r3, #1
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f023 0303 	bic.w	r3, r3, #3
 8004cde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	f023 0302 	bic.w	r3, r3, #2
 8004cf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a20      	ldr	r2, [pc, #128]	@ (8004d80 <TIM_OC1_SetConfig+0xd8>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d003      	beq.n	8004d0c <TIM_OC1_SetConfig+0x64>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a1f      	ldr	r2, [pc, #124]	@ (8004d84 <TIM_OC1_SetConfig+0xdc>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d10c      	bne.n	8004d26 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	f023 0308 	bic.w	r3, r3, #8
 8004d12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	697a      	ldr	r2, [r7, #20]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	f023 0304 	bic.w	r3, r3, #4
 8004d24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a15      	ldr	r2, [pc, #84]	@ (8004d80 <TIM_OC1_SetConfig+0xd8>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d003      	beq.n	8004d36 <TIM_OC1_SetConfig+0x8e>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a14      	ldr	r2, [pc, #80]	@ (8004d84 <TIM_OC1_SetConfig+0xdc>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d111      	bne.n	8004d5a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	685a      	ldr	r2, [r3, #4]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	697a      	ldr	r2, [r7, #20]
 8004d72:	621a      	str	r2, [r3, #32]
}
 8004d74:	bf00      	nop
 8004d76:	371c      	adds	r7, #28
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr
 8004d80:	40010000 	.word	0x40010000
 8004d84:	40010400 	.word	0x40010400

08004d88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b087      	sub	sp, #28
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a1b      	ldr	r3, [r3, #32]
 8004d9c:	f023 0210 	bic.w	r2, r3, #16
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	021b      	lsls	r3, r3, #8
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	f023 0320 	bic.w	r3, r3, #32
 8004dd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	011b      	lsls	r3, r3, #4
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a22      	ldr	r2, [pc, #136]	@ (8004e6c <TIM_OC2_SetConfig+0xe4>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d003      	beq.n	8004df0 <TIM_OC2_SetConfig+0x68>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a21      	ldr	r2, [pc, #132]	@ (8004e70 <TIM_OC2_SetConfig+0xe8>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d10d      	bne.n	8004e0c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004df6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	011b      	lsls	r3, r3, #4
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e0a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a17      	ldr	r2, [pc, #92]	@ (8004e6c <TIM_OC2_SetConfig+0xe4>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d003      	beq.n	8004e1c <TIM_OC2_SetConfig+0x94>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a16      	ldr	r2, [pc, #88]	@ (8004e70 <TIM_OC2_SetConfig+0xe8>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d113      	bne.n	8004e44 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	695b      	ldr	r3, [r3, #20]
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	693a      	ldr	r2, [r7, #16]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	699b      	ldr	r3, [r3, #24]
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	621a      	str	r2, [r3, #32]
}
 8004e5e:	bf00      	nop
 8004e60:	371c      	adds	r7, #28
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	40010000 	.word	0x40010000
 8004e70:	40010400 	.word	0x40010400

08004e74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b087      	sub	sp, #28
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	69db      	ldr	r3, [r3, #28]
 8004e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f023 0303 	bic.w	r3, r3, #3
 8004eaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ebc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	021b      	lsls	r3, r3, #8
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a21      	ldr	r2, [pc, #132]	@ (8004f54 <TIM_OC3_SetConfig+0xe0>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d003      	beq.n	8004eda <TIM_OC3_SetConfig+0x66>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a20      	ldr	r2, [pc, #128]	@ (8004f58 <TIM_OC3_SetConfig+0xe4>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d10d      	bne.n	8004ef6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ee0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	021b      	lsls	r3, r3, #8
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ef4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a16      	ldr	r2, [pc, #88]	@ (8004f54 <TIM_OC3_SetConfig+0xe0>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d003      	beq.n	8004f06 <TIM_OC3_SetConfig+0x92>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a15      	ldr	r2, [pc, #84]	@ (8004f58 <TIM_OC3_SetConfig+0xe4>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d113      	bne.n	8004f2e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	011b      	lsls	r3, r3, #4
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	011b      	lsls	r3, r3, #4
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	621a      	str	r2, [r3, #32]
}
 8004f48:	bf00      	nop
 8004f4a:	371c      	adds	r7, #28
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr
 8004f54:	40010000 	.word	0x40010000
 8004f58:	40010400 	.word	0x40010400

08004f5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b087      	sub	sp, #28
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a1b      	ldr	r3, [r3, #32]
 8004f70:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	69db      	ldr	r3, [r3, #28]
 8004f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	021b      	lsls	r3, r3, #8
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004fa6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	031b      	lsls	r3, r3, #12
 8004fae:	693a      	ldr	r2, [r7, #16]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a12      	ldr	r2, [pc, #72]	@ (8005000 <TIM_OC4_SetConfig+0xa4>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d003      	beq.n	8004fc4 <TIM_OC4_SetConfig+0x68>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a11      	ldr	r2, [pc, #68]	@ (8005004 <TIM_OC4_SetConfig+0xa8>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d109      	bne.n	8004fd8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004fca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	695b      	ldr	r3, [r3, #20]
 8004fd0:	019b      	lsls	r3, r3, #6
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	697a      	ldr	r2, [r7, #20]
 8004fdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	685a      	ldr	r2, [r3, #4]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	693a      	ldr	r2, [r7, #16]
 8004ff0:	621a      	str	r2, [r3, #32]
}
 8004ff2:	bf00      	nop
 8004ff4:	371c      	adds	r7, #28
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	40010000 	.word	0x40010000
 8005004:	40010400 	.word	0x40010400

08005008 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005008:	b480      	push	{r7}
 800500a:	b087      	sub	sp, #28
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	f003 031f 	and.w	r3, r3, #31
 800501a:	2201      	movs	r2, #1
 800501c:	fa02 f303 	lsl.w	r3, r2, r3
 8005020:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6a1a      	ldr	r2, [r3, #32]
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	43db      	mvns	r3, r3
 800502a:	401a      	ands	r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6a1a      	ldr	r2, [r3, #32]
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	f003 031f 	and.w	r3, r3, #31
 800503a:	6879      	ldr	r1, [r7, #4]
 800503c:	fa01 f303 	lsl.w	r3, r1, r3
 8005040:	431a      	orrs	r2, r3
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	621a      	str	r2, [r3, #32]
}
 8005046:	bf00      	nop
 8005048:	371c      	adds	r7, #28
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
	...

08005054 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005064:	2b01      	cmp	r3, #1
 8005066:	d101      	bne.n	800506c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005068:	2302      	movs	r3, #2
 800506a:	e05a      	b.n	8005122 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2202      	movs	r2, #2
 8005078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005092:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	4313      	orrs	r3, r2
 800509c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a21      	ldr	r2, [pc, #132]	@ (8005130 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d022      	beq.n	80050f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050b8:	d01d      	beq.n	80050f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a1d      	ldr	r2, [pc, #116]	@ (8005134 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d018      	beq.n	80050f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a1b      	ldr	r2, [pc, #108]	@ (8005138 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d013      	beq.n	80050f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a1a      	ldr	r2, [pc, #104]	@ (800513c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d00e      	beq.n	80050f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a18      	ldr	r2, [pc, #96]	@ (8005140 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d009      	beq.n	80050f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a17      	ldr	r2, [pc, #92]	@ (8005144 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d004      	beq.n	80050f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a15      	ldr	r2, [pc, #84]	@ (8005148 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d10c      	bne.n	8005110 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	68ba      	ldr	r2, [r7, #8]
 8005104:	4313      	orrs	r3, r2
 8005106:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3714      	adds	r7, #20
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	40010000 	.word	0x40010000
 8005134:	40000400 	.word	0x40000400
 8005138:	40000800 	.word	0x40000800
 800513c:	40000c00 	.word	0x40000c00
 8005140:	40010400 	.word	0x40010400
 8005144:	40014000 	.word	0x40014000
 8005148:	40001800 	.word	0x40001800

0800514c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e042      	b.n	80051e4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d106      	bne.n	8005178 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7fc ff9e 	bl	80020b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2224      	movs	r2, #36	@ 0x24
 800517c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68da      	ldr	r2, [r3, #12]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800518e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 f973 	bl	800547c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	691a      	ldr	r2, [r3, #16]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	695a      	ldr	r2, [r3, #20]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80051b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68da      	ldr	r2, [r3, #12]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80051c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2220      	movs	r2, #32
 80051d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2220      	movs	r2, #32
 80051d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3708      	adds	r7, #8
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b08a      	sub	sp, #40	@ 0x28
 80051f0:	af02      	add	r7, sp, #8
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	603b      	str	r3, [r7, #0]
 80051f8:	4613      	mov	r3, r2
 80051fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80051fc:	2300      	movs	r3, #0
 80051fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005206:	b2db      	uxtb	r3, r3
 8005208:	2b20      	cmp	r3, #32
 800520a:	d175      	bne.n	80052f8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d002      	beq.n	8005218 <HAL_UART_Transmit+0x2c>
 8005212:	88fb      	ldrh	r3, [r7, #6]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d101      	bne.n	800521c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e06e      	b.n	80052fa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2200      	movs	r2, #0
 8005220:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2221      	movs	r2, #33	@ 0x21
 8005226:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800522a:	f7fd f899 	bl	8002360 <HAL_GetTick>
 800522e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	88fa      	ldrh	r2, [r7, #6]
 8005234:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	88fa      	ldrh	r2, [r7, #6]
 800523a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005244:	d108      	bne.n	8005258 <HAL_UART_Transmit+0x6c>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d104      	bne.n	8005258 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800524e:	2300      	movs	r3, #0
 8005250:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	61bb      	str	r3, [r7, #24]
 8005256:	e003      	b.n	8005260 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800525c:	2300      	movs	r3, #0
 800525e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005260:	e02e      	b.n	80052c0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	9300      	str	r3, [sp, #0]
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	2200      	movs	r2, #0
 800526a:	2180      	movs	r1, #128	@ 0x80
 800526c:	68f8      	ldr	r0, [r7, #12]
 800526e:	f000 f848 	bl	8005302 <UART_WaitOnFlagUntilTimeout>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d005      	beq.n	8005284 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2220      	movs	r2, #32
 800527c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e03a      	b.n	80052fa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10b      	bne.n	80052a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	881b      	ldrh	r3, [r3, #0]
 800528e:	461a      	mov	r2, r3
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005298:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	3302      	adds	r3, #2
 800529e:	61bb      	str	r3, [r7, #24]
 80052a0:	e007      	b.n	80052b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	781a      	ldrb	r2, [r3, #0]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	3301      	adds	r3, #1
 80052b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	3b01      	subs	r3, #1
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1cb      	bne.n	8005262 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	9300      	str	r3, [sp, #0]
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	2200      	movs	r2, #0
 80052d2:	2140      	movs	r1, #64	@ 0x40
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f000 f814 	bl	8005302 <UART_WaitOnFlagUntilTimeout>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d005      	beq.n	80052ec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2220      	movs	r2, #32
 80052e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80052e8:	2303      	movs	r3, #3
 80052ea:	e006      	b.n	80052fa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2220      	movs	r2, #32
 80052f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80052f4:	2300      	movs	r3, #0
 80052f6:	e000      	b.n	80052fa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80052f8:	2302      	movs	r3, #2
  }
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3720      	adds	r7, #32
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b086      	sub	sp, #24
 8005306:	af00      	add	r7, sp, #0
 8005308:	60f8      	str	r0, [r7, #12]
 800530a:	60b9      	str	r1, [r7, #8]
 800530c:	603b      	str	r3, [r7, #0]
 800530e:	4613      	mov	r3, r2
 8005310:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005312:	e03b      	b.n	800538c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005314:	6a3b      	ldr	r3, [r7, #32]
 8005316:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800531a:	d037      	beq.n	800538c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800531c:	f7fd f820 	bl	8002360 <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	6a3a      	ldr	r2, [r7, #32]
 8005328:	429a      	cmp	r2, r3
 800532a:	d302      	bcc.n	8005332 <UART_WaitOnFlagUntilTimeout+0x30>
 800532c:	6a3b      	ldr	r3, [r7, #32]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d101      	bne.n	8005336 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e03a      	b.n	80053ac <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	f003 0304 	and.w	r3, r3, #4
 8005340:	2b00      	cmp	r3, #0
 8005342:	d023      	beq.n	800538c <UART_WaitOnFlagUntilTimeout+0x8a>
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	2b80      	cmp	r3, #128	@ 0x80
 8005348:	d020      	beq.n	800538c <UART_WaitOnFlagUntilTimeout+0x8a>
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	2b40      	cmp	r3, #64	@ 0x40
 800534e:	d01d      	beq.n	800538c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0308 	and.w	r3, r3, #8
 800535a:	2b08      	cmp	r3, #8
 800535c:	d116      	bne.n	800538c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800535e:	2300      	movs	r3, #0
 8005360:	617b      	str	r3, [r7, #20]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	617b      	str	r3, [r7, #20]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	617b      	str	r3, [r7, #20]
 8005372:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005374:	68f8      	ldr	r0, [r7, #12]
 8005376:	f000 f81d 	bl	80053b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2208      	movs	r2, #8
 800537e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e00f      	b.n	80053ac <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	4013      	ands	r3, r2
 8005396:	68ba      	ldr	r2, [r7, #8]
 8005398:	429a      	cmp	r2, r3
 800539a:	bf0c      	ite	eq
 800539c:	2301      	moveq	r3, #1
 800539e:	2300      	movne	r3, #0
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	461a      	mov	r2, r3
 80053a4:	79fb      	ldrb	r3, [r7, #7]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d0b4      	beq.n	8005314 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3718      	adds	r7, #24
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b095      	sub	sp, #84	@ 0x54
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	330c      	adds	r3, #12
 80053c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053c6:	e853 3f00 	ldrex	r3, [r3]
 80053ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80053cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	330c      	adds	r3, #12
 80053da:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80053dc:	643a      	str	r2, [r7, #64]	@ 0x40
 80053de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80053e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80053e4:	e841 2300 	strex	r3, r2, [r1]
 80053e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80053ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d1e5      	bne.n	80053bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	3314      	adds	r3, #20
 80053f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f8:	6a3b      	ldr	r3, [r7, #32]
 80053fa:	e853 3f00 	ldrex	r3, [r3]
 80053fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	f023 0301 	bic.w	r3, r3, #1
 8005406:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	3314      	adds	r3, #20
 800540e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005410:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005412:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005414:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005416:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005418:	e841 2300 	strex	r3, r2, [r1]
 800541c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800541e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005420:	2b00      	cmp	r3, #0
 8005422:	d1e5      	bne.n	80053f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005428:	2b01      	cmp	r3, #1
 800542a:	d119      	bne.n	8005460 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	330c      	adds	r3, #12
 8005432:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	e853 3f00 	ldrex	r3, [r3]
 800543a:	60bb      	str	r3, [r7, #8]
   return(result);
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	f023 0310 	bic.w	r3, r3, #16
 8005442:	647b      	str	r3, [r7, #68]	@ 0x44
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	330c      	adds	r3, #12
 800544a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800544c:	61ba      	str	r2, [r7, #24]
 800544e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005450:	6979      	ldr	r1, [r7, #20]
 8005452:	69ba      	ldr	r2, [r7, #24]
 8005454:	e841 2300 	strex	r3, r2, [r1]
 8005458:	613b      	str	r3, [r7, #16]
   return(result);
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d1e5      	bne.n	800542c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2220      	movs	r2, #32
 8005464:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800546e:	bf00      	nop
 8005470:	3754      	adds	r7, #84	@ 0x54
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
	...

0800547c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800547c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005480:	b0c0      	sub	sp, #256	@ 0x100
 8005482:	af00      	add	r7, sp, #0
 8005484:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005498:	68d9      	ldr	r1, [r3, #12]
 800549a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	ea40 0301 	orr.w	r3, r0, r1
 80054a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80054a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054aa:	689a      	ldr	r2, [r3, #8]
 80054ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	431a      	orrs	r2, r3
 80054b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	431a      	orrs	r2, r3
 80054bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054c0:	69db      	ldr	r3, [r3, #28]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80054c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80054d4:	f021 010c 	bic.w	r1, r1, #12
 80054d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80054e2:	430b      	orrs	r3, r1
 80054e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80054e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80054f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054f6:	6999      	ldr	r1, [r3, #24]
 80054f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	ea40 0301 	orr.w	r3, r0, r1
 8005502:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	4b8f      	ldr	r3, [pc, #572]	@ (8005748 <UART_SetConfig+0x2cc>)
 800550c:	429a      	cmp	r2, r3
 800550e:	d005      	beq.n	800551c <UART_SetConfig+0xa0>
 8005510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	4b8d      	ldr	r3, [pc, #564]	@ (800574c <UART_SetConfig+0x2d0>)
 8005518:	429a      	cmp	r2, r3
 800551a:	d104      	bne.n	8005526 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800551c:	f7fe fc5c 	bl	8003dd8 <HAL_RCC_GetPCLK2Freq>
 8005520:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005524:	e003      	b.n	800552e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005526:	f7fe fc43 	bl	8003db0 <HAL_RCC_GetPCLK1Freq>
 800552a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800552e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005532:	69db      	ldr	r3, [r3, #28]
 8005534:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005538:	f040 810c 	bne.w	8005754 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800553c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005540:	2200      	movs	r2, #0
 8005542:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005546:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800554a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800554e:	4622      	mov	r2, r4
 8005550:	462b      	mov	r3, r5
 8005552:	1891      	adds	r1, r2, r2
 8005554:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005556:	415b      	adcs	r3, r3
 8005558:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800555a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800555e:	4621      	mov	r1, r4
 8005560:	eb12 0801 	adds.w	r8, r2, r1
 8005564:	4629      	mov	r1, r5
 8005566:	eb43 0901 	adc.w	r9, r3, r1
 800556a:	f04f 0200 	mov.w	r2, #0
 800556e:	f04f 0300 	mov.w	r3, #0
 8005572:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005576:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800557a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800557e:	4690      	mov	r8, r2
 8005580:	4699      	mov	r9, r3
 8005582:	4623      	mov	r3, r4
 8005584:	eb18 0303 	adds.w	r3, r8, r3
 8005588:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800558c:	462b      	mov	r3, r5
 800558e:	eb49 0303 	adc.w	r3, r9, r3
 8005592:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80055a2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80055a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80055aa:	460b      	mov	r3, r1
 80055ac:	18db      	adds	r3, r3, r3
 80055ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80055b0:	4613      	mov	r3, r2
 80055b2:	eb42 0303 	adc.w	r3, r2, r3
 80055b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80055b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80055bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80055c0:	f7fb fb24 	bl	8000c0c <__aeabi_uldivmod>
 80055c4:	4602      	mov	r2, r0
 80055c6:	460b      	mov	r3, r1
 80055c8:	4b61      	ldr	r3, [pc, #388]	@ (8005750 <UART_SetConfig+0x2d4>)
 80055ca:	fba3 2302 	umull	r2, r3, r3, r2
 80055ce:	095b      	lsrs	r3, r3, #5
 80055d0:	011c      	lsls	r4, r3, #4
 80055d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055d6:	2200      	movs	r2, #0
 80055d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80055dc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80055e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80055e4:	4642      	mov	r2, r8
 80055e6:	464b      	mov	r3, r9
 80055e8:	1891      	adds	r1, r2, r2
 80055ea:	64b9      	str	r1, [r7, #72]	@ 0x48
 80055ec:	415b      	adcs	r3, r3
 80055ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80055f4:	4641      	mov	r1, r8
 80055f6:	eb12 0a01 	adds.w	sl, r2, r1
 80055fa:	4649      	mov	r1, r9
 80055fc:	eb43 0b01 	adc.w	fp, r3, r1
 8005600:	f04f 0200 	mov.w	r2, #0
 8005604:	f04f 0300 	mov.w	r3, #0
 8005608:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800560c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005610:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005614:	4692      	mov	sl, r2
 8005616:	469b      	mov	fp, r3
 8005618:	4643      	mov	r3, r8
 800561a:	eb1a 0303 	adds.w	r3, sl, r3
 800561e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005622:	464b      	mov	r3, r9
 8005624:	eb4b 0303 	adc.w	r3, fp, r3
 8005628:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800562c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005638:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800563c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005640:	460b      	mov	r3, r1
 8005642:	18db      	adds	r3, r3, r3
 8005644:	643b      	str	r3, [r7, #64]	@ 0x40
 8005646:	4613      	mov	r3, r2
 8005648:	eb42 0303 	adc.w	r3, r2, r3
 800564c:	647b      	str	r3, [r7, #68]	@ 0x44
 800564e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005652:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005656:	f7fb fad9 	bl	8000c0c <__aeabi_uldivmod>
 800565a:	4602      	mov	r2, r0
 800565c:	460b      	mov	r3, r1
 800565e:	4611      	mov	r1, r2
 8005660:	4b3b      	ldr	r3, [pc, #236]	@ (8005750 <UART_SetConfig+0x2d4>)
 8005662:	fba3 2301 	umull	r2, r3, r3, r1
 8005666:	095b      	lsrs	r3, r3, #5
 8005668:	2264      	movs	r2, #100	@ 0x64
 800566a:	fb02 f303 	mul.w	r3, r2, r3
 800566e:	1acb      	subs	r3, r1, r3
 8005670:	00db      	lsls	r3, r3, #3
 8005672:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005676:	4b36      	ldr	r3, [pc, #216]	@ (8005750 <UART_SetConfig+0x2d4>)
 8005678:	fba3 2302 	umull	r2, r3, r3, r2
 800567c:	095b      	lsrs	r3, r3, #5
 800567e:	005b      	lsls	r3, r3, #1
 8005680:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005684:	441c      	add	r4, r3
 8005686:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800568a:	2200      	movs	r2, #0
 800568c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005690:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005694:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005698:	4642      	mov	r2, r8
 800569a:	464b      	mov	r3, r9
 800569c:	1891      	adds	r1, r2, r2
 800569e:	63b9      	str	r1, [r7, #56]	@ 0x38
 80056a0:	415b      	adcs	r3, r3
 80056a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80056a8:	4641      	mov	r1, r8
 80056aa:	1851      	adds	r1, r2, r1
 80056ac:	6339      	str	r1, [r7, #48]	@ 0x30
 80056ae:	4649      	mov	r1, r9
 80056b0:	414b      	adcs	r3, r1
 80056b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80056b4:	f04f 0200 	mov.w	r2, #0
 80056b8:	f04f 0300 	mov.w	r3, #0
 80056bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80056c0:	4659      	mov	r1, fp
 80056c2:	00cb      	lsls	r3, r1, #3
 80056c4:	4651      	mov	r1, sl
 80056c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056ca:	4651      	mov	r1, sl
 80056cc:	00ca      	lsls	r2, r1, #3
 80056ce:	4610      	mov	r0, r2
 80056d0:	4619      	mov	r1, r3
 80056d2:	4603      	mov	r3, r0
 80056d4:	4642      	mov	r2, r8
 80056d6:	189b      	adds	r3, r3, r2
 80056d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80056dc:	464b      	mov	r3, r9
 80056de:	460a      	mov	r2, r1
 80056e0:	eb42 0303 	adc.w	r3, r2, r3
 80056e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80056e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80056f4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80056f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80056fc:	460b      	mov	r3, r1
 80056fe:	18db      	adds	r3, r3, r3
 8005700:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005702:	4613      	mov	r3, r2
 8005704:	eb42 0303 	adc.w	r3, r2, r3
 8005708:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800570a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800570e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005712:	f7fb fa7b 	bl	8000c0c <__aeabi_uldivmod>
 8005716:	4602      	mov	r2, r0
 8005718:	460b      	mov	r3, r1
 800571a:	4b0d      	ldr	r3, [pc, #52]	@ (8005750 <UART_SetConfig+0x2d4>)
 800571c:	fba3 1302 	umull	r1, r3, r3, r2
 8005720:	095b      	lsrs	r3, r3, #5
 8005722:	2164      	movs	r1, #100	@ 0x64
 8005724:	fb01 f303 	mul.w	r3, r1, r3
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	00db      	lsls	r3, r3, #3
 800572c:	3332      	adds	r3, #50	@ 0x32
 800572e:	4a08      	ldr	r2, [pc, #32]	@ (8005750 <UART_SetConfig+0x2d4>)
 8005730:	fba2 2303 	umull	r2, r3, r2, r3
 8005734:	095b      	lsrs	r3, r3, #5
 8005736:	f003 0207 	and.w	r2, r3, #7
 800573a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4422      	add	r2, r4
 8005742:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005744:	e106      	b.n	8005954 <UART_SetConfig+0x4d8>
 8005746:	bf00      	nop
 8005748:	40011000 	.word	0x40011000
 800574c:	40011400 	.word	0x40011400
 8005750:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005754:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005758:	2200      	movs	r2, #0
 800575a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800575e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005762:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005766:	4642      	mov	r2, r8
 8005768:	464b      	mov	r3, r9
 800576a:	1891      	adds	r1, r2, r2
 800576c:	6239      	str	r1, [r7, #32]
 800576e:	415b      	adcs	r3, r3
 8005770:	627b      	str	r3, [r7, #36]	@ 0x24
 8005772:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005776:	4641      	mov	r1, r8
 8005778:	1854      	adds	r4, r2, r1
 800577a:	4649      	mov	r1, r9
 800577c:	eb43 0501 	adc.w	r5, r3, r1
 8005780:	f04f 0200 	mov.w	r2, #0
 8005784:	f04f 0300 	mov.w	r3, #0
 8005788:	00eb      	lsls	r3, r5, #3
 800578a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800578e:	00e2      	lsls	r2, r4, #3
 8005790:	4614      	mov	r4, r2
 8005792:	461d      	mov	r5, r3
 8005794:	4643      	mov	r3, r8
 8005796:	18e3      	adds	r3, r4, r3
 8005798:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800579c:	464b      	mov	r3, r9
 800579e:	eb45 0303 	adc.w	r3, r5, r3
 80057a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80057a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80057b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80057b6:	f04f 0200 	mov.w	r2, #0
 80057ba:	f04f 0300 	mov.w	r3, #0
 80057be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80057c2:	4629      	mov	r1, r5
 80057c4:	008b      	lsls	r3, r1, #2
 80057c6:	4621      	mov	r1, r4
 80057c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057cc:	4621      	mov	r1, r4
 80057ce:	008a      	lsls	r2, r1, #2
 80057d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80057d4:	f7fb fa1a 	bl	8000c0c <__aeabi_uldivmod>
 80057d8:	4602      	mov	r2, r0
 80057da:	460b      	mov	r3, r1
 80057dc:	4b60      	ldr	r3, [pc, #384]	@ (8005960 <UART_SetConfig+0x4e4>)
 80057de:	fba3 2302 	umull	r2, r3, r3, r2
 80057e2:	095b      	lsrs	r3, r3, #5
 80057e4:	011c      	lsls	r4, r3, #4
 80057e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057ea:	2200      	movs	r2, #0
 80057ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80057f0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80057f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80057f8:	4642      	mov	r2, r8
 80057fa:	464b      	mov	r3, r9
 80057fc:	1891      	adds	r1, r2, r2
 80057fe:	61b9      	str	r1, [r7, #24]
 8005800:	415b      	adcs	r3, r3
 8005802:	61fb      	str	r3, [r7, #28]
 8005804:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005808:	4641      	mov	r1, r8
 800580a:	1851      	adds	r1, r2, r1
 800580c:	6139      	str	r1, [r7, #16]
 800580e:	4649      	mov	r1, r9
 8005810:	414b      	adcs	r3, r1
 8005812:	617b      	str	r3, [r7, #20]
 8005814:	f04f 0200 	mov.w	r2, #0
 8005818:	f04f 0300 	mov.w	r3, #0
 800581c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005820:	4659      	mov	r1, fp
 8005822:	00cb      	lsls	r3, r1, #3
 8005824:	4651      	mov	r1, sl
 8005826:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800582a:	4651      	mov	r1, sl
 800582c:	00ca      	lsls	r2, r1, #3
 800582e:	4610      	mov	r0, r2
 8005830:	4619      	mov	r1, r3
 8005832:	4603      	mov	r3, r0
 8005834:	4642      	mov	r2, r8
 8005836:	189b      	adds	r3, r3, r2
 8005838:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800583c:	464b      	mov	r3, r9
 800583e:	460a      	mov	r2, r1
 8005840:	eb42 0303 	adc.w	r3, r2, r3
 8005844:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005852:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005854:	f04f 0200 	mov.w	r2, #0
 8005858:	f04f 0300 	mov.w	r3, #0
 800585c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005860:	4649      	mov	r1, r9
 8005862:	008b      	lsls	r3, r1, #2
 8005864:	4641      	mov	r1, r8
 8005866:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800586a:	4641      	mov	r1, r8
 800586c:	008a      	lsls	r2, r1, #2
 800586e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005872:	f7fb f9cb 	bl	8000c0c <__aeabi_uldivmod>
 8005876:	4602      	mov	r2, r0
 8005878:	460b      	mov	r3, r1
 800587a:	4611      	mov	r1, r2
 800587c:	4b38      	ldr	r3, [pc, #224]	@ (8005960 <UART_SetConfig+0x4e4>)
 800587e:	fba3 2301 	umull	r2, r3, r3, r1
 8005882:	095b      	lsrs	r3, r3, #5
 8005884:	2264      	movs	r2, #100	@ 0x64
 8005886:	fb02 f303 	mul.w	r3, r2, r3
 800588a:	1acb      	subs	r3, r1, r3
 800588c:	011b      	lsls	r3, r3, #4
 800588e:	3332      	adds	r3, #50	@ 0x32
 8005890:	4a33      	ldr	r2, [pc, #204]	@ (8005960 <UART_SetConfig+0x4e4>)
 8005892:	fba2 2303 	umull	r2, r3, r2, r3
 8005896:	095b      	lsrs	r3, r3, #5
 8005898:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800589c:	441c      	add	r4, r3
 800589e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058a2:	2200      	movs	r2, #0
 80058a4:	673b      	str	r3, [r7, #112]	@ 0x70
 80058a6:	677a      	str	r2, [r7, #116]	@ 0x74
 80058a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80058ac:	4642      	mov	r2, r8
 80058ae:	464b      	mov	r3, r9
 80058b0:	1891      	adds	r1, r2, r2
 80058b2:	60b9      	str	r1, [r7, #8]
 80058b4:	415b      	adcs	r3, r3
 80058b6:	60fb      	str	r3, [r7, #12]
 80058b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058bc:	4641      	mov	r1, r8
 80058be:	1851      	adds	r1, r2, r1
 80058c0:	6039      	str	r1, [r7, #0]
 80058c2:	4649      	mov	r1, r9
 80058c4:	414b      	adcs	r3, r1
 80058c6:	607b      	str	r3, [r7, #4]
 80058c8:	f04f 0200 	mov.w	r2, #0
 80058cc:	f04f 0300 	mov.w	r3, #0
 80058d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80058d4:	4659      	mov	r1, fp
 80058d6:	00cb      	lsls	r3, r1, #3
 80058d8:	4651      	mov	r1, sl
 80058da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058de:	4651      	mov	r1, sl
 80058e0:	00ca      	lsls	r2, r1, #3
 80058e2:	4610      	mov	r0, r2
 80058e4:	4619      	mov	r1, r3
 80058e6:	4603      	mov	r3, r0
 80058e8:	4642      	mov	r2, r8
 80058ea:	189b      	adds	r3, r3, r2
 80058ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80058ee:	464b      	mov	r3, r9
 80058f0:	460a      	mov	r2, r1
 80058f2:	eb42 0303 	adc.w	r3, r2, r3
 80058f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80058f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	663b      	str	r3, [r7, #96]	@ 0x60
 8005902:	667a      	str	r2, [r7, #100]	@ 0x64
 8005904:	f04f 0200 	mov.w	r2, #0
 8005908:	f04f 0300 	mov.w	r3, #0
 800590c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005910:	4649      	mov	r1, r9
 8005912:	008b      	lsls	r3, r1, #2
 8005914:	4641      	mov	r1, r8
 8005916:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800591a:	4641      	mov	r1, r8
 800591c:	008a      	lsls	r2, r1, #2
 800591e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005922:	f7fb f973 	bl	8000c0c <__aeabi_uldivmod>
 8005926:	4602      	mov	r2, r0
 8005928:	460b      	mov	r3, r1
 800592a:	4b0d      	ldr	r3, [pc, #52]	@ (8005960 <UART_SetConfig+0x4e4>)
 800592c:	fba3 1302 	umull	r1, r3, r3, r2
 8005930:	095b      	lsrs	r3, r3, #5
 8005932:	2164      	movs	r1, #100	@ 0x64
 8005934:	fb01 f303 	mul.w	r3, r1, r3
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	011b      	lsls	r3, r3, #4
 800593c:	3332      	adds	r3, #50	@ 0x32
 800593e:	4a08      	ldr	r2, [pc, #32]	@ (8005960 <UART_SetConfig+0x4e4>)
 8005940:	fba2 2303 	umull	r2, r3, r2, r3
 8005944:	095b      	lsrs	r3, r3, #5
 8005946:	f003 020f 	and.w	r2, r3, #15
 800594a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4422      	add	r2, r4
 8005952:	609a      	str	r2, [r3, #8]
}
 8005954:	bf00      	nop
 8005956:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800595a:	46bd      	mov	sp, r7
 800595c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005960:	51eb851f 	.word	0x51eb851f

08005964 <siprintf>:
 8005964:	b40e      	push	{r1, r2, r3}
 8005966:	b500      	push	{lr}
 8005968:	b09c      	sub	sp, #112	@ 0x70
 800596a:	ab1d      	add	r3, sp, #116	@ 0x74
 800596c:	9002      	str	r0, [sp, #8]
 800596e:	9006      	str	r0, [sp, #24]
 8005970:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005974:	4809      	ldr	r0, [pc, #36]	@ (800599c <siprintf+0x38>)
 8005976:	9107      	str	r1, [sp, #28]
 8005978:	9104      	str	r1, [sp, #16]
 800597a:	4909      	ldr	r1, [pc, #36]	@ (80059a0 <siprintf+0x3c>)
 800597c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005980:	9105      	str	r1, [sp, #20]
 8005982:	6800      	ldr	r0, [r0, #0]
 8005984:	9301      	str	r3, [sp, #4]
 8005986:	a902      	add	r1, sp, #8
 8005988:	f000 f9a8 	bl	8005cdc <_svfiprintf_r>
 800598c:	9b02      	ldr	r3, [sp, #8]
 800598e:	2200      	movs	r2, #0
 8005990:	701a      	strb	r2, [r3, #0]
 8005992:	b01c      	add	sp, #112	@ 0x70
 8005994:	f85d eb04 	ldr.w	lr, [sp], #4
 8005998:	b003      	add	sp, #12
 800599a:	4770      	bx	lr
 800599c:	20000010 	.word	0x20000010
 80059a0:	ffff0208 	.word	0xffff0208

080059a4 <memset>:
 80059a4:	4402      	add	r2, r0
 80059a6:	4603      	mov	r3, r0
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d100      	bne.n	80059ae <memset+0xa>
 80059ac:	4770      	bx	lr
 80059ae:	f803 1b01 	strb.w	r1, [r3], #1
 80059b2:	e7f9      	b.n	80059a8 <memset+0x4>

080059b4 <strncpy>:
 80059b4:	b510      	push	{r4, lr}
 80059b6:	3901      	subs	r1, #1
 80059b8:	4603      	mov	r3, r0
 80059ba:	b132      	cbz	r2, 80059ca <strncpy+0x16>
 80059bc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80059c0:	f803 4b01 	strb.w	r4, [r3], #1
 80059c4:	3a01      	subs	r2, #1
 80059c6:	2c00      	cmp	r4, #0
 80059c8:	d1f7      	bne.n	80059ba <strncpy+0x6>
 80059ca:	441a      	add	r2, r3
 80059cc:	2100      	movs	r1, #0
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d100      	bne.n	80059d4 <strncpy+0x20>
 80059d2:	bd10      	pop	{r4, pc}
 80059d4:	f803 1b01 	strb.w	r1, [r3], #1
 80059d8:	e7f9      	b.n	80059ce <strncpy+0x1a>
	...

080059dc <__errno>:
 80059dc:	4b01      	ldr	r3, [pc, #4]	@ (80059e4 <__errno+0x8>)
 80059de:	6818      	ldr	r0, [r3, #0]
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	20000010 	.word	0x20000010

080059e8 <__libc_init_array>:
 80059e8:	b570      	push	{r4, r5, r6, lr}
 80059ea:	4d0d      	ldr	r5, [pc, #52]	@ (8005a20 <__libc_init_array+0x38>)
 80059ec:	4c0d      	ldr	r4, [pc, #52]	@ (8005a24 <__libc_init_array+0x3c>)
 80059ee:	1b64      	subs	r4, r4, r5
 80059f0:	10a4      	asrs	r4, r4, #2
 80059f2:	2600      	movs	r6, #0
 80059f4:	42a6      	cmp	r6, r4
 80059f6:	d109      	bne.n	8005a0c <__libc_init_array+0x24>
 80059f8:	4d0b      	ldr	r5, [pc, #44]	@ (8005a28 <__libc_init_array+0x40>)
 80059fa:	4c0c      	ldr	r4, [pc, #48]	@ (8005a2c <__libc_init_array+0x44>)
 80059fc:	f000 fed0 	bl	80067a0 <_init>
 8005a00:	1b64      	subs	r4, r4, r5
 8005a02:	10a4      	asrs	r4, r4, #2
 8005a04:	2600      	movs	r6, #0
 8005a06:	42a6      	cmp	r6, r4
 8005a08:	d105      	bne.n	8005a16 <__libc_init_array+0x2e>
 8005a0a:	bd70      	pop	{r4, r5, r6, pc}
 8005a0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a10:	4798      	blx	r3
 8005a12:	3601      	adds	r6, #1
 8005a14:	e7ee      	b.n	80059f4 <__libc_init_array+0xc>
 8005a16:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a1a:	4798      	blx	r3
 8005a1c:	3601      	adds	r6, #1
 8005a1e:	e7f2      	b.n	8005a06 <__libc_init_array+0x1e>
 8005a20:	08006b08 	.word	0x08006b08
 8005a24:	08006b08 	.word	0x08006b08
 8005a28:	08006b08 	.word	0x08006b08
 8005a2c:	08006b0c 	.word	0x08006b0c

08005a30 <__retarget_lock_acquire_recursive>:
 8005a30:	4770      	bx	lr

08005a32 <__retarget_lock_release_recursive>:
 8005a32:	4770      	bx	lr

08005a34 <_free_r>:
 8005a34:	b538      	push	{r3, r4, r5, lr}
 8005a36:	4605      	mov	r5, r0
 8005a38:	2900      	cmp	r1, #0
 8005a3a:	d041      	beq.n	8005ac0 <_free_r+0x8c>
 8005a3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a40:	1f0c      	subs	r4, r1, #4
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	bfb8      	it	lt
 8005a46:	18e4      	addlt	r4, r4, r3
 8005a48:	f000 f8e0 	bl	8005c0c <__malloc_lock>
 8005a4c:	4a1d      	ldr	r2, [pc, #116]	@ (8005ac4 <_free_r+0x90>)
 8005a4e:	6813      	ldr	r3, [r2, #0]
 8005a50:	b933      	cbnz	r3, 8005a60 <_free_r+0x2c>
 8005a52:	6063      	str	r3, [r4, #4]
 8005a54:	6014      	str	r4, [r2, #0]
 8005a56:	4628      	mov	r0, r5
 8005a58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a5c:	f000 b8dc 	b.w	8005c18 <__malloc_unlock>
 8005a60:	42a3      	cmp	r3, r4
 8005a62:	d908      	bls.n	8005a76 <_free_r+0x42>
 8005a64:	6820      	ldr	r0, [r4, #0]
 8005a66:	1821      	adds	r1, r4, r0
 8005a68:	428b      	cmp	r3, r1
 8005a6a:	bf01      	itttt	eq
 8005a6c:	6819      	ldreq	r1, [r3, #0]
 8005a6e:	685b      	ldreq	r3, [r3, #4]
 8005a70:	1809      	addeq	r1, r1, r0
 8005a72:	6021      	streq	r1, [r4, #0]
 8005a74:	e7ed      	b.n	8005a52 <_free_r+0x1e>
 8005a76:	461a      	mov	r2, r3
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	b10b      	cbz	r3, 8005a80 <_free_r+0x4c>
 8005a7c:	42a3      	cmp	r3, r4
 8005a7e:	d9fa      	bls.n	8005a76 <_free_r+0x42>
 8005a80:	6811      	ldr	r1, [r2, #0]
 8005a82:	1850      	adds	r0, r2, r1
 8005a84:	42a0      	cmp	r0, r4
 8005a86:	d10b      	bne.n	8005aa0 <_free_r+0x6c>
 8005a88:	6820      	ldr	r0, [r4, #0]
 8005a8a:	4401      	add	r1, r0
 8005a8c:	1850      	adds	r0, r2, r1
 8005a8e:	4283      	cmp	r3, r0
 8005a90:	6011      	str	r1, [r2, #0]
 8005a92:	d1e0      	bne.n	8005a56 <_free_r+0x22>
 8005a94:	6818      	ldr	r0, [r3, #0]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	6053      	str	r3, [r2, #4]
 8005a9a:	4408      	add	r0, r1
 8005a9c:	6010      	str	r0, [r2, #0]
 8005a9e:	e7da      	b.n	8005a56 <_free_r+0x22>
 8005aa0:	d902      	bls.n	8005aa8 <_free_r+0x74>
 8005aa2:	230c      	movs	r3, #12
 8005aa4:	602b      	str	r3, [r5, #0]
 8005aa6:	e7d6      	b.n	8005a56 <_free_r+0x22>
 8005aa8:	6820      	ldr	r0, [r4, #0]
 8005aaa:	1821      	adds	r1, r4, r0
 8005aac:	428b      	cmp	r3, r1
 8005aae:	bf04      	itt	eq
 8005ab0:	6819      	ldreq	r1, [r3, #0]
 8005ab2:	685b      	ldreq	r3, [r3, #4]
 8005ab4:	6063      	str	r3, [r4, #4]
 8005ab6:	bf04      	itt	eq
 8005ab8:	1809      	addeq	r1, r1, r0
 8005aba:	6021      	streq	r1, [r4, #0]
 8005abc:	6054      	str	r4, [r2, #4]
 8005abe:	e7ca      	b.n	8005a56 <_free_r+0x22>
 8005ac0:	bd38      	pop	{r3, r4, r5, pc}
 8005ac2:	bf00      	nop
 8005ac4:	20000bd0 	.word	0x20000bd0

08005ac8 <sbrk_aligned>:
 8005ac8:	b570      	push	{r4, r5, r6, lr}
 8005aca:	4e0f      	ldr	r6, [pc, #60]	@ (8005b08 <sbrk_aligned+0x40>)
 8005acc:	460c      	mov	r4, r1
 8005ace:	6831      	ldr	r1, [r6, #0]
 8005ad0:	4605      	mov	r5, r0
 8005ad2:	b911      	cbnz	r1, 8005ada <sbrk_aligned+0x12>
 8005ad4:	f000 fba6 	bl	8006224 <_sbrk_r>
 8005ad8:	6030      	str	r0, [r6, #0]
 8005ada:	4621      	mov	r1, r4
 8005adc:	4628      	mov	r0, r5
 8005ade:	f000 fba1 	bl	8006224 <_sbrk_r>
 8005ae2:	1c43      	adds	r3, r0, #1
 8005ae4:	d103      	bne.n	8005aee <sbrk_aligned+0x26>
 8005ae6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005aea:	4620      	mov	r0, r4
 8005aec:	bd70      	pop	{r4, r5, r6, pc}
 8005aee:	1cc4      	adds	r4, r0, #3
 8005af0:	f024 0403 	bic.w	r4, r4, #3
 8005af4:	42a0      	cmp	r0, r4
 8005af6:	d0f8      	beq.n	8005aea <sbrk_aligned+0x22>
 8005af8:	1a21      	subs	r1, r4, r0
 8005afa:	4628      	mov	r0, r5
 8005afc:	f000 fb92 	bl	8006224 <_sbrk_r>
 8005b00:	3001      	adds	r0, #1
 8005b02:	d1f2      	bne.n	8005aea <sbrk_aligned+0x22>
 8005b04:	e7ef      	b.n	8005ae6 <sbrk_aligned+0x1e>
 8005b06:	bf00      	nop
 8005b08:	20000bcc 	.word	0x20000bcc

08005b0c <_malloc_r>:
 8005b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b10:	1ccd      	adds	r5, r1, #3
 8005b12:	f025 0503 	bic.w	r5, r5, #3
 8005b16:	3508      	adds	r5, #8
 8005b18:	2d0c      	cmp	r5, #12
 8005b1a:	bf38      	it	cc
 8005b1c:	250c      	movcc	r5, #12
 8005b1e:	2d00      	cmp	r5, #0
 8005b20:	4606      	mov	r6, r0
 8005b22:	db01      	blt.n	8005b28 <_malloc_r+0x1c>
 8005b24:	42a9      	cmp	r1, r5
 8005b26:	d904      	bls.n	8005b32 <_malloc_r+0x26>
 8005b28:	230c      	movs	r3, #12
 8005b2a:	6033      	str	r3, [r6, #0]
 8005b2c:	2000      	movs	r0, #0
 8005b2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005c08 <_malloc_r+0xfc>
 8005b36:	f000 f869 	bl	8005c0c <__malloc_lock>
 8005b3a:	f8d8 3000 	ldr.w	r3, [r8]
 8005b3e:	461c      	mov	r4, r3
 8005b40:	bb44      	cbnz	r4, 8005b94 <_malloc_r+0x88>
 8005b42:	4629      	mov	r1, r5
 8005b44:	4630      	mov	r0, r6
 8005b46:	f7ff ffbf 	bl	8005ac8 <sbrk_aligned>
 8005b4a:	1c43      	adds	r3, r0, #1
 8005b4c:	4604      	mov	r4, r0
 8005b4e:	d158      	bne.n	8005c02 <_malloc_r+0xf6>
 8005b50:	f8d8 4000 	ldr.w	r4, [r8]
 8005b54:	4627      	mov	r7, r4
 8005b56:	2f00      	cmp	r7, #0
 8005b58:	d143      	bne.n	8005be2 <_malloc_r+0xd6>
 8005b5a:	2c00      	cmp	r4, #0
 8005b5c:	d04b      	beq.n	8005bf6 <_malloc_r+0xea>
 8005b5e:	6823      	ldr	r3, [r4, #0]
 8005b60:	4639      	mov	r1, r7
 8005b62:	4630      	mov	r0, r6
 8005b64:	eb04 0903 	add.w	r9, r4, r3
 8005b68:	f000 fb5c 	bl	8006224 <_sbrk_r>
 8005b6c:	4581      	cmp	r9, r0
 8005b6e:	d142      	bne.n	8005bf6 <_malloc_r+0xea>
 8005b70:	6821      	ldr	r1, [r4, #0]
 8005b72:	1a6d      	subs	r5, r5, r1
 8005b74:	4629      	mov	r1, r5
 8005b76:	4630      	mov	r0, r6
 8005b78:	f7ff ffa6 	bl	8005ac8 <sbrk_aligned>
 8005b7c:	3001      	adds	r0, #1
 8005b7e:	d03a      	beq.n	8005bf6 <_malloc_r+0xea>
 8005b80:	6823      	ldr	r3, [r4, #0]
 8005b82:	442b      	add	r3, r5
 8005b84:	6023      	str	r3, [r4, #0]
 8005b86:	f8d8 3000 	ldr.w	r3, [r8]
 8005b8a:	685a      	ldr	r2, [r3, #4]
 8005b8c:	bb62      	cbnz	r2, 8005be8 <_malloc_r+0xdc>
 8005b8e:	f8c8 7000 	str.w	r7, [r8]
 8005b92:	e00f      	b.n	8005bb4 <_malloc_r+0xa8>
 8005b94:	6822      	ldr	r2, [r4, #0]
 8005b96:	1b52      	subs	r2, r2, r5
 8005b98:	d420      	bmi.n	8005bdc <_malloc_r+0xd0>
 8005b9a:	2a0b      	cmp	r2, #11
 8005b9c:	d917      	bls.n	8005bce <_malloc_r+0xc2>
 8005b9e:	1961      	adds	r1, r4, r5
 8005ba0:	42a3      	cmp	r3, r4
 8005ba2:	6025      	str	r5, [r4, #0]
 8005ba4:	bf18      	it	ne
 8005ba6:	6059      	strne	r1, [r3, #4]
 8005ba8:	6863      	ldr	r3, [r4, #4]
 8005baa:	bf08      	it	eq
 8005bac:	f8c8 1000 	streq.w	r1, [r8]
 8005bb0:	5162      	str	r2, [r4, r5]
 8005bb2:	604b      	str	r3, [r1, #4]
 8005bb4:	4630      	mov	r0, r6
 8005bb6:	f000 f82f 	bl	8005c18 <__malloc_unlock>
 8005bba:	f104 000b 	add.w	r0, r4, #11
 8005bbe:	1d23      	adds	r3, r4, #4
 8005bc0:	f020 0007 	bic.w	r0, r0, #7
 8005bc4:	1ac2      	subs	r2, r0, r3
 8005bc6:	bf1c      	itt	ne
 8005bc8:	1a1b      	subne	r3, r3, r0
 8005bca:	50a3      	strne	r3, [r4, r2]
 8005bcc:	e7af      	b.n	8005b2e <_malloc_r+0x22>
 8005bce:	6862      	ldr	r2, [r4, #4]
 8005bd0:	42a3      	cmp	r3, r4
 8005bd2:	bf0c      	ite	eq
 8005bd4:	f8c8 2000 	streq.w	r2, [r8]
 8005bd8:	605a      	strne	r2, [r3, #4]
 8005bda:	e7eb      	b.n	8005bb4 <_malloc_r+0xa8>
 8005bdc:	4623      	mov	r3, r4
 8005bde:	6864      	ldr	r4, [r4, #4]
 8005be0:	e7ae      	b.n	8005b40 <_malloc_r+0x34>
 8005be2:	463c      	mov	r4, r7
 8005be4:	687f      	ldr	r7, [r7, #4]
 8005be6:	e7b6      	b.n	8005b56 <_malloc_r+0x4a>
 8005be8:	461a      	mov	r2, r3
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	42a3      	cmp	r3, r4
 8005bee:	d1fb      	bne.n	8005be8 <_malloc_r+0xdc>
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	6053      	str	r3, [r2, #4]
 8005bf4:	e7de      	b.n	8005bb4 <_malloc_r+0xa8>
 8005bf6:	230c      	movs	r3, #12
 8005bf8:	6033      	str	r3, [r6, #0]
 8005bfa:	4630      	mov	r0, r6
 8005bfc:	f000 f80c 	bl	8005c18 <__malloc_unlock>
 8005c00:	e794      	b.n	8005b2c <_malloc_r+0x20>
 8005c02:	6005      	str	r5, [r0, #0]
 8005c04:	e7d6      	b.n	8005bb4 <_malloc_r+0xa8>
 8005c06:	bf00      	nop
 8005c08:	20000bd0 	.word	0x20000bd0

08005c0c <__malloc_lock>:
 8005c0c:	4801      	ldr	r0, [pc, #4]	@ (8005c14 <__malloc_lock+0x8>)
 8005c0e:	f7ff bf0f 	b.w	8005a30 <__retarget_lock_acquire_recursive>
 8005c12:	bf00      	nop
 8005c14:	20000bc8 	.word	0x20000bc8

08005c18 <__malloc_unlock>:
 8005c18:	4801      	ldr	r0, [pc, #4]	@ (8005c20 <__malloc_unlock+0x8>)
 8005c1a:	f7ff bf0a 	b.w	8005a32 <__retarget_lock_release_recursive>
 8005c1e:	bf00      	nop
 8005c20:	20000bc8 	.word	0x20000bc8

08005c24 <__ssputs_r>:
 8005c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c28:	688e      	ldr	r6, [r1, #8]
 8005c2a:	461f      	mov	r7, r3
 8005c2c:	42be      	cmp	r6, r7
 8005c2e:	680b      	ldr	r3, [r1, #0]
 8005c30:	4682      	mov	sl, r0
 8005c32:	460c      	mov	r4, r1
 8005c34:	4690      	mov	r8, r2
 8005c36:	d82d      	bhi.n	8005c94 <__ssputs_r+0x70>
 8005c38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005c3c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005c40:	d026      	beq.n	8005c90 <__ssputs_r+0x6c>
 8005c42:	6965      	ldr	r5, [r4, #20]
 8005c44:	6909      	ldr	r1, [r1, #16]
 8005c46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c4a:	eba3 0901 	sub.w	r9, r3, r1
 8005c4e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005c52:	1c7b      	adds	r3, r7, #1
 8005c54:	444b      	add	r3, r9
 8005c56:	106d      	asrs	r5, r5, #1
 8005c58:	429d      	cmp	r5, r3
 8005c5a:	bf38      	it	cc
 8005c5c:	461d      	movcc	r5, r3
 8005c5e:	0553      	lsls	r3, r2, #21
 8005c60:	d527      	bpl.n	8005cb2 <__ssputs_r+0x8e>
 8005c62:	4629      	mov	r1, r5
 8005c64:	f7ff ff52 	bl	8005b0c <_malloc_r>
 8005c68:	4606      	mov	r6, r0
 8005c6a:	b360      	cbz	r0, 8005cc6 <__ssputs_r+0xa2>
 8005c6c:	6921      	ldr	r1, [r4, #16]
 8005c6e:	464a      	mov	r2, r9
 8005c70:	f000 fae8 	bl	8006244 <memcpy>
 8005c74:	89a3      	ldrh	r3, [r4, #12]
 8005c76:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005c7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c7e:	81a3      	strh	r3, [r4, #12]
 8005c80:	6126      	str	r6, [r4, #16]
 8005c82:	6165      	str	r5, [r4, #20]
 8005c84:	444e      	add	r6, r9
 8005c86:	eba5 0509 	sub.w	r5, r5, r9
 8005c8a:	6026      	str	r6, [r4, #0]
 8005c8c:	60a5      	str	r5, [r4, #8]
 8005c8e:	463e      	mov	r6, r7
 8005c90:	42be      	cmp	r6, r7
 8005c92:	d900      	bls.n	8005c96 <__ssputs_r+0x72>
 8005c94:	463e      	mov	r6, r7
 8005c96:	6820      	ldr	r0, [r4, #0]
 8005c98:	4632      	mov	r2, r6
 8005c9a:	4641      	mov	r1, r8
 8005c9c:	f000 faa8 	bl	80061f0 <memmove>
 8005ca0:	68a3      	ldr	r3, [r4, #8]
 8005ca2:	1b9b      	subs	r3, r3, r6
 8005ca4:	60a3      	str	r3, [r4, #8]
 8005ca6:	6823      	ldr	r3, [r4, #0]
 8005ca8:	4433      	add	r3, r6
 8005caa:	6023      	str	r3, [r4, #0]
 8005cac:	2000      	movs	r0, #0
 8005cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cb2:	462a      	mov	r2, r5
 8005cb4:	f000 fad4 	bl	8006260 <_realloc_r>
 8005cb8:	4606      	mov	r6, r0
 8005cba:	2800      	cmp	r0, #0
 8005cbc:	d1e0      	bne.n	8005c80 <__ssputs_r+0x5c>
 8005cbe:	6921      	ldr	r1, [r4, #16]
 8005cc0:	4650      	mov	r0, sl
 8005cc2:	f7ff feb7 	bl	8005a34 <_free_r>
 8005cc6:	230c      	movs	r3, #12
 8005cc8:	f8ca 3000 	str.w	r3, [sl]
 8005ccc:	89a3      	ldrh	r3, [r4, #12]
 8005cce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cd2:	81a3      	strh	r3, [r4, #12]
 8005cd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005cd8:	e7e9      	b.n	8005cae <__ssputs_r+0x8a>
	...

08005cdc <_svfiprintf_r>:
 8005cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ce0:	4698      	mov	r8, r3
 8005ce2:	898b      	ldrh	r3, [r1, #12]
 8005ce4:	061b      	lsls	r3, r3, #24
 8005ce6:	b09d      	sub	sp, #116	@ 0x74
 8005ce8:	4607      	mov	r7, r0
 8005cea:	460d      	mov	r5, r1
 8005cec:	4614      	mov	r4, r2
 8005cee:	d510      	bpl.n	8005d12 <_svfiprintf_r+0x36>
 8005cf0:	690b      	ldr	r3, [r1, #16]
 8005cf2:	b973      	cbnz	r3, 8005d12 <_svfiprintf_r+0x36>
 8005cf4:	2140      	movs	r1, #64	@ 0x40
 8005cf6:	f7ff ff09 	bl	8005b0c <_malloc_r>
 8005cfa:	6028      	str	r0, [r5, #0]
 8005cfc:	6128      	str	r0, [r5, #16]
 8005cfe:	b930      	cbnz	r0, 8005d0e <_svfiprintf_r+0x32>
 8005d00:	230c      	movs	r3, #12
 8005d02:	603b      	str	r3, [r7, #0]
 8005d04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005d08:	b01d      	add	sp, #116	@ 0x74
 8005d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d0e:	2340      	movs	r3, #64	@ 0x40
 8005d10:	616b      	str	r3, [r5, #20]
 8005d12:	2300      	movs	r3, #0
 8005d14:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d16:	2320      	movs	r3, #32
 8005d18:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005d1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d20:	2330      	movs	r3, #48	@ 0x30
 8005d22:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005ec0 <_svfiprintf_r+0x1e4>
 8005d26:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005d2a:	f04f 0901 	mov.w	r9, #1
 8005d2e:	4623      	mov	r3, r4
 8005d30:	469a      	mov	sl, r3
 8005d32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d36:	b10a      	cbz	r2, 8005d3c <_svfiprintf_r+0x60>
 8005d38:	2a25      	cmp	r2, #37	@ 0x25
 8005d3a:	d1f9      	bne.n	8005d30 <_svfiprintf_r+0x54>
 8005d3c:	ebba 0b04 	subs.w	fp, sl, r4
 8005d40:	d00b      	beq.n	8005d5a <_svfiprintf_r+0x7e>
 8005d42:	465b      	mov	r3, fp
 8005d44:	4622      	mov	r2, r4
 8005d46:	4629      	mov	r1, r5
 8005d48:	4638      	mov	r0, r7
 8005d4a:	f7ff ff6b 	bl	8005c24 <__ssputs_r>
 8005d4e:	3001      	adds	r0, #1
 8005d50:	f000 80a7 	beq.w	8005ea2 <_svfiprintf_r+0x1c6>
 8005d54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d56:	445a      	add	r2, fp
 8005d58:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d5a:	f89a 3000 	ldrb.w	r3, [sl]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	f000 809f 	beq.w	8005ea2 <_svfiprintf_r+0x1c6>
 8005d64:	2300      	movs	r3, #0
 8005d66:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005d6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d6e:	f10a 0a01 	add.w	sl, sl, #1
 8005d72:	9304      	str	r3, [sp, #16]
 8005d74:	9307      	str	r3, [sp, #28]
 8005d76:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005d7a:	931a      	str	r3, [sp, #104]	@ 0x68
 8005d7c:	4654      	mov	r4, sl
 8005d7e:	2205      	movs	r2, #5
 8005d80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d84:	484e      	ldr	r0, [pc, #312]	@ (8005ec0 <_svfiprintf_r+0x1e4>)
 8005d86:	f7fa fa4b 	bl	8000220 <memchr>
 8005d8a:	9a04      	ldr	r2, [sp, #16]
 8005d8c:	b9d8      	cbnz	r0, 8005dc6 <_svfiprintf_r+0xea>
 8005d8e:	06d0      	lsls	r0, r2, #27
 8005d90:	bf44      	itt	mi
 8005d92:	2320      	movmi	r3, #32
 8005d94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d98:	0711      	lsls	r1, r2, #28
 8005d9a:	bf44      	itt	mi
 8005d9c:	232b      	movmi	r3, #43	@ 0x2b
 8005d9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005da2:	f89a 3000 	ldrb.w	r3, [sl]
 8005da6:	2b2a      	cmp	r3, #42	@ 0x2a
 8005da8:	d015      	beq.n	8005dd6 <_svfiprintf_r+0xfa>
 8005daa:	9a07      	ldr	r2, [sp, #28]
 8005dac:	4654      	mov	r4, sl
 8005dae:	2000      	movs	r0, #0
 8005db0:	f04f 0c0a 	mov.w	ip, #10
 8005db4:	4621      	mov	r1, r4
 8005db6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005dba:	3b30      	subs	r3, #48	@ 0x30
 8005dbc:	2b09      	cmp	r3, #9
 8005dbe:	d94b      	bls.n	8005e58 <_svfiprintf_r+0x17c>
 8005dc0:	b1b0      	cbz	r0, 8005df0 <_svfiprintf_r+0x114>
 8005dc2:	9207      	str	r2, [sp, #28]
 8005dc4:	e014      	b.n	8005df0 <_svfiprintf_r+0x114>
 8005dc6:	eba0 0308 	sub.w	r3, r0, r8
 8005dca:	fa09 f303 	lsl.w	r3, r9, r3
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	9304      	str	r3, [sp, #16]
 8005dd2:	46a2      	mov	sl, r4
 8005dd4:	e7d2      	b.n	8005d7c <_svfiprintf_r+0xa0>
 8005dd6:	9b03      	ldr	r3, [sp, #12]
 8005dd8:	1d19      	adds	r1, r3, #4
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	9103      	str	r1, [sp, #12]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	bfbb      	ittet	lt
 8005de2:	425b      	neglt	r3, r3
 8005de4:	f042 0202 	orrlt.w	r2, r2, #2
 8005de8:	9307      	strge	r3, [sp, #28]
 8005dea:	9307      	strlt	r3, [sp, #28]
 8005dec:	bfb8      	it	lt
 8005dee:	9204      	strlt	r2, [sp, #16]
 8005df0:	7823      	ldrb	r3, [r4, #0]
 8005df2:	2b2e      	cmp	r3, #46	@ 0x2e
 8005df4:	d10a      	bne.n	8005e0c <_svfiprintf_r+0x130>
 8005df6:	7863      	ldrb	r3, [r4, #1]
 8005df8:	2b2a      	cmp	r3, #42	@ 0x2a
 8005dfa:	d132      	bne.n	8005e62 <_svfiprintf_r+0x186>
 8005dfc:	9b03      	ldr	r3, [sp, #12]
 8005dfe:	1d1a      	adds	r2, r3, #4
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	9203      	str	r2, [sp, #12]
 8005e04:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005e08:	3402      	adds	r4, #2
 8005e0a:	9305      	str	r3, [sp, #20]
 8005e0c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005ed0 <_svfiprintf_r+0x1f4>
 8005e10:	7821      	ldrb	r1, [r4, #0]
 8005e12:	2203      	movs	r2, #3
 8005e14:	4650      	mov	r0, sl
 8005e16:	f7fa fa03 	bl	8000220 <memchr>
 8005e1a:	b138      	cbz	r0, 8005e2c <_svfiprintf_r+0x150>
 8005e1c:	9b04      	ldr	r3, [sp, #16]
 8005e1e:	eba0 000a 	sub.w	r0, r0, sl
 8005e22:	2240      	movs	r2, #64	@ 0x40
 8005e24:	4082      	lsls	r2, r0
 8005e26:	4313      	orrs	r3, r2
 8005e28:	3401      	adds	r4, #1
 8005e2a:	9304      	str	r3, [sp, #16]
 8005e2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e30:	4824      	ldr	r0, [pc, #144]	@ (8005ec4 <_svfiprintf_r+0x1e8>)
 8005e32:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005e36:	2206      	movs	r2, #6
 8005e38:	f7fa f9f2 	bl	8000220 <memchr>
 8005e3c:	2800      	cmp	r0, #0
 8005e3e:	d036      	beq.n	8005eae <_svfiprintf_r+0x1d2>
 8005e40:	4b21      	ldr	r3, [pc, #132]	@ (8005ec8 <_svfiprintf_r+0x1ec>)
 8005e42:	bb1b      	cbnz	r3, 8005e8c <_svfiprintf_r+0x1b0>
 8005e44:	9b03      	ldr	r3, [sp, #12]
 8005e46:	3307      	adds	r3, #7
 8005e48:	f023 0307 	bic.w	r3, r3, #7
 8005e4c:	3308      	adds	r3, #8
 8005e4e:	9303      	str	r3, [sp, #12]
 8005e50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e52:	4433      	add	r3, r6
 8005e54:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e56:	e76a      	b.n	8005d2e <_svfiprintf_r+0x52>
 8005e58:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e5c:	460c      	mov	r4, r1
 8005e5e:	2001      	movs	r0, #1
 8005e60:	e7a8      	b.n	8005db4 <_svfiprintf_r+0xd8>
 8005e62:	2300      	movs	r3, #0
 8005e64:	3401      	adds	r4, #1
 8005e66:	9305      	str	r3, [sp, #20]
 8005e68:	4619      	mov	r1, r3
 8005e6a:	f04f 0c0a 	mov.w	ip, #10
 8005e6e:	4620      	mov	r0, r4
 8005e70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e74:	3a30      	subs	r2, #48	@ 0x30
 8005e76:	2a09      	cmp	r2, #9
 8005e78:	d903      	bls.n	8005e82 <_svfiprintf_r+0x1a6>
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d0c6      	beq.n	8005e0c <_svfiprintf_r+0x130>
 8005e7e:	9105      	str	r1, [sp, #20]
 8005e80:	e7c4      	b.n	8005e0c <_svfiprintf_r+0x130>
 8005e82:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e86:	4604      	mov	r4, r0
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e7f0      	b.n	8005e6e <_svfiprintf_r+0x192>
 8005e8c:	ab03      	add	r3, sp, #12
 8005e8e:	9300      	str	r3, [sp, #0]
 8005e90:	462a      	mov	r2, r5
 8005e92:	4b0e      	ldr	r3, [pc, #56]	@ (8005ecc <_svfiprintf_r+0x1f0>)
 8005e94:	a904      	add	r1, sp, #16
 8005e96:	4638      	mov	r0, r7
 8005e98:	f3af 8000 	nop.w
 8005e9c:	1c42      	adds	r2, r0, #1
 8005e9e:	4606      	mov	r6, r0
 8005ea0:	d1d6      	bne.n	8005e50 <_svfiprintf_r+0x174>
 8005ea2:	89ab      	ldrh	r3, [r5, #12]
 8005ea4:	065b      	lsls	r3, r3, #25
 8005ea6:	f53f af2d 	bmi.w	8005d04 <_svfiprintf_r+0x28>
 8005eaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005eac:	e72c      	b.n	8005d08 <_svfiprintf_r+0x2c>
 8005eae:	ab03      	add	r3, sp, #12
 8005eb0:	9300      	str	r3, [sp, #0]
 8005eb2:	462a      	mov	r2, r5
 8005eb4:	4b05      	ldr	r3, [pc, #20]	@ (8005ecc <_svfiprintf_r+0x1f0>)
 8005eb6:	a904      	add	r1, sp, #16
 8005eb8:	4638      	mov	r0, r7
 8005eba:	f000 f879 	bl	8005fb0 <_printf_i>
 8005ebe:	e7ed      	b.n	8005e9c <_svfiprintf_r+0x1c0>
 8005ec0:	08006a58 	.word	0x08006a58
 8005ec4:	08006a62 	.word	0x08006a62
 8005ec8:	00000000 	.word	0x00000000
 8005ecc:	08005c25 	.word	0x08005c25
 8005ed0:	08006a5e 	.word	0x08006a5e

08005ed4 <_printf_common>:
 8005ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ed8:	4616      	mov	r6, r2
 8005eda:	4698      	mov	r8, r3
 8005edc:	688a      	ldr	r2, [r1, #8]
 8005ede:	690b      	ldr	r3, [r1, #16]
 8005ee0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	bfb8      	it	lt
 8005ee8:	4613      	movlt	r3, r2
 8005eea:	6033      	str	r3, [r6, #0]
 8005eec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005ef0:	4607      	mov	r7, r0
 8005ef2:	460c      	mov	r4, r1
 8005ef4:	b10a      	cbz	r2, 8005efa <_printf_common+0x26>
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	6033      	str	r3, [r6, #0]
 8005efa:	6823      	ldr	r3, [r4, #0]
 8005efc:	0699      	lsls	r1, r3, #26
 8005efe:	bf42      	ittt	mi
 8005f00:	6833      	ldrmi	r3, [r6, #0]
 8005f02:	3302      	addmi	r3, #2
 8005f04:	6033      	strmi	r3, [r6, #0]
 8005f06:	6825      	ldr	r5, [r4, #0]
 8005f08:	f015 0506 	ands.w	r5, r5, #6
 8005f0c:	d106      	bne.n	8005f1c <_printf_common+0x48>
 8005f0e:	f104 0a19 	add.w	sl, r4, #25
 8005f12:	68e3      	ldr	r3, [r4, #12]
 8005f14:	6832      	ldr	r2, [r6, #0]
 8005f16:	1a9b      	subs	r3, r3, r2
 8005f18:	42ab      	cmp	r3, r5
 8005f1a:	dc26      	bgt.n	8005f6a <_printf_common+0x96>
 8005f1c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005f20:	6822      	ldr	r2, [r4, #0]
 8005f22:	3b00      	subs	r3, #0
 8005f24:	bf18      	it	ne
 8005f26:	2301      	movne	r3, #1
 8005f28:	0692      	lsls	r2, r2, #26
 8005f2a:	d42b      	bmi.n	8005f84 <_printf_common+0xb0>
 8005f2c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005f30:	4641      	mov	r1, r8
 8005f32:	4638      	mov	r0, r7
 8005f34:	47c8      	blx	r9
 8005f36:	3001      	adds	r0, #1
 8005f38:	d01e      	beq.n	8005f78 <_printf_common+0xa4>
 8005f3a:	6823      	ldr	r3, [r4, #0]
 8005f3c:	6922      	ldr	r2, [r4, #16]
 8005f3e:	f003 0306 	and.w	r3, r3, #6
 8005f42:	2b04      	cmp	r3, #4
 8005f44:	bf02      	ittt	eq
 8005f46:	68e5      	ldreq	r5, [r4, #12]
 8005f48:	6833      	ldreq	r3, [r6, #0]
 8005f4a:	1aed      	subeq	r5, r5, r3
 8005f4c:	68a3      	ldr	r3, [r4, #8]
 8005f4e:	bf0c      	ite	eq
 8005f50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f54:	2500      	movne	r5, #0
 8005f56:	4293      	cmp	r3, r2
 8005f58:	bfc4      	itt	gt
 8005f5a:	1a9b      	subgt	r3, r3, r2
 8005f5c:	18ed      	addgt	r5, r5, r3
 8005f5e:	2600      	movs	r6, #0
 8005f60:	341a      	adds	r4, #26
 8005f62:	42b5      	cmp	r5, r6
 8005f64:	d11a      	bne.n	8005f9c <_printf_common+0xc8>
 8005f66:	2000      	movs	r0, #0
 8005f68:	e008      	b.n	8005f7c <_printf_common+0xa8>
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	4652      	mov	r2, sl
 8005f6e:	4641      	mov	r1, r8
 8005f70:	4638      	mov	r0, r7
 8005f72:	47c8      	blx	r9
 8005f74:	3001      	adds	r0, #1
 8005f76:	d103      	bne.n	8005f80 <_printf_common+0xac>
 8005f78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f80:	3501      	adds	r5, #1
 8005f82:	e7c6      	b.n	8005f12 <_printf_common+0x3e>
 8005f84:	18e1      	adds	r1, r4, r3
 8005f86:	1c5a      	adds	r2, r3, #1
 8005f88:	2030      	movs	r0, #48	@ 0x30
 8005f8a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005f8e:	4422      	add	r2, r4
 8005f90:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005f94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005f98:	3302      	adds	r3, #2
 8005f9a:	e7c7      	b.n	8005f2c <_printf_common+0x58>
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	4622      	mov	r2, r4
 8005fa0:	4641      	mov	r1, r8
 8005fa2:	4638      	mov	r0, r7
 8005fa4:	47c8      	blx	r9
 8005fa6:	3001      	adds	r0, #1
 8005fa8:	d0e6      	beq.n	8005f78 <_printf_common+0xa4>
 8005faa:	3601      	adds	r6, #1
 8005fac:	e7d9      	b.n	8005f62 <_printf_common+0x8e>
	...

08005fb0 <_printf_i>:
 8005fb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fb4:	7e0f      	ldrb	r7, [r1, #24]
 8005fb6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005fb8:	2f78      	cmp	r7, #120	@ 0x78
 8005fba:	4691      	mov	r9, r2
 8005fbc:	4680      	mov	r8, r0
 8005fbe:	460c      	mov	r4, r1
 8005fc0:	469a      	mov	sl, r3
 8005fc2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005fc6:	d807      	bhi.n	8005fd8 <_printf_i+0x28>
 8005fc8:	2f62      	cmp	r7, #98	@ 0x62
 8005fca:	d80a      	bhi.n	8005fe2 <_printf_i+0x32>
 8005fcc:	2f00      	cmp	r7, #0
 8005fce:	f000 80d2 	beq.w	8006176 <_printf_i+0x1c6>
 8005fd2:	2f58      	cmp	r7, #88	@ 0x58
 8005fd4:	f000 80b9 	beq.w	800614a <_printf_i+0x19a>
 8005fd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005fdc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005fe0:	e03a      	b.n	8006058 <_printf_i+0xa8>
 8005fe2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005fe6:	2b15      	cmp	r3, #21
 8005fe8:	d8f6      	bhi.n	8005fd8 <_printf_i+0x28>
 8005fea:	a101      	add	r1, pc, #4	@ (adr r1, 8005ff0 <_printf_i+0x40>)
 8005fec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ff0:	08006049 	.word	0x08006049
 8005ff4:	0800605d 	.word	0x0800605d
 8005ff8:	08005fd9 	.word	0x08005fd9
 8005ffc:	08005fd9 	.word	0x08005fd9
 8006000:	08005fd9 	.word	0x08005fd9
 8006004:	08005fd9 	.word	0x08005fd9
 8006008:	0800605d 	.word	0x0800605d
 800600c:	08005fd9 	.word	0x08005fd9
 8006010:	08005fd9 	.word	0x08005fd9
 8006014:	08005fd9 	.word	0x08005fd9
 8006018:	08005fd9 	.word	0x08005fd9
 800601c:	0800615d 	.word	0x0800615d
 8006020:	08006087 	.word	0x08006087
 8006024:	08006117 	.word	0x08006117
 8006028:	08005fd9 	.word	0x08005fd9
 800602c:	08005fd9 	.word	0x08005fd9
 8006030:	0800617f 	.word	0x0800617f
 8006034:	08005fd9 	.word	0x08005fd9
 8006038:	08006087 	.word	0x08006087
 800603c:	08005fd9 	.word	0x08005fd9
 8006040:	08005fd9 	.word	0x08005fd9
 8006044:	0800611f 	.word	0x0800611f
 8006048:	6833      	ldr	r3, [r6, #0]
 800604a:	1d1a      	adds	r2, r3, #4
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	6032      	str	r2, [r6, #0]
 8006050:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006054:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006058:	2301      	movs	r3, #1
 800605a:	e09d      	b.n	8006198 <_printf_i+0x1e8>
 800605c:	6833      	ldr	r3, [r6, #0]
 800605e:	6820      	ldr	r0, [r4, #0]
 8006060:	1d19      	adds	r1, r3, #4
 8006062:	6031      	str	r1, [r6, #0]
 8006064:	0606      	lsls	r6, r0, #24
 8006066:	d501      	bpl.n	800606c <_printf_i+0xbc>
 8006068:	681d      	ldr	r5, [r3, #0]
 800606a:	e003      	b.n	8006074 <_printf_i+0xc4>
 800606c:	0645      	lsls	r5, r0, #25
 800606e:	d5fb      	bpl.n	8006068 <_printf_i+0xb8>
 8006070:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006074:	2d00      	cmp	r5, #0
 8006076:	da03      	bge.n	8006080 <_printf_i+0xd0>
 8006078:	232d      	movs	r3, #45	@ 0x2d
 800607a:	426d      	negs	r5, r5
 800607c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006080:	4859      	ldr	r0, [pc, #356]	@ (80061e8 <_printf_i+0x238>)
 8006082:	230a      	movs	r3, #10
 8006084:	e011      	b.n	80060aa <_printf_i+0xfa>
 8006086:	6821      	ldr	r1, [r4, #0]
 8006088:	6833      	ldr	r3, [r6, #0]
 800608a:	0608      	lsls	r0, r1, #24
 800608c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006090:	d402      	bmi.n	8006098 <_printf_i+0xe8>
 8006092:	0649      	lsls	r1, r1, #25
 8006094:	bf48      	it	mi
 8006096:	b2ad      	uxthmi	r5, r5
 8006098:	2f6f      	cmp	r7, #111	@ 0x6f
 800609a:	4853      	ldr	r0, [pc, #332]	@ (80061e8 <_printf_i+0x238>)
 800609c:	6033      	str	r3, [r6, #0]
 800609e:	bf14      	ite	ne
 80060a0:	230a      	movne	r3, #10
 80060a2:	2308      	moveq	r3, #8
 80060a4:	2100      	movs	r1, #0
 80060a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80060aa:	6866      	ldr	r6, [r4, #4]
 80060ac:	60a6      	str	r6, [r4, #8]
 80060ae:	2e00      	cmp	r6, #0
 80060b0:	bfa2      	ittt	ge
 80060b2:	6821      	ldrge	r1, [r4, #0]
 80060b4:	f021 0104 	bicge.w	r1, r1, #4
 80060b8:	6021      	strge	r1, [r4, #0]
 80060ba:	b90d      	cbnz	r5, 80060c0 <_printf_i+0x110>
 80060bc:	2e00      	cmp	r6, #0
 80060be:	d04b      	beq.n	8006158 <_printf_i+0x1a8>
 80060c0:	4616      	mov	r6, r2
 80060c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80060c6:	fb03 5711 	mls	r7, r3, r1, r5
 80060ca:	5dc7      	ldrb	r7, [r0, r7]
 80060cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80060d0:	462f      	mov	r7, r5
 80060d2:	42bb      	cmp	r3, r7
 80060d4:	460d      	mov	r5, r1
 80060d6:	d9f4      	bls.n	80060c2 <_printf_i+0x112>
 80060d8:	2b08      	cmp	r3, #8
 80060da:	d10b      	bne.n	80060f4 <_printf_i+0x144>
 80060dc:	6823      	ldr	r3, [r4, #0]
 80060de:	07df      	lsls	r7, r3, #31
 80060e0:	d508      	bpl.n	80060f4 <_printf_i+0x144>
 80060e2:	6923      	ldr	r3, [r4, #16]
 80060e4:	6861      	ldr	r1, [r4, #4]
 80060e6:	4299      	cmp	r1, r3
 80060e8:	bfde      	ittt	le
 80060ea:	2330      	movle	r3, #48	@ 0x30
 80060ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80060f0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80060f4:	1b92      	subs	r2, r2, r6
 80060f6:	6122      	str	r2, [r4, #16]
 80060f8:	f8cd a000 	str.w	sl, [sp]
 80060fc:	464b      	mov	r3, r9
 80060fe:	aa03      	add	r2, sp, #12
 8006100:	4621      	mov	r1, r4
 8006102:	4640      	mov	r0, r8
 8006104:	f7ff fee6 	bl	8005ed4 <_printf_common>
 8006108:	3001      	adds	r0, #1
 800610a:	d14a      	bne.n	80061a2 <_printf_i+0x1f2>
 800610c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006110:	b004      	add	sp, #16
 8006112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006116:	6823      	ldr	r3, [r4, #0]
 8006118:	f043 0320 	orr.w	r3, r3, #32
 800611c:	6023      	str	r3, [r4, #0]
 800611e:	4833      	ldr	r0, [pc, #204]	@ (80061ec <_printf_i+0x23c>)
 8006120:	2778      	movs	r7, #120	@ 0x78
 8006122:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006126:	6823      	ldr	r3, [r4, #0]
 8006128:	6831      	ldr	r1, [r6, #0]
 800612a:	061f      	lsls	r7, r3, #24
 800612c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006130:	d402      	bmi.n	8006138 <_printf_i+0x188>
 8006132:	065f      	lsls	r7, r3, #25
 8006134:	bf48      	it	mi
 8006136:	b2ad      	uxthmi	r5, r5
 8006138:	6031      	str	r1, [r6, #0]
 800613a:	07d9      	lsls	r1, r3, #31
 800613c:	bf44      	itt	mi
 800613e:	f043 0320 	orrmi.w	r3, r3, #32
 8006142:	6023      	strmi	r3, [r4, #0]
 8006144:	b11d      	cbz	r5, 800614e <_printf_i+0x19e>
 8006146:	2310      	movs	r3, #16
 8006148:	e7ac      	b.n	80060a4 <_printf_i+0xf4>
 800614a:	4827      	ldr	r0, [pc, #156]	@ (80061e8 <_printf_i+0x238>)
 800614c:	e7e9      	b.n	8006122 <_printf_i+0x172>
 800614e:	6823      	ldr	r3, [r4, #0]
 8006150:	f023 0320 	bic.w	r3, r3, #32
 8006154:	6023      	str	r3, [r4, #0]
 8006156:	e7f6      	b.n	8006146 <_printf_i+0x196>
 8006158:	4616      	mov	r6, r2
 800615a:	e7bd      	b.n	80060d8 <_printf_i+0x128>
 800615c:	6833      	ldr	r3, [r6, #0]
 800615e:	6825      	ldr	r5, [r4, #0]
 8006160:	6961      	ldr	r1, [r4, #20]
 8006162:	1d18      	adds	r0, r3, #4
 8006164:	6030      	str	r0, [r6, #0]
 8006166:	062e      	lsls	r6, r5, #24
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	d501      	bpl.n	8006170 <_printf_i+0x1c0>
 800616c:	6019      	str	r1, [r3, #0]
 800616e:	e002      	b.n	8006176 <_printf_i+0x1c6>
 8006170:	0668      	lsls	r0, r5, #25
 8006172:	d5fb      	bpl.n	800616c <_printf_i+0x1bc>
 8006174:	8019      	strh	r1, [r3, #0]
 8006176:	2300      	movs	r3, #0
 8006178:	6123      	str	r3, [r4, #16]
 800617a:	4616      	mov	r6, r2
 800617c:	e7bc      	b.n	80060f8 <_printf_i+0x148>
 800617e:	6833      	ldr	r3, [r6, #0]
 8006180:	1d1a      	adds	r2, r3, #4
 8006182:	6032      	str	r2, [r6, #0]
 8006184:	681e      	ldr	r6, [r3, #0]
 8006186:	6862      	ldr	r2, [r4, #4]
 8006188:	2100      	movs	r1, #0
 800618a:	4630      	mov	r0, r6
 800618c:	f7fa f848 	bl	8000220 <memchr>
 8006190:	b108      	cbz	r0, 8006196 <_printf_i+0x1e6>
 8006192:	1b80      	subs	r0, r0, r6
 8006194:	6060      	str	r0, [r4, #4]
 8006196:	6863      	ldr	r3, [r4, #4]
 8006198:	6123      	str	r3, [r4, #16]
 800619a:	2300      	movs	r3, #0
 800619c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061a0:	e7aa      	b.n	80060f8 <_printf_i+0x148>
 80061a2:	6923      	ldr	r3, [r4, #16]
 80061a4:	4632      	mov	r2, r6
 80061a6:	4649      	mov	r1, r9
 80061a8:	4640      	mov	r0, r8
 80061aa:	47d0      	blx	sl
 80061ac:	3001      	adds	r0, #1
 80061ae:	d0ad      	beq.n	800610c <_printf_i+0x15c>
 80061b0:	6823      	ldr	r3, [r4, #0]
 80061b2:	079b      	lsls	r3, r3, #30
 80061b4:	d413      	bmi.n	80061de <_printf_i+0x22e>
 80061b6:	68e0      	ldr	r0, [r4, #12]
 80061b8:	9b03      	ldr	r3, [sp, #12]
 80061ba:	4298      	cmp	r0, r3
 80061bc:	bfb8      	it	lt
 80061be:	4618      	movlt	r0, r3
 80061c0:	e7a6      	b.n	8006110 <_printf_i+0x160>
 80061c2:	2301      	movs	r3, #1
 80061c4:	4632      	mov	r2, r6
 80061c6:	4649      	mov	r1, r9
 80061c8:	4640      	mov	r0, r8
 80061ca:	47d0      	blx	sl
 80061cc:	3001      	adds	r0, #1
 80061ce:	d09d      	beq.n	800610c <_printf_i+0x15c>
 80061d0:	3501      	adds	r5, #1
 80061d2:	68e3      	ldr	r3, [r4, #12]
 80061d4:	9903      	ldr	r1, [sp, #12]
 80061d6:	1a5b      	subs	r3, r3, r1
 80061d8:	42ab      	cmp	r3, r5
 80061da:	dcf2      	bgt.n	80061c2 <_printf_i+0x212>
 80061dc:	e7eb      	b.n	80061b6 <_printf_i+0x206>
 80061de:	2500      	movs	r5, #0
 80061e0:	f104 0619 	add.w	r6, r4, #25
 80061e4:	e7f5      	b.n	80061d2 <_printf_i+0x222>
 80061e6:	bf00      	nop
 80061e8:	08006a69 	.word	0x08006a69
 80061ec:	08006a7a 	.word	0x08006a7a

080061f0 <memmove>:
 80061f0:	4288      	cmp	r0, r1
 80061f2:	b510      	push	{r4, lr}
 80061f4:	eb01 0402 	add.w	r4, r1, r2
 80061f8:	d902      	bls.n	8006200 <memmove+0x10>
 80061fa:	4284      	cmp	r4, r0
 80061fc:	4623      	mov	r3, r4
 80061fe:	d807      	bhi.n	8006210 <memmove+0x20>
 8006200:	1e43      	subs	r3, r0, #1
 8006202:	42a1      	cmp	r1, r4
 8006204:	d008      	beq.n	8006218 <memmove+0x28>
 8006206:	f811 2b01 	ldrb.w	r2, [r1], #1
 800620a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800620e:	e7f8      	b.n	8006202 <memmove+0x12>
 8006210:	4402      	add	r2, r0
 8006212:	4601      	mov	r1, r0
 8006214:	428a      	cmp	r2, r1
 8006216:	d100      	bne.n	800621a <memmove+0x2a>
 8006218:	bd10      	pop	{r4, pc}
 800621a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800621e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006222:	e7f7      	b.n	8006214 <memmove+0x24>

08006224 <_sbrk_r>:
 8006224:	b538      	push	{r3, r4, r5, lr}
 8006226:	4d06      	ldr	r5, [pc, #24]	@ (8006240 <_sbrk_r+0x1c>)
 8006228:	2300      	movs	r3, #0
 800622a:	4604      	mov	r4, r0
 800622c:	4608      	mov	r0, r1
 800622e:	602b      	str	r3, [r5, #0]
 8006230:	f7fb ffbe 	bl	80021b0 <_sbrk>
 8006234:	1c43      	adds	r3, r0, #1
 8006236:	d102      	bne.n	800623e <_sbrk_r+0x1a>
 8006238:	682b      	ldr	r3, [r5, #0]
 800623a:	b103      	cbz	r3, 800623e <_sbrk_r+0x1a>
 800623c:	6023      	str	r3, [r4, #0]
 800623e:	bd38      	pop	{r3, r4, r5, pc}
 8006240:	20000bc4 	.word	0x20000bc4

08006244 <memcpy>:
 8006244:	440a      	add	r2, r1
 8006246:	4291      	cmp	r1, r2
 8006248:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800624c:	d100      	bne.n	8006250 <memcpy+0xc>
 800624e:	4770      	bx	lr
 8006250:	b510      	push	{r4, lr}
 8006252:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006256:	f803 4f01 	strb.w	r4, [r3, #1]!
 800625a:	4291      	cmp	r1, r2
 800625c:	d1f9      	bne.n	8006252 <memcpy+0xe>
 800625e:	bd10      	pop	{r4, pc}

08006260 <_realloc_r>:
 8006260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006264:	4680      	mov	r8, r0
 8006266:	4615      	mov	r5, r2
 8006268:	460c      	mov	r4, r1
 800626a:	b921      	cbnz	r1, 8006276 <_realloc_r+0x16>
 800626c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006270:	4611      	mov	r1, r2
 8006272:	f7ff bc4b 	b.w	8005b0c <_malloc_r>
 8006276:	b92a      	cbnz	r2, 8006284 <_realloc_r+0x24>
 8006278:	f7ff fbdc 	bl	8005a34 <_free_r>
 800627c:	2400      	movs	r4, #0
 800627e:	4620      	mov	r0, r4
 8006280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006284:	f000 f81a 	bl	80062bc <_malloc_usable_size_r>
 8006288:	4285      	cmp	r5, r0
 800628a:	4606      	mov	r6, r0
 800628c:	d802      	bhi.n	8006294 <_realloc_r+0x34>
 800628e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006292:	d8f4      	bhi.n	800627e <_realloc_r+0x1e>
 8006294:	4629      	mov	r1, r5
 8006296:	4640      	mov	r0, r8
 8006298:	f7ff fc38 	bl	8005b0c <_malloc_r>
 800629c:	4607      	mov	r7, r0
 800629e:	2800      	cmp	r0, #0
 80062a0:	d0ec      	beq.n	800627c <_realloc_r+0x1c>
 80062a2:	42b5      	cmp	r5, r6
 80062a4:	462a      	mov	r2, r5
 80062a6:	4621      	mov	r1, r4
 80062a8:	bf28      	it	cs
 80062aa:	4632      	movcs	r2, r6
 80062ac:	f7ff ffca 	bl	8006244 <memcpy>
 80062b0:	4621      	mov	r1, r4
 80062b2:	4640      	mov	r0, r8
 80062b4:	f7ff fbbe 	bl	8005a34 <_free_r>
 80062b8:	463c      	mov	r4, r7
 80062ba:	e7e0      	b.n	800627e <_realloc_r+0x1e>

080062bc <_malloc_usable_size_r>:
 80062bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062c0:	1f18      	subs	r0, r3, #4
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	bfbc      	itt	lt
 80062c6:	580b      	ldrlt	r3, [r1, r0]
 80062c8:	18c0      	addlt	r0, r0, r3
 80062ca:	4770      	bx	lr

080062cc <atan2>:
 80062cc:	f000 b800 	b.w	80062d0 <__ieee754_atan2>

080062d0 <__ieee754_atan2>:
 80062d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062d4:	ec57 6b11 	vmov	r6, r7, d1
 80062d8:	4273      	negs	r3, r6
 80062da:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8006458 <__ieee754_atan2+0x188>
 80062de:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 80062e2:	4333      	orrs	r3, r6
 80062e4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80062e8:	4543      	cmp	r3, r8
 80062ea:	ec51 0b10 	vmov	r0, r1, d0
 80062ee:	4635      	mov	r5, r6
 80062f0:	d809      	bhi.n	8006306 <__ieee754_atan2+0x36>
 80062f2:	4244      	negs	r4, r0
 80062f4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80062f8:	4304      	orrs	r4, r0
 80062fa:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80062fe:	4544      	cmp	r4, r8
 8006300:	468e      	mov	lr, r1
 8006302:	4681      	mov	r9, r0
 8006304:	d907      	bls.n	8006316 <__ieee754_atan2+0x46>
 8006306:	4632      	mov	r2, r6
 8006308:	463b      	mov	r3, r7
 800630a:	f7f9 ffdf 	bl	80002cc <__adddf3>
 800630e:	ec41 0b10 	vmov	d0, r0, r1
 8006312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006316:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800631a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800631e:	4334      	orrs	r4, r6
 8006320:	d103      	bne.n	800632a <__ieee754_atan2+0x5a>
 8006322:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006326:	f000 b89b 	b.w	8006460 <atan>
 800632a:	17bc      	asrs	r4, r7, #30
 800632c:	f004 0402 	and.w	r4, r4, #2
 8006330:	ea53 0909 	orrs.w	r9, r3, r9
 8006334:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8006338:	d107      	bne.n	800634a <__ieee754_atan2+0x7a>
 800633a:	2c02      	cmp	r4, #2
 800633c:	d05f      	beq.n	80063fe <__ieee754_atan2+0x12e>
 800633e:	2c03      	cmp	r4, #3
 8006340:	d1e5      	bne.n	800630e <__ieee754_atan2+0x3e>
 8006342:	a141      	add	r1, pc, #260	@ (adr r1, 8006448 <__ieee754_atan2+0x178>)
 8006344:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006348:	e7e1      	b.n	800630e <__ieee754_atan2+0x3e>
 800634a:	4315      	orrs	r5, r2
 800634c:	d106      	bne.n	800635c <__ieee754_atan2+0x8c>
 800634e:	f1be 0f00 	cmp.w	lr, #0
 8006352:	da5f      	bge.n	8006414 <__ieee754_atan2+0x144>
 8006354:	a13e      	add	r1, pc, #248	@ (adr r1, 8006450 <__ieee754_atan2+0x180>)
 8006356:	e9d1 0100 	ldrd	r0, r1, [r1]
 800635a:	e7d8      	b.n	800630e <__ieee754_atan2+0x3e>
 800635c:	4542      	cmp	r2, r8
 800635e:	d10f      	bne.n	8006380 <__ieee754_atan2+0xb0>
 8006360:	4293      	cmp	r3, r2
 8006362:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 8006366:	d107      	bne.n	8006378 <__ieee754_atan2+0xa8>
 8006368:	2c02      	cmp	r4, #2
 800636a:	d84c      	bhi.n	8006406 <__ieee754_atan2+0x136>
 800636c:	4b34      	ldr	r3, [pc, #208]	@ (8006440 <__ieee754_atan2+0x170>)
 800636e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006372:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006376:	e7ca      	b.n	800630e <__ieee754_atan2+0x3e>
 8006378:	2c02      	cmp	r4, #2
 800637a:	d848      	bhi.n	800640e <__ieee754_atan2+0x13e>
 800637c:	4b31      	ldr	r3, [pc, #196]	@ (8006444 <__ieee754_atan2+0x174>)
 800637e:	e7f6      	b.n	800636e <__ieee754_atan2+0x9e>
 8006380:	4543      	cmp	r3, r8
 8006382:	d0e4      	beq.n	800634e <__ieee754_atan2+0x7e>
 8006384:	1a9b      	subs	r3, r3, r2
 8006386:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800638a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800638e:	da1e      	bge.n	80063ce <__ieee754_atan2+0xfe>
 8006390:	2f00      	cmp	r7, #0
 8006392:	da01      	bge.n	8006398 <__ieee754_atan2+0xc8>
 8006394:	323c      	adds	r2, #60	@ 0x3c
 8006396:	db1e      	blt.n	80063d6 <__ieee754_atan2+0x106>
 8006398:	4632      	mov	r2, r6
 800639a:	463b      	mov	r3, r7
 800639c:	f7fa fa76 	bl	800088c <__aeabi_ddiv>
 80063a0:	ec41 0b10 	vmov	d0, r0, r1
 80063a4:	f000 f9f4 	bl	8006790 <fabs>
 80063a8:	f000 f85a 	bl	8006460 <atan>
 80063ac:	ec51 0b10 	vmov	r0, r1, d0
 80063b0:	2c01      	cmp	r4, #1
 80063b2:	d013      	beq.n	80063dc <__ieee754_atan2+0x10c>
 80063b4:	2c02      	cmp	r4, #2
 80063b6:	d015      	beq.n	80063e4 <__ieee754_atan2+0x114>
 80063b8:	2c00      	cmp	r4, #0
 80063ba:	d0a8      	beq.n	800630e <__ieee754_atan2+0x3e>
 80063bc:	a318      	add	r3, pc, #96	@ (adr r3, 8006420 <__ieee754_atan2+0x150>)
 80063be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c2:	f7f9 ff81 	bl	80002c8 <__aeabi_dsub>
 80063c6:	a318      	add	r3, pc, #96	@ (adr r3, 8006428 <__ieee754_atan2+0x158>)
 80063c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063cc:	e014      	b.n	80063f8 <__ieee754_atan2+0x128>
 80063ce:	a118      	add	r1, pc, #96	@ (adr r1, 8006430 <__ieee754_atan2+0x160>)
 80063d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063d4:	e7ec      	b.n	80063b0 <__ieee754_atan2+0xe0>
 80063d6:	2000      	movs	r0, #0
 80063d8:	2100      	movs	r1, #0
 80063da:	e7e9      	b.n	80063b0 <__ieee754_atan2+0xe0>
 80063dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80063e0:	4619      	mov	r1, r3
 80063e2:	e794      	b.n	800630e <__ieee754_atan2+0x3e>
 80063e4:	a30e      	add	r3, pc, #56	@ (adr r3, 8006420 <__ieee754_atan2+0x150>)
 80063e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ea:	f7f9 ff6d 	bl	80002c8 <__aeabi_dsub>
 80063ee:	4602      	mov	r2, r0
 80063f0:	460b      	mov	r3, r1
 80063f2:	a10d      	add	r1, pc, #52	@ (adr r1, 8006428 <__ieee754_atan2+0x158>)
 80063f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063f8:	f7f9 ff66 	bl	80002c8 <__aeabi_dsub>
 80063fc:	e787      	b.n	800630e <__ieee754_atan2+0x3e>
 80063fe:	a10a      	add	r1, pc, #40	@ (adr r1, 8006428 <__ieee754_atan2+0x158>)
 8006400:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006404:	e783      	b.n	800630e <__ieee754_atan2+0x3e>
 8006406:	a10c      	add	r1, pc, #48	@ (adr r1, 8006438 <__ieee754_atan2+0x168>)
 8006408:	e9d1 0100 	ldrd	r0, r1, [r1]
 800640c:	e77f      	b.n	800630e <__ieee754_atan2+0x3e>
 800640e:	2000      	movs	r0, #0
 8006410:	2100      	movs	r1, #0
 8006412:	e77c      	b.n	800630e <__ieee754_atan2+0x3e>
 8006414:	a106      	add	r1, pc, #24	@ (adr r1, 8006430 <__ieee754_atan2+0x160>)
 8006416:	e9d1 0100 	ldrd	r0, r1, [r1]
 800641a:	e778      	b.n	800630e <__ieee754_atan2+0x3e>
 800641c:	f3af 8000 	nop.w
 8006420:	33145c07 	.word	0x33145c07
 8006424:	3ca1a626 	.word	0x3ca1a626
 8006428:	54442d18 	.word	0x54442d18
 800642c:	400921fb 	.word	0x400921fb
 8006430:	54442d18 	.word	0x54442d18
 8006434:	3ff921fb 	.word	0x3ff921fb
 8006438:	54442d18 	.word	0x54442d18
 800643c:	3fe921fb 	.word	0x3fe921fb
 8006440:	08006aa8 	.word	0x08006aa8
 8006444:	08006a90 	.word	0x08006a90
 8006448:	54442d18 	.word	0x54442d18
 800644c:	c00921fb 	.word	0xc00921fb
 8006450:	54442d18 	.word	0x54442d18
 8006454:	bff921fb 	.word	0xbff921fb
 8006458:	7ff00000 	.word	0x7ff00000
 800645c:	00000000 	.word	0x00000000

08006460 <atan>:
 8006460:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006464:	ec55 4b10 	vmov	r4, r5, d0
 8006468:	4bbf      	ldr	r3, [pc, #764]	@ (8006768 <atan+0x308>)
 800646a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800646e:	429e      	cmp	r6, r3
 8006470:	46ab      	mov	fp, r5
 8006472:	d918      	bls.n	80064a6 <atan+0x46>
 8006474:	4bbd      	ldr	r3, [pc, #756]	@ (800676c <atan+0x30c>)
 8006476:	429e      	cmp	r6, r3
 8006478:	d801      	bhi.n	800647e <atan+0x1e>
 800647a:	d109      	bne.n	8006490 <atan+0x30>
 800647c:	b144      	cbz	r4, 8006490 <atan+0x30>
 800647e:	4622      	mov	r2, r4
 8006480:	462b      	mov	r3, r5
 8006482:	4620      	mov	r0, r4
 8006484:	4629      	mov	r1, r5
 8006486:	f7f9 ff21 	bl	80002cc <__adddf3>
 800648a:	4604      	mov	r4, r0
 800648c:	460d      	mov	r5, r1
 800648e:	e006      	b.n	800649e <atan+0x3e>
 8006490:	f1bb 0f00 	cmp.w	fp, #0
 8006494:	f340 812b 	ble.w	80066ee <atan+0x28e>
 8006498:	a597      	add	r5, pc, #604	@ (adr r5, 80066f8 <atan+0x298>)
 800649a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800649e:	ec45 4b10 	vmov	d0, r4, r5
 80064a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064a6:	4bb2      	ldr	r3, [pc, #712]	@ (8006770 <atan+0x310>)
 80064a8:	429e      	cmp	r6, r3
 80064aa:	d813      	bhi.n	80064d4 <atan+0x74>
 80064ac:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80064b0:	429e      	cmp	r6, r3
 80064b2:	d80c      	bhi.n	80064ce <atan+0x6e>
 80064b4:	a392      	add	r3, pc, #584	@ (adr r3, 8006700 <atan+0x2a0>)
 80064b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ba:	4620      	mov	r0, r4
 80064bc:	4629      	mov	r1, r5
 80064be:	f7f9 ff05 	bl	80002cc <__adddf3>
 80064c2:	4bac      	ldr	r3, [pc, #688]	@ (8006774 <atan+0x314>)
 80064c4:	2200      	movs	r2, #0
 80064c6:	f7fa fb47 	bl	8000b58 <__aeabi_dcmpgt>
 80064ca:	2800      	cmp	r0, #0
 80064cc:	d1e7      	bne.n	800649e <atan+0x3e>
 80064ce:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80064d2:	e029      	b.n	8006528 <atan+0xc8>
 80064d4:	f000 f95c 	bl	8006790 <fabs>
 80064d8:	4ba7      	ldr	r3, [pc, #668]	@ (8006778 <atan+0x318>)
 80064da:	429e      	cmp	r6, r3
 80064dc:	ec55 4b10 	vmov	r4, r5, d0
 80064e0:	f200 80bc 	bhi.w	800665c <atan+0x1fc>
 80064e4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80064e8:	429e      	cmp	r6, r3
 80064ea:	f200 809e 	bhi.w	800662a <atan+0x1ca>
 80064ee:	4622      	mov	r2, r4
 80064f0:	462b      	mov	r3, r5
 80064f2:	4620      	mov	r0, r4
 80064f4:	4629      	mov	r1, r5
 80064f6:	f7f9 fee9 	bl	80002cc <__adddf3>
 80064fa:	4b9e      	ldr	r3, [pc, #632]	@ (8006774 <atan+0x314>)
 80064fc:	2200      	movs	r2, #0
 80064fe:	f7f9 fee3 	bl	80002c8 <__aeabi_dsub>
 8006502:	2200      	movs	r2, #0
 8006504:	4606      	mov	r6, r0
 8006506:	460f      	mov	r7, r1
 8006508:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800650c:	4620      	mov	r0, r4
 800650e:	4629      	mov	r1, r5
 8006510:	f7f9 fedc 	bl	80002cc <__adddf3>
 8006514:	4602      	mov	r2, r0
 8006516:	460b      	mov	r3, r1
 8006518:	4630      	mov	r0, r6
 800651a:	4639      	mov	r1, r7
 800651c:	f7fa f9b6 	bl	800088c <__aeabi_ddiv>
 8006520:	f04f 0a00 	mov.w	sl, #0
 8006524:	4604      	mov	r4, r0
 8006526:	460d      	mov	r5, r1
 8006528:	4622      	mov	r2, r4
 800652a:	462b      	mov	r3, r5
 800652c:	4620      	mov	r0, r4
 800652e:	4629      	mov	r1, r5
 8006530:	f7fa f882 	bl	8000638 <__aeabi_dmul>
 8006534:	4602      	mov	r2, r0
 8006536:	460b      	mov	r3, r1
 8006538:	4680      	mov	r8, r0
 800653a:	4689      	mov	r9, r1
 800653c:	f7fa f87c 	bl	8000638 <__aeabi_dmul>
 8006540:	a371      	add	r3, pc, #452	@ (adr r3, 8006708 <atan+0x2a8>)
 8006542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006546:	4606      	mov	r6, r0
 8006548:	460f      	mov	r7, r1
 800654a:	f7fa f875 	bl	8000638 <__aeabi_dmul>
 800654e:	a370      	add	r3, pc, #448	@ (adr r3, 8006710 <atan+0x2b0>)
 8006550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006554:	f7f9 feba 	bl	80002cc <__adddf3>
 8006558:	4632      	mov	r2, r6
 800655a:	463b      	mov	r3, r7
 800655c:	f7fa f86c 	bl	8000638 <__aeabi_dmul>
 8006560:	a36d      	add	r3, pc, #436	@ (adr r3, 8006718 <atan+0x2b8>)
 8006562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006566:	f7f9 feb1 	bl	80002cc <__adddf3>
 800656a:	4632      	mov	r2, r6
 800656c:	463b      	mov	r3, r7
 800656e:	f7fa f863 	bl	8000638 <__aeabi_dmul>
 8006572:	a36b      	add	r3, pc, #428	@ (adr r3, 8006720 <atan+0x2c0>)
 8006574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006578:	f7f9 fea8 	bl	80002cc <__adddf3>
 800657c:	4632      	mov	r2, r6
 800657e:	463b      	mov	r3, r7
 8006580:	f7fa f85a 	bl	8000638 <__aeabi_dmul>
 8006584:	a368      	add	r3, pc, #416	@ (adr r3, 8006728 <atan+0x2c8>)
 8006586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658a:	f7f9 fe9f 	bl	80002cc <__adddf3>
 800658e:	4632      	mov	r2, r6
 8006590:	463b      	mov	r3, r7
 8006592:	f7fa f851 	bl	8000638 <__aeabi_dmul>
 8006596:	a366      	add	r3, pc, #408	@ (adr r3, 8006730 <atan+0x2d0>)
 8006598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659c:	f7f9 fe96 	bl	80002cc <__adddf3>
 80065a0:	4642      	mov	r2, r8
 80065a2:	464b      	mov	r3, r9
 80065a4:	f7fa f848 	bl	8000638 <__aeabi_dmul>
 80065a8:	a363      	add	r3, pc, #396	@ (adr r3, 8006738 <atan+0x2d8>)
 80065aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ae:	4680      	mov	r8, r0
 80065b0:	4689      	mov	r9, r1
 80065b2:	4630      	mov	r0, r6
 80065b4:	4639      	mov	r1, r7
 80065b6:	f7fa f83f 	bl	8000638 <__aeabi_dmul>
 80065ba:	a361      	add	r3, pc, #388	@ (adr r3, 8006740 <atan+0x2e0>)
 80065bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c0:	f7f9 fe82 	bl	80002c8 <__aeabi_dsub>
 80065c4:	4632      	mov	r2, r6
 80065c6:	463b      	mov	r3, r7
 80065c8:	f7fa f836 	bl	8000638 <__aeabi_dmul>
 80065cc:	a35e      	add	r3, pc, #376	@ (adr r3, 8006748 <atan+0x2e8>)
 80065ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d2:	f7f9 fe79 	bl	80002c8 <__aeabi_dsub>
 80065d6:	4632      	mov	r2, r6
 80065d8:	463b      	mov	r3, r7
 80065da:	f7fa f82d 	bl	8000638 <__aeabi_dmul>
 80065de:	a35c      	add	r3, pc, #368	@ (adr r3, 8006750 <atan+0x2f0>)
 80065e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e4:	f7f9 fe70 	bl	80002c8 <__aeabi_dsub>
 80065e8:	4632      	mov	r2, r6
 80065ea:	463b      	mov	r3, r7
 80065ec:	f7fa f824 	bl	8000638 <__aeabi_dmul>
 80065f0:	a359      	add	r3, pc, #356	@ (adr r3, 8006758 <atan+0x2f8>)
 80065f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f6:	f7f9 fe67 	bl	80002c8 <__aeabi_dsub>
 80065fa:	4632      	mov	r2, r6
 80065fc:	463b      	mov	r3, r7
 80065fe:	f7fa f81b 	bl	8000638 <__aeabi_dmul>
 8006602:	4602      	mov	r2, r0
 8006604:	460b      	mov	r3, r1
 8006606:	4640      	mov	r0, r8
 8006608:	4649      	mov	r1, r9
 800660a:	f7f9 fe5f 	bl	80002cc <__adddf3>
 800660e:	4622      	mov	r2, r4
 8006610:	462b      	mov	r3, r5
 8006612:	f7fa f811 	bl	8000638 <__aeabi_dmul>
 8006616:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 800661a:	4602      	mov	r2, r0
 800661c:	460b      	mov	r3, r1
 800661e:	d148      	bne.n	80066b2 <atan+0x252>
 8006620:	4620      	mov	r0, r4
 8006622:	4629      	mov	r1, r5
 8006624:	f7f9 fe50 	bl	80002c8 <__aeabi_dsub>
 8006628:	e72f      	b.n	800648a <atan+0x2a>
 800662a:	4b52      	ldr	r3, [pc, #328]	@ (8006774 <atan+0x314>)
 800662c:	2200      	movs	r2, #0
 800662e:	4620      	mov	r0, r4
 8006630:	4629      	mov	r1, r5
 8006632:	f7f9 fe49 	bl	80002c8 <__aeabi_dsub>
 8006636:	4b4f      	ldr	r3, [pc, #316]	@ (8006774 <atan+0x314>)
 8006638:	4606      	mov	r6, r0
 800663a:	460f      	mov	r7, r1
 800663c:	2200      	movs	r2, #0
 800663e:	4620      	mov	r0, r4
 8006640:	4629      	mov	r1, r5
 8006642:	f7f9 fe43 	bl	80002cc <__adddf3>
 8006646:	4602      	mov	r2, r0
 8006648:	460b      	mov	r3, r1
 800664a:	4630      	mov	r0, r6
 800664c:	4639      	mov	r1, r7
 800664e:	f7fa f91d 	bl	800088c <__aeabi_ddiv>
 8006652:	f04f 0a01 	mov.w	sl, #1
 8006656:	4604      	mov	r4, r0
 8006658:	460d      	mov	r5, r1
 800665a:	e765      	b.n	8006528 <atan+0xc8>
 800665c:	4b47      	ldr	r3, [pc, #284]	@ (800677c <atan+0x31c>)
 800665e:	429e      	cmp	r6, r3
 8006660:	d21c      	bcs.n	800669c <atan+0x23c>
 8006662:	4b47      	ldr	r3, [pc, #284]	@ (8006780 <atan+0x320>)
 8006664:	2200      	movs	r2, #0
 8006666:	4620      	mov	r0, r4
 8006668:	4629      	mov	r1, r5
 800666a:	f7f9 fe2d 	bl	80002c8 <__aeabi_dsub>
 800666e:	4b44      	ldr	r3, [pc, #272]	@ (8006780 <atan+0x320>)
 8006670:	4606      	mov	r6, r0
 8006672:	460f      	mov	r7, r1
 8006674:	2200      	movs	r2, #0
 8006676:	4620      	mov	r0, r4
 8006678:	4629      	mov	r1, r5
 800667a:	f7f9 ffdd 	bl	8000638 <__aeabi_dmul>
 800667e:	4b3d      	ldr	r3, [pc, #244]	@ (8006774 <atan+0x314>)
 8006680:	2200      	movs	r2, #0
 8006682:	f7f9 fe23 	bl	80002cc <__adddf3>
 8006686:	4602      	mov	r2, r0
 8006688:	460b      	mov	r3, r1
 800668a:	4630      	mov	r0, r6
 800668c:	4639      	mov	r1, r7
 800668e:	f7fa f8fd 	bl	800088c <__aeabi_ddiv>
 8006692:	f04f 0a02 	mov.w	sl, #2
 8006696:	4604      	mov	r4, r0
 8006698:	460d      	mov	r5, r1
 800669a:	e745      	b.n	8006528 <atan+0xc8>
 800669c:	4622      	mov	r2, r4
 800669e:	462b      	mov	r3, r5
 80066a0:	4938      	ldr	r1, [pc, #224]	@ (8006784 <atan+0x324>)
 80066a2:	2000      	movs	r0, #0
 80066a4:	f7fa f8f2 	bl	800088c <__aeabi_ddiv>
 80066a8:	f04f 0a03 	mov.w	sl, #3
 80066ac:	4604      	mov	r4, r0
 80066ae:	460d      	mov	r5, r1
 80066b0:	e73a      	b.n	8006528 <atan+0xc8>
 80066b2:	4b35      	ldr	r3, [pc, #212]	@ (8006788 <atan+0x328>)
 80066b4:	4e35      	ldr	r6, [pc, #212]	@ (800678c <atan+0x32c>)
 80066b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80066ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066be:	f7f9 fe03 	bl	80002c8 <__aeabi_dsub>
 80066c2:	4622      	mov	r2, r4
 80066c4:	462b      	mov	r3, r5
 80066c6:	f7f9 fdff 	bl	80002c8 <__aeabi_dsub>
 80066ca:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80066ce:	4602      	mov	r2, r0
 80066d0:	460b      	mov	r3, r1
 80066d2:	e9d6 0100 	ldrd	r0, r1, [r6]
 80066d6:	f7f9 fdf7 	bl	80002c8 <__aeabi_dsub>
 80066da:	f1bb 0f00 	cmp.w	fp, #0
 80066de:	4604      	mov	r4, r0
 80066e0:	460d      	mov	r5, r1
 80066e2:	f6bf aedc 	bge.w	800649e <atan+0x3e>
 80066e6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80066ea:	461d      	mov	r5, r3
 80066ec:	e6d7      	b.n	800649e <atan+0x3e>
 80066ee:	a51c      	add	r5, pc, #112	@ (adr r5, 8006760 <atan+0x300>)
 80066f0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80066f4:	e6d3      	b.n	800649e <atan+0x3e>
 80066f6:	bf00      	nop
 80066f8:	54442d18 	.word	0x54442d18
 80066fc:	3ff921fb 	.word	0x3ff921fb
 8006700:	8800759c 	.word	0x8800759c
 8006704:	7e37e43c 	.word	0x7e37e43c
 8006708:	e322da11 	.word	0xe322da11
 800670c:	3f90ad3a 	.word	0x3f90ad3a
 8006710:	24760deb 	.word	0x24760deb
 8006714:	3fa97b4b 	.word	0x3fa97b4b
 8006718:	a0d03d51 	.word	0xa0d03d51
 800671c:	3fb10d66 	.word	0x3fb10d66
 8006720:	c54c206e 	.word	0xc54c206e
 8006724:	3fb745cd 	.word	0x3fb745cd
 8006728:	920083ff 	.word	0x920083ff
 800672c:	3fc24924 	.word	0x3fc24924
 8006730:	5555550d 	.word	0x5555550d
 8006734:	3fd55555 	.word	0x3fd55555
 8006738:	2c6a6c2f 	.word	0x2c6a6c2f
 800673c:	bfa2b444 	.word	0xbfa2b444
 8006740:	52defd9a 	.word	0x52defd9a
 8006744:	3fadde2d 	.word	0x3fadde2d
 8006748:	af749a6d 	.word	0xaf749a6d
 800674c:	3fb3b0f2 	.word	0x3fb3b0f2
 8006750:	fe231671 	.word	0xfe231671
 8006754:	3fbc71c6 	.word	0x3fbc71c6
 8006758:	9998ebc4 	.word	0x9998ebc4
 800675c:	3fc99999 	.word	0x3fc99999
 8006760:	54442d18 	.word	0x54442d18
 8006764:	bff921fb 	.word	0xbff921fb
 8006768:	440fffff 	.word	0x440fffff
 800676c:	7ff00000 	.word	0x7ff00000
 8006770:	3fdbffff 	.word	0x3fdbffff
 8006774:	3ff00000 	.word	0x3ff00000
 8006778:	3ff2ffff 	.word	0x3ff2ffff
 800677c:	40038000 	.word	0x40038000
 8006780:	3ff80000 	.word	0x3ff80000
 8006784:	bff00000 	.word	0xbff00000
 8006788:	08006ac0 	.word	0x08006ac0
 800678c:	08006ae0 	.word	0x08006ae0

08006790 <fabs>:
 8006790:	ec51 0b10 	vmov	r0, r1, d0
 8006794:	4602      	mov	r2, r0
 8006796:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800679a:	ec43 2b10 	vmov	d0, r2, r3
 800679e:	4770      	bx	lr

080067a0 <_init>:
 80067a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067a2:	bf00      	nop
 80067a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067a6:	bc08      	pop	{r3}
 80067a8:	469e      	mov	lr, r3
 80067aa:	4770      	bx	lr

080067ac <_fini>:
 80067ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ae:	bf00      	nop
 80067b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067b2:	bc08      	pop	{r3}
 80067b4:	469e      	mov	lr, r3
 80067b6:	4770      	bx	lr
