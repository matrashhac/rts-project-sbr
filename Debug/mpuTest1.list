
mpuTest1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b58  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a0  08009d28  08009d28  0000ad28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0c8  0800a0c8  0000c060  2**0
                  CONTENTS
  4 .ARM          00000008  0800a0c8  0800a0c8  0000b0c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0d0  0800a0d0  0000c060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0d0  0800a0d0  0000b0d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a0d4  0800a0d4  0000b0d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800a0d8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005498  20000060  0800a138  0000c060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200054f8  0800a138  0000c4f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cf06  00000000  00000000  0000c090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b30  00000000  00000000  00028f96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017b0  00000000  00000000  0002cac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001290  00000000  00000000  0002e278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004658  00000000  00000000  0002f508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b616  00000000  00000000  00033b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dedde  00000000  00000000  0004f176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012df54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c90  00000000  00000000  0012df98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00134c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009d10 	.word	0x08009d10

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08009d10 	.word	0x08009d10

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2f>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b74:	bf24      	itt	cs
 8000b76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b7e:	d90d      	bls.n	8000b9c <__aeabi_d2f+0x30>
 8000b80:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b8c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b94:	bf08      	it	eq
 8000b96:	f020 0001 	biceq.w	r0, r0, #1
 8000b9a:	4770      	bx	lr
 8000b9c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ba0:	d121      	bne.n	8000be6 <__aeabi_d2f+0x7a>
 8000ba2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ba6:	bfbc      	itt	lt
 8000ba8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bac:	4770      	bxlt	lr
 8000bae:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bb2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb6:	f1c2 0218 	rsb	r2, r2, #24
 8000bba:	f1c2 0c20 	rsb	ip, r2, #32
 8000bbe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc6:	bf18      	it	ne
 8000bc8:	f040 0001 	orrne.w	r0, r0, #1
 8000bcc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd8:	ea40 000c 	orr.w	r0, r0, ip
 8000bdc:	fa23 f302 	lsr.w	r3, r3, r2
 8000be0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be4:	e7cc      	b.n	8000b80 <__aeabi_d2f+0x14>
 8000be6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bea:	d107      	bne.n	8000bfc <__aeabi_d2f+0x90>
 8000bec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bf6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bfa:	4770      	bxne	lr
 8000bfc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c00:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c04:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <__aeabi_uldivmod>:
 8000c0c:	b953      	cbnz	r3, 8000c24 <__aeabi_uldivmod+0x18>
 8000c0e:	b94a      	cbnz	r2, 8000c24 <__aeabi_uldivmod+0x18>
 8000c10:	2900      	cmp	r1, #0
 8000c12:	bf08      	it	eq
 8000c14:	2800      	cmpeq	r0, #0
 8000c16:	bf1c      	itt	ne
 8000c18:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c1c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c20:	f000 b96a 	b.w	8000ef8 <__aeabi_idiv0>
 8000c24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c2c:	f000 f806 	bl	8000c3c <__udivmoddi4>
 8000c30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c38:	b004      	add	sp, #16
 8000c3a:	4770      	bx	lr

08000c3c <__udivmoddi4>:
 8000c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c40:	9d08      	ldr	r5, [sp, #32]
 8000c42:	460c      	mov	r4, r1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d14e      	bne.n	8000ce6 <__udivmoddi4+0xaa>
 8000c48:	4694      	mov	ip, r2
 8000c4a:	458c      	cmp	ip, r1
 8000c4c:	4686      	mov	lr, r0
 8000c4e:	fab2 f282 	clz	r2, r2
 8000c52:	d962      	bls.n	8000d1a <__udivmoddi4+0xde>
 8000c54:	b14a      	cbz	r2, 8000c6a <__udivmoddi4+0x2e>
 8000c56:	f1c2 0320 	rsb	r3, r2, #32
 8000c5a:	4091      	lsls	r1, r2
 8000c5c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c64:	4319      	orrs	r1, r3
 8000c66:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6e:	fa1f f68c 	uxth.w	r6, ip
 8000c72:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c76:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c7a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c82:	fb04 f106 	mul.w	r1, r4, r6
 8000c86:	4299      	cmp	r1, r3
 8000c88:	d90a      	bls.n	8000ca0 <__udivmoddi4+0x64>
 8000c8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c92:	f080 8112 	bcs.w	8000eba <__udivmoddi4+0x27e>
 8000c96:	4299      	cmp	r1, r3
 8000c98:	f240 810f 	bls.w	8000eba <__udivmoddi4+0x27e>
 8000c9c:	3c02      	subs	r4, #2
 8000c9e:	4463      	add	r3, ip
 8000ca0:	1a59      	subs	r1, r3, r1
 8000ca2:	fa1f f38e 	uxth.w	r3, lr
 8000ca6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000caa:	fb07 1110 	mls	r1, r7, r0, r1
 8000cae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb2:	fb00 f606 	mul.w	r6, r0, r6
 8000cb6:	429e      	cmp	r6, r3
 8000cb8:	d90a      	bls.n	8000cd0 <__udivmoddi4+0x94>
 8000cba:	eb1c 0303 	adds.w	r3, ip, r3
 8000cbe:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000cc2:	f080 80fc 	bcs.w	8000ebe <__udivmoddi4+0x282>
 8000cc6:	429e      	cmp	r6, r3
 8000cc8:	f240 80f9 	bls.w	8000ebe <__udivmoddi4+0x282>
 8000ccc:	4463      	add	r3, ip
 8000cce:	3802      	subs	r0, #2
 8000cd0:	1b9b      	subs	r3, r3, r6
 8000cd2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	b11d      	cbz	r5, 8000ce2 <__udivmoddi4+0xa6>
 8000cda:	40d3      	lsrs	r3, r2
 8000cdc:	2200      	movs	r2, #0
 8000cde:	e9c5 3200 	strd	r3, r2, [r5]
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d905      	bls.n	8000cf6 <__udivmoddi4+0xba>
 8000cea:	b10d      	cbz	r5, 8000cf0 <__udivmoddi4+0xb4>
 8000cec:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4608      	mov	r0, r1
 8000cf4:	e7f5      	b.n	8000ce2 <__udivmoddi4+0xa6>
 8000cf6:	fab3 f183 	clz	r1, r3
 8000cfa:	2900      	cmp	r1, #0
 8000cfc:	d146      	bne.n	8000d8c <__udivmoddi4+0x150>
 8000cfe:	42a3      	cmp	r3, r4
 8000d00:	d302      	bcc.n	8000d08 <__udivmoddi4+0xcc>
 8000d02:	4290      	cmp	r0, r2
 8000d04:	f0c0 80f0 	bcc.w	8000ee8 <__udivmoddi4+0x2ac>
 8000d08:	1a86      	subs	r6, r0, r2
 8000d0a:	eb64 0303 	sbc.w	r3, r4, r3
 8000d0e:	2001      	movs	r0, #1
 8000d10:	2d00      	cmp	r5, #0
 8000d12:	d0e6      	beq.n	8000ce2 <__udivmoddi4+0xa6>
 8000d14:	e9c5 6300 	strd	r6, r3, [r5]
 8000d18:	e7e3      	b.n	8000ce2 <__udivmoddi4+0xa6>
 8000d1a:	2a00      	cmp	r2, #0
 8000d1c:	f040 8090 	bne.w	8000e40 <__udivmoddi4+0x204>
 8000d20:	eba1 040c 	sub.w	r4, r1, ip
 8000d24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d28:	fa1f f78c 	uxth.w	r7, ip
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d36:	fb08 4416 	mls	r4, r8, r6, r4
 8000d3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d3e:	fb07 f006 	mul.w	r0, r7, r6
 8000d42:	4298      	cmp	r0, r3
 8000d44:	d908      	bls.n	8000d58 <__udivmoddi4+0x11c>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d4e:	d202      	bcs.n	8000d56 <__udivmoddi4+0x11a>
 8000d50:	4298      	cmp	r0, r3
 8000d52:	f200 80cd 	bhi.w	8000ef0 <__udivmoddi4+0x2b4>
 8000d56:	4626      	mov	r6, r4
 8000d58:	1a1c      	subs	r4, r3, r0
 8000d5a:	fa1f f38e 	uxth.w	r3, lr
 8000d5e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d62:	fb08 4410 	mls	r4, r8, r0, r4
 8000d66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d6a:	fb00 f707 	mul.w	r7, r0, r7
 8000d6e:	429f      	cmp	r7, r3
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x148>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x146>
 8000d7c:	429f      	cmp	r7, r3
 8000d7e:	f200 80b0 	bhi.w	8000ee2 <__udivmoddi4+0x2a6>
 8000d82:	4620      	mov	r0, r4
 8000d84:	1bdb      	subs	r3, r3, r7
 8000d86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d8a:	e7a5      	b.n	8000cd8 <__udivmoddi4+0x9c>
 8000d8c:	f1c1 0620 	rsb	r6, r1, #32
 8000d90:	408b      	lsls	r3, r1
 8000d92:	fa22 f706 	lsr.w	r7, r2, r6
 8000d96:	431f      	orrs	r7, r3
 8000d98:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d9c:	fa04 f301 	lsl.w	r3, r4, r1
 8000da0:	ea43 030c 	orr.w	r3, r3, ip
 8000da4:	40f4      	lsrs	r4, r6
 8000da6:	fa00 f801 	lsl.w	r8, r0, r1
 8000daa:	0c38      	lsrs	r0, r7, #16
 8000dac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000db0:	fbb4 fef0 	udiv	lr, r4, r0
 8000db4:	fa1f fc87 	uxth.w	ip, r7
 8000db8:	fb00 441e 	mls	r4, r0, lr, r4
 8000dbc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc0:	fb0e f90c 	mul.w	r9, lr, ip
 8000dc4:	45a1      	cmp	r9, r4
 8000dc6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dca:	d90a      	bls.n	8000de2 <__udivmoddi4+0x1a6>
 8000dcc:	193c      	adds	r4, r7, r4
 8000dce:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dd2:	f080 8084 	bcs.w	8000ede <__udivmoddi4+0x2a2>
 8000dd6:	45a1      	cmp	r9, r4
 8000dd8:	f240 8081 	bls.w	8000ede <__udivmoddi4+0x2a2>
 8000ddc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000de0:	443c      	add	r4, r7
 8000de2:	eba4 0409 	sub.w	r4, r4, r9
 8000de6:	fa1f f983 	uxth.w	r9, r3
 8000dea:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dee:	fb00 4413 	mls	r4, r0, r3, r4
 8000df2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000df6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dfa:	45a4      	cmp	ip, r4
 8000dfc:	d907      	bls.n	8000e0e <__udivmoddi4+0x1d2>
 8000dfe:	193c      	adds	r4, r7, r4
 8000e00:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e04:	d267      	bcs.n	8000ed6 <__udivmoddi4+0x29a>
 8000e06:	45a4      	cmp	ip, r4
 8000e08:	d965      	bls.n	8000ed6 <__udivmoddi4+0x29a>
 8000e0a:	3b02      	subs	r3, #2
 8000e0c:	443c      	add	r4, r7
 8000e0e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e12:	fba0 9302 	umull	r9, r3, r0, r2
 8000e16:	eba4 040c 	sub.w	r4, r4, ip
 8000e1a:	429c      	cmp	r4, r3
 8000e1c:	46ce      	mov	lr, r9
 8000e1e:	469c      	mov	ip, r3
 8000e20:	d351      	bcc.n	8000ec6 <__udivmoddi4+0x28a>
 8000e22:	d04e      	beq.n	8000ec2 <__udivmoddi4+0x286>
 8000e24:	b155      	cbz	r5, 8000e3c <__udivmoddi4+0x200>
 8000e26:	ebb8 030e 	subs.w	r3, r8, lr
 8000e2a:	eb64 040c 	sbc.w	r4, r4, ip
 8000e2e:	fa04 f606 	lsl.w	r6, r4, r6
 8000e32:	40cb      	lsrs	r3, r1
 8000e34:	431e      	orrs	r6, r3
 8000e36:	40cc      	lsrs	r4, r1
 8000e38:	e9c5 6400 	strd	r6, r4, [r5]
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	e750      	b.n	8000ce2 <__udivmoddi4+0xa6>
 8000e40:	f1c2 0320 	rsb	r3, r2, #32
 8000e44:	fa20 f103 	lsr.w	r1, r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa24 f303 	lsr.w	r3, r4, r3
 8000e50:	4094      	lsls	r4, r2
 8000e52:	430c      	orrs	r4, r1
 8000e54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e58:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e5c:	fa1f f78c 	uxth.w	r7, ip
 8000e60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e64:	fb08 3110 	mls	r1, r8, r0, r3
 8000e68:	0c23      	lsrs	r3, r4, #16
 8000e6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e6e:	fb00 f107 	mul.w	r1, r0, r7
 8000e72:	4299      	cmp	r1, r3
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x24c>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e7e:	d22c      	bcs.n	8000eda <__udivmoddi4+0x29e>
 8000e80:	4299      	cmp	r1, r3
 8000e82:	d92a      	bls.n	8000eda <__udivmoddi4+0x29e>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1a5b      	subs	r3, r3, r1
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e90:	fb08 3311 	mls	r3, r8, r1, r3
 8000e94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e98:	fb01 f307 	mul.w	r3, r1, r7
 8000e9c:	42a3      	cmp	r3, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x276>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ea8:	d213      	bcs.n	8000ed2 <__udivmoddi4+0x296>
 8000eaa:	42a3      	cmp	r3, r4
 8000eac:	d911      	bls.n	8000ed2 <__udivmoddi4+0x296>
 8000eae:	3902      	subs	r1, #2
 8000eb0:	4464      	add	r4, ip
 8000eb2:	1ae4      	subs	r4, r4, r3
 8000eb4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000eb8:	e739      	b.n	8000d2e <__udivmoddi4+0xf2>
 8000eba:	4604      	mov	r4, r0
 8000ebc:	e6f0      	b.n	8000ca0 <__udivmoddi4+0x64>
 8000ebe:	4608      	mov	r0, r1
 8000ec0:	e706      	b.n	8000cd0 <__udivmoddi4+0x94>
 8000ec2:	45c8      	cmp	r8, r9
 8000ec4:	d2ae      	bcs.n	8000e24 <__udivmoddi4+0x1e8>
 8000ec6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eca:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ece:	3801      	subs	r0, #1
 8000ed0:	e7a8      	b.n	8000e24 <__udivmoddi4+0x1e8>
 8000ed2:	4631      	mov	r1, r6
 8000ed4:	e7ed      	b.n	8000eb2 <__udivmoddi4+0x276>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	e799      	b.n	8000e0e <__udivmoddi4+0x1d2>
 8000eda:	4630      	mov	r0, r6
 8000edc:	e7d4      	b.n	8000e88 <__udivmoddi4+0x24c>
 8000ede:	46d6      	mov	lr, sl
 8000ee0:	e77f      	b.n	8000de2 <__udivmoddi4+0x1a6>
 8000ee2:	4463      	add	r3, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e74d      	b.n	8000d84 <__udivmoddi4+0x148>
 8000ee8:	4606      	mov	r6, r0
 8000eea:	4623      	mov	r3, r4
 8000eec:	4608      	mov	r0, r1
 8000eee:	e70f      	b.n	8000d10 <__udivmoddi4+0xd4>
 8000ef0:	3e02      	subs	r6, #2
 8000ef2:	4463      	add	r3, ip
 8000ef4:	e730      	b.n	8000d58 <__udivmoddi4+0x11c>
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <myComfyPrint>:

extern UART_HandleTypeDef huart2;

uint8_t buff[2048] = { 0 };

void myComfyPrint(const char* string){
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	strncpy((char*) buff, string, sizeof(buff));
 8000f04:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f08:	6879      	ldr	r1, [r7, #4]
 8000f0a:	4809      	ldr	r0, [pc, #36]	@ (8000f30 <myComfyPrint+0x34>)
 8000f0c:	f007 ffb4 	bl	8008e78 <strncpy>
	HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8000f10:	4807      	ldr	r0, [pc, #28]	@ (8000f30 <myComfyPrint+0x34>)
 8000f12:	f7ff f97d 	bl	8000210 <strlen>
 8000f16:	4603      	mov	r3, r0
 8000f18:	b29a      	uxth	r2, r3
 8000f1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f1e:	4904      	ldr	r1, [pc, #16]	@ (8000f30 <myComfyPrint+0x34>)
 8000f20:	4804      	ldr	r0, [pc, #16]	@ (8000f34 <myComfyPrint+0x38>)
 8000f22:	f004 fb49 	bl	80055b8 <HAL_UART_Transmit>
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	2000007c 	.word	0x2000007c
 8000f34:	20000918 	.word	0x20000918

08000f38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f38:	b5b0      	push	{r4, r5, r7, lr}
 8000f3a:	b0c6      	sub	sp, #280	@ 0x118
 8000f3c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f3e:	f001 f9a3 	bl	8002288 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f42:	f000 f93d 	bl	80011c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f46:	f000 fa65 	bl	8001414 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f4a:	f000 fa39 	bl	80013c0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000f4e:	f000 f9a5 	bl	800129c <MX_I2C1_Init>
  MX_TIM3_Init();
 8000f52:	f000 f9d1 	bl	80012f8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  //initialize mpu6050
  HAL_Delay(1000);
 8000f56:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f5a:	f001 f9d7 	bl	800230c <HAL_Delay>
  while(mpu6050_init() != 0){
 8000f5e:	e003      	b.n	8000f68 <main+0x30>
	  HAL_Delay(1000);
 8000f60:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f64:	f001 f9d2 	bl	800230c <HAL_Delay>
  while(mpu6050_init() != 0){
 8000f68:	f000 fd60 	bl	8001a2c <mpu6050_init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d1f6      	bne.n	8000f60 <main+0x28>
	  //try until it worked
  }

  //initialize motors
  motor_init();
 8000f72:	f000 fd0f 	bl	8001994 <motor_init>



  //while loop to wait until robot is in upright position
  //calculate angle from acceleration values
  float acc_angle_temp=1;
 8000f76:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000f7a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  static uint8_t done_already = 0;
  char myString[256] = { 0 };
 8000f7e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000f82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	3304      	adds	r3, #4
 8000f8c:	22fc      	movs	r2, #252	@ 0xfc
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4618      	mov	r0, r3
 8000f92:	f007 ff69 	bl	8008e68 <memset>
  mpu6050_values_t mpu_values;

  mpu6050_read(&mpu_values);
 8000f96:	463b      	mov	r3, r7
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f000 febb 	bl	8001d14 <mpu6050_read>

  if(done_already == 0){
 8000f9e:	4b74      	ldr	r3, [pc, #464]	@ (8001170 <main+0x238>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d171      	bne.n	800108a <main+0x152>
	  while(acc_angle_temp != 0){
 8000fa6:	e062      	b.n	800106e <main+0x136>
		  acc_angle_temp = atan2(mpu_values.acc_x, mpu_values.acc_z)*RAD_TO_DEG;	//*(180/M_PI) to convert from radian to degree
 8000fa8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000fac:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000fb0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fad5 	bl	8000564 <__aeabi_i2d>
 8000fba:	4604      	mov	r4, r0
 8000fbc:	460d      	mov	r5, r1
 8000fbe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000fc2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000fc6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff faca 	bl	8000564 <__aeabi_i2d>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	ec43 2b11 	vmov	d1, r2, r3
 8000fd8:	ec45 4b10 	vmov	d0, r4, r5
 8000fdc:	f008 fc2e 	bl	800983c <atan2>
 8000fe0:	ec51 0b10 	vmov	r0, r1, d0
 8000fe4:	f04f 0200 	mov.w	r2, #0
 8000fe8:	4b62      	ldr	r3, [pc, #392]	@ (8001174 <main+0x23c>)
 8000fea:	f7ff fb25 	bl	8000638 <__aeabi_dmul>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	4610      	mov	r0, r2
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	a35c      	add	r3, pc, #368	@ (adr r3, 8001168 <main+0x230>)
 8000ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ffc:	f7ff fc46 	bl	800088c <__aeabi_ddiv>
 8001000:	4602      	mov	r2, r0
 8001002:	460b      	mov	r3, r1
 8001004:	4610      	mov	r0, r2
 8001006:	4619      	mov	r1, r3
 8001008:	f7ff fdb0 	bl	8000b6c <__aeabi_d2f>
 800100c:	4603      	mov	r3, r0
 800100e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
		  if(isnan(acc_angle_temp)){
 8001012:	ed97 7a43 	vldr	s14, [r7, #268]	@ 0x10c
 8001016:	edd7 7a43 	vldr	s15, [r7, #268]	@ 0x10c
 800101a:	eeb4 7a67 	vcmp.f32	s14, s15
 800101e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001022:	d70b      	bvc.n	800103c <main+0x104>
			  sprintf((char*) myString, "acc_angle_temp is NaN\r\n");
 8001024:	f107 030c 	add.w	r3, r7, #12
 8001028:	4953      	ldr	r1, [pc, #332]	@ (8001178 <main+0x240>)
 800102a:	4618      	mov	r0, r3
 800102c:	f007 fefc 	bl	8008e28 <siprintf>
			  myComfyPrint(myString);
 8001030:	f107 030c 	add.w	r3, r7, #12
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff61 	bl	8000efc <myComfyPrint>
 800103a:	e014      	b.n	8001066 <main+0x12e>
		  }
		  else{
			  sprintf((char*) myString, "acc_angle_temp*100 = %d\r\n", (int) (acc_angle_temp*100));	//apparently floating numbers are disabled in print funcitons by defautl if using newlib
 800103c:	edd7 7a43 	vldr	s15, [r7, #268]	@ 0x10c
 8001040:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 800117c <main+0x244>
 8001044:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001048:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	ee17 2a90 	vmov	r2, s15
 8001054:	494a      	ldr	r1, [pc, #296]	@ (8001180 <main+0x248>)
 8001056:	4618      	mov	r0, r3
 8001058:	f007 fee6 	bl	8008e28 <siprintf>
			  myComfyPrint(myString);
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ff4b 	bl	8000efc <myComfyPrint>
		  }

		  mpu6050_read(&mpu_values);
 8001066:	463b      	mov	r3, r7
 8001068:	4618      	mov	r0, r3
 800106a:	f000 fe53 	bl	8001d14 <mpu6050_read>
	  while(acc_angle_temp != 0){
 800106e:	edd7 7a43 	vldr	s15, [r7, #268]	@ 0x10c
 8001072:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800107a:	d195      	bne.n	8000fa8 <main+0x70>
	  }
	  done_already = 1;
 800107c:	4b3c      	ldr	r3, [pc, #240]	@ (8001170 <main+0x238>)
 800107e:	2201      	movs	r2, #1
 8001080:	701a      	strb	r2, [r3, #0]
	  mpu6050_read(&mpu_values);
 8001082:	463b      	mov	r3, r7
 8001084:	4618      	mov	r0, r3
 8001086:	f000 fe45 	bl	8001d14 <mpu6050_read>
  }
  sprintf((char*) myString, "Acceleration X = %d\r\nAcceleration Y = %d\r\nAcceleration Z = %d\r\n", mpu_values.acc_x, mpu_values.acc_y, mpu_values.acc_z);
 800108a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800108e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001092:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001096:	461a      	mov	r2, r3
 8001098:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800109c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80010a0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80010a4:	4619      	mov	r1, r3
 80010a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80010aa:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80010ae:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80010b2:	f107 000c 	add.w	r0, r7, #12
 80010b6:	9300      	str	r3, [sp, #0]
 80010b8:	460b      	mov	r3, r1
 80010ba:	4932      	ldr	r1, [pc, #200]	@ (8001184 <main+0x24c>)
 80010bc:	f007 feb4 	bl	8008e28 <siprintf>
  myComfyPrint(myString);
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ff19 	bl	8000efc <myComfyPrint>
  sprintf((char*) myString, "Gyroscope X = %d\r\nGyroscope Y = %d\r\nGyroscope Z = %d\r\n", mpu_values.gyro_x, mpu_values.gyro_y, mpu_values.gyro_z);
 80010ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80010ce:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80010d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010d6:	461a      	mov	r2, r3
 80010d8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80010dc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80010e0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010e4:	4619      	mov	r1, r3
 80010e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80010ea:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80010ee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010f2:	f107 000c 	add.w	r0, r7, #12
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	460b      	mov	r3, r1
 80010fa:	4923      	ldr	r1, [pc, #140]	@ (8001188 <main+0x250>)
 80010fc:	f007 fe94 	bl	8008e28 <siprintf>
  myComfyPrint(myString);
 8001100:	f107 030c 	add.w	r3, r7, #12
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff fef9 	bl	8000efc <myComfyPrint>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800110a:	f004 fe55 	bl	8005db8 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of mpu6050_values_queue */
  mpu6050_values_queueHandle = osMessageQueueNew (8, sizeof(mpu6050_values_t), &mpu6050_values_queue_attributes);
 800110e:	4a1f      	ldr	r2, [pc, #124]	@ (800118c <main+0x254>)
 8001110:	210c      	movs	r1, #12
 8001112:	2008      	movs	r0, #8
 8001114:	f004 ff4a 	bl	8005fac <osMessageQueueNew>
 8001118:	4603      	mov	r3, r0
 800111a:	4a1d      	ldr	r2, [pc, #116]	@ (8001190 <main+0x258>)
 800111c:	6013      	str	r3, [r2, #0]

  /* creation of motor_value_queue */
  motor_value_queueHandle = osMessageQueueNew (1, sizeof(int32_t), &motor_value_queue_attributes);
 800111e:	4a1d      	ldr	r2, [pc, #116]	@ (8001194 <main+0x25c>)
 8001120:	2104      	movs	r1, #4
 8001122:	2001      	movs	r0, #1
 8001124:	f004 ff42 	bl	8005fac <osMessageQueueNew>
 8001128:	4603      	mov	r3, r0
 800112a:	4a1b      	ldr	r2, [pc, #108]	@ (8001198 <main+0x260>)
 800112c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task_ReadMPU605 */
  Task_ReadMPU605Handle = osThreadNew(task_read_mpu6050, NULL, &Task_ReadMPU605_attributes);
 800112e:	4a1b      	ldr	r2, [pc, #108]	@ (800119c <main+0x264>)
 8001130:	2100      	movs	r1, #0
 8001132:	481b      	ldr	r0, [pc, #108]	@ (80011a0 <main+0x268>)
 8001134:	f004 fea8 	bl	8005e88 <osThreadNew>
 8001138:	4603      	mov	r3, r0
 800113a:	4a1a      	ldr	r2, [pc, #104]	@ (80011a4 <main+0x26c>)
 800113c:	6013      	str	r3, [r2, #0]

  /* creation of Task_CalcValues */
  Task_CalcValuesHandle = osThreadNew(task_calculate_motor_values, NULL, &Task_CalcValues_attributes);
 800113e:	4a1a      	ldr	r2, [pc, #104]	@ (80011a8 <main+0x270>)
 8001140:	2100      	movs	r1, #0
 8001142:	481a      	ldr	r0, [pc, #104]	@ (80011ac <main+0x274>)
 8001144:	f004 fea0 	bl	8005e88 <osThreadNew>
 8001148:	4603      	mov	r3, r0
 800114a:	4a19      	ldr	r2, [pc, #100]	@ (80011b0 <main+0x278>)
 800114c:	6013      	str	r3, [r2, #0]

  /* creation of Task_CtrlMotor */
  Task_CtrlMotorHandle = osThreadNew(task_control_motors, NULL, &Task_CtrlMotor_attributes);
 800114e:	4a19      	ldr	r2, [pc, #100]	@ (80011b4 <main+0x27c>)
 8001150:	2100      	movs	r1, #0
 8001152:	4819      	ldr	r0, [pc, #100]	@ (80011b8 <main+0x280>)
 8001154:	f004 fe98 	bl	8005e88 <osThreadNew>
 8001158:	4603      	mov	r3, r0
 800115a:	4a18      	ldr	r2, [pc, #96]	@ (80011bc <main+0x284>)
 800115c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800115e:	f004 fe4f 	bl	8005e00 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001162:	bf00      	nop
 8001164:	e7fd      	b.n	8001162 <main+0x22a>
 8001166:	bf00      	nop
 8001168:	54442d18 	.word	0x54442d18
 800116c:	400921fb 	.word	0x400921fb
 8001170:	20000974 	.word	0x20000974
 8001174:	40668000 	.word	0x40668000
 8001178:	08009d84 	.word	0x08009d84
 800117c:	42c80000 	.word	0x42c80000
 8001180:	08009d9c 	.word	0x08009d9c
 8001184:	08009db8 	.word	0x08009db8
 8001188:	08009df8 	.word	0x08009df8
 800118c:	08009fdc 	.word	0x08009fdc
 8001190:	2000096c 	.word	0x2000096c
 8001194:	08009ff4 	.word	0x08009ff4
 8001198:	20000970 	.word	0x20000970
 800119c:	08009f70 	.word	0x08009f70
 80011a0:	0800153d 	.word	0x0800153d
 80011a4:	20000960 	.word	0x20000960
 80011a8:	08009f94 	.word	0x08009f94
 80011ac:	08001621 	.word	0x08001621
 80011b0:	20000964 	.word	0x20000964
 80011b4:	08009fb8 	.word	0x08009fb8
 80011b8:	08001901 	.word	0x08001901
 80011bc:	20000968 	.word	0x20000968

080011c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b094      	sub	sp, #80	@ 0x50
 80011c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011c6:	f107 031c 	add.w	r3, r7, #28
 80011ca:	2234      	movs	r2, #52	@ 0x34
 80011cc:	2100      	movs	r1, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f007 fe4a 	bl	8008e68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d4:	f107 0308 	add.w	r3, r7, #8
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e4:	2300      	movs	r3, #0
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001294 <SystemClock_Config+0xd4>)
 80011ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ec:	4a29      	ldr	r2, [pc, #164]	@ (8001294 <SystemClock_Config+0xd4>)
 80011ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80011f4:	4b27      	ldr	r3, [pc, #156]	@ (8001294 <SystemClock_Config+0xd4>)
 80011f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011fc:	607b      	str	r3, [r7, #4]
 80011fe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001200:	2300      	movs	r3, #0
 8001202:	603b      	str	r3, [r7, #0]
 8001204:	4b24      	ldr	r3, [pc, #144]	@ (8001298 <SystemClock_Config+0xd8>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800120c:	4a22      	ldr	r2, [pc, #136]	@ (8001298 <SystemClock_Config+0xd8>)
 800120e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001212:	6013      	str	r3, [r2, #0]
 8001214:	4b20      	ldr	r3, [pc, #128]	@ (8001298 <SystemClock_Config+0xd8>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800121c:	603b      	str	r3, [r7, #0]
 800121e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001220:	2302      	movs	r3, #2
 8001222:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001224:	2301      	movs	r3, #1
 8001226:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001228:	2310      	movs	r3, #16
 800122a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800122c:	2302      	movs	r3, #2
 800122e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001230:	2300      	movs	r3, #0
 8001232:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001234:	2310      	movs	r3, #16
 8001236:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001238:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800123c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800123e:	2304      	movs	r3, #4
 8001240:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001242:	2302      	movs	r3, #2
 8001244:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001246:	2302      	movs	r3, #2
 8001248:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800124a:	f107 031c 	add.w	r3, r7, #28
 800124e:	4618      	mov	r0, r3
 8001250:	f002 fff6 	bl	8004240 <HAL_RCC_OscConfig>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800125a:	f000 fb95 	bl	8001988 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800125e:	230f      	movs	r3, #15
 8001260:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001262:	2302      	movs	r3, #2
 8001264:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001266:	2300      	movs	r3, #0
 8001268:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800126a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800126e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001270:	2300      	movs	r3, #0
 8001272:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001274:	f107 0308 	add.w	r3, r7, #8
 8001278:	2102      	movs	r1, #2
 800127a:	4618      	mov	r0, r3
 800127c:	f002 fc64 	bl	8003b48 <HAL_RCC_ClockConfig>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001286:	f000 fb7f 	bl	8001988 <Error_Handler>
  }
}
 800128a:	bf00      	nop
 800128c:	3750      	adds	r7, #80	@ 0x50
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40023800 	.word	0x40023800
 8001298:	40007000 	.word	0x40007000

0800129c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012a0:	4b12      	ldr	r3, [pc, #72]	@ (80012ec <MX_I2C1_Init+0x50>)
 80012a2:	4a13      	ldr	r2, [pc, #76]	@ (80012f0 <MX_I2C1_Init+0x54>)
 80012a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012a6:	4b11      	ldr	r3, [pc, #68]	@ (80012ec <MX_I2C1_Init+0x50>)
 80012a8:	4a12      	ldr	r2, [pc, #72]	@ (80012f4 <MX_I2C1_Init+0x58>)
 80012aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012ac:	4b0f      	ldr	r3, [pc, #60]	@ (80012ec <MX_I2C1_Init+0x50>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012b2:	4b0e      	ldr	r3, [pc, #56]	@ (80012ec <MX_I2C1_Init+0x50>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012b8:	4b0c      	ldr	r3, [pc, #48]	@ (80012ec <MX_I2C1_Init+0x50>)
 80012ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012c0:	4b0a      	ldr	r3, [pc, #40]	@ (80012ec <MX_I2C1_Init+0x50>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012c6:	4b09      	ldr	r3, [pc, #36]	@ (80012ec <MX_I2C1_Init+0x50>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012cc:	4b07      	ldr	r3, [pc, #28]	@ (80012ec <MX_I2C1_Init+0x50>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012d2:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <MX_I2C1_Init+0x50>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012d8:	4804      	ldr	r0, [pc, #16]	@ (80012ec <MX_I2C1_Init+0x50>)
 80012da:	f001 fae3 	bl	80028a4 <HAL_I2C_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012e4:	f000 fb50 	bl	8001988 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	2000087c 	.word	0x2000087c
 80012f0:	40005400 	.word	0x40005400
 80012f4:	000186a0 	.word	0x000186a0

080012f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08a      	sub	sp, #40	@ 0x28
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012fe:	f107 0320 	add.w	r3, r7, #32
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
 8001314:	611a      	str	r2, [r3, #16]
 8001316:	615a      	str	r2, [r3, #20]
 8001318:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800131a:	4b27      	ldr	r3, [pc, #156]	@ (80013b8 <MX_TIM3_Init+0xc0>)
 800131c:	4a27      	ldr	r2, [pc, #156]	@ (80013bc <MX_TIM3_Init+0xc4>)
 800131e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001320:	4b25      	ldr	r3, [pc, #148]	@ (80013b8 <MX_TIM3_Init+0xc0>)
 8001322:	2200      	movs	r2, #0
 8001324:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001326:	4b24      	ldr	r3, [pc, #144]	@ (80013b8 <MX_TIM3_Init+0xc0>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8400-1;
 800132c:	4b22      	ldr	r3, [pc, #136]	@ (80013b8 <MX_TIM3_Init+0xc0>)
 800132e:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001332:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001334:	4b20      	ldr	r3, [pc, #128]	@ (80013b8 <MX_TIM3_Init+0xc0>)
 8001336:	2200      	movs	r2, #0
 8001338:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800133a:	4b1f      	ldr	r3, [pc, #124]	@ (80013b8 <MX_TIM3_Init+0xc0>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001340:	481d      	ldr	r0, [pc, #116]	@ (80013b8 <MX_TIM3_Init+0xc0>)
 8001342:	f003 fae5 	bl	8004910 <HAL_TIM_PWM_Init>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800134c:	f000 fb1c 	bl	8001988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001350:	2300      	movs	r3, #0
 8001352:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001354:	2300      	movs	r3, #0
 8001356:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001358:	f107 0320 	add.w	r3, r7, #32
 800135c:	4619      	mov	r1, r3
 800135e:	4816      	ldr	r0, [pc, #88]	@ (80013b8 <MX_TIM3_Init+0xc0>)
 8001360:	f004 f84a 	bl	80053f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800136a:	f000 fb0d 	bl	8001988 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800136e:	2360      	movs	r3, #96	@ 0x60
 8001370:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	2200      	movs	r2, #0
 8001382:	4619      	mov	r1, r3
 8001384:	480c      	ldr	r0, [pc, #48]	@ (80013b8 <MX_TIM3_Init+0xc0>)
 8001386:	f003 fccb 	bl	8004d20 <HAL_TIM_PWM_ConfigChannel>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001390:	f000 fafa 	bl	8001988 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001394:	1d3b      	adds	r3, r7, #4
 8001396:	2204      	movs	r2, #4
 8001398:	4619      	mov	r1, r3
 800139a:	4807      	ldr	r0, [pc, #28]	@ (80013b8 <MX_TIM3_Init+0xc0>)
 800139c:	f003 fcc0 	bl	8004d20 <HAL_TIM_PWM_ConfigChannel>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80013a6:	f000 faef 	bl	8001988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013aa:	4803      	ldr	r0, [pc, #12]	@ (80013b8 <MX_TIM3_Init+0xc0>)
 80013ac:	f000 fdb0 	bl	8001f10 <HAL_TIM_MspPostInit>

}
 80013b0:	bf00      	nop
 80013b2:	3728      	adds	r7, #40	@ 0x28
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	200008d0 	.word	0x200008d0
 80013bc:	40000400 	.word	0x40000400

080013c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013c4:	4b11      	ldr	r3, [pc, #68]	@ (800140c <MX_USART2_UART_Init+0x4c>)
 80013c6:	4a12      	ldr	r2, [pc, #72]	@ (8001410 <MX_USART2_UART_Init+0x50>)
 80013c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013ca:	4b10      	ldr	r3, [pc, #64]	@ (800140c <MX_USART2_UART_Init+0x4c>)
 80013cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013d2:	4b0e      	ldr	r3, [pc, #56]	@ (800140c <MX_USART2_UART_Init+0x4c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013d8:	4b0c      	ldr	r3, [pc, #48]	@ (800140c <MX_USART2_UART_Init+0x4c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013de:	4b0b      	ldr	r3, [pc, #44]	@ (800140c <MX_USART2_UART_Init+0x4c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013e4:	4b09      	ldr	r3, [pc, #36]	@ (800140c <MX_USART2_UART_Init+0x4c>)
 80013e6:	220c      	movs	r2, #12
 80013e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ea:	4b08      	ldr	r3, [pc, #32]	@ (800140c <MX_USART2_UART_Init+0x4c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f0:	4b06      	ldr	r3, [pc, #24]	@ (800140c <MX_USART2_UART_Init+0x4c>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013f6:	4805      	ldr	r0, [pc, #20]	@ (800140c <MX_USART2_UART_Init+0x4c>)
 80013f8:	f004 f88e 	bl	8005518 <HAL_UART_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001402:	f000 fac1 	bl	8001988 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000918 	.word	0x20000918
 8001410:	40004400 	.word	0x40004400

08001414 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08a      	sub	sp, #40	@ 0x28
 8001418:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141a:	f107 0314 	add.w	r3, r7, #20
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	60da      	str	r2, [r3, #12]
 8001428:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	4b39      	ldr	r3, [pc, #228]	@ (8001514 <MX_GPIO_Init+0x100>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001432:	4a38      	ldr	r2, [pc, #224]	@ (8001514 <MX_GPIO_Init+0x100>)
 8001434:	f043 0304 	orr.w	r3, r3, #4
 8001438:	6313      	str	r3, [r2, #48]	@ 0x30
 800143a:	4b36      	ldr	r3, [pc, #216]	@ (8001514 <MX_GPIO_Init+0x100>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	f003 0304 	and.w	r3, r3, #4
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	4b32      	ldr	r3, [pc, #200]	@ (8001514 <MX_GPIO_Init+0x100>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144e:	4a31      	ldr	r2, [pc, #196]	@ (8001514 <MX_GPIO_Init+0x100>)
 8001450:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001454:	6313      	str	r3, [r2, #48]	@ 0x30
 8001456:	4b2f      	ldr	r3, [pc, #188]	@ (8001514 <MX_GPIO_Init+0x100>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	60bb      	str	r3, [r7, #8]
 8001466:	4b2b      	ldr	r3, [pc, #172]	@ (8001514 <MX_GPIO_Init+0x100>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146a:	4a2a      	ldr	r2, [pc, #168]	@ (8001514 <MX_GPIO_Init+0x100>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	6313      	str	r3, [r2, #48]	@ 0x30
 8001472:	4b28      	ldr	r3, [pc, #160]	@ (8001514 <MX_GPIO_Init+0x100>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	60bb      	str	r3, [r7, #8]
 800147c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	4b24      	ldr	r3, [pc, #144]	@ (8001514 <MX_GPIO_Init+0x100>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001486:	4a23      	ldr	r2, [pc, #140]	@ (8001514 <MX_GPIO_Init+0x100>)
 8001488:	f043 0302 	orr.w	r3, r3, #2
 800148c:	6313      	str	r3, [r2, #48]	@ 0x30
 800148e:	4b21      	ldr	r3, [pc, #132]	@ (8001514 <MX_GPIO_Init+0x100>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|MOTOR2_DIR_Pin|MOTOR3_DIR_Pin, GPIO_PIN_RESET);
 800149a:	2200      	movs	r2, #0
 800149c:	f44f 7118 	mov.w	r1, #608	@ 0x260
 80014a0:	481d      	ldr	r0, [pc, #116]	@ (8001518 <MX_GPIO_Init+0x104>)
 80014a2:	f001 f9cd 	bl	8002840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80014a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014ac:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	4619      	mov	r1, r3
 80014bc:	4817      	ldr	r0, [pc, #92]	@ (800151c <MX_GPIO_Init+0x108>)
 80014be:	f001 f82b 	bl	8002518 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin MOTOR2_DIR_Pin MOTOR3_DIR_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|MOTOR2_DIR_Pin|MOTOR3_DIR_Pin;
 80014c2:	f44f 7318 	mov.w	r3, #608	@ 0x260
 80014c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c8:	2301      	movs	r3, #1
 80014ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2300      	movs	r3, #0
 80014d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	4619      	mov	r1, r3
 80014da:	480f      	ldr	r0, [pc, #60]	@ (8001518 <MX_GPIO_Init+0x104>)
 80014dc:	f001 f81c 	bl	8002518 <HAL_GPIO_Init>

  /*Configure GPIO pin : MPU6050_INT_Pin */
  GPIO_InitStruct.Pin = MPU6050_INT_Pin;
 80014e0:	2320      	movs	r3, #32
 80014e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014e4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014ea:	2302      	movs	r3, #2
 80014ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MPU6050_INT_GPIO_Port, &GPIO_InitStruct);
 80014ee:	f107 0314 	add.w	r3, r7, #20
 80014f2:	4619      	mov	r1, r3
 80014f4:	480a      	ldr	r0, [pc, #40]	@ (8001520 <MX_GPIO_Init+0x10c>)
 80014f6:	f001 f80f 	bl	8002518 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2105      	movs	r1, #5
 80014fe:	2017      	movs	r0, #23
 8001500:	f000 ffe0 	bl	80024c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001504:	2017      	movs	r0, #23
 8001506:	f000 fff9 	bl	80024fc <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800150a:	bf00      	nop
 800150c:	3728      	adds	r7, #40	@ 0x28
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40023800 	.word	0x40023800
 8001518:	40020000 	.word	0x40020000
 800151c:	40020800 	.word	0x40020800
 8001520:	40020400 	.word	0x40020400

08001524 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == MPU6050_INT_Pin){
	  //do stuff when mpu6050 says data is ready for reading
  }
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
	...

0800153c <task_read_mpu6050>:

/* USER CODE BEGIN Header_task_read_mpu6050 */

/* USER CODE END Header_task_read_mpu6050 */
void task_read_mpu6050(void *argument)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08c      	sub	sp, #48	@ 0x30
 8001540:	af04      	add	r7, sp, #16
 8001542:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	uint8_t read_mpu_buff[6] = { 0 };
 8001544:	2300      	movs	r3, #0
 8001546:	61bb      	str	r3, [r7, #24]
 8001548:	2300      	movs	r3, #0
 800154a:	83bb      	strh	r3, [r7, #28]

	for(;;)
	{

		//make sure there is room in queue
		while(osMessageQueueGetSpace(mpu6050_values_queueHandle) == 0){
 800154c:	bf00      	nop
 800154e:	4b31      	ldr	r3, [pc, #196]	@ (8001614 <task_read_mpu6050+0xd8>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f004 fe7c 	bl	8006250 <osMessageQueueGetSpace>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d0f7      	beq.n	800154e <task_read_mpu6050+0x12>
			//busy waiting
		}

		//read accelerometer data
		HAL_I2C_Mem_Read(&hi2c1, (DEVICE_ADDRESS<<1) +1, REG_ACC_DATA, 1, read_mpu_buff, sizeof(read_mpu_buff), 100);
 800155e:	2364      	movs	r3, #100	@ 0x64
 8001560:	9302      	str	r3, [sp, #8]
 8001562:	2306      	movs	r3, #6
 8001564:	9301      	str	r3, [sp, #4]
 8001566:	f107 0318 	add.w	r3, r7, #24
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	2301      	movs	r3, #1
 800156e:	223b      	movs	r2, #59	@ 0x3b
 8001570:	21d1      	movs	r1, #209	@ 0xd1
 8001572:	4829      	ldr	r0, [pc, #164]	@ (8001618 <task_read_mpu6050+0xdc>)
 8001574:	f001 fbd4 	bl	8002d20 <HAL_I2C_Mem_Read>
		mpu_values_temp.acc_x = (int16_t) (read_mpu_buff[0]<<8) + read_mpu_buff[1];
 8001578:	7e3b      	ldrb	r3, [r7, #24]
 800157a:	021b      	lsls	r3, r3, #8
 800157c:	b29b      	uxth	r3, r3
 800157e:	7e7a      	ldrb	r2, [r7, #25]
 8001580:	4413      	add	r3, r2
 8001582:	b29b      	uxth	r3, r3
 8001584:	b21b      	sxth	r3, r3
 8001586:	827b      	strh	r3, [r7, #18]
		mpu_values_temp.acc_y = (int16_t) (read_mpu_buff[2]<<8) + read_mpu_buff[3];
 8001588:	7ebb      	ldrb	r3, [r7, #26]
 800158a:	021b      	lsls	r3, r3, #8
 800158c:	b29b      	uxth	r3, r3
 800158e:	7efa      	ldrb	r2, [r7, #27]
 8001590:	4413      	add	r3, r2
 8001592:	b29b      	uxth	r3, r3
 8001594:	b21b      	sxth	r3, r3
 8001596:	82bb      	strh	r3, [r7, #20]
		mpu_values_temp.acc_z = (int16_t) (read_mpu_buff[4]<<8) + read_mpu_buff[5];
 8001598:	7f3b      	ldrb	r3, [r7, #28]
 800159a:	021b      	lsls	r3, r3, #8
 800159c:	b29b      	uxth	r3, r3
 800159e:	7f7a      	ldrb	r2, [r7, #29]
 80015a0:	4413      	add	r3, r2
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	b21b      	sxth	r3, r3
 80015a6:	82fb      	strh	r3, [r7, #22]

		//read gyroscope data
		HAL_I2C_Mem_Read(&hi2c1, (DEVICE_ADDRESS<<1) +1, REG_GYRO_DATA, 1, read_mpu_buff, sizeof(read_mpu_buff), 100);
 80015a8:	2364      	movs	r3, #100	@ 0x64
 80015aa:	9302      	str	r3, [sp, #8]
 80015ac:	2306      	movs	r3, #6
 80015ae:	9301      	str	r3, [sp, #4]
 80015b0:	f107 0318 	add.w	r3, r7, #24
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	2301      	movs	r3, #1
 80015b8:	2243      	movs	r2, #67	@ 0x43
 80015ba:	21d1      	movs	r1, #209	@ 0xd1
 80015bc:	4816      	ldr	r0, [pc, #88]	@ (8001618 <task_read_mpu6050+0xdc>)
 80015be:	f001 fbaf 	bl	8002d20 <HAL_I2C_Mem_Read>
		mpu_values_temp.gyro_x = (int16_t) (read_mpu_buff[0]<<8) + read_mpu_buff[1];
 80015c2:	7e3b      	ldrb	r3, [r7, #24]
 80015c4:	021b      	lsls	r3, r3, #8
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	7e7a      	ldrb	r2, [r7, #25]
 80015ca:	4413      	add	r3, r2
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	b21b      	sxth	r3, r3
 80015d0:	81bb      	strh	r3, [r7, #12]
		mpu_values_temp.gyro_y = (int16_t) (read_mpu_buff[2]<<8) + read_mpu_buff[3];
 80015d2:	7ebb      	ldrb	r3, [r7, #26]
 80015d4:	021b      	lsls	r3, r3, #8
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	7efa      	ldrb	r2, [r7, #27]
 80015da:	4413      	add	r3, r2
 80015dc:	b29b      	uxth	r3, r3
 80015de:	b21b      	sxth	r3, r3
 80015e0:	81fb      	strh	r3, [r7, #14]
		mpu_values_temp.gyro_z = (int16_t) (read_mpu_buff[4]<<8) + read_mpu_buff[5];
 80015e2:	7f3b      	ldrb	r3, [r7, #28]
 80015e4:	021b      	lsls	r3, r3, #8
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	7f7a      	ldrb	r2, [r7, #29]
 80015ea:	4413      	add	r3, r2
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	b21b      	sxth	r3, r3
 80015f0:	823b      	strh	r3, [r7, #16]

		//apply offsets
		mpu_values_temp.gyro_y += GYRO_Y_OFFSET_1000;
 80015f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	330c      	adds	r3, #12
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	b21b      	sxth	r3, r3
 80015fe:	81fb      	strh	r3, [r7, #14]

		//send values to queue
		osMessageQueuePut(mpu6050_values_queueHandle, &mpu_values_temp, 0, osWaitForever);
 8001600:	4b04      	ldr	r3, [pc, #16]	@ (8001614 <task_read_mpu6050+0xd8>)
 8001602:	6818      	ldr	r0, [r3, #0]
 8001604:	f107 010c 	add.w	r1, r7, #12
 8001608:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800160c:	2200      	movs	r2, #0
 800160e:	f004 fd41 	bl	8006094 <osMessageQueuePut>
		while(osMessageQueueGetSpace(mpu6050_values_queueHandle) == 0){
 8001612:	e79b      	b.n	800154c <task_read_mpu6050+0x10>
 8001614:	2000096c 	.word	0x2000096c
 8001618:	2000087c 	.word	0x2000087c
 800161c:	00000000 	.word	0x00000000

08001620 <task_calculate_motor_values>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_calculate_motor_values */
void task_calculate_motor_values(void *argument)
{
 8001620:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001624:	b0a2      	sub	sp, #136	@ 0x88
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_calculate_motor_values */

	  float acc_angle;
	  float gyro_rate, gyro_angle;
	  uint32_t current_time=(osKernelGetTickCount()*1000 / osKernelGetTickFreq()), last_time = current_time;
 800162a:	f004 fc0f 	bl	8005e4c <osKernelGetTickCount>
 800162e:	4603      	mov	r3, r0
 8001630:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001634:	fb02 f403 	mul.w	r4, r2, r3
 8001638:	f004 fc1d 	bl	8005e76 <osKernelGetTickFreq>
 800163c:	4603      	mov	r3, r0
 800163e:	fbb4 f3f3 	udiv	r3, r4, r3
 8001642:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001646:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800164a:	677b      	str	r3, [r7, #116]	@ 0x74
	  float current_angle=0, last_angle=0;
 800164c:	f04f 0300 	mov.w	r3, #0
 8001650:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001652:	f04f 0300 	mov.w	r3, #0
 8001656:	673b      	str	r3, [r7, #112]	@ 0x70
	  float alpha = 0.9934;
 8001658:	4b9f      	ldr	r3, [pc, #636]	@ (80018d8 <task_calculate_motor_values+0x2b8>)
 800165a:	66fb      	str	r3, [r7, #108]	@ 0x6c
	  float target_angle=0;
 800165c:	f04f 0300 	mov.w	r3, #0
 8001660:	66bb      	str	r3, [r7, #104]	@ 0x68
	  float deviation, deviation_sum=0;
 8001662:	f04f 0300 	mov.w	r3, #0
 8001666:	67bb      	str	r3, [r7, #120]	@ 0x78
	  float Kp=12, Ki=0, Kd=0;
 8001668:	4b9c      	ldr	r3, [pc, #624]	@ (80018dc <task_calculate_motor_values+0x2bc>)
 800166a:	667b      	str	r3, [r7, #100]	@ 0x64
 800166c:	f04f 0300 	mov.w	r3, #0
 8001670:	663b      	str	r3, [r7, #96]	@ 0x60
 8001672:	f04f 0300 	mov.w	r3, #0
 8001676:	65fb      	str	r3, [r7, #92]	@ 0x5c
  /* Infinite loop */
  for(;;)
  {

	  //wait for there to be values in the queue
	  while(osMessageQueueGetCount(mpu6050_values_queueHandle) == 0){
 8001678:	bf00      	nop
 800167a:	4b99      	ldr	r3, [pc, #612]	@ (80018e0 <task_calculate_motor_values+0x2c0>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f004 fdc6 	bl	8006210 <osMessageQueueGetCount>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d0f7      	beq.n	800167a <task_calculate_motor_values+0x5a>
		  //busy waiting
	  }

	  //read values from queue
	  osMessageQueueGet(mpu6050_values_queueHandle, &mpu_values, NULL, osWaitForever);
 800168a:	4b95      	ldr	r3, [pc, #596]	@ (80018e0 <task_calculate_motor_values+0x2c0>)
 800168c:	6818      	ldr	r0, [r3, #0]
 800168e:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8001692:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001696:	2200      	movs	r2, #0
 8001698:	f004 fd5c 	bl	8006154 <osMessageQueueGet>


	  //calculate angle from acceleration values
	  acc_angle = atan2(mpu_values.acc_x, mpu_values.acc_z)*RAD_TO_DEG;	//*(180/M_PI) to convert from radian to degree
 800169c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7fe ff5f 	bl	8000564 <__aeabi_i2d>
 80016a6:	4604      	mov	r4, r0
 80016a8:	460d      	mov	r5, r1
 80016aa:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7fe ff58 	bl	8000564 <__aeabi_i2d>
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	ec43 2b11 	vmov	d1, r2, r3
 80016bc:	ec45 4b10 	vmov	d0, r4, r5
 80016c0:	f008 f8bc 	bl	800983c <atan2>
 80016c4:	ec51 0b10 	vmov	r0, r1, d0
 80016c8:	f04f 0200 	mov.w	r2, #0
 80016cc:	4b85      	ldr	r3, [pc, #532]	@ (80018e4 <task_calculate_motor_values+0x2c4>)
 80016ce:	f7fe ffb3 	bl	8000638 <__aeabi_dmul>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	4610      	mov	r0, r2
 80016d8:	4619      	mov	r1, r3
 80016da:	a37b      	add	r3, pc, #492	@ (adr r3, 80018c8 <task_calculate_motor_values+0x2a8>)
 80016dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e0:	f7ff f8d4 	bl	800088c <__aeabi_ddiv>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4610      	mov	r0, r2
 80016ea:	4619      	mov	r1, r3
 80016ec:	f7ff fa3e 	bl	8000b6c <__aeabi_d2f>
 80016f0:	4603      	mov	r3, r0
 80016f2:	65bb      	str	r3, [r7, #88]	@ 0x58

	  //calculate angle from gyroscope
	  gyro_rate = mpu_values.gyro_y * (1000.0/INT16_MAX);	//500, because that is the range that the mpu6050 is set to currently
 80016f4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7fe ff33 	bl	8000564 <__aeabi_i2d>
 80016fe:	a374      	add	r3, pc, #464	@ (adr r3, 80018d0 <task_calculate_motor_values+0x2b0>)
 8001700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001704:	f7fe ff98 	bl	8000638 <__aeabi_dmul>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4610      	mov	r0, r2
 800170e:	4619      	mov	r1, r3
 8001710:	f7ff fa2c 	bl	8000b6c <__aeabi_d2f>
 8001714:	4603      	mov	r3, r0
 8001716:	657b      	str	r3, [r7, #84]	@ 0x54
	  last_time = current_time;
 8001718:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800171c:	677b      	str	r3, [r7, #116]	@ 0x74
	  current_time = ((osKernelGetTickCount()*1000) / osKernelGetTickFreq());
 800171e:	f004 fb95 	bl	8005e4c <osKernelGetTickCount>
 8001722:	4603      	mov	r3, r0
 8001724:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001728:	fb02 f403 	mul.w	r4, r2, r3
 800172c:	f004 fba3 	bl	8005e76 <osKernelGetTickFreq>
 8001730:	4603      	mov	r3, r0
 8001732:	fbb4 f3f3 	udiv	r3, r4, r3
 8001736:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	  gyro_angle = gyro_angle + gyro_rate*((float)(current_time-last_time)/1000.0);
 800173a:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 800173e:	f7fe ff23 	bl	8000588 <__aeabi_f2d>
 8001742:	4604      	mov	r4, r0
 8001744:	460d      	mov	r5, r1
 8001746:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001748:	f7fe ff1e 	bl	8000588 <__aeabi_f2d>
 800174c:	4680      	mov	r8, r0
 800174e:	4689      	mov	r9, r1
 8001750:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001754:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	ee07 3a90 	vmov	s15, r3
 800175c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001760:	ee17 0a90 	vmov	r0, s15
 8001764:	f7fe ff10 	bl	8000588 <__aeabi_f2d>
 8001768:	f04f 0200 	mov.w	r2, #0
 800176c:	4b5e      	ldr	r3, [pc, #376]	@ (80018e8 <task_calculate_motor_values+0x2c8>)
 800176e:	f7ff f88d 	bl	800088c <__aeabi_ddiv>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	4640      	mov	r0, r8
 8001778:	4649      	mov	r1, r9
 800177a:	f7fe ff5d 	bl	8000638 <__aeabi_dmul>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4620      	mov	r0, r4
 8001784:	4629      	mov	r1, r5
 8001786:	f7fe fda1 	bl	80002cc <__adddf3>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4610      	mov	r0, r2
 8001790:	4619      	mov	r1, r3
 8001792:	f7ff f9eb 	bl	8000b6c <__aeabi_d2f>
 8001796:	4603      	mov	r3, r0
 8001798:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

	  //combine both values into one
	  last_angle = current_angle;
 800179c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800179e:	673b      	str	r3, [r7, #112]	@ 0x70
	  current_angle = alpha * (gyro_angle) + (float) (1-alpha) * acc_angle;
 80017a0:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 80017a4:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80017a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80017b0:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80017b4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80017b8:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80017bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c4:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c


	  //PID
	  deviation = current_angle - target_angle;
 80017c8:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 80017cc:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80017d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017d4:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
	  deviation_sum = deviation_sum + deviation;
 80017d8:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 80017dc:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80017e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017e4:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
	  //add constraining of max value of deviation_sum here

	  motor_value_in_percent = Kp*deviation + Ki*deviation_sum*((float)(current_time-last_time)/1000) - Kd*(current_angle-last_angle)/((float)(current_time-last_time)/1000);
 80017e8:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 80017ec:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80017f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017f4:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 80017f8:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80017fc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001800:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001804:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	ee07 3a90 	vmov	s15, r3
 800180c:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8001810:	eddf 5a36 	vldr	s11, [pc, #216]	@ 80018ec <task_calculate_motor_values+0x2cc>
 8001814:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001818:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800181c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001820:	edd7 6a1f 	vldr	s13, [r7, #124]	@ 0x7c
 8001824:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8001828:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800182c:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001830:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001834:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001838:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	ee07 3a90 	vmov	s15, r3
 8001840:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001844:	eddf 5a29 	vldr	s11, [pc, #164]	@ 80018ec <task_calculate_motor_values+0x2cc>
 8001848:	eec7 6aa5 	vdiv.f32	s13, s15, s11
 800184c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001850:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001854:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
	  motor_value = (motor_value_in_percent * MOTOR_MAX_SPEED) /100;
 8001858:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800185c:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80018f0 <task_calculate_motor_values+0x2d0>
 8001860:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001864:	eddf 6a23 	vldr	s13, [pc, #140]	@ 80018f4 <task_calculate_motor_values+0x2d4>
 8001868:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800186c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001870:	ee17 3a90 	vmov	r3, s15
 8001874:	64bb      	str	r3, [r7, #72]	@ 0x48


	  //debug
	  	  {char asdf_string[32];
	  	  sprintf(asdf_string, "motor_value = %d\r\n", motor_value);
 8001876:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001878:	f107 030c 	add.w	r3, r7, #12
 800187c:	491e      	ldr	r1, [pc, #120]	@ (80018f8 <task_calculate_motor_values+0x2d8>)
 800187e:	4618      	mov	r0, r3
 8001880:	f007 fad2 	bl	8008e28 <siprintf>
	  	  myComfyPrint(asdf_string);}
 8001884:	f107 030c 	add.w	r3, r7, #12
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff fb37 	bl	8000efc <myComfyPrint>


	  //if there is already a message in the queue, remove it
	  if(osMessageQueueGetSpace(motor_value_queueHandle) < 1){
 800188e:	4b1b      	ldr	r3, [pc, #108]	@ (80018fc <task_calculate_motor_values+0x2dc>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f004 fcdc 	bl	8006250 <osMessageQueueGetSpace>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d108      	bne.n	80018b0 <task_calculate_motor_values+0x290>
		  int16_t temp;
		  osMessageQueueGet(motor_value_queueHandle, &temp, NULL, osWaitForever);
 800189e:	4b17      	ldr	r3, [pc, #92]	@ (80018fc <task_calculate_motor_values+0x2dc>)
 80018a0:	6818      	ldr	r0, [r3, #0]
 80018a2:	f107 012e 	add.w	r1, r7, #46	@ 0x2e
 80018a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018aa:	2200      	movs	r2, #0
 80018ac:	f004 fc52 	bl	8006154 <osMessageQueueGet>
	  }
	  //send motor value to queue
	  osMessageQueuePut(motor_value_queueHandle, &motor_value, 0, osWaitForever);
 80018b0:	4b12      	ldr	r3, [pc, #72]	@ (80018fc <task_calculate_motor_values+0x2dc>)
 80018b2:	6818      	ldr	r0, [r3, #0]
 80018b4:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80018b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018bc:	2200      	movs	r2, #0
 80018be:	f004 fbe9 	bl	8006094 <osMessageQueuePut>
	  while(osMessageQueueGetCount(mpu6050_values_queueHandle) == 0){
 80018c2:	e6d9      	b.n	8001678 <task_calculate_motor_values+0x58>
 80018c4:	f3af 8000 	nop.w
 80018c8:	54442d18 	.word	0x54442d18
 80018cc:	400921fb 	.word	0x400921fb
 80018d0:	807d00fa 	.word	0x807d00fa
 80018d4:	3f9f403e 	.word	0x3f9f403e
 80018d8:	3f7e4f76 	.word	0x3f7e4f76
 80018dc:	41400000 	.word	0x41400000
 80018e0:	2000096c 	.word	0x2000096c
 80018e4:	40668000 	.word	0x40668000
 80018e8:	408f4000 	.word	0x408f4000
 80018ec:	447a0000 	.word	0x447a0000
 80018f0:	46033c00 	.word	0x46033c00
 80018f4:	42c80000 	.word	0x42c80000
 80018f8:	08009e30 	.word	0x08009e30
 80018fc:	20000970 	.word	0x20000970

08001900 <task_control_motors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_control_motors */
void task_control_motors(void *argument)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {

	  //wait for a value
	  while(osMessageQueueGetCount(motor_value_queueHandle) == 0){
 8001908:	bf00      	nop
 800190a:	4b15      	ldr	r3, [pc, #84]	@ (8001960 <task_control_motors+0x60>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f004 fc7e 	bl	8006210 <osMessageQueueGetCount>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d0f7      	beq.n	800190a <task_control_motors+0xa>
		  //busy waiting
	  }

	  //get motor value
	  osMessageQueueGet(motor_value_queueHandle, &motor_value, NULL, osWaitForever);
 800191a:	4b11      	ldr	r3, [pc, #68]	@ (8001960 <task_control_motors+0x60>)
 800191c:	6818      	ldr	r0, [r3, #0]
 800191e:	f107 010c 	add.w	r1, r7, #12
 8001922:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001926:	2200      	movs	r2, #0
 8001928:	f004 fc14 	bl	8006154 <osMessageQueueGet>

	  if(motor_value >= 0){
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2b00      	cmp	r3, #0
 8001930:	db09      	blt.n	8001946 <task_control_motors+0x46>
		  motor_control(MOTOR_DIR_FORWARDS, (uint16_t) abs(motor_value));
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2b00      	cmp	r3, #0
 8001936:	bfb8      	it	lt
 8001938:	425b      	neglt	r3, r3
 800193a:	b29b      	uxth	r3, r3
 800193c:	4619      	mov	r1, r3
 800193e:	2000      	movs	r0, #0
 8001940:	f000 f836 	bl	80019b0 <motor_control>
 8001944:	e7e0      	b.n	8001908 <task_control_motors+0x8>
	  }
	  else if(motor_value < 0){
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2b00      	cmp	r3, #0
 800194a:	dadd      	bge.n	8001908 <task_control_motors+0x8>
		  motor_control(MOTOR_DIR_BACKWARDS, (uint16_t) abs(motor_value));
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2b00      	cmp	r3, #0
 8001950:	bfb8      	it	lt
 8001952:	425b      	neglt	r3, r3
 8001954:	b29b      	uxth	r3, r3
 8001956:	4619      	mov	r1, r3
 8001958:	2001      	movs	r0, #1
 800195a:	f000 f829 	bl	80019b0 <motor_control>
	  while(osMessageQueueGetCount(motor_value_queueHandle) == 0){
 800195e:	e7d3      	b.n	8001908 <task_control_motors+0x8>
 8001960:	20000970 	.word	0x20000970

08001964 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a04      	ldr	r2, [pc, #16]	@ (8001984 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d101      	bne.n	800197a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001976:	f000 fca9 	bl	80022cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40001000 	.word	0x40001000

08001988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800198c:	b672      	cpsid	i
}
 800198e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001990:	bf00      	nop
 8001992:	e7fd      	b.n	8001990 <Error_Handler+0x8>

08001994 <motor_init>:


extern TIM_HandleTypeDef htim3;


void motor_init(){
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
	//initialize PWM
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001998:	2100      	movs	r1, #0
 800199a:	4804      	ldr	r0, [pc, #16]	@ (80019ac <motor_init+0x18>)
 800199c:	f003 f808 	bl	80049b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80019a0:	2104      	movs	r1, #4
 80019a2:	4802      	ldr	r0, [pc, #8]	@ (80019ac <motor_init+0x18>)
 80019a4:	f003 f804 	bl	80049b0 <HAL_TIM_PWM_Start>
}
 80019a8:	bf00      	nop
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	200008d0 	.word	0x200008d0

080019b0 <motor_control>:

void motor_control(uint8_t direction, uint16_t speed){
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	460a      	mov	r2, r1
 80019ba:	71fb      	strb	r3, [r7, #7]
 80019bc:	4613      	mov	r3, r2
 80019be:	80bb      	strh	r3, [r7, #4]
  //direction 0=forward, 1=backward, everything else leaves the current direction
  //speed 0=off, 255=max

  //Error Handling
  if(speed<0) speed=0;
  if(speed>MOTOR_MAX_SPEED) speed=MOTOR_MAX_SPEED;
 80019c0:	88bb      	ldrh	r3, [r7, #4]
 80019c2:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d902      	bls.n	80019d0 <motor_control+0x20>
 80019ca:	f242 03cf 	movw	r3, #8399	@ 0x20cf
 80019ce:	80bb      	strh	r3, [r7, #4]

  //set motor direction
  switch(direction){
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d002      	beq.n	80019dc <motor_control+0x2c>
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d00c      	beq.n	80019f4 <motor_control+0x44>
	  HAL_GPIO_WritePin(MOTOR2_DIR_GPIO_Port, MOTOR2_DIR_Pin, GPIO_PIN_SET);
	  HAL_GPIO_WritePin(MOTOR3_DIR_GPIO_Port, MOTOR3_DIR_Pin, GPIO_PIN_SET);
	  break;
  default:
	  //do nothing
	  break;
 80019da:	e017      	b.n	8001a0c <motor_control+0x5c>
	  HAL_GPIO_WritePin(MOTOR2_DIR_GPIO_Port, MOTOR2_DIR_Pin, GPIO_PIN_RESET);
 80019dc:	2200      	movs	r2, #0
 80019de:	2140      	movs	r1, #64	@ 0x40
 80019e0:	4810      	ldr	r0, [pc, #64]	@ (8001a24 <motor_control+0x74>)
 80019e2:	f000 ff2d 	bl	8002840 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(MOTOR3_DIR_GPIO_Port, MOTOR3_DIR_Pin, GPIO_PIN_RESET);
 80019e6:	2200      	movs	r2, #0
 80019e8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019ec:	480d      	ldr	r0, [pc, #52]	@ (8001a24 <motor_control+0x74>)
 80019ee:	f000 ff27 	bl	8002840 <HAL_GPIO_WritePin>
	  break;
 80019f2:	e00b      	b.n	8001a0c <motor_control+0x5c>
	  HAL_GPIO_WritePin(MOTOR2_DIR_GPIO_Port, MOTOR2_DIR_Pin, GPIO_PIN_SET);
 80019f4:	2201      	movs	r2, #1
 80019f6:	2140      	movs	r1, #64	@ 0x40
 80019f8:	480a      	ldr	r0, [pc, #40]	@ (8001a24 <motor_control+0x74>)
 80019fa:	f000 ff21 	bl	8002840 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(MOTOR3_DIR_GPIO_Port, MOTOR3_DIR_Pin, GPIO_PIN_SET);
 80019fe:	2201      	movs	r2, #1
 8001a00:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a04:	4807      	ldr	r0, [pc, #28]	@ (8001a24 <motor_control+0x74>)
 8001a06:	f000 ff1b 	bl	8002840 <HAL_GPIO_WritePin>
	  break;
 8001a0a:	bf00      	nop
  }

  //set motor speed
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, speed);
 8001a0c:	4b06      	ldr	r3, [pc, #24]	@ (8001a28 <motor_control+0x78>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	88ba      	ldrh	r2, [r7, #4]
 8001a12:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, speed);
 8001a14:	4b04      	ldr	r3, [pc, #16]	@ (8001a28 <motor_control+0x78>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	88ba      	ldrh	r2, [r7, #4]
 8001a1a:	639a      	str	r2, [r3, #56]	@ 0x38

}
 8001a1c:	bf00      	nop
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40020000 	.word	0x40020000
 8001a28:	200008d0 	.word	0x200008d0

08001a2c <mpu6050_init>:
#include <string.h>

extern I2C_HandleTypeDef hi2c1;
extern UART_HandleTypeDef huart2;

int mpu6050_init(){
 8001a2c:	b5b0      	push	{r4, r5, r7, lr}
 8001a2e:	b0c6      	sub	sp, #280	@ 0x118
 8001a30:	af04      	add	r7, sp, #16

	uint8_t buff[256] = { 0 };
 8001a32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001a36:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	3304      	adds	r3, #4
 8001a40:	22fc      	movs	r2, #252	@ 0xfc
 8001a42:	2100      	movs	r1, #0
 8001a44:	4618      	mov	r0, r3
 8001a46:	f007 fa0f 	bl	8008e68 <memset>

	//check if MPU is ready
	  if(HAL_I2C_IsDeviceReady(&hi2c1, (DEVICE_ADDRESS<<1) +0, 1, 100) == HAL_OK){
 8001a4a:	2364      	movs	r3, #100	@ 0x64
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	21d0      	movs	r1, #208	@ 0xd0
 8001a50:	48a6      	ldr	r0, [pc, #664]	@ (8001cec <mpu6050_init+0x2c0>)
 8001a52:	f001 fb97 	bl	8003184 <HAL_I2C_IsDeviceReady>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d12f      	bne.n	8001abc <mpu6050_init+0x90>
		  strcpy((char*) buff, "The device is ready\r\n");
 8001a5c:	f107 0308 	add.w	r3, r7, #8
 8001a60:	4aa3      	ldr	r2, [pc, #652]	@ (8001cf0 <mpu6050_init+0x2c4>)
 8001a62:	461c      	mov	r4, r3
 8001a64:	4615      	mov	r5, r2
 8001a66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a6a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a6e:	6020      	str	r0, [r4, #0]
 8001a70:	3404      	adds	r4, #4
 8001a72:	8021      	strh	r1, [r4, #0]
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8001a74:	f107 0308 	add.w	r3, r7, #8
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7fe fbc9 	bl	8000210 <strlen>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	f107 0108 	add.w	r1, r7, #8
 8001a86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a8a:	489a      	ldr	r0, [pc, #616]	@ (8001cf4 <mpu6050_init+0x2c8>)
 8001a8c:	f003 fd94 	bl	80055b8 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
		  return -1;
	  }

	  //configure gyroscope
	  uint8_t gyroscope_range = FS_GYRO_1000;	//set gyroscope range to 500 °/s
 8001a90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001a94:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8001a98:	2210      	movs	r2, #16
 8001a9a:	701a      	strb	r2, [r3, #0]
	  if(HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS<<1) +0, REG_CONFIG_GYRO, 1, &gyroscope_range, sizeof(gyroscope_range), 100) == HAL_OK){
 8001a9c:	2364      	movs	r3, #100	@ 0x64
 8001a9e:	9302      	str	r3, [sp, #8]
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	9301      	str	r3, [sp, #4]
 8001aa4:	1dfb      	adds	r3, r7, #7
 8001aa6:	9300      	str	r3, [sp, #0]
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	221b      	movs	r2, #27
 8001aac:	21d0      	movs	r1, #208	@ 0xd0
 8001aae:	488f      	ldr	r0, [pc, #572]	@ (8001cec <mpu6050_init+0x2c0>)
 8001ab0:	f001 f83c 	bl	8002b2c <HAL_I2C_Mem_Write>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d13c      	bne.n	8001b34 <mpu6050_init+0x108>
 8001aba:	e01d      	b.n	8001af8 <mpu6050_init+0xcc>
		  strcpy((char*) buff, "The device is not ready. Check the cables\r\n");
 8001abc:	f107 0308 	add.w	r3, r7, #8
 8001ac0:	4a8d      	ldr	r2, [pc, #564]	@ (8001cf8 <mpu6050_init+0x2cc>)
 8001ac2:	461c      	mov	r4, r3
 8001ac4:	4615      	mov	r5, r2
 8001ac6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ac8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001aca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001acc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ace:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ad2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8001ad6:	f107 0308 	add.w	r3, r7, #8
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7fe fb98 	bl	8000210 <strlen>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	f107 0108 	add.w	r1, r7, #8
 8001ae8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001aec:	4881      	ldr	r0, [pc, #516]	@ (8001cf4 <mpu6050_init+0x2c8>)
 8001aee:	f003 fd63 	bl	80055b8 <HAL_UART_Transmit>
		  return -1;
 8001af2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001af6:	e0f4      	b.n	8001ce2 <mpu6050_init+0x2b6>
		  strcpy((char*) buff, "gyroscope range successfully set\r\n");
 8001af8:	f107 0308 	add.w	r3, r7, #8
 8001afc:	4a7f      	ldr	r2, [pc, #508]	@ (8001cfc <mpu6050_init+0x2d0>)
 8001afe:	461c      	mov	r4, r3
 8001b00:	4615      	mov	r5, r2
 8001b02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b0a:	682b      	ldr	r3, [r5, #0]
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	8022      	strh	r2, [r4, #0]
 8001b10:	3402      	adds	r4, #2
 8001b12:	0c1b      	lsrs	r3, r3, #16
 8001b14:	7023      	strb	r3, [r4, #0]
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8001b16:	f107 0308 	add.w	r3, r7, #8
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7fe fb78 	bl	8000210 <strlen>
 8001b20:	4603      	mov	r3, r0
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	f107 0108 	add.w	r1, r7, #8
 8001b28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b2c:	4871      	ldr	r0, [pc, #452]	@ (8001cf4 <mpu6050_init+0x2c8>)
 8001b2e:	f003 fd43 	bl	80055b8 <HAL_UART_Transmit>
 8001b32:	e018      	b.n	8001b66 <mpu6050_init+0x13a>
	  }
	  else{
		  strcpy((char*) buff, "failed setting gyroscope range\r\n");
 8001b34:	f107 0308 	add.w	r3, r7, #8
 8001b38:	4a71      	ldr	r2, [pc, #452]	@ (8001d00 <mpu6050_init+0x2d4>)
 8001b3a:	461c      	mov	r4, r3
 8001b3c:	4615      	mov	r5, r2
 8001b3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b46:	682b      	ldr	r3, [r5, #0]
 8001b48:	7023      	strb	r3, [r4, #0]
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8001b4a:	f107 0308 	add.w	r3, r7, #8
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe fb5e 	bl	8000210 <strlen>
 8001b54:	4603      	mov	r3, r0
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	f107 0108 	add.w	r1, r7, #8
 8001b5c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b60:	4864      	ldr	r0, [pc, #400]	@ (8001cf4 <mpu6050_init+0x2c8>)
 8001b62:	f003 fd29 	bl	80055b8 <HAL_UART_Transmit>
	  }

	  //configure accelerometer
	  uint8_t accelerometer_range = FS_ACC_2G;	//set gyroscope range to 500 °/s
 8001b66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001b6a:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 8001b6e:	2200      	movs	r2, #0
 8001b70:	701a      	strb	r2, [r3, #0]
	  if(HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS<<1) +0, REG_CONFIG_ACC, 1, &accelerometer_range, sizeof(accelerometer_range), 100) == HAL_OK){
 8001b72:	2364      	movs	r3, #100	@ 0x64
 8001b74:	9302      	str	r3, [sp, #8]
 8001b76:	2301      	movs	r3, #1
 8001b78:	9301      	str	r3, [sp, #4]
 8001b7a:	1dbb      	adds	r3, r7, #6
 8001b7c:	9300      	str	r3, [sp, #0]
 8001b7e:	2301      	movs	r3, #1
 8001b80:	221c      	movs	r2, #28
 8001b82:	21d0      	movs	r1, #208	@ 0xd0
 8001b84:	4859      	ldr	r0, [pc, #356]	@ (8001cec <mpu6050_init+0x2c0>)
 8001b86:	f000 ffd1 	bl	8002b2c <HAL_I2C_Mem_Write>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d11f      	bne.n	8001bd0 <mpu6050_init+0x1a4>
		  strcpy((char*) buff, "accelerometer range successfully set\r\n");
 8001b90:	f107 0308 	add.w	r3, r7, #8
 8001b94:	4a5b      	ldr	r2, [pc, #364]	@ (8001d04 <mpu6050_init+0x2d8>)
 8001b96:	461c      	mov	r4, r3
 8001b98:	4615      	mov	r5, r2
 8001b9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ba0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ba2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001ba6:	6020      	str	r0, [r4, #0]
 8001ba8:	3404      	adds	r4, #4
 8001baa:	8021      	strh	r1, [r4, #0]
 8001bac:	3402      	adds	r4, #2
 8001bae:	0c0b      	lsrs	r3, r1, #16
 8001bb0:	7023      	strb	r3, [r4, #0]
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8001bb2:	f107 0308 	add.w	r3, r7, #8
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7fe fb2a 	bl	8000210 <strlen>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	f107 0108 	add.w	r1, r7, #8
 8001bc4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bc8:	484a      	ldr	r0, [pc, #296]	@ (8001cf4 <mpu6050_init+0x2c8>)
 8001bca:	f003 fcf5 	bl	80055b8 <HAL_UART_Transmit>
 8001bce:	e01b      	b.n	8001c08 <mpu6050_init+0x1dc>
	  }
	  else{
		  strcpy((char*) buff, "failed setting accelerometer range\r\n");
 8001bd0:	f107 0308 	add.w	r3, r7, #8
 8001bd4:	4a4c      	ldr	r2, [pc, #304]	@ (8001d08 <mpu6050_init+0x2dc>)
 8001bd6:	461c      	mov	r4, r3
 8001bd8:	4615      	mov	r5, r2
 8001bda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001be0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001be2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001be6:	6020      	str	r0, [r4, #0]
 8001be8:	3404      	adds	r4, #4
 8001bea:	7021      	strb	r1, [r4, #0]
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8001bec:	f107 0308 	add.w	r3, r7, #8
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7fe fb0d 	bl	8000210 <strlen>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	f107 0108 	add.w	r1, r7, #8
 8001bfe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c02:	483c      	ldr	r0, [pc, #240]	@ (8001cf4 <mpu6050_init+0x2c8>)
 8001c04:	f003 fcd8 	bl	80055b8 <HAL_UART_Transmit>
	  }

	  //set low pass filter
	  uint8_t lpf_setting = LPF_44;
 8001c08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001c0c:	f2a3 1303 	subw	r3, r3, #259	@ 0x103
 8001c10:	2203      	movs	r2, #3
 8001c12:	701a      	strb	r2, [r3, #0]
	  HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS<<1) +0, REG_LOW_PASS_FILTER, 1, &lpf_setting, sizeof(lpf_setting), 100);
 8001c14:	2364      	movs	r3, #100	@ 0x64
 8001c16:	9302      	str	r3, [sp, #8]
 8001c18:	2301      	movs	r3, #1
 8001c1a:	9301      	str	r3, [sp, #4]
 8001c1c:	1d7b      	adds	r3, r7, #5
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	2301      	movs	r3, #1
 8001c22:	221a      	movs	r2, #26
 8001c24:	21d0      	movs	r1, #208	@ 0xd0
 8001c26:	4831      	ldr	r0, [pc, #196]	@ (8001cec <mpu6050_init+0x2c0>)
 8001c28:	f000 ff80 	bl	8002b2c <HAL_I2C_Mem_Write>

	  //enable interrupt to signal that data is ready to be read
	  uint8_t interrupt_signal = INT_DATA_READY;
 8001c2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001c30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001c34:	2201      	movs	r2, #1
 8001c36:	701a      	strb	r2, [r3, #0]
	  HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS<<1) +0, REG_INTERRUPT, 1, &interrupt_signal, sizeof(interrupt_signal), 100);
 8001c38:	2364      	movs	r3, #100	@ 0x64
 8001c3a:	9302      	str	r3, [sp, #8]
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	9301      	str	r3, [sp, #4]
 8001c40:	1d3b      	adds	r3, r7, #4
 8001c42:	9300      	str	r3, [sp, #0]
 8001c44:	2301      	movs	r3, #1
 8001c46:	2238      	movs	r2, #56	@ 0x38
 8001c48:	21d0      	movs	r1, #208	@ 0xd0
 8001c4a:	4828      	ldr	r0, [pc, #160]	@ (8001cec <mpu6050_init+0x2c0>)
 8001c4c:	f000 ff6e 	bl	8002b2c <HAL_I2C_Mem_Write>

	  //deactivate sleep
	  uint8_t asdf_flags = 0b00001000;	//set the '1' also to '0' if you want the temperature sensor to be enabled
 8001c50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001c54:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 8001c58:	2208      	movs	r2, #8
 8001c5a:	701a      	strb	r2, [r3, #0]
	  if(HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS<<1) +0, REG_USR_CTRL, 1, &asdf_flags, sizeof(asdf_flags), 100) == HAL_OK){
 8001c5c:	2364      	movs	r3, #100	@ 0x64
 8001c5e:	9302      	str	r3, [sp, #8]
 8001c60:	2301      	movs	r3, #1
 8001c62:	9301      	str	r3, [sp, #4]
 8001c64:	1cfb      	adds	r3, r7, #3
 8001c66:	9300      	str	r3, [sp, #0]
 8001c68:	2301      	movs	r3, #1
 8001c6a:	226b      	movs	r2, #107	@ 0x6b
 8001c6c:	21d0      	movs	r1, #208	@ 0xd0
 8001c6e:	481f      	ldr	r0, [pc, #124]	@ (8001cec <mpu6050_init+0x2c0>)
 8001c70:	f000 ff5c 	bl	8002b2c <HAL_I2C_Mem_Write>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d119      	bne.n	8001cae <mpu6050_init+0x282>
		  strcpy((char*) buff, "disablin sleep successfully\r\n");
 8001c7a:	f107 0308 	add.w	r3, r7, #8
 8001c7e:	4a23      	ldr	r2, [pc, #140]	@ (8001d0c <mpu6050_init+0x2e0>)
 8001c80:	461c      	mov	r4, r3
 8001c82:	4615      	mov	r5, r2
 8001c84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c88:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001c8c:	c407      	stmia	r4!, {r0, r1, r2}
 8001c8e:	8023      	strh	r3, [r4, #0]
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8001c90:	f107 0308 	add.w	r3, r7, #8
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7fe fabb 	bl	8000210 <strlen>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	f107 0108 	add.w	r1, r7, #8
 8001ca2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ca6:	4813      	ldr	r0, [pc, #76]	@ (8001cf4 <mpu6050_init+0x2c8>)
 8001ca8:	f003 fc86 	bl	80055b8 <HAL_UART_Transmit>
 8001cac:	e018      	b.n	8001ce0 <mpu6050_init+0x2b4>
	  }
	  else{
		  strcpy((char*) buff, "error disabling sleep\r\n");
 8001cae:	f107 0308 	add.w	r3, r7, #8
 8001cb2:	4a17      	ldr	r2, [pc, #92]	@ (8001d10 <mpu6050_init+0x2e4>)
 8001cb4:	461c      	mov	r4, r3
 8001cb6:	4615      	mov	r5, r2
 8001cb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cbc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001cc0:	e884 0003 	stmia.w	r4, {r0, r1}
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8001cc4:	f107 0308 	add.w	r3, r7, #8
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7fe faa1 	bl	8000210 <strlen>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	f107 0108 	add.w	r1, r7, #8
 8001cd6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001cda:	4806      	ldr	r0, [pc, #24]	@ (8001cf4 <mpu6050_init+0x2c8>)
 8001cdc:	f003 fc6c 	bl	80055b8 <HAL_UART_Transmit>
	  }

	  return 0;
 8001ce0:	2300      	movs	r3, #0

}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bdb0      	pop	{r4, r5, r7, pc}
 8001cec:	2000087c 	.word	0x2000087c
 8001cf0:	08009e44 	.word	0x08009e44
 8001cf4:	20000918 	.word	0x20000918
 8001cf8:	08009e5c 	.word	0x08009e5c
 8001cfc:	08009e88 	.word	0x08009e88
 8001d00:	08009eac 	.word	0x08009eac
 8001d04:	08009ed0 	.word	0x08009ed0
 8001d08:	08009ef8 	.word	0x08009ef8
 8001d0c:	08009f20 	.word	0x08009f20
 8001d10:	08009f40 	.word	0x08009f40

08001d14 <mpu6050_read>:



void mpu6050_read(mpu6050_values_t* values){
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b088      	sub	sp, #32
 8001d18:	af04      	add	r7, sp, #16
 8001d1a:	6078      	str	r0, [r7, #4]

	  uint8_t buff[6] = { 0 };
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60bb      	str	r3, [r7, #8]
 8001d20:	2300      	movs	r3, #0
 8001d22:	81bb      	strh	r3, [r7, #12]
	  HAL_I2C_Mem_Read(&hi2c1, (DEVICE_ADDRESS<<1) +1, REG_ACC_DATA, 1, buff, sizeof(buff), 100);
 8001d24:	2364      	movs	r3, #100	@ 0x64
 8001d26:	9302      	str	r3, [sp, #8]
 8001d28:	2306      	movs	r3, #6
 8001d2a:	9301      	str	r3, [sp, #4]
 8001d2c:	f107 0308 	add.w	r3, r7, #8
 8001d30:	9300      	str	r3, [sp, #0]
 8001d32:	2301      	movs	r3, #1
 8001d34:	223b      	movs	r2, #59	@ 0x3b
 8001d36:	21d1      	movs	r1, #209	@ 0xd1
 8001d38:	4829      	ldr	r0, [pc, #164]	@ (8001de0 <mpu6050_read+0xcc>)
 8001d3a:	f000 fff1 	bl	8002d20 <HAL_I2C_Mem_Read>
	  values->acc_x = (uint16_t) (buff[0]<<8) + buff[1];
 8001d3e:	7a3b      	ldrb	r3, [r7, #8]
 8001d40:	021b      	lsls	r3, r3, #8
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	7a7a      	ldrb	r2, [r7, #9]
 8001d46:	4413      	add	r3, r2
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	b21a      	sxth	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	80da      	strh	r2, [r3, #6]
	  values->acc_y = (uint16_t) (buff[2]<<8) + buff[3];
 8001d50:	7abb      	ldrb	r3, [r7, #10]
 8001d52:	021b      	lsls	r3, r3, #8
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	7afa      	ldrb	r2, [r7, #11]
 8001d58:	4413      	add	r3, r2
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	b21a      	sxth	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	811a      	strh	r2, [r3, #8]
	  values->acc_z = (uint16_t) (buff[4]<<8) + buff[5];
 8001d62:	7b3b      	ldrb	r3, [r7, #12]
 8001d64:	021b      	lsls	r3, r3, #8
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	7b7a      	ldrb	r2, [r7, #13]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	b21a      	sxth	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	815a      	strh	r2, [r3, #10]

	  HAL_I2C_Mem_Read(&hi2c1, (DEVICE_ADDRESS<<1) +1, REG_GYRO_DATA, 1, buff, sizeof(buff), 100);
 8001d74:	2364      	movs	r3, #100	@ 0x64
 8001d76:	9302      	str	r3, [sp, #8]
 8001d78:	2306      	movs	r3, #6
 8001d7a:	9301      	str	r3, [sp, #4]
 8001d7c:	f107 0308 	add.w	r3, r7, #8
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	2301      	movs	r3, #1
 8001d84:	2243      	movs	r2, #67	@ 0x43
 8001d86:	21d1      	movs	r1, #209	@ 0xd1
 8001d88:	4815      	ldr	r0, [pc, #84]	@ (8001de0 <mpu6050_read+0xcc>)
 8001d8a:	f000 ffc9 	bl	8002d20 <HAL_I2C_Mem_Read>
	  values->gyro_x = (uint16_t) (buff[0]<<8) + buff[1];
 8001d8e:	7a3b      	ldrb	r3, [r7, #8]
 8001d90:	021b      	lsls	r3, r3, #8
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	7a7a      	ldrb	r2, [r7, #9]
 8001d96:	4413      	add	r3, r2
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	b21a      	sxth	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	801a      	strh	r2, [r3, #0]
	  values->gyro_y = (uint16_t) (buff[2]<<8) + buff[3];
 8001da0:	7abb      	ldrb	r3, [r7, #10]
 8001da2:	021b      	lsls	r3, r3, #8
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	7afa      	ldrb	r2, [r7, #11]
 8001da8:	4413      	add	r3, r2
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	b21a      	sxth	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	805a      	strh	r2, [r3, #2]
	  values->gyro_z = (uint16_t) (buff[4]<<8) + buff[5];
 8001db2:	7b3b      	ldrb	r3, [r7, #12]
 8001db4:	021b      	lsls	r3, r3, #8
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	7b7a      	ldrb	r2, [r7, #13]
 8001dba:	4413      	add	r3, r2
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	b21a      	sxth	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	809a      	strh	r2, [r3, #4]

	  //apply offsets
	  values->gyro_y += GYRO_Y_OFFSET_1000;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	330c      	adds	r3, #12
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	b21a      	sxth	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	805a      	strh	r2, [r3, #2]

}
 8001dd6:	bf00      	nop
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	2000087c 	.word	0x2000087c

08001de4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	607b      	str	r3, [r7, #4]
 8001dee:	4b12      	ldr	r3, [pc, #72]	@ (8001e38 <HAL_MspInit+0x54>)
 8001df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df2:	4a11      	ldr	r2, [pc, #68]	@ (8001e38 <HAL_MspInit+0x54>)
 8001df4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001df8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dfa:	4b0f      	ldr	r3, [pc, #60]	@ (8001e38 <HAL_MspInit+0x54>)
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e02:	607b      	str	r3, [r7, #4]
 8001e04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	603b      	str	r3, [r7, #0]
 8001e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e38 <HAL_MspInit+0x54>)
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e38 <HAL_MspInit+0x54>)
 8001e10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e14:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e16:	4b08      	ldr	r3, [pc, #32]	@ (8001e38 <HAL_MspInit+0x54>)
 8001e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e1e:	603b      	str	r3, [r7, #0]
 8001e20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e22:	2200      	movs	r2, #0
 8001e24:	210f      	movs	r1, #15
 8001e26:	f06f 0001 	mvn.w	r0, #1
 8001e2a:	f000 fb4b 	bl	80024c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40023800 	.word	0x40023800

08001e3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b08a      	sub	sp, #40	@ 0x28
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e44:	f107 0314 	add.w	r3, r7, #20
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	60da      	str	r2, [r3, #12]
 8001e52:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a19      	ldr	r2, [pc, #100]	@ (8001ec0 <HAL_I2C_MspInit+0x84>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d12c      	bne.n	8001eb8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	613b      	str	r3, [r7, #16]
 8001e62:	4b18      	ldr	r3, [pc, #96]	@ (8001ec4 <HAL_I2C_MspInit+0x88>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e66:	4a17      	ldr	r2, [pc, #92]	@ (8001ec4 <HAL_I2C_MspInit+0x88>)
 8001e68:	f043 0302 	orr.w	r3, r3, #2
 8001e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e6e:	4b15      	ldr	r3, [pc, #84]	@ (8001ec4 <HAL_I2C_MspInit+0x88>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	613b      	str	r3, [r7, #16]
 8001e78:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e7a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001e7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e80:	2312      	movs	r3, #18
 8001e82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e84:	2301      	movs	r3, #1
 8001e86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e8c:	2304      	movs	r3, #4
 8001e8e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e90:	f107 0314 	add.w	r3, r7, #20
 8001e94:	4619      	mov	r1, r3
 8001e96:	480c      	ldr	r0, [pc, #48]	@ (8001ec8 <HAL_I2C_MspInit+0x8c>)
 8001e98:	f000 fb3e 	bl	8002518 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	4b08      	ldr	r3, [pc, #32]	@ (8001ec4 <HAL_I2C_MspInit+0x88>)
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea4:	4a07      	ldr	r2, [pc, #28]	@ (8001ec4 <HAL_I2C_MspInit+0x88>)
 8001ea6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001eaa:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eac:	4b05      	ldr	r3, [pc, #20]	@ (8001ec4 <HAL_I2C_MspInit+0x88>)
 8001eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001eb8:	bf00      	nop
 8001eba:	3728      	adds	r7, #40	@ 0x28
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40005400 	.word	0x40005400
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	40020400 	.word	0x40020400

08001ecc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a0b      	ldr	r2, [pc, #44]	@ (8001f08 <HAL_TIM_PWM_MspInit+0x3c>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d10d      	bne.n	8001efa <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8001f0c <HAL_TIM_PWM_MspInit+0x40>)
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee6:	4a09      	ldr	r2, [pc, #36]	@ (8001f0c <HAL_TIM_PWM_MspInit+0x40>)
 8001ee8:	f043 0302 	orr.w	r3, r3, #2
 8001eec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eee:	4b07      	ldr	r3, [pc, #28]	@ (8001f0c <HAL_TIM_PWM_MspInit+0x40>)
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001efa:	bf00      	nop
 8001efc:	3714      	adds	r7, #20
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	40000400 	.word	0x40000400
 8001f0c:	40023800 	.word	0x40023800

08001f10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08a      	sub	sp, #40	@ 0x28
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f18:	f107 0314 	add.w	r3, r7, #20
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	60da      	str	r2, [r3, #12]
 8001f26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a21      	ldr	r2, [pc, #132]	@ (8001fb4 <HAL_TIM_MspPostInit+0xa4>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d13b      	bne.n	8001faa <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	613b      	str	r3, [r7, #16]
 8001f36:	4b20      	ldr	r3, [pc, #128]	@ (8001fb8 <HAL_TIM_MspPostInit+0xa8>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3a:	4a1f      	ldr	r2, [pc, #124]	@ (8001fb8 <HAL_TIM_MspPostInit+0xa8>)
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f42:	4b1d      	ldr	r3, [pc, #116]	@ (8001fb8 <HAL_TIM_MspPostInit+0xa8>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	613b      	str	r3, [r7, #16]
 8001f4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	4b19      	ldr	r3, [pc, #100]	@ (8001fb8 <HAL_TIM_MspPostInit+0xa8>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f56:	4a18      	ldr	r2, [pc, #96]	@ (8001fb8 <HAL_TIM_MspPostInit+0xa8>)
 8001f58:	f043 0302 	orr.w	r3, r3, #2
 8001f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f5e:	4b16      	ldr	r3, [pc, #88]	@ (8001fb8 <HAL_TIM_MspPostInit+0xa8>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001f6a:	2380      	movs	r3, #128	@ 0x80
 8001f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f76:	2300      	movs	r3, #0
 8001f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f7e:	f107 0314 	add.w	r3, r7, #20
 8001f82:	4619      	mov	r1, r3
 8001f84:	480d      	ldr	r0, [pc, #52]	@ (8001fbc <HAL_TIM_MspPostInit+0xac>)
 8001f86:	f000 fac7 	bl	8002518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f8a:	2310      	movs	r3, #16
 8001f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f96:	2300      	movs	r3, #0
 8001f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f9e:	f107 0314 	add.w	r3, r7, #20
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4806      	ldr	r0, [pc, #24]	@ (8001fc0 <HAL_TIM_MspPostInit+0xb0>)
 8001fa6:	f000 fab7 	bl	8002518 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001faa:	bf00      	nop
 8001fac:	3728      	adds	r7, #40	@ 0x28
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40000400 	.word	0x40000400
 8001fb8:	40023800 	.word	0x40023800
 8001fbc:	40020000 	.word	0x40020000
 8001fc0:	40020400 	.word	0x40020400

08001fc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b08a      	sub	sp, #40	@ 0x28
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fcc:	f107 0314 	add.w	r3, r7, #20
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
 8001fda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a19      	ldr	r2, [pc, #100]	@ (8002048 <HAL_UART_MspInit+0x84>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d12b      	bne.n	800203e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	613b      	str	r3, [r7, #16]
 8001fea:	4b18      	ldr	r3, [pc, #96]	@ (800204c <HAL_UART_MspInit+0x88>)
 8001fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fee:	4a17      	ldr	r2, [pc, #92]	@ (800204c <HAL_UART_MspInit+0x88>)
 8001ff0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ff4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ff6:	4b15      	ldr	r3, [pc, #84]	@ (800204c <HAL_UART_MspInit+0x88>)
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ffe:	613b      	str	r3, [r7, #16]
 8002000:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	4b11      	ldr	r3, [pc, #68]	@ (800204c <HAL_UART_MspInit+0x88>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200a:	4a10      	ldr	r2, [pc, #64]	@ (800204c <HAL_UART_MspInit+0x88>)
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	6313      	str	r3, [r2, #48]	@ 0x30
 8002012:	4b0e      	ldr	r3, [pc, #56]	@ (800204c <HAL_UART_MspInit+0x88>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800201e:	230c      	movs	r3, #12
 8002020:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002022:	2302      	movs	r3, #2
 8002024:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002026:	2300      	movs	r3, #0
 8002028:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202a:	2303      	movs	r3, #3
 800202c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800202e:	2307      	movs	r3, #7
 8002030:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002032:	f107 0314 	add.w	r3, r7, #20
 8002036:	4619      	mov	r1, r3
 8002038:	4805      	ldr	r0, [pc, #20]	@ (8002050 <HAL_UART_MspInit+0x8c>)
 800203a:	f000 fa6d 	bl	8002518 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800203e:	bf00      	nop
 8002040:	3728      	adds	r7, #40	@ 0x28
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40004400 	.word	0x40004400
 800204c:	40023800 	.word	0x40023800
 8002050:	40020000 	.word	0x40020000

08002054 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b08e      	sub	sp, #56	@ 0x38
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800205c:	2300      	movs	r3, #0
 800205e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002060:	2300      	movs	r3, #0
 8002062:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002064:	2300      	movs	r3, #0
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	4b33      	ldr	r3, [pc, #204]	@ (8002138 <HAL_InitTick+0xe4>)
 800206a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206c:	4a32      	ldr	r2, [pc, #200]	@ (8002138 <HAL_InitTick+0xe4>)
 800206e:	f043 0310 	orr.w	r3, r3, #16
 8002072:	6413      	str	r3, [r2, #64]	@ 0x40
 8002074:	4b30      	ldr	r3, [pc, #192]	@ (8002138 <HAL_InitTick+0xe4>)
 8002076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002078:	f003 0310 	and.w	r3, r3, #16
 800207c:	60fb      	str	r3, [r7, #12]
 800207e:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002080:	f107 0210 	add.w	r2, r7, #16
 8002084:	f107 0314 	add.w	r3, r7, #20
 8002088:	4611      	mov	r1, r2
 800208a:	4618      	mov	r0, r3
 800208c:	f001 fe76 	bl	8003d7c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002090:	6a3b      	ldr	r3, [r7, #32]
 8002092:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002096:	2b00      	cmp	r3, #0
 8002098:	d103      	bne.n	80020a2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800209a:	f001 fe47 	bl	8003d2c <HAL_RCC_GetPCLK1Freq>
 800209e:	6378      	str	r0, [r7, #52]	@ 0x34
 80020a0:	e004      	b.n	80020ac <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80020a2:	f001 fe43 	bl	8003d2c <HAL_RCC_GetPCLK1Freq>
 80020a6:	4603      	mov	r3, r0
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80020ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020ae:	4a23      	ldr	r2, [pc, #140]	@ (800213c <HAL_InitTick+0xe8>)
 80020b0:	fba2 2303 	umull	r2, r3, r2, r3
 80020b4:	0c9b      	lsrs	r3, r3, #18
 80020b6:	3b01      	subs	r3, #1
 80020b8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80020ba:	4b21      	ldr	r3, [pc, #132]	@ (8002140 <HAL_InitTick+0xec>)
 80020bc:	4a21      	ldr	r2, [pc, #132]	@ (8002144 <HAL_InitTick+0xf0>)
 80020be:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80020c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002140 <HAL_InitTick+0xec>)
 80020c2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80020c6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80020c8:	4a1d      	ldr	r2, [pc, #116]	@ (8002140 <HAL_InitTick+0xec>)
 80020ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020cc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80020ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002140 <HAL_InitTick+0xec>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002140 <HAL_InitTick+0xec>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020da:	4b19      	ldr	r3, [pc, #100]	@ (8002140 <HAL_InitTick+0xec>)
 80020dc:	2200      	movs	r2, #0
 80020de:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80020e0:	4817      	ldr	r0, [pc, #92]	@ (8002140 <HAL_InitTick+0xec>)
 80020e2:	f002 fb4b 	bl	800477c <HAL_TIM_Base_Init>
 80020e6:	4603      	mov	r3, r0
 80020e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80020ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d11b      	bne.n	800212c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80020f4:	4812      	ldr	r0, [pc, #72]	@ (8002140 <HAL_InitTick+0xec>)
 80020f6:	f002 fb9b 	bl	8004830 <HAL_TIM_Base_Start_IT>
 80020fa:	4603      	mov	r3, r0
 80020fc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002100:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002104:	2b00      	cmp	r3, #0
 8002106:	d111      	bne.n	800212c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002108:	2036      	movs	r0, #54	@ 0x36
 800210a:	f000 f9f7 	bl	80024fc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b0f      	cmp	r3, #15
 8002112:	d808      	bhi.n	8002126 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002114:	2200      	movs	r2, #0
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	2036      	movs	r0, #54	@ 0x36
 800211a:	f000 f9d3 	bl	80024c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800211e:	4a0a      	ldr	r2, [pc, #40]	@ (8002148 <HAL_InitTick+0xf4>)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6013      	str	r3, [r2, #0]
 8002124:	e002      	b.n	800212c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800212c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002130:	4618      	mov	r0, r3
 8002132:	3738      	adds	r7, #56	@ 0x38
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40023800 	.word	0x40023800
 800213c:	431bde83 	.word	0x431bde83
 8002140:	20000978 	.word	0x20000978
 8002144:	40001000 	.word	0x40001000
 8002148:	20000004 	.word	0x20000004

0800214c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002150:	bf00      	nop
 8002152:	e7fd      	b.n	8002150 <NMI_Handler+0x4>

08002154 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002158:	bf00      	nop
 800215a:	e7fd      	b.n	8002158 <HardFault_Handler+0x4>

0800215c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002160:	bf00      	nop
 8002162:	e7fd      	b.n	8002160 <MemManage_Handler+0x4>

08002164 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002168:	bf00      	nop
 800216a:	e7fd      	b.n	8002168 <BusFault_Handler+0x4>

0800216c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002170:	bf00      	nop
 8002172:	e7fd      	b.n	8002170 <UsageFault_Handler+0x4>

08002174 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002178:	bf00      	nop
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MPU6050_INT_Pin);
 8002186:	2020      	movs	r0, #32
 8002188:	f000 fb74 	bl	8002874 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800218c:	bf00      	nop
 800218e:	bd80      	pop	{r7, pc}

08002190 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002194:	4802      	ldr	r0, [pc, #8]	@ (80021a0 <TIM6_DAC_IRQHandler+0x10>)
 8002196:	f002 fcd3 	bl	8004b40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20000978 	.word	0x20000978

080021a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021ac:	4a14      	ldr	r2, [pc, #80]	@ (8002200 <_sbrk+0x5c>)
 80021ae:	4b15      	ldr	r3, [pc, #84]	@ (8002204 <_sbrk+0x60>)
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021b8:	4b13      	ldr	r3, [pc, #76]	@ (8002208 <_sbrk+0x64>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d102      	bne.n	80021c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021c0:	4b11      	ldr	r3, [pc, #68]	@ (8002208 <_sbrk+0x64>)
 80021c2:	4a12      	ldr	r2, [pc, #72]	@ (800220c <_sbrk+0x68>)
 80021c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021c6:	4b10      	ldr	r3, [pc, #64]	@ (8002208 <_sbrk+0x64>)
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4413      	add	r3, r2
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d207      	bcs.n	80021e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021d4:	f006 feba 	bl	8008f4c <__errno>
 80021d8:	4603      	mov	r3, r0
 80021da:	220c      	movs	r2, #12
 80021dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021e2:	e009      	b.n	80021f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021e4:	4b08      	ldr	r3, [pc, #32]	@ (8002208 <_sbrk+0x64>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021ea:	4b07      	ldr	r3, [pc, #28]	@ (8002208 <_sbrk+0x64>)
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4413      	add	r3, r2
 80021f2:	4a05      	ldr	r2, [pc, #20]	@ (8002208 <_sbrk+0x64>)
 80021f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021f6:	68fb      	ldr	r3, [r7, #12]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3718      	adds	r7, #24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	20020000 	.word	0x20020000
 8002204:	00000400 	.word	0x00000400
 8002208:	200009c0 	.word	0x200009c0
 800220c:	200054f8 	.word	0x200054f8

08002210 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002214:	4b06      	ldr	r3, [pc, #24]	@ (8002230 <SystemInit+0x20>)
 8002216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800221a:	4a05      	ldr	r2, [pc, #20]	@ (8002230 <SystemInit+0x20>)
 800221c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002220:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002224:	bf00      	nop
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	e000ed00 	.word	0xe000ed00

08002234 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002234:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800226c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002238:	f7ff ffea 	bl	8002210 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800223c:	480c      	ldr	r0, [pc, #48]	@ (8002270 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800223e:	490d      	ldr	r1, [pc, #52]	@ (8002274 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002240:	4a0d      	ldr	r2, [pc, #52]	@ (8002278 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002242:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002244:	e002      	b.n	800224c <LoopCopyDataInit>

08002246 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002246:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002248:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800224a:	3304      	adds	r3, #4

0800224c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800224c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800224e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002250:	d3f9      	bcc.n	8002246 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002252:	4a0a      	ldr	r2, [pc, #40]	@ (800227c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002254:	4c0a      	ldr	r4, [pc, #40]	@ (8002280 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002256:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002258:	e001      	b.n	800225e <LoopFillZerobss>

0800225a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800225a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800225c:	3204      	adds	r2, #4

0800225e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800225e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002260:	d3fb      	bcc.n	800225a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002262:	f006 fe79 	bl	8008f58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002266:	f7fe fe67 	bl	8000f38 <main>
  bx  lr    
 800226a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800226c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002270:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002274:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002278:	0800a0d8 	.word	0x0800a0d8
  ldr r2, =_sbss
 800227c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002280:	200054f8 	.word	0x200054f8

08002284 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002284:	e7fe      	b.n	8002284 <ADC_IRQHandler>
	...

08002288 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800228c:	4b0e      	ldr	r3, [pc, #56]	@ (80022c8 <HAL_Init+0x40>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a0d      	ldr	r2, [pc, #52]	@ (80022c8 <HAL_Init+0x40>)
 8002292:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002296:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002298:	4b0b      	ldr	r3, [pc, #44]	@ (80022c8 <HAL_Init+0x40>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a0a      	ldr	r2, [pc, #40]	@ (80022c8 <HAL_Init+0x40>)
 800229e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022a4:	4b08      	ldr	r3, [pc, #32]	@ (80022c8 <HAL_Init+0x40>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a07      	ldr	r2, [pc, #28]	@ (80022c8 <HAL_Init+0x40>)
 80022aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022b0:	2003      	movs	r0, #3
 80022b2:	f000 f8fc 	bl	80024ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022b6:	200f      	movs	r0, #15
 80022b8:	f7ff fecc 	bl	8002054 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022bc:	f7ff fd92 	bl	8001de4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40023c00 	.word	0x40023c00

080022cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022d0:	4b06      	ldr	r3, [pc, #24]	@ (80022ec <HAL_IncTick+0x20>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	461a      	mov	r2, r3
 80022d6:	4b06      	ldr	r3, [pc, #24]	@ (80022f0 <HAL_IncTick+0x24>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4413      	add	r3, r2
 80022dc:	4a04      	ldr	r2, [pc, #16]	@ (80022f0 <HAL_IncTick+0x24>)
 80022de:	6013      	str	r3, [r2, #0]
}
 80022e0:	bf00      	nop
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	20000008 	.word	0x20000008
 80022f0:	200009c4 	.word	0x200009c4

080022f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  return uwTick;
 80022f8:	4b03      	ldr	r3, [pc, #12]	@ (8002308 <HAL_GetTick+0x14>)
 80022fa:	681b      	ldr	r3, [r3, #0]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	200009c4 	.word	0x200009c4

0800230c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002314:	f7ff ffee 	bl	80022f4 <HAL_GetTick>
 8002318:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002324:	d005      	beq.n	8002332 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002326:	4b0a      	ldr	r3, [pc, #40]	@ (8002350 <HAL_Delay+0x44>)
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	461a      	mov	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	4413      	add	r3, r2
 8002330:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002332:	bf00      	nop
 8002334:	f7ff ffde 	bl	80022f4 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	429a      	cmp	r2, r3
 8002342:	d8f7      	bhi.n	8002334 <HAL_Delay+0x28>
  {
  }
}
 8002344:	bf00      	nop
 8002346:	bf00      	nop
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	20000008 	.word	0x20000008

08002354 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002364:	4b0c      	ldr	r3, [pc, #48]	@ (8002398 <__NVIC_SetPriorityGrouping+0x44>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002370:	4013      	ands	r3, r2
 8002372:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800237c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002380:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002384:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002386:	4a04      	ldr	r2, [pc, #16]	@ (8002398 <__NVIC_SetPriorityGrouping+0x44>)
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	60d3      	str	r3, [r2, #12]
}
 800238c:	bf00      	nop
 800238e:	3714      	adds	r7, #20
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	e000ed00 	.word	0xe000ed00

0800239c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023a0:	4b04      	ldr	r3, [pc, #16]	@ (80023b4 <__NVIC_GetPriorityGrouping+0x18>)
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	0a1b      	lsrs	r3, r3, #8
 80023a6:	f003 0307 	and.w	r3, r3, #7
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	e000ed00 	.word	0xe000ed00

080023b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	db0b      	blt.n	80023e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ca:	79fb      	ldrb	r3, [r7, #7]
 80023cc:	f003 021f 	and.w	r2, r3, #31
 80023d0:	4907      	ldr	r1, [pc, #28]	@ (80023f0 <__NVIC_EnableIRQ+0x38>)
 80023d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d6:	095b      	lsrs	r3, r3, #5
 80023d8:	2001      	movs	r0, #1
 80023da:	fa00 f202 	lsl.w	r2, r0, r2
 80023de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023e2:	bf00      	nop
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	e000e100 	.word	0xe000e100

080023f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4603      	mov	r3, r0
 80023fc:	6039      	str	r1, [r7, #0]
 80023fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002404:	2b00      	cmp	r3, #0
 8002406:	db0a      	blt.n	800241e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	b2da      	uxtb	r2, r3
 800240c:	490c      	ldr	r1, [pc, #48]	@ (8002440 <__NVIC_SetPriority+0x4c>)
 800240e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002412:	0112      	lsls	r2, r2, #4
 8002414:	b2d2      	uxtb	r2, r2
 8002416:	440b      	add	r3, r1
 8002418:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800241c:	e00a      	b.n	8002434 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	b2da      	uxtb	r2, r3
 8002422:	4908      	ldr	r1, [pc, #32]	@ (8002444 <__NVIC_SetPriority+0x50>)
 8002424:	79fb      	ldrb	r3, [r7, #7]
 8002426:	f003 030f 	and.w	r3, r3, #15
 800242a:	3b04      	subs	r3, #4
 800242c:	0112      	lsls	r2, r2, #4
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	440b      	add	r3, r1
 8002432:	761a      	strb	r2, [r3, #24]
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	e000e100 	.word	0xe000e100
 8002444:	e000ed00 	.word	0xe000ed00

08002448 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002448:	b480      	push	{r7}
 800244a:	b089      	sub	sp, #36	@ 0x24
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	f1c3 0307 	rsb	r3, r3, #7
 8002462:	2b04      	cmp	r3, #4
 8002464:	bf28      	it	cs
 8002466:	2304      	movcs	r3, #4
 8002468:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	3304      	adds	r3, #4
 800246e:	2b06      	cmp	r3, #6
 8002470:	d902      	bls.n	8002478 <NVIC_EncodePriority+0x30>
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	3b03      	subs	r3, #3
 8002476:	e000      	b.n	800247a <NVIC_EncodePriority+0x32>
 8002478:	2300      	movs	r3, #0
 800247a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800247c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	43da      	mvns	r2, r3
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	401a      	ands	r2, r3
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002490:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	fa01 f303 	lsl.w	r3, r1, r3
 800249a:	43d9      	mvns	r1, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a0:	4313      	orrs	r3, r2
         );
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3724      	adds	r7, #36	@ 0x24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b082      	sub	sp, #8
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7ff ff4c 	bl	8002354 <__NVIC_SetPriorityGrouping>
}
 80024bc:	bf00      	nop
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4603      	mov	r3, r0
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
 80024d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024d2:	2300      	movs	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024d6:	f7ff ff61 	bl	800239c <__NVIC_GetPriorityGrouping>
 80024da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	68b9      	ldr	r1, [r7, #8]
 80024e0:	6978      	ldr	r0, [r7, #20]
 80024e2:	f7ff ffb1 	bl	8002448 <NVIC_EncodePriority>
 80024e6:	4602      	mov	r2, r0
 80024e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ec:	4611      	mov	r1, r2
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff ff80 	bl	80023f4 <__NVIC_SetPriority>
}
 80024f4:	bf00      	nop
 80024f6:	3718      	adds	r7, #24
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	4603      	mov	r3, r0
 8002504:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff ff54 	bl	80023b8 <__NVIC_EnableIRQ>
}
 8002510:	bf00      	nop
 8002512:	3708      	adds	r7, #8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002518:	b480      	push	{r7}
 800251a:	b089      	sub	sp, #36	@ 0x24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002522:	2300      	movs	r3, #0
 8002524:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002526:	2300      	movs	r3, #0
 8002528:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800252a:	2300      	movs	r3, #0
 800252c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800252e:	2300      	movs	r3, #0
 8002530:	61fb      	str	r3, [r7, #28]
 8002532:	e165      	b.n	8002800 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002534:	2201      	movs	r2, #1
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	4013      	ands	r3, r2
 8002546:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	429a      	cmp	r2, r3
 800254e:	f040 8154 	bne.w	80027fa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f003 0303 	and.w	r3, r3, #3
 800255a:	2b01      	cmp	r3, #1
 800255c:	d005      	beq.n	800256a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002566:	2b02      	cmp	r3, #2
 8002568:	d130      	bne.n	80025cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	2203      	movs	r2, #3
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	43db      	mvns	r3, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4013      	ands	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	68da      	ldr	r2, [r3, #12]
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4313      	orrs	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025a0:	2201      	movs	r2, #1
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4013      	ands	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	091b      	lsrs	r3, r3, #4
 80025b6:	f003 0201 	and.w	r2, r3, #1
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f003 0303 	and.w	r3, r3, #3
 80025d4:	2b03      	cmp	r3, #3
 80025d6:	d017      	beq.n	8002608 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	2203      	movs	r2, #3
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	43db      	mvns	r3, r3
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4013      	ands	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 0303 	and.w	r3, r3, #3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d123      	bne.n	800265c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	08da      	lsrs	r2, r3, #3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3208      	adds	r2, #8
 800261c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002620:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	f003 0307 	and.w	r3, r3, #7
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	220f      	movs	r2, #15
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	43db      	mvns	r3, r3
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	4013      	ands	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	691a      	ldr	r2, [r3, #16]
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4313      	orrs	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	08da      	lsrs	r2, r3, #3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	3208      	adds	r2, #8
 8002656:	69b9      	ldr	r1, [r7, #24]
 8002658:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	2203      	movs	r2, #3
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	43db      	mvns	r3, r3
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4013      	ands	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f003 0203 	and.w	r2, r3, #3
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4313      	orrs	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002698:	2b00      	cmp	r3, #0
 800269a:	f000 80ae 	beq.w	80027fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	4b5d      	ldr	r3, [pc, #372]	@ (8002818 <HAL_GPIO_Init+0x300>)
 80026a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026a6:	4a5c      	ldr	r2, [pc, #368]	@ (8002818 <HAL_GPIO_Init+0x300>)
 80026a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80026ae:	4b5a      	ldr	r3, [pc, #360]	@ (8002818 <HAL_GPIO_Init+0x300>)
 80026b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026ba:	4a58      	ldr	r2, [pc, #352]	@ (800281c <HAL_GPIO_Init+0x304>)
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	089b      	lsrs	r3, r3, #2
 80026c0:	3302      	adds	r3, #2
 80026c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	f003 0303 	and.w	r3, r3, #3
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	220f      	movs	r2, #15
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43db      	mvns	r3, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4013      	ands	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a4f      	ldr	r2, [pc, #316]	@ (8002820 <HAL_GPIO_Init+0x308>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d025      	beq.n	8002732 <HAL_GPIO_Init+0x21a>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a4e      	ldr	r2, [pc, #312]	@ (8002824 <HAL_GPIO_Init+0x30c>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d01f      	beq.n	800272e <HAL_GPIO_Init+0x216>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a4d      	ldr	r2, [pc, #308]	@ (8002828 <HAL_GPIO_Init+0x310>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d019      	beq.n	800272a <HAL_GPIO_Init+0x212>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a4c      	ldr	r2, [pc, #304]	@ (800282c <HAL_GPIO_Init+0x314>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d013      	beq.n	8002726 <HAL_GPIO_Init+0x20e>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a4b      	ldr	r2, [pc, #300]	@ (8002830 <HAL_GPIO_Init+0x318>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d00d      	beq.n	8002722 <HAL_GPIO_Init+0x20a>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a4a      	ldr	r2, [pc, #296]	@ (8002834 <HAL_GPIO_Init+0x31c>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d007      	beq.n	800271e <HAL_GPIO_Init+0x206>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a49      	ldr	r2, [pc, #292]	@ (8002838 <HAL_GPIO_Init+0x320>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d101      	bne.n	800271a <HAL_GPIO_Init+0x202>
 8002716:	2306      	movs	r3, #6
 8002718:	e00c      	b.n	8002734 <HAL_GPIO_Init+0x21c>
 800271a:	2307      	movs	r3, #7
 800271c:	e00a      	b.n	8002734 <HAL_GPIO_Init+0x21c>
 800271e:	2305      	movs	r3, #5
 8002720:	e008      	b.n	8002734 <HAL_GPIO_Init+0x21c>
 8002722:	2304      	movs	r3, #4
 8002724:	e006      	b.n	8002734 <HAL_GPIO_Init+0x21c>
 8002726:	2303      	movs	r3, #3
 8002728:	e004      	b.n	8002734 <HAL_GPIO_Init+0x21c>
 800272a:	2302      	movs	r3, #2
 800272c:	e002      	b.n	8002734 <HAL_GPIO_Init+0x21c>
 800272e:	2301      	movs	r3, #1
 8002730:	e000      	b.n	8002734 <HAL_GPIO_Init+0x21c>
 8002732:	2300      	movs	r3, #0
 8002734:	69fa      	ldr	r2, [r7, #28]
 8002736:	f002 0203 	and.w	r2, r2, #3
 800273a:	0092      	lsls	r2, r2, #2
 800273c:	4093      	lsls	r3, r2
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4313      	orrs	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002744:	4935      	ldr	r1, [pc, #212]	@ (800281c <HAL_GPIO_Init+0x304>)
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	089b      	lsrs	r3, r3, #2
 800274a:	3302      	adds	r3, #2
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002752:	4b3a      	ldr	r3, [pc, #232]	@ (800283c <HAL_GPIO_Init+0x324>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	43db      	mvns	r3, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4013      	ands	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	4313      	orrs	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002776:	4a31      	ldr	r2, [pc, #196]	@ (800283c <HAL_GPIO_Init+0x324>)
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800277c:	4b2f      	ldr	r3, [pc, #188]	@ (800283c <HAL_GPIO_Init+0x324>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	43db      	mvns	r3, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4013      	ands	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d003      	beq.n	80027a0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	4313      	orrs	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027a0:	4a26      	ldr	r2, [pc, #152]	@ (800283c <HAL_GPIO_Init+0x324>)
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027a6:	4b25      	ldr	r3, [pc, #148]	@ (800283c <HAL_GPIO_Init+0x324>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	43db      	mvns	r3, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4013      	ands	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027ca:	4a1c      	ldr	r2, [pc, #112]	@ (800283c <HAL_GPIO_Init+0x324>)
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027d0:	4b1a      	ldr	r3, [pc, #104]	@ (800283c <HAL_GPIO_Init+0x324>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	43db      	mvns	r3, r3
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	4013      	ands	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d003      	beq.n	80027f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027f4:	4a11      	ldr	r2, [pc, #68]	@ (800283c <HAL_GPIO_Init+0x324>)
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	3301      	adds	r3, #1
 80027fe:	61fb      	str	r3, [r7, #28]
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	2b0f      	cmp	r3, #15
 8002804:	f67f ae96 	bls.w	8002534 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002808:	bf00      	nop
 800280a:	bf00      	nop
 800280c:	3724      	adds	r7, #36	@ 0x24
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	40023800 	.word	0x40023800
 800281c:	40013800 	.word	0x40013800
 8002820:	40020000 	.word	0x40020000
 8002824:	40020400 	.word	0x40020400
 8002828:	40020800 	.word	0x40020800
 800282c:	40020c00 	.word	0x40020c00
 8002830:	40021000 	.word	0x40021000
 8002834:	40021400 	.word	0x40021400
 8002838:	40021800 	.word	0x40021800
 800283c:	40013c00 	.word	0x40013c00

08002840 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	460b      	mov	r3, r1
 800284a:	807b      	strh	r3, [r7, #2]
 800284c:	4613      	mov	r3, r2
 800284e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002850:	787b      	ldrb	r3, [r7, #1]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002856:	887a      	ldrh	r2, [r7, #2]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800285c:	e003      	b.n	8002866 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800285e:	887b      	ldrh	r3, [r7, #2]
 8002860:	041a      	lsls	r2, r3, #16
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	619a      	str	r2, [r3, #24]
}
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
	...

08002874 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800287e:	4b08      	ldr	r3, [pc, #32]	@ (80028a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002880:	695a      	ldr	r2, [r3, #20]
 8002882:	88fb      	ldrh	r3, [r7, #6]
 8002884:	4013      	ands	r3, r2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d006      	beq.n	8002898 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800288a:	4a05      	ldr	r2, [pc, #20]	@ (80028a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800288c:	88fb      	ldrh	r3, [r7, #6]
 800288e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002890:	88fb      	ldrh	r3, [r7, #6]
 8002892:	4618      	mov	r0, r3
 8002894:	f7fe fe46 	bl	8001524 <HAL_GPIO_EXTI_Callback>
  }
}
 8002898:	bf00      	nop
 800289a:	3708      	adds	r7, #8
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40013c00 	.word	0x40013c00

080028a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e12b      	b.n	8002b0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d106      	bne.n	80028d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7ff fab6 	bl	8001e3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2224      	movs	r2, #36	@ 0x24
 80028d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 0201 	bic.w	r2, r2, #1
 80028e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80028f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002906:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002908:	f001 fa10 	bl	8003d2c <HAL_RCC_GetPCLK1Freq>
 800290c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	4a81      	ldr	r2, [pc, #516]	@ (8002b18 <HAL_I2C_Init+0x274>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d807      	bhi.n	8002928 <HAL_I2C_Init+0x84>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	4a80      	ldr	r2, [pc, #512]	@ (8002b1c <HAL_I2C_Init+0x278>)
 800291c:	4293      	cmp	r3, r2
 800291e:	bf94      	ite	ls
 8002920:	2301      	movls	r3, #1
 8002922:	2300      	movhi	r3, #0
 8002924:	b2db      	uxtb	r3, r3
 8002926:	e006      	b.n	8002936 <HAL_I2C_Init+0x92>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	4a7d      	ldr	r2, [pc, #500]	@ (8002b20 <HAL_I2C_Init+0x27c>)
 800292c:	4293      	cmp	r3, r2
 800292e:	bf94      	ite	ls
 8002930:	2301      	movls	r3, #1
 8002932:	2300      	movhi	r3, #0
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e0e7      	b.n	8002b0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	4a78      	ldr	r2, [pc, #480]	@ (8002b24 <HAL_I2C_Init+0x280>)
 8002942:	fba2 2303 	umull	r2, r3, r2, r3
 8002946:	0c9b      	lsrs	r3, r3, #18
 8002948:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68ba      	ldr	r2, [r7, #8]
 800295a:	430a      	orrs	r2, r1
 800295c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	4a6a      	ldr	r2, [pc, #424]	@ (8002b18 <HAL_I2C_Init+0x274>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d802      	bhi.n	8002978 <HAL_I2C_Init+0xd4>
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	3301      	adds	r3, #1
 8002976:	e009      	b.n	800298c <HAL_I2C_Init+0xe8>
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800297e:	fb02 f303 	mul.w	r3, r2, r3
 8002982:	4a69      	ldr	r2, [pc, #420]	@ (8002b28 <HAL_I2C_Init+0x284>)
 8002984:	fba2 2303 	umull	r2, r3, r2, r3
 8002988:	099b      	lsrs	r3, r3, #6
 800298a:	3301      	adds	r3, #1
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	6812      	ldr	r2, [r2, #0]
 8002990:	430b      	orrs	r3, r1
 8002992:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800299e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	495c      	ldr	r1, [pc, #368]	@ (8002b18 <HAL_I2C_Init+0x274>)
 80029a8:	428b      	cmp	r3, r1
 80029aa:	d819      	bhi.n	80029e0 <HAL_I2C_Init+0x13c>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	1e59      	subs	r1, r3, #1
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80029ba:	1c59      	adds	r1, r3, #1
 80029bc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80029c0:	400b      	ands	r3, r1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00a      	beq.n	80029dc <HAL_I2C_Init+0x138>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	1e59      	subs	r1, r3, #1
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80029d4:	3301      	adds	r3, #1
 80029d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029da:	e051      	b.n	8002a80 <HAL_I2C_Init+0x1dc>
 80029dc:	2304      	movs	r3, #4
 80029de:	e04f      	b.n	8002a80 <HAL_I2C_Init+0x1dc>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d111      	bne.n	8002a0c <HAL_I2C_Init+0x168>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	1e58      	subs	r0, r3, #1
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6859      	ldr	r1, [r3, #4]
 80029f0:	460b      	mov	r3, r1
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	440b      	add	r3, r1
 80029f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80029fa:	3301      	adds	r3, #1
 80029fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	bf0c      	ite	eq
 8002a04:	2301      	moveq	r3, #1
 8002a06:	2300      	movne	r3, #0
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	e012      	b.n	8002a32 <HAL_I2C_Init+0x18e>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	1e58      	subs	r0, r3, #1
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6859      	ldr	r1, [r3, #4]
 8002a14:	460b      	mov	r3, r1
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	440b      	add	r3, r1
 8002a1a:	0099      	lsls	r1, r3, #2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a22:	3301      	adds	r3, #1
 8002a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	bf0c      	ite	eq
 8002a2c:	2301      	moveq	r3, #1
 8002a2e:	2300      	movne	r3, #0
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <HAL_I2C_Init+0x196>
 8002a36:	2301      	movs	r3, #1
 8002a38:	e022      	b.n	8002a80 <HAL_I2C_Init+0x1dc>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10e      	bne.n	8002a60 <HAL_I2C_Init+0x1bc>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	1e58      	subs	r0, r3, #1
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6859      	ldr	r1, [r3, #4]
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	440b      	add	r3, r1
 8002a50:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a54:	3301      	adds	r3, #1
 8002a56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a5e:	e00f      	b.n	8002a80 <HAL_I2C_Init+0x1dc>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	1e58      	subs	r0, r3, #1
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6859      	ldr	r1, [r3, #4]
 8002a68:	460b      	mov	r3, r1
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	0099      	lsls	r1, r3, #2
 8002a70:	440b      	add	r3, r1
 8002a72:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a76:	3301      	adds	r3, #1
 8002a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a7c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a80:	6879      	ldr	r1, [r7, #4]
 8002a82:	6809      	ldr	r1, [r1, #0]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	69da      	ldr	r2, [r3, #28]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002aae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	6911      	ldr	r1, [r2, #16]
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	68d2      	ldr	r2, [r2, #12]
 8002aba:	4311      	orrs	r1, r2
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6812      	ldr	r2, [r2, #0]
 8002ac0:	430b      	orrs	r3, r1
 8002ac2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	695a      	ldr	r2, [r3, #20]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	430a      	orrs	r2, r1
 8002ade:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f042 0201 	orr.w	r2, r2, #1
 8002aee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2220      	movs	r2, #32
 8002afa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	000186a0 	.word	0x000186a0
 8002b1c:	001e847f 	.word	0x001e847f
 8002b20:	003d08ff 	.word	0x003d08ff
 8002b24:	431bde83 	.word	0x431bde83
 8002b28:	10624dd3 	.word	0x10624dd3

08002b2c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b088      	sub	sp, #32
 8002b30:	af02      	add	r7, sp, #8
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	4608      	mov	r0, r1
 8002b36:	4611      	mov	r1, r2
 8002b38:	461a      	mov	r2, r3
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	817b      	strh	r3, [r7, #10]
 8002b3e:	460b      	mov	r3, r1
 8002b40:	813b      	strh	r3, [r7, #8]
 8002b42:	4613      	mov	r3, r2
 8002b44:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b46:	f7ff fbd5 	bl	80022f4 <HAL_GetTick>
 8002b4a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b20      	cmp	r3, #32
 8002b56:	f040 80d9 	bne.w	8002d0c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	9300      	str	r3, [sp, #0]
 8002b5e:	2319      	movs	r3, #25
 8002b60:	2201      	movs	r2, #1
 8002b62:	496d      	ldr	r1, [pc, #436]	@ (8002d18 <HAL_I2C_Mem_Write+0x1ec>)
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	f000 fdb9 	bl	80036dc <I2C_WaitOnFlagUntilTimeout>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002b70:	2302      	movs	r3, #2
 8002b72:	e0cc      	b.n	8002d0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d101      	bne.n	8002b82 <HAL_I2C_Mem_Write+0x56>
 8002b7e:	2302      	movs	r3, #2
 8002b80:	e0c5      	b.n	8002d0e <HAL_I2C_Mem_Write+0x1e2>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d007      	beq.n	8002ba8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 0201 	orr.w	r2, r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bb6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2221      	movs	r2, #33	@ 0x21
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2240      	movs	r2, #64	@ 0x40
 8002bc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6a3a      	ldr	r2, [r7, #32]
 8002bd2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002bd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	4a4d      	ldr	r2, [pc, #308]	@ (8002d1c <HAL_I2C_Mem_Write+0x1f0>)
 8002be8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bea:	88f8      	ldrh	r0, [r7, #6]
 8002bec:	893a      	ldrh	r2, [r7, #8]
 8002bee:	8979      	ldrh	r1, [r7, #10]
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	9301      	str	r3, [sp, #4]
 8002bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bf6:	9300      	str	r3, [sp, #0]
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f000 fbf0 	bl	80033e0 <I2C_RequestMemoryWrite>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d052      	beq.n	8002cac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e081      	b.n	8002d0e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 fe7e 	bl	8003910 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00d      	beq.n	8002c36 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	d107      	bne.n	8002c32 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e06b      	b.n	8002d0e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c3a:	781a      	ldrb	r2, [r3, #0]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c46:	1c5a      	adds	r2, r3, #1
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c50:	3b01      	subs	r3, #1
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	f003 0304 	and.w	r3, r3, #4
 8002c70:	2b04      	cmp	r3, #4
 8002c72:	d11b      	bne.n	8002cac <HAL_I2C_Mem_Write+0x180>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d017      	beq.n	8002cac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c80:	781a      	ldrb	r2, [r3, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8c:	1c5a      	adds	r2, r3, #1
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c96:	3b01      	subs	r3, #1
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1aa      	bne.n	8002c0a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 fe71 	bl	80039a0 <I2C_WaitOnBTFFlagUntilTimeout>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00d      	beq.n	8002ce0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc8:	2b04      	cmp	r3, #4
 8002cca:	d107      	bne.n	8002cdc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cda:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e016      	b.n	8002d0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	e000      	b.n	8002d0e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002d0c:	2302      	movs	r3, #2
  }
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3718      	adds	r7, #24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	00100002 	.word	0x00100002
 8002d1c:	ffff0000 	.word	0xffff0000

08002d20 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b08c      	sub	sp, #48	@ 0x30
 8002d24:	af02      	add	r7, sp, #8
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	4608      	mov	r0, r1
 8002d2a:	4611      	mov	r1, r2
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	4603      	mov	r3, r0
 8002d30:	817b      	strh	r3, [r7, #10]
 8002d32:	460b      	mov	r3, r1
 8002d34:	813b      	strh	r3, [r7, #8]
 8002d36:	4613      	mov	r3, r2
 8002d38:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d3a:	f7ff fadb 	bl	80022f4 <HAL_GetTick>
 8002d3e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b20      	cmp	r3, #32
 8002d4a:	f040 8214 	bne.w	8003176 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	2319      	movs	r3, #25
 8002d54:	2201      	movs	r2, #1
 8002d56:	497b      	ldr	r1, [pc, #492]	@ (8002f44 <HAL_I2C_Mem_Read+0x224>)
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f000 fcbf 	bl	80036dc <I2C_WaitOnFlagUntilTimeout>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002d64:	2302      	movs	r3, #2
 8002d66:	e207      	b.n	8003178 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d101      	bne.n	8002d76 <HAL_I2C_Mem_Read+0x56>
 8002d72:	2302      	movs	r3, #2
 8002d74:	e200      	b.n	8003178 <HAL_I2C_Mem_Read+0x458>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d007      	beq.n	8002d9c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f042 0201 	orr.w	r2, r2, #1
 8002d9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002daa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2222      	movs	r2, #34	@ 0x22
 8002db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2240      	movs	r2, #64	@ 0x40
 8002db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dc6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002dcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	4a5b      	ldr	r2, [pc, #364]	@ (8002f48 <HAL_I2C_Mem_Read+0x228>)
 8002ddc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002dde:	88f8      	ldrh	r0, [r7, #6]
 8002de0:	893a      	ldrh	r2, [r7, #8]
 8002de2:	8979      	ldrh	r1, [r7, #10]
 8002de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de6:	9301      	str	r3, [sp, #4]
 8002de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	4603      	mov	r3, r0
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f000 fb8c 	bl	800350c <I2C_RequestMemoryRead>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e1bc      	b.n	8003178 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d113      	bne.n	8002e2e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e06:	2300      	movs	r3, #0
 8002e08:	623b      	str	r3, [r7, #32]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	623b      	str	r3, [r7, #32]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	623b      	str	r3, [r7, #32]
 8002e1a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	e190      	b.n	8003150 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d11b      	bne.n	8002e6e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e46:	2300      	movs	r3, #0
 8002e48:	61fb      	str	r3, [r7, #28]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	61fb      	str	r3, [r7, #28]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	61fb      	str	r3, [r7, #28]
 8002e5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	e170      	b.n	8003150 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d11b      	bne.n	8002eae <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e84:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e96:	2300      	movs	r3, #0
 8002e98:	61bb      	str	r3, [r7, #24]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	61bb      	str	r3, [r7, #24]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	61bb      	str	r3, [r7, #24]
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	e150      	b.n	8003150 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eae:	2300      	movs	r3, #0
 8002eb0:	617b      	str	r3, [r7, #20]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	617b      	str	r3, [r7, #20]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	617b      	str	r3, [r7, #20]
 8002ec2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002ec4:	e144      	b.n	8003150 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eca:	2b03      	cmp	r3, #3
 8002ecc:	f200 80f1 	bhi.w	80030b2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d123      	bne.n	8002f20 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ed8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eda:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f000 fda7 	bl	8003a30 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e145      	b.n	8003178 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	691a      	ldr	r2, [r3, #16]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef6:	b2d2      	uxtb	r2, r2
 8002ef8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efe:	1c5a      	adds	r2, r3, #1
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	3b01      	subs	r3, #1
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f1e:	e117      	b.n	8003150 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d14e      	bne.n	8002fc6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f2e:	2200      	movs	r2, #0
 8002f30:	4906      	ldr	r1, [pc, #24]	@ (8002f4c <HAL_I2C_Mem_Read+0x22c>)
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f000 fbd2 	bl	80036dc <I2C_WaitOnFlagUntilTimeout>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d008      	beq.n	8002f50 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e11a      	b.n	8003178 <HAL_I2C_Mem_Read+0x458>
 8002f42:	bf00      	nop
 8002f44:	00100002 	.word	0x00100002
 8002f48:	ffff0000 	.word	0xffff0000
 8002f4c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	691a      	ldr	r2, [r3, #16]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6a:	b2d2      	uxtb	r2, r2
 8002f6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f72:	1c5a      	adds	r2, r3, #1
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	691a      	ldr	r2, [r3, #16]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002fc4:	e0c4      	b.n	8003150 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fcc:	2200      	movs	r2, #0
 8002fce:	496c      	ldr	r1, [pc, #432]	@ (8003180 <HAL_I2C_Mem_Read+0x460>)
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f000 fb83 	bl	80036dc <I2C_WaitOnFlagUntilTimeout>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e0cb      	b.n	8003178 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	691a      	ldr	r2, [r3, #16]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffa:	b2d2      	uxtb	r2, r2
 8002ffc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003002:	1c5a      	adds	r2, r3, #1
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800300c:	3b01      	subs	r3, #1
 800300e:	b29a      	uxth	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003018:	b29b      	uxth	r3, r3
 800301a:	3b01      	subs	r3, #1
 800301c:	b29a      	uxth	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003024:	9300      	str	r3, [sp, #0]
 8003026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003028:	2200      	movs	r2, #0
 800302a:	4955      	ldr	r1, [pc, #340]	@ (8003180 <HAL_I2C_Mem_Read+0x460>)
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f000 fb55 	bl	80036dc <I2C_WaitOnFlagUntilTimeout>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e09d      	b.n	8003178 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800304a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	691a      	ldr	r2, [r3, #16]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305e:	1c5a      	adds	r2, r3, #1
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003068:	3b01      	subs	r3, #1
 800306a:	b29a      	uxth	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003074:	b29b      	uxth	r3, r3
 8003076:	3b01      	subs	r3, #1
 8003078:	b29a      	uxth	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	691a      	ldr	r2, [r3, #16]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003088:	b2d2      	uxtb	r2, r2
 800308a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003090:	1c5a      	adds	r2, r3, #1
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800309a:	3b01      	subs	r3, #1
 800309c:	b29a      	uxth	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	3b01      	subs	r3, #1
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80030b0:	e04e      	b.n	8003150 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030b4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f000 fcba 	bl	8003a30 <I2C_WaitOnRXNEFlagUntilTimeout>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e058      	b.n	8003178 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	691a      	ldr	r2, [r3, #16]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d0:	b2d2      	uxtb	r2, r2
 80030d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d8:	1c5a      	adds	r2, r3, #1
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030e2:	3b01      	subs	r3, #1
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	3b01      	subs	r3, #1
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	f003 0304 	and.w	r3, r3, #4
 8003102:	2b04      	cmp	r3, #4
 8003104:	d124      	bne.n	8003150 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800310a:	2b03      	cmp	r3, #3
 800310c:	d107      	bne.n	800311e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800311c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	691a      	ldr	r2, [r3, #16]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003128:	b2d2      	uxtb	r2, r2
 800312a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003130:	1c5a      	adds	r2, r3, #1
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800313a:	3b01      	subs	r3, #1
 800313c:	b29a      	uxth	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003146:	b29b      	uxth	r3, r3
 8003148:	3b01      	subs	r3, #1
 800314a:	b29a      	uxth	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003154:	2b00      	cmp	r3, #0
 8003156:	f47f aeb6 	bne.w	8002ec6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2220      	movs	r2, #32
 800315e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003172:	2300      	movs	r3, #0
 8003174:	e000      	b.n	8003178 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003176:	2302      	movs	r3, #2
  }
}
 8003178:	4618      	mov	r0, r3
 800317a:	3728      	adds	r7, #40	@ 0x28
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	00010004 	.word	0x00010004

08003184 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b08a      	sub	sp, #40	@ 0x28
 8003188:	af02      	add	r7, sp, #8
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	607a      	str	r2, [r7, #4]
 800318e:	603b      	str	r3, [r7, #0]
 8003190:	460b      	mov	r3, r1
 8003192:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003194:	f7ff f8ae 	bl	80022f4 <HAL_GetTick>
 8003198:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800319a:	2300      	movs	r3, #0
 800319c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b20      	cmp	r3, #32
 80031a8:	f040 8111 	bne.w	80033ce <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	2319      	movs	r3, #25
 80031b2:	2201      	movs	r2, #1
 80031b4:	4988      	ldr	r1, [pc, #544]	@ (80033d8 <HAL_I2C_IsDeviceReady+0x254>)
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 fa90 	bl	80036dc <I2C_WaitOnFlagUntilTimeout>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80031c2:	2302      	movs	r3, #2
 80031c4:	e104      	b.n	80033d0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d101      	bne.n	80031d4 <HAL_I2C_IsDeviceReady+0x50>
 80031d0:	2302      	movs	r3, #2
 80031d2:	e0fd      	b.n	80033d0 <HAL_I2C_IsDeviceReady+0x24c>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d007      	beq.n	80031fa <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f042 0201 	orr.w	r2, r2, #1
 80031f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003208:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2224      	movs	r2, #36	@ 0x24
 800320e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	4a70      	ldr	r2, [pc, #448]	@ (80033dc <HAL_I2C_IsDeviceReady+0x258>)
 800321c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800322c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	9300      	str	r3, [sp, #0]
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	2200      	movs	r2, #0
 8003236:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f000 fa4e 	bl	80036dc <I2C_WaitOnFlagUntilTimeout>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00d      	beq.n	8003262 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003250:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003254:	d103      	bne.n	800325e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800325c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e0b6      	b.n	80033d0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003262:	897b      	ldrh	r3, [r7, #10]
 8003264:	b2db      	uxtb	r3, r3
 8003266:	461a      	mov	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003270:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003272:	f7ff f83f 	bl	80022f4 <HAL_GetTick>
 8003276:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b02      	cmp	r3, #2
 8003284:	bf0c      	ite	eq
 8003286:	2301      	moveq	r3, #1
 8003288:	2300      	movne	r3, #0
 800328a:	b2db      	uxtb	r3, r3
 800328c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	695b      	ldr	r3, [r3, #20]
 8003294:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003298:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800329c:	bf0c      	ite	eq
 800329e:	2301      	moveq	r3, #1
 80032a0:	2300      	movne	r3, #0
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80032a6:	e025      	b.n	80032f4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80032a8:	f7ff f824 	bl	80022f4 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d302      	bcc.n	80032be <HAL_I2C_IsDeviceReady+0x13a>
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d103      	bne.n	80032c6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	22a0      	movs	r2, #160	@ 0xa0
 80032c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	bf0c      	ite	eq
 80032d4:	2301      	moveq	r3, #1
 80032d6:	2300      	movne	r3, #0
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032ea:	bf0c      	ite	eq
 80032ec:	2301      	moveq	r3, #1
 80032ee:	2300      	movne	r3, #0
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2ba0      	cmp	r3, #160	@ 0xa0
 80032fe:	d005      	beq.n	800330c <HAL_I2C_IsDeviceReady+0x188>
 8003300:	7dfb      	ldrb	r3, [r7, #23]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d102      	bne.n	800330c <HAL_I2C_IsDeviceReady+0x188>
 8003306:	7dbb      	ldrb	r3, [r7, #22]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d0cd      	beq.n	80032a8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2220      	movs	r2, #32
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b02      	cmp	r3, #2
 8003320:	d129      	bne.n	8003376 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003330:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003332:	2300      	movs	r3, #0
 8003334:	613b      	str	r3, [r7, #16]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	613b      	str	r3, [r7, #16]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	613b      	str	r3, [r7, #16]
 8003346:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	2319      	movs	r3, #25
 800334e:	2201      	movs	r2, #1
 8003350:	4921      	ldr	r1, [pc, #132]	@ (80033d8 <HAL_I2C_IsDeviceReady+0x254>)
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f000 f9c2 	bl	80036dc <I2C_WaitOnFlagUntilTimeout>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e036      	b.n	80033d0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2220      	movs	r2, #32
 8003366:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003372:	2300      	movs	r3, #0
 8003374:	e02c      	b.n	80033d0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003384:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800338e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	9300      	str	r3, [sp, #0]
 8003394:	2319      	movs	r3, #25
 8003396:	2201      	movs	r2, #1
 8003398:	490f      	ldr	r1, [pc, #60]	@ (80033d8 <HAL_I2C_IsDeviceReady+0x254>)
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	f000 f99e 	bl	80036dc <I2C_WaitOnFlagUntilTimeout>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e012      	b.n	80033d0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	3301      	adds	r3, #1
 80033ae:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	f4ff af32 	bcc.w	800321e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2220      	movs	r2, #32
 80033be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e000      	b.n	80033d0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80033ce:	2302      	movs	r3, #2
  }
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3720      	adds	r7, #32
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	00100002 	.word	0x00100002
 80033dc:	ffff0000 	.word	0xffff0000

080033e0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b088      	sub	sp, #32
 80033e4:	af02      	add	r7, sp, #8
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	4608      	mov	r0, r1
 80033ea:	4611      	mov	r1, r2
 80033ec:	461a      	mov	r2, r3
 80033ee:	4603      	mov	r3, r0
 80033f0:	817b      	strh	r3, [r7, #10]
 80033f2:	460b      	mov	r3, r1
 80033f4:	813b      	strh	r3, [r7, #8]
 80033f6:	4613      	mov	r3, r2
 80033f8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003408:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800340a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800340c:	9300      	str	r3, [sp, #0]
 800340e:	6a3b      	ldr	r3, [r7, #32]
 8003410:	2200      	movs	r2, #0
 8003412:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 f960 	bl	80036dc <I2C_WaitOnFlagUntilTimeout>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00d      	beq.n	800343e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800342c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003430:	d103      	bne.n	800343a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003438:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e05f      	b.n	80034fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800343e:	897b      	ldrh	r3, [r7, #10]
 8003440:	b2db      	uxtb	r3, r3
 8003442:	461a      	mov	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800344c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800344e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003450:	6a3a      	ldr	r2, [r7, #32]
 8003452:	492d      	ldr	r1, [pc, #180]	@ (8003508 <I2C_RequestMemoryWrite+0x128>)
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	f000 f9bb 	bl	80037d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e04c      	b.n	80034fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003464:	2300      	movs	r3, #0
 8003466:	617b      	str	r3, [r7, #20]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	617b      	str	r3, [r7, #20]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	617b      	str	r3, [r7, #20]
 8003478:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800347a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800347c:	6a39      	ldr	r1, [r7, #32]
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	f000 fa46 	bl	8003910 <I2C_WaitOnTXEFlagUntilTimeout>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00d      	beq.n	80034a6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348e:	2b04      	cmp	r3, #4
 8003490:	d107      	bne.n	80034a2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e02b      	b.n	80034fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034a6:	88fb      	ldrh	r3, [r7, #6]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d105      	bne.n	80034b8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034ac:	893b      	ldrh	r3, [r7, #8]
 80034ae:	b2da      	uxtb	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	611a      	str	r2, [r3, #16]
 80034b6:	e021      	b.n	80034fc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80034b8:	893b      	ldrh	r3, [r7, #8]
 80034ba:	0a1b      	lsrs	r3, r3, #8
 80034bc:	b29b      	uxth	r3, r3
 80034be:	b2da      	uxtb	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034c8:	6a39      	ldr	r1, [r7, #32]
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f000 fa20 	bl	8003910 <I2C_WaitOnTXEFlagUntilTimeout>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00d      	beq.n	80034f2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034da:	2b04      	cmp	r3, #4
 80034dc:	d107      	bne.n	80034ee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e005      	b.n	80034fe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034f2:	893b      	ldrh	r3, [r7, #8]
 80034f4:	b2da      	uxtb	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3718      	adds	r7, #24
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	00010002 	.word	0x00010002

0800350c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b088      	sub	sp, #32
 8003510:	af02      	add	r7, sp, #8
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	4608      	mov	r0, r1
 8003516:	4611      	mov	r1, r2
 8003518:	461a      	mov	r2, r3
 800351a:	4603      	mov	r3, r0
 800351c:	817b      	strh	r3, [r7, #10]
 800351e:	460b      	mov	r3, r1
 8003520:	813b      	strh	r3, [r7, #8]
 8003522:	4613      	mov	r3, r2
 8003524:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003534:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003544:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	6a3b      	ldr	r3, [r7, #32]
 800354c:	2200      	movs	r2, #0
 800354e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f000 f8c2 	bl	80036dc <I2C_WaitOnFlagUntilTimeout>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00d      	beq.n	800357a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003568:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800356c:	d103      	bne.n	8003576 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003574:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e0aa      	b.n	80036d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800357a:	897b      	ldrh	r3, [r7, #10]
 800357c:	b2db      	uxtb	r3, r3
 800357e:	461a      	mov	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003588:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800358a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358c:	6a3a      	ldr	r2, [r7, #32]
 800358e:	4952      	ldr	r1, [pc, #328]	@ (80036d8 <I2C_RequestMemoryRead+0x1cc>)
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f000 f91d 	bl	80037d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d001      	beq.n	80035a0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e097      	b.n	80036d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035a0:	2300      	movs	r3, #0
 80035a2:	617b      	str	r3, [r7, #20]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	617b      	str	r3, [r7, #20]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	617b      	str	r3, [r7, #20]
 80035b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035b8:	6a39      	ldr	r1, [r7, #32]
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f000 f9a8 	bl	8003910 <I2C_WaitOnTXEFlagUntilTimeout>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00d      	beq.n	80035e2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ca:	2b04      	cmp	r3, #4
 80035cc:	d107      	bne.n	80035de <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e076      	b.n	80036d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035e2:	88fb      	ldrh	r3, [r7, #6]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d105      	bne.n	80035f4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035e8:	893b      	ldrh	r3, [r7, #8]
 80035ea:	b2da      	uxtb	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	611a      	str	r2, [r3, #16]
 80035f2:	e021      	b.n	8003638 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80035f4:	893b      	ldrh	r3, [r7, #8]
 80035f6:	0a1b      	lsrs	r3, r3, #8
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	b2da      	uxtb	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003602:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003604:	6a39      	ldr	r1, [r7, #32]
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	f000 f982 	bl	8003910 <I2C_WaitOnTXEFlagUntilTimeout>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00d      	beq.n	800362e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003616:	2b04      	cmp	r3, #4
 8003618:	d107      	bne.n	800362a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003628:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e050      	b.n	80036d0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800362e:	893b      	ldrh	r3, [r7, #8]
 8003630:	b2da      	uxtb	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003638:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800363a:	6a39      	ldr	r1, [r7, #32]
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f000 f967 	bl	8003910 <I2C_WaitOnTXEFlagUntilTimeout>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d00d      	beq.n	8003664 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364c:	2b04      	cmp	r3, #4
 800364e:	d107      	bne.n	8003660 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800365e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e035      	b.n	80036d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003672:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	6a3b      	ldr	r3, [r7, #32]
 800367a:	2200      	movs	r2, #0
 800367c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003680:	68f8      	ldr	r0, [r7, #12]
 8003682:	f000 f82b 	bl	80036dc <I2C_WaitOnFlagUntilTimeout>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00d      	beq.n	80036a8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003696:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800369a:	d103      	bne.n	80036a4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036a2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e013      	b.n	80036d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80036a8:	897b      	ldrh	r3, [r7, #10]
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	f043 0301 	orr.w	r3, r3, #1
 80036b0:	b2da      	uxtb	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ba:	6a3a      	ldr	r2, [r7, #32]
 80036bc:	4906      	ldr	r1, [pc, #24]	@ (80036d8 <I2C_RequestMemoryRead+0x1cc>)
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f000 f886 	bl	80037d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e000      	b.n	80036d0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3718      	adds	r7, #24
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	00010002 	.word	0x00010002

080036dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	603b      	str	r3, [r7, #0]
 80036e8:	4613      	mov	r3, r2
 80036ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036ec:	e048      	b.n	8003780 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036f4:	d044      	beq.n	8003780 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036f6:	f7fe fdfd 	bl	80022f4 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	429a      	cmp	r2, r3
 8003704:	d302      	bcc.n	800370c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d139      	bne.n	8003780 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	0c1b      	lsrs	r3, r3, #16
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b01      	cmp	r3, #1
 8003714:	d10d      	bne.n	8003732 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	43da      	mvns	r2, r3
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	4013      	ands	r3, r2
 8003722:	b29b      	uxth	r3, r3
 8003724:	2b00      	cmp	r3, #0
 8003726:	bf0c      	ite	eq
 8003728:	2301      	moveq	r3, #1
 800372a:	2300      	movne	r3, #0
 800372c:	b2db      	uxtb	r3, r3
 800372e:	461a      	mov	r2, r3
 8003730:	e00c      	b.n	800374c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	43da      	mvns	r2, r3
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	4013      	ands	r3, r2
 800373e:	b29b      	uxth	r3, r3
 8003740:	2b00      	cmp	r3, #0
 8003742:	bf0c      	ite	eq
 8003744:	2301      	moveq	r3, #1
 8003746:	2300      	movne	r3, #0
 8003748:	b2db      	uxtb	r3, r3
 800374a:	461a      	mov	r2, r3
 800374c:	79fb      	ldrb	r3, [r7, #7]
 800374e:	429a      	cmp	r2, r3
 8003750:	d116      	bne.n	8003780 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2220      	movs	r2, #32
 800375c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376c:	f043 0220 	orr.w	r2, r3, #32
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e023      	b.n	80037c8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	0c1b      	lsrs	r3, r3, #16
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b01      	cmp	r3, #1
 8003788:	d10d      	bne.n	80037a6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	695b      	ldr	r3, [r3, #20]
 8003790:	43da      	mvns	r2, r3
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	4013      	ands	r3, r2
 8003796:	b29b      	uxth	r3, r3
 8003798:	2b00      	cmp	r3, #0
 800379a:	bf0c      	ite	eq
 800379c:	2301      	moveq	r3, #1
 800379e:	2300      	movne	r3, #0
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	461a      	mov	r2, r3
 80037a4:	e00c      	b.n	80037c0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	43da      	mvns	r2, r3
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	4013      	ands	r3, r2
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	bf0c      	ite	eq
 80037b8:	2301      	moveq	r3, #1
 80037ba:	2300      	movne	r3, #0
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	461a      	mov	r2, r3
 80037c0:	79fb      	ldrb	r3, [r7, #7]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d093      	beq.n	80036ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]
 80037dc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037de:	e071      	b.n	80038c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037ee:	d123      	bne.n	8003838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037fe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003808:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2220      	movs	r2, #32
 8003814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003824:	f043 0204 	orr.w	r2, r3, #4
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e067      	b.n	8003908 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800383e:	d041      	beq.n	80038c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003840:	f7fe fd58 	bl	80022f4 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	429a      	cmp	r2, r3
 800384e:	d302      	bcc.n	8003856 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d136      	bne.n	80038c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	0c1b      	lsrs	r3, r3, #16
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b01      	cmp	r3, #1
 800385e:	d10c      	bne.n	800387a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	43da      	mvns	r2, r3
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	4013      	ands	r3, r2
 800386c:	b29b      	uxth	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	bf14      	ite	ne
 8003872:	2301      	movne	r3, #1
 8003874:	2300      	moveq	r3, #0
 8003876:	b2db      	uxtb	r3, r3
 8003878:	e00b      	b.n	8003892 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	43da      	mvns	r2, r3
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	4013      	ands	r3, r2
 8003886:	b29b      	uxth	r3, r3
 8003888:	2b00      	cmp	r3, #0
 800388a:	bf14      	ite	ne
 800388c:	2301      	movne	r3, #1
 800388e:	2300      	moveq	r3, #0
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d016      	beq.n	80038c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2220      	movs	r2, #32
 80038a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b0:	f043 0220 	orr.w	r2, r3, #32
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e021      	b.n	8003908 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	0c1b      	lsrs	r3, r3, #16
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d10c      	bne.n	80038e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	43da      	mvns	r2, r3
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	4013      	ands	r3, r2
 80038da:	b29b      	uxth	r3, r3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	bf14      	ite	ne
 80038e0:	2301      	movne	r3, #1
 80038e2:	2300      	moveq	r3, #0
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	e00b      	b.n	8003900 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	43da      	mvns	r2, r3
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	4013      	ands	r3, r2
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	bf14      	ite	ne
 80038fa:	2301      	movne	r3, #1
 80038fc:	2300      	moveq	r3, #0
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b00      	cmp	r3, #0
 8003902:	f47f af6d 	bne.w	80037e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800391c:	e034      	b.n	8003988 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f000 f8e3 	bl	8003aea <I2C_IsAcknowledgeFailed>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e034      	b.n	8003998 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003934:	d028      	beq.n	8003988 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003936:	f7fe fcdd 	bl	80022f4 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	68ba      	ldr	r2, [r7, #8]
 8003942:	429a      	cmp	r2, r3
 8003944:	d302      	bcc.n	800394c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d11d      	bne.n	8003988 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003956:	2b80      	cmp	r3, #128	@ 0x80
 8003958:	d016      	beq.n	8003988 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2220      	movs	r2, #32
 8003964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003974:	f043 0220 	orr.w	r2, r3, #32
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e007      	b.n	8003998 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003992:	2b80      	cmp	r3, #128	@ 0x80
 8003994:	d1c3      	bne.n	800391e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3710      	adds	r7, #16
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039ac:	e034      	b.n	8003a18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f000 f89b 	bl	8003aea <I2C_IsAcknowledgeFailed>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e034      	b.n	8003a28 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039c4:	d028      	beq.n	8003a18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039c6:	f7fe fc95 	bl	80022f4 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d302      	bcc.n	80039dc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d11d      	bne.n	8003a18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	f003 0304 	and.w	r3, r3, #4
 80039e6:	2b04      	cmp	r3, #4
 80039e8:	d016      	beq.n	8003a18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2220      	movs	r2, #32
 80039f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a04:	f043 0220 	orr.w	r2, r3, #32
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e007      	b.n	8003a28 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	f003 0304 	and.w	r3, r3, #4
 8003a22:	2b04      	cmp	r3, #4
 8003a24:	d1c3      	bne.n	80039ae <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a3c:	e049      	b.n	8003ad2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	695b      	ldr	r3, [r3, #20]
 8003a44:	f003 0310 	and.w	r3, r3, #16
 8003a48:	2b10      	cmp	r3, #16
 8003a4a:	d119      	bne.n	8003a80 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f06f 0210 	mvn.w	r2, #16
 8003a54:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e030      	b.n	8003ae2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a80:	f7fe fc38 	bl	80022f4 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	68ba      	ldr	r2, [r7, #8]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d302      	bcc.n	8003a96 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d11d      	bne.n	8003ad2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aa0:	2b40      	cmp	r3, #64	@ 0x40
 8003aa2:	d016      	beq.n	8003ad2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2220      	movs	r2, #32
 8003aae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003abe:	f043 0220 	orr.w	r2, r3, #32
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e007      	b.n	8003ae2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003adc:	2b40      	cmp	r3, #64	@ 0x40
 8003ade:	d1ae      	bne.n	8003a3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003aea:	b480      	push	{r7}
 8003aec:	b083      	sub	sp, #12
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003afc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b00:	d11b      	bne.n	8003b3a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003b0a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2220      	movs	r2, #32
 8003b16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b26:	f043 0204 	orr.w	r2, r3, #4
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e000      	b.n	8003b3c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d101      	bne.n	8003b5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e0cc      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b5c:	4b68      	ldr	r3, [pc, #416]	@ (8003d00 <HAL_RCC_ClockConfig+0x1b8>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 030f 	and.w	r3, r3, #15
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d90c      	bls.n	8003b84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b6a:	4b65      	ldr	r3, [pc, #404]	@ (8003d00 <HAL_RCC_ClockConfig+0x1b8>)
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	b2d2      	uxtb	r2, r2
 8003b70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b72:	4b63      	ldr	r3, [pc, #396]	@ (8003d00 <HAL_RCC_ClockConfig+0x1b8>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 030f 	and.w	r3, r3, #15
 8003b7a:	683a      	ldr	r2, [r7, #0]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d001      	beq.n	8003b84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e0b8      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d020      	beq.n	8003bd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0304 	and.w	r3, r3, #4
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d005      	beq.n	8003ba8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b9c:	4b59      	ldr	r3, [pc, #356]	@ (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	4a58      	ldr	r2, [pc, #352]	@ (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003ba6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0308 	and.w	r3, r3, #8
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d005      	beq.n	8003bc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bb4:	4b53      	ldr	r3, [pc, #332]	@ (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	4a52      	ldr	r2, [pc, #328]	@ (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003bba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003bbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bc0:	4b50      	ldr	r3, [pc, #320]	@ (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	494d      	ldr	r1, [pc, #308]	@ (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d044      	beq.n	8003c68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d107      	bne.n	8003bf6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003be6:	4b47      	ldr	r3, [pc, #284]	@ (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d119      	bne.n	8003c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e07f      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d003      	beq.n	8003c06 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c02:	2b03      	cmp	r3, #3
 8003c04:	d107      	bne.n	8003c16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c06:	4b3f      	ldr	r3, [pc, #252]	@ (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d109      	bne.n	8003c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e06f      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c16:	4b3b      	ldr	r3, [pc, #236]	@ (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e067      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c26:	4b37      	ldr	r3, [pc, #220]	@ (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f023 0203 	bic.w	r2, r3, #3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	4934      	ldr	r1, [pc, #208]	@ (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c38:	f7fe fb5c 	bl	80022f4 <HAL_GetTick>
 8003c3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c3e:	e00a      	b.n	8003c56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c40:	f7fe fb58 	bl	80022f4 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e04f      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c56:	4b2b      	ldr	r3, [pc, #172]	@ (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 020c 	and.w	r2, r3, #12
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d1eb      	bne.n	8003c40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c68:	4b25      	ldr	r3, [pc, #148]	@ (8003d00 <HAL_RCC_ClockConfig+0x1b8>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 030f 	and.w	r3, r3, #15
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d20c      	bcs.n	8003c90 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c76:	4b22      	ldr	r3, [pc, #136]	@ (8003d00 <HAL_RCC_ClockConfig+0x1b8>)
 8003c78:	683a      	ldr	r2, [r7, #0]
 8003c7a:	b2d2      	uxtb	r2, r2
 8003c7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c7e:	4b20      	ldr	r3, [pc, #128]	@ (8003d00 <HAL_RCC_ClockConfig+0x1b8>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 030f 	and.w	r3, r3, #15
 8003c86:	683a      	ldr	r2, [r7, #0]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d001      	beq.n	8003c90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e032      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0304 	and.w	r3, r3, #4
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d008      	beq.n	8003cae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c9c:	4b19      	ldr	r3, [pc, #100]	@ (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	4916      	ldr	r1, [pc, #88]	@ (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0308 	and.w	r3, r3, #8
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d009      	beq.n	8003cce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cba:	4b12      	ldr	r3, [pc, #72]	@ (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	490e      	ldr	r1, [pc, #56]	@ (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cce:	f000 f887 	bl	8003de0 <HAL_RCC_GetSysClockFreq>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	091b      	lsrs	r3, r3, #4
 8003cda:	f003 030f 	and.w	r3, r3, #15
 8003cde:	490a      	ldr	r1, [pc, #40]	@ (8003d08 <HAL_RCC_ClockConfig+0x1c0>)
 8003ce0:	5ccb      	ldrb	r3, [r1, r3]
 8003ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce6:	4a09      	ldr	r2, [pc, #36]	@ (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003ce8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003cea:	4b09      	ldr	r3, [pc, #36]	@ (8003d10 <HAL_RCC_ClockConfig+0x1c8>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7fe f9b0 	bl	8002054 <HAL_InitTick>

  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	40023c00 	.word	0x40023c00
 8003d04:	40023800 	.word	0x40023800
 8003d08:	0800a00c 	.word	0x0800a00c
 8003d0c:	20000000 	.word	0x20000000
 8003d10:	20000004 	.word	0x20000004

08003d14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d18:	4b03      	ldr	r3, [pc, #12]	@ (8003d28 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	20000000 	.word	0x20000000

08003d2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d30:	f7ff fff0 	bl	8003d14 <HAL_RCC_GetHCLKFreq>
 8003d34:	4602      	mov	r2, r0
 8003d36:	4b05      	ldr	r3, [pc, #20]	@ (8003d4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	0a9b      	lsrs	r3, r3, #10
 8003d3c:	f003 0307 	and.w	r3, r3, #7
 8003d40:	4903      	ldr	r1, [pc, #12]	@ (8003d50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d42:	5ccb      	ldrb	r3, [r1, r3]
 8003d44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	40023800 	.word	0x40023800
 8003d50:	0800a01c 	.word	0x0800a01c

08003d54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d58:	f7ff ffdc 	bl	8003d14 <HAL_RCC_GetHCLKFreq>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	4b05      	ldr	r3, [pc, #20]	@ (8003d74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	0b5b      	lsrs	r3, r3, #13
 8003d64:	f003 0307 	and.w	r3, r3, #7
 8003d68:	4903      	ldr	r1, [pc, #12]	@ (8003d78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d6a:	5ccb      	ldrb	r3, [r1, r3]
 8003d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	40023800 	.word	0x40023800
 8003d78:	0800a01c 	.word	0x0800a01c

08003d7c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	220f      	movs	r2, #15
 8003d8a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003d8c:	4b12      	ldr	r3, [pc, #72]	@ (8003dd8 <HAL_RCC_GetClockConfig+0x5c>)
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f003 0203 	and.w	r2, r3, #3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003d98:	4b0f      	ldr	r3, [pc, #60]	@ (8003dd8 <HAL_RCC_GetClockConfig+0x5c>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003da4:	4b0c      	ldr	r3, [pc, #48]	@ (8003dd8 <HAL_RCC_GetClockConfig+0x5c>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003db0:	4b09      	ldr	r3, [pc, #36]	@ (8003dd8 <HAL_RCC_GetClockConfig+0x5c>)
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	08db      	lsrs	r3, r3, #3
 8003db6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003dbe:	4b07      	ldr	r3, [pc, #28]	@ (8003ddc <HAL_RCC_GetClockConfig+0x60>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 020f 	and.w	r2, r3, #15
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	601a      	str	r2, [r3, #0]
}
 8003dca:	bf00      	nop
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	40023800 	.word	0x40023800
 8003ddc:	40023c00 	.word	0x40023c00

08003de0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003de0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003de4:	b0ae      	sub	sp, #184	@ 0xb8
 8003de6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003de8:	2300      	movs	r3, #0
 8003dea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003dee:	2300      	movs	r3, #0
 8003df0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003df4:	2300      	movs	r3, #0
 8003df6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003e00:	2300      	movs	r3, #0
 8003e02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e06:	4bcb      	ldr	r3, [pc, #812]	@ (8004134 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f003 030c 	and.w	r3, r3, #12
 8003e0e:	2b0c      	cmp	r3, #12
 8003e10:	f200 8206 	bhi.w	8004220 <HAL_RCC_GetSysClockFreq+0x440>
 8003e14:	a201      	add	r2, pc, #4	@ (adr r2, 8003e1c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1a:	bf00      	nop
 8003e1c:	08003e51 	.word	0x08003e51
 8003e20:	08004221 	.word	0x08004221
 8003e24:	08004221 	.word	0x08004221
 8003e28:	08004221 	.word	0x08004221
 8003e2c:	08003e59 	.word	0x08003e59
 8003e30:	08004221 	.word	0x08004221
 8003e34:	08004221 	.word	0x08004221
 8003e38:	08004221 	.word	0x08004221
 8003e3c:	08003e61 	.word	0x08003e61
 8003e40:	08004221 	.word	0x08004221
 8003e44:	08004221 	.word	0x08004221
 8003e48:	08004221 	.word	0x08004221
 8003e4c:	08004051 	.word	0x08004051
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e50:	4bb9      	ldr	r3, [pc, #740]	@ (8004138 <HAL_RCC_GetSysClockFreq+0x358>)
 8003e52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003e56:	e1e7      	b.n	8004228 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e58:	4bb8      	ldr	r3, [pc, #736]	@ (800413c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003e5a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003e5e:	e1e3      	b.n	8004228 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e60:	4bb4      	ldr	r3, [pc, #720]	@ (8004134 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e6c:	4bb1      	ldr	r3, [pc, #708]	@ (8004134 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d071      	beq.n	8003f5c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e78:	4bae      	ldr	r3, [pc, #696]	@ (8004134 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	099b      	lsrs	r3, r3, #6
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003e84:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003e88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e90:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003e94:	2300      	movs	r3, #0
 8003e96:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003e9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003e9e:	4622      	mov	r2, r4
 8003ea0:	462b      	mov	r3, r5
 8003ea2:	f04f 0000 	mov.w	r0, #0
 8003ea6:	f04f 0100 	mov.w	r1, #0
 8003eaa:	0159      	lsls	r1, r3, #5
 8003eac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003eb0:	0150      	lsls	r0, r2, #5
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	4621      	mov	r1, r4
 8003eb8:	1a51      	subs	r1, r2, r1
 8003eba:	6439      	str	r1, [r7, #64]	@ 0x40
 8003ebc:	4629      	mov	r1, r5
 8003ebe:	eb63 0301 	sbc.w	r3, r3, r1
 8003ec2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ec4:	f04f 0200 	mov.w	r2, #0
 8003ec8:	f04f 0300 	mov.w	r3, #0
 8003ecc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003ed0:	4649      	mov	r1, r9
 8003ed2:	018b      	lsls	r3, r1, #6
 8003ed4:	4641      	mov	r1, r8
 8003ed6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003eda:	4641      	mov	r1, r8
 8003edc:	018a      	lsls	r2, r1, #6
 8003ede:	4641      	mov	r1, r8
 8003ee0:	1a51      	subs	r1, r2, r1
 8003ee2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003ee4:	4649      	mov	r1, r9
 8003ee6:	eb63 0301 	sbc.w	r3, r3, r1
 8003eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003eec:	f04f 0200 	mov.w	r2, #0
 8003ef0:	f04f 0300 	mov.w	r3, #0
 8003ef4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003ef8:	4649      	mov	r1, r9
 8003efa:	00cb      	lsls	r3, r1, #3
 8003efc:	4641      	mov	r1, r8
 8003efe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f02:	4641      	mov	r1, r8
 8003f04:	00ca      	lsls	r2, r1, #3
 8003f06:	4610      	mov	r0, r2
 8003f08:	4619      	mov	r1, r3
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	4622      	mov	r2, r4
 8003f0e:	189b      	adds	r3, r3, r2
 8003f10:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f12:	462b      	mov	r3, r5
 8003f14:	460a      	mov	r2, r1
 8003f16:	eb42 0303 	adc.w	r3, r2, r3
 8003f1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f1c:	f04f 0200 	mov.w	r2, #0
 8003f20:	f04f 0300 	mov.w	r3, #0
 8003f24:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003f28:	4629      	mov	r1, r5
 8003f2a:	024b      	lsls	r3, r1, #9
 8003f2c:	4621      	mov	r1, r4
 8003f2e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f32:	4621      	mov	r1, r4
 8003f34:	024a      	lsls	r2, r1, #9
 8003f36:	4610      	mov	r0, r2
 8003f38:	4619      	mov	r1, r3
 8003f3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003f44:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003f48:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003f4c:	f7fc fe5e 	bl	8000c0c <__aeabi_uldivmod>
 8003f50:	4602      	mov	r2, r0
 8003f52:	460b      	mov	r3, r1
 8003f54:	4613      	mov	r3, r2
 8003f56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f5a:	e067      	b.n	800402c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f5c:	4b75      	ldr	r3, [pc, #468]	@ (8004134 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	099b      	lsrs	r3, r3, #6
 8003f62:	2200      	movs	r2, #0
 8003f64:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003f68:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003f6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f74:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003f76:	2300      	movs	r3, #0
 8003f78:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003f7a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003f7e:	4622      	mov	r2, r4
 8003f80:	462b      	mov	r3, r5
 8003f82:	f04f 0000 	mov.w	r0, #0
 8003f86:	f04f 0100 	mov.w	r1, #0
 8003f8a:	0159      	lsls	r1, r3, #5
 8003f8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f90:	0150      	lsls	r0, r2, #5
 8003f92:	4602      	mov	r2, r0
 8003f94:	460b      	mov	r3, r1
 8003f96:	4621      	mov	r1, r4
 8003f98:	1a51      	subs	r1, r2, r1
 8003f9a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003f9c:	4629      	mov	r1, r5
 8003f9e:	eb63 0301 	sbc.w	r3, r3, r1
 8003fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fa4:	f04f 0200 	mov.w	r2, #0
 8003fa8:	f04f 0300 	mov.w	r3, #0
 8003fac:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003fb0:	4649      	mov	r1, r9
 8003fb2:	018b      	lsls	r3, r1, #6
 8003fb4:	4641      	mov	r1, r8
 8003fb6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fba:	4641      	mov	r1, r8
 8003fbc:	018a      	lsls	r2, r1, #6
 8003fbe:	4641      	mov	r1, r8
 8003fc0:	ebb2 0a01 	subs.w	sl, r2, r1
 8003fc4:	4649      	mov	r1, r9
 8003fc6:	eb63 0b01 	sbc.w	fp, r3, r1
 8003fca:	f04f 0200 	mov.w	r2, #0
 8003fce:	f04f 0300 	mov.w	r3, #0
 8003fd2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003fd6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003fda:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fde:	4692      	mov	sl, r2
 8003fe0:	469b      	mov	fp, r3
 8003fe2:	4623      	mov	r3, r4
 8003fe4:	eb1a 0303 	adds.w	r3, sl, r3
 8003fe8:	623b      	str	r3, [r7, #32]
 8003fea:	462b      	mov	r3, r5
 8003fec:	eb4b 0303 	adc.w	r3, fp, r3
 8003ff0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ff2:	f04f 0200 	mov.w	r2, #0
 8003ff6:	f04f 0300 	mov.w	r3, #0
 8003ffa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003ffe:	4629      	mov	r1, r5
 8004000:	028b      	lsls	r3, r1, #10
 8004002:	4621      	mov	r1, r4
 8004004:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004008:	4621      	mov	r1, r4
 800400a:	028a      	lsls	r2, r1, #10
 800400c:	4610      	mov	r0, r2
 800400e:	4619      	mov	r1, r3
 8004010:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004014:	2200      	movs	r2, #0
 8004016:	673b      	str	r3, [r7, #112]	@ 0x70
 8004018:	677a      	str	r2, [r7, #116]	@ 0x74
 800401a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800401e:	f7fc fdf5 	bl	8000c0c <__aeabi_uldivmod>
 8004022:	4602      	mov	r2, r0
 8004024:	460b      	mov	r3, r1
 8004026:	4613      	mov	r3, r2
 8004028:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800402c:	4b41      	ldr	r3, [pc, #260]	@ (8004134 <HAL_RCC_GetSysClockFreq+0x354>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	0c1b      	lsrs	r3, r3, #16
 8004032:	f003 0303 	and.w	r3, r3, #3
 8004036:	3301      	adds	r3, #1
 8004038:	005b      	lsls	r3, r3, #1
 800403a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800403e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004042:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004046:	fbb2 f3f3 	udiv	r3, r2, r3
 800404a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800404e:	e0eb      	b.n	8004228 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004050:	4b38      	ldr	r3, [pc, #224]	@ (8004134 <HAL_RCC_GetSysClockFreq+0x354>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004058:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800405c:	4b35      	ldr	r3, [pc, #212]	@ (8004134 <HAL_RCC_GetSysClockFreq+0x354>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d06b      	beq.n	8004140 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004068:	4b32      	ldr	r3, [pc, #200]	@ (8004134 <HAL_RCC_GetSysClockFreq+0x354>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	099b      	lsrs	r3, r3, #6
 800406e:	2200      	movs	r2, #0
 8004070:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004072:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004074:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800407a:	663b      	str	r3, [r7, #96]	@ 0x60
 800407c:	2300      	movs	r3, #0
 800407e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004080:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004084:	4622      	mov	r2, r4
 8004086:	462b      	mov	r3, r5
 8004088:	f04f 0000 	mov.w	r0, #0
 800408c:	f04f 0100 	mov.w	r1, #0
 8004090:	0159      	lsls	r1, r3, #5
 8004092:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004096:	0150      	lsls	r0, r2, #5
 8004098:	4602      	mov	r2, r0
 800409a:	460b      	mov	r3, r1
 800409c:	4621      	mov	r1, r4
 800409e:	1a51      	subs	r1, r2, r1
 80040a0:	61b9      	str	r1, [r7, #24]
 80040a2:	4629      	mov	r1, r5
 80040a4:	eb63 0301 	sbc.w	r3, r3, r1
 80040a8:	61fb      	str	r3, [r7, #28]
 80040aa:	f04f 0200 	mov.w	r2, #0
 80040ae:	f04f 0300 	mov.w	r3, #0
 80040b2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80040b6:	4659      	mov	r1, fp
 80040b8:	018b      	lsls	r3, r1, #6
 80040ba:	4651      	mov	r1, sl
 80040bc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040c0:	4651      	mov	r1, sl
 80040c2:	018a      	lsls	r2, r1, #6
 80040c4:	4651      	mov	r1, sl
 80040c6:	ebb2 0801 	subs.w	r8, r2, r1
 80040ca:	4659      	mov	r1, fp
 80040cc:	eb63 0901 	sbc.w	r9, r3, r1
 80040d0:	f04f 0200 	mov.w	r2, #0
 80040d4:	f04f 0300 	mov.w	r3, #0
 80040d8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040dc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040e0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040e4:	4690      	mov	r8, r2
 80040e6:	4699      	mov	r9, r3
 80040e8:	4623      	mov	r3, r4
 80040ea:	eb18 0303 	adds.w	r3, r8, r3
 80040ee:	613b      	str	r3, [r7, #16]
 80040f0:	462b      	mov	r3, r5
 80040f2:	eb49 0303 	adc.w	r3, r9, r3
 80040f6:	617b      	str	r3, [r7, #20]
 80040f8:	f04f 0200 	mov.w	r2, #0
 80040fc:	f04f 0300 	mov.w	r3, #0
 8004100:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004104:	4629      	mov	r1, r5
 8004106:	024b      	lsls	r3, r1, #9
 8004108:	4621      	mov	r1, r4
 800410a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800410e:	4621      	mov	r1, r4
 8004110:	024a      	lsls	r2, r1, #9
 8004112:	4610      	mov	r0, r2
 8004114:	4619      	mov	r1, r3
 8004116:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800411a:	2200      	movs	r2, #0
 800411c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800411e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004120:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004124:	f7fc fd72 	bl	8000c0c <__aeabi_uldivmod>
 8004128:	4602      	mov	r2, r0
 800412a:	460b      	mov	r3, r1
 800412c:	4613      	mov	r3, r2
 800412e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004132:	e065      	b.n	8004200 <HAL_RCC_GetSysClockFreq+0x420>
 8004134:	40023800 	.word	0x40023800
 8004138:	00f42400 	.word	0x00f42400
 800413c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004140:	4b3d      	ldr	r3, [pc, #244]	@ (8004238 <HAL_RCC_GetSysClockFreq+0x458>)
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	099b      	lsrs	r3, r3, #6
 8004146:	2200      	movs	r2, #0
 8004148:	4618      	mov	r0, r3
 800414a:	4611      	mov	r1, r2
 800414c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004150:	653b      	str	r3, [r7, #80]	@ 0x50
 8004152:	2300      	movs	r3, #0
 8004154:	657b      	str	r3, [r7, #84]	@ 0x54
 8004156:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800415a:	4642      	mov	r2, r8
 800415c:	464b      	mov	r3, r9
 800415e:	f04f 0000 	mov.w	r0, #0
 8004162:	f04f 0100 	mov.w	r1, #0
 8004166:	0159      	lsls	r1, r3, #5
 8004168:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800416c:	0150      	lsls	r0, r2, #5
 800416e:	4602      	mov	r2, r0
 8004170:	460b      	mov	r3, r1
 8004172:	4641      	mov	r1, r8
 8004174:	1a51      	subs	r1, r2, r1
 8004176:	60b9      	str	r1, [r7, #8]
 8004178:	4649      	mov	r1, r9
 800417a:	eb63 0301 	sbc.w	r3, r3, r1
 800417e:	60fb      	str	r3, [r7, #12]
 8004180:	f04f 0200 	mov.w	r2, #0
 8004184:	f04f 0300 	mov.w	r3, #0
 8004188:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800418c:	4659      	mov	r1, fp
 800418e:	018b      	lsls	r3, r1, #6
 8004190:	4651      	mov	r1, sl
 8004192:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004196:	4651      	mov	r1, sl
 8004198:	018a      	lsls	r2, r1, #6
 800419a:	4651      	mov	r1, sl
 800419c:	1a54      	subs	r4, r2, r1
 800419e:	4659      	mov	r1, fp
 80041a0:	eb63 0501 	sbc.w	r5, r3, r1
 80041a4:	f04f 0200 	mov.w	r2, #0
 80041a8:	f04f 0300 	mov.w	r3, #0
 80041ac:	00eb      	lsls	r3, r5, #3
 80041ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041b2:	00e2      	lsls	r2, r4, #3
 80041b4:	4614      	mov	r4, r2
 80041b6:	461d      	mov	r5, r3
 80041b8:	4643      	mov	r3, r8
 80041ba:	18e3      	adds	r3, r4, r3
 80041bc:	603b      	str	r3, [r7, #0]
 80041be:	464b      	mov	r3, r9
 80041c0:	eb45 0303 	adc.w	r3, r5, r3
 80041c4:	607b      	str	r3, [r7, #4]
 80041c6:	f04f 0200 	mov.w	r2, #0
 80041ca:	f04f 0300 	mov.w	r3, #0
 80041ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041d2:	4629      	mov	r1, r5
 80041d4:	028b      	lsls	r3, r1, #10
 80041d6:	4621      	mov	r1, r4
 80041d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041dc:	4621      	mov	r1, r4
 80041de:	028a      	lsls	r2, r1, #10
 80041e0:	4610      	mov	r0, r2
 80041e2:	4619      	mov	r1, r3
 80041e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80041e8:	2200      	movs	r2, #0
 80041ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041ec:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80041ee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80041f2:	f7fc fd0b 	bl	8000c0c <__aeabi_uldivmod>
 80041f6:	4602      	mov	r2, r0
 80041f8:	460b      	mov	r3, r1
 80041fa:	4613      	mov	r3, r2
 80041fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004200:	4b0d      	ldr	r3, [pc, #52]	@ (8004238 <HAL_RCC_GetSysClockFreq+0x458>)
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	0f1b      	lsrs	r3, r3, #28
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800420e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004212:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004216:	fbb2 f3f3 	udiv	r3, r2, r3
 800421a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800421e:	e003      	b.n	8004228 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004220:	4b06      	ldr	r3, [pc, #24]	@ (800423c <HAL_RCC_GetSysClockFreq+0x45c>)
 8004222:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004226:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004228:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800422c:	4618      	mov	r0, r3
 800422e:	37b8      	adds	r7, #184	@ 0xb8
 8004230:	46bd      	mov	sp, r7
 8004232:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004236:	bf00      	nop
 8004238:	40023800 	.word	0x40023800
 800423c:	00f42400 	.word	0x00f42400

08004240 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b086      	sub	sp, #24
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e28d      	b.n	800476e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	2b00      	cmp	r3, #0
 800425c:	f000 8083 	beq.w	8004366 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004260:	4b94      	ldr	r3, [pc, #592]	@ (80044b4 <HAL_RCC_OscConfig+0x274>)
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f003 030c 	and.w	r3, r3, #12
 8004268:	2b04      	cmp	r3, #4
 800426a:	d019      	beq.n	80042a0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800426c:	4b91      	ldr	r3, [pc, #580]	@ (80044b4 <HAL_RCC_OscConfig+0x274>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f003 030c 	and.w	r3, r3, #12
        || \
 8004274:	2b08      	cmp	r3, #8
 8004276:	d106      	bne.n	8004286 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004278:	4b8e      	ldr	r3, [pc, #568]	@ (80044b4 <HAL_RCC_OscConfig+0x274>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004280:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004284:	d00c      	beq.n	80042a0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004286:	4b8b      	ldr	r3, [pc, #556]	@ (80044b4 <HAL_RCC_OscConfig+0x274>)
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800428e:	2b0c      	cmp	r3, #12
 8004290:	d112      	bne.n	80042b8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004292:	4b88      	ldr	r3, [pc, #544]	@ (80044b4 <HAL_RCC_OscConfig+0x274>)
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800429a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800429e:	d10b      	bne.n	80042b8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042a0:	4b84      	ldr	r3, [pc, #528]	@ (80044b4 <HAL_RCC_OscConfig+0x274>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d05b      	beq.n	8004364 <HAL_RCC_OscConfig+0x124>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d157      	bne.n	8004364 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e25a      	b.n	800476e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042c0:	d106      	bne.n	80042d0 <HAL_RCC_OscConfig+0x90>
 80042c2:	4b7c      	ldr	r3, [pc, #496]	@ (80044b4 <HAL_RCC_OscConfig+0x274>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a7b      	ldr	r2, [pc, #492]	@ (80044b4 <HAL_RCC_OscConfig+0x274>)
 80042c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042cc:	6013      	str	r3, [r2, #0]
 80042ce:	e01d      	b.n	800430c <HAL_RCC_OscConfig+0xcc>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042d8:	d10c      	bne.n	80042f4 <HAL_RCC_OscConfig+0xb4>
 80042da:	4b76      	ldr	r3, [pc, #472]	@ (80044b4 <HAL_RCC_OscConfig+0x274>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a75      	ldr	r2, [pc, #468]	@ (80044b4 <HAL_RCC_OscConfig+0x274>)
 80042e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042e4:	6013      	str	r3, [r2, #0]
 80042e6:	4b73      	ldr	r3, [pc, #460]	@ (80044b4 <HAL_RCC_OscConfig+0x274>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a72      	ldr	r2, [pc, #456]	@ (80044b4 <HAL_RCC_OscConfig+0x274>)
 80042ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042f0:	6013      	str	r3, [r2, #0]
 80042f2:	e00b      	b.n	800430c <HAL_RCC_OscConfig+0xcc>
 80042f4:	4b6f      	ldr	r3, [pc, #444]	@ (80044b4 <HAL_RCC_OscConfig+0x274>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a6e      	ldr	r2, [pc, #440]	@ (80044b4 <HAL_RCC_OscConfig+0x274>)
 80042fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042fe:	6013      	str	r3, [r2, #0]
 8004300:	4b6c      	ldr	r3, [pc, #432]	@ (80044b4 <HAL_RCC_OscConfig+0x274>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a6b      	ldr	r2, [pc, #428]	@ (80044b4 <HAL_RCC_OscConfig+0x274>)
 8004306:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800430a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d013      	beq.n	800433c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004314:	f7fd ffee 	bl	80022f4 <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800431c:	f7fd ffea 	bl	80022f4 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b64      	cmp	r3, #100	@ 0x64
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e21f      	b.n	800476e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800432e:	4b61      	ldr	r3, [pc, #388]	@ (80044b4 <HAL_RCC_OscConfig+0x274>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d0f0      	beq.n	800431c <HAL_RCC_OscConfig+0xdc>
 800433a:	e014      	b.n	8004366 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433c:	f7fd ffda 	bl	80022f4 <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004344:	f7fd ffd6 	bl	80022f4 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b64      	cmp	r3, #100	@ 0x64
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e20b      	b.n	800476e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004356:	4b57      	ldr	r3, [pc, #348]	@ (80044b4 <HAL_RCC_OscConfig+0x274>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1f0      	bne.n	8004344 <HAL_RCC_OscConfig+0x104>
 8004362:	e000      	b.n	8004366 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004364:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d06f      	beq.n	8004452 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004372:	4b50      	ldr	r3, [pc, #320]	@ (80044b4 <HAL_RCC_OscConfig+0x274>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f003 030c 	and.w	r3, r3, #12
 800437a:	2b00      	cmp	r3, #0
 800437c:	d017      	beq.n	80043ae <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800437e:	4b4d      	ldr	r3, [pc, #308]	@ (80044b4 <HAL_RCC_OscConfig+0x274>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f003 030c 	and.w	r3, r3, #12
        || \
 8004386:	2b08      	cmp	r3, #8
 8004388:	d105      	bne.n	8004396 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800438a:	4b4a      	ldr	r3, [pc, #296]	@ (80044b4 <HAL_RCC_OscConfig+0x274>)
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00b      	beq.n	80043ae <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004396:	4b47      	ldr	r3, [pc, #284]	@ (80044b4 <HAL_RCC_OscConfig+0x274>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800439e:	2b0c      	cmp	r3, #12
 80043a0:	d11c      	bne.n	80043dc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043a2:	4b44      	ldr	r3, [pc, #272]	@ (80044b4 <HAL_RCC_OscConfig+0x274>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d116      	bne.n	80043dc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ae:	4b41      	ldr	r3, [pc, #260]	@ (80044b4 <HAL_RCC_OscConfig+0x274>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d005      	beq.n	80043c6 <HAL_RCC_OscConfig+0x186>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d001      	beq.n	80043c6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e1d3      	b.n	800476e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043c6:	4b3b      	ldr	r3, [pc, #236]	@ (80044b4 <HAL_RCC_OscConfig+0x274>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	00db      	lsls	r3, r3, #3
 80043d4:	4937      	ldr	r1, [pc, #220]	@ (80044b4 <HAL_RCC_OscConfig+0x274>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043da:	e03a      	b.n	8004452 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d020      	beq.n	8004426 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043e4:	4b34      	ldr	r3, [pc, #208]	@ (80044b8 <HAL_RCC_OscConfig+0x278>)
 80043e6:	2201      	movs	r2, #1
 80043e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ea:	f7fd ff83 	bl	80022f4 <HAL_GetTick>
 80043ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043f0:	e008      	b.n	8004404 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043f2:	f7fd ff7f 	bl	80022f4 <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d901      	bls.n	8004404 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e1b4      	b.n	800476e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004404:	4b2b      	ldr	r3, [pc, #172]	@ (80044b4 <HAL_RCC_OscConfig+0x274>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0302 	and.w	r3, r3, #2
 800440c:	2b00      	cmp	r3, #0
 800440e:	d0f0      	beq.n	80043f2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004410:	4b28      	ldr	r3, [pc, #160]	@ (80044b4 <HAL_RCC_OscConfig+0x274>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	00db      	lsls	r3, r3, #3
 800441e:	4925      	ldr	r1, [pc, #148]	@ (80044b4 <HAL_RCC_OscConfig+0x274>)
 8004420:	4313      	orrs	r3, r2
 8004422:	600b      	str	r3, [r1, #0]
 8004424:	e015      	b.n	8004452 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004426:	4b24      	ldr	r3, [pc, #144]	@ (80044b8 <HAL_RCC_OscConfig+0x278>)
 8004428:	2200      	movs	r2, #0
 800442a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800442c:	f7fd ff62 	bl	80022f4 <HAL_GetTick>
 8004430:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004432:	e008      	b.n	8004446 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004434:	f7fd ff5e 	bl	80022f4 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b02      	cmp	r3, #2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e193      	b.n	800476e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004446:	4b1b      	ldr	r3, [pc, #108]	@ (80044b4 <HAL_RCC_OscConfig+0x274>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1f0      	bne.n	8004434 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0308 	and.w	r3, r3, #8
 800445a:	2b00      	cmp	r3, #0
 800445c:	d036      	beq.n	80044cc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d016      	beq.n	8004494 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004466:	4b15      	ldr	r3, [pc, #84]	@ (80044bc <HAL_RCC_OscConfig+0x27c>)
 8004468:	2201      	movs	r2, #1
 800446a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800446c:	f7fd ff42 	bl	80022f4 <HAL_GetTick>
 8004470:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004472:	e008      	b.n	8004486 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004474:	f7fd ff3e 	bl	80022f4 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e173      	b.n	800476e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004486:	4b0b      	ldr	r3, [pc, #44]	@ (80044b4 <HAL_RCC_OscConfig+0x274>)
 8004488:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d0f0      	beq.n	8004474 <HAL_RCC_OscConfig+0x234>
 8004492:	e01b      	b.n	80044cc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004494:	4b09      	ldr	r3, [pc, #36]	@ (80044bc <HAL_RCC_OscConfig+0x27c>)
 8004496:	2200      	movs	r2, #0
 8004498:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800449a:	f7fd ff2b 	bl	80022f4 <HAL_GetTick>
 800449e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044a0:	e00e      	b.n	80044c0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044a2:	f7fd ff27 	bl	80022f4 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d907      	bls.n	80044c0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e15c      	b.n	800476e <HAL_RCC_OscConfig+0x52e>
 80044b4:	40023800 	.word	0x40023800
 80044b8:	42470000 	.word	0x42470000
 80044bc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044c0:	4b8a      	ldr	r3, [pc, #552]	@ (80046ec <HAL_RCC_OscConfig+0x4ac>)
 80044c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044c4:	f003 0302 	and.w	r3, r3, #2
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1ea      	bne.n	80044a2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0304 	and.w	r3, r3, #4
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f000 8097 	beq.w	8004608 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044da:	2300      	movs	r3, #0
 80044dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044de:	4b83      	ldr	r3, [pc, #524]	@ (80046ec <HAL_RCC_OscConfig+0x4ac>)
 80044e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10f      	bne.n	800450a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044ea:	2300      	movs	r3, #0
 80044ec:	60bb      	str	r3, [r7, #8]
 80044ee:	4b7f      	ldr	r3, [pc, #508]	@ (80046ec <HAL_RCC_OscConfig+0x4ac>)
 80044f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f2:	4a7e      	ldr	r2, [pc, #504]	@ (80046ec <HAL_RCC_OscConfig+0x4ac>)
 80044f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80044fa:	4b7c      	ldr	r3, [pc, #496]	@ (80046ec <HAL_RCC_OscConfig+0x4ac>)
 80044fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004502:	60bb      	str	r3, [r7, #8]
 8004504:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004506:	2301      	movs	r3, #1
 8004508:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800450a:	4b79      	ldr	r3, [pc, #484]	@ (80046f0 <HAL_RCC_OscConfig+0x4b0>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004512:	2b00      	cmp	r3, #0
 8004514:	d118      	bne.n	8004548 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004516:	4b76      	ldr	r3, [pc, #472]	@ (80046f0 <HAL_RCC_OscConfig+0x4b0>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a75      	ldr	r2, [pc, #468]	@ (80046f0 <HAL_RCC_OscConfig+0x4b0>)
 800451c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004520:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004522:	f7fd fee7 	bl	80022f4 <HAL_GetTick>
 8004526:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004528:	e008      	b.n	800453c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800452a:	f7fd fee3 	bl	80022f4 <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	2b02      	cmp	r3, #2
 8004536:	d901      	bls.n	800453c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e118      	b.n	800476e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800453c:	4b6c      	ldr	r3, [pc, #432]	@ (80046f0 <HAL_RCC_OscConfig+0x4b0>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004544:	2b00      	cmp	r3, #0
 8004546:	d0f0      	beq.n	800452a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d106      	bne.n	800455e <HAL_RCC_OscConfig+0x31e>
 8004550:	4b66      	ldr	r3, [pc, #408]	@ (80046ec <HAL_RCC_OscConfig+0x4ac>)
 8004552:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004554:	4a65      	ldr	r2, [pc, #404]	@ (80046ec <HAL_RCC_OscConfig+0x4ac>)
 8004556:	f043 0301 	orr.w	r3, r3, #1
 800455a:	6713      	str	r3, [r2, #112]	@ 0x70
 800455c:	e01c      	b.n	8004598 <HAL_RCC_OscConfig+0x358>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	2b05      	cmp	r3, #5
 8004564:	d10c      	bne.n	8004580 <HAL_RCC_OscConfig+0x340>
 8004566:	4b61      	ldr	r3, [pc, #388]	@ (80046ec <HAL_RCC_OscConfig+0x4ac>)
 8004568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800456a:	4a60      	ldr	r2, [pc, #384]	@ (80046ec <HAL_RCC_OscConfig+0x4ac>)
 800456c:	f043 0304 	orr.w	r3, r3, #4
 8004570:	6713      	str	r3, [r2, #112]	@ 0x70
 8004572:	4b5e      	ldr	r3, [pc, #376]	@ (80046ec <HAL_RCC_OscConfig+0x4ac>)
 8004574:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004576:	4a5d      	ldr	r2, [pc, #372]	@ (80046ec <HAL_RCC_OscConfig+0x4ac>)
 8004578:	f043 0301 	orr.w	r3, r3, #1
 800457c:	6713      	str	r3, [r2, #112]	@ 0x70
 800457e:	e00b      	b.n	8004598 <HAL_RCC_OscConfig+0x358>
 8004580:	4b5a      	ldr	r3, [pc, #360]	@ (80046ec <HAL_RCC_OscConfig+0x4ac>)
 8004582:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004584:	4a59      	ldr	r2, [pc, #356]	@ (80046ec <HAL_RCC_OscConfig+0x4ac>)
 8004586:	f023 0301 	bic.w	r3, r3, #1
 800458a:	6713      	str	r3, [r2, #112]	@ 0x70
 800458c:	4b57      	ldr	r3, [pc, #348]	@ (80046ec <HAL_RCC_OscConfig+0x4ac>)
 800458e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004590:	4a56      	ldr	r2, [pc, #344]	@ (80046ec <HAL_RCC_OscConfig+0x4ac>)
 8004592:	f023 0304 	bic.w	r3, r3, #4
 8004596:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d015      	beq.n	80045cc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a0:	f7fd fea8 	bl	80022f4 <HAL_GetTick>
 80045a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045a6:	e00a      	b.n	80045be <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045a8:	f7fd fea4 	bl	80022f4 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d901      	bls.n	80045be <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e0d7      	b.n	800476e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045be:	4b4b      	ldr	r3, [pc, #300]	@ (80046ec <HAL_RCC_OscConfig+0x4ac>)
 80045c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d0ee      	beq.n	80045a8 <HAL_RCC_OscConfig+0x368>
 80045ca:	e014      	b.n	80045f6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045cc:	f7fd fe92 	bl	80022f4 <HAL_GetTick>
 80045d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045d2:	e00a      	b.n	80045ea <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045d4:	f7fd fe8e 	bl	80022f4 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e0c1      	b.n	800476e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045ea:	4b40      	ldr	r3, [pc, #256]	@ (80046ec <HAL_RCC_OscConfig+0x4ac>)
 80045ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1ee      	bne.n	80045d4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045f6:	7dfb      	ldrb	r3, [r7, #23]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d105      	bne.n	8004608 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045fc:	4b3b      	ldr	r3, [pc, #236]	@ (80046ec <HAL_RCC_OscConfig+0x4ac>)
 80045fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004600:	4a3a      	ldr	r2, [pc, #232]	@ (80046ec <HAL_RCC_OscConfig+0x4ac>)
 8004602:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004606:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	2b00      	cmp	r3, #0
 800460e:	f000 80ad 	beq.w	800476c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004612:	4b36      	ldr	r3, [pc, #216]	@ (80046ec <HAL_RCC_OscConfig+0x4ac>)
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f003 030c 	and.w	r3, r3, #12
 800461a:	2b08      	cmp	r3, #8
 800461c:	d060      	beq.n	80046e0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	2b02      	cmp	r3, #2
 8004624:	d145      	bne.n	80046b2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004626:	4b33      	ldr	r3, [pc, #204]	@ (80046f4 <HAL_RCC_OscConfig+0x4b4>)
 8004628:	2200      	movs	r2, #0
 800462a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800462c:	f7fd fe62 	bl	80022f4 <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004634:	f7fd fe5e 	bl	80022f4 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e093      	b.n	800476e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004646:	4b29      	ldr	r3, [pc, #164]	@ (80046ec <HAL_RCC_OscConfig+0x4ac>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1f0      	bne.n	8004634 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	69da      	ldr	r2, [r3, #28]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	431a      	orrs	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004660:	019b      	lsls	r3, r3, #6
 8004662:	431a      	orrs	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004668:	085b      	lsrs	r3, r3, #1
 800466a:	3b01      	subs	r3, #1
 800466c:	041b      	lsls	r3, r3, #16
 800466e:	431a      	orrs	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004674:	061b      	lsls	r3, r3, #24
 8004676:	431a      	orrs	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800467c:	071b      	lsls	r3, r3, #28
 800467e:	491b      	ldr	r1, [pc, #108]	@ (80046ec <HAL_RCC_OscConfig+0x4ac>)
 8004680:	4313      	orrs	r3, r2
 8004682:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004684:	4b1b      	ldr	r3, [pc, #108]	@ (80046f4 <HAL_RCC_OscConfig+0x4b4>)
 8004686:	2201      	movs	r2, #1
 8004688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800468a:	f7fd fe33 	bl	80022f4 <HAL_GetTick>
 800468e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004690:	e008      	b.n	80046a4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004692:	f7fd fe2f 	bl	80022f4 <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	2b02      	cmp	r3, #2
 800469e:	d901      	bls.n	80046a4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e064      	b.n	800476e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046a4:	4b11      	ldr	r3, [pc, #68]	@ (80046ec <HAL_RCC_OscConfig+0x4ac>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d0f0      	beq.n	8004692 <HAL_RCC_OscConfig+0x452>
 80046b0:	e05c      	b.n	800476c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046b2:	4b10      	ldr	r3, [pc, #64]	@ (80046f4 <HAL_RCC_OscConfig+0x4b4>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b8:	f7fd fe1c 	bl	80022f4 <HAL_GetTick>
 80046bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046be:	e008      	b.n	80046d2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046c0:	f7fd fe18 	bl	80022f4 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e04d      	b.n	800476e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046d2:	4b06      	ldr	r3, [pc, #24]	@ (80046ec <HAL_RCC_OscConfig+0x4ac>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1f0      	bne.n	80046c0 <HAL_RCC_OscConfig+0x480>
 80046de:	e045      	b.n	800476c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d107      	bne.n	80046f8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e040      	b.n	800476e <HAL_RCC_OscConfig+0x52e>
 80046ec:	40023800 	.word	0x40023800
 80046f0:	40007000 	.word	0x40007000
 80046f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046f8:	4b1f      	ldr	r3, [pc, #124]	@ (8004778 <HAL_RCC_OscConfig+0x538>)
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	2b01      	cmp	r3, #1
 8004704:	d030      	beq.n	8004768 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004710:	429a      	cmp	r2, r3
 8004712:	d129      	bne.n	8004768 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800471e:	429a      	cmp	r2, r3
 8004720:	d122      	bne.n	8004768 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004728:	4013      	ands	r3, r2
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800472e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004730:	4293      	cmp	r3, r2
 8004732:	d119      	bne.n	8004768 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800473e:	085b      	lsrs	r3, r3, #1
 8004740:	3b01      	subs	r3, #1
 8004742:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004744:	429a      	cmp	r2, r3
 8004746:	d10f      	bne.n	8004768 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004752:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004754:	429a      	cmp	r2, r3
 8004756:	d107      	bne.n	8004768 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004762:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004764:	429a      	cmp	r2, r3
 8004766:	d001      	beq.n	800476c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e000      	b.n	800476e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3718      	adds	r7, #24
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	40023800 	.word	0x40023800

0800477c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e041      	b.n	8004812 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b00      	cmp	r3, #0
 8004798:	d106      	bne.n	80047a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f839 	bl	800481a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2202      	movs	r2, #2
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	3304      	adds	r3, #4
 80047b8:	4619      	mov	r1, r3
 80047ba:	4610      	mov	r0, r2
 80047bc:	f000 fb9a 	bl	8004ef4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800481a:	b480      	push	{r7}
 800481c:	b083      	sub	sp, #12
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004822:	bf00      	nop
 8004824:	370c      	adds	r7, #12
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
	...

08004830 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2b01      	cmp	r3, #1
 8004842:	d001      	beq.n	8004848 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e04e      	b.n	80048e6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2202      	movs	r2, #2
 800484c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68da      	ldr	r2, [r3, #12]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f042 0201 	orr.w	r2, r2, #1
 800485e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a23      	ldr	r2, [pc, #140]	@ (80048f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d022      	beq.n	80048b0 <HAL_TIM_Base_Start_IT+0x80>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004872:	d01d      	beq.n	80048b0 <HAL_TIM_Base_Start_IT+0x80>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a1f      	ldr	r2, [pc, #124]	@ (80048f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d018      	beq.n	80048b0 <HAL_TIM_Base_Start_IT+0x80>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a1e      	ldr	r2, [pc, #120]	@ (80048fc <HAL_TIM_Base_Start_IT+0xcc>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d013      	beq.n	80048b0 <HAL_TIM_Base_Start_IT+0x80>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a1c      	ldr	r2, [pc, #112]	@ (8004900 <HAL_TIM_Base_Start_IT+0xd0>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d00e      	beq.n	80048b0 <HAL_TIM_Base_Start_IT+0x80>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a1b      	ldr	r2, [pc, #108]	@ (8004904 <HAL_TIM_Base_Start_IT+0xd4>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d009      	beq.n	80048b0 <HAL_TIM_Base_Start_IT+0x80>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a19      	ldr	r2, [pc, #100]	@ (8004908 <HAL_TIM_Base_Start_IT+0xd8>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d004      	beq.n	80048b0 <HAL_TIM_Base_Start_IT+0x80>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a18      	ldr	r2, [pc, #96]	@ (800490c <HAL_TIM_Base_Start_IT+0xdc>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d111      	bne.n	80048d4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f003 0307 	and.w	r3, r3, #7
 80048ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2b06      	cmp	r3, #6
 80048c0:	d010      	beq.n	80048e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f042 0201 	orr.w	r2, r2, #1
 80048d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048d2:	e007      	b.n	80048e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f042 0201 	orr.w	r2, r2, #1
 80048e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	40010000 	.word	0x40010000
 80048f8:	40000400 	.word	0x40000400
 80048fc:	40000800 	.word	0x40000800
 8004900:	40000c00 	.word	0x40000c00
 8004904:	40010400 	.word	0x40010400
 8004908:	40014000 	.word	0x40014000
 800490c:	40001800 	.word	0x40001800

08004910 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e041      	b.n	80049a6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b00      	cmp	r3, #0
 800492c:	d106      	bne.n	800493c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f7fd fac8 	bl	8001ecc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2202      	movs	r2, #2
 8004940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	3304      	adds	r3, #4
 800494c:	4619      	mov	r1, r3
 800494e:	4610      	mov	r0, r2
 8004950:	f000 fad0 	bl	8004ef4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3708      	adds	r7, #8
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
	...

080049b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d109      	bne.n	80049d4 <HAL_TIM_PWM_Start+0x24>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	bf14      	ite	ne
 80049cc:	2301      	movne	r3, #1
 80049ce:	2300      	moveq	r3, #0
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	e022      	b.n	8004a1a <HAL_TIM_PWM_Start+0x6a>
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	2b04      	cmp	r3, #4
 80049d8:	d109      	bne.n	80049ee <HAL_TIM_PWM_Start+0x3e>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	bf14      	ite	ne
 80049e6:	2301      	movne	r3, #1
 80049e8:	2300      	moveq	r3, #0
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	e015      	b.n	8004a1a <HAL_TIM_PWM_Start+0x6a>
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	2b08      	cmp	r3, #8
 80049f2:	d109      	bne.n	8004a08 <HAL_TIM_PWM_Start+0x58>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	bf14      	ite	ne
 8004a00:	2301      	movne	r3, #1
 8004a02:	2300      	moveq	r3, #0
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	e008      	b.n	8004a1a <HAL_TIM_PWM_Start+0x6a>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	bf14      	ite	ne
 8004a14:	2301      	movne	r3, #1
 8004a16:	2300      	moveq	r3, #0
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e07c      	b.n	8004b1c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d104      	bne.n	8004a32 <HAL_TIM_PWM_Start+0x82>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a30:	e013      	b.n	8004a5a <HAL_TIM_PWM_Start+0xaa>
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	2b04      	cmp	r3, #4
 8004a36:	d104      	bne.n	8004a42 <HAL_TIM_PWM_Start+0x92>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a40:	e00b      	b.n	8004a5a <HAL_TIM_PWM_Start+0xaa>
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	2b08      	cmp	r3, #8
 8004a46:	d104      	bne.n	8004a52 <HAL_TIM_PWM_Start+0xa2>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a50:	e003      	b.n	8004a5a <HAL_TIM_PWM_Start+0xaa>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2202      	movs	r2, #2
 8004a56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	6839      	ldr	r1, [r7, #0]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 fca2 	bl	80053ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a2d      	ldr	r2, [pc, #180]	@ (8004b24 <HAL_TIM_PWM_Start+0x174>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d004      	beq.n	8004a7c <HAL_TIM_PWM_Start+0xcc>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a2c      	ldr	r2, [pc, #176]	@ (8004b28 <HAL_TIM_PWM_Start+0x178>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d101      	bne.n	8004a80 <HAL_TIM_PWM_Start+0xd0>
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e000      	b.n	8004a82 <HAL_TIM_PWM_Start+0xd2>
 8004a80:	2300      	movs	r3, #0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d007      	beq.n	8004a96 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a94:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a22      	ldr	r2, [pc, #136]	@ (8004b24 <HAL_TIM_PWM_Start+0x174>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d022      	beq.n	8004ae6 <HAL_TIM_PWM_Start+0x136>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aa8:	d01d      	beq.n	8004ae6 <HAL_TIM_PWM_Start+0x136>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a1f      	ldr	r2, [pc, #124]	@ (8004b2c <HAL_TIM_PWM_Start+0x17c>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d018      	beq.n	8004ae6 <HAL_TIM_PWM_Start+0x136>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a1d      	ldr	r2, [pc, #116]	@ (8004b30 <HAL_TIM_PWM_Start+0x180>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d013      	beq.n	8004ae6 <HAL_TIM_PWM_Start+0x136>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a1c      	ldr	r2, [pc, #112]	@ (8004b34 <HAL_TIM_PWM_Start+0x184>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d00e      	beq.n	8004ae6 <HAL_TIM_PWM_Start+0x136>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a16      	ldr	r2, [pc, #88]	@ (8004b28 <HAL_TIM_PWM_Start+0x178>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d009      	beq.n	8004ae6 <HAL_TIM_PWM_Start+0x136>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a18      	ldr	r2, [pc, #96]	@ (8004b38 <HAL_TIM_PWM_Start+0x188>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d004      	beq.n	8004ae6 <HAL_TIM_PWM_Start+0x136>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a16      	ldr	r2, [pc, #88]	@ (8004b3c <HAL_TIM_PWM_Start+0x18c>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d111      	bne.n	8004b0a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f003 0307 	and.w	r3, r3, #7
 8004af0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2b06      	cmp	r3, #6
 8004af6:	d010      	beq.n	8004b1a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f042 0201 	orr.w	r2, r2, #1
 8004b06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b08:	e007      	b.n	8004b1a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f042 0201 	orr.w	r2, r2, #1
 8004b18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	40010000 	.word	0x40010000
 8004b28:	40010400 	.word	0x40010400
 8004b2c:	40000400 	.word	0x40000400
 8004b30:	40000800 	.word	0x40000800
 8004b34:	40000c00 	.word	0x40000c00
 8004b38:	40014000 	.word	0x40014000
 8004b3c:	40001800 	.word	0x40001800

08004b40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	f003 0302 	and.w	r3, r3, #2
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d020      	beq.n	8004ba4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f003 0302 	and.w	r3, r3, #2
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d01b      	beq.n	8004ba4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f06f 0202 	mvn.w	r2, #2
 8004b74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	f003 0303 	and.w	r3, r3, #3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d003      	beq.n	8004b92 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f994 	bl	8004eb8 <HAL_TIM_IC_CaptureCallback>
 8004b90:	e005      	b.n	8004b9e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f986 	bl	8004ea4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 f997 	bl	8004ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	f003 0304 	and.w	r3, r3, #4
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d020      	beq.n	8004bf0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f003 0304 	and.w	r3, r3, #4
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d01b      	beq.n	8004bf0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f06f 0204 	mvn.w	r2, #4
 8004bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2202      	movs	r2, #2
 8004bc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d003      	beq.n	8004bde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 f96e 	bl	8004eb8 <HAL_TIM_IC_CaptureCallback>
 8004bdc:	e005      	b.n	8004bea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 f960 	bl	8004ea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 f971 	bl	8004ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	f003 0308 	and.w	r3, r3, #8
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d020      	beq.n	8004c3c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f003 0308 	and.w	r3, r3, #8
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d01b      	beq.n	8004c3c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f06f 0208 	mvn.w	r2, #8
 8004c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2204      	movs	r2, #4
 8004c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	69db      	ldr	r3, [r3, #28]
 8004c1a:	f003 0303 	and.w	r3, r3, #3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d003      	beq.n	8004c2a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 f948 	bl	8004eb8 <HAL_TIM_IC_CaptureCallback>
 8004c28:	e005      	b.n	8004c36 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f93a 	bl	8004ea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 f94b 	bl	8004ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	f003 0310 	and.w	r3, r3, #16
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d020      	beq.n	8004c88 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f003 0310 	and.w	r3, r3, #16
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d01b      	beq.n	8004c88 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f06f 0210 	mvn.w	r2, #16
 8004c58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2208      	movs	r2, #8
 8004c5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d003      	beq.n	8004c76 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f922 	bl	8004eb8 <HAL_TIM_IC_CaptureCallback>
 8004c74:	e005      	b.n	8004c82 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 f914 	bl	8004ea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 f925 	bl	8004ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00c      	beq.n	8004cac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f003 0301 	and.w	r3, r3, #1
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d007      	beq.n	8004cac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f06f 0201 	mvn.w	r2, #1
 8004ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f7fc fe5c 	bl	8001964 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00c      	beq.n	8004cd0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d007      	beq.n	8004cd0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 fc1a 	bl	8005504 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00c      	beq.n	8004cf4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d007      	beq.n	8004cf4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 f8f6 	bl	8004ee0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	f003 0320 	and.w	r3, r3, #32
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00c      	beq.n	8004d18 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f003 0320 	and.w	r3, r3, #32
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d007      	beq.n	8004d18 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f06f 0220 	mvn.w	r2, #32
 8004d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 fbec 	bl	80054f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d18:	bf00      	nop
 8004d1a:	3710      	adds	r7, #16
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b086      	sub	sp, #24
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d101      	bne.n	8004d3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d3a:	2302      	movs	r3, #2
 8004d3c:	e0ae      	b.n	8004e9c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2b0c      	cmp	r3, #12
 8004d4a:	f200 809f 	bhi.w	8004e8c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8004d54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d54:	08004d89 	.word	0x08004d89
 8004d58:	08004e8d 	.word	0x08004e8d
 8004d5c:	08004e8d 	.word	0x08004e8d
 8004d60:	08004e8d 	.word	0x08004e8d
 8004d64:	08004dc9 	.word	0x08004dc9
 8004d68:	08004e8d 	.word	0x08004e8d
 8004d6c:	08004e8d 	.word	0x08004e8d
 8004d70:	08004e8d 	.word	0x08004e8d
 8004d74:	08004e0b 	.word	0x08004e0b
 8004d78:	08004e8d 	.word	0x08004e8d
 8004d7c:	08004e8d 	.word	0x08004e8d
 8004d80:	08004e8d 	.word	0x08004e8d
 8004d84:	08004e4b 	.word	0x08004e4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68b9      	ldr	r1, [r7, #8]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f000 f95c 	bl	800504c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	699a      	ldr	r2, [r3, #24]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f042 0208 	orr.w	r2, r2, #8
 8004da2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	699a      	ldr	r2, [r3, #24]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f022 0204 	bic.w	r2, r2, #4
 8004db2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6999      	ldr	r1, [r3, #24]
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	691a      	ldr	r2, [r3, #16]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	619a      	str	r2, [r3, #24]
      break;
 8004dc6:	e064      	b.n	8004e92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68b9      	ldr	r1, [r7, #8]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f000 f9ac 	bl	800512c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	699a      	ldr	r2, [r3, #24]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004de2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	699a      	ldr	r2, [r3, #24]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004df2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	6999      	ldr	r1, [r3, #24]
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	021a      	lsls	r2, r3, #8
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	430a      	orrs	r2, r1
 8004e06:	619a      	str	r2, [r3, #24]
      break;
 8004e08:	e043      	b.n	8004e92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68b9      	ldr	r1, [r7, #8]
 8004e10:	4618      	mov	r0, r3
 8004e12:	f000 fa01 	bl	8005218 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	69da      	ldr	r2, [r3, #28]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f042 0208 	orr.w	r2, r2, #8
 8004e24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	69da      	ldr	r2, [r3, #28]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f022 0204 	bic.w	r2, r2, #4
 8004e34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	69d9      	ldr	r1, [r3, #28]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	691a      	ldr	r2, [r3, #16]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	430a      	orrs	r2, r1
 8004e46:	61da      	str	r2, [r3, #28]
      break;
 8004e48:	e023      	b.n	8004e92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68b9      	ldr	r1, [r7, #8]
 8004e50:	4618      	mov	r0, r3
 8004e52:	f000 fa55 	bl	8005300 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	69da      	ldr	r2, [r3, #28]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	69da      	ldr	r2, [r3, #28]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	69d9      	ldr	r1, [r3, #28]
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	021a      	lsls	r2, r3, #8
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	430a      	orrs	r2, r1
 8004e88:	61da      	str	r2, [r3, #28]
      break;
 8004e8a:	e002      	b.n	8004e92 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	75fb      	strb	r3, [r7, #23]
      break;
 8004e90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3718      	adds	r7, #24
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ee8:	bf00      	nop
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a46      	ldr	r2, [pc, #280]	@ (8005020 <TIM_Base_SetConfig+0x12c>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d013      	beq.n	8004f34 <TIM_Base_SetConfig+0x40>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f12:	d00f      	beq.n	8004f34 <TIM_Base_SetConfig+0x40>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a43      	ldr	r2, [pc, #268]	@ (8005024 <TIM_Base_SetConfig+0x130>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d00b      	beq.n	8004f34 <TIM_Base_SetConfig+0x40>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a42      	ldr	r2, [pc, #264]	@ (8005028 <TIM_Base_SetConfig+0x134>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d007      	beq.n	8004f34 <TIM_Base_SetConfig+0x40>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a41      	ldr	r2, [pc, #260]	@ (800502c <TIM_Base_SetConfig+0x138>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d003      	beq.n	8004f34 <TIM_Base_SetConfig+0x40>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a40      	ldr	r2, [pc, #256]	@ (8005030 <TIM_Base_SetConfig+0x13c>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d108      	bne.n	8004f46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a35      	ldr	r2, [pc, #212]	@ (8005020 <TIM_Base_SetConfig+0x12c>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d02b      	beq.n	8004fa6 <TIM_Base_SetConfig+0xb2>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f54:	d027      	beq.n	8004fa6 <TIM_Base_SetConfig+0xb2>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a32      	ldr	r2, [pc, #200]	@ (8005024 <TIM_Base_SetConfig+0x130>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d023      	beq.n	8004fa6 <TIM_Base_SetConfig+0xb2>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a31      	ldr	r2, [pc, #196]	@ (8005028 <TIM_Base_SetConfig+0x134>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d01f      	beq.n	8004fa6 <TIM_Base_SetConfig+0xb2>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a30      	ldr	r2, [pc, #192]	@ (800502c <TIM_Base_SetConfig+0x138>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d01b      	beq.n	8004fa6 <TIM_Base_SetConfig+0xb2>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a2f      	ldr	r2, [pc, #188]	@ (8005030 <TIM_Base_SetConfig+0x13c>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d017      	beq.n	8004fa6 <TIM_Base_SetConfig+0xb2>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a2e      	ldr	r2, [pc, #184]	@ (8005034 <TIM_Base_SetConfig+0x140>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d013      	beq.n	8004fa6 <TIM_Base_SetConfig+0xb2>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a2d      	ldr	r2, [pc, #180]	@ (8005038 <TIM_Base_SetConfig+0x144>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d00f      	beq.n	8004fa6 <TIM_Base_SetConfig+0xb2>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a2c      	ldr	r2, [pc, #176]	@ (800503c <TIM_Base_SetConfig+0x148>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d00b      	beq.n	8004fa6 <TIM_Base_SetConfig+0xb2>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a2b      	ldr	r2, [pc, #172]	@ (8005040 <TIM_Base_SetConfig+0x14c>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d007      	beq.n	8004fa6 <TIM_Base_SetConfig+0xb2>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a2a      	ldr	r2, [pc, #168]	@ (8005044 <TIM_Base_SetConfig+0x150>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d003      	beq.n	8004fa6 <TIM_Base_SetConfig+0xb2>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a29      	ldr	r2, [pc, #164]	@ (8005048 <TIM_Base_SetConfig+0x154>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d108      	bne.n	8004fb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	689a      	ldr	r2, [r3, #8]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a10      	ldr	r2, [pc, #64]	@ (8005020 <TIM_Base_SetConfig+0x12c>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d003      	beq.n	8004fec <TIM_Base_SetConfig+0xf8>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a12      	ldr	r2, [pc, #72]	@ (8005030 <TIM_Base_SetConfig+0x13c>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d103      	bne.n	8004ff4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	691a      	ldr	r2, [r3, #16]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	2b01      	cmp	r3, #1
 8005004:	d105      	bne.n	8005012 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	f023 0201 	bic.w	r2, r3, #1
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	611a      	str	r2, [r3, #16]
  }
}
 8005012:	bf00      	nop
 8005014:	3714      	adds	r7, #20
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	40010000 	.word	0x40010000
 8005024:	40000400 	.word	0x40000400
 8005028:	40000800 	.word	0x40000800
 800502c:	40000c00 	.word	0x40000c00
 8005030:	40010400 	.word	0x40010400
 8005034:	40014000 	.word	0x40014000
 8005038:	40014400 	.word	0x40014400
 800503c:	40014800 	.word	0x40014800
 8005040:	40001800 	.word	0x40001800
 8005044:	40001c00 	.word	0x40001c00
 8005048:	40002000 	.word	0x40002000

0800504c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800504c:	b480      	push	{r7}
 800504e:	b087      	sub	sp, #28
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a1b      	ldr	r3, [r3, #32]
 8005060:	f023 0201 	bic.w	r2, r3, #1
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800507a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f023 0303 	bic.w	r3, r3, #3
 8005082:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	4313      	orrs	r3, r2
 800508c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f023 0302 	bic.w	r3, r3, #2
 8005094:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	4313      	orrs	r3, r2
 800509e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a20      	ldr	r2, [pc, #128]	@ (8005124 <TIM_OC1_SetConfig+0xd8>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d003      	beq.n	80050b0 <TIM_OC1_SetConfig+0x64>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a1f      	ldr	r2, [pc, #124]	@ (8005128 <TIM_OC1_SetConfig+0xdc>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d10c      	bne.n	80050ca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	f023 0308 	bic.w	r3, r3, #8
 80050b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	4313      	orrs	r3, r2
 80050c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	f023 0304 	bic.w	r3, r3, #4
 80050c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a15      	ldr	r2, [pc, #84]	@ (8005124 <TIM_OC1_SetConfig+0xd8>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d003      	beq.n	80050da <TIM_OC1_SetConfig+0x8e>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a14      	ldr	r2, [pc, #80]	@ (8005128 <TIM_OC1_SetConfig+0xdc>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d111      	bne.n	80050fe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80050e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	685a      	ldr	r2, [r3, #4]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	697a      	ldr	r2, [r7, #20]
 8005116:	621a      	str	r2, [r3, #32]
}
 8005118:	bf00      	nop
 800511a:	371c      	adds	r7, #28
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr
 8005124:	40010000 	.word	0x40010000
 8005128:	40010400 	.word	0x40010400

0800512c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800512c:	b480      	push	{r7}
 800512e:	b087      	sub	sp, #28
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a1b      	ldr	r3, [r3, #32]
 8005140:	f023 0210 	bic.w	r2, r3, #16
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800515a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005162:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	021b      	lsls	r3, r3, #8
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	4313      	orrs	r3, r2
 800516e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	f023 0320 	bic.w	r3, r3, #32
 8005176:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	011b      	lsls	r3, r3, #4
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	4313      	orrs	r3, r2
 8005182:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a22      	ldr	r2, [pc, #136]	@ (8005210 <TIM_OC2_SetConfig+0xe4>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d003      	beq.n	8005194 <TIM_OC2_SetConfig+0x68>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a21      	ldr	r2, [pc, #132]	@ (8005214 <TIM_OC2_SetConfig+0xe8>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d10d      	bne.n	80051b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800519a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	011b      	lsls	r3, r3, #4
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a17      	ldr	r2, [pc, #92]	@ (8005210 <TIM_OC2_SetConfig+0xe4>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d003      	beq.n	80051c0 <TIM_OC2_SetConfig+0x94>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a16      	ldr	r2, [pc, #88]	@ (8005214 <TIM_OC2_SetConfig+0xe8>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d113      	bne.n	80051e8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80051c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80051ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	695b      	ldr	r3, [r3, #20]
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	693a      	ldr	r2, [r7, #16]
 80051d8:	4313      	orrs	r3, r2
 80051da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	693a      	ldr	r2, [r7, #16]
 80051ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	685a      	ldr	r2, [r3, #4]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	621a      	str	r2, [r3, #32]
}
 8005202:	bf00      	nop
 8005204:	371c      	adds	r7, #28
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	40010000 	.word	0x40010000
 8005214:	40010400 	.word	0x40010400

08005218 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005218:	b480      	push	{r7}
 800521a:	b087      	sub	sp, #28
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a1b      	ldr	r3, [r3, #32]
 800522c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	69db      	ldr	r3, [r3, #28]
 800523e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f023 0303 	bic.w	r3, r3, #3
 800524e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	4313      	orrs	r3, r2
 8005258:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005260:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	021b      	lsls	r3, r3, #8
 8005268:	697a      	ldr	r2, [r7, #20]
 800526a:	4313      	orrs	r3, r2
 800526c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a21      	ldr	r2, [pc, #132]	@ (80052f8 <TIM_OC3_SetConfig+0xe0>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d003      	beq.n	800527e <TIM_OC3_SetConfig+0x66>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a20      	ldr	r2, [pc, #128]	@ (80052fc <TIM_OC3_SetConfig+0xe4>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d10d      	bne.n	800529a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005284:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	021b      	lsls	r3, r3, #8
 800528c:	697a      	ldr	r2, [r7, #20]
 800528e:	4313      	orrs	r3, r2
 8005290:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005298:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a16      	ldr	r2, [pc, #88]	@ (80052f8 <TIM_OC3_SetConfig+0xe0>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d003      	beq.n	80052aa <TIM_OC3_SetConfig+0x92>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a15      	ldr	r2, [pc, #84]	@ (80052fc <TIM_OC3_SetConfig+0xe4>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d113      	bne.n	80052d2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80052b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80052b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	011b      	lsls	r3, r3, #4
 80052c0:	693a      	ldr	r2, [r7, #16]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	011b      	lsls	r3, r3, #4
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	685a      	ldr	r2, [r3, #4]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	621a      	str	r2, [r3, #32]
}
 80052ec:	bf00      	nop
 80052ee:	371c      	adds	r7, #28
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr
 80052f8:	40010000 	.word	0x40010000
 80052fc:	40010400 	.word	0x40010400

08005300 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005300:	b480      	push	{r7}
 8005302:	b087      	sub	sp, #28
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a1b      	ldr	r3, [r3, #32]
 800530e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a1b      	ldr	r3, [r3, #32]
 8005314:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	69db      	ldr	r3, [r3, #28]
 8005326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800532e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005336:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	021b      	lsls	r3, r3, #8
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	4313      	orrs	r3, r2
 8005342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800534a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	031b      	lsls	r3, r3, #12
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	4313      	orrs	r3, r2
 8005356:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a12      	ldr	r2, [pc, #72]	@ (80053a4 <TIM_OC4_SetConfig+0xa4>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d003      	beq.n	8005368 <TIM_OC4_SetConfig+0x68>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a11      	ldr	r2, [pc, #68]	@ (80053a8 <TIM_OC4_SetConfig+0xa8>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d109      	bne.n	800537c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800536e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	695b      	ldr	r3, [r3, #20]
 8005374:	019b      	lsls	r3, r3, #6
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	4313      	orrs	r3, r2
 800537a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	685a      	ldr	r2, [r3, #4]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	621a      	str	r2, [r3, #32]
}
 8005396:	bf00      	nop
 8005398:	371c      	adds	r7, #28
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	40010000 	.word	0x40010000
 80053a8:	40010400 	.word	0x40010400

080053ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b087      	sub	sp, #28
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	f003 031f 	and.w	r3, r3, #31
 80053be:	2201      	movs	r2, #1
 80053c0:	fa02 f303 	lsl.w	r3, r2, r3
 80053c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6a1a      	ldr	r2, [r3, #32]
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	43db      	mvns	r3, r3
 80053ce:	401a      	ands	r2, r3
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6a1a      	ldr	r2, [r3, #32]
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	f003 031f 	and.w	r3, r3, #31
 80053de:	6879      	ldr	r1, [r7, #4]
 80053e0:	fa01 f303 	lsl.w	r3, r1, r3
 80053e4:	431a      	orrs	r2, r3
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	621a      	str	r2, [r3, #32]
}
 80053ea:	bf00      	nop
 80053ec:	371c      	adds	r7, #28
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
	...

080053f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005408:	2b01      	cmp	r3, #1
 800540a:	d101      	bne.n	8005410 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800540c:	2302      	movs	r3, #2
 800540e:	e05a      	b.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2202      	movs	r2, #2
 800541c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005436:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	4313      	orrs	r3, r2
 8005440:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a21      	ldr	r2, [pc, #132]	@ (80054d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d022      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800545c:	d01d      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a1d      	ldr	r2, [pc, #116]	@ (80054d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d018      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a1b      	ldr	r2, [pc, #108]	@ (80054dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d013      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a1a      	ldr	r2, [pc, #104]	@ (80054e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d00e      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a18      	ldr	r2, [pc, #96]	@ (80054e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d009      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a17      	ldr	r2, [pc, #92]	@ (80054e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d004      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a15      	ldr	r2, [pc, #84]	@ (80054ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d10c      	bne.n	80054b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	68ba      	ldr	r2, [r7, #8]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3714      	adds	r7, #20
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	40010000 	.word	0x40010000
 80054d8:	40000400 	.word	0x40000400
 80054dc:	40000800 	.word	0x40000800
 80054e0:	40000c00 	.word	0x40000c00
 80054e4:	40010400 	.word	0x40010400
 80054e8:	40014000 	.word	0x40014000
 80054ec:	40001800 	.word	0x40001800

080054f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800550c:	bf00      	nop
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d101      	bne.n	800552a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e042      	b.n	80055b0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005530:	b2db      	uxtb	r3, r3
 8005532:	2b00      	cmp	r3, #0
 8005534:	d106      	bne.n	8005544 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f7fc fd40 	bl	8001fc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2224      	movs	r2, #36	@ 0x24
 8005548:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68da      	ldr	r2, [r3, #12]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800555a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 f973 	bl	8005848 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	691a      	ldr	r2, [r3, #16]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005570:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	695a      	ldr	r2, [r3, #20]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005580:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68da      	ldr	r2, [r3, #12]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005590:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2220      	movs	r2, #32
 800559c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2220      	movs	r2, #32
 80055a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3708      	adds	r7, #8
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b08a      	sub	sp, #40	@ 0x28
 80055bc:	af02      	add	r7, sp, #8
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	603b      	str	r3, [r7, #0]
 80055c4:	4613      	mov	r3, r2
 80055c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80055c8:	2300      	movs	r3, #0
 80055ca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2b20      	cmp	r3, #32
 80055d6:	d175      	bne.n	80056c4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d002      	beq.n	80055e4 <HAL_UART_Transmit+0x2c>
 80055de:	88fb      	ldrh	r3, [r7, #6]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d101      	bne.n	80055e8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e06e      	b.n	80056c6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2221      	movs	r2, #33	@ 0x21
 80055f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055f6:	f7fc fe7d 	bl	80022f4 <HAL_GetTick>
 80055fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	88fa      	ldrh	r2, [r7, #6]
 8005600:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	88fa      	ldrh	r2, [r7, #6]
 8005606:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005610:	d108      	bne.n	8005624 <HAL_UART_Transmit+0x6c>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d104      	bne.n	8005624 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800561a:	2300      	movs	r3, #0
 800561c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	61bb      	str	r3, [r7, #24]
 8005622:	e003      	b.n	800562c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005628:	2300      	movs	r3, #0
 800562a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800562c:	e02e      	b.n	800568c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	9300      	str	r3, [sp, #0]
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	2200      	movs	r2, #0
 8005636:	2180      	movs	r1, #128	@ 0x80
 8005638:	68f8      	ldr	r0, [r7, #12]
 800563a:	f000 f848 	bl	80056ce <UART_WaitOnFlagUntilTimeout>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d005      	beq.n	8005650 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2220      	movs	r2, #32
 8005648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e03a      	b.n	80056c6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10b      	bne.n	800566e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	881b      	ldrh	r3, [r3, #0]
 800565a:	461a      	mov	r2, r3
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005664:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	3302      	adds	r3, #2
 800566a:	61bb      	str	r3, [r7, #24]
 800566c:	e007      	b.n	800567e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	781a      	ldrb	r2, [r3, #0]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	3301      	adds	r3, #1
 800567c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005682:	b29b      	uxth	r3, r3
 8005684:	3b01      	subs	r3, #1
 8005686:	b29a      	uxth	r2, r3
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005690:	b29b      	uxth	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1cb      	bne.n	800562e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	9300      	str	r3, [sp, #0]
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	2200      	movs	r2, #0
 800569e:	2140      	movs	r1, #64	@ 0x40
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f000 f814 	bl	80056ce <UART_WaitOnFlagUntilTimeout>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d005      	beq.n	80056b8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2220      	movs	r2, #32
 80056b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e006      	b.n	80056c6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2220      	movs	r2, #32
 80056bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80056c0:	2300      	movs	r3, #0
 80056c2:	e000      	b.n	80056c6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80056c4:	2302      	movs	r3, #2
  }
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3720      	adds	r7, #32
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}

080056ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b086      	sub	sp, #24
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	60f8      	str	r0, [r7, #12]
 80056d6:	60b9      	str	r1, [r7, #8]
 80056d8:	603b      	str	r3, [r7, #0]
 80056da:	4613      	mov	r3, r2
 80056dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056de:	e03b      	b.n	8005758 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056e0:	6a3b      	ldr	r3, [r7, #32]
 80056e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056e6:	d037      	beq.n	8005758 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056e8:	f7fc fe04 	bl	80022f4 <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	6a3a      	ldr	r2, [r7, #32]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d302      	bcc.n	80056fe <UART_WaitOnFlagUntilTimeout+0x30>
 80056f8:	6a3b      	ldr	r3, [r7, #32]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d101      	bne.n	8005702 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e03a      	b.n	8005778 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	f003 0304 	and.w	r3, r3, #4
 800570c:	2b00      	cmp	r3, #0
 800570e:	d023      	beq.n	8005758 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	2b80      	cmp	r3, #128	@ 0x80
 8005714:	d020      	beq.n	8005758 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	2b40      	cmp	r3, #64	@ 0x40
 800571a:	d01d      	beq.n	8005758 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0308 	and.w	r3, r3, #8
 8005726:	2b08      	cmp	r3, #8
 8005728:	d116      	bne.n	8005758 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800572a:	2300      	movs	r3, #0
 800572c:	617b      	str	r3, [r7, #20]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	617b      	str	r3, [r7, #20]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	617b      	str	r3, [r7, #20]
 800573e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f000 f81d 	bl	8005780 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2208      	movs	r2, #8
 800574a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e00f      	b.n	8005778 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	4013      	ands	r3, r2
 8005762:	68ba      	ldr	r2, [r7, #8]
 8005764:	429a      	cmp	r2, r3
 8005766:	bf0c      	ite	eq
 8005768:	2301      	moveq	r3, #1
 800576a:	2300      	movne	r3, #0
 800576c:	b2db      	uxtb	r3, r3
 800576e:	461a      	mov	r2, r3
 8005770:	79fb      	ldrb	r3, [r7, #7]
 8005772:	429a      	cmp	r2, r3
 8005774:	d0b4      	beq.n	80056e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005776:	2300      	movs	r3, #0
}
 8005778:	4618      	mov	r0, r3
 800577a:	3718      	adds	r7, #24
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005780:	b480      	push	{r7}
 8005782:	b095      	sub	sp, #84	@ 0x54
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	330c      	adds	r3, #12
 800578e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005792:	e853 3f00 	ldrex	r3, [r3]
 8005796:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800579a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800579e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	330c      	adds	r3, #12
 80057a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80057a8:	643a      	str	r2, [r7, #64]	@ 0x40
 80057aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80057ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80057b0:	e841 2300 	strex	r3, r2, [r1]
 80057b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80057b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1e5      	bne.n	8005788 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	3314      	adds	r3, #20
 80057c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c4:	6a3b      	ldr	r3, [r7, #32]
 80057c6:	e853 3f00 	ldrex	r3, [r3]
 80057ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	f023 0301 	bic.w	r3, r3, #1
 80057d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	3314      	adds	r3, #20
 80057da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80057e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057e4:	e841 2300 	strex	r3, r2, [r1]
 80057e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80057ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d1e5      	bne.n	80057bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d119      	bne.n	800582c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	330c      	adds	r3, #12
 80057fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	e853 3f00 	ldrex	r3, [r3]
 8005806:	60bb      	str	r3, [r7, #8]
   return(result);
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	f023 0310 	bic.w	r3, r3, #16
 800580e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	330c      	adds	r3, #12
 8005816:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005818:	61ba      	str	r2, [r7, #24]
 800581a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581c:	6979      	ldr	r1, [r7, #20]
 800581e:	69ba      	ldr	r2, [r7, #24]
 8005820:	e841 2300 	strex	r3, r2, [r1]
 8005824:	613b      	str	r3, [r7, #16]
   return(result);
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d1e5      	bne.n	80057f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2220      	movs	r2, #32
 8005830:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800583a:	bf00      	nop
 800583c:	3754      	adds	r7, #84	@ 0x54
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
	...

08005848 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005848:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800584c:	b0c0      	sub	sp, #256	@ 0x100
 800584e:	af00      	add	r7, sp, #0
 8005850:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005864:	68d9      	ldr	r1, [r3, #12]
 8005866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	ea40 0301 	orr.w	r3, r0, r1
 8005870:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005876:	689a      	ldr	r2, [r3, #8]
 8005878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	431a      	orrs	r2, r3
 8005880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005884:	695b      	ldr	r3, [r3, #20]
 8005886:	431a      	orrs	r2, r3
 8005888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800588c:	69db      	ldr	r3, [r3, #28]
 800588e:	4313      	orrs	r3, r2
 8005890:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80058a0:	f021 010c 	bic.w	r1, r1, #12
 80058a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80058ae:	430b      	orrs	r3, r1
 80058b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	695b      	ldr	r3, [r3, #20]
 80058ba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80058be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058c2:	6999      	ldr	r1, [r3, #24]
 80058c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	ea40 0301 	orr.w	r3, r0, r1
 80058ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	4b8f      	ldr	r3, [pc, #572]	@ (8005b14 <UART_SetConfig+0x2cc>)
 80058d8:	429a      	cmp	r2, r3
 80058da:	d005      	beq.n	80058e8 <UART_SetConfig+0xa0>
 80058dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	4b8d      	ldr	r3, [pc, #564]	@ (8005b18 <UART_SetConfig+0x2d0>)
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d104      	bne.n	80058f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80058e8:	f7fe fa34 	bl	8003d54 <HAL_RCC_GetPCLK2Freq>
 80058ec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80058f0:	e003      	b.n	80058fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80058f2:	f7fe fa1b 	bl	8003d2c <HAL_RCC_GetPCLK1Freq>
 80058f6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058fe:	69db      	ldr	r3, [r3, #28]
 8005900:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005904:	f040 810c 	bne.w	8005b20 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005908:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800590c:	2200      	movs	r2, #0
 800590e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005912:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005916:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800591a:	4622      	mov	r2, r4
 800591c:	462b      	mov	r3, r5
 800591e:	1891      	adds	r1, r2, r2
 8005920:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005922:	415b      	adcs	r3, r3
 8005924:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005926:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800592a:	4621      	mov	r1, r4
 800592c:	eb12 0801 	adds.w	r8, r2, r1
 8005930:	4629      	mov	r1, r5
 8005932:	eb43 0901 	adc.w	r9, r3, r1
 8005936:	f04f 0200 	mov.w	r2, #0
 800593a:	f04f 0300 	mov.w	r3, #0
 800593e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005942:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005946:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800594a:	4690      	mov	r8, r2
 800594c:	4699      	mov	r9, r3
 800594e:	4623      	mov	r3, r4
 8005950:	eb18 0303 	adds.w	r3, r8, r3
 8005954:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005958:	462b      	mov	r3, r5
 800595a:	eb49 0303 	adc.w	r3, r9, r3
 800595e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800596e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005972:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005976:	460b      	mov	r3, r1
 8005978:	18db      	adds	r3, r3, r3
 800597a:	653b      	str	r3, [r7, #80]	@ 0x50
 800597c:	4613      	mov	r3, r2
 800597e:	eb42 0303 	adc.w	r3, r2, r3
 8005982:	657b      	str	r3, [r7, #84]	@ 0x54
 8005984:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005988:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800598c:	f7fb f93e 	bl	8000c0c <__aeabi_uldivmod>
 8005990:	4602      	mov	r2, r0
 8005992:	460b      	mov	r3, r1
 8005994:	4b61      	ldr	r3, [pc, #388]	@ (8005b1c <UART_SetConfig+0x2d4>)
 8005996:	fba3 2302 	umull	r2, r3, r3, r2
 800599a:	095b      	lsrs	r3, r3, #5
 800599c:	011c      	lsls	r4, r3, #4
 800599e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059a2:	2200      	movs	r2, #0
 80059a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80059a8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80059ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80059b0:	4642      	mov	r2, r8
 80059b2:	464b      	mov	r3, r9
 80059b4:	1891      	adds	r1, r2, r2
 80059b6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80059b8:	415b      	adcs	r3, r3
 80059ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80059c0:	4641      	mov	r1, r8
 80059c2:	eb12 0a01 	adds.w	sl, r2, r1
 80059c6:	4649      	mov	r1, r9
 80059c8:	eb43 0b01 	adc.w	fp, r3, r1
 80059cc:	f04f 0200 	mov.w	r2, #0
 80059d0:	f04f 0300 	mov.w	r3, #0
 80059d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80059d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80059dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059e0:	4692      	mov	sl, r2
 80059e2:	469b      	mov	fp, r3
 80059e4:	4643      	mov	r3, r8
 80059e6:	eb1a 0303 	adds.w	r3, sl, r3
 80059ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80059ee:	464b      	mov	r3, r9
 80059f0:	eb4b 0303 	adc.w	r3, fp, r3
 80059f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80059f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a04:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005a08:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	18db      	adds	r3, r3, r3
 8005a10:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a12:	4613      	mov	r3, r2
 8005a14:	eb42 0303 	adc.w	r3, r2, r3
 8005a18:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005a1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005a22:	f7fb f8f3 	bl	8000c0c <__aeabi_uldivmod>
 8005a26:	4602      	mov	r2, r0
 8005a28:	460b      	mov	r3, r1
 8005a2a:	4611      	mov	r1, r2
 8005a2c:	4b3b      	ldr	r3, [pc, #236]	@ (8005b1c <UART_SetConfig+0x2d4>)
 8005a2e:	fba3 2301 	umull	r2, r3, r3, r1
 8005a32:	095b      	lsrs	r3, r3, #5
 8005a34:	2264      	movs	r2, #100	@ 0x64
 8005a36:	fb02 f303 	mul.w	r3, r2, r3
 8005a3a:	1acb      	subs	r3, r1, r3
 8005a3c:	00db      	lsls	r3, r3, #3
 8005a3e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005a42:	4b36      	ldr	r3, [pc, #216]	@ (8005b1c <UART_SetConfig+0x2d4>)
 8005a44:	fba3 2302 	umull	r2, r3, r3, r2
 8005a48:	095b      	lsrs	r3, r3, #5
 8005a4a:	005b      	lsls	r3, r3, #1
 8005a4c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005a50:	441c      	add	r4, r3
 8005a52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a56:	2200      	movs	r2, #0
 8005a58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a5c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005a60:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005a64:	4642      	mov	r2, r8
 8005a66:	464b      	mov	r3, r9
 8005a68:	1891      	adds	r1, r2, r2
 8005a6a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005a6c:	415b      	adcs	r3, r3
 8005a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005a74:	4641      	mov	r1, r8
 8005a76:	1851      	adds	r1, r2, r1
 8005a78:	6339      	str	r1, [r7, #48]	@ 0x30
 8005a7a:	4649      	mov	r1, r9
 8005a7c:	414b      	adcs	r3, r1
 8005a7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a80:	f04f 0200 	mov.w	r2, #0
 8005a84:	f04f 0300 	mov.w	r3, #0
 8005a88:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005a8c:	4659      	mov	r1, fp
 8005a8e:	00cb      	lsls	r3, r1, #3
 8005a90:	4651      	mov	r1, sl
 8005a92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a96:	4651      	mov	r1, sl
 8005a98:	00ca      	lsls	r2, r1, #3
 8005a9a:	4610      	mov	r0, r2
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	4642      	mov	r2, r8
 8005aa2:	189b      	adds	r3, r3, r2
 8005aa4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005aa8:	464b      	mov	r3, r9
 8005aaa:	460a      	mov	r2, r1
 8005aac:	eb42 0303 	adc.w	r3, r2, r3
 8005ab0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005ac0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005ac4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005ac8:	460b      	mov	r3, r1
 8005aca:	18db      	adds	r3, r3, r3
 8005acc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ace:	4613      	mov	r3, r2
 8005ad0:	eb42 0303 	adc.w	r3, r2, r3
 8005ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ad6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005ada:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005ade:	f7fb f895 	bl	8000c0c <__aeabi_uldivmod>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8005b1c <UART_SetConfig+0x2d4>)
 8005ae8:	fba3 1302 	umull	r1, r3, r3, r2
 8005aec:	095b      	lsrs	r3, r3, #5
 8005aee:	2164      	movs	r1, #100	@ 0x64
 8005af0:	fb01 f303 	mul.w	r3, r1, r3
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	00db      	lsls	r3, r3, #3
 8005af8:	3332      	adds	r3, #50	@ 0x32
 8005afa:	4a08      	ldr	r2, [pc, #32]	@ (8005b1c <UART_SetConfig+0x2d4>)
 8005afc:	fba2 2303 	umull	r2, r3, r2, r3
 8005b00:	095b      	lsrs	r3, r3, #5
 8005b02:	f003 0207 	and.w	r2, r3, #7
 8005b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4422      	add	r2, r4
 8005b0e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b10:	e106      	b.n	8005d20 <UART_SetConfig+0x4d8>
 8005b12:	bf00      	nop
 8005b14:	40011000 	.word	0x40011000
 8005b18:	40011400 	.word	0x40011400
 8005b1c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b24:	2200      	movs	r2, #0
 8005b26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005b2a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005b2e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005b32:	4642      	mov	r2, r8
 8005b34:	464b      	mov	r3, r9
 8005b36:	1891      	adds	r1, r2, r2
 8005b38:	6239      	str	r1, [r7, #32]
 8005b3a:	415b      	adcs	r3, r3
 8005b3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b42:	4641      	mov	r1, r8
 8005b44:	1854      	adds	r4, r2, r1
 8005b46:	4649      	mov	r1, r9
 8005b48:	eb43 0501 	adc.w	r5, r3, r1
 8005b4c:	f04f 0200 	mov.w	r2, #0
 8005b50:	f04f 0300 	mov.w	r3, #0
 8005b54:	00eb      	lsls	r3, r5, #3
 8005b56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b5a:	00e2      	lsls	r2, r4, #3
 8005b5c:	4614      	mov	r4, r2
 8005b5e:	461d      	mov	r5, r3
 8005b60:	4643      	mov	r3, r8
 8005b62:	18e3      	adds	r3, r4, r3
 8005b64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005b68:	464b      	mov	r3, r9
 8005b6a:	eb45 0303 	adc.w	r3, r5, r3
 8005b6e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005b7e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005b82:	f04f 0200 	mov.w	r2, #0
 8005b86:	f04f 0300 	mov.w	r3, #0
 8005b8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005b8e:	4629      	mov	r1, r5
 8005b90:	008b      	lsls	r3, r1, #2
 8005b92:	4621      	mov	r1, r4
 8005b94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b98:	4621      	mov	r1, r4
 8005b9a:	008a      	lsls	r2, r1, #2
 8005b9c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005ba0:	f7fb f834 	bl	8000c0c <__aeabi_uldivmod>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	460b      	mov	r3, r1
 8005ba8:	4b60      	ldr	r3, [pc, #384]	@ (8005d2c <UART_SetConfig+0x4e4>)
 8005baa:	fba3 2302 	umull	r2, r3, r3, r2
 8005bae:	095b      	lsrs	r3, r3, #5
 8005bb0:	011c      	lsls	r4, r3, #4
 8005bb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005bbc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005bc0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005bc4:	4642      	mov	r2, r8
 8005bc6:	464b      	mov	r3, r9
 8005bc8:	1891      	adds	r1, r2, r2
 8005bca:	61b9      	str	r1, [r7, #24]
 8005bcc:	415b      	adcs	r3, r3
 8005bce:	61fb      	str	r3, [r7, #28]
 8005bd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bd4:	4641      	mov	r1, r8
 8005bd6:	1851      	adds	r1, r2, r1
 8005bd8:	6139      	str	r1, [r7, #16]
 8005bda:	4649      	mov	r1, r9
 8005bdc:	414b      	adcs	r3, r1
 8005bde:	617b      	str	r3, [r7, #20]
 8005be0:	f04f 0200 	mov.w	r2, #0
 8005be4:	f04f 0300 	mov.w	r3, #0
 8005be8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005bec:	4659      	mov	r1, fp
 8005bee:	00cb      	lsls	r3, r1, #3
 8005bf0:	4651      	mov	r1, sl
 8005bf2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bf6:	4651      	mov	r1, sl
 8005bf8:	00ca      	lsls	r2, r1, #3
 8005bfa:	4610      	mov	r0, r2
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	4603      	mov	r3, r0
 8005c00:	4642      	mov	r2, r8
 8005c02:	189b      	adds	r3, r3, r2
 8005c04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005c08:	464b      	mov	r3, r9
 8005c0a:	460a      	mov	r2, r1
 8005c0c:	eb42 0303 	adc.w	r3, r2, r3
 8005c10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005c1e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005c20:	f04f 0200 	mov.w	r2, #0
 8005c24:	f04f 0300 	mov.w	r3, #0
 8005c28:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005c2c:	4649      	mov	r1, r9
 8005c2e:	008b      	lsls	r3, r1, #2
 8005c30:	4641      	mov	r1, r8
 8005c32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c36:	4641      	mov	r1, r8
 8005c38:	008a      	lsls	r2, r1, #2
 8005c3a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005c3e:	f7fa ffe5 	bl	8000c0c <__aeabi_uldivmod>
 8005c42:	4602      	mov	r2, r0
 8005c44:	460b      	mov	r3, r1
 8005c46:	4611      	mov	r1, r2
 8005c48:	4b38      	ldr	r3, [pc, #224]	@ (8005d2c <UART_SetConfig+0x4e4>)
 8005c4a:	fba3 2301 	umull	r2, r3, r3, r1
 8005c4e:	095b      	lsrs	r3, r3, #5
 8005c50:	2264      	movs	r2, #100	@ 0x64
 8005c52:	fb02 f303 	mul.w	r3, r2, r3
 8005c56:	1acb      	subs	r3, r1, r3
 8005c58:	011b      	lsls	r3, r3, #4
 8005c5a:	3332      	adds	r3, #50	@ 0x32
 8005c5c:	4a33      	ldr	r2, [pc, #204]	@ (8005d2c <UART_SetConfig+0x4e4>)
 8005c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c62:	095b      	lsrs	r3, r3, #5
 8005c64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c68:	441c      	add	r4, r3
 8005c6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c6e:	2200      	movs	r2, #0
 8005c70:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c72:	677a      	str	r2, [r7, #116]	@ 0x74
 8005c74:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005c78:	4642      	mov	r2, r8
 8005c7a:	464b      	mov	r3, r9
 8005c7c:	1891      	adds	r1, r2, r2
 8005c7e:	60b9      	str	r1, [r7, #8]
 8005c80:	415b      	adcs	r3, r3
 8005c82:	60fb      	str	r3, [r7, #12]
 8005c84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c88:	4641      	mov	r1, r8
 8005c8a:	1851      	adds	r1, r2, r1
 8005c8c:	6039      	str	r1, [r7, #0]
 8005c8e:	4649      	mov	r1, r9
 8005c90:	414b      	adcs	r3, r1
 8005c92:	607b      	str	r3, [r7, #4]
 8005c94:	f04f 0200 	mov.w	r2, #0
 8005c98:	f04f 0300 	mov.w	r3, #0
 8005c9c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ca0:	4659      	mov	r1, fp
 8005ca2:	00cb      	lsls	r3, r1, #3
 8005ca4:	4651      	mov	r1, sl
 8005ca6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005caa:	4651      	mov	r1, sl
 8005cac:	00ca      	lsls	r2, r1, #3
 8005cae:	4610      	mov	r0, r2
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	4642      	mov	r2, r8
 8005cb6:	189b      	adds	r3, r3, r2
 8005cb8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005cba:	464b      	mov	r3, r9
 8005cbc:	460a      	mov	r2, r1
 8005cbe:	eb42 0303 	adc.w	r3, r2, r3
 8005cc2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	663b      	str	r3, [r7, #96]	@ 0x60
 8005cce:	667a      	str	r2, [r7, #100]	@ 0x64
 8005cd0:	f04f 0200 	mov.w	r2, #0
 8005cd4:	f04f 0300 	mov.w	r3, #0
 8005cd8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005cdc:	4649      	mov	r1, r9
 8005cde:	008b      	lsls	r3, r1, #2
 8005ce0:	4641      	mov	r1, r8
 8005ce2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ce6:	4641      	mov	r1, r8
 8005ce8:	008a      	lsls	r2, r1, #2
 8005cea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005cee:	f7fa ff8d 	bl	8000c0c <__aeabi_uldivmod>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8005d2c <UART_SetConfig+0x4e4>)
 8005cf8:	fba3 1302 	umull	r1, r3, r3, r2
 8005cfc:	095b      	lsrs	r3, r3, #5
 8005cfe:	2164      	movs	r1, #100	@ 0x64
 8005d00:	fb01 f303 	mul.w	r3, r1, r3
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	011b      	lsls	r3, r3, #4
 8005d08:	3332      	adds	r3, #50	@ 0x32
 8005d0a:	4a08      	ldr	r2, [pc, #32]	@ (8005d2c <UART_SetConfig+0x4e4>)
 8005d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d10:	095b      	lsrs	r3, r3, #5
 8005d12:	f003 020f 	and.w	r2, r3, #15
 8005d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4422      	add	r2, r4
 8005d1e:	609a      	str	r2, [r3, #8]
}
 8005d20:	bf00      	nop
 8005d22:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005d26:	46bd      	mov	sp, r7
 8005d28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d2c:	51eb851f 	.word	0x51eb851f

08005d30 <__NVIC_SetPriority>:
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	4603      	mov	r3, r0
 8005d38:	6039      	str	r1, [r7, #0]
 8005d3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	db0a      	blt.n	8005d5a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	b2da      	uxtb	r2, r3
 8005d48:	490c      	ldr	r1, [pc, #48]	@ (8005d7c <__NVIC_SetPriority+0x4c>)
 8005d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d4e:	0112      	lsls	r2, r2, #4
 8005d50:	b2d2      	uxtb	r2, r2
 8005d52:	440b      	add	r3, r1
 8005d54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005d58:	e00a      	b.n	8005d70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	b2da      	uxtb	r2, r3
 8005d5e:	4908      	ldr	r1, [pc, #32]	@ (8005d80 <__NVIC_SetPriority+0x50>)
 8005d60:	79fb      	ldrb	r3, [r7, #7]
 8005d62:	f003 030f 	and.w	r3, r3, #15
 8005d66:	3b04      	subs	r3, #4
 8005d68:	0112      	lsls	r2, r2, #4
 8005d6a:	b2d2      	uxtb	r2, r2
 8005d6c:	440b      	add	r3, r1
 8005d6e:	761a      	strb	r2, [r3, #24]
}
 8005d70:	bf00      	nop
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr
 8005d7c:	e000e100 	.word	0xe000e100
 8005d80:	e000ed00 	.word	0xe000ed00

08005d84 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005d84:	b580      	push	{r7, lr}
 8005d86:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005d88:	4b05      	ldr	r3, [pc, #20]	@ (8005da0 <SysTick_Handler+0x1c>)
 8005d8a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005d8c:	f001 ffcc 	bl	8007d28 <xTaskGetSchedulerState>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d001      	beq.n	8005d9a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005d96:	f002 fdc7 	bl	8008928 <xPortSysTickHandler>
  }
}
 8005d9a:	bf00      	nop
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	e000e010 	.word	0xe000e010

08005da4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005da4:	b580      	push	{r7, lr}
 8005da6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005da8:	2100      	movs	r1, #0
 8005daa:	f06f 0004 	mvn.w	r0, #4
 8005dae:	f7ff ffbf 	bl	8005d30 <__NVIC_SetPriority>
#endif
}
 8005db2:	bf00      	nop
 8005db4:	bd80      	pop	{r7, pc}
	...

08005db8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005dbe:	f3ef 8305 	mrs	r3, IPSR
 8005dc2:	603b      	str	r3, [r7, #0]
  return(result);
 8005dc4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d003      	beq.n	8005dd2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005dca:	f06f 0305 	mvn.w	r3, #5
 8005dce:	607b      	str	r3, [r7, #4]
 8005dd0:	e00c      	b.n	8005dec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8005dfc <osKernelInitialize+0x44>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d105      	bne.n	8005de6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005dda:	4b08      	ldr	r3, [pc, #32]	@ (8005dfc <osKernelInitialize+0x44>)
 8005ddc:	2201      	movs	r2, #1
 8005dde:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005de0:	2300      	movs	r3, #0
 8005de2:	607b      	str	r3, [r7, #4]
 8005de4:	e002      	b.n	8005dec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005de6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005dea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005dec:	687b      	ldr	r3, [r7, #4]
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	370c      	adds	r7, #12
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop
 8005dfc:	200009c8 	.word	0x200009c8

08005e00 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e06:	f3ef 8305 	mrs	r3, IPSR
 8005e0a:	603b      	str	r3, [r7, #0]
  return(result);
 8005e0c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d003      	beq.n	8005e1a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005e12:	f06f 0305 	mvn.w	r3, #5
 8005e16:	607b      	str	r3, [r7, #4]
 8005e18:	e010      	b.n	8005e3c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8005e48 <osKernelStart+0x48>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d109      	bne.n	8005e36 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005e22:	f7ff ffbf 	bl	8005da4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005e26:	4b08      	ldr	r3, [pc, #32]	@ (8005e48 <osKernelStart+0x48>)
 8005e28:	2202      	movs	r2, #2
 8005e2a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005e2c:	f001 fb06 	bl	800743c <vTaskStartScheduler>
      stat = osOK;
 8005e30:	2300      	movs	r3, #0
 8005e32:	607b      	str	r3, [r7, #4]
 8005e34:	e002      	b.n	8005e3c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005e36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005e3a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005e3c:	687b      	ldr	r3, [r7, #4]
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3708      	adds	r7, #8
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	200009c8 	.word	0x200009c8

08005e4c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e52:	f3ef 8305 	mrs	r3, IPSR
 8005e56:	603b      	str	r3, [r7, #0]
  return(result);
 8005e58:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d003      	beq.n	8005e66 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8005e5e:	f001 fc19 	bl	8007694 <xTaskGetTickCountFromISR>
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	e002      	b.n	8005e6c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8005e66:	f001 fc05 	bl	8007674 <xTaskGetTickCount>
 8005e6a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8005e6c:	687b      	ldr	r3, [r7, #4]
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3708      	adds	r7, #8
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 8005e76:	b480      	push	{r7}
 8005e78:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 8005e7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b08e      	sub	sp, #56	@ 0x38
 8005e8c:	af04      	add	r7, sp, #16
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005e94:	2300      	movs	r3, #0
 8005e96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e98:	f3ef 8305 	mrs	r3, IPSR
 8005e9c:	617b      	str	r3, [r7, #20]
  return(result);
 8005e9e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d17e      	bne.n	8005fa2 <osThreadNew+0x11a>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d07b      	beq.n	8005fa2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005eaa:	2380      	movs	r3, #128	@ 0x80
 8005eac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005eae:	2318      	movs	r3, #24
 8005eb0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005eb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005eba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d045      	beq.n	8005f4e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d002      	beq.n	8005ed0 <osThreadNew+0x48>
        name = attr->name;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	699b      	ldr	r3, [r3, #24]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d002      	beq.n	8005ede <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	699b      	ldr	r3, [r3, #24]
 8005edc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d008      	beq.n	8005ef6 <osThreadNew+0x6e>
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	2b38      	cmp	r3, #56	@ 0x38
 8005ee8:	d805      	bhi.n	8005ef6 <osThreadNew+0x6e>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	f003 0301 	and.w	r3, r3, #1
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d001      	beq.n	8005efa <osThreadNew+0x72>
        return (NULL);
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	e054      	b.n	8005fa4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	695b      	ldr	r3, [r3, #20]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d003      	beq.n	8005f0a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	695b      	ldr	r3, [r3, #20]
 8005f06:	089b      	lsrs	r3, r3, #2
 8005f08:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00e      	beq.n	8005f30 <osThreadNew+0xa8>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	2ba7      	cmp	r3, #167	@ 0xa7
 8005f18:	d90a      	bls.n	8005f30 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d006      	beq.n	8005f30 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	695b      	ldr	r3, [r3, #20]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d002      	beq.n	8005f30 <osThreadNew+0xa8>
        mem = 1;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	61bb      	str	r3, [r7, #24]
 8005f2e:	e010      	b.n	8005f52 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d10c      	bne.n	8005f52 <osThreadNew+0xca>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d108      	bne.n	8005f52 <osThreadNew+0xca>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d104      	bne.n	8005f52 <osThreadNew+0xca>
          mem = 0;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	61bb      	str	r3, [r7, #24]
 8005f4c:	e001      	b.n	8005f52 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d110      	bne.n	8005f7a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005f60:	9202      	str	r2, [sp, #8]
 8005f62:	9301      	str	r3, [sp, #4]
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	9300      	str	r3, [sp, #0]
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	6a3a      	ldr	r2, [r7, #32]
 8005f6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f001 f8a6 	bl	80070c0 <xTaskCreateStatic>
 8005f74:	4603      	mov	r3, r0
 8005f76:	613b      	str	r3, [r7, #16]
 8005f78:	e013      	b.n	8005fa2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d110      	bne.n	8005fa2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005f80:	6a3b      	ldr	r3, [r7, #32]
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	f107 0310 	add.w	r3, r7, #16
 8005f88:	9301      	str	r3, [sp, #4]
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	9300      	str	r3, [sp, #0]
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005f92:	68f8      	ldr	r0, [r7, #12]
 8005f94:	f001 f8f4 	bl	8007180 <xTaskCreate>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d001      	beq.n	8005fa2 <osThreadNew+0x11a>
            hTask = NULL;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005fa2:	693b      	ldr	r3, [r7, #16]
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3728      	adds	r7, #40	@ 0x28
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b08a      	sub	sp, #40	@ 0x28
 8005fb0:	af02      	add	r7, sp, #8
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fbc:	f3ef 8305 	mrs	r3, IPSR
 8005fc0:	613b      	str	r3, [r7, #16]
  return(result);
 8005fc2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d15f      	bne.n	8006088 <osMessageQueueNew+0xdc>
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d05c      	beq.n	8006088 <osMessageQueueNew+0xdc>
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d059      	beq.n	8006088 <osMessageQueueNew+0xdc>
    mem = -1;
 8005fd4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005fd8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d029      	beq.n	8006034 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d012      	beq.n	800600e <osMessageQueueNew+0x62>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	2b4f      	cmp	r3, #79	@ 0x4f
 8005fee:	d90e      	bls.n	800600e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d00a      	beq.n	800600e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	695a      	ldr	r2, [r3, #20]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	68b9      	ldr	r1, [r7, #8]
 8006000:	fb01 f303 	mul.w	r3, r1, r3
 8006004:	429a      	cmp	r2, r3
 8006006:	d302      	bcc.n	800600e <osMessageQueueNew+0x62>
        mem = 1;
 8006008:	2301      	movs	r3, #1
 800600a:	61bb      	str	r3, [r7, #24]
 800600c:	e014      	b.n	8006038 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d110      	bne.n	8006038 <osMessageQueueNew+0x8c>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d10c      	bne.n	8006038 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006022:	2b00      	cmp	r3, #0
 8006024:	d108      	bne.n	8006038 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	695b      	ldr	r3, [r3, #20]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d104      	bne.n	8006038 <osMessageQueueNew+0x8c>
          mem = 0;
 800602e:	2300      	movs	r3, #0
 8006030:	61bb      	str	r3, [r7, #24]
 8006032:	e001      	b.n	8006038 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006034:	2300      	movs	r3, #0
 8006036:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	2b01      	cmp	r3, #1
 800603c:	d10b      	bne.n	8006056 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	691a      	ldr	r2, [r3, #16]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	2100      	movs	r1, #0
 8006048:	9100      	str	r1, [sp, #0]
 800604a:	68b9      	ldr	r1, [r7, #8]
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f000 fa87 	bl	8006560 <xQueueGenericCreateStatic>
 8006052:	61f8      	str	r0, [r7, #28]
 8006054:	e008      	b.n	8006068 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d105      	bne.n	8006068 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800605c:	2200      	movs	r2, #0
 800605e:	68b9      	ldr	r1, [r7, #8]
 8006060:	68f8      	ldr	r0, [r7, #12]
 8006062:	f000 fafa 	bl	800665a <xQueueGenericCreate>
 8006066:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00c      	beq.n	8006088 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d003      	beq.n	800607c <osMessageQueueNew+0xd0>
        name = attr->name;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	617b      	str	r3, [r7, #20]
 800607a:	e001      	b.n	8006080 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800607c:	2300      	movs	r3, #0
 800607e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006080:	6979      	ldr	r1, [r7, #20]
 8006082:	69f8      	ldr	r0, [r7, #28]
 8006084:	f000 ffbe 	bl	8007004 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006088:	69fb      	ldr	r3, [r7, #28]
}
 800608a:	4618      	mov	r0, r3
 800608c:	3720      	adds	r7, #32
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
	...

08006094 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006094:	b580      	push	{r7, lr}
 8006096:	b088      	sub	sp, #32
 8006098:	af00      	add	r7, sp, #0
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	603b      	str	r3, [r7, #0]
 80060a0:	4613      	mov	r3, r2
 80060a2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80060a8:	2300      	movs	r3, #0
 80060aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060ac:	f3ef 8305 	mrs	r3, IPSR
 80060b0:	617b      	str	r3, [r7, #20]
  return(result);
 80060b2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d028      	beq.n	800610a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d005      	beq.n	80060ca <osMessageQueuePut+0x36>
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d002      	beq.n	80060ca <osMessageQueuePut+0x36>
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d003      	beq.n	80060d2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80060ca:	f06f 0303 	mvn.w	r3, #3
 80060ce:	61fb      	str	r3, [r7, #28]
 80060d0:	e038      	b.n	8006144 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80060d2:	2300      	movs	r3, #0
 80060d4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80060d6:	f107 0210 	add.w	r2, r7, #16
 80060da:	2300      	movs	r3, #0
 80060dc:	68b9      	ldr	r1, [r7, #8]
 80060de:	69b8      	ldr	r0, [r7, #24]
 80060e0:	f000 fc1c 	bl	800691c <xQueueGenericSendFromISR>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d003      	beq.n	80060f2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80060ea:	f06f 0302 	mvn.w	r3, #2
 80060ee:	61fb      	str	r3, [r7, #28]
 80060f0:	e028      	b.n	8006144 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d025      	beq.n	8006144 <osMessageQueuePut+0xb0>
 80060f8:	4b15      	ldr	r3, [pc, #84]	@ (8006150 <osMessageQueuePut+0xbc>)
 80060fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060fe:	601a      	str	r2, [r3, #0]
 8006100:	f3bf 8f4f 	dsb	sy
 8006104:	f3bf 8f6f 	isb	sy
 8006108:	e01c      	b.n	8006144 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d002      	beq.n	8006116 <osMessageQueuePut+0x82>
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d103      	bne.n	800611e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8006116:	f06f 0303 	mvn.w	r3, #3
 800611a:	61fb      	str	r3, [r7, #28]
 800611c:	e012      	b.n	8006144 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800611e:	2300      	movs	r3, #0
 8006120:	683a      	ldr	r2, [r7, #0]
 8006122:	68b9      	ldr	r1, [r7, #8]
 8006124:	69b8      	ldr	r0, [r7, #24]
 8006126:	f000 faf7 	bl	8006718 <xQueueGenericSend>
 800612a:	4603      	mov	r3, r0
 800612c:	2b01      	cmp	r3, #1
 800612e:	d009      	beq.n	8006144 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d003      	beq.n	800613e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8006136:	f06f 0301 	mvn.w	r3, #1
 800613a:	61fb      	str	r3, [r7, #28]
 800613c:	e002      	b.n	8006144 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800613e:	f06f 0302 	mvn.w	r3, #2
 8006142:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006144:	69fb      	ldr	r3, [r7, #28]
}
 8006146:	4618      	mov	r0, r3
 8006148:	3720      	adds	r7, #32
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	e000ed04 	.word	0xe000ed04

08006154 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006154:	b580      	push	{r7, lr}
 8006156:	b088      	sub	sp, #32
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	607a      	str	r2, [r7, #4]
 8006160:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006166:	2300      	movs	r3, #0
 8006168:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800616a:	f3ef 8305 	mrs	r3, IPSR
 800616e:	617b      	str	r3, [r7, #20]
  return(result);
 8006170:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006172:	2b00      	cmp	r3, #0
 8006174:	d028      	beq.n	80061c8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d005      	beq.n	8006188 <osMessageQueueGet+0x34>
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d002      	beq.n	8006188 <osMessageQueueGet+0x34>
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d003      	beq.n	8006190 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006188:	f06f 0303 	mvn.w	r3, #3
 800618c:	61fb      	str	r3, [r7, #28]
 800618e:	e037      	b.n	8006200 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006190:	2300      	movs	r3, #0
 8006192:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006194:	f107 0310 	add.w	r3, r7, #16
 8006198:	461a      	mov	r2, r3
 800619a:	68b9      	ldr	r1, [r7, #8]
 800619c:	69b8      	ldr	r0, [r7, #24]
 800619e:	f000 fd3d 	bl	8006c1c <xQueueReceiveFromISR>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d003      	beq.n	80061b0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80061a8:	f06f 0302 	mvn.w	r3, #2
 80061ac:	61fb      	str	r3, [r7, #28]
 80061ae:	e027      	b.n	8006200 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d024      	beq.n	8006200 <osMessageQueueGet+0xac>
 80061b6:	4b15      	ldr	r3, [pc, #84]	@ (800620c <osMessageQueueGet+0xb8>)
 80061b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061bc:	601a      	str	r2, [r3, #0]
 80061be:	f3bf 8f4f 	dsb	sy
 80061c2:	f3bf 8f6f 	isb	sy
 80061c6:	e01b      	b.n	8006200 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d002      	beq.n	80061d4 <osMessageQueueGet+0x80>
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d103      	bne.n	80061dc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80061d4:	f06f 0303 	mvn.w	r3, #3
 80061d8:	61fb      	str	r3, [r7, #28]
 80061da:	e011      	b.n	8006200 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80061dc:	683a      	ldr	r2, [r7, #0]
 80061de:	68b9      	ldr	r1, [r7, #8]
 80061e0:	69b8      	ldr	r0, [r7, #24]
 80061e2:	f000 fc39 	bl	8006a58 <xQueueReceive>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d009      	beq.n	8006200 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d003      	beq.n	80061fa <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80061f2:	f06f 0301 	mvn.w	r3, #1
 80061f6:	61fb      	str	r3, [r7, #28]
 80061f8:	e002      	b.n	8006200 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80061fa:	f06f 0302 	mvn.w	r3, #2
 80061fe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006200:	69fb      	ldr	r3, [r7, #28]
}
 8006202:	4618      	mov	r0, r3
 8006204:	3720      	adds	r7, #32
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop
 800620c:	e000ed04 	.word	0xe000ed04

08006210 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8006210:	b580      	push	{r7, lr}
 8006212:	b086      	sub	sp, #24
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d102      	bne.n	8006228 <osMessageQueueGetCount+0x18>
    count = 0U;
 8006222:	2300      	movs	r3, #0
 8006224:	617b      	str	r3, [r7, #20]
 8006226:	e00e      	b.n	8006246 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006228:	f3ef 8305 	mrs	r3, IPSR
 800622c:	60fb      	str	r3, [r7, #12]
  return(result);
 800622e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006230:	2b00      	cmp	r3, #0
 8006232:	d004      	beq.n	800623e <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8006234:	6938      	ldr	r0, [r7, #16]
 8006236:	f000 fdb6 	bl	8006da6 <uxQueueMessagesWaitingFromISR>
 800623a:	6178      	str	r0, [r7, #20]
 800623c:	e003      	b.n	8006246 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800623e:	6938      	ldr	r0, [r7, #16]
 8006240:	f000 fd6e 	bl	8006d20 <uxQueueMessagesWaiting>
 8006244:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8006246:	697b      	ldr	r3, [r7, #20]
}
 8006248:	4618      	mov	r0, r3
 800624a:	3718      	adds	r7, #24
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <osMessageQueueGetSpace>:

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 8006250:	b580      	push	{r7, lr}
 8006252:	b08a      	sub	sp, #40	@ 0x28
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	623b      	str	r3, [r7, #32]
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 800625c:	6a3b      	ldr	r3, [r7, #32]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d102      	bne.n	8006268 <osMessageQueueGetSpace+0x18>
    space = 0U;
 8006262:	2300      	movs	r3, #0
 8006264:	627b      	str	r3, [r7, #36]	@ 0x24
 8006266:	e023      	b.n	80062b0 <osMessageQueueGetSpace+0x60>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006268:	f3ef 8305 	mrs	r3, IPSR
 800626c:	61bb      	str	r3, [r7, #24]
  return(result);
 800626e:	69bb      	ldr	r3, [r7, #24]
  }
  else if (IS_IRQ()) {
 8006270:	2b00      	cmp	r3, #0
 8006272:	d019      	beq.n	80062a8 <osMessageQueueGetSpace+0x58>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006274:	f3ef 8211 	mrs	r2, BASEPRI
 8006278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800627c:	f383 8811 	msr	BASEPRI, r3
 8006280:	f3bf 8f6f 	isb	sy
 8006284:	f3bf 8f4f 	dsb	sy
 8006288:	613a      	str	r2, [r7, #16]
 800628a:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800628c:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 800628e:	61fb      	str	r3, [r7, #28]

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 8006290:	6a3b      	ldr	r3, [r7, #32]
 8006292:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006294:	6a3b      	ldr	r3, [r7, #32]
 8006296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	627b      	str	r3, [r7, #36]	@ 0x24
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80062a6:	e003      	b.n	80062b0 <osMessageQueueGetSpace+0x60>

    taskEXIT_CRITICAL_FROM_ISR(isrm);
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 80062a8:	6a38      	ldr	r0, [r7, #32]
 80062aa:	f000 fd58 	bl	8006d5e <uxQueueSpacesAvailable>
 80062ae:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  return (space);
 80062b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3728      	adds	r7, #40	@ 0x28
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
	...

080062bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80062bc:	b480      	push	{r7}
 80062be:	b085      	sub	sp, #20
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	4a07      	ldr	r2, [pc, #28]	@ (80062e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80062cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	4a06      	ldr	r2, [pc, #24]	@ (80062ec <vApplicationGetIdleTaskMemory+0x30>)
 80062d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2280      	movs	r2, #128	@ 0x80
 80062d8:	601a      	str	r2, [r3, #0]
}
 80062da:	bf00      	nop
 80062dc:	3714      	adds	r7, #20
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	200009cc 	.word	0x200009cc
 80062ec:	20000a74 	.word	0x20000a74

080062f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80062f0:	b480      	push	{r7}
 80062f2:	b085      	sub	sp, #20
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	4a07      	ldr	r2, [pc, #28]	@ (800631c <vApplicationGetTimerTaskMemory+0x2c>)
 8006300:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	4a06      	ldr	r2, [pc, #24]	@ (8006320 <vApplicationGetTimerTaskMemory+0x30>)
 8006306:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800630e:	601a      	str	r2, [r3, #0]
}
 8006310:	bf00      	nop
 8006312:	3714      	adds	r7, #20
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr
 800631c:	20000c74 	.word	0x20000c74
 8006320:	20000d1c 	.word	0x20000d1c

08006324 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f103 0208 	add.w	r2, r3, #8
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800633c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f103 0208 	add.w	r2, r3, #8
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f103 0208 	add.w	r2, r3, #8
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006358:	bf00      	nop
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006372:	bf00      	nop
 8006374:	370c      	adds	r7, #12
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr

0800637e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800637e:	b480      	push	{r7}
 8006380:	b085      	sub	sp, #20
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
 8006386:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	689a      	ldr	r2, [r3, #8]
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	683a      	ldr	r2, [r7, #0]
 80063a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	683a      	ldr	r2, [r7, #0]
 80063a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	1c5a      	adds	r2, r3, #1
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	601a      	str	r2, [r3, #0]
}
 80063ba:	bf00      	nop
 80063bc:	3714      	adds	r7, #20
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80063c6:	b480      	push	{r7}
 80063c8:	b085      	sub	sp, #20
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
 80063ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80063dc:	d103      	bne.n	80063e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	60fb      	str	r3, [r7, #12]
 80063e4:	e00c      	b.n	8006400 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	3308      	adds	r3, #8
 80063ea:	60fb      	str	r3, [r7, #12]
 80063ec:	e002      	b.n	80063f4 <vListInsert+0x2e>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	60fb      	str	r3, [r7, #12]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68ba      	ldr	r2, [r7, #8]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d2f6      	bcs.n	80063ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	685a      	ldr	r2, [r3, #4]
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	683a      	ldr	r2, [r7, #0]
 800640e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	683a      	ldr	r2, [r7, #0]
 800641a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	1c5a      	adds	r2, r3, #1
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	601a      	str	r2, [r3, #0]
}
 800642c:	bf00      	nop
 800642e:	3714      	adds	r7, #20
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006438:	b480      	push	{r7}
 800643a:	b085      	sub	sp, #20
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	6892      	ldr	r2, [r2, #8]
 800644e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	6852      	ldr	r2, [r2, #4]
 8006458:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	429a      	cmp	r2, r3
 8006462:	d103      	bne.n	800646c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	689a      	ldr	r2, [r3, #8]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	1e5a      	subs	r2, r3, #1
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
}
 8006480:	4618      	mov	r0, r3
 8006482:	3714      	adds	r7, #20
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d10b      	bne.n	80064b8 <xQueueGenericReset+0x2c>
	__asm volatile
 80064a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064a4:	f383 8811 	msr	BASEPRI, r3
 80064a8:	f3bf 8f6f 	isb	sy
 80064ac:	f3bf 8f4f 	dsb	sy
 80064b0:	60bb      	str	r3, [r7, #8]
}
 80064b2:	bf00      	nop
 80064b4:	bf00      	nop
 80064b6:	e7fd      	b.n	80064b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80064b8:	f002 f9a6 	bl	8008808 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064c4:	68f9      	ldr	r1, [r7, #12]
 80064c6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80064c8:	fb01 f303 	mul.w	r3, r1, r3
 80064cc:	441a      	add	r2, r3
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2200      	movs	r2, #0
 80064d6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064e8:	3b01      	subs	r3, #1
 80064ea:	68f9      	ldr	r1, [r7, #12]
 80064ec:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80064ee:	fb01 f303 	mul.w	r3, r1, r3
 80064f2:	441a      	add	r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	22ff      	movs	r2, #255	@ 0xff
 80064fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	22ff      	movs	r2, #255	@ 0xff
 8006504:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d114      	bne.n	8006538 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d01a      	beq.n	800654c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	3310      	adds	r3, #16
 800651a:	4618      	mov	r0, r3
 800651c:	f001 fa3e 	bl	800799c <xTaskRemoveFromEventList>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d012      	beq.n	800654c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006526:	4b0d      	ldr	r3, [pc, #52]	@ (800655c <xQueueGenericReset+0xd0>)
 8006528:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800652c:	601a      	str	r2, [r3, #0]
 800652e:	f3bf 8f4f 	dsb	sy
 8006532:	f3bf 8f6f 	isb	sy
 8006536:	e009      	b.n	800654c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	3310      	adds	r3, #16
 800653c:	4618      	mov	r0, r3
 800653e:	f7ff fef1 	bl	8006324 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	3324      	adds	r3, #36	@ 0x24
 8006546:	4618      	mov	r0, r3
 8006548:	f7ff feec 	bl	8006324 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800654c:	f002 f98e 	bl	800886c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006550:	2301      	movs	r3, #1
}
 8006552:	4618      	mov	r0, r3
 8006554:	3710      	adds	r7, #16
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	e000ed04 	.word	0xe000ed04

08006560 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006560:	b580      	push	{r7, lr}
 8006562:	b08e      	sub	sp, #56	@ 0x38
 8006564:	af02      	add	r7, sp, #8
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	607a      	str	r2, [r7, #4]
 800656c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d10b      	bne.n	800658c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006578:	f383 8811 	msr	BASEPRI, r3
 800657c:	f3bf 8f6f 	isb	sy
 8006580:	f3bf 8f4f 	dsb	sy
 8006584:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006586:	bf00      	nop
 8006588:	bf00      	nop
 800658a:	e7fd      	b.n	8006588 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d10b      	bne.n	80065aa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006596:	f383 8811 	msr	BASEPRI, r3
 800659a:	f3bf 8f6f 	isb	sy
 800659e:	f3bf 8f4f 	dsb	sy
 80065a2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80065a4:	bf00      	nop
 80065a6:	bf00      	nop
 80065a8:	e7fd      	b.n	80065a6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d002      	beq.n	80065b6 <xQueueGenericCreateStatic+0x56>
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d001      	beq.n	80065ba <xQueueGenericCreateStatic+0x5a>
 80065b6:	2301      	movs	r3, #1
 80065b8:	e000      	b.n	80065bc <xQueueGenericCreateStatic+0x5c>
 80065ba:	2300      	movs	r3, #0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d10b      	bne.n	80065d8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80065c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c4:	f383 8811 	msr	BASEPRI, r3
 80065c8:	f3bf 8f6f 	isb	sy
 80065cc:	f3bf 8f4f 	dsb	sy
 80065d0:	623b      	str	r3, [r7, #32]
}
 80065d2:	bf00      	nop
 80065d4:	bf00      	nop
 80065d6:	e7fd      	b.n	80065d4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d102      	bne.n	80065e4 <xQueueGenericCreateStatic+0x84>
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d101      	bne.n	80065e8 <xQueueGenericCreateStatic+0x88>
 80065e4:	2301      	movs	r3, #1
 80065e6:	e000      	b.n	80065ea <xQueueGenericCreateStatic+0x8a>
 80065e8:	2300      	movs	r3, #0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d10b      	bne.n	8006606 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80065ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f2:	f383 8811 	msr	BASEPRI, r3
 80065f6:	f3bf 8f6f 	isb	sy
 80065fa:	f3bf 8f4f 	dsb	sy
 80065fe:	61fb      	str	r3, [r7, #28]
}
 8006600:	bf00      	nop
 8006602:	bf00      	nop
 8006604:	e7fd      	b.n	8006602 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006606:	2350      	movs	r3, #80	@ 0x50
 8006608:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	2b50      	cmp	r3, #80	@ 0x50
 800660e:	d00b      	beq.n	8006628 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006614:	f383 8811 	msr	BASEPRI, r3
 8006618:	f3bf 8f6f 	isb	sy
 800661c:	f3bf 8f4f 	dsb	sy
 8006620:	61bb      	str	r3, [r7, #24]
}
 8006622:	bf00      	nop
 8006624:	bf00      	nop
 8006626:	e7fd      	b.n	8006624 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006628:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800662e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00d      	beq.n	8006650 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006636:	2201      	movs	r2, #1
 8006638:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800663c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006642:	9300      	str	r3, [sp, #0]
 8006644:	4613      	mov	r3, r2
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	68b9      	ldr	r1, [r7, #8]
 800664a:	68f8      	ldr	r0, [r7, #12]
 800664c:	f000 f840 	bl	80066d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006652:	4618      	mov	r0, r3
 8006654:	3730      	adds	r7, #48	@ 0x30
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}

0800665a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800665a:	b580      	push	{r7, lr}
 800665c:	b08a      	sub	sp, #40	@ 0x28
 800665e:	af02      	add	r7, sp, #8
 8006660:	60f8      	str	r0, [r7, #12]
 8006662:	60b9      	str	r1, [r7, #8]
 8006664:	4613      	mov	r3, r2
 8006666:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d10b      	bne.n	8006686 <xQueueGenericCreate+0x2c>
	__asm volatile
 800666e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006672:	f383 8811 	msr	BASEPRI, r3
 8006676:	f3bf 8f6f 	isb	sy
 800667a:	f3bf 8f4f 	dsb	sy
 800667e:	613b      	str	r3, [r7, #16]
}
 8006680:	bf00      	nop
 8006682:	bf00      	nop
 8006684:	e7fd      	b.n	8006682 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	68ba      	ldr	r2, [r7, #8]
 800668a:	fb02 f303 	mul.w	r3, r2, r3
 800668e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	3350      	adds	r3, #80	@ 0x50
 8006694:	4618      	mov	r0, r3
 8006696:	f002 f9d9 	bl	8008a4c <pvPortMalloc>
 800669a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d011      	beq.n	80066c6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	3350      	adds	r3, #80	@ 0x50
 80066aa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80066ac:	69bb      	ldr	r3, [r7, #24]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80066b4:	79fa      	ldrb	r2, [r7, #7]
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	9300      	str	r3, [sp, #0]
 80066ba:	4613      	mov	r3, r2
 80066bc:	697a      	ldr	r2, [r7, #20]
 80066be:	68b9      	ldr	r1, [r7, #8]
 80066c0:	68f8      	ldr	r0, [r7, #12]
 80066c2:	f000 f805 	bl	80066d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80066c6:	69bb      	ldr	r3, [r7, #24]
	}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3720      	adds	r7, #32
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	607a      	str	r2, [r7, #4]
 80066dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d103      	bne.n	80066ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	69ba      	ldr	r2, [r7, #24]
 80066e8:	601a      	str	r2, [r3, #0]
 80066ea:	e002      	b.n	80066f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	68ba      	ldr	r2, [r7, #8]
 80066fc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80066fe:	2101      	movs	r1, #1
 8006700:	69b8      	ldr	r0, [r7, #24]
 8006702:	f7ff fec3 	bl	800648c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	78fa      	ldrb	r2, [r7, #3]
 800670a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800670e:	bf00      	nop
 8006710:	3710      	adds	r7, #16
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
	...

08006718 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b08e      	sub	sp, #56	@ 0x38
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	607a      	str	r2, [r7, #4]
 8006724:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006726:	2300      	movs	r3, #0
 8006728:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800672e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006730:	2b00      	cmp	r3, #0
 8006732:	d10b      	bne.n	800674c <xQueueGenericSend+0x34>
	__asm volatile
 8006734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006738:	f383 8811 	msr	BASEPRI, r3
 800673c:	f3bf 8f6f 	isb	sy
 8006740:	f3bf 8f4f 	dsb	sy
 8006744:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006746:	bf00      	nop
 8006748:	bf00      	nop
 800674a:	e7fd      	b.n	8006748 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d103      	bne.n	800675a <xQueueGenericSend+0x42>
 8006752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006756:	2b00      	cmp	r3, #0
 8006758:	d101      	bne.n	800675e <xQueueGenericSend+0x46>
 800675a:	2301      	movs	r3, #1
 800675c:	e000      	b.n	8006760 <xQueueGenericSend+0x48>
 800675e:	2300      	movs	r3, #0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d10b      	bne.n	800677c <xQueueGenericSend+0x64>
	__asm volatile
 8006764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006768:	f383 8811 	msr	BASEPRI, r3
 800676c:	f3bf 8f6f 	isb	sy
 8006770:	f3bf 8f4f 	dsb	sy
 8006774:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006776:	bf00      	nop
 8006778:	bf00      	nop
 800677a:	e7fd      	b.n	8006778 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	2b02      	cmp	r3, #2
 8006780:	d103      	bne.n	800678a <xQueueGenericSend+0x72>
 8006782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006784:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006786:	2b01      	cmp	r3, #1
 8006788:	d101      	bne.n	800678e <xQueueGenericSend+0x76>
 800678a:	2301      	movs	r3, #1
 800678c:	e000      	b.n	8006790 <xQueueGenericSend+0x78>
 800678e:	2300      	movs	r3, #0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d10b      	bne.n	80067ac <xQueueGenericSend+0x94>
	__asm volatile
 8006794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006798:	f383 8811 	msr	BASEPRI, r3
 800679c:	f3bf 8f6f 	isb	sy
 80067a0:	f3bf 8f4f 	dsb	sy
 80067a4:	623b      	str	r3, [r7, #32]
}
 80067a6:	bf00      	nop
 80067a8:	bf00      	nop
 80067aa:	e7fd      	b.n	80067a8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80067ac:	f001 fabc 	bl	8007d28 <xTaskGetSchedulerState>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d102      	bne.n	80067bc <xQueueGenericSend+0xa4>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d101      	bne.n	80067c0 <xQueueGenericSend+0xa8>
 80067bc:	2301      	movs	r3, #1
 80067be:	e000      	b.n	80067c2 <xQueueGenericSend+0xaa>
 80067c0:	2300      	movs	r3, #0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d10b      	bne.n	80067de <xQueueGenericSend+0xc6>
	__asm volatile
 80067c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ca:	f383 8811 	msr	BASEPRI, r3
 80067ce:	f3bf 8f6f 	isb	sy
 80067d2:	f3bf 8f4f 	dsb	sy
 80067d6:	61fb      	str	r3, [r7, #28]
}
 80067d8:	bf00      	nop
 80067da:	bf00      	nop
 80067dc:	e7fd      	b.n	80067da <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80067de:	f002 f813 	bl	8008808 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80067e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80067e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d302      	bcc.n	80067f4 <xQueueGenericSend+0xdc>
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d129      	bne.n	8006848 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80067f4:	683a      	ldr	r2, [r7, #0]
 80067f6:	68b9      	ldr	r1, [r7, #8]
 80067f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80067fa:	f000 faf3 	bl	8006de4 <prvCopyDataToQueue>
 80067fe:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006804:	2b00      	cmp	r3, #0
 8006806:	d010      	beq.n	800682a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800680a:	3324      	adds	r3, #36	@ 0x24
 800680c:	4618      	mov	r0, r3
 800680e:	f001 f8c5 	bl	800799c <xTaskRemoveFromEventList>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d013      	beq.n	8006840 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006818:	4b3f      	ldr	r3, [pc, #252]	@ (8006918 <xQueueGenericSend+0x200>)
 800681a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800681e:	601a      	str	r2, [r3, #0]
 8006820:	f3bf 8f4f 	dsb	sy
 8006824:	f3bf 8f6f 	isb	sy
 8006828:	e00a      	b.n	8006840 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800682a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800682c:	2b00      	cmp	r3, #0
 800682e:	d007      	beq.n	8006840 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006830:	4b39      	ldr	r3, [pc, #228]	@ (8006918 <xQueueGenericSend+0x200>)
 8006832:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006836:	601a      	str	r2, [r3, #0]
 8006838:	f3bf 8f4f 	dsb	sy
 800683c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006840:	f002 f814 	bl	800886c <vPortExitCritical>
				return pdPASS;
 8006844:	2301      	movs	r3, #1
 8006846:	e063      	b.n	8006910 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d103      	bne.n	8006856 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800684e:	f002 f80d 	bl	800886c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006852:	2300      	movs	r3, #0
 8006854:	e05c      	b.n	8006910 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006856:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006858:	2b00      	cmp	r3, #0
 800685a:	d106      	bne.n	800686a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800685c:	f107 0314 	add.w	r3, r7, #20
 8006860:	4618      	mov	r0, r3
 8006862:	f001 f8ff 	bl	8007a64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006866:	2301      	movs	r3, #1
 8006868:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800686a:	f001 ffff 	bl	800886c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800686e:	f000 fe55 	bl	800751c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006872:	f001 ffc9 	bl	8008808 <vPortEnterCritical>
 8006876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006878:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800687c:	b25b      	sxtb	r3, r3
 800687e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006882:	d103      	bne.n	800688c <xQueueGenericSend+0x174>
 8006884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006886:	2200      	movs	r2, #0
 8006888:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800688c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800688e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006892:	b25b      	sxtb	r3, r3
 8006894:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006898:	d103      	bne.n	80068a2 <xQueueGenericSend+0x18a>
 800689a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800689c:	2200      	movs	r2, #0
 800689e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80068a2:	f001 ffe3 	bl	800886c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068a6:	1d3a      	adds	r2, r7, #4
 80068a8:	f107 0314 	add.w	r3, r7, #20
 80068ac:	4611      	mov	r1, r2
 80068ae:	4618      	mov	r0, r3
 80068b0:	f001 f8ee 	bl	8007a90 <xTaskCheckForTimeOut>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d124      	bne.n	8006904 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80068ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80068bc:	f000 fb8a 	bl	8006fd4 <prvIsQueueFull>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d018      	beq.n	80068f8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80068c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c8:	3310      	adds	r3, #16
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	4611      	mov	r1, r2
 80068ce:	4618      	mov	r0, r3
 80068d0:	f001 f812 	bl	80078f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80068d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80068d6:	f000 fb15 	bl	8006f04 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80068da:	f000 fe2d 	bl	8007538 <xTaskResumeAll>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f47f af7c 	bne.w	80067de <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80068e6:	4b0c      	ldr	r3, [pc, #48]	@ (8006918 <xQueueGenericSend+0x200>)
 80068e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068ec:	601a      	str	r2, [r3, #0]
 80068ee:	f3bf 8f4f 	dsb	sy
 80068f2:	f3bf 8f6f 	isb	sy
 80068f6:	e772      	b.n	80067de <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80068f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80068fa:	f000 fb03 	bl	8006f04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80068fe:	f000 fe1b 	bl	8007538 <xTaskResumeAll>
 8006902:	e76c      	b.n	80067de <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006904:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006906:	f000 fafd 	bl	8006f04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800690a:	f000 fe15 	bl	8007538 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800690e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006910:	4618      	mov	r0, r3
 8006912:	3738      	adds	r7, #56	@ 0x38
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}
 8006918:	e000ed04 	.word	0xe000ed04

0800691c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b090      	sub	sp, #64	@ 0x40
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	607a      	str	r2, [r7, #4]
 8006928:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800692e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006930:	2b00      	cmp	r3, #0
 8006932:	d10b      	bne.n	800694c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006938:	f383 8811 	msr	BASEPRI, r3
 800693c:	f3bf 8f6f 	isb	sy
 8006940:	f3bf 8f4f 	dsb	sy
 8006944:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006946:	bf00      	nop
 8006948:	bf00      	nop
 800694a:	e7fd      	b.n	8006948 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d103      	bne.n	800695a <xQueueGenericSendFromISR+0x3e>
 8006952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006956:	2b00      	cmp	r3, #0
 8006958:	d101      	bne.n	800695e <xQueueGenericSendFromISR+0x42>
 800695a:	2301      	movs	r3, #1
 800695c:	e000      	b.n	8006960 <xQueueGenericSendFromISR+0x44>
 800695e:	2300      	movs	r3, #0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d10b      	bne.n	800697c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006968:	f383 8811 	msr	BASEPRI, r3
 800696c:	f3bf 8f6f 	isb	sy
 8006970:	f3bf 8f4f 	dsb	sy
 8006974:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006976:	bf00      	nop
 8006978:	bf00      	nop
 800697a:	e7fd      	b.n	8006978 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	2b02      	cmp	r3, #2
 8006980:	d103      	bne.n	800698a <xQueueGenericSendFromISR+0x6e>
 8006982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006986:	2b01      	cmp	r3, #1
 8006988:	d101      	bne.n	800698e <xQueueGenericSendFromISR+0x72>
 800698a:	2301      	movs	r3, #1
 800698c:	e000      	b.n	8006990 <xQueueGenericSendFromISR+0x74>
 800698e:	2300      	movs	r3, #0
 8006990:	2b00      	cmp	r3, #0
 8006992:	d10b      	bne.n	80069ac <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006998:	f383 8811 	msr	BASEPRI, r3
 800699c:	f3bf 8f6f 	isb	sy
 80069a0:	f3bf 8f4f 	dsb	sy
 80069a4:	623b      	str	r3, [r7, #32]
}
 80069a6:	bf00      	nop
 80069a8:	bf00      	nop
 80069aa:	e7fd      	b.n	80069a8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80069ac:	f002 f80c 	bl	80089c8 <vPortValidateInterruptPriority>
	__asm volatile
 80069b0:	f3ef 8211 	mrs	r2, BASEPRI
 80069b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069b8:	f383 8811 	msr	BASEPRI, r3
 80069bc:	f3bf 8f6f 	isb	sy
 80069c0:	f3bf 8f4f 	dsb	sy
 80069c4:	61fa      	str	r2, [r7, #28]
 80069c6:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80069c8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80069ca:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80069cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d302      	bcc.n	80069de <xQueueGenericSendFromISR+0xc2>
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	2b02      	cmp	r3, #2
 80069dc:	d12f      	bne.n	8006a3e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80069de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80069e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80069ee:	683a      	ldr	r2, [r7, #0]
 80069f0:	68b9      	ldr	r1, [r7, #8]
 80069f2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80069f4:	f000 f9f6 	bl	8006de4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80069f8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80069fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a00:	d112      	bne.n	8006a28 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d016      	beq.n	8006a38 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a0c:	3324      	adds	r3, #36	@ 0x24
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f000 ffc4 	bl	800799c <xTaskRemoveFromEventList>
 8006a14:	4603      	mov	r3, r0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00e      	beq.n	8006a38 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d00b      	beq.n	8006a38 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	601a      	str	r2, [r3, #0]
 8006a26:	e007      	b.n	8006a38 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006a28:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006a2c:	3301      	adds	r3, #1
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	b25a      	sxtb	r2, r3
 8006a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006a3c:	e001      	b.n	8006a42 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a44:	617b      	str	r3, [r7, #20]
	__asm volatile
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	f383 8811 	msr	BASEPRI, r3
}
 8006a4c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006a4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3740      	adds	r7, #64	@ 0x40
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b08c      	sub	sp, #48	@ 0x30
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006a64:	2300      	movs	r3, #0
 8006a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d10b      	bne.n	8006a8a <xQueueReceive+0x32>
	__asm volatile
 8006a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a76:	f383 8811 	msr	BASEPRI, r3
 8006a7a:	f3bf 8f6f 	isb	sy
 8006a7e:	f3bf 8f4f 	dsb	sy
 8006a82:	623b      	str	r3, [r7, #32]
}
 8006a84:	bf00      	nop
 8006a86:	bf00      	nop
 8006a88:	e7fd      	b.n	8006a86 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d103      	bne.n	8006a98 <xQueueReceive+0x40>
 8006a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d101      	bne.n	8006a9c <xQueueReceive+0x44>
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e000      	b.n	8006a9e <xQueueReceive+0x46>
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d10b      	bne.n	8006aba <xQueueReceive+0x62>
	__asm volatile
 8006aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aa6:	f383 8811 	msr	BASEPRI, r3
 8006aaa:	f3bf 8f6f 	isb	sy
 8006aae:	f3bf 8f4f 	dsb	sy
 8006ab2:	61fb      	str	r3, [r7, #28]
}
 8006ab4:	bf00      	nop
 8006ab6:	bf00      	nop
 8006ab8:	e7fd      	b.n	8006ab6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006aba:	f001 f935 	bl	8007d28 <xTaskGetSchedulerState>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d102      	bne.n	8006aca <xQueueReceive+0x72>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d101      	bne.n	8006ace <xQueueReceive+0x76>
 8006aca:	2301      	movs	r3, #1
 8006acc:	e000      	b.n	8006ad0 <xQueueReceive+0x78>
 8006ace:	2300      	movs	r3, #0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d10b      	bne.n	8006aec <xQueueReceive+0x94>
	__asm volatile
 8006ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ad8:	f383 8811 	msr	BASEPRI, r3
 8006adc:	f3bf 8f6f 	isb	sy
 8006ae0:	f3bf 8f4f 	dsb	sy
 8006ae4:	61bb      	str	r3, [r7, #24]
}
 8006ae6:	bf00      	nop
 8006ae8:	bf00      	nop
 8006aea:	e7fd      	b.n	8006ae8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006aec:	f001 fe8c 	bl	8008808 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006af4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d01f      	beq.n	8006b3c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006afc:	68b9      	ldr	r1, [r7, #8]
 8006afe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b00:	f000 f9da 	bl	8006eb8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b06:	1e5a      	subs	r2, r3, #1
 8006b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b0a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d00f      	beq.n	8006b34 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b16:	3310      	adds	r3, #16
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f000 ff3f 	bl	800799c <xTaskRemoveFromEventList>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d007      	beq.n	8006b34 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006b24:	4b3c      	ldr	r3, [pc, #240]	@ (8006c18 <xQueueReceive+0x1c0>)
 8006b26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b2a:	601a      	str	r2, [r3, #0]
 8006b2c:	f3bf 8f4f 	dsb	sy
 8006b30:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006b34:	f001 fe9a 	bl	800886c <vPortExitCritical>
				return pdPASS;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e069      	b.n	8006c10 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d103      	bne.n	8006b4a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006b42:	f001 fe93 	bl	800886c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006b46:	2300      	movs	r3, #0
 8006b48:	e062      	b.n	8006c10 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d106      	bne.n	8006b5e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b50:	f107 0310 	add.w	r3, r7, #16
 8006b54:	4618      	mov	r0, r3
 8006b56:	f000 ff85 	bl	8007a64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006b5e:	f001 fe85 	bl	800886c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b62:	f000 fcdb 	bl	800751c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b66:	f001 fe4f 	bl	8008808 <vPortEnterCritical>
 8006b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006b70:	b25b      	sxtb	r3, r3
 8006b72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b76:	d103      	bne.n	8006b80 <xQueueReceive+0x128>
 8006b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b82:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006b86:	b25b      	sxtb	r3, r3
 8006b88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b8c:	d103      	bne.n	8006b96 <xQueueReceive+0x13e>
 8006b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b90:	2200      	movs	r2, #0
 8006b92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b96:	f001 fe69 	bl	800886c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b9a:	1d3a      	adds	r2, r7, #4
 8006b9c:	f107 0310 	add.w	r3, r7, #16
 8006ba0:	4611      	mov	r1, r2
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f000 ff74 	bl	8007a90 <xTaskCheckForTimeOut>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d123      	bne.n	8006bf6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006bae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006bb0:	f000 f9fa 	bl	8006fa8 <prvIsQueueEmpty>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d017      	beq.n	8006bea <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bbc:	3324      	adds	r3, #36	@ 0x24
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	4611      	mov	r1, r2
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f000 fe98 	bl	80078f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006bc8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006bca:	f000 f99b 	bl	8006f04 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006bce:	f000 fcb3 	bl	8007538 <xTaskResumeAll>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d189      	bne.n	8006aec <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006bd8:	4b0f      	ldr	r3, [pc, #60]	@ (8006c18 <xQueueReceive+0x1c0>)
 8006bda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bde:	601a      	str	r2, [r3, #0]
 8006be0:	f3bf 8f4f 	dsb	sy
 8006be4:	f3bf 8f6f 	isb	sy
 8006be8:	e780      	b.n	8006aec <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006bea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006bec:	f000 f98a 	bl	8006f04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006bf0:	f000 fca2 	bl	8007538 <xTaskResumeAll>
 8006bf4:	e77a      	b.n	8006aec <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006bf6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006bf8:	f000 f984 	bl	8006f04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006bfc:	f000 fc9c 	bl	8007538 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c02:	f000 f9d1 	bl	8006fa8 <prvIsQueueEmpty>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	f43f af6f 	beq.w	8006aec <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006c0e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3730      	adds	r7, #48	@ 0x30
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	e000ed04 	.word	0xe000ed04

08006c1c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b08e      	sub	sp, #56	@ 0x38
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d10b      	bne.n	8006c4a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c36:	f383 8811 	msr	BASEPRI, r3
 8006c3a:	f3bf 8f6f 	isb	sy
 8006c3e:	f3bf 8f4f 	dsb	sy
 8006c42:	623b      	str	r3, [r7, #32]
}
 8006c44:	bf00      	nop
 8006c46:	bf00      	nop
 8006c48:	e7fd      	b.n	8006c46 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d103      	bne.n	8006c58 <xQueueReceiveFromISR+0x3c>
 8006c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d101      	bne.n	8006c5c <xQueueReceiveFromISR+0x40>
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e000      	b.n	8006c5e <xQueueReceiveFromISR+0x42>
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d10b      	bne.n	8006c7a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8006c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c66:	f383 8811 	msr	BASEPRI, r3
 8006c6a:	f3bf 8f6f 	isb	sy
 8006c6e:	f3bf 8f4f 	dsb	sy
 8006c72:	61fb      	str	r3, [r7, #28]
}
 8006c74:	bf00      	nop
 8006c76:	bf00      	nop
 8006c78:	e7fd      	b.n	8006c76 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c7a:	f001 fea5 	bl	80089c8 <vPortValidateInterruptPriority>
	__asm volatile
 8006c7e:	f3ef 8211 	mrs	r2, BASEPRI
 8006c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c86:	f383 8811 	msr	BASEPRI, r3
 8006c8a:	f3bf 8f6f 	isb	sy
 8006c8e:	f3bf 8f4f 	dsb	sy
 8006c92:	61ba      	str	r2, [r7, #24]
 8006c94:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006c96:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c9e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d02f      	beq.n	8006d06 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006cac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006cb0:	68b9      	ldr	r1, [r7, #8]
 8006cb2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006cb4:	f000 f900 	bl	8006eb8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cba:	1e5a      	subs	r2, r3, #1
 8006cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cbe:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006cc0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006cc4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006cc8:	d112      	bne.n	8006cf0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ccc:	691b      	ldr	r3, [r3, #16]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d016      	beq.n	8006d00 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd4:	3310      	adds	r3, #16
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f000 fe60 	bl	800799c <xTaskRemoveFromEventList>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00e      	beq.n	8006d00 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d00b      	beq.n	8006d00 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	601a      	str	r2, [r3, #0]
 8006cee:	e007      	b.n	8006d00 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006cf0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	b25a      	sxtb	r2, r3
 8006cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006d00:	2301      	movs	r3, #1
 8006d02:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d04:	e001      	b.n	8006d0a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006d06:	2300      	movs	r3, #0
 8006d08:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d0c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	f383 8811 	msr	BASEPRI, r3
}
 8006d14:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3738      	adds	r7, #56	@ 0x38
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d10b      	bne.n	8006d46 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8006d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d32:	f383 8811 	msr	BASEPRI, r3
 8006d36:	f3bf 8f6f 	isb	sy
 8006d3a:	f3bf 8f4f 	dsb	sy
 8006d3e:	60bb      	str	r3, [r7, #8]
}
 8006d40:	bf00      	nop
 8006d42:	bf00      	nop
 8006d44:	e7fd      	b.n	8006d42 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8006d46:	f001 fd5f 	bl	8008808 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d4e:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006d50:	f001 fd8c 	bl	800886c <vPortExitCritical>

	return uxReturn;
 8006d54:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006d56:	4618      	mov	r0, r3
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b086      	sub	sp, #24
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d10b      	bne.n	8006d88 <uxQueueSpacesAvailable+0x2a>
	__asm volatile
 8006d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d74:	f383 8811 	msr	BASEPRI, r3
 8006d78:	f3bf 8f6f 	isb	sy
 8006d7c:	f3bf 8f4f 	dsb	sy
 8006d80:	60fb      	str	r3, [r7, #12]
}
 8006d82:	bf00      	nop
 8006d84:	bf00      	nop
 8006d86:	e7fd      	b.n	8006d84 <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 8006d88:	f001 fd3e 	bl	8008808 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d94:	1ad3      	subs	r3, r2, r3
 8006d96:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8006d98:	f001 fd68 	bl	800886c <vPortExitCritical>

	return uxReturn;
 8006d9c:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3718      	adds	r7, #24
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8006da6:	b480      	push	{r7}
 8006da8:	b087      	sub	sp, #28
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d10b      	bne.n	8006dd0 <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 8006db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dbc:	f383 8811 	msr	BASEPRI, r3
 8006dc0:	f3bf 8f6f 	isb	sy
 8006dc4:	f3bf 8f4f 	dsb	sy
 8006dc8:	60fb      	str	r3, [r7, #12]
}
 8006dca:	bf00      	nop
 8006dcc:	bf00      	nop
 8006dce:	e7fd      	b.n	8006dcc <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dd4:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8006dd6:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006dd8:	4618      	mov	r0, r3
 8006dda:	371c      	adds	r7, #28
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b086      	sub	sp, #24
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006df0:	2300      	movs	r3, #0
 8006df2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006df8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d10d      	bne.n	8006e1e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d14d      	bne.n	8006ea6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f000 ffa8 	bl	8007d64 <xTaskPriorityDisinherit>
 8006e14:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	609a      	str	r2, [r3, #8]
 8006e1c:	e043      	b.n	8006ea6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d119      	bne.n	8006e58 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6858      	ldr	r0, [r3, #4]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	68b9      	ldr	r1, [r7, #8]
 8006e30:	f002 f8b8 	bl	8008fa4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	685a      	ldr	r2, [r3, #4]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e3c:	441a      	add	r2, r3
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	685a      	ldr	r2, [r3, #4]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d32b      	bcc.n	8006ea6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	605a      	str	r2, [r3, #4]
 8006e56:	e026      	b.n	8006ea6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	68d8      	ldr	r0, [r3, #12]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e60:	461a      	mov	r2, r3
 8006e62:	68b9      	ldr	r1, [r7, #8]
 8006e64:	f002 f89e 	bl	8008fa4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	68da      	ldr	r2, [r3, #12]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e70:	425b      	negs	r3, r3
 8006e72:	441a      	add	r2, r3
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	68da      	ldr	r2, [r3, #12]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d207      	bcs.n	8006e94 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	689a      	ldr	r2, [r3, #8]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e8c:	425b      	negs	r3, r3
 8006e8e:	441a      	add	r2, r3
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2b02      	cmp	r3, #2
 8006e98:	d105      	bne.n	8006ea6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d002      	beq.n	8006ea6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	3b01      	subs	r3, #1
 8006ea4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	1c5a      	adds	r2, r3, #1
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006eae:	697b      	ldr	r3, [r7, #20]
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3718      	adds	r7, #24
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b082      	sub	sp, #8
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d018      	beq.n	8006efc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	68da      	ldr	r2, [r3, #12]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ed2:	441a      	add	r2, r3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	68da      	ldr	r2, [r3, #12]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d303      	bcc.n	8006eec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	68d9      	ldr	r1, [r3, #12]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	6838      	ldr	r0, [r7, #0]
 8006ef8:	f002 f854 	bl	8008fa4 <memcpy>
	}
}
 8006efc:	bf00      	nop
 8006efe:	3708      	adds	r7, #8
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006f0c:	f001 fc7c 	bl	8008808 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f16:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006f18:	e011      	b.n	8006f3e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d012      	beq.n	8006f48 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	3324      	adds	r3, #36	@ 0x24
 8006f26:	4618      	mov	r0, r3
 8006f28:	f000 fd38 	bl	800799c <xTaskRemoveFromEventList>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d001      	beq.n	8006f36 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006f32:	f000 fe11 	bl	8007b58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006f36:	7bfb      	ldrb	r3, [r7, #15]
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	dce9      	bgt.n	8006f1a <prvUnlockQueue+0x16>
 8006f46:	e000      	b.n	8006f4a <prvUnlockQueue+0x46>
					break;
 8006f48:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	22ff      	movs	r2, #255	@ 0xff
 8006f4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006f52:	f001 fc8b 	bl	800886c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006f56:	f001 fc57 	bl	8008808 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f60:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f62:	e011      	b.n	8006f88 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	691b      	ldr	r3, [r3, #16]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d012      	beq.n	8006f92 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	3310      	adds	r3, #16
 8006f70:	4618      	mov	r0, r3
 8006f72:	f000 fd13 	bl	800799c <xTaskRemoveFromEventList>
 8006f76:	4603      	mov	r3, r0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d001      	beq.n	8006f80 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006f7c:	f000 fdec 	bl	8007b58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006f80:	7bbb      	ldrb	r3, [r7, #14]
 8006f82:	3b01      	subs	r3, #1
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	dce9      	bgt.n	8006f64 <prvUnlockQueue+0x60>
 8006f90:	e000      	b.n	8006f94 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006f92:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	22ff      	movs	r2, #255	@ 0xff
 8006f98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006f9c:	f001 fc66 	bl	800886c <vPortExitCritical>
}
 8006fa0:	bf00      	nop
 8006fa2:	3710      	adds	r7, #16
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006fb0:	f001 fc2a 	bl	8008808 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d102      	bne.n	8006fc2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	60fb      	str	r3, [r7, #12]
 8006fc0:	e001      	b.n	8006fc6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006fc6:	f001 fc51 	bl	800886c <vPortExitCritical>

	return xReturn;
 8006fca:	68fb      	ldr	r3, [r7, #12]
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3710      	adds	r7, #16
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006fdc:	f001 fc14 	bl	8008808 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d102      	bne.n	8006ff2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006fec:	2301      	movs	r3, #1
 8006fee:	60fb      	str	r3, [r7, #12]
 8006ff0:	e001      	b.n	8006ff6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006ff6:	f001 fc39 	bl	800886c <vPortExitCritical>

	return xReturn;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3710      	adds	r7, #16
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007004:	b480      	push	{r7}
 8007006:	b085      	sub	sp, #20
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800700e:	2300      	movs	r3, #0
 8007010:	60fb      	str	r3, [r7, #12]
 8007012:	e014      	b.n	800703e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007014:	4a0f      	ldr	r2, [pc, #60]	@ (8007054 <vQueueAddToRegistry+0x50>)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d10b      	bne.n	8007038 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007020:	490c      	ldr	r1, [pc, #48]	@ (8007054 <vQueueAddToRegistry+0x50>)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	683a      	ldr	r2, [r7, #0]
 8007026:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800702a:	4a0a      	ldr	r2, [pc, #40]	@ (8007054 <vQueueAddToRegistry+0x50>)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	00db      	lsls	r3, r3, #3
 8007030:	4413      	add	r3, r2
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007036:	e006      	b.n	8007046 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	3301      	adds	r3, #1
 800703c:	60fb      	str	r3, [r7, #12]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2b07      	cmp	r3, #7
 8007042:	d9e7      	bls.n	8007014 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007044:	bf00      	nop
 8007046:	bf00      	nop
 8007048:	3714      	adds	r7, #20
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop
 8007054:	2000111c 	.word	0x2000111c

08007058 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007058:	b580      	push	{r7, lr}
 800705a:	b086      	sub	sp, #24
 800705c:	af00      	add	r7, sp, #0
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007068:	f001 fbce 	bl	8008808 <vPortEnterCritical>
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007072:	b25b      	sxtb	r3, r3
 8007074:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007078:	d103      	bne.n	8007082 <vQueueWaitForMessageRestricted+0x2a>
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	2200      	movs	r2, #0
 800707e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007088:	b25b      	sxtb	r3, r3
 800708a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800708e:	d103      	bne.n	8007098 <vQueueWaitForMessageRestricted+0x40>
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	2200      	movs	r2, #0
 8007094:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007098:	f001 fbe8 	bl	800886c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d106      	bne.n	80070b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	3324      	adds	r3, #36	@ 0x24
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	68b9      	ldr	r1, [r7, #8]
 80070ac:	4618      	mov	r0, r3
 80070ae:	f000 fc49 	bl	8007944 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80070b2:	6978      	ldr	r0, [r7, #20]
 80070b4:	f7ff ff26 	bl	8006f04 <prvUnlockQueue>
	}
 80070b8:	bf00      	nop
 80070ba:	3718      	adds	r7, #24
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b08e      	sub	sp, #56	@ 0x38
 80070c4:	af04      	add	r7, sp, #16
 80070c6:	60f8      	str	r0, [r7, #12]
 80070c8:	60b9      	str	r1, [r7, #8]
 80070ca:	607a      	str	r2, [r7, #4]
 80070cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80070ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d10b      	bne.n	80070ec <xTaskCreateStatic+0x2c>
	__asm volatile
 80070d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070d8:	f383 8811 	msr	BASEPRI, r3
 80070dc:	f3bf 8f6f 	isb	sy
 80070e0:	f3bf 8f4f 	dsb	sy
 80070e4:	623b      	str	r3, [r7, #32]
}
 80070e6:	bf00      	nop
 80070e8:	bf00      	nop
 80070ea:	e7fd      	b.n	80070e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80070ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d10b      	bne.n	800710a <xTaskCreateStatic+0x4a>
	__asm volatile
 80070f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070f6:	f383 8811 	msr	BASEPRI, r3
 80070fa:	f3bf 8f6f 	isb	sy
 80070fe:	f3bf 8f4f 	dsb	sy
 8007102:	61fb      	str	r3, [r7, #28]
}
 8007104:	bf00      	nop
 8007106:	bf00      	nop
 8007108:	e7fd      	b.n	8007106 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800710a:	23a8      	movs	r3, #168	@ 0xa8
 800710c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	2ba8      	cmp	r3, #168	@ 0xa8
 8007112:	d00b      	beq.n	800712c <xTaskCreateStatic+0x6c>
	__asm volatile
 8007114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007118:	f383 8811 	msr	BASEPRI, r3
 800711c:	f3bf 8f6f 	isb	sy
 8007120:	f3bf 8f4f 	dsb	sy
 8007124:	61bb      	str	r3, [r7, #24]
}
 8007126:	bf00      	nop
 8007128:	bf00      	nop
 800712a:	e7fd      	b.n	8007128 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800712c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800712e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007130:	2b00      	cmp	r3, #0
 8007132:	d01e      	beq.n	8007172 <xTaskCreateStatic+0xb2>
 8007134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007136:	2b00      	cmp	r3, #0
 8007138:	d01b      	beq.n	8007172 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800713a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800713c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800713e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007140:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007142:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007146:	2202      	movs	r2, #2
 8007148:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800714c:	2300      	movs	r3, #0
 800714e:	9303      	str	r3, [sp, #12]
 8007150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007152:	9302      	str	r3, [sp, #8]
 8007154:	f107 0314 	add.w	r3, r7, #20
 8007158:	9301      	str	r3, [sp, #4]
 800715a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800715c:	9300      	str	r3, [sp, #0]
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	68b9      	ldr	r1, [r7, #8]
 8007164:	68f8      	ldr	r0, [r7, #12]
 8007166:	f000 f851 	bl	800720c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800716a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800716c:	f000 f8f6 	bl	800735c <prvAddNewTaskToReadyList>
 8007170:	e001      	b.n	8007176 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007172:	2300      	movs	r3, #0
 8007174:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007176:	697b      	ldr	r3, [r7, #20]
	}
 8007178:	4618      	mov	r0, r3
 800717a:	3728      	adds	r7, #40	@ 0x28
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007180:	b580      	push	{r7, lr}
 8007182:	b08c      	sub	sp, #48	@ 0x30
 8007184:	af04      	add	r7, sp, #16
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	603b      	str	r3, [r7, #0]
 800718c:	4613      	mov	r3, r2
 800718e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007190:	88fb      	ldrh	r3, [r7, #6]
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	4618      	mov	r0, r3
 8007196:	f001 fc59 	bl	8008a4c <pvPortMalloc>
 800719a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00e      	beq.n	80071c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80071a2:	20a8      	movs	r0, #168	@ 0xa8
 80071a4:	f001 fc52 	bl	8008a4c <pvPortMalloc>
 80071a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80071aa:	69fb      	ldr	r3, [r7, #28]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d003      	beq.n	80071b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80071b0:	69fb      	ldr	r3, [r7, #28]
 80071b2:	697a      	ldr	r2, [r7, #20]
 80071b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80071b6:	e005      	b.n	80071c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80071b8:	6978      	ldr	r0, [r7, #20]
 80071ba:	f001 fd15 	bl	8008be8 <vPortFree>
 80071be:	e001      	b.n	80071c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80071c0:	2300      	movs	r3, #0
 80071c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d017      	beq.n	80071fa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	2200      	movs	r2, #0
 80071ce:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80071d2:	88fa      	ldrh	r2, [r7, #6]
 80071d4:	2300      	movs	r3, #0
 80071d6:	9303      	str	r3, [sp, #12]
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	9302      	str	r3, [sp, #8]
 80071dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071de:	9301      	str	r3, [sp, #4]
 80071e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071e2:	9300      	str	r3, [sp, #0]
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	68b9      	ldr	r1, [r7, #8]
 80071e8:	68f8      	ldr	r0, [r7, #12]
 80071ea:	f000 f80f 	bl	800720c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80071ee:	69f8      	ldr	r0, [r7, #28]
 80071f0:	f000 f8b4 	bl	800735c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80071f4:	2301      	movs	r3, #1
 80071f6:	61bb      	str	r3, [r7, #24]
 80071f8:	e002      	b.n	8007200 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80071fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80071fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007200:	69bb      	ldr	r3, [r7, #24]
	}
 8007202:	4618      	mov	r0, r3
 8007204:	3720      	adds	r7, #32
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
	...

0800720c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b088      	sub	sp, #32
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	607a      	str	r2, [r7, #4]
 8007218:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800721a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800721c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	461a      	mov	r2, r3
 8007224:	21a5      	movs	r1, #165	@ 0xa5
 8007226:	f001 fe1f 	bl	8008e68 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800722a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800722c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007234:	3b01      	subs	r3, #1
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	4413      	add	r3, r2
 800723a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	f023 0307 	bic.w	r3, r3, #7
 8007242:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	f003 0307 	and.w	r3, r3, #7
 800724a:	2b00      	cmp	r3, #0
 800724c:	d00b      	beq.n	8007266 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800724e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007252:	f383 8811 	msr	BASEPRI, r3
 8007256:	f3bf 8f6f 	isb	sy
 800725a:	f3bf 8f4f 	dsb	sy
 800725e:	617b      	str	r3, [r7, #20]
}
 8007260:	bf00      	nop
 8007262:	bf00      	nop
 8007264:	e7fd      	b.n	8007262 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d01f      	beq.n	80072ac <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800726c:	2300      	movs	r3, #0
 800726e:	61fb      	str	r3, [r7, #28]
 8007270:	e012      	b.n	8007298 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007272:	68ba      	ldr	r2, [r7, #8]
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	4413      	add	r3, r2
 8007278:	7819      	ldrb	r1, [r3, #0]
 800727a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800727c:	69fb      	ldr	r3, [r7, #28]
 800727e:	4413      	add	r3, r2
 8007280:	3334      	adds	r3, #52	@ 0x34
 8007282:	460a      	mov	r2, r1
 8007284:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007286:	68ba      	ldr	r2, [r7, #8]
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	4413      	add	r3, r2
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d006      	beq.n	80072a0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	3301      	adds	r3, #1
 8007296:	61fb      	str	r3, [r7, #28]
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	2b0f      	cmp	r3, #15
 800729c:	d9e9      	bls.n	8007272 <prvInitialiseNewTask+0x66>
 800729e:	e000      	b.n	80072a2 <prvInitialiseNewTask+0x96>
			{
				break;
 80072a0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80072a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a4:	2200      	movs	r2, #0
 80072a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80072aa:	e003      	b.n	80072b4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80072ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ae:	2200      	movs	r2, #0
 80072b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80072b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072b6:	2b37      	cmp	r3, #55	@ 0x37
 80072b8:	d901      	bls.n	80072be <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80072ba:	2337      	movs	r3, #55	@ 0x37
 80072bc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80072be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80072c2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80072c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80072c8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80072ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072cc:	2200      	movs	r2, #0
 80072ce:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80072d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d2:	3304      	adds	r3, #4
 80072d4:	4618      	mov	r0, r3
 80072d6:	f7ff f845 	bl	8006364 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80072da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072dc:	3318      	adds	r3, #24
 80072de:	4618      	mov	r0, r3
 80072e0:	f7ff f840 	bl	8006364 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80072e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072e8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ec:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80072f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80072f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072f8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80072fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072fc:	2200      	movs	r2, #0
 80072fe:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007304:	2200      	movs	r2, #0
 8007306:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800730a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800730c:	3354      	adds	r3, #84	@ 0x54
 800730e:	224c      	movs	r2, #76	@ 0x4c
 8007310:	2100      	movs	r1, #0
 8007312:	4618      	mov	r0, r3
 8007314:	f001 fda8 	bl	8008e68 <memset>
 8007318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800731a:	4a0d      	ldr	r2, [pc, #52]	@ (8007350 <prvInitialiseNewTask+0x144>)
 800731c:	659a      	str	r2, [r3, #88]	@ 0x58
 800731e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007320:	4a0c      	ldr	r2, [pc, #48]	@ (8007354 <prvInitialiseNewTask+0x148>)
 8007322:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007326:	4a0c      	ldr	r2, [pc, #48]	@ (8007358 <prvInitialiseNewTask+0x14c>)
 8007328:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800732a:	683a      	ldr	r2, [r7, #0]
 800732c:	68f9      	ldr	r1, [r7, #12]
 800732e:	69b8      	ldr	r0, [r7, #24]
 8007330:	f001 f936 	bl	80085a0 <pxPortInitialiseStack>
 8007334:	4602      	mov	r2, r0
 8007336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007338:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800733a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800733c:	2b00      	cmp	r3, #0
 800733e:	d002      	beq.n	8007346 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007342:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007344:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007346:	bf00      	nop
 8007348:	3720      	adds	r7, #32
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop
 8007350:	200053b0 	.word	0x200053b0
 8007354:	20005418 	.word	0x20005418
 8007358:	20005480 	.word	0x20005480

0800735c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007364:	f001 fa50 	bl	8008808 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007368:	4b2d      	ldr	r3, [pc, #180]	@ (8007420 <prvAddNewTaskToReadyList+0xc4>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	3301      	adds	r3, #1
 800736e:	4a2c      	ldr	r2, [pc, #176]	@ (8007420 <prvAddNewTaskToReadyList+0xc4>)
 8007370:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007372:	4b2c      	ldr	r3, [pc, #176]	@ (8007424 <prvAddNewTaskToReadyList+0xc8>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d109      	bne.n	800738e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800737a:	4a2a      	ldr	r2, [pc, #168]	@ (8007424 <prvAddNewTaskToReadyList+0xc8>)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007380:	4b27      	ldr	r3, [pc, #156]	@ (8007420 <prvAddNewTaskToReadyList+0xc4>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2b01      	cmp	r3, #1
 8007386:	d110      	bne.n	80073aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007388:	f000 fc0a 	bl	8007ba0 <prvInitialiseTaskLists>
 800738c:	e00d      	b.n	80073aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800738e:	4b26      	ldr	r3, [pc, #152]	@ (8007428 <prvAddNewTaskToReadyList+0xcc>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d109      	bne.n	80073aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007396:	4b23      	ldr	r3, [pc, #140]	@ (8007424 <prvAddNewTaskToReadyList+0xc8>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d802      	bhi.n	80073aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80073a4:	4a1f      	ldr	r2, [pc, #124]	@ (8007424 <prvAddNewTaskToReadyList+0xc8>)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80073aa:	4b20      	ldr	r3, [pc, #128]	@ (800742c <prvAddNewTaskToReadyList+0xd0>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	3301      	adds	r3, #1
 80073b0:	4a1e      	ldr	r2, [pc, #120]	@ (800742c <prvAddNewTaskToReadyList+0xd0>)
 80073b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80073b4:	4b1d      	ldr	r3, [pc, #116]	@ (800742c <prvAddNewTaskToReadyList+0xd0>)
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073c0:	4b1b      	ldr	r3, [pc, #108]	@ (8007430 <prvAddNewTaskToReadyList+0xd4>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d903      	bls.n	80073d0 <prvAddNewTaskToReadyList+0x74>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073cc:	4a18      	ldr	r2, [pc, #96]	@ (8007430 <prvAddNewTaskToReadyList+0xd4>)
 80073ce:	6013      	str	r3, [r2, #0]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073d4:	4613      	mov	r3, r2
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	4413      	add	r3, r2
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	4a15      	ldr	r2, [pc, #84]	@ (8007434 <prvAddNewTaskToReadyList+0xd8>)
 80073de:	441a      	add	r2, r3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	3304      	adds	r3, #4
 80073e4:	4619      	mov	r1, r3
 80073e6:	4610      	mov	r0, r2
 80073e8:	f7fe ffc9 	bl	800637e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80073ec:	f001 fa3e 	bl	800886c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80073f0:	4b0d      	ldr	r3, [pc, #52]	@ (8007428 <prvAddNewTaskToReadyList+0xcc>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d00e      	beq.n	8007416 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80073f8:	4b0a      	ldr	r3, [pc, #40]	@ (8007424 <prvAddNewTaskToReadyList+0xc8>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007402:	429a      	cmp	r2, r3
 8007404:	d207      	bcs.n	8007416 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007406:	4b0c      	ldr	r3, [pc, #48]	@ (8007438 <prvAddNewTaskToReadyList+0xdc>)
 8007408:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800740c:	601a      	str	r2, [r3, #0]
 800740e:	f3bf 8f4f 	dsb	sy
 8007412:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007416:	bf00      	nop
 8007418:	3708      	adds	r7, #8
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	20001630 	.word	0x20001630
 8007424:	2000115c 	.word	0x2000115c
 8007428:	2000163c 	.word	0x2000163c
 800742c:	2000164c 	.word	0x2000164c
 8007430:	20001638 	.word	0x20001638
 8007434:	20001160 	.word	0x20001160
 8007438:	e000ed04 	.word	0xe000ed04

0800743c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b08a      	sub	sp, #40	@ 0x28
 8007440:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007442:	2300      	movs	r3, #0
 8007444:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007446:	2300      	movs	r3, #0
 8007448:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800744a:	463a      	mov	r2, r7
 800744c:	1d39      	adds	r1, r7, #4
 800744e:	f107 0308 	add.w	r3, r7, #8
 8007452:	4618      	mov	r0, r3
 8007454:	f7fe ff32 	bl	80062bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007458:	6839      	ldr	r1, [r7, #0]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	68ba      	ldr	r2, [r7, #8]
 800745e:	9202      	str	r2, [sp, #8]
 8007460:	9301      	str	r3, [sp, #4]
 8007462:	2300      	movs	r3, #0
 8007464:	9300      	str	r3, [sp, #0]
 8007466:	2300      	movs	r3, #0
 8007468:	460a      	mov	r2, r1
 800746a:	4924      	ldr	r1, [pc, #144]	@ (80074fc <vTaskStartScheduler+0xc0>)
 800746c:	4824      	ldr	r0, [pc, #144]	@ (8007500 <vTaskStartScheduler+0xc4>)
 800746e:	f7ff fe27 	bl	80070c0 <xTaskCreateStatic>
 8007472:	4603      	mov	r3, r0
 8007474:	4a23      	ldr	r2, [pc, #140]	@ (8007504 <vTaskStartScheduler+0xc8>)
 8007476:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007478:	4b22      	ldr	r3, [pc, #136]	@ (8007504 <vTaskStartScheduler+0xc8>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d002      	beq.n	8007486 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007480:	2301      	movs	r3, #1
 8007482:	617b      	str	r3, [r7, #20]
 8007484:	e001      	b.n	800748a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007486:	2300      	movs	r3, #0
 8007488:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	2b01      	cmp	r3, #1
 800748e:	d102      	bne.n	8007496 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007490:	f000 fd2c 	bl	8007eec <xTimerCreateTimerTask>
 8007494:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	2b01      	cmp	r3, #1
 800749a:	d11b      	bne.n	80074d4 <vTaskStartScheduler+0x98>
	__asm volatile
 800749c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074a0:	f383 8811 	msr	BASEPRI, r3
 80074a4:	f3bf 8f6f 	isb	sy
 80074a8:	f3bf 8f4f 	dsb	sy
 80074ac:	613b      	str	r3, [r7, #16]
}
 80074ae:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80074b0:	4b15      	ldr	r3, [pc, #84]	@ (8007508 <vTaskStartScheduler+0xcc>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	3354      	adds	r3, #84	@ 0x54
 80074b6:	4a15      	ldr	r2, [pc, #84]	@ (800750c <vTaskStartScheduler+0xd0>)
 80074b8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80074ba:	4b15      	ldr	r3, [pc, #84]	@ (8007510 <vTaskStartScheduler+0xd4>)
 80074bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80074c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80074c2:	4b14      	ldr	r3, [pc, #80]	@ (8007514 <vTaskStartScheduler+0xd8>)
 80074c4:	2201      	movs	r2, #1
 80074c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80074c8:	4b13      	ldr	r3, [pc, #76]	@ (8007518 <vTaskStartScheduler+0xdc>)
 80074ca:	2200      	movs	r2, #0
 80074cc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80074ce:	f001 f8f7 	bl	80086c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80074d2:	e00f      	b.n	80074f4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80074da:	d10b      	bne.n	80074f4 <vTaskStartScheduler+0xb8>
	__asm volatile
 80074dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074e0:	f383 8811 	msr	BASEPRI, r3
 80074e4:	f3bf 8f6f 	isb	sy
 80074e8:	f3bf 8f4f 	dsb	sy
 80074ec:	60fb      	str	r3, [r7, #12]
}
 80074ee:	bf00      	nop
 80074f0:	bf00      	nop
 80074f2:	e7fd      	b.n	80074f0 <vTaskStartScheduler+0xb4>
}
 80074f4:	bf00      	nop
 80074f6:	3718      	adds	r7, #24
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	08009f58 	.word	0x08009f58
 8007500:	08007b71 	.word	0x08007b71
 8007504:	20001654 	.word	0x20001654
 8007508:	2000115c 	.word	0x2000115c
 800750c:	20000010 	.word	0x20000010
 8007510:	20001650 	.word	0x20001650
 8007514:	2000163c 	.word	0x2000163c
 8007518:	20001634 	.word	0x20001634

0800751c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800751c:	b480      	push	{r7}
 800751e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007520:	4b04      	ldr	r3, [pc, #16]	@ (8007534 <vTaskSuspendAll+0x18>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	3301      	adds	r3, #1
 8007526:	4a03      	ldr	r2, [pc, #12]	@ (8007534 <vTaskSuspendAll+0x18>)
 8007528:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800752a:	bf00      	nop
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr
 8007534:	20001658 	.word	0x20001658

08007538 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b084      	sub	sp, #16
 800753c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800753e:	2300      	movs	r3, #0
 8007540:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007542:	2300      	movs	r3, #0
 8007544:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007546:	4b42      	ldr	r3, [pc, #264]	@ (8007650 <xTaskResumeAll+0x118>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d10b      	bne.n	8007566 <xTaskResumeAll+0x2e>
	__asm volatile
 800754e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007552:	f383 8811 	msr	BASEPRI, r3
 8007556:	f3bf 8f6f 	isb	sy
 800755a:	f3bf 8f4f 	dsb	sy
 800755e:	603b      	str	r3, [r7, #0]
}
 8007560:	bf00      	nop
 8007562:	bf00      	nop
 8007564:	e7fd      	b.n	8007562 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007566:	f001 f94f 	bl	8008808 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800756a:	4b39      	ldr	r3, [pc, #228]	@ (8007650 <xTaskResumeAll+0x118>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	3b01      	subs	r3, #1
 8007570:	4a37      	ldr	r2, [pc, #220]	@ (8007650 <xTaskResumeAll+0x118>)
 8007572:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007574:	4b36      	ldr	r3, [pc, #216]	@ (8007650 <xTaskResumeAll+0x118>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d162      	bne.n	8007642 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800757c:	4b35      	ldr	r3, [pc, #212]	@ (8007654 <xTaskResumeAll+0x11c>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d05e      	beq.n	8007642 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007584:	e02f      	b.n	80075e6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007586:	4b34      	ldr	r3, [pc, #208]	@ (8007658 <xTaskResumeAll+0x120>)
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	3318      	adds	r3, #24
 8007592:	4618      	mov	r0, r3
 8007594:	f7fe ff50 	bl	8006438 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	3304      	adds	r3, #4
 800759c:	4618      	mov	r0, r3
 800759e:	f7fe ff4b 	bl	8006438 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075a6:	4b2d      	ldr	r3, [pc, #180]	@ (800765c <xTaskResumeAll+0x124>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d903      	bls.n	80075b6 <xTaskResumeAll+0x7e>
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075b2:	4a2a      	ldr	r2, [pc, #168]	@ (800765c <xTaskResumeAll+0x124>)
 80075b4:	6013      	str	r3, [r2, #0]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075ba:	4613      	mov	r3, r2
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	4413      	add	r3, r2
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	4a27      	ldr	r2, [pc, #156]	@ (8007660 <xTaskResumeAll+0x128>)
 80075c4:	441a      	add	r2, r3
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	3304      	adds	r3, #4
 80075ca:	4619      	mov	r1, r3
 80075cc:	4610      	mov	r0, r2
 80075ce:	f7fe fed6 	bl	800637e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075d6:	4b23      	ldr	r3, [pc, #140]	@ (8007664 <xTaskResumeAll+0x12c>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075dc:	429a      	cmp	r2, r3
 80075de:	d302      	bcc.n	80075e6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80075e0:	4b21      	ldr	r3, [pc, #132]	@ (8007668 <xTaskResumeAll+0x130>)
 80075e2:	2201      	movs	r2, #1
 80075e4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80075e6:	4b1c      	ldr	r3, [pc, #112]	@ (8007658 <xTaskResumeAll+0x120>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d1cb      	bne.n	8007586 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d001      	beq.n	80075f8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80075f4:	f000 fb78 	bl	8007ce8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80075f8:	4b1c      	ldr	r3, [pc, #112]	@ (800766c <xTaskResumeAll+0x134>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d010      	beq.n	8007626 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007604:	f000 f858 	bl	80076b8 <xTaskIncrementTick>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d002      	beq.n	8007614 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800760e:	4b16      	ldr	r3, [pc, #88]	@ (8007668 <xTaskResumeAll+0x130>)
 8007610:	2201      	movs	r2, #1
 8007612:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	3b01      	subs	r3, #1
 8007618:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d1f1      	bne.n	8007604 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007620:	4b12      	ldr	r3, [pc, #72]	@ (800766c <xTaskResumeAll+0x134>)
 8007622:	2200      	movs	r2, #0
 8007624:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007626:	4b10      	ldr	r3, [pc, #64]	@ (8007668 <xTaskResumeAll+0x130>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d009      	beq.n	8007642 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800762e:	2301      	movs	r3, #1
 8007630:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007632:	4b0f      	ldr	r3, [pc, #60]	@ (8007670 <xTaskResumeAll+0x138>)
 8007634:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007638:	601a      	str	r2, [r3, #0]
 800763a:	f3bf 8f4f 	dsb	sy
 800763e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007642:	f001 f913 	bl	800886c <vPortExitCritical>

	return xAlreadyYielded;
 8007646:	68bb      	ldr	r3, [r7, #8]
}
 8007648:	4618      	mov	r0, r3
 800764a:	3710      	adds	r7, #16
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}
 8007650:	20001658 	.word	0x20001658
 8007654:	20001630 	.word	0x20001630
 8007658:	200015f0 	.word	0x200015f0
 800765c:	20001638 	.word	0x20001638
 8007660:	20001160 	.word	0x20001160
 8007664:	2000115c 	.word	0x2000115c
 8007668:	20001644 	.word	0x20001644
 800766c:	20001640 	.word	0x20001640
 8007670:	e000ed04 	.word	0xe000ed04

08007674 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800767a:	4b05      	ldr	r3, [pc, #20]	@ (8007690 <xTaskGetTickCount+0x1c>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007680:	687b      	ldr	r3, [r7, #4]
}
 8007682:	4618      	mov	r0, r3
 8007684:	370c      	adds	r7, #12
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr
 800768e:	bf00      	nop
 8007690:	20001634 	.word	0x20001634

08007694 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800769a:	f001 f995 	bl	80089c8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800769e:	2300      	movs	r3, #0
 80076a0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80076a2:	4b04      	ldr	r3, [pc, #16]	@ (80076b4 <xTaskGetTickCountFromISR+0x20>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80076a8:	683b      	ldr	r3, [r7, #0]
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3708      	adds	r7, #8
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	bf00      	nop
 80076b4:	20001634 	.word	0x20001634

080076b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b086      	sub	sp, #24
 80076bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80076be:	2300      	movs	r3, #0
 80076c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076c2:	4b4f      	ldr	r3, [pc, #316]	@ (8007800 <xTaskIncrementTick+0x148>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	f040 8090 	bne.w	80077ec <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80076cc:	4b4d      	ldr	r3, [pc, #308]	@ (8007804 <xTaskIncrementTick+0x14c>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	3301      	adds	r3, #1
 80076d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80076d4:	4a4b      	ldr	r2, [pc, #300]	@ (8007804 <xTaskIncrementTick+0x14c>)
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d121      	bne.n	8007724 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80076e0:	4b49      	ldr	r3, [pc, #292]	@ (8007808 <xTaskIncrementTick+0x150>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d00b      	beq.n	8007702 <xTaskIncrementTick+0x4a>
	__asm volatile
 80076ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ee:	f383 8811 	msr	BASEPRI, r3
 80076f2:	f3bf 8f6f 	isb	sy
 80076f6:	f3bf 8f4f 	dsb	sy
 80076fa:	603b      	str	r3, [r7, #0]
}
 80076fc:	bf00      	nop
 80076fe:	bf00      	nop
 8007700:	e7fd      	b.n	80076fe <xTaskIncrementTick+0x46>
 8007702:	4b41      	ldr	r3, [pc, #260]	@ (8007808 <xTaskIncrementTick+0x150>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	60fb      	str	r3, [r7, #12]
 8007708:	4b40      	ldr	r3, [pc, #256]	@ (800780c <xTaskIncrementTick+0x154>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a3e      	ldr	r2, [pc, #248]	@ (8007808 <xTaskIncrementTick+0x150>)
 800770e:	6013      	str	r3, [r2, #0]
 8007710:	4a3e      	ldr	r2, [pc, #248]	@ (800780c <xTaskIncrementTick+0x154>)
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6013      	str	r3, [r2, #0]
 8007716:	4b3e      	ldr	r3, [pc, #248]	@ (8007810 <xTaskIncrementTick+0x158>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	3301      	adds	r3, #1
 800771c:	4a3c      	ldr	r2, [pc, #240]	@ (8007810 <xTaskIncrementTick+0x158>)
 800771e:	6013      	str	r3, [r2, #0]
 8007720:	f000 fae2 	bl	8007ce8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007724:	4b3b      	ldr	r3, [pc, #236]	@ (8007814 <xTaskIncrementTick+0x15c>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	693a      	ldr	r2, [r7, #16]
 800772a:	429a      	cmp	r2, r3
 800772c:	d349      	bcc.n	80077c2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800772e:	4b36      	ldr	r3, [pc, #216]	@ (8007808 <xTaskIncrementTick+0x150>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d104      	bne.n	8007742 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007738:	4b36      	ldr	r3, [pc, #216]	@ (8007814 <xTaskIncrementTick+0x15c>)
 800773a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800773e:	601a      	str	r2, [r3, #0]
					break;
 8007740:	e03f      	b.n	80077c2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007742:	4b31      	ldr	r3, [pc, #196]	@ (8007808 <xTaskIncrementTick+0x150>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	68db      	ldr	r3, [r3, #12]
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007752:	693a      	ldr	r2, [r7, #16]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	429a      	cmp	r2, r3
 8007758:	d203      	bcs.n	8007762 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800775a:	4a2e      	ldr	r2, [pc, #184]	@ (8007814 <xTaskIncrementTick+0x15c>)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007760:	e02f      	b.n	80077c2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	3304      	adds	r3, #4
 8007766:	4618      	mov	r0, r3
 8007768:	f7fe fe66 	bl	8006438 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007770:	2b00      	cmp	r3, #0
 8007772:	d004      	beq.n	800777e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	3318      	adds	r3, #24
 8007778:	4618      	mov	r0, r3
 800777a:	f7fe fe5d 	bl	8006438 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007782:	4b25      	ldr	r3, [pc, #148]	@ (8007818 <xTaskIncrementTick+0x160>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	429a      	cmp	r2, r3
 8007788:	d903      	bls.n	8007792 <xTaskIncrementTick+0xda>
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800778e:	4a22      	ldr	r2, [pc, #136]	@ (8007818 <xTaskIncrementTick+0x160>)
 8007790:	6013      	str	r3, [r2, #0]
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007796:	4613      	mov	r3, r2
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	4413      	add	r3, r2
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	4a1f      	ldr	r2, [pc, #124]	@ (800781c <xTaskIncrementTick+0x164>)
 80077a0:	441a      	add	r2, r3
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	3304      	adds	r3, #4
 80077a6:	4619      	mov	r1, r3
 80077a8:	4610      	mov	r0, r2
 80077aa:	f7fe fde8 	bl	800637e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077b2:	4b1b      	ldr	r3, [pc, #108]	@ (8007820 <xTaskIncrementTick+0x168>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d3b8      	bcc.n	800772e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80077bc:	2301      	movs	r3, #1
 80077be:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077c0:	e7b5      	b.n	800772e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80077c2:	4b17      	ldr	r3, [pc, #92]	@ (8007820 <xTaskIncrementTick+0x168>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077c8:	4914      	ldr	r1, [pc, #80]	@ (800781c <xTaskIncrementTick+0x164>)
 80077ca:	4613      	mov	r3, r2
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	4413      	add	r3, r2
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	440b      	add	r3, r1
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d901      	bls.n	80077de <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80077da:	2301      	movs	r3, #1
 80077dc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80077de:	4b11      	ldr	r3, [pc, #68]	@ (8007824 <xTaskIncrementTick+0x16c>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d007      	beq.n	80077f6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80077e6:	2301      	movs	r3, #1
 80077e8:	617b      	str	r3, [r7, #20]
 80077ea:	e004      	b.n	80077f6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80077ec:	4b0e      	ldr	r3, [pc, #56]	@ (8007828 <xTaskIncrementTick+0x170>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	3301      	adds	r3, #1
 80077f2:	4a0d      	ldr	r2, [pc, #52]	@ (8007828 <xTaskIncrementTick+0x170>)
 80077f4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80077f6:	697b      	ldr	r3, [r7, #20]
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3718      	adds	r7, #24
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}
 8007800:	20001658 	.word	0x20001658
 8007804:	20001634 	.word	0x20001634
 8007808:	200015e8 	.word	0x200015e8
 800780c:	200015ec 	.word	0x200015ec
 8007810:	20001648 	.word	0x20001648
 8007814:	20001650 	.word	0x20001650
 8007818:	20001638 	.word	0x20001638
 800781c:	20001160 	.word	0x20001160
 8007820:	2000115c 	.word	0x2000115c
 8007824:	20001644 	.word	0x20001644
 8007828:	20001640 	.word	0x20001640

0800782c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800782c:	b480      	push	{r7}
 800782e:	b085      	sub	sp, #20
 8007830:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007832:	4b2b      	ldr	r3, [pc, #172]	@ (80078e0 <vTaskSwitchContext+0xb4>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d003      	beq.n	8007842 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800783a:	4b2a      	ldr	r3, [pc, #168]	@ (80078e4 <vTaskSwitchContext+0xb8>)
 800783c:	2201      	movs	r2, #1
 800783e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007840:	e047      	b.n	80078d2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8007842:	4b28      	ldr	r3, [pc, #160]	@ (80078e4 <vTaskSwitchContext+0xb8>)
 8007844:	2200      	movs	r2, #0
 8007846:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007848:	4b27      	ldr	r3, [pc, #156]	@ (80078e8 <vTaskSwitchContext+0xbc>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	60fb      	str	r3, [r7, #12]
 800784e:	e011      	b.n	8007874 <vTaskSwitchContext+0x48>
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d10b      	bne.n	800786e <vTaskSwitchContext+0x42>
	__asm volatile
 8007856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800785a:	f383 8811 	msr	BASEPRI, r3
 800785e:	f3bf 8f6f 	isb	sy
 8007862:	f3bf 8f4f 	dsb	sy
 8007866:	607b      	str	r3, [r7, #4]
}
 8007868:	bf00      	nop
 800786a:	bf00      	nop
 800786c:	e7fd      	b.n	800786a <vTaskSwitchContext+0x3e>
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	3b01      	subs	r3, #1
 8007872:	60fb      	str	r3, [r7, #12]
 8007874:	491d      	ldr	r1, [pc, #116]	@ (80078ec <vTaskSwitchContext+0xc0>)
 8007876:	68fa      	ldr	r2, [r7, #12]
 8007878:	4613      	mov	r3, r2
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	4413      	add	r3, r2
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	440b      	add	r3, r1
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d0e3      	beq.n	8007850 <vTaskSwitchContext+0x24>
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	4613      	mov	r3, r2
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	4413      	add	r3, r2
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	4a16      	ldr	r2, [pc, #88]	@ (80078ec <vTaskSwitchContext+0xc0>)
 8007894:	4413      	add	r3, r2
 8007896:	60bb      	str	r3, [r7, #8]
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	685a      	ldr	r2, [r3, #4]
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	605a      	str	r2, [r3, #4]
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	685a      	ldr	r2, [r3, #4]
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	3308      	adds	r3, #8
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d104      	bne.n	80078b8 <vTaskSwitchContext+0x8c>
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	685a      	ldr	r2, [r3, #4]
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	605a      	str	r2, [r3, #4]
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	4a0c      	ldr	r2, [pc, #48]	@ (80078f0 <vTaskSwitchContext+0xc4>)
 80078c0:	6013      	str	r3, [r2, #0]
 80078c2:	4a09      	ldr	r2, [pc, #36]	@ (80078e8 <vTaskSwitchContext+0xbc>)
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80078c8:	4b09      	ldr	r3, [pc, #36]	@ (80078f0 <vTaskSwitchContext+0xc4>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	3354      	adds	r3, #84	@ 0x54
 80078ce:	4a09      	ldr	r2, [pc, #36]	@ (80078f4 <vTaskSwitchContext+0xc8>)
 80078d0:	6013      	str	r3, [r2, #0]
}
 80078d2:	bf00      	nop
 80078d4:	3714      	adds	r7, #20
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr
 80078de:	bf00      	nop
 80078e0:	20001658 	.word	0x20001658
 80078e4:	20001644 	.word	0x20001644
 80078e8:	20001638 	.word	0x20001638
 80078ec:	20001160 	.word	0x20001160
 80078f0:	2000115c 	.word	0x2000115c
 80078f4:	20000010 	.word	0x20000010

080078f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b084      	sub	sp, #16
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d10b      	bne.n	8007920 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800790c:	f383 8811 	msr	BASEPRI, r3
 8007910:	f3bf 8f6f 	isb	sy
 8007914:	f3bf 8f4f 	dsb	sy
 8007918:	60fb      	str	r3, [r7, #12]
}
 800791a:	bf00      	nop
 800791c:	bf00      	nop
 800791e:	e7fd      	b.n	800791c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007920:	4b07      	ldr	r3, [pc, #28]	@ (8007940 <vTaskPlaceOnEventList+0x48>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	3318      	adds	r3, #24
 8007926:	4619      	mov	r1, r3
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f7fe fd4c 	bl	80063c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800792e:	2101      	movs	r1, #1
 8007930:	6838      	ldr	r0, [r7, #0]
 8007932:	f000 fa87 	bl	8007e44 <prvAddCurrentTaskToDelayedList>
}
 8007936:	bf00      	nop
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	2000115c 	.word	0x2000115c

08007944 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007944:	b580      	push	{r7, lr}
 8007946:	b086      	sub	sp, #24
 8007948:	af00      	add	r7, sp, #0
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	60b9      	str	r1, [r7, #8]
 800794e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d10b      	bne.n	800796e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800795a:	f383 8811 	msr	BASEPRI, r3
 800795e:	f3bf 8f6f 	isb	sy
 8007962:	f3bf 8f4f 	dsb	sy
 8007966:	617b      	str	r3, [r7, #20]
}
 8007968:	bf00      	nop
 800796a:	bf00      	nop
 800796c:	e7fd      	b.n	800796a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800796e:	4b0a      	ldr	r3, [pc, #40]	@ (8007998 <vTaskPlaceOnEventListRestricted+0x54>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	3318      	adds	r3, #24
 8007974:	4619      	mov	r1, r3
 8007976:	68f8      	ldr	r0, [r7, #12]
 8007978:	f7fe fd01 	bl	800637e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d002      	beq.n	8007988 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007982:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007986:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007988:	6879      	ldr	r1, [r7, #4]
 800798a:	68b8      	ldr	r0, [r7, #8]
 800798c:	f000 fa5a 	bl	8007e44 <prvAddCurrentTaskToDelayedList>
	}
 8007990:	bf00      	nop
 8007992:	3718      	adds	r7, #24
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}
 8007998:	2000115c 	.word	0x2000115c

0800799c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b086      	sub	sp, #24
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d10b      	bne.n	80079ca <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80079b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079b6:	f383 8811 	msr	BASEPRI, r3
 80079ba:	f3bf 8f6f 	isb	sy
 80079be:	f3bf 8f4f 	dsb	sy
 80079c2:	60fb      	str	r3, [r7, #12]
}
 80079c4:	bf00      	nop
 80079c6:	bf00      	nop
 80079c8:	e7fd      	b.n	80079c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	3318      	adds	r3, #24
 80079ce:	4618      	mov	r0, r3
 80079d0:	f7fe fd32 	bl	8006438 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079d4:	4b1d      	ldr	r3, [pc, #116]	@ (8007a4c <xTaskRemoveFromEventList+0xb0>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d11d      	bne.n	8007a18 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	3304      	adds	r3, #4
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7fe fd29 	bl	8006438 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079ea:	4b19      	ldr	r3, [pc, #100]	@ (8007a50 <xTaskRemoveFromEventList+0xb4>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d903      	bls.n	80079fa <xTaskRemoveFromEventList+0x5e>
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079f6:	4a16      	ldr	r2, [pc, #88]	@ (8007a50 <xTaskRemoveFromEventList+0xb4>)
 80079f8:	6013      	str	r3, [r2, #0]
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079fe:	4613      	mov	r3, r2
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	4413      	add	r3, r2
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	4a13      	ldr	r2, [pc, #76]	@ (8007a54 <xTaskRemoveFromEventList+0xb8>)
 8007a08:	441a      	add	r2, r3
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	3304      	adds	r3, #4
 8007a0e:	4619      	mov	r1, r3
 8007a10:	4610      	mov	r0, r2
 8007a12:	f7fe fcb4 	bl	800637e <vListInsertEnd>
 8007a16:	e005      	b.n	8007a24 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	3318      	adds	r3, #24
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	480e      	ldr	r0, [pc, #56]	@ (8007a58 <xTaskRemoveFromEventList+0xbc>)
 8007a20:	f7fe fcad 	bl	800637e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a28:	4b0c      	ldr	r3, [pc, #48]	@ (8007a5c <xTaskRemoveFromEventList+0xc0>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d905      	bls.n	8007a3e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007a32:	2301      	movs	r3, #1
 8007a34:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007a36:	4b0a      	ldr	r3, [pc, #40]	@ (8007a60 <xTaskRemoveFromEventList+0xc4>)
 8007a38:	2201      	movs	r2, #1
 8007a3a:	601a      	str	r2, [r3, #0]
 8007a3c:	e001      	b.n	8007a42 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007a42:	697b      	ldr	r3, [r7, #20]
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3718      	adds	r7, #24
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	20001658 	.word	0x20001658
 8007a50:	20001638 	.word	0x20001638
 8007a54:	20001160 	.word	0x20001160
 8007a58:	200015f0 	.word	0x200015f0
 8007a5c:	2000115c 	.word	0x2000115c
 8007a60:	20001644 	.word	0x20001644

08007a64 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007a64:	b480      	push	{r7}
 8007a66:	b083      	sub	sp, #12
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007a6c:	4b06      	ldr	r3, [pc, #24]	@ (8007a88 <vTaskInternalSetTimeOutState+0x24>)
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007a74:	4b05      	ldr	r3, [pc, #20]	@ (8007a8c <vTaskInternalSetTimeOutState+0x28>)
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	605a      	str	r2, [r3, #4]
}
 8007a7c:	bf00      	nop
 8007a7e:	370c      	adds	r7, #12
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr
 8007a88:	20001648 	.word	0x20001648
 8007a8c:	20001634 	.word	0x20001634

08007a90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b088      	sub	sp, #32
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d10b      	bne.n	8007ab8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aa4:	f383 8811 	msr	BASEPRI, r3
 8007aa8:	f3bf 8f6f 	isb	sy
 8007aac:	f3bf 8f4f 	dsb	sy
 8007ab0:	613b      	str	r3, [r7, #16]
}
 8007ab2:	bf00      	nop
 8007ab4:	bf00      	nop
 8007ab6:	e7fd      	b.n	8007ab4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d10b      	bne.n	8007ad6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ac2:	f383 8811 	msr	BASEPRI, r3
 8007ac6:	f3bf 8f6f 	isb	sy
 8007aca:	f3bf 8f4f 	dsb	sy
 8007ace:	60fb      	str	r3, [r7, #12]
}
 8007ad0:	bf00      	nop
 8007ad2:	bf00      	nop
 8007ad4:	e7fd      	b.n	8007ad2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007ad6:	f000 fe97 	bl	8008808 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007ada:	4b1d      	ldr	r3, [pc, #116]	@ (8007b50 <xTaskCheckForTimeOut+0xc0>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	69ba      	ldr	r2, [r7, #24]
 8007ae6:	1ad3      	subs	r3, r2, r3
 8007ae8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007af2:	d102      	bne.n	8007afa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007af4:	2300      	movs	r3, #0
 8007af6:	61fb      	str	r3, [r7, #28]
 8007af8:	e023      	b.n	8007b42 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	4b15      	ldr	r3, [pc, #84]	@ (8007b54 <xTaskCheckForTimeOut+0xc4>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d007      	beq.n	8007b16 <xTaskCheckForTimeOut+0x86>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	69ba      	ldr	r2, [r7, #24]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d302      	bcc.n	8007b16 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007b10:	2301      	movs	r3, #1
 8007b12:	61fb      	str	r3, [r7, #28]
 8007b14:	e015      	b.n	8007b42 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	697a      	ldr	r2, [r7, #20]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d20b      	bcs.n	8007b38 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	1ad2      	subs	r2, r2, r3
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f7ff ff99 	bl	8007a64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007b32:	2300      	movs	r3, #0
 8007b34:	61fb      	str	r3, [r7, #28]
 8007b36:	e004      	b.n	8007b42 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007b42:	f000 fe93 	bl	800886c <vPortExitCritical>

	return xReturn;
 8007b46:	69fb      	ldr	r3, [r7, #28]
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3720      	adds	r7, #32
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}
 8007b50:	20001634 	.word	0x20001634
 8007b54:	20001648 	.word	0x20001648

08007b58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007b58:	b480      	push	{r7}
 8007b5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007b5c:	4b03      	ldr	r3, [pc, #12]	@ (8007b6c <vTaskMissedYield+0x14>)
 8007b5e:	2201      	movs	r2, #1
 8007b60:	601a      	str	r2, [r3, #0]
}
 8007b62:	bf00      	nop
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr
 8007b6c:	20001644 	.word	0x20001644

08007b70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007b78:	f000 f852 	bl	8007c20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007b7c:	4b06      	ldr	r3, [pc, #24]	@ (8007b98 <prvIdleTask+0x28>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d9f9      	bls.n	8007b78 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007b84:	4b05      	ldr	r3, [pc, #20]	@ (8007b9c <prvIdleTask+0x2c>)
 8007b86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b8a:	601a      	str	r2, [r3, #0]
 8007b8c:	f3bf 8f4f 	dsb	sy
 8007b90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007b94:	e7f0      	b.n	8007b78 <prvIdleTask+0x8>
 8007b96:	bf00      	nop
 8007b98:	20001160 	.word	0x20001160
 8007b9c:	e000ed04 	.word	0xe000ed04

08007ba0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b082      	sub	sp, #8
 8007ba4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	607b      	str	r3, [r7, #4]
 8007baa:	e00c      	b.n	8007bc6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	4613      	mov	r3, r2
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	4413      	add	r3, r2
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	4a12      	ldr	r2, [pc, #72]	@ (8007c00 <prvInitialiseTaskLists+0x60>)
 8007bb8:	4413      	add	r3, r2
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7fe fbb2 	bl	8006324 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	607b      	str	r3, [r7, #4]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2b37      	cmp	r3, #55	@ 0x37
 8007bca:	d9ef      	bls.n	8007bac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007bcc:	480d      	ldr	r0, [pc, #52]	@ (8007c04 <prvInitialiseTaskLists+0x64>)
 8007bce:	f7fe fba9 	bl	8006324 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007bd2:	480d      	ldr	r0, [pc, #52]	@ (8007c08 <prvInitialiseTaskLists+0x68>)
 8007bd4:	f7fe fba6 	bl	8006324 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007bd8:	480c      	ldr	r0, [pc, #48]	@ (8007c0c <prvInitialiseTaskLists+0x6c>)
 8007bda:	f7fe fba3 	bl	8006324 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007bde:	480c      	ldr	r0, [pc, #48]	@ (8007c10 <prvInitialiseTaskLists+0x70>)
 8007be0:	f7fe fba0 	bl	8006324 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007be4:	480b      	ldr	r0, [pc, #44]	@ (8007c14 <prvInitialiseTaskLists+0x74>)
 8007be6:	f7fe fb9d 	bl	8006324 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007bea:	4b0b      	ldr	r3, [pc, #44]	@ (8007c18 <prvInitialiseTaskLists+0x78>)
 8007bec:	4a05      	ldr	r2, [pc, #20]	@ (8007c04 <prvInitialiseTaskLists+0x64>)
 8007bee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8007c1c <prvInitialiseTaskLists+0x7c>)
 8007bf2:	4a05      	ldr	r2, [pc, #20]	@ (8007c08 <prvInitialiseTaskLists+0x68>)
 8007bf4:	601a      	str	r2, [r3, #0]
}
 8007bf6:	bf00      	nop
 8007bf8:	3708      	adds	r7, #8
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	20001160 	.word	0x20001160
 8007c04:	200015c0 	.word	0x200015c0
 8007c08:	200015d4 	.word	0x200015d4
 8007c0c:	200015f0 	.word	0x200015f0
 8007c10:	20001604 	.word	0x20001604
 8007c14:	2000161c 	.word	0x2000161c
 8007c18:	200015e8 	.word	0x200015e8
 8007c1c:	200015ec 	.word	0x200015ec

08007c20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c26:	e019      	b.n	8007c5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007c28:	f000 fdee 	bl	8008808 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c2c:	4b10      	ldr	r3, [pc, #64]	@ (8007c70 <prvCheckTasksWaitingTermination+0x50>)
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	3304      	adds	r3, #4
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f7fe fbfd 	bl	8006438 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8007c74 <prvCheckTasksWaitingTermination+0x54>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	3b01      	subs	r3, #1
 8007c44:	4a0b      	ldr	r2, [pc, #44]	@ (8007c74 <prvCheckTasksWaitingTermination+0x54>)
 8007c46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007c48:	4b0b      	ldr	r3, [pc, #44]	@ (8007c78 <prvCheckTasksWaitingTermination+0x58>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	3b01      	subs	r3, #1
 8007c4e:	4a0a      	ldr	r2, [pc, #40]	@ (8007c78 <prvCheckTasksWaitingTermination+0x58>)
 8007c50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007c52:	f000 fe0b 	bl	800886c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 f810 	bl	8007c7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c5c:	4b06      	ldr	r3, [pc, #24]	@ (8007c78 <prvCheckTasksWaitingTermination+0x58>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d1e1      	bne.n	8007c28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007c64:	bf00      	nop
 8007c66:	bf00      	nop
 8007c68:	3708      	adds	r7, #8
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop
 8007c70:	20001604 	.word	0x20001604
 8007c74:	20001630 	.word	0x20001630
 8007c78:	20001618 	.word	0x20001618

08007c7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	3354      	adds	r3, #84	@ 0x54
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f001 f909 	bl	8008ea0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d108      	bne.n	8007caa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f000 ffa3 	bl	8008be8 <vPortFree>
				vPortFree( pxTCB );
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 ffa0 	bl	8008be8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007ca8:	e019      	b.n	8007cde <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d103      	bne.n	8007cbc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f000 ff97 	bl	8008be8 <vPortFree>
	}
 8007cba:	e010      	b.n	8007cde <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007cc2:	2b02      	cmp	r3, #2
 8007cc4:	d00b      	beq.n	8007cde <prvDeleteTCB+0x62>
	__asm volatile
 8007cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cca:	f383 8811 	msr	BASEPRI, r3
 8007cce:	f3bf 8f6f 	isb	sy
 8007cd2:	f3bf 8f4f 	dsb	sy
 8007cd6:	60fb      	str	r3, [r7, #12]
}
 8007cd8:	bf00      	nop
 8007cda:	bf00      	nop
 8007cdc:	e7fd      	b.n	8007cda <prvDeleteTCB+0x5e>
	}
 8007cde:	bf00      	nop
 8007ce0:	3710      	adds	r7, #16
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
	...

08007ce8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b083      	sub	sp, #12
 8007cec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007cee:	4b0c      	ldr	r3, [pc, #48]	@ (8007d20 <prvResetNextTaskUnblockTime+0x38>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d104      	bne.n	8007d02 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8007d24 <prvResetNextTaskUnblockTime+0x3c>)
 8007cfa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007cfe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007d00:	e008      	b.n	8007d14 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d02:	4b07      	ldr	r3, [pc, #28]	@ (8007d20 <prvResetNextTaskUnblockTime+0x38>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	68db      	ldr	r3, [r3, #12]
 8007d0a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	4a04      	ldr	r2, [pc, #16]	@ (8007d24 <prvResetNextTaskUnblockTime+0x3c>)
 8007d12:	6013      	str	r3, [r2, #0]
}
 8007d14:	bf00      	nop
 8007d16:	370c      	adds	r7, #12
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr
 8007d20:	200015e8 	.word	0x200015e8
 8007d24:	20001650 	.word	0x20001650

08007d28 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8007d5c <xTaskGetSchedulerState+0x34>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d102      	bne.n	8007d3c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007d36:	2301      	movs	r3, #1
 8007d38:	607b      	str	r3, [r7, #4]
 8007d3a:	e008      	b.n	8007d4e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d3c:	4b08      	ldr	r3, [pc, #32]	@ (8007d60 <xTaskGetSchedulerState+0x38>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d102      	bne.n	8007d4a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007d44:	2302      	movs	r3, #2
 8007d46:	607b      	str	r3, [r7, #4]
 8007d48:	e001      	b.n	8007d4e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007d4e:	687b      	ldr	r3, [r7, #4]
	}
 8007d50:	4618      	mov	r0, r3
 8007d52:	370c      	adds	r7, #12
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr
 8007d5c:	2000163c 	.word	0x2000163c
 8007d60:	20001658 	.word	0x20001658

08007d64 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b086      	sub	sp, #24
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007d70:	2300      	movs	r3, #0
 8007d72:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d058      	beq.n	8007e2c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007d7a:	4b2f      	ldr	r3, [pc, #188]	@ (8007e38 <xTaskPriorityDisinherit+0xd4>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	693a      	ldr	r2, [r7, #16]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d00b      	beq.n	8007d9c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d88:	f383 8811 	msr	BASEPRI, r3
 8007d8c:	f3bf 8f6f 	isb	sy
 8007d90:	f3bf 8f4f 	dsb	sy
 8007d94:	60fb      	str	r3, [r7, #12]
}
 8007d96:	bf00      	nop
 8007d98:	bf00      	nop
 8007d9a:	e7fd      	b.n	8007d98 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d10b      	bne.n	8007dbc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007da8:	f383 8811 	msr	BASEPRI, r3
 8007dac:	f3bf 8f6f 	isb	sy
 8007db0:	f3bf 8f4f 	dsb	sy
 8007db4:	60bb      	str	r3, [r7, #8]
}
 8007db6:	bf00      	nop
 8007db8:	bf00      	nop
 8007dba:	e7fd      	b.n	8007db8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007dc0:	1e5a      	subs	r2, r3, #1
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d02c      	beq.n	8007e2c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d128      	bne.n	8007e2c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	3304      	adds	r3, #4
 8007dde:	4618      	mov	r0, r3
 8007de0:	f7fe fb2a 	bl	8006438 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007df0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dfc:	4b0f      	ldr	r3, [pc, #60]	@ (8007e3c <xTaskPriorityDisinherit+0xd8>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d903      	bls.n	8007e0c <xTaskPriorityDisinherit+0xa8>
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e08:	4a0c      	ldr	r2, [pc, #48]	@ (8007e3c <xTaskPriorityDisinherit+0xd8>)
 8007e0a:	6013      	str	r3, [r2, #0]
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e10:	4613      	mov	r3, r2
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	4413      	add	r3, r2
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	4a09      	ldr	r2, [pc, #36]	@ (8007e40 <xTaskPriorityDisinherit+0xdc>)
 8007e1a:	441a      	add	r2, r3
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	3304      	adds	r3, #4
 8007e20:	4619      	mov	r1, r3
 8007e22:	4610      	mov	r0, r2
 8007e24:	f7fe faab 	bl	800637e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007e2c:	697b      	ldr	r3, [r7, #20]
	}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3718      	adds	r7, #24
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	2000115c 	.word	0x2000115c
 8007e3c:	20001638 	.word	0x20001638
 8007e40:	20001160 	.word	0x20001160

08007e44 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007e4e:	4b21      	ldr	r3, [pc, #132]	@ (8007ed4 <prvAddCurrentTaskToDelayedList+0x90>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e54:	4b20      	ldr	r3, [pc, #128]	@ (8007ed8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	3304      	adds	r3, #4
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7fe faec 	bl	8006438 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e66:	d10a      	bne.n	8007e7e <prvAddCurrentTaskToDelayedList+0x3a>
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d007      	beq.n	8007e7e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e6e:	4b1a      	ldr	r3, [pc, #104]	@ (8007ed8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	3304      	adds	r3, #4
 8007e74:	4619      	mov	r1, r3
 8007e76:	4819      	ldr	r0, [pc, #100]	@ (8007edc <prvAddCurrentTaskToDelayedList+0x98>)
 8007e78:	f7fe fa81 	bl	800637e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007e7c:	e026      	b.n	8007ecc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007e7e:	68fa      	ldr	r2, [r7, #12]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4413      	add	r3, r2
 8007e84:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007e86:	4b14      	ldr	r3, [pc, #80]	@ (8007ed8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	68ba      	ldr	r2, [r7, #8]
 8007e8c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007e8e:	68ba      	ldr	r2, [r7, #8]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d209      	bcs.n	8007eaa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e96:	4b12      	ldr	r3, [pc, #72]	@ (8007ee0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	4b0f      	ldr	r3, [pc, #60]	@ (8007ed8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	3304      	adds	r3, #4
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	4610      	mov	r0, r2
 8007ea4:	f7fe fa8f 	bl	80063c6 <vListInsert>
}
 8007ea8:	e010      	b.n	8007ecc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8007ee4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	4b0a      	ldr	r3, [pc, #40]	@ (8007ed8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	3304      	adds	r3, #4
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	4610      	mov	r0, r2
 8007eb8:	f7fe fa85 	bl	80063c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8007ee8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	68ba      	ldr	r2, [r7, #8]
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d202      	bcs.n	8007ecc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007ec6:	4a08      	ldr	r2, [pc, #32]	@ (8007ee8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	6013      	str	r3, [r2, #0]
}
 8007ecc:	bf00      	nop
 8007ece:	3710      	adds	r7, #16
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	20001634 	.word	0x20001634
 8007ed8:	2000115c 	.word	0x2000115c
 8007edc:	2000161c 	.word	0x2000161c
 8007ee0:	200015ec 	.word	0x200015ec
 8007ee4:	200015e8 	.word	0x200015e8
 8007ee8:	20001650 	.word	0x20001650

08007eec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b08a      	sub	sp, #40	@ 0x28
 8007ef0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007ef6:	f000 fb13 	bl	8008520 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007efa:	4b1d      	ldr	r3, [pc, #116]	@ (8007f70 <xTimerCreateTimerTask+0x84>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d021      	beq.n	8007f46 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007f02:	2300      	movs	r3, #0
 8007f04:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007f06:	2300      	movs	r3, #0
 8007f08:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007f0a:	1d3a      	adds	r2, r7, #4
 8007f0c:	f107 0108 	add.w	r1, r7, #8
 8007f10:	f107 030c 	add.w	r3, r7, #12
 8007f14:	4618      	mov	r0, r3
 8007f16:	f7fe f9eb 	bl	80062f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007f1a:	6879      	ldr	r1, [r7, #4]
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	68fa      	ldr	r2, [r7, #12]
 8007f20:	9202      	str	r2, [sp, #8]
 8007f22:	9301      	str	r3, [sp, #4]
 8007f24:	2302      	movs	r3, #2
 8007f26:	9300      	str	r3, [sp, #0]
 8007f28:	2300      	movs	r3, #0
 8007f2a:	460a      	mov	r2, r1
 8007f2c:	4911      	ldr	r1, [pc, #68]	@ (8007f74 <xTimerCreateTimerTask+0x88>)
 8007f2e:	4812      	ldr	r0, [pc, #72]	@ (8007f78 <xTimerCreateTimerTask+0x8c>)
 8007f30:	f7ff f8c6 	bl	80070c0 <xTaskCreateStatic>
 8007f34:	4603      	mov	r3, r0
 8007f36:	4a11      	ldr	r2, [pc, #68]	@ (8007f7c <xTimerCreateTimerTask+0x90>)
 8007f38:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007f3a:	4b10      	ldr	r3, [pc, #64]	@ (8007f7c <xTimerCreateTimerTask+0x90>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d001      	beq.n	8007f46 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007f42:	2301      	movs	r3, #1
 8007f44:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d10b      	bne.n	8007f64 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f50:	f383 8811 	msr	BASEPRI, r3
 8007f54:	f3bf 8f6f 	isb	sy
 8007f58:	f3bf 8f4f 	dsb	sy
 8007f5c:	613b      	str	r3, [r7, #16]
}
 8007f5e:	bf00      	nop
 8007f60:	bf00      	nop
 8007f62:	e7fd      	b.n	8007f60 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007f64:	697b      	ldr	r3, [r7, #20]
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3718      	adds	r7, #24
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	2000168c 	.word	0x2000168c
 8007f74:	08009f60 	.word	0x08009f60
 8007f78:	080080b9 	.word	0x080080b9
 8007f7c:	20001690 	.word	0x20001690

08007f80 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b08a      	sub	sp, #40	@ 0x28
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	60b9      	str	r1, [r7, #8]
 8007f8a:	607a      	str	r2, [r7, #4]
 8007f8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d10b      	bne.n	8007fb0 <xTimerGenericCommand+0x30>
	__asm volatile
 8007f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f9c:	f383 8811 	msr	BASEPRI, r3
 8007fa0:	f3bf 8f6f 	isb	sy
 8007fa4:	f3bf 8f4f 	dsb	sy
 8007fa8:	623b      	str	r3, [r7, #32]
}
 8007faa:	bf00      	nop
 8007fac:	bf00      	nop
 8007fae:	e7fd      	b.n	8007fac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007fb0:	4b19      	ldr	r3, [pc, #100]	@ (8008018 <xTimerGenericCommand+0x98>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d02a      	beq.n	800800e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	2b05      	cmp	r3, #5
 8007fc8:	dc18      	bgt.n	8007ffc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007fca:	f7ff fead 	bl	8007d28 <xTaskGetSchedulerState>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	2b02      	cmp	r3, #2
 8007fd2:	d109      	bne.n	8007fe8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007fd4:	4b10      	ldr	r3, [pc, #64]	@ (8008018 <xTimerGenericCommand+0x98>)
 8007fd6:	6818      	ldr	r0, [r3, #0]
 8007fd8:	f107 0110 	add.w	r1, r7, #16
 8007fdc:	2300      	movs	r3, #0
 8007fde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fe0:	f7fe fb9a 	bl	8006718 <xQueueGenericSend>
 8007fe4:	6278      	str	r0, [r7, #36]	@ 0x24
 8007fe6:	e012      	b.n	800800e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8008018 <xTimerGenericCommand+0x98>)
 8007fea:	6818      	ldr	r0, [r3, #0]
 8007fec:	f107 0110 	add.w	r1, r7, #16
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f7fe fb90 	bl	8006718 <xQueueGenericSend>
 8007ff8:	6278      	str	r0, [r7, #36]	@ 0x24
 8007ffa:	e008      	b.n	800800e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007ffc:	4b06      	ldr	r3, [pc, #24]	@ (8008018 <xTimerGenericCommand+0x98>)
 8007ffe:	6818      	ldr	r0, [r3, #0]
 8008000:	f107 0110 	add.w	r1, r7, #16
 8008004:	2300      	movs	r3, #0
 8008006:	683a      	ldr	r2, [r7, #0]
 8008008:	f7fe fc88 	bl	800691c <xQueueGenericSendFromISR>
 800800c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800800e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008010:	4618      	mov	r0, r3
 8008012:	3728      	adds	r7, #40	@ 0x28
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}
 8008018:	2000168c 	.word	0x2000168c

0800801c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b088      	sub	sp, #32
 8008020:	af02      	add	r7, sp, #8
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008026:	4b23      	ldr	r3, [pc, #140]	@ (80080b4 <prvProcessExpiredTimer+0x98>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	68db      	ldr	r3, [r3, #12]
 800802c:	68db      	ldr	r3, [r3, #12]
 800802e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	3304      	adds	r3, #4
 8008034:	4618      	mov	r0, r3
 8008036:	f7fe f9ff 	bl	8006438 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008040:	f003 0304 	and.w	r3, r3, #4
 8008044:	2b00      	cmp	r3, #0
 8008046:	d023      	beq.n	8008090 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	699a      	ldr	r2, [r3, #24]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	18d1      	adds	r1, r2, r3
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	683a      	ldr	r2, [r7, #0]
 8008054:	6978      	ldr	r0, [r7, #20]
 8008056:	f000 f8d5 	bl	8008204 <prvInsertTimerInActiveList>
 800805a:	4603      	mov	r3, r0
 800805c:	2b00      	cmp	r3, #0
 800805e:	d020      	beq.n	80080a2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008060:	2300      	movs	r3, #0
 8008062:	9300      	str	r3, [sp, #0]
 8008064:	2300      	movs	r3, #0
 8008066:	687a      	ldr	r2, [r7, #4]
 8008068:	2100      	movs	r1, #0
 800806a:	6978      	ldr	r0, [r7, #20]
 800806c:	f7ff ff88 	bl	8007f80 <xTimerGenericCommand>
 8008070:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d114      	bne.n	80080a2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800807c:	f383 8811 	msr	BASEPRI, r3
 8008080:	f3bf 8f6f 	isb	sy
 8008084:	f3bf 8f4f 	dsb	sy
 8008088:	60fb      	str	r3, [r7, #12]
}
 800808a:	bf00      	nop
 800808c:	bf00      	nop
 800808e:	e7fd      	b.n	800808c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008096:	f023 0301 	bic.w	r3, r3, #1
 800809a:	b2da      	uxtb	r2, r3
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	6a1b      	ldr	r3, [r3, #32]
 80080a6:	6978      	ldr	r0, [r7, #20]
 80080a8:	4798      	blx	r3
}
 80080aa:	bf00      	nop
 80080ac:	3718      	adds	r7, #24
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	20001684 	.word	0x20001684

080080b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80080c0:	f107 0308 	add.w	r3, r7, #8
 80080c4:	4618      	mov	r0, r3
 80080c6:	f000 f859 	bl	800817c <prvGetNextExpireTime>
 80080ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	4619      	mov	r1, r3
 80080d0:	68f8      	ldr	r0, [r7, #12]
 80080d2:	f000 f805 	bl	80080e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80080d6:	f000 f8d7 	bl	8008288 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80080da:	bf00      	nop
 80080dc:	e7f0      	b.n	80080c0 <prvTimerTask+0x8>
	...

080080e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80080ea:	f7ff fa17 	bl	800751c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80080ee:	f107 0308 	add.w	r3, r7, #8
 80080f2:	4618      	mov	r0, r3
 80080f4:	f000 f866 	bl	80081c4 <prvSampleTimeNow>
 80080f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d130      	bne.n	8008162 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d10a      	bne.n	800811c <prvProcessTimerOrBlockTask+0x3c>
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	429a      	cmp	r2, r3
 800810c:	d806      	bhi.n	800811c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800810e:	f7ff fa13 	bl	8007538 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008112:	68f9      	ldr	r1, [r7, #12]
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f7ff ff81 	bl	800801c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800811a:	e024      	b.n	8008166 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d008      	beq.n	8008134 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008122:	4b13      	ldr	r3, [pc, #76]	@ (8008170 <prvProcessTimerOrBlockTask+0x90>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d101      	bne.n	8008130 <prvProcessTimerOrBlockTask+0x50>
 800812c:	2301      	movs	r3, #1
 800812e:	e000      	b.n	8008132 <prvProcessTimerOrBlockTask+0x52>
 8008130:	2300      	movs	r3, #0
 8008132:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008134:	4b0f      	ldr	r3, [pc, #60]	@ (8008174 <prvProcessTimerOrBlockTask+0x94>)
 8008136:	6818      	ldr	r0, [r3, #0]
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	1ad3      	subs	r3, r2, r3
 800813e:	683a      	ldr	r2, [r7, #0]
 8008140:	4619      	mov	r1, r3
 8008142:	f7fe ff89 	bl	8007058 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008146:	f7ff f9f7 	bl	8007538 <xTaskResumeAll>
 800814a:	4603      	mov	r3, r0
 800814c:	2b00      	cmp	r3, #0
 800814e:	d10a      	bne.n	8008166 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008150:	4b09      	ldr	r3, [pc, #36]	@ (8008178 <prvProcessTimerOrBlockTask+0x98>)
 8008152:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008156:	601a      	str	r2, [r3, #0]
 8008158:	f3bf 8f4f 	dsb	sy
 800815c:	f3bf 8f6f 	isb	sy
}
 8008160:	e001      	b.n	8008166 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008162:	f7ff f9e9 	bl	8007538 <xTaskResumeAll>
}
 8008166:	bf00      	nop
 8008168:	3710      	adds	r7, #16
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	20001688 	.word	0x20001688
 8008174:	2000168c 	.word	0x2000168c
 8008178:	e000ed04 	.word	0xe000ed04

0800817c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800817c:	b480      	push	{r7}
 800817e:	b085      	sub	sp, #20
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008184:	4b0e      	ldr	r3, [pc, #56]	@ (80081c0 <prvGetNextExpireTime+0x44>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d101      	bne.n	8008192 <prvGetNextExpireTime+0x16>
 800818e:	2201      	movs	r2, #1
 8008190:	e000      	b.n	8008194 <prvGetNextExpireTime+0x18>
 8008192:	2200      	movs	r2, #0
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d105      	bne.n	80081ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80081a0:	4b07      	ldr	r3, [pc, #28]	@ (80081c0 <prvGetNextExpireTime+0x44>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	68db      	ldr	r3, [r3, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	60fb      	str	r3, [r7, #12]
 80081aa:	e001      	b.n	80081b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80081ac:	2300      	movs	r3, #0
 80081ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80081b0:	68fb      	ldr	r3, [r7, #12]
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3714      	adds	r7, #20
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr
 80081be:	bf00      	nop
 80081c0:	20001684 	.word	0x20001684

080081c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80081cc:	f7ff fa52 	bl	8007674 <xTaskGetTickCount>
 80081d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80081d2:	4b0b      	ldr	r3, [pc, #44]	@ (8008200 <prvSampleTimeNow+0x3c>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	68fa      	ldr	r2, [r7, #12]
 80081d8:	429a      	cmp	r2, r3
 80081da:	d205      	bcs.n	80081e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80081dc:	f000 f93a 	bl	8008454 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	601a      	str	r2, [r3, #0]
 80081e6:	e002      	b.n	80081ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2200      	movs	r2, #0
 80081ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80081ee:	4a04      	ldr	r2, [pc, #16]	@ (8008200 <prvSampleTimeNow+0x3c>)
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80081f4:	68fb      	ldr	r3, [r7, #12]
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3710      	adds	r7, #16
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	20001694 	.word	0x20001694

08008204 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b086      	sub	sp, #24
 8008208:	af00      	add	r7, sp, #0
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	607a      	str	r2, [r7, #4]
 8008210:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008212:	2300      	movs	r3, #0
 8008214:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	68ba      	ldr	r2, [r7, #8]
 800821a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	68fa      	ldr	r2, [r7, #12]
 8008220:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008222:	68ba      	ldr	r2, [r7, #8]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	429a      	cmp	r2, r3
 8008228:	d812      	bhi.n	8008250 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	1ad2      	subs	r2, r2, r3
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	699b      	ldr	r3, [r3, #24]
 8008234:	429a      	cmp	r2, r3
 8008236:	d302      	bcc.n	800823e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008238:	2301      	movs	r3, #1
 800823a:	617b      	str	r3, [r7, #20]
 800823c:	e01b      	b.n	8008276 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800823e:	4b10      	ldr	r3, [pc, #64]	@ (8008280 <prvInsertTimerInActiveList+0x7c>)
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	3304      	adds	r3, #4
 8008246:	4619      	mov	r1, r3
 8008248:	4610      	mov	r0, r2
 800824a:	f7fe f8bc 	bl	80063c6 <vListInsert>
 800824e:	e012      	b.n	8008276 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	429a      	cmp	r2, r3
 8008256:	d206      	bcs.n	8008266 <prvInsertTimerInActiveList+0x62>
 8008258:	68ba      	ldr	r2, [r7, #8]
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	429a      	cmp	r2, r3
 800825e:	d302      	bcc.n	8008266 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008260:	2301      	movs	r3, #1
 8008262:	617b      	str	r3, [r7, #20]
 8008264:	e007      	b.n	8008276 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008266:	4b07      	ldr	r3, [pc, #28]	@ (8008284 <prvInsertTimerInActiveList+0x80>)
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	3304      	adds	r3, #4
 800826e:	4619      	mov	r1, r3
 8008270:	4610      	mov	r0, r2
 8008272:	f7fe f8a8 	bl	80063c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008276:	697b      	ldr	r3, [r7, #20]
}
 8008278:	4618      	mov	r0, r3
 800827a:	3718      	adds	r7, #24
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}
 8008280:	20001688 	.word	0x20001688
 8008284:	20001684 	.word	0x20001684

08008288 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b08e      	sub	sp, #56	@ 0x38
 800828c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800828e:	e0ce      	b.n	800842e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2b00      	cmp	r3, #0
 8008294:	da19      	bge.n	80082ca <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008296:	1d3b      	adds	r3, r7, #4
 8008298:	3304      	adds	r3, #4
 800829a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800829c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d10b      	bne.n	80082ba <prvProcessReceivedCommands+0x32>
	__asm volatile
 80082a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082a6:	f383 8811 	msr	BASEPRI, r3
 80082aa:	f3bf 8f6f 	isb	sy
 80082ae:	f3bf 8f4f 	dsb	sy
 80082b2:	61fb      	str	r3, [r7, #28]
}
 80082b4:	bf00      	nop
 80082b6:	bf00      	nop
 80082b8:	e7fd      	b.n	80082b6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80082ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80082c0:	6850      	ldr	r0, [r2, #4]
 80082c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80082c4:	6892      	ldr	r2, [r2, #8]
 80082c6:	4611      	mov	r1, r2
 80082c8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	f2c0 80ae 	blt.w	800842e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80082d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082d8:	695b      	ldr	r3, [r3, #20]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d004      	beq.n	80082e8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80082de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082e0:	3304      	adds	r3, #4
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7fe f8a8 	bl	8006438 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80082e8:	463b      	mov	r3, r7
 80082ea:	4618      	mov	r0, r3
 80082ec:	f7ff ff6a 	bl	80081c4 <prvSampleTimeNow>
 80082f0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2b09      	cmp	r3, #9
 80082f6:	f200 8097 	bhi.w	8008428 <prvProcessReceivedCommands+0x1a0>
 80082fa:	a201      	add	r2, pc, #4	@ (adr r2, 8008300 <prvProcessReceivedCommands+0x78>)
 80082fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008300:	08008329 	.word	0x08008329
 8008304:	08008329 	.word	0x08008329
 8008308:	08008329 	.word	0x08008329
 800830c:	0800839f 	.word	0x0800839f
 8008310:	080083b3 	.word	0x080083b3
 8008314:	080083ff 	.word	0x080083ff
 8008318:	08008329 	.word	0x08008329
 800831c:	08008329 	.word	0x08008329
 8008320:	0800839f 	.word	0x0800839f
 8008324:	080083b3 	.word	0x080083b3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800832a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800832e:	f043 0301 	orr.w	r3, r3, #1
 8008332:	b2da      	uxtb	r2, r3
 8008334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008336:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800833a:	68ba      	ldr	r2, [r7, #8]
 800833c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800833e:	699b      	ldr	r3, [r3, #24]
 8008340:	18d1      	adds	r1, r2, r3
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008346:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008348:	f7ff ff5c 	bl	8008204 <prvInsertTimerInActiveList>
 800834c:	4603      	mov	r3, r0
 800834e:	2b00      	cmp	r3, #0
 8008350:	d06c      	beq.n	800842c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008354:	6a1b      	ldr	r3, [r3, #32]
 8008356:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008358:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800835a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800835c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008360:	f003 0304 	and.w	r3, r3, #4
 8008364:	2b00      	cmp	r3, #0
 8008366:	d061      	beq.n	800842c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008368:	68ba      	ldr	r2, [r7, #8]
 800836a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800836c:	699b      	ldr	r3, [r3, #24]
 800836e:	441a      	add	r2, r3
 8008370:	2300      	movs	r3, #0
 8008372:	9300      	str	r3, [sp, #0]
 8008374:	2300      	movs	r3, #0
 8008376:	2100      	movs	r1, #0
 8008378:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800837a:	f7ff fe01 	bl	8007f80 <xTimerGenericCommand>
 800837e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008380:	6a3b      	ldr	r3, [r7, #32]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d152      	bne.n	800842c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800838a:	f383 8811 	msr	BASEPRI, r3
 800838e:	f3bf 8f6f 	isb	sy
 8008392:	f3bf 8f4f 	dsb	sy
 8008396:	61bb      	str	r3, [r7, #24]
}
 8008398:	bf00      	nop
 800839a:	bf00      	nop
 800839c:	e7fd      	b.n	800839a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800839e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80083a4:	f023 0301 	bic.w	r3, r3, #1
 80083a8:	b2da      	uxtb	r2, r3
 80083aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80083b0:	e03d      	b.n	800842e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80083b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80083b8:	f043 0301 	orr.w	r3, r3, #1
 80083bc:	b2da      	uxtb	r2, r3
 80083be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083c0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80083c4:	68ba      	ldr	r2, [r7, #8]
 80083c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083c8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80083ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083cc:	699b      	ldr	r3, [r3, #24]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d10b      	bne.n	80083ea <prvProcessReceivedCommands+0x162>
	__asm volatile
 80083d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083d6:	f383 8811 	msr	BASEPRI, r3
 80083da:	f3bf 8f6f 	isb	sy
 80083de:	f3bf 8f4f 	dsb	sy
 80083e2:	617b      	str	r3, [r7, #20]
}
 80083e4:	bf00      	nop
 80083e6:	bf00      	nop
 80083e8:	e7fd      	b.n	80083e6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80083ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ec:	699a      	ldr	r2, [r3, #24]
 80083ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f0:	18d1      	adds	r1, r2, r3
 80083f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083f8:	f7ff ff04 	bl	8008204 <prvInsertTimerInActiveList>
					break;
 80083fc:	e017      	b.n	800842e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80083fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008400:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008404:	f003 0302 	and.w	r3, r3, #2
 8008408:	2b00      	cmp	r3, #0
 800840a:	d103      	bne.n	8008414 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800840c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800840e:	f000 fbeb 	bl	8008be8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008412:	e00c      	b.n	800842e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008416:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800841a:	f023 0301 	bic.w	r3, r3, #1
 800841e:	b2da      	uxtb	r2, r3
 8008420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008422:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008426:	e002      	b.n	800842e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008428:	bf00      	nop
 800842a:	e000      	b.n	800842e <prvProcessReceivedCommands+0x1a6>
					break;
 800842c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800842e:	4b08      	ldr	r3, [pc, #32]	@ (8008450 <prvProcessReceivedCommands+0x1c8>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	1d39      	adds	r1, r7, #4
 8008434:	2200      	movs	r2, #0
 8008436:	4618      	mov	r0, r3
 8008438:	f7fe fb0e 	bl	8006a58 <xQueueReceive>
 800843c:	4603      	mov	r3, r0
 800843e:	2b00      	cmp	r3, #0
 8008440:	f47f af26 	bne.w	8008290 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008444:	bf00      	nop
 8008446:	bf00      	nop
 8008448:	3730      	adds	r7, #48	@ 0x30
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop
 8008450:	2000168c 	.word	0x2000168c

08008454 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b088      	sub	sp, #32
 8008458:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800845a:	e049      	b.n	80084f0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800845c:	4b2e      	ldr	r3, [pc, #184]	@ (8008518 <prvSwitchTimerLists+0xc4>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	68db      	ldr	r3, [r3, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008466:	4b2c      	ldr	r3, [pc, #176]	@ (8008518 <prvSwitchTimerLists+0xc4>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	68db      	ldr	r3, [r3, #12]
 800846e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	3304      	adds	r3, #4
 8008474:	4618      	mov	r0, r3
 8008476:	f7fd ffdf 	bl	8006438 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	6a1b      	ldr	r3, [r3, #32]
 800847e:	68f8      	ldr	r0, [r7, #12]
 8008480:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008488:	f003 0304 	and.w	r3, r3, #4
 800848c:	2b00      	cmp	r3, #0
 800848e:	d02f      	beq.n	80084f0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	699b      	ldr	r3, [r3, #24]
 8008494:	693a      	ldr	r2, [r7, #16]
 8008496:	4413      	add	r3, r2
 8008498:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800849a:	68ba      	ldr	r2, [r7, #8]
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	429a      	cmp	r2, r3
 80084a0:	d90e      	bls.n	80084c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	68ba      	ldr	r2, [r7, #8]
 80084a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	68fa      	ldr	r2, [r7, #12]
 80084ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80084ae:	4b1a      	ldr	r3, [pc, #104]	@ (8008518 <prvSwitchTimerLists+0xc4>)
 80084b0:	681a      	ldr	r2, [r3, #0]
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	3304      	adds	r3, #4
 80084b6:	4619      	mov	r1, r3
 80084b8:	4610      	mov	r0, r2
 80084ba:	f7fd ff84 	bl	80063c6 <vListInsert>
 80084be:	e017      	b.n	80084f0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80084c0:	2300      	movs	r3, #0
 80084c2:	9300      	str	r3, [sp, #0]
 80084c4:	2300      	movs	r3, #0
 80084c6:	693a      	ldr	r2, [r7, #16]
 80084c8:	2100      	movs	r1, #0
 80084ca:	68f8      	ldr	r0, [r7, #12]
 80084cc:	f7ff fd58 	bl	8007f80 <xTimerGenericCommand>
 80084d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d10b      	bne.n	80084f0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80084d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084dc:	f383 8811 	msr	BASEPRI, r3
 80084e0:	f3bf 8f6f 	isb	sy
 80084e4:	f3bf 8f4f 	dsb	sy
 80084e8:	603b      	str	r3, [r7, #0]
}
 80084ea:	bf00      	nop
 80084ec:	bf00      	nop
 80084ee:	e7fd      	b.n	80084ec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80084f0:	4b09      	ldr	r3, [pc, #36]	@ (8008518 <prvSwitchTimerLists+0xc4>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d1b0      	bne.n	800845c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80084fa:	4b07      	ldr	r3, [pc, #28]	@ (8008518 <prvSwitchTimerLists+0xc4>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008500:	4b06      	ldr	r3, [pc, #24]	@ (800851c <prvSwitchTimerLists+0xc8>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a04      	ldr	r2, [pc, #16]	@ (8008518 <prvSwitchTimerLists+0xc4>)
 8008506:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008508:	4a04      	ldr	r2, [pc, #16]	@ (800851c <prvSwitchTimerLists+0xc8>)
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	6013      	str	r3, [r2, #0]
}
 800850e:	bf00      	nop
 8008510:	3718      	adds	r7, #24
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop
 8008518:	20001684 	.word	0x20001684
 800851c:	20001688 	.word	0x20001688

08008520 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b082      	sub	sp, #8
 8008524:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008526:	f000 f96f 	bl	8008808 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800852a:	4b15      	ldr	r3, [pc, #84]	@ (8008580 <prvCheckForValidListAndQueue+0x60>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d120      	bne.n	8008574 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008532:	4814      	ldr	r0, [pc, #80]	@ (8008584 <prvCheckForValidListAndQueue+0x64>)
 8008534:	f7fd fef6 	bl	8006324 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008538:	4813      	ldr	r0, [pc, #76]	@ (8008588 <prvCheckForValidListAndQueue+0x68>)
 800853a:	f7fd fef3 	bl	8006324 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800853e:	4b13      	ldr	r3, [pc, #76]	@ (800858c <prvCheckForValidListAndQueue+0x6c>)
 8008540:	4a10      	ldr	r2, [pc, #64]	@ (8008584 <prvCheckForValidListAndQueue+0x64>)
 8008542:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008544:	4b12      	ldr	r3, [pc, #72]	@ (8008590 <prvCheckForValidListAndQueue+0x70>)
 8008546:	4a10      	ldr	r2, [pc, #64]	@ (8008588 <prvCheckForValidListAndQueue+0x68>)
 8008548:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800854a:	2300      	movs	r3, #0
 800854c:	9300      	str	r3, [sp, #0]
 800854e:	4b11      	ldr	r3, [pc, #68]	@ (8008594 <prvCheckForValidListAndQueue+0x74>)
 8008550:	4a11      	ldr	r2, [pc, #68]	@ (8008598 <prvCheckForValidListAndQueue+0x78>)
 8008552:	2110      	movs	r1, #16
 8008554:	200a      	movs	r0, #10
 8008556:	f7fe f803 	bl	8006560 <xQueueGenericCreateStatic>
 800855a:	4603      	mov	r3, r0
 800855c:	4a08      	ldr	r2, [pc, #32]	@ (8008580 <prvCheckForValidListAndQueue+0x60>)
 800855e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008560:	4b07      	ldr	r3, [pc, #28]	@ (8008580 <prvCheckForValidListAndQueue+0x60>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d005      	beq.n	8008574 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008568:	4b05      	ldr	r3, [pc, #20]	@ (8008580 <prvCheckForValidListAndQueue+0x60>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	490b      	ldr	r1, [pc, #44]	@ (800859c <prvCheckForValidListAndQueue+0x7c>)
 800856e:	4618      	mov	r0, r3
 8008570:	f7fe fd48 	bl	8007004 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008574:	f000 f97a 	bl	800886c <vPortExitCritical>
}
 8008578:	bf00      	nop
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop
 8008580:	2000168c 	.word	0x2000168c
 8008584:	2000165c 	.word	0x2000165c
 8008588:	20001670 	.word	0x20001670
 800858c:	20001684 	.word	0x20001684
 8008590:	20001688 	.word	0x20001688
 8008594:	20001738 	.word	0x20001738
 8008598:	20001698 	.word	0x20001698
 800859c:	08009f68 	.word	0x08009f68

080085a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80085a0:	b480      	push	{r7}
 80085a2:	b085      	sub	sp, #20
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	60f8      	str	r0, [r7, #12]
 80085a8:	60b9      	str	r1, [r7, #8]
 80085aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	3b04      	subs	r3, #4
 80085b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80085b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	3b04      	subs	r3, #4
 80085be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	f023 0201 	bic.w	r2, r3, #1
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	3b04      	subs	r3, #4
 80085ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80085d0:	4a0c      	ldr	r2, [pc, #48]	@ (8008604 <pxPortInitialiseStack+0x64>)
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	3b14      	subs	r3, #20
 80085da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	3b04      	subs	r3, #4
 80085e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f06f 0202 	mvn.w	r2, #2
 80085ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	3b20      	subs	r3, #32
 80085f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80085f6:	68fb      	ldr	r3, [r7, #12]
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3714      	adds	r7, #20
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr
 8008604:	08008609 	.word	0x08008609

08008608 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008608:	b480      	push	{r7}
 800860a:	b085      	sub	sp, #20
 800860c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800860e:	2300      	movs	r3, #0
 8008610:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008612:	4b13      	ldr	r3, [pc, #76]	@ (8008660 <prvTaskExitError+0x58>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800861a:	d00b      	beq.n	8008634 <prvTaskExitError+0x2c>
	__asm volatile
 800861c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008620:	f383 8811 	msr	BASEPRI, r3
 8008624:	f3bf 8f6f 	isb	sy
 8008628:	f3bf 8f4f 	dsb	sy
 800862c:	60fb      	str	r3, [r7, #12]
}
 800862e:	bf00      	nop
 8008630:	bf00      	nop
 8008632:	e7fd      	b.n	8008630 <prvTaskExitError+0x28>
	__asm volatile
 8008634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008638:	f383 8811 	msr	BASEPRI, r3
 800863c:	f3bf 8f6f 	isb	sy
 8008640:	f3bf 8f4f 	dsb	sy
 8008644:	60bb      	str	r3, [r7, #8]
}
 8008646:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008648:	bf00      	nop
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d0fc      	beq.n	800864a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008650:	bf00      	nop
 8008652:	bf00      	nop
 8008654:	3714      	adds	r7, #20
 8008656:	46bd      	mov	sp, r7
 8008658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865c:	4770      	bx	lr
 800865e:	bf00      	nop
 8008660:	2000000c 	.word	0x2000000c
	...

08008670 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008670:	4b07      	ldr	r3, [pc, #28]	@ (8008690 <pxCurrentTCBConst2>)
 8008672:	6819      	ldr	r1, [r3, #0]
 8008674:	6808      	ldr	r0, [r1, #0]
 8008676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800867a:	f380 8809 	msr	PSP, r0
 800867e:	f3bf 8f6f 	isb	sy
 8008682:	f04f 0000 	mov.w	r0, #0
 8008686:	f380 8811 	msr	BASEPRI, r0
 800868a:	4770      	bx	lr
 800868c:	f3af 8000 	nop.w

08008690 <pxCurrentTCBConst2>:
 8008690:	2000115c 	.word	0x2000115c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008694:	bf00      	nop
 8008696:	bf00      	nop

08008698 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008698:	4808      	ldr	r0, [pc, #32]	@ (80086bc <prvPortStartFirstTask+0x24>)
 800869a:	6800      	ldr	r0, [r0, #0]
 800869c:	6800      	ldr	r0, [r0, #0]
 800869e:	f380 8808 	msr	MSP, r0
 80086a2:	f04f 0000 	mov.w	r0, #0
 80086a6:	f380 8814 	msr	CONTROL, r0
 80086aa:	b662      	cpsie	i
 80086ac:	b661      	cpsie	f
 80086ae:	f3bf 8f4f 	dsb	sy
 80086b2:	f3bf 8f6f 	isb	sy
 80086b6:	df00      	svc	0
 80086b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80086ba:	bf00      	nop
 80086bc:	e000ed08 	.word	0xe000ed08

080086c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b086      	sub	sp, #24
 80086c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80086c6:	4b47      	ldr	r3, [pc, #284]	@ (80087e4 <xPortStartScheduler+0x124>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a47      	ldr	r2, [pc, #284]	@ (80087e8 <xPortStartScheduler+0x128>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d10b      	bne.n	80086e8 <xPortStartScheduler+0x28>
	__asm volatile
 80086d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086d4:	f383 8811 	msr	BASEPRI, r3
 80086d8:	f3bf 8f6f 	isb	sy
 80086dc:	f3bf 8f4f 	dsb	sy
 80086e0:	613b      	str	r3, [r7, #16]
}
 80086e2:	bf00      	nop
 80086e4:	bf00      	nop
 80086e6:	e7fd      	b.n	80086e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80086e8:	4b3e      	ldr	r3, [pc, #248]	@ (80087e4 <xPortStartScheduler+0x124>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a3f      	ldr	r2, [pc, #252]	@ (80087ec <xPortStartScheduler+0x12c>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d10b      	bne.n	800870a <xPortStartScheduler+0x4a>
	__asm volatile
 80086f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086f6:	f383 8811 	msr	BASEPRI, r3
 80086fa:	f3bf 8f6f 	isb	sy
 80086fe:	f3bf 8f4f 	dsb	sy
 8008702:	60fb      	str	r3, [r7, #12]
}
 8008704:	bf00      	nop
 8008706:	bf00      	nop
 8008708:	e7fd      	b.n	8008706 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800870a:	4b39      	ldr	r3, [pc, #228]	@ (80087f0 <xPortStartScheduler+0x130>)
 800870c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	b2db      	uxtb	r3, r3
 8008714:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	22ff      	movs	r2, #255	@ 0xff
 800871a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	b2db      	uxtb	r3, r3
 8008722:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008724:	78fb      	ldrb	r3, [r7, #3]
 8008726:	b2db      	uxtb	r3, r3
 8008728:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800872c:	b2da      	uxtb	r2, r3
 800872e:	4b31      	ldr	r3, [pc, #196]	@ (80087f4 <xPortStartScheduler+0x134>)
 8008730:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008732:	4b31      	ldr	r3, [pc, #196]	@ (80087f8 <xPortStartScheduler+0x138>)
 8008734:	2207      	movs	r2, #7
 8008736:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008738:	e009      	b.n	800874e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800873a:	4b2f      	ldr	r3, [pc, #188]	@ (80087f8 <xPortStartScheduler+0x138>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	3b01      	subs	r3, #1
 8008740:	4a2d      	ldr	r2, [pc, #180]	@ (80087f8 <xPortStartScheduler+0x138>)
 8008742:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008744:	78fb      	ldrb	r3, [r7, #3]
 8008746:	b2db      	uxtb	r3, r3
 8008748:	005b      	lsls	r3, r3, #1
 800874a:	b2db      	uxtb	r3, r3
 800874c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800874e:	78fb      	ldrb	r3, [r7, #3]
 8008750:	b2db      	uxtb	r3, r3
 8008752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008756:	2b80      	cmp	r3, #128	@ 0x80
 8008758:	d0ef      	beq.n	800873a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800875a:	4b27      	ldr	r3, [pc, #156]	@ (80087f8 <xPortStartScheduler+0x138>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f1c3 0307 	rsb	r3, r3, #7
 8008762:	2b04      	cmp	r3, #4
 8008764:	d00b      	beq.n	800877e <xPortStartScheduler+0xbe>
	__asm volatile
 8008766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800876a:	f383 8811 	msr	BASEPRI, r3
 800876e:	f3bf 8f6f 	isb	sy
 8008772:	f3bf 8f4f 	dsb	sy
 8008776:	60bb      	str	r3, [r7, #8]
}
 8008778:	bf00      	nop
 800877a:	bf00      	nop
 800877c:	e7fd      	b.n	800877a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800877e:	4b1e      	ldr	r3, [pc, #120]	@ (80087f8 <xPortStartScheduler+0x138>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	021b      	lsls	r3, r3, #8
 8008784:	4a1c      	ldr	r2, [pc, #112]	@ (80087f8 <xPortStartScheduler+0x138>)
 8008786:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008788:	4b1b      	ldr	r3, [pc, #108]	@ (80087f8 <xPortStartScheduler+0x138>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008790:	4a19      	ldr	r2, [pc, #100]	@ (80087f8 <xPortStartScheduler+0x138>)
 8008792:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	b2da      	uxtb	r2, r3
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800879c:	4b17      	ldr	r3, [pc, #92]	@ (80087fc <xPortStartScheduler+0x13c>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a16      	ldr	r2, [pc, #88]	@ (80087fc <xPortStartScheduler+0x13c>)
 80087a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80087a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80087a8:	4b14      	ldr	r3, [pc, #80]	@ (80087fc <xPortStartScheduler+0x13c>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a13      	ldr	r2, [pc, #76]	@ (80087fc <xPortStartScheduler+0x13c>)
 80087ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80087b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80087b4:	f000 f8da 	bl	800896c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80087b8:	4b11      	ldr	r3, [pc, #68]	@ (8008800 <xPortStartScheduler+0x140>)
 80087ba:	2200      	movs	r2, #0
 80087bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80087be:	f000 f8f9 	bl	80089b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80087c2:	4b10      	ldr	r3, [pc, #64]	@ (8008804 <xPortStartScheduler+0x144>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a0f      	ldr	r2, [pc, #60]	@ (8008804 <xPortStartScheduler+0x144>)
 80087c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80087cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80087ce:	f7ff ff63 	bl	8008698 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80087d2:	f7ff f82b 	bl	800782c <vTaskSwitchContext>
	prvTaskExitError();
 80087d6:	f7ff ff17 	bl	8008608 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80087da:	2300      	movs	r3, #0
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3718      	adds	r7, #24
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}
 80087e4:	e000ed00 	.word	0xe000ed00
 80087e8:	410fc271 	.word	0x410fc271
 80087ec:	410fc270 	.word	0x410fc270
 80087f0:	e000e400 	.word	0xe000e400
 80087f4:	20001788 	.word	0x20001788
 80087f8:	2000178c 	.word	0x2000178c
 80087fc:	e000ed20 	.word	0xe000ed20
 8008800:	2000000c 	.word	0x2000000c
 8008804:	e000ef34 	.word	0xe000ef34

08008808 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008808:	b480      	push	{r7}
 800880a:	b083      	sub	sp, #12
 800880c:	af00      	add	r7, sp, #0
	__asm volatile
 800880e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008812:	f383 8811 	msr	BASEPRI, r3
 8008816:	f3bf 8f6f 	isb	sy
 800881a:	f3bf 8f4f 	dsb	sy
 800881e:	607b      	str	r3, [r7, #4]
}
 8008820:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008822:	4b10      	ldr	r3, [pc, #64]	@ (8008864 <vPortEnterCritical+0x5c>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	3301      	adds	r3, #1
 8008828:	4a0e      	ldr	r2, [pc, #56]	@ (8008864 <vPortEnterCritical+0x5c>)
 800882a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800882c:	4b0d      	ldr	r3, [pc, #52]	@ (8008864 <vPortEnterCritical+0x5c>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	2b01      	cmp	r3, #1
 8008832:	d110      	bne.n	8008856 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008834:	4b0c      	ldr	r3, [pc, #48]	@ (8008868 <vPortEnterCritical+0x60>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	b2db      	uxtb	r3, r3
 800883a:	2b00      	cmp	r3, #0
 800883c:	d00b      	beq.n	8008856 <vPortEnterCritical+0x4e>
	__asm volatile
 800883e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008842:	f383 8811 	msr	BASEPRI, r3
 8008846:	f3bf 8f6f 	isb	sy
 800884a:	f3bf 8f4f 	dsb	sy
 800884e:	603b      	str	r3, [r7, #0]
}
 8008850:	bf00      	nop
 8008852:	bf00      	nop
 8008854:	e7fd      	b.n	8008852 <vPortEnterCritical+0x4a>
	}
}
 8008856:	bf00      	nop
 8008858:	370c      	adds	r7, #12
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr
 8008862:	bf00      	nop
 8008864:	2000000c 	.word	0x2000000c
 8008868:	e000ed04 	.word	0xe000ed04

0800886c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800886c:	b480      	push	{r7}
 800886e:	b083      	sub	sp, #12
 8008870:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008872:	4b12      	ldr	r3, [pc, #72]	@ (80088bc <vPortExitCritical+0x50>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d10b      	bne.n	8008892 <vPortExitCritical+0x26>
	__asm volatile
 800887a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800887e:	f383 8811 	msr	BASEPRI, r3
 8008882:	f3bf 8f6f 	isb	sy
 8008886:	f3bf 8f4f 	dsb	sy
 800888a:	607b      	str	r3, [r7, #4]
}
 800888c:	bf00      	nop
 800888e:	bf00      	nop
 8008890:	e7fd      	b.n	800888e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008892:	4b0a      	ldr	r3, [pc, #40]	@ (80088bc <vPortExitCritical+0x50>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	3b01      	subs	r3, #1
 8008898:	4a08      	ldr	r2, [pc, #32]	@ (80088bc <vPortExitCritical+0x50>)
 800889a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800889c:	4b07      	ldr	r3, [pc, #28]	@ (80088bc <vPortExitCritical+0x50>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d105      	bne.n	80088b0 <vPortExitCritical+0x44>
 80088a4:	2300      	movs	r3, #0
 80088a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	f383 8811 	msr	BASEPRI, r3
}
 80088ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80088b0:	bf00      	nop
 80088b2:	370c      	adds	r7, #12
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr
 80088bc:	2000000c 	.word	0x2000000c

080088c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80088c0:	f3ef 8009 	mrs	r0, PSP
 80088c4:	f3bf 8f6f 	isb	sy
 80088c8:	4b15      	ldr	r3, [pc, #84]	@ (8008920 <pxCurrentTCBConst>)
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	f01e 0f10 	tst.w	lr, #16
 80088d0:	bf08      	it	eq
 80088d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80088d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088da:	6010      	str	r0, [r2, #0]
 80088dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80088e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80088e4:	f380 8811 	msr	BASEPRI, r0
 80088e8:	f3bf 8f4f 	dsb	sy
 80088ec:	f3bf 8f6f 	isb	sy
 80088f0:	f7fe ff9c 	bl	800782c <vTaskSwitchContext>
 80088f4:	f04f 0000 	mov.w	r0, #0
 80088f8:	f380 8811 	msr	BASEPRI, r0
 80088fc:	bc09      	pop	{r0, r3}
 80088fe:	6819      	ldr	r1, [r3, #0]
 8008900:	6808      	ldr	r0, [r1, #0]
 8008902:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008906:	f01e 0f10 	tst.w	lr, #16
 800890a:	bf08      	it	eq
 800890c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008910:	f380 8809 	msr	PSP, r0
 8008914:	f3bf 8f6f 	isb	sy
 8008918:	4770      	bx	lr
 800891a:	bf00      	nop
 800891c:	f3af 8000 	nop.w

08008920 <pxCurrentTCBConst>:
 8008920:	2000115c 	.word	0x2000115c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008924:	bf00      	nop
 8008926:	bf00      	nop

08008928 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b082      	sub	sp, #8
 800892c:	af00      	add	r7, sp, #0
	__asm volatile
 800892e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008932:	f383 8811 	msr	BASEPRI, r3
 8008936:	f3bf 8f6f 	isb	sy
 800893a:	f3bf 8f4f 	dsb	sy
 800893e:	607b      	str	r3, [r7, #4]
}
 8008940:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008942:	f7fe feb9 	bl	80076b8 <xTaskIncrementTick>
 8008946:	4603      	mov	r3, r0
 8008948:	2b00      	cmp	r3, #0
 800894a:	d003      	beq.n	8008954 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800894c:	4b06      	ldr	r3, [pc, #24]	@ (8008968 <xPortSysTickHandler+0x40>)
 800894e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008952:	601a      	str	r2, [r3, #0]
 8008954:	2300      	movs	r3, #0
 8008956:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	f383 8811 	msr	BASEPRI, r3
}
 800895e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008960:	bf00      	nop
 8008962:	3708      	adds	r7, #8
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}
 8008968:	e000ed04 	.word	0xe000ed04

0800896c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800896c:	b480      	push	{r7}
 800896e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008970:	4b0b      	ldr	r3, [pc, #44]	@ (80089a0 <vPortSetupTimerInterrupt+0x34>)
 8008972:	2200      	movs	r2, #0
 8008974:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008976:	4b0b      	ldr	r3, [pc, #44]	@ (80089a4 <vPortSetupTimerInterrupt+0x38>)
 8008978:	2200      	movs	r2, #0
 800897a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800897c:	4b0a      	ldr	r3, [pc, #40]	@ (80089a8 <vPortSetupTimerInterrupt+0x3c>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a0a      	ldr	r2, [pc, #40]	@ (80089ac <vPortSetupTimerInterrupt+0x40>)
 8008982:	fba2 2303 	umull	r2, r3, r2, r3
 8008986:	099b      	lsrs	r3, r3, #6
 8008988:	4a09      	ldr	r2, [pc, #36]	@ (80089b0 <vPortSetupTimerInterrupt+0x44>)
 800898a:	3b01      	subs	r3, #1
 800898c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800898e:	4b04      	ldr	r3, [pc, #16]	@ (80089a0 <vPortSetupTimerInterrupt+0x34>)
 8008990:	2207      	movs	r2, #7
 8008992:	601a      	str	r2, [r3, #0]
}
 8008994:	bf00      	nop
 8008996:	46bd      	mov	sp, r7
 8008998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899c:	4770      	bx	lr
 800899e:	bf00      	nop
 80089a0:	e000e010 	.word	0xe000e010
 80089a4:	e000e018 	.word	0xe000e018
 80089a8:	20000000 	.word	0x20000000
 80089ac:	10624dd3 	.word	0x10624dd3
 80089b0:	e000e014 	.word	0xe000e014

080089b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80089b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80089c4 <vPortEnableVFP+0x10>
 80089b8:	6801      	ldr	r1, [r0, #0]
 80089ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80089be:	6001      	str	r1, [r0, #0]
 80089c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80089c2:	bf00      	nop
 80089c4:	e000ed88 	.word	0xe000ed88

080089c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80089c8:	b480      	push	{r7}
 80089ca:	b085      	sub	sp, #20
 80089cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80089ce:	f3ef 8305 	mrs	r3, IPSR
 80089d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2b0f      	cmp	r3, #15
 80089d8:	d915      	bls.n	8008a06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80089da:	4a18      	ldr	r2, [pc, #96]	@ (8008a3c <vPortValidateInterruptPriority+0x74>)
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	4413      	add	r3, r2
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80089e4:	4b16      	ldr	r3, [pc, #88]	@ (8008a40 <vPortValidateInterruptPriority+0x78>)
 80089e6:	781b      	ldrb	r3, [r3, #0]
 80089e8:	7afa      	ldrb	r2, [r7, #11]
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d20b      	bcs.n	8008a06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80089ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089f2:	f383 8811 	msr	BASEPRI, r3
 80089f6:	f3bf 8f6f 	isb	sy
 80089fa:	f3bf 8f4f 	dsb	sy
 80089fe:	607b      	str	r3, [r7, #4]
}
 8008a00:	bf00      	nop
 8008a02:	bf00      	nop
 8008a04:	e7fd      	b.n	8008a02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008a06:	4b0f      	ldr	r3, [pc, #60]	@ (8008a44 <vPortValidateInterruptPriority+0x7c>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8008a48 <vPortValidateInterruptPriority+0x80>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d90b      	bls.n	8008a2e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a1a:	f383 8811 	msr	BASEPRI, r3
 8008a1e:	f3bf 8f6f 	isb	sy
 8008a22:	f3bf 8f4f 	dsb	sy
 8008a26:	603b      	str	r3, [r7, #0]
}
 8008a28:	bf00      	nop
 8008a2a:	bf00      	nop
 8008a2c:	e7fd      	b.n	8008a2a <vPortValidateInterruptPriority+0x62>
	}
 8008a2e:	bf00      	nop
 8008a30:	3714      	adds	r7, #20
 8008a32:	46bd      	mov	sp, r7
 8008a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a38:	4770      	bx	lr
 8008a3a:	bf00      	nop
 8008a3c:	e000e3f0 	.word	0xe000e3f0
 8008a40:	20001788 	.word	0x20001788
 8008a44:	e000ed0c 	.word	0xe000ed0c
 8008a48:	2000178c 	.word	0x2000178c

08008a4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b08a      	sub	sp, #40	@ 0x28
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008a54:	2300      	movs	r3, #0
 8008a56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008a58:	f7fe fd60 	bl	800751c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008a5c:	4b5c      	ldr	r3, [pc, #368]	@ (8008bd0 <pvPortMalloc+0x184>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d101      	bne.n	8008a68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008a64:	f000 f924 	bl	8008cb0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008a68:	4b5a      	ldr	r3, [pc, #360]	@ (8008bd4 <pvPortMalloc+0x188>)
 8008a6a:	681a      	ldr	r2, [r3, #0]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	4013      	ands	r3, r2
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	f040 8095 	bne.w	8008ba0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d01e      	beq.n	8008aba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008a7c:	2208      	movs	r2, #8
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	4413      	add	r3, r2
 8008a82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f003 0307 	and.w	r3, r3, #7
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d015      	beq.n	8008aba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f023 0307 	bic.w	r3, r3, #7
 8008a94:	3308      	adds	r3, #8
 8008a96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f003 0307 	and.w	r3, r3, #7
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d00b      	beq.n	8008aba <pvPortMalloc+0x6e>
	__asm volatile
 8008aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aa6:	f383 8811 	msr	BASEPRI, r3
 8008aaa:	f3bf 8f6f 	isb	sy
 8008aae:	f3bf 8f4f 	dsb	sy
 8008ab2:	617b      	str	r3, [r7, #20]
}
 8008ab4:	bf00      	nop
 8008ab6:	bf00      	nop
 8008ab8:	e7fd      	b.n	8008ab6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d06f      	beq.n	8008ba0 <pvPortMalloc+0x154>
 8008ac0:	4b45      	ldr	r3, [pc, #276]	@ (8008bd8 <pvPortMalloc+0x18c>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d86a      	bhi.n	8008ba0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008aca:	4b44      	ldr	r3, [pc, #272]	@ (8008bdc <pvPortMalloc+0x190>)
 8008acc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008ace:	4b43      	ldr	r3, [pc, #268]	@ (8008bdc <pvPortMalloc+0x190>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ad4:	e004      	b.n	8008ae0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ad8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	687a      	ldr	r2, [r7, #4]
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d903      	bls.n	8008af2 <pvPortMalloc+0xa6>
 8008aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d1f1      	bne.n	8008ad6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008af2:	4b37      	ldr	r3, [pc, #220]	@ (8008bd0 <pvPortMalloc+0x184>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d051      	beq.n	8008ba0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008afc:	6a3b      	ldr	r3, [r7, #32]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	2208      	movs	r2, #8
 8008b02:	4413      	add	r3, r2
 8008b04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	6a3b      	ldr	r3, [r7, #32]
 8008b0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b10:	685a      	ldr	r2, [r3, #4]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	1ad2      	subs	r2, r2, r3
 8008b16:	2308      	movs	r3, #8
 8008b18:	005b      	lsls	r3, r3, #1
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	d920      	bls.n	8008b60 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	4413      	add	r3, r2
 8008b24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b26:	69bb      	ldr	r3, [r7, #24]
 8008b28:	f003 0307 	and.w	r3, r3, #7
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d00b      	beq.n	8008b48 <pvPortMalloc+0xfc>
	__asm volatile
 8008b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b34:	f383 8811 	msr	BASEPRI, r3
 8008b38:	f3bf 8f6f 	isb	sy
 8008b3c:	f3bf 8f4f 	dsb	sy
 8008b40:	613b      	str	r3, [r7, #16]
}
 8008b42:	bf00      	nop
 8008b44:	bf00      	nop
 8008b46:	e7fd      	b.n	8008b44 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b4a:	685a      	ldr	r2, [r3, #4]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	1ad2      	subs	r2, r2, r3
 8008b50:	69bb      	ldr	r3, [r7, #24]
 8008b52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b56:	687a      	ldr	r2, [r7, #4]
 8008b58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008b5a:	69b8      	ldr	r0, [r7, #24]
 8008b5c:	f000 f90a 	bl	8008d74 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008b60:	4b1d      	ldr	r3, [pc, #116]	@ (8008bd8 <pvPortMalloc+0x18c>)
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	1ad3      	subs	r3, r2, r3
 8008b6a:	4a1b      	ldr	r2, [pc, #108]	@ (8008bd8 <pvPortMalloc+0x18c>)
 8008b6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8008bd8 <pvPortMalloc+0x18c>)
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	4b1b      	ldr	r3, [pc, #108]	@ (8008be0 <pvPortMalloc+0x194>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	429a      	cmp	r2, r3
 8008b78:	d203      	bcs.n	8008b82 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008b7a:	4b17      	ldr	r3, [pc, #92]	@ (8008bd8 <pvPortMalloc+0x18c>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a18      	ldr	r2, [pc, #96]	@ (8008be0 <pvPortMalloc+0x194>)
 8008b80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b84:	685a      	ldr	r2, [r3, #4]
 8008b86:	4b13      	ldr	r3, [pc, #76]	@ (8008bd4 <pvPortMalloc+0x188>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	431a      	orrs	r2, r3
 8008b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b92:	2200      	movs	r2, #0
 8008b94:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008b96:	4b13      	ldr	r3, [pc, #76]	@ (8008be4 <pvPortMalloc+0x198>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	4a11      	ldr	r2, [pc, #68]	@ (8008be4 <pvPortMalloc+0x198>)
 8008b9e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008ba0:	f7fe fcca 	bl	8007538 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ba4:	69fb      	ldr	r3, [r7, #28]
 8008ba6:	f003 0307 	and.w	r3, r3, #7
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d00b      	beq.n	8008bc6 <pvPortMalloc+0x17a>
	__asm volatile
 8008bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bb2:	f383 8811 	msr	BASEPRI, r3
 8008bb6:	f3bf 8f6f 	isb	sy
 8008bba:	f3bf 8f4f 	dsb	sy
 8008bbe:	60fb      	str	r3, [r7, #12]
}
 8008bc0:	bf00      	nop
 8008bc2:	bf00      	nop
 8008bc4:	e7fd      	b.n	8008bc2 <pvPortMalloc+0x176>
	return pvReturn;
 8008bc6:	69fb      	ldr	r3, [r7, #28]
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3728      	adds	r7, #40	@ 0x28
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}
 8008bd0:	20005398 	.word	0x20005398
 8008bd4:	200053ac 	.word	0x200053ac
 8008bd8:	2000539c 	.word	0x2000539c
 8008bdc:	20005390 	.word	0x20005390
 8008be0:	200053a0 	.word	0x200053a0
 8008be4:	200053a4 	.word	0x200053a4

08008be8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b086      	sub	sp, #24
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d04f      	beq.n	8008c9a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008bfa:	2308      	movs	r3, #8
 8008bfc:	425b      	negs	r3, r3
 8008bfe:	697a      	ldr	r2, [r7, #20]
 8008c00:	4413      	add	r3, r2
 8008c02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	685a      	ldr	r2, [r3, #4]
 8008c0c:	4b25      	ldr	r3, [pc, #148]	@ (8008ca4 <vPortFree+0xbc>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4013      	ands	r3, r2
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d10b      	bne.n	8008c2e <vPortFree+0x46>
	__asm volatile
 8008c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c1a:	f383 8811 	msr	BASEPRI, r3
 8008c1e:	f3bf 8f6f 	isb	sy
 8008c22:	f3bf 8f4f 	dsb	sy
 8008c26:	60fb      	str	r3, [r7, #12]
}
 8008c28:	bf00      	nop
 8008c2a:	bf00      	nop
 8008c2c:	e7fd      	b.n	8008c2a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d00b      	beq.n	8008c4e <vPortFree+0x66>
	__asm volatile
 8008c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c3a:	f383 8811 	msr	BASEPRI, r3
 8008c3e:	f3bf 8f6f 	isb	sy
 8008c42:	f3bf 8f4f 	dsb	sy
 8008c46:	60bb      	str	r3, [r7, #8]
}
 8008c48:	bf00      	nop
 8008c4a:	bf00      	nop
 8008c4c:	e7fd      	b.n	8008c4a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	685a      	ldr	r2, [r3, #4]
 8008c52:	4b14      	ldr	r3, [pc, #80]	@ (8008ca4 <vPortFree+0xbc>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4013      	ands	r3, r2
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d01e      	beq.n	8008c9a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d11a      	bne.n	8008c9a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	685a      	ldr	r2, [r3, #4]
 8008c68:	4b0e      	ldr	r3, [pc, #56]	@ (8008ca4 <vPortFree+0xbc>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	43db      	mvns	r3, r3
 8008c6e:	401a      	ands	r2, r3
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008c74:	f7fe fc52 	bl	800751c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	685a      	ldr	r2, [r3, #4]
 8008c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8008ca8 <vPortFree+0xc0>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4413      	add	r3, r2
 8008c82:	4a09      	ldr	r2, [pc, #36]	@ (8008ca8 <vPortFree+0xc0>)
 8008c84:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008c86:	6938      	ldr	r0, [r7, #16]
 8008c88:	f000 f874 	bl	8008d74 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008c8c:	4b07      	ldr	r3, [pc, #28]	@ (8008cac <vPortFree+0xc4>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	3301      	adds	r3, #1
 8008c92:	4a06      	ldr	r2, [pc, #24]	@ (8008cac <vPortFree+0xc4>)
 8008c94:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008c96:	f7fe fc4f 	bl	8007538 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008c9a:	bf00      	nop
 8008c9c:	3718      	adds	r7, #24
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	200053ac 	.word	0x200053ac
 8008ca8:	2000539c 	.word	0x2000539c
 8008cac:	200053a8 	.word	0x200053a8

08008cb0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b085      	sub	sp, #20
 8008cb4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008cb6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008cba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008cbc:	4b27      	ldr	r3, [pc, #156]	@ (8008d5c <prvHeapInit+0xac>)
 8008cbe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f003 0307 	and.w	r3, r3, #7
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d00c      	beq.n	8008ce4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	3307      	adds	r3, #7
 8008cce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	f023 0307 	bic.w	r3, r3, #7
 8008cd6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008cd8:	68ba      	ldr	r2, [r7, #8]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	1ad3      	subs	r3, r2, r3
 8008cde:	4a1f      	ldr	r2, [pc, #124]	@ (8008d5c <prvHeapInit+0xac>)
 8008ce0:	4413      	add	r3, r2
 8008ce2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008ce8:	4a1d      	ldr	r2, [pc, #116]	@ (8008d60 <prvHeapInit+0xb0>)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008cee:	4b1c      	ldr	r3, [pc, #112]	@ (8008d60 <prvHeapInit+0xb0>)
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	68ba      	ldr	r2, [r7, #8]
 8008cf8:	4413      	add	r3, r2
 8008cfa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008cfc:	2208      	movs	r2, #8
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	1a9b      	subs	r3, r3, r2
 8008d02:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f023 0307 	bic.w	r3, r3, #7
 8008d0a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	4a15      	ldr	r2, [pc, #84]	@ (8008d64 <prvHeapInit+0xb4>)
 8008d10:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008d12:	4b14      	ldr	r3, [pc, #80]	@ (8008d64 <prvHeapInit+0xb4>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	2200      	movs	r2, #0
 8008d18:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008d1a:	4b12      	ldr	r3, [pc, #72]	@ (8008d64 <prvHeapInit+0xb4>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	68fa      	ldr	r2, [r7, #12]
 8008d2a:	1ad2      	subs	r2, r2, r3
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008d30:	4b0c      	ldr	r3, [pc, #48]	@ (8008d64 <prvHeapInit+0xb4>)
 8008d32:	681a      	ldr	r2, [r3, #0]
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	4a0a      	ldr	r2, [pc, #40]	@ (8008d68 <prvHeapInit+0xb8>)
 8008d3e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	4a09      	ldr	r2, [pc, #36]	@ (8008d6c <prvHeapInit+0xbc>)
 8008d46:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008d48:	4b09      	ldr	r3, [pc, #36]	@ (8008d70 <prvHeapInit+0xc0>)
 8008d4a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008d4e:	601a      	str	r2, [r3, #0]
}
 8008d50:	bf00      	nop
 8008d52:	3714      	adds	r7, #20
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr
 8008d5c:	20001790 	.word	0x20001790
 8008d60:	20005390 	.word	0x20005390
 8008d64:	20005398 	.word	0x20005398
 8008d68:	200053a0 	.word	0x200053a0
 8008d6c:	2000539c 	.word	0x2000539c
 8008d70:	200053ac 	.word	0x200053ac

08008d74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008d74:	b480      	push	{r7}
 8008d76:	b085      	sub	sp, #20
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008d7c:	4b28      	ldr	r3, [pc, #160]	@ (8008e20 <prvInsertBlockIntoFreeList+0xac>)
 8008d7e:	60fb      	str	r3, [r7, #12]
 8008d80:	e002      	b.n	8008d88 <prvInsertBlockIntoFreeList+0x14>
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	60fb      	str	r3, [r7, #12]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d8f7      	bhi.n	8008d82 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	68ba      	ldr	r2, [r7, #8]
 8008d9c:	4413      	add	r3, r2
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d108      	bne.n	8008db6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	685a      	ldr	r2, [r3, #4]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	441a      	add	r2, r3
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	68ba      	ldr	r2, [r7, #8]
 8008dc0:	441a      	add	r2, r3
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d118      	bne.n	8008dfc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681a      	ldr	r2, [r3, #0]
 8008dce:	4b15      	ldr	r3, [pc, #84]	@ (8008e24 <prvInsertBlockIntoFreeList+0xb0>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d00d      	beq.n	8008df2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	685a      	ldr	r2, [r3, #4]
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	441a      	add	r2, r3
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	681a      	ldr	r2, [r3, #0]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	601a      	str	r2, [r3, #0]
 8008df0:	e008      	b.n	8008e04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008df2:	4b0c      	ldr	r3, [pc, #48]	@ (8008e24 <prvInsertBlockIntoFreeList+0xb0>)
 8008df4:	681a      	ldr	r2, [r3, #0]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	601a      	str	r2, [r3, #0]
 8008dfa:	e003      	b.n	8008e04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681a      	ldr	r2, [r3, #0]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008e04:	68fa      	ldr	r2, [r7, #12]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d002      	beq.n	8008e12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e12:	bf00      	nop
 8008e14:	3714      	adds	r7, #20
 8008e16:	46bd      	mov	sp, r7
 8008e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1c:	4770      	bx	lr
 8008e1e:	bf00      	nop
 8008e20:	20005390 	.word	0x20005390
 8008e24:	20005398 	.word	0x20005398

08008e28 <siprintf>:
 8008e28:	b40e      	push	{r1, r2, r3}
 8008e2a:	b500      	push	{lr}
 8008e2c:	b09c      	sub	sp, #112	@ 0x70
 8008e2e:	ab1d      	add	r3, sp, #116	@ 0x74
 8008e30:	9002      	str	r0, [sp, #8]
 8008e32:	9006      	str	r0, [sp, #24]
 8008e34:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008e38:	4809      	ldr	r0, [pc, #36]	@ (8008e60 <siprintf+0x38>)
 8008e3a:	9107      	str	r1, [sp, #28]
 8008e3c:	9104      	str	r1, [sp, #16]
 8008e3e:	4909      	ldr	r1, [pc, #36]	@ (8008e64 <siprintf+0x3c>)
 8008e40:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e44:	9105      	str	r1, [sp, #20]
 8008e46:	6800      	ldr	r0, [r0, #0]
 8008e48:	9301      	str	r3, [sp, #4]
 8008e4a:	a902      	add	r1, sp, #8
 8008e4c:	f000 fa0c 	bl	8009268 <_svfiprintf_r>
 8008e50:	9b02      	ldr	r3, [sp, #8]
 8008e52:	2200      	movs	r2, #0
 8008e54:	701a      	strb	r2, [r3, #0]
 8008e56:	b01c      	add	sp, #112	@ 0x70
 8008e58:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e5c:	b003      	add	sp, #12
 8008e5e:	4770      	bx	lr
 8008e60:	20000010 	.word	0x20000010
 8008e64:	ffff0208 	.word	0xffff0208

08008e68 <memset>:
 8008e68:	4402      	add	r2, r0
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d100      	bne.n	8008e72 <memset+0xa>
 8008e70:	4770      	bx	lr
 8008e72:	f803 1b01 	strb.w	r1, [r3], #1
 8008e76:	e7f9      	b.n	8008e6c <memset+0x4>

08008e78 <strncpy>:
 8008e78:	b510      	push	{r4, lr}
 8008e7a:	3901      	subs	r1, #1
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	b132      	cbz	r2, 8008e8e <strncpy+0x16>
 8008e80:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008e84:	f803 4b01 	strb.w	r4, [r3], #1
 8008e88:	3a01      	subs	r2, #1
 8008e8a:	2c00      	cmp	r4, #0
 8008e8c:	d1f7      	bne.n	8008e7e <strncpy+0x6>
 8008e8e:	441a      	add	r2, r3
 8008e90:	2100      	movs	r1, #0
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d100      	bne.n	8008e98 <strncpy+0x20>
 8008e96:	bd10      	pop	{r4, pc}
 8008e98:	f803 1b01 	strb.w	r1, [r3], #1
 8008e9c:	e7f9      	b.n	8008e92 <strncpy+0x1a>
	...

08008ea0 <_reclaim_reent>:
 8008ea0:	4b29      	ldr	r3, [pc, #164]	@ (8008f48 <_reclaim_reent+0xa8>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4283      	cmp	r3, r0
 8008ea6:	b570      	push	{r4, r5, r6, lr}
 8008ea8:	4604      	mov	r4, r0
 8008eaa:	d04b      	beq.n	8008f44 <_reclaim_reent+0xa4>
 8008eac:	69c3      	ldr	r3, [r0, #28]
 8008eae:	b1ab      	cbz	r3, 8008edc <_reclaim_reent+0x3c>
 8008eb0:	68db      	ldr	r3, [r3, #12]
 8008eb2:	b16b      	cbz	r3, 8008ed0 <_reclaim_reent+0x30>
 8008eb4:	2500      	movs	r5, #0
 8008eb6:	69e3      	ldr	r3, [r4, #28]
 8008eb8:	68db      	ldr	r3, [r3, #12]
 8008eba:	5959      	ldr	r1, [r3, r5]
 8008ebc:	2900      	cmp	r1, #0
 8008ebe:	d13b      	bne.n	8008f38 <_reclaim_reent+0x98>
 8008ec0:	3504      	adds	r5, #4
 8008ec2:	2d80      	cmp	r5, #128	@ 0x80
 8008ec4:	d1f7      	bne.n	8008eb6 <_reclaim_reent+0x16>
 8008ec6:	69e3      	ldr	r3, [r4, #28]
 8008ec8:	4620      	mov	r0, r4
 8008eca:	68d9      	ldr	r1, [r3, #12]
 8008ecc:	f000 f878 	bl	8008fc0 <_free_r>
 8008ed0:	69e3      	ldr	r3, [r4, #28]
 8008ed2:	6819      	ldr	r1, [r3, #0]
 8008ed4:	b111      	cbz	r1, 8008edc <_reclaim_reent+0x3c>
 8008ed6:	4620      	mov	r0, r4
 8008ed8:	f000 f872 	bl	8008fc0 <_free_r>
 8008edc:	6961      	ldr	r1, [r4, #20]
 8008ede:	b111      	cbz	r1, 8008ee6 <_reclaim_reent+0x46>
 8008ee0:	4620      	mov	r0, r4
 8008ee2:	f000 f86d 	bl	8008fc0 <_free_r>
 8008ee6:	69e1      	ldr	r1, [r4, #28]
 8008ee8:	b111      	cbz	r1, 8008ef0 <_reclaim_reent+0x50>
 8008eea:	4620      	mov	r0, r4
 8008eec:	f000 f868 	bl	8008fc0 <_free_r>
 8008ef0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008ef2:	b111      	cbz	r1, 8008efa <_reclaim_reent+0x5a>
 8008ef4:	4620      	mov	r0, r4
 8008ef6:	f000 f863 	bl	8008fc0 <_free_r>
 8008efa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008efc:	b111      	cbz	r1, 8008f04 <_reclaim_reent+0x64>
 8008efe:	4620      	mov	r0, r4
 8008f00:	f000 f85e 	bl	8008fc0 <_free_r>
 8008f04:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008f06:	b111      	cbz	r1, 8008f0e <_reclaim_reent+0x6e>
 8008f08:	4620      	mov	r0, r4
 8008f0a:	f000 f859 	bl	8008fc0 <_free_r>
 8008f0e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008f10:	b111      	cbz	r1, 8008f18 <_reclaim_reent+0x78>
 8008f12:	4620      	mov	r0, r4
 8008f14:	f000 f854 	bl	8008fc0 <_free_r>
 8008f18:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008f1a:	b111      	cbz	r1, 8008f22 <_reclaim_reent+0x82>
 8008f1c:	4620      	mov	r0, r4
 8008f1e:	f000 f84f 	bl	8008fc0 <_free_r>
 8008f22:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008f24:	b111      	cbz	r1, 8008f2c <_reclaim_reent+0x8c>
 8008f26:	4620      	mov	r0, r4
 8008f28:	f000 f84a 	bl	8008fc0 <_free_r>
 8008f2c:	6a23      	ldr	r3, [r4, #32]
 8008f2e:	b14b      	cbz	r3, 8008f44 <_reclaim_reent+0xa4>
 8008f30:	4620      	mov	r0, r4
 8008f32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008f36:	4718      	bx	r3
 8008f38:	680e      	ldr	r6, [r1, #0]
 8008f3a:	4620      	mov	r0, r4
 8008f3c:	f000 f840 	bl	8008fc0 <_free_r>
 8008f40:	4631      	mov	r1, r6
 8008f42:	e7bb      	b.n	8008ebc <_reclaim_reent+0x1c>
 8008f44:	bd70      	pop	{r4, r5, r6, pc}
 8008f46:	bf00      	nop
 8008f48:	20000010 	.word	0x20000010

08008f4c <__errno>:
 8008f4c:	4b01      	ldr	r3, [pc, #4]	@ (8008f54 <__errno+0x8>)
 8008f4e:	6818      	ldr	r0, [r3, #0]
 8008f50:	4770      	bx	lr
 8008f52:	bf00      	nop
 8008f54:	20000010 	.word	0x20000010

08008f58 <__libc_init_array>:
 8008f58:	b570      	push	{r4, r5, r6, lr}
 8008f5a:	4d0d      	ldr	r5, [pc, #52]	@ (8008f90 <__libc_init_array+0x38>)
 8008f5c:	4c0d      	ldr	r4, [pc, #52]	@ (8008f94 <__libc_init_array+0x3c>)
 8008f5e:	1b64      	subs	r4, r4, r5
 8008f60:	10a4      	asrs	r4, r4, #2
 8008f62:	2600      	movs	r6, #0
 8008f64:	42a6      	cmp	r6, r4
 8008f66:	d109      	bne.n	8008f7c <__libc_init_array+0x24>
 8008f68:	4d0b      	ldr	r5, [pc, #44]	@ (8008f98 <__libc_init_array+0x40>)
 8008f6a:	4c0c      	ldr	r4, [pc, #48]	@ (8008f9c <__libc_init_array+0x44>)
 8008f6c:	f000 fed0 	bl	8009d10 <_init>
 8008f70:	1b64      	subs	r4, r4, r5
 8008f72:	10a4      	asrs	r4, r4, #2
 8008f74:	2600      	movs	r6, #0
 8008f76:	42a6      	cmp	r6, r4
 8008f78:	d105      	bne.n	8008f86 <__libc_init_array+0x2e>
 8008f7a:	bd70      	pop	{r4, r5, r6, pc}
 8008f7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f80:	4798      	blx	r3
 8008f82:	3601      	adds	r6, #1
 8008f84:	e7ee      	b.n	8008f64 <__libc_init_array+0xc>
 8008f86:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f8a:	4798      	blx	r3
 8008f8c:	3601      	adds	r6, #1
 8008f8e:	e7f2      	b.n	8008f76 <__libc_init_array+0x1e>
 8008f90:	0800a0d0 	.word	0x0800a0d0
 8008f94:	0800a0d0 	.word	0x0800a0d0
 8008f98:	0800a0d0 	.word	0x0800a0d0
 8008f9c:	0800a0d4 	.word	0x0800a0d4

08008fa0 <__retarget_lock_acquire_recursive>:
 8008fa0:	4770      	bx	lr

08008fa2 <__retarget_lock_release_recursive>:
 8008fa2:	4770      	bx	lr

08008fa4 <memcpy>:
 8008fa4:	440a      	add	r2, r1
 8008fa6:	4291      	cmp	r1, r2
 8008fa8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008fac:	d100      	bne.n	8008fb0 <memcpy+0xc>
 8008fae:	4770      	bx	lr
 8008fb0:	b510      	push	{r4, lr}
 8008fb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008fba:	4291      	cmp	r1, r2
 8008fbc:	d1f9      	bne.n	8008fb2 <memcpy+0xe>
 8008fbe:	bd10      	pop	{r4, pc}

08008fc0 <_free_r>:
 8008fc0:	b538      	push	{r3, r4, r5, lr}
 8008fc2:	4605      	mov	r5, r0
 8008fc4:	2900      	cmp	r1, #0
 8008fc6:	d041      	beq.n	800904c <_free_r+0x8c>
 8008fc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fcc:	1f0c      	subs	r4, r1, #4
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	bfb8      	it	lt
 8008fd2:	18e4      	addlt	r4, r4, r3
 8008fd4:	f000 f8e0 	bl	8009198 <__malloc_lock>
 8008fd8:	4a1d      	ldr	r2, [pc, #116]	@ (8009050 <_free_r+0x90>)
 8008fda:	6813      	ldr	r3, [r2, #0]
 8008fdc:	b933      	cbnz	r3, 8008fec <_free_r+0x2c>
 8008fde:	6063      	str	r3, [r4, #4]
 8008fe0:	6014      	str	r4, [r2, #0]
 8008fe2:	4628      	mov	r0, r5
 8008fe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fe8:	f000 b8dc 	b.w	80091a4 <__malloc_unlock>
 8008fec:	42a3      	cmp	r3, r4
 8008fee:	d908      	bls.n	8009002 <_free_r+0x42>
 8008ff0:	6820      	ldr	r0, [r4, #0]
 8008ff2:	1821      	adds	r1, r4, r0
 8008ff4:	428b      	cmp	r3, r1
 8008ff6:	bf01      	itttt	eq
 8008ff8:	6819      	ldreq	r1, [r3, #0]
 8008ffa:	685b      	ldreq	r3, [r3, #4]
 8008ffc:	1809      	addeq	r1, r1, r0
 8008ffe:	6021      	streq	r1, [r4, #0]
 8009000:	e7ed      	b.n	8008fde <_free_r+0x1e>
 8009002:	461a      	mov	r2, r3
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	b10b      	cbz	r3, 800900c <_free_r+0x4c>
 8009008:	42a3      	cmp	r3, r4
 800900a:	d9fa      	bls.n	8009002 <_free_r+0x42>
 800900c:	6811      	ldr	r1, [r2, #0]
 800900e:	1850      	adds	r0, r2, r1
 8009010:	42a0      	cmp	r0, r4
 8009012:	d10b      	bne.n	800902c <_free_r+0x6c>
 8009014:	6820      	ldr	r0, [r4, #0]
 8009016:	4401      	add	r1, r0
 8009018:	1850      	adds	r0, r2, r1
 800901a:	4283      	cmp	r3, r0
 800901c:	6011      	str	r1, [r2, #0]
 800901e:	d1e0      	bne.n	8008fe2 <_free_r+0x22>
 8009020:	6818      	ldr	r0, [r3, #0]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	6053      	str	r3, [r2, #4]
 8009026:	4408      	add	r0, r1
 8009028:	6010      	str	r0, [r2, #0]
 800902a:	e7da      	b.n	8008fe2 <_free_r+0x22>
 800902c:	d902      	bls.n	8009034 <_free_r+0x74>
 800902e:	230c      	movs	r3, #12
 8009030:	602b      	str	r3, [r5, #0]
 8009032:	e7d6      	b.n	8008fe2 <_free_r+0x22>
 8009034:	6820      	ldr	r0, [r4, #0]
 8009036:	1821      	adds	r1, r4, r0
 8009038:	428b      	cmp	r3, r1
 800903a:	bf04      	itt	eq
 800903c:	6819      	ldreq	r1, [r3, #0]
 800903e:	685b      	ldreq	r3, [r3, #4]
 8009040:	6063      	str	r3, [r4, #4]
 8009042:	bf04      	itt	eq
 8009044:	1809      	addeq	r1, r1, r0
 8009046:	6021      	streq	r1, [r4, #0]
 8009048:	6054      	str	r4, [r2, #4]
 800904a:	e7ca      	b.n	8008fe2 <_free_r+0x22>
 800904c:	bd38      	pop	{r3, r4, r5, pc}
 800904e:	bf00      	nop
 8009050:	200054f4 	.word	0x200054f4

08009054 <sbrk_aligned>:
 8009054:	b570      	push	{r4, r5, r6, lr}
 8009056:	4e0f      	ldr	r6, [pc, #60]	@ (8009094 <sbrk_aligned+0x40>)
 8009058:	460c      	mov	r4, r1
 800905a:	6831      	ldr	r1, [r6, #0]
 800905c:	4605      	mov	r5, r0
 800905e:	b911      	cbnz	r1, 8009066 <sbrk_aligned+0x12>
 8009060:	f000 fba6 	bl	80097b0 <_sbrk_r>
 8009064:	6030      	str	r0, [r6, #0]
 8009066:	4621      	mov	r1, r4
 8009068:	4628      	mov	r0, r5
 800906a:	f000 fba1 	bl	80097b0 <_sbrk_r>
 800906e:	1c43      	adds	r3, r0, #1
 8009070:	d103      	bne.n	800907a <sbrk_aligned+0x26>
 8009072:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009076:	4620      	mov	r0, r4
 8009078:	bd70      	pop	{r4, r5, r6, pc}
 800907a:	1cc4      	adds	r4, r0, #3
 800907c:	f024 0403 	bic.w	r4, r4, #3
 8009080:	42a0      	cmp	r0, r4
 8009082:	d0f8      	beq.n	8009076 <sbrk_aligned+0x22>
 8009084:	1a21      	subs	r1, r4, r0
 8009086:	4628      	mov	r0, r5
 8009088:	f000 fb92 	bl	80097b0 <_sbrk_r>
 800908c:	3001      	adds	r0, #1
 800908e:	d1f2      	bne.n	8009076 <sbrk_aligned+0x22>
 8009090:	e7ef      	b.n	8009072 <sbrk_aligned+0x1e>
 8009092:	bf00      	nop
 8009094:	200054f0 	.word	0x200054f0

08009098 <_malloc_r>:
 8009098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800909c:	1ccd      	adds	r5, r1, #3
 800909e:	f025 0503 	bic.w	r5, r5, #3
 80090a2:	3508      	adds	r5, #8
 80090a4:	2d0c      	cmp	r5, #12
 80090a6:	bf38      	it	cc
 80090a8:	250c      	movcc	r5, #12
 80090aa:	2d00      	cmp	r5, #0
 80090ac:	4606      	mov	r6, r0
 80090ae:	db01      	blt.n	80090b4 <_malloc_r+0x1c>
 80090b0:	42a9      	cmp	r1, r5
 80090b2:	d904      	bls.n	80090be <_malloc_r+0x26>
 80090b4:	230c      	movs	r3, #12
 80090b6:	6033      	str	r3, [r6, #0]
 80090b8:	2000      	movs	r0, #0
 80090ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009194 <_malloc_r+0xfc>
 80090c2:	f000 f869 	bl	8009198 <__malloc_lock>
 80090c6:	f8d8 3000 	ldr.w	r3, [r8]
 80090ca:	461c      	mov	r4, r3
 80090cc:	bb44      	cbnz	r4, 8009120 <_malloc_r+0x88>
 80090ce:	4629      	mov	r1, r5
 80090d0:	4630      	mov	r0, r6
 80090d2:	f7ff ffbf 	bl	8009054 <sbrk_aligned>
 80090d6:	1c43      	adds	r3, r0, #1
 80090d8:	4604      	mov	r4, r0
 80090da:	d158      	bne.n	800918e <_malloc_r+0xf6>
 80090dc:	f8d8 4000 	ldr.w	r4, [r8]
 80090e0:	4627      	mov	r7, r4
 80090e2:	2f00      	cmp	r7, #0
 80090e4:	d143      	bne.n	800916e <_malloc_r+0xd6>
 80090e6:	2c00      	cmp	r4, #0
 80090e8:	d04b      	beq.n	8009182 <_malloc_r+0xea>
 80090ea:	6823      	ldr	r3, [r4, #0]
 80090ec:	4639      	mov	r1, r7
 80090ee:	4630      	mov	r0, r6
 80090f0:	eb04 0903 	add.w	r9, r4, r3
 80090f4:	f000 fb5c 	bl	80097b0 <_sbrk_r>
 80090f8:	4581      	cmp	r9, r0
 80090fa:	d142      	bne.n	8009182 <_malloc_r+0xea>
 80090fc:	6821      	ldr	r1, [r4, #0]
 80090fe:	1a6d      	subs	r5, r5, r1
 8009100:	4629      	mov	r1, r5
 8009102:	4630      	mov	r0, r6
 8009104:	f7ff ffa6 	bl	8009054 <sbrk_aligned>
 8009108:	3001      	adds	r0, #1
 800910a:	d03a      	beq.n	8009182 <_malloc_r+0xea>
 800910c:	6823      	ldr	r3, [r4, #0]
 800910e:	442b      	add	r3, r5
 8009110:	6023      	str	r3, [r4, #0]
 8009112:	f8d8 3000 	ldr.w	r3, [r8]
 8009116:	685a      	ldr	r2, [r3, #4]
 8009118:	bb62      	cbnz	r2, 8009174 <_malloc_r+0xdc>
 800911a:	f8c8 7000 	str.w	r7, [r8]
 800911e:	e00f      	b.n	8009140 <_malloc_r+0xa8>
 8009120:	6822      	ldr	r2, [r4, #0]
 8009122:	1b52      	subs	r2, r2, r5
 8009124:	d420      	bmi.n	8009168 <_malloc_r+0xd0>
 8009126:	2a0b      	cmp	r2, #11
 8009128:	d917      	bls.n	800915a <_malloc_r+0xc2>
 800912a:	1961      	adds	r1, r4, r5
 800912c:	42a3      	cmp	r3, r4
 800912e:	6025      	str	r5, [r4, #0]
 8009130:	bf18      	it	ne
 8009132:	6059      	strne	r1, [r3, #4]
 8009134:	6863      	ldr	r3, [r4, #4]
 8009136:	bf08      	it	eq
 8009138:	f8c8 1000 	streq.w	r1, [r8]
 800913c:	5162      	str	r2, [r4, r5]
 800913e:	604b      	str	r3, [r1, #4]
 8009140:	4630      	mov	r0, r6
 8009142:	f000 f82f 	bl	80091a4 <__malloc_unlock>
 8009146:	f104 000b 	add.w	r0, r4, #11
 800914a:	1d23      	adds	r3, r4, #4
 800914c:	f020 0007 	bic.w	r0, r0, #7
 8009150:	1ac2      	subs	r2, r0, r3
 8009152:	bf1c      	itt	ne
 8009154:	1a1b      	subne	r3, r3, r0
 8009156:	50a3      	strne	r3, [r4, r2]
 8009158:	e7af      	b.n	80090ba <_malloc_r+0x22>
 800915a:	6862      	ldr	r2, [r4, #4]
 800915c:	42a3      	cmp	r3, r4
 800915e:	bf0c      	ite	eq
 8009160:	f8c8 2000 	streq.w	r2, [r8]
 8009164:	605a      	strne	r2, [r3, #4]
 8009166:	e7eb      	b.n	8009140 <_malloc_r+0xa8>
 8009168:	4623      	mov	r3, r4
 800916a:	6864      	ldr	r4, [r4, #4]
 800916c:	e7ae      	b.n	80090cc <_malloc_r+0x34>
 800916e:	463c      	mov	r4, r7
 8009170:	687f      	ldr	r7, [r7, #4]
 8009172:	e7b6      	b.n	80090e2 <_malloc_r+0x4a>
 8009174:	461a      	mov	r2, r3
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	42a3      	cmp	r3, r4
 800917a:	d1fb      	bne.n	8009174 <_malloc_r+0xdc>
 800917c:	2300      	movs	r3, #0
 800917e:	6053      	str	r3, [r2, #4]
 8009180:	e7de      	b.n	8009140 <_malloc_r+0xa8>
 8009182:	230c      	movs	r3, #12
 8009184:	6033      	str	r3, [r6, #0]
 8009186:	4630      	mov	r0, r6
 8009188:	f000 f80c 	bl	80091a4 <__malloc_unlock>
 800918c:	e794      	b.n	80090b8 <_malloc_r+0x20>
 800918e:	6005      	str	r5, [r0, #0]
 8009190:	e7d6      	b.n	8009140 <_malloc_r+0xa8>
 8009192:	bf00      	nop
 8009194:	200054f4 	.word	0x200054f4

08009198 <__malloc_lock>:
 8009198:	4801      	ldr	r0, [pc, #4]	@ (80091a0 <__malloc_lock+0x8>)
 800919a:	f7ff bf01 	b.w	8008fa0 <__retarget_lock_acquire_recursive>
 800919e:	bf00      	nop
 80091a0:	200054ec 	.word	0x200054ec

080091a4 <__malloc_unlock>:
 80091a4:	4801      	ldr	r0, [pc, #4]	@ (80091ac <__malloc_unlock+0x8>)
 80091a6:	f7ff befc 	b.w	8008fa2 <__retarget_lock_release_recursive>
 80091aa:	bf00      	nop
 80091ac:	200054ec 	.word	0x200054ec

080091b0 <__ssputs_r>:
 80091b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091b4:	688e      	ldr	r6, [r1, #8]
 80091b6:	461f      	mov	r7, r3
 80091b8:	42be      	cmp	r6, r7
 80091ba:	680b      	ldr	r3, [r1, #0]
 80091bc:	4682      	mov	sl, r0
 80091be:	460c      	mov	r4, r1
 80091c0:	4690      	mov	r8, r2
 80091c2:	d82d      	bhi.n	8009220 <__ssputs_r+0x70>
 80091c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80091c8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80091cc:	d026      	beq.n	800921c <__ssputs_r+0x6c>
 80091ce:	6965      	ldr	r5, [r4, #20]
 80091d0:	6909      	ldr	r1, [r1, #16]
 80091d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80091d6:	eba3 0901 	sub.w	r9, r3, r1
 80091da:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80091de:	1c7b      	adds	r3, r7, #1
 80091e0:	444b      	add	r3, r9
 80091e2:	106d      	asrs	r5, r5, #1
 80091e4:	429d      	cmp	r5, r3
 80091e6:	bf38      	it	cc
 80091e8:	461d      	movcc	r5, r3
 80091ea:	0553      	lsls	r3, r2, #21
 80091ec:	d527      	bpl.n	800923e <__ssputs_r+0x8e>
 80091ee:	4629      	mov	r1, r5
 80091f0:	f7ff ff52 	bl	8009098 <_malloc_r>
 80091f4:	4606      	mov	r6, r0
 80091f6:	b360      	cbz	r0, 8009252 <__ssputs_r+0xa2>
 80091f8:	6921      	ldr	r1, [r4, #16]
 80091fa:	464a      	mov	r2, r9
 80091fc:	f7ff fed2 	bl	8008fa4 <memcpy>
 8009200:	89a3      	ldrh	r3, [r4, #12]
 8009202:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009206:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800920a:	81a3      	strh	r3, [r4, #12]
 800920c:	6126      	str	r6, [r4, #16]
 800920e:	6165      	str	r5, [r4, #20]
 8009210:	444e      	add	r6, r9
 8009212:	eba5 0509 	sub.w	r5, r5, r9
 8009216:	6026      	str	r6, [r4, #0]
 8009218:	60a5      	str	r5, [r4, #8]
 800921a:	463e      	mov	r6, r7
 800921c:	42be      	cmp	r6, r7
 800921e:	d900      	bls.n	8009222 <__ssputs_r+0x72>
 8009220:	463e      	mov	r6, r7
 8009222:	6820      	ldr	r0, [r4, #0]
 8009224:	4632      	mov	r2, r6
 8009226:	4641      	mov	r1, r8
 8009228:	f000 faa8 	bl	800977c <memmove>
 800922c:	68a3      	ldr	r3, [r4, #8]
 800922e:	1b9b      	subs	r3, r3, r6
 8009230:	60a3      	str	r3, [r4, #8]
 8009232:	6823      	ldr	r3, [r4, #0]
 8009234:	4433      	add	r3, r6
 8009236:	6023      	str	r3, [r4, #0]
 8009238:	2000      	movs	r0, #0
 800923a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800923e:	462a      	mov	r2, r5
 8009240:	f000 fac6 	bl	80097d0 <_realloc_r>
 8009244:	4606      	mov	r6, r0
 8009246:	2800      	cmp	r0, #0
 8009248:	d1e0      	bne.n	800920c <__ssputs_r+0x5c>
 800924a:	6921      	ldr	r1, [r4, #16]
 800924c:	4650      	mov	r0, sl
 800924e:	f7ff feb7 	bl	8008fc0 <_free_r>
 8009252:	230c      	movs	r3, #12
 8009254:	f8ca 3000 	str.w	r3, [sl]
 8009258:	89a3      	ldrh	r3, [r4, #12]
 800925a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800925e:	81a3      	strh	r3, [r4, #12]
 8009260:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009264:	e7e9      	b.n	800923a <__ssputs_r+0x8a>
	...

08009268 <_svfiprintf_r>:
 8009268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800926c:	4698      	mov	r8, r3
 800926e:	898b      	ldrh	r3, [r1, #12]
 8009270:	061b      	lsls	r3, r3, #24
 8009272:	b09d      	sub	sp, #116	@ 0x74
 8009274:	4607      	mov	r7, r0
 8009276:	460d      	mov	r5, r1
 8009278:	4614      	mov	r4, r2
 800927a:	d510      	bpl.n	800929e <_svfiprintf_r+0x36>
 800927c:	690b      	ldr	r3, [r1, #16]
 800927e:	b973      	cbnz	r3, 800929e <_svfiprintf_r+0x36>
 8009280:	2140      	movs	r1, #64	@ 0x40
 8009282:	f7ff ff09 	bl	8009098 <_malloc_r>
 8009286:	6028      	str	r0, [r5, #0]
 8009288:	6128      	str	r0, [r5, #16]
 800928a:	b930      	cbnz	r0, 800929a <_svfiprintf_r+0x32>
 800928c:	230c      	movs	r3, #12
 800928e:	603b      	str	r3, [r7, #0]
 8009290:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009294:	b01d      	add	sp, #116	@ 0x74
 8009296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800929a:	2340      	movs	r3, #64	@ 0x40
 800929c:	616b      	str	r3, [r5, #20]
 800929e:	2300      	movs	r3, #0
 80092a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80092a2:	2320      	movs	r3, #32
 80092a4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80092a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80092ac:	2330      	movs	r3, #48	@ 0x30
 80092ae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800944c <_svfiprintf_r+0x1e4>
 80092b2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80092b6:	f04f 0901 	mov.w	r9, #1
 80092ba:	4623      	mov	r3, r4
 80092bc:	469a      	mov	sl, r3
 80092be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092c2:	b10a      	cbz	r2, 80092c8 <_svfiprintf_r+0x60>
 80092c4:	2a25      	cmp	r2, #37	@ 0x25
 80092c6:	d1f9      	bne.n	80092bc <_svfiprintf_r+0x54>
 80092c8:	ebba 0b04 	subs.w	fp, sl, r4
 80092cc:	d00b      	beq.n	80092e6 <_svfiprintf_r+0x7e>
 80092ce:	465b      	mov	r3, fp
 80092d0:	4622      	mov	r2, r4
 80092d2:	4629      	mov	r1, r5
 80092d4:	4638      	mov	r0, r7
 80092d6:	f7ff ff6b 	bl	80091b0 <__ssputs_r>
 80092da:	3001      	adds	r0, #1
 80092dc:	f000 80a7 	beq.w	800942e <_svfiprintf_r+0x1c6>
 80092e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092e2:	445a      	add	r2, fp
 80092e4:	9209      	str	r2, [sp, #36]	@ 0x24
 80092e6:	f89a 3000 	ldrb.w	r3, [sl]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	f000 809f 	beq.w	800942e <_svfiprintf_r+0x1c6>
 80092f0:	2300      	movs	r3, #0
 80092f2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80092f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092fa:	f10a 0a01 	add.w	sl, sl, #1
 80092fe:	9304      	str	r3, [sp, #16]
 8009300:	9307      	str	r3, [sp, #28]
 8009302:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009306:	931a      	str	r3, [sp, #104]	@ 0x68
 8009308:	4654      	mov	r4, sl
 800930a:	2205      	movs	r2, #5
 800930c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009310:	484e      	ldr	r0, [pc, #312]	@ (800944c <_svfiprintf_r+0x1e4>)
 8009312:	f7f6 ff85 	bl	8000220 <memchr>
 8009316:	9a04      	ldr	r2, [sp, #16]
 8009318:	b9d8      	cbnz	r0, 8009352 <_svfiprintf_r+0xea>
 800931a:	06d0      	lsls	r0, r2, #27
 800931c:	bf44      	itt	mi
 800931e:	2320      	movmi	r3, #32
 8009320:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009324:	0711      	lsls	r1, r2, #28
 8009326:	bf44      	itt	mi
 8009328:	232b      	movmi	r3, #43	@ 0x2b
 800932a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800932e:	f89a 3000 	ldrb.w	r3, [sl]
 8009332:	2b2a      	cmp	r3, #42	@ 0x2a
 8009334:	d015      	beq.n	8009362 <_svfiprintf_r+0xfa>
 8009336:	9a07      	ldr	r2, [sp, #28]
 8009338:	4654      	mov	r4, sl
 800933a:	2000      	movs	r0, #0
 800933c:	f04f 0c0a 	mov.w	ip, #10
 8009340:	4621      	mov	r1, r4
 8009342:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009346:	3b30      	subs	r3, #48	@ 0x30
 8009348:	2b09      	cmp	r3, #9
 800934a:	d94b      	bls.n	80093e4 <_svfiprintf_r+0x17c>
 800934c:	b1b0      	cbz	r0, 800937c <_svfiprintf_r+0x114>
 800934e:	9207      	str	r2, [sp, #28]
 8009350:	e014      	b.n	800937c <_svfiprintf_r+0x114>
 8009352:	eba0 0308 	sub.w	r3, r0, r8
 8009356:	fa09 f303 	lsl.w	r3, r9, r3
 800935a:	4313      	orrs	r3, r2
 800935c:	9304      	str	r3, [sp, #16]
 800935e:	46a2      	mov	sl, r4
 8009360:	e7d2      	b.n	8009308 <_svfiprintf_r+0xa0>
 8009362:	9b03      	ldr	r3, [sp, #12]
 8009364:	1d19      	adds	r1, r3, #4
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	9103      	str	r1, [sp, #12]
 800936a:	2b00      	cmp	r3, #0
 800936c:	bfbb      	ittet	lt
 800936e:	425b      	neglt	r3, r3
 8009370:	f042 0202 	orrlt.w	r2, r2, #2
 8009374:	9307      	strge	r3, [sp, #28]
 8009376:	9307      	strlt	r3, [sp, #28]
 8009378:	bfb8      	it	lt
 800937a:	9204      	strlt	r2, [sp, #16]
 800937c:	7823      	ldrb	r3, [r4, #0]
 800937e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009380:	d10a      	bne.n	8009398 <_svfiprintf_r+0x130>
 8009382:	7863      	ldrb	r3, [r4, #1]
 8009384:	2b2a      	cmp	r3, #42	@ 0x2a
 8009386:	d132      	bne.n	80093ee <_svfiprintf_r+0x186>
 8009388:	9b03      	ldr	r3, [sp, #12]
 800938a:	1d1a      	adds	r2, r3, #4
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	9203      	str	r2, [sp, #12]
 8009390:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009394:	3402      	adds	r4, #2
 8009396:	9305      	str	r3, [sp, #20]
 8009398:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800945c <_svfiprintf_r+0x1f4>
 800939c:	7821      	ldrb	r1, [r4, #0]
 800939e:	2203      	movs	r2, #3
 80093a0:	4650      	mov	r0, sl
 80093a2:	f7f6 ff3d 	bl	8000220 <memchr>
 80093a6:	b138      	cbz	r0, 80093b8 <_svfiprintf_r+0x150>
 80093a8:	9b04      	ldr	r3, [sp, #16]
 80093aa:	eba0 000a 	sub.w	r0, r0, sl
 80093ae:	2240      	movs	r2, #64	@ 0x40
 80093b0:	4082      	lsls	r2, r0
 80093b2:	4313      	orrs	r3, r2
 80093b4:	3401      	adds	r4, #1
 80093b6:	9304      	str	r3, [sp, #16]
 80093b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093bc:	4824      	ldr	r0, [pc, #144]	@ (8009450 <_svfiprintf_r+0x1e8>)
 80093be:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80093c2:	2206      	movs	r2, #6
 80093c4:	f7f6 ff2c 	bl	8000220 <memchr>
 80093c8:	2800      	cmp	r0, #0
 80093ca:	d036      	beq.n	800943a <_svfiprintf_r+0x1d2>
 80093cc:	4b21      	ldr	r3, [pc, #132]	@ (8009454 <_svfiprintf_r+0x1ec>)
 80093ce:	bb1b      	cbnz	r3, 8009418 <_svfiprintf_r+0x1b0>
 80093d0:	9b03      	ldr	r3, [sp, #12]
 80093d2:	3307      	adds	r3, #7
 80093d4:	f023 0307 	bic.w	r3, r3, #7
 80093d8:	3308      	adds	r3, #8
 80093da:	9303      	str	r3, [sp, #12]
 80093dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093de:	4433      	add	r3, r6
 80093e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80093e2:	e76a      	b.n	80092ba <_svfiprintf_r+0x52>
 80093e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80093e8:	460c      	mov	r4, r1
 80093ea:	2001      	movs	r0, #1
 80093ec:	e7a8      	b.n	8009340 <_svfiprintf_r+0xd8>
 80093ee:	2300      	movs	r3, #0
 80093f0:	3401      	adds	r4, #1
 80093f2:	9305      	str	r3, [sp, #20]
 80093f4:	4619      	mov	r1, r3
 80093f6:	f04f 0c0a 	mov.w	ip, #10
 80093fa:	4620      	mov	r0, r4
 80093fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009400:	3a30      	subs	r2, #48	@ 0x30
 8009402:	2a09      	cmp	r2, #9
 8009404:	d903      	bls.n	800940e <_svfiprintf_r+0x1a6>
 8009406:	2b00      	cmp	r3, #0
 8009408:	d0c6      	beq.n	8009398 <_svfiprintf_r+0x130>
 800940a:	9105      	str	r1, [sp, #20]
 800940c:	e7c4      	b.n	8009398 <_svfiprintf_r+0x130>
 800940e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009412:	4604      	mov	r4, r0
 8009414:	2301      	movs	r3, #1
 8009416:	e7f0      	b.n	80093fa <_svfiprintf_r+0x192>
 8009418:	ab03      	add	r3, sp, #12
 800941a:	9300      	str	r3, [sp, #0]
 800941c:	462a      	mov	r2, r5
 800941e:	4b0e      	ldr	r3, [pc, #56]	@ (8009458 <_svfiprintf_r+0x1f0>)
 8009420:	a904      	add	r1, sp, #16
 8009422:	4638      	mov	r0, r7
 8009424:	f3af 8000 	nop.w
 8009428:	1c42      	adds	r2, r0, #1
 800942a:	4606      	mov	r6, r0
 800942c:	d1d6      	bne.n	80093dc <_svfiprintf_r+0x174>
 800942e:	89ab      	ldrh	r3, [r5, #12]
 8009430:	065b      	lsls	r3, r3, #25
 8009432:	f53f af2d 	bmi.w	8009290 <_svfiprintf_r+0x28>
 8009436:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009438:	e72c      	b.n	8009294 <_svfiprintf_r+0x2c>
 800943a:	ab03      	add	r3, sp, #12
 800943c:	9300      	str	r3, [sp, #0]
 800943e:	462a      	mov	r2, r5
 8009440:	4b05      	ldr	r3, [pc, #20]	@ (8009458 <_svfiprintf_r+0x1f0>)
 8009442:	a904      	add	r1, sp, #16
 8009444:	4638      	mov	r0, r7
 8009446:	f000 f879 	bl	800953c <_printf_i>
 800944a:	e7ed      	b.n	8009428 <_svfiprintf_r+0x1c0>
 800944c:	0800a024 	.word	0x0800a024
 8009450:	0800a02e 	.word	0x0800a02e
 8009454:	00000000 	.word	0x00000000
 8009458:	080091b1 	.word	0x080091b1
 800945c:	0800a02a 	.word	0x0800a02a

08009460 <_printf_common>:
 8009460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009464:	4616      	mov	r6, r2
 8009466:	4698      	mov	r8, r3
 8009468:	688a      	ldr	r2, [r1, #8]
 800946a:	690b      	ldr	r3, [r1, #16]
 800946c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009470:	4293      	cmp	r3, r2
 8009472:	bfb8      	it	lt
 8009474:	4613      	movlt	r3, r2
 8009476:	6033      	str	r3, [r6, #0]
 8009478:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800947c:	4607      	mov	r7, r0
 800947e:	460c      	mov	r4, r1
 8009480:	b10a      	cbz	r2, 8009486 <_printf_common+0x26>
 8009482:	3301      	adds	r3, #1
 8009484:	6033      	str	r3, [r6, #0]
 8009486:	6823      	ldr	r3, [r4, #0]
 8009488:	0699      	lsls	r1, r3, #26
 800948a:	bf42      	ittt	mi
 800948c:	6833      	ldrmi	r3, [r6, #0]
 800948e:	3302      	addmi	r3, #2
 8009490:	6033      	strmi	r3, [r6, #0]
 8009492:	6825      	ldr	r5, [r4, #0]
 8009494:	f015 0506 	ands.w	r5, r5, #6
 8009498:	d106      	bne.n	80094a8 <_printf_common+0x48>
 800949a:	f104 0a19 	add.w	sl, r4, #25
 800949e:	68e3      	ldr	r3, [r4, #12]
 80094a0:	6832      	ldr	r2, [r6, #0]
 80094a2:	1a9b      	subs	r3, r3, r2
 80094a4:	42ab      	cmp	r3, r5
 80094a6:	dc26      	bgt.n	80094f6 <_printf_common+0x96>
 80094a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80094ac:	6822      	ldr	r2, [r4, #0]
 80094ae:	3b00      	subs	r3, #0
 80094b0:	bf18      	it	ne
 80094b2:	2301      	movne	r3, #1
 80094b4:	0692      	lsls	r2, r2, #26
 80094b6:	d42b      	bmi.n	8009510 <_printf_common+0xb0>
 80094b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80094bc:	4641      	mov	r1, r8
 80094be:	4638      	mov	r0, r7
 80094c0:	47c8      	blx	r9
 80094c2:	3001      	adds	r0, #1
 80094c4:	d01e      	beq.n	8009504 <_printf_common+0xa4>
 80094c6:	6823      	ldr	r3, [r4, #0]
 80094c8:	6922      	ldr	r2, [r4, #16]
 80094ca:	f003 0306 	and.w	r3, r3, #6
 80094ce:	2b04      	cmp	r3, #4
 80094d0:	bf02      	ittt	eq
 80094d2:	68e5      	ldreq	r5, [r4, #12]
 80094d4:	6833      	ldreq	r3, [r6, #0]
 80094d6:	1aed      	subeq	r5, r5, r3
 80094d8:	68a3      	ldr	r3, [r4, #8]
 80094da:	bf0c      	ite	eq
 80094dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80094e0:	2500      	movne	r5, #0
 80094e2:	4293      	cmp	r3, r2
 80094e4:	bfc4      	itt	gt
 80094e6:	1a9b      	subgt	r3, r3, r2
 80094e8:	18ed      	addgt	r5, r5, r3
 80094ea:	2600      	movs	r6, #0
 80094ec:	341a      	adds	r4, #26
 80094ee:	42b5      	cmp	r5, r6
 80094f0:	d11a      	bne.n	8009528 <_printf_common+0xc8>
 80094f2:	2000      	movs	r0, #0
 80094f4:	e008      	b.n	8009508 <_printf_common+0xa8>
 80094f6:	2301      	movs	r3, #1
 80094f8:	4652      	mov	r2, sl
 80094fa:	4641      	mov	r1, r8
 80094fc:	4638      	mov	r0, r7
 80094fe:	47c8      	blx	r9
 8009500:	3001      	adds	r0, #1
 8009502:	d103      	bne.n	800950c <_printf_common+0xac>
 8009504:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800950c:	3501      	adds	r5, #1
 800950e:	e7c6      	b.n	800949e <_printf_common+0x3e>
 8009510:	18e1      	adds	r1, r4, r3
 8009512:	1c5a      	adds	r2, r3, #1
 8009514:	2030      	movs	r0, #48	@ 0x30
 8009516:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800951a:	4422      	add	r2, r4
 800951c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009520:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009524:	3302      	adds	r3, #2
 8009526:	e7c7      	b.n	80094b8 <_printf_common+0x58>
 8009528:	2301      	movs	r3, #1
 800952a:	4622      	mov	r2, r4
 800952c:	4641      	mov	r1, r8
 800952e:	4638      	mov	r0, r7
 8009530:	47c8      	blx	r9
 8009532:	3001      	adds	r0, #1
 8009534:	d0e6      	beq.n	8009504 <_printf_common+0xa4>
 8009536:	3601      	adds	r6, #1
 8009538:	e7d9      	b.n	80094ee <_printf_common+0x8e>
	...

0800953c <_printf_i>:
 800953c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009540:	7e0f      	ldrb	r7, [r1, #24]
 8009542:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009544:	2f78      	cmp	r7, #120	@ 0x78
 8009546:	4691      	mov	r9, r2
 8009548:	4680      	mov	r8, r0
 800954a:	460c      	mov	r4, r1
 800954c:	469a      	mov	sl, r3
 800954e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009552:	d807      	bhi.n	8009564 <_printf_i+0x28>
 8009554:	2f62      	cmp	r7, #98	@ 0x62
 8009556:	d80a      	bhi.n	800956e <_printf_i+0x32>
 8009558:	2f00      	cmp	r7, #0
 800955a:	f000 80d2 	beq.w	8009702 <_printf_i+0x1c6>
 800955e:	2f58      	cmp	r7, #88	@ 0x58
 8009560:	f000 80b9 	beq.w	80096d6 <_printf_i+0x19a>
 8009564:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009568:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800956c:	e03a      	b.n	80095e4 <_printf_i+0xa8>
 800956e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009572:	2b15      	cmp	r3, #21
 8009574:	d8f6      	bhi.n	8009564 <_printf_i+0x28>
 8009576:	a101      	add	r1, pc, #4	@ (adr r1, 800957c <_printf_i+0x40>)
 8009578:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800957c:	080095d5 	.word	0x080095d5
 8009580:	080095e9 	.word	0x080095e9
 8009584:	08009565 	.word	0x08009565
 8009588:	08009565 	.word	0x08009565
 800958c:	08009565 	.word	0x08009565
 8009590:	08009565 	.word	0x08009565
 8009594:	080095e9 	.word	0x080095e9
 8009598:	08009565 	.word	0x08009565
 800959c:	08009565 	.word	0x08009565
 80095a0:	08009565 	.word	0x08009565
 80095a4:	08009565 	.word	0x08009565
 80095a8:	080096e9 	.word	0x080096e9
 80095ac:	08009613 	.word	0x08009613
 80095b0:	080096a3 	.word	0x080096a3
 80095b4:	08009565 	.word	0x08009565
 80095b8:	08009565 	.word	0x08009565
 80095bc:	0800970b 	.word	0x0800970b
 80095c0:	08009565 	.word	0x08009565
 80095c4:	08009613 	.word	0x08009613
 80095c8:	08009565 	.word	0x08009565
 80095cc:	08009565 	.word	0x08009565
 80095d0:	080096ab 	.word	0x080096ab
 80095d4:	6833      	ldr	r3, [r6, #0]
 80095d6:	1d1a      	adds	r2, r3, #4
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	6032      	str	r2, [r6, #0]
 80095dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80095e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80095e4:	2301      	movs	r3, #1
 80095e6:	e09d      	b.n	8009724 <_printf_i+0x1e8>
 80095e8:	6833      	ldr	r3, [r6, #0]
 80095ea:	6820      	ldr	r0, [r4, #0]
 80095ec:	1d19      	adds	r1, r3, #4
 80095ee:	6031      	str	r1, [r6, #0]
 80095f0:	0606      	lsls	r6, r0, #24
 80095f2:	d501      	bpl.n	80095f8 <_printf_i+0xbc>
 80095f4:	681d      	ldr	r5, [r3, #0]
 80095f6:	e003      	b.n	8009600 <_printf_i+0xc4>
 80095f8:	0645      	lsls	r5, r0, #25
 80095fa:	d5fb      	bpl.n	80095f4 <_printf_i+0xb8>
 80095fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009600:	2d00      	cmp	r5, #0
 8009602:	da03      	bge.n	800960c <_printf_i+0xd0>
 8009604:	232d      	movs	r3, #45	@ 0x2d
 8009606:	426d      	negs	r5, r5
 8009608:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800960c:	4859      	ldr	r0, [pc, #356]	@ (8009774 <_printf_i+0x238>)
 800960e:	230a      	movs	r3, #10
 8009610:	e011      	b.n	8009636 <_printf_i+0xfa>
 8009612:	6821      	ldr	r1, [r4, #0]
 8009614:	6833      	ldr	r3, [r6, #0]
 8009616:	0608      	lsls	r0, r1, #24
 8009618:	f853 5b04 	ldr.w	r5, [r3], #4
 800961c:	d402      	bmi.n	8009624 <_printf_i+0xe8>
 800961e:	0649      	lsls	r1, r1, #25
 8009620:	bf48      	it	mi
 8009622:	b2ad      	uxthmi	r5, r5
 8009624:	2f6f      	cmp	r7, #111	@ 0x6f
 8009626:	4853      	ldr	r0, [pc, #332]	@ (8009774 <_printf_i+0x238>)
 8009628:	6033      	str	r3, [r6, #0]
 800962a:	bf14      	ite	ne
 800962c:	230a      	movne	r3, #10
 800962e:	2308      	moveq	r3, #8
 8009630:	2100      	movs	r1, #0
 8009632:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009636:	6866      	ldr	r6, [r4, #4]
 8009638:	60a6      	str	r6, [r4, #8]
 800963a:	2e00      	cmp	r6, #0
 800963c:	bfa2      	ittt	ge
 800963e:	6821      	ldrge	r1, [r4, #0]
 8009640:	f021 0104 	bicge.w	r1, r1, #4
 8009644:	6021      	strge	r1, [r4, #0]
 8009646:	b90d      	cbnz	r5, 800964c <_printf_i+0x110>
 8009648:	2e00      	cmp	r6, #0
 800964a:	d04b      	beq.n	80096e4 <_printf_i+0x1a8>
 800964c:	4616      	mov	r6, r2
 800964e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009652:	fb03 5711 	mls	r7, r3, r1, r5
 8009656:	5dc7      	ldrb	r7, [r0, r7]
 8009658:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800965c:	462f      	mov	r7, r5
 800965e:	42bb      	cmp	r3, r7
 8009660:	460d      	mov	r5, r1
 8009662:	d9f4      	bls.n	800964e <_printf_i+0x112>
 8009664:	2b08      	cmp	r3, #8
 8009666:	d10b      	bne.n	8009680 <_printf_i+0x144>
 8009668:	6823      	ldr	r3, [r4, #0]
 800966a:	07df      	lsls	r7, r3, #31
 800966c:	d508      	bpl.n	8009680 <_printf_i+0x144>
 800966e:	6923      	ldr	r3, [r4, #16]
 8009670:	6861      	ldr	r1, [r4, #4]
 8009672:	4299      	cmp	r1, r3
 8009674:	bfde      	ittt	le
 8009676:	2330      	movle	r3, #48	@ 0x30
 8009678:	f806 3c01 	strble.w	r3, [r6, #-1]
 800967c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009680:	1b92      	subs	r2, r2, r6
 8009682:	6122      	str	r2, [r4, #16]
 8009684:	f8cd a000 	str.w	sl, [sp]
 8009688:	464b      	mov	r3, r9
 800968a:	aa03      	add	r2, sp, #12
 800968c:	4621      	mov	r1, r4
 800968e:	4640      	mov	r0, r8
 8009690:	f7ff fee6 	bl	8009460 <_printf_common>
 8009694:	3001      	adds	r0, #1
 8009696:	d14a      	bne.n	800972e <_printf_i+0x1f2>
 8009698:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800969c:	b004      	add	sp, #16
 800969e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096a2:	6823      	ldr	r3, [r4, #0]
 80096a4:	f043 0320 	orr.w	r3, r3, #32
 80096a8:	6023      	str	r3, [r4, #0]
 80096aa:	4833      	ldr	r0, [pc, #204]	@ (8009778 <_printf_i+0x23c>)
 80096ac:	2778      	movs	r7, #120	@ 0x78
 80096ae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80096b2:	6823      	ldr	r3, [r4, #0]
 80096b4:	6831      	ldr	r1, [r6, #0]
 80096b6:	061f      	lsls	r7, r3, #24
 80096b8:	f851 5b04 	ldr.w	r5, [r1], #4
 80096bc:	d402      	bmi.n	80096c4 <_printf_i+0x188>
 80096be:	065f      	lsls	r7, r3, #25
 80096c0:	bf48      	it	mi
 80096c2:	b2ad      	uxthmi	r5, r5
 80096c4:	6031      	str	r1, [r6, #0]
 80096c6:	07d9      	lsls	r1, r3, #31
 80096c8:	bf44      	itt	mi
 80096ca:	f043 0320 	orrmi.w	r3, r3, #32
 80096ce:	6023      	strmi	r3, [r4, #0]
 80096d0:	b11d      	cbz	r5, 80096da <_printf_i+0x19e>
 80096d2:	2310      	movs	r3, #16
 80096d4:	e7ac      	b.n	8009630 <_printf_i+0xf4>
 80096d6:	4827      	ldr	r0, [pc, #156]	@ (8009774 <_printf_i+0x238>)
 80096d8:	e7e9      	b.n	80096ae <_printf_i+0x172>
 80096da:	6823      	ldr	r3, [r4, #0]
 80096dc:	f023 0320 	bic.w	r3, r3, #32
 80096e0:	6023      	str	r3, [r4, #0]
 80096e2:	e7f6      	b.n	80096d2 <_printf_i+0x196>
 80096e4:	4616      	mov	r6, r2
 80096e6:	e7bd      	b.n	8009664 <_printf_i+0x128>
 80096e8:	6833      	ldr	r3, [r6, #0]
 80096ea:	6825      	ldr	r5, [r4, #0]
 80096ec:	6961      	ldr	r1, [r4, #20]
 80096ee:	1d18      	adds	r0, r3, #4
 80096f0:	6030      	str	r0, [r6, #0]
 80096f2:	062e      	lsls	r6, r5, #24
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	d501      	bpl.n	80096fc <_printf_i+0x1c0>
 80096f8:	6019      	str	r1, [r3, #0]
 80096fa:	e002      	b.n	8009702 <_printf_i+0x1c6>
 80096fc:	0668      	lsls	r0, r5, #25
 80096fe:	d5fb      	bpl.n	80096f8 <_printf_i+0x1bc>
 8009700:	8019      	strh	r1, [r3, #0]
 8009702:	2300      	movs	r3, #0
 8009704:	6123      	str	r3, [r4, #16]
 8009706:	4616      	mov	r6, r2
 8009708:	e7bc      	b.n	8009684 <_printf_i+0x148>
 800970a:	6833      	ldr	r3, [r6, #0]
 800970c:	1d1a      	adds	r2, r3, #4
 800970e:	6032      	str	r2, [r6, #0]
 8009710:	681e      	ldr	r6, [r3, #0]
 8009712:	6862      	ldr	r2, [r4, #4]
 8009714:	2100      	movs	r1, #0
 8009716:	4630      	mov	r0, r6
 8009718:	f7f6 fd82 	bl	8000220 <memchr>
 800971c:	b108      	cbz	r0, 8009722 <_printf_i+0x1e6>
 800971e:	1b80      	subs	r0, r0, r6
 8009720:	6060      	str	r0, [r4, #4]
 8009722:	6863      	ldr	r3, [r4, #4]
 8009724:	6123      	str	r3, [r4, #16]
 8009726:	2300      	movs	r3, #0
 8009728:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800972c:	e7aa      	b.n	8009684 <_printf_i+0x148>
 800972e:	6923      	ldr	r3, [r4, #16]
 8009730:	4632      	mov	r2, r6
 8009732:	4649      	mov	r1, r9
 8009734:	4640      	mov	r0, r8
 8009736:	47d0      	blx	sl
 8009738:	3001      	adds	r0, #1
 800973a:	d0ad      	beq.n	8009698 <_printf_i+0x15c>
 800973c:	6823      	ldr	r3, [r4, #0]
 800973e:	079b      	lsls	r3, r3, #30
 8009740:	d413      	bmi.n	800976a <_printf_i+0x22e>
 8009742:	68e0      	ldr	r0, [r4, #12]
 8009744:	9b03      	ldr	r3, [sp, #12]
 8009746:	4298      	cmp	r0, r3
 8009748:	bfb8      	it	lt
 800974a:	4618      	movlt	r0, r3
 800974c:	e7a6      	b.n	800969c <_printf_i+0x160>
 800974e:	2301      	movs	r3, #1
 8009750:	4632      	mov	r2, r6
 8009752:	4649      	mov	r1, r9
 8009754:	4640      	mov	r0, r8
 8009756:	47d0      	blx	sl
 8009758:	3001      	adds	r0, #1
 800975a:	d09d      	beq.n	8009698 <_printf_i+0x15c>
 800975c:	3501      	adds	r5, #1
 800975e:	68e3      	ldr	r3, [r4, #12]
 8009760:	9903      	ldr	r1, [sp, #12]
 8009762:	1a5b      	subs	r3, r3, r1
 8009764:	42ab      	cmp	r3, r5
 8009766:	dcf2      	bgt.n	800974e <_printf_i+0x212>
 8009768:	e7eb      	b.n	8009742 <_printf_i+0x206>
 800976a:	2500      	movs	r5, #0
 800976c:	f104 0619 	add.w	r6, r4, #25
 8009770:	e7f5      	b.n	800975e <_printf_i+0x222>
 8009772:	bf00      	nop
 8009774:	0800a035 	.word	0x0800a035
 8009778:	0800a046 	.word	0x0800a046

0800977c <memmove>:
 800977c:	4288      	cmp	r0, r1
 800977e:	b510      	push	{r4, lr}
 8009780:	eb01 0402 	add.w	r4, r1, r2
 8009784:	d902      	bls.n	800978c <memmove+0x10>
 8009786:	4284      	cmp	r4, r0
 8009788:	4623      	mov	r3, r4
 800978a:	d807      	bhi.n	800979c <memmove+0x20>
 800978c:	1e43      	subs	r3, r0, #1
 800978e:	42a1      	cmp	r1, r4
 8009790:	d008      	beq.n	80097a4 <memmove+0x28>
 8009792:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009796:	f803 2f01 	strb.w	r2, [r3, #1]!
 800979a:	e7f8      	b.n	800978e <memmove+0x12>
 800979c:	4402      	add	r2, r0
 800979e:	4601      	mov	r1, r0
 80097a0:	428a      	cmp	r2, r1
 80097a2:	d100      	bne.n	80097a6 <memmove+0x2a>
 80097a4:	bd10      	pop	{r4, pc}
 80097a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80097aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80097ae:	e7f7      	b.n	80097a0 <memmove+0x24>

080097b0 <_sbrk_r>:
 80097b0:	b538      	push	{r3, r4, r5, lr}
 80097b2:	4d06      	ldr	r5, [pc, #24]	@ (80097cc <_sbrk_r+0x1c>)
 80097b4:	2300      	movs	r3, #0
 80097b6:	4604      	mov	r4, r0
 80097b8:	4608      	mov	r0, r1
 80097ba:	602b      	str	r3, [r5, #0]
 80097bc:	f7f8 fcf2 	bl	80021a4 <_sbrk>
 80097c0:	1c43      	adds	r3, r0, #1
 80097c2:	d102      	bne.n	80097ca <_sbrk_r+0x1a>
 80097c4:	682b      	ldr	r3, [r5, #0]
 80097c6:	b103      	cbz	r3, 80097ca <_sbrk_r+0x1a>
 80097c8:	6023      	str	r3, [r4, #0]
 80097ca:	bd38      	pop	{r3, r4, r5, pc}
 80097cc:	200054e8 	.word	0x200054e8

080097d0 <_realloc_r>:
 80097d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097d4:	4680      	mov	r8, r0
 80097d6:	4615      	mov	r5, r2
 80097d8:	460c      	mov	r4, r1
 80097da:	b921      	cbnz	r1, 80097e6 <_realloc_r+0x16>
 80097dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097e0:	4611      	mov	r1, r2
 80097e2:	f7ff bc59 	b.w	8009098 <_malloc_r>
 80097e6:	b92a      	cbnz	r2, 80097f4 <_realloc_r+0x24>
 80097e8:	f7ff fbea 	bl	8008fc0 <_free_r>
 80097ec:	2400      	movs	r4, #0
 80097ee:	4620      	mov	r0, r4
 80097f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097f4:	f000 f81a 	bl	800982c <_malloc_usable_size_r>
 80097f8:	4285      	cmp	r5, r0
 80097fa:	4606      	mov	r6, r0
 80097fc:	d802      	bhi.n	8009804 <_realloc_r+0x34>
 80097fe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009802:	d8f4      	bhi.n	80097ee <_realloc_r+0x1e>
 8009804:	4629      	mov	r1, r5
 8009806:	4640      	mov	r0, r8
 8009808:	f7ff fc46 	bl	8009098 <_malloc_r>
 800980c:	4607      	mov	r7, r0
 800980e:	2800      	cmp	r0, #0
 8009810:	d0ec      	beq.n	80097ec <_realloc_r+0x1c>
 8009812:	42b5      	cmp	r5, r6
 8009814:	462a      	mov	r2, r5
 8009816:	4621      	mov	r1, r4
 8009818:	bf28      	it	cs
 800981a:	4632      	movcs	r2, r6
 800981c:	f7ff fbc2 	bl	8008fa4 <memcpy>
 8009820:	4621      	mov	r1, r4
 8009822:	4640      	mov	r0, r8
 8009824:	f7ff fbcc 	bl	8008fc0 <_free_r>
 8009828:	463c      	mov	r4, r7
 800982a:	e7e0      	b.n	80097ee <_realloc_r+0x1e>

0800982c <_malloc_usable_size_r>:
 800982c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009830:	1f18      	subs	r0, r3, #4
 8009832:	2b00      	cmp	r3, #0
 8009834:	bfbc      	itt	lt
 8009836:	580b      	ldrlt	r3, [r1, r0]
 8009838:	18c0      	addlt	r0, r0, r3
 800983a:	4770      	bx	lr

0800983c <atan2>:
 800983c:	f000 b800 	b.w	8009840 <__ieee754_atan2>

08009840 <__ieee754_atan2>:
 8009840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009844:	ec57 6b11 	vmov	r6, r7, d1
 8009848:	4273      	negs	r3, r6
 800984a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 80099c8 <__ieee754_atan2+0x188>
 800984e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8009852:	4333      	orrs	r3, r6
 8009854:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009858:	4543      	cmp	r3, r8
 800985a:	ec51 0b10 	vmov	r0, r1, d0
 800985e:	4635      	mov	r5, r6
 8009860:	d809      	bhi.n	8009876 <__ieee754_atan2+0x36>
 8009862:	4244      	negs	r4, r0
 8009864:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009868:	4304      	orrs	r4, r0
 800986a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800986e:	4544      	cmp	r4, r8
 8009870:	468e      	mov	lr, r1
 8009872:	4681      	mov	r9, r0
 8009874:	d907      	bls.n	8009886 <__ieee754_atan2+0x46>
 8009876:	4632      	mov	r2, r6
 8009878:	463b      	mov	r3, r7
 800987a:	f7f6 fd27 	bl	80002cc <__adddf3>
 800987e:	ec41 0b10 	vmov	d0, r0, r1
 8009882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009886:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800988a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800988e:	4334      	orrs	r4, r6
 8009890:	d103      	bne.n	800989a <__ieee754_atan2+0x5a>
 8009892:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009896:	f000 b89b 	b.w	80099d0 <atan>
 800989a:	17bc      	asrs	r4, r7, #30
 800989c:	f004 0402 	and.w	r4, r4, #2
 80098a0:	ea53 0909 	orrs.w	r9, r3, r9
 80098a4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80098a8:	d107      	bne.n	80098ba <__ieee754_atan2+0x7a>
 80098aa:	2c02      	cmp	r4, #2
 80098ac:	d05f      	beq.n	800996e <__ieee754_atan2+0x12e>
 80098ae:	2c03      	cmp	r4, #3
 80098b0:	d1e5      	bne.n	800987e <__ieee754_atan2+0x3e>
 80098b2:	a141      	add	r1, pc, #260	@ (adr r1, 80099b8 <__ieee754_atan2+0x178>)
 80098b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098b8:	e7e1      	b.n	800987e <__ieee754_atan2+0x3e>
 80098ba:	4315      	orrs	r5, r2
 80098bc:	d106      	bne.n	80098cc <__ieee754_atan2+0x8c>
 80098be:	f1be 0f00 	cmp.w	lr, #0
 80098c2:	da5f      	bge.n	8009984 <__ieee754_atan2+0x144>
 80098c4:	a13e      	add	r1, pc, #248	@ (adr r1, 80099c0 <__ieee754_atan2+0x180>)
 80098c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098ca:	e7d8      	b.n	800987e <__ieee754_atan2+0x3e>
 80098cc:	4542      	cmp	r2, r8
 80098ce:	d10f      	bne.n	80098f0 <__ieee754_atan2+0xb0>
 80098d0:	4293      	cmp	r3, r2
 80098d2:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 80098d6:	d107      	bne.n	80098e8 <__ieee754_atan2+0xa8>
 80098d8:	2c02      	cmp	r4, #2
 80098da:	d84c      	bhi.n	8009976 <__ieee754_atan2+0x136>
 80098dc:	4b34      	ldr	r3, [pc, #208]	@ (80099b0 <__ieee754_atan2+0x170>)
 80098de:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80098e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80098e6:	e7ca      	b.n	800987e <__ieee754_atan2+0x3e>
 80098e8:	2c02      	cmp	r4, #2
 80098ea:	d848      	bhi.n	800997e <__ieee754_atan2+0x13e>
 80098ec:	4b31      	ldr	r3, [pc, #196]	@ (80099b4 <__ieee754_atan2+0x174>)
 80098ee:	e7f6      	b.n	80098de <__ieee754_atan2+0x9e>
 80098f0:	4543      	cmp	r3, r8
 80098f2:	d0e4      	beq.n	80098be <__ieee754_atan2+0x7e>
 80098f4:	1a9b      	subs	r3, r3, r2
 80098f6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 80098fa:	ea4f 5223 	mov.w	r2, r3, asr #20
 80098fe:	da1e      	bge.n	800993e <__ieee754_atan2+0xfe>
 8009900:	2f00      	cmp	r7, #0
 8009902:	da01      	bge.n	8009908 <__ieee754_atan2+0xc8>
 8009904:	323c      	adds	r2, #60	@ 0x3c
 8009906:	db1e      	blt.n	8009946 <__ieee754_atan2+0x106>
 8009908:	4632      	mov	r2, r6
 800990a:	463b      	mov	r3, r7
 800990c:	f7f6 ffbe 	bl	800088c <__aeabi_ddiv>
 8009910:	ec41 0b10 	vmov	d0, r0, r1
 8009914:	f000 f9f4 	bl	8009d00 <fabs>
 8009918:	f000 f85a 	bl	80099d0 <atan>
 800991c:	ec51 0b10 	vmov	r0, r1, d0
 8009920:	2c01      	cmp	r4, #1
 8009922:	d013      	beq.n	800994c <__ieee754_atan2+0x10c>
 8009924:	2c02      	cmp	r4, #2
 8009926:	d015      	beq.n	8009954 <__ieee754_atan2+0x114>
 8009928:	2c00      	cmp	r4, #0
 800992a:	d0a8      	beq.n	800987e <__ieee754_atan2+0x3e>
 800992c:	a318      	add	r3, pc, #96	@ (adr r3, 8009990 <__ieee754_atan2+0x150>)
 800992e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009932:	f7f6 fcc9 	bl	80002c8 <__aeabi_dsub>
 8009936:	a318      	add	r3, pc, #96	@ (adr r3, 8009998 <__ieee754_atan2+0x158>)
 8009938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800993c:	e014      	b.n	8009968 <__ieee754_atan2+0x128>
 800993e:	a118      	add	r1, pc, #96	@ (adr r1, 80099a0 <__ieee754_atan2+0x160>)
 8009940:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009944:	e7ec      	b.n	8009920 <__ieee754_atan2+0xe0>
 8009946:	2000      	movs	r0, #0
 8009948:	2100      	movs	r1, #0
 800994a:	e7e9      	b.n	8009920 <__ieee754_atan2+0xe0>
 800994c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009950:	4619      	mov	r1, r3
 8009952:	e794      	b.n	800987e <__ieee754_atan2+0x3e>
 8009954:	a30e      	add	r3, pc, #56	@ (adr r3, 8009990 <__ieee754_atan2+0x150>)
 8009956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800995a:	f7f6 fcb5 	bl	80002c8 <__aeabi_dsub>
 800995e:	4602      	mov	r2, r0
 8009960:	460b      	mov	r3, r1
 8009962:	a10d      	add	r1, pc, #52	@ (adr r1, 8009998 <__ieee754_atan2+0x158>)
 8009964:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009968:	f7f6 fcae 	bl	80002c8 <__aeabi_dsub>
 800996c:	e787      	b.n	800987e <__ieee754_atan2+0x3e>
 800996e:	a10a      	add	r1, pc, #40	@ (adr r1, 8009998 <__ieee754_atan2+0x158>)
 8009970:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009974:	e783      	b.n	800987e <__ieee754_atan2+0x3e>
 8009976:	a10c      	add	r1, pc, #48	@ (adr r1, 80099a8 <__ieee754_atan2+0x168>)
 8009978:	e9d1 0100 	ldrd	r0, r1, [r1]
 800997c:	e77f      	b.n	800987e <__ieee754_atan2+0x3e>
 800997e:	2000      	movs	r0, #0
 8009980:	2100      	movs	r1, #0
 8009982:	e77c      	b.n	800987e <__ieee754_atan2+0x3e>
 8009984:	a106      	add	r1, pc, #24	@ (adr r1, 80099a0 <__ieee754_atan2+0x160>)
 8009986:	e9d1 0100 	ldrd	r0, r1, [r1]
 800998a:	e778      	b.n	800987e <__ieee754_atan2+0x3e>
 800998c:	f3af 8000 	nop.w
 8009990:	33145c07 	.word	0x33145c07
 8009994:	3ca1a626 	.word	0x3ca1a626
 8009998:	54442d18 	.word	0x54442d18
 800999c:	400921fb 	.word	0x400921fb
 80099a0:	54442d18 	.word	0x54442d18
 80099a4:	3ff921fb 	.word	0x3ff921fb
 80099a8:	54442d18 	.word	0x54442d18
 80099ac:	3fe921fb 	.word	0x3fe921fb
 80099b0:	0800a070 	.word	0x0800a070
 80099b4:	0800a058 	.word	0x0800a058
 80099b8:	54442d18 	.word	0x54442d18
 80099bc:	c00921fb 	.word	0xc00921fb
 80099c0:	54442d18 	.word	0x54442d18
 80099c4:	bff921fb 	.word	0xbff921fb
 80099c8:	7ff00000 	.word	0x7ff00000
 80099cc:	00000000 	.word	0x00000000

080099d0 <atan>:
 80099d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099d4:	ec55 4b10 	vmov	r4, r5, d0
 80099d8:	4bbf      	ldr	r3, [pc, #764]	@ (8009cd8 <atan+0x308>)
 80099da:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80099de:	429e      	cmp	r6, r3
 80099e0:	46ab      	mov	fp, r5
 80099e2:	d918      	bls.n	8009a16 <atan+0x46>
 80099e4:	4bbd      	ldr	r3, [pc, #756]	@ (8009cdc <atan+0x30c>)
 80099e6:	429e      	cmp	r6, r3
 80099e8:	d801      	bhi.n	80099ee <atan+0x1e>
 80099ea:	d109      	bne.n	8009a00 <atan+0x30>
 80099ec:	b144      	cbz	r4, 8009a00 <atan+0x30>
 80099ee:	4622      	mov	r2, r4
 80099f0:	462b      	mov	r3, r5
 80099f2:	4620      	mov	r0, r4
 80099f4:	4629      	mov	r1, r5
 80099f6:	f7f6 fc69 	bl	80002cc <__adddf3>
 80099fa:	4604      	mov	r4, r0
 80099fc:	460d      	mov	r5, r1
 80099fe:	e006      	b.n	8009a0e <atan+0x3e>
 8009a00:	f1bb 0f00 	cmp.w	fp, #0
 8009a04:	f340 812b 	ble.w	8009c5e <atan+0x28e>
 8009a08:	a597      	add	r5, pc, #604	@ (adr r5, 8009c68 <atan+0x298>)
 8009a0a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009a0e:	ec45 4b10 	vmov	d0, r4, r5
 8009a12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a16:	4bb2      	ldr	r3, [pc, #712]	@ (8009ce0 <atan+0x310>)
 8009a18:	429e      	cmp	r6, r3
 8009a1a:	d813      	bhi.n	8009a44 <atan+0x74>
 8009a1c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8009a20:	429e      	cmp	r6, r3
 8009a22:	d80c      	bhi.n	8009a3e <atan+0x6e>
 8009a24:	a392      	add	r3, pc, #584	@ (adr r3, 8009c70 <atan+0x2a0>)
 8009a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2a:	4620      	mov	r0, r4
 8009a2c:	4629      	mov	r1, r5
 8009a2e:	f7f6 fc4d 	bl	80002cc <__adddf3>
 8009a32:	4bac      	ldr	r3, [pc, #688]	@ (8009ce4 <atan+0x314>)
 8009a34:	2200      	movs	r2, #0
 8009a36:	f7f7 f88f 	bl	8000b58 <__aeabi_dcmpgt>
 8009a3a:	2800      	cmp	r0, #0
 8009a3c:	d1e7      	bne.n	8009a0e <atan+0x3e>
 8009a3e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009a42:	e029      	b.n	8009a98 <atan+0xc8>
 8009a44:	f000 f95c 	bl	8009d00 <fabs>
 8009a48:	4ba7      	ldr	r3, [pc, #668]	@ (8009ce8 <atan+0x318>)
 8009a4a:	429e      	cmp	r6, r3
 8009a4c:	ec55 4b10 	vmov	r4, r5, d0
 8009a50:	f200 80bc 	bhi.w	8009bcc <atan+0x1fc>
 8009a54:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8009a58:	429e      	cmp	r6, r3
 8009a5a:	f200 809e 	bhi.w	8009b9a <atan+0x1ca>
 8009a5e:	4622      	mov	r2, r4
 8009a60:	462b      	mov	r3, r5
 8009a62:	4620      	mov	r0, r4
 8009a64:	4629      	mov	r1, r5
 8009a66:	f7f6 fc31 	bl	80002cc <__adddf3>
 8009a6a:	4b9e      	ldr	r3, [pc, #632]	@ (8009ce4 <atan+0x314>)
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	f7f6 fc2b 	bl	80002c8 <__aeabi_dsub>
 8009a72:	2200      	movs	r2, #0
 8009a74:	4606      	mov	r6, r0
 8009a76:	460f      	mov	r7, r1
 8009a78:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009a7c:	4620      	mov	r0, r4
 8009a7e:	4629      	mov	r1, r5
 8009a80:	f7f6 fc24 	bl	80002cc <__adddf3>
 8009a84:	4602      	mov	r2, r0
 8009a86:	460b      	mov	r3, r1
 8009a88:	4630      	mov	r0, r6
 8009a8a:	4639      	mov	r1, r7
 8009a8c:	f7f6 fefe 	bl	800088c <__aeabi_ddiv>
 8009a90:	f04f 0a00 	mov.w	sl, #0
 8009a94:	4604      	mov	r4, r0
 8009a96:	460d      	mov	r5, r1
 8009a98:	4622      	mov	r2, r4
 8009a9a:	462b      	mov	r3, r5
 8009a9c:	4620      	mov	r0, r4
 8009a9e:	4629      	mov	r1, r5
 8009aa0:	f7f6 fdca 	bl	8000638 <__aeabi_dmul>
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	4680      	mov	r8, r0
 8009aaa:	4689      	mov	r9, r1
 8009aac:	f7f6 fdc4 	bl	8000638 <__aeabi_dmul>
 8009ab0:	a371      	add	r3, pc, #452	@ (adr r3, 8009c78 <atan+0x2a8>)
 8009ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab6:	4606      	mov	r6, r0
 8009ab8:	460f      	mov	r7, r1
 8009aba:	f7f6 fdbd 	bl	8000638 <__aeabi_dmul>
 8009abe:	a370      	add	r3, pc, #448	@ (adr r3, 8009c80 <atan+0x2b0>)
 8009ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac4:	f7f6 fc02 	bl	80002cc <__adddf3>
 8009ac8:	4632      	mov	r2, r6
 8009aca:	463b      	mov	r3, r7
 8009acc:	f7f6 fdb4 	bl	8000638 <__aeabi_dmul>
 8009ad0:	a36d      	add	r3, pc, #436	@ (adr r3, 8009c88 <atan+0x2b8>)
 8009ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad6:	f7f6 fbf9 	bl	80002cc <__adddf3>
 8009ada:	4632      	mov	r2, r6
 8009adc:	463b      	mov	r3, r7
 8009ade:	f7f6 fdab 	bl	8000638 <__aeabi_dmul>
 8009ae2:	a36b      	add	r3, pc, #428	@ (adr r3, 8009c90 <atan+0x2c0>)
 8009ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae8:	f7f6 fbf0 	bl	80002cc <__adddf3>
 8009aec:	4632      	mov	r2, r6
 8009aee:	463b      	mov	r3, r7
 8009af0:	f7f6 fda2 	bl	8000638 <__aeabi_dmul>
 8009af4:	a368      	add	r3, pc, #416	@ (adr r3, 8009c98 <atan+0x2c8>)
 8009af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009afa:	f7f6 fbe7 	bl	80002cc <__adddf3>
 8009afe:	4632      	mov	r2, r6
 8009b00:	463b      	mov	r3, r7
 8009b02:	f7f6 fd99 	bl	8000638 <__aeabi_dmul>
 8009b06:	a366      	add	r3, pc, #408	@ (adr r3, 8009ca0 <atan+0x2d0>)
 8009b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b0c:	f7f6 fbde 	bl	80002cc <__adddf3>
 8009b10:	4642      	mov	r2, r8
 8009b12:	464b      	mov	r3, r9
 8009b14:	f7f6 fd90 	bl	8000638 <__aeabi_dmul>
 8009b18:	a363      	add	r3, pc, #396	@ (adr r3, 8009ca8 <atan+0x2d8>)
 8009b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b1e:	4680      	mov	r8, r0
 8009b20:	4689      	mov	r9, r1
 8009b22:	4630      	mov	r0, r6
 8009b24:	4639      	mov	r1, r7
 8009b26:	f7f6 fd87 	bl	8000638 <__aeabi_dmul>
 8009b2a:	a361      	add	r3, pc, #388	@ (adr r3, 8009cb0 <atan+0x2e0>)
 8009b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b30:	f7f6 fbca 	bl	80002c8 <__aeabi_dsub>
 8009b34:	4632      	mov	r2, r6
 8009b36:	463b      	mov	r3, r7
 8009b38:	f7f6 fd7e 	bl	8000638 <__aeabi_dmul>
 8009b3c:	a35e      	add	r3, pc, #376	@ (adr r3, 8009cb8 <atan+0x2e8>)
 8009b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b42:	f7f6 fbc1 	bl	80002c8 <__aeabi_dsub>
 8009b46:	4632      	mov	r2, r6
 8009b48:	463b      	mov	r3, r7
 8009b4a:	f7f6 fd75 	bl	8000638 <__aeabi_dmul>
 8009b4e:	a35c      	add	r3, pc, #368	@ (adr r3, 8009cc0 <atan+0x2f0>)
 8009b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b54:	f7f6 fbb8 	bl	80002c8 <__aeabi_dsub>
 8009b58:	4632      	mov	r2, r6
 8009b5a:	463b      	mov	r3, r7
 8009b5c:	f7f6 fd6c 	bl	8000638 <__aeabi_dmul>
 8009b60:	a359      	add	r3, pc, #356	@ (adr r3, 8009cc8 <atan+0x2f8>)
 8009b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b66:	f7f6 fbaf 	bl	80002c8 <__aeabi_dsub>
 8009b6a:	4632      	mov	r2, r6
 8009b6c:	463b      	mov	r3, r7
 8009b6e:	f7f6 fd63 	bl	8000638 <__aeabi_dmul>
 8009b72:	4602      	mov	r2, r0
 8009b74:	460b      	mov	r3, r1
 8009b76:	4640      	mov	r0, r8
 8009b78:	4649      	mov	r1, r9
 8009b7a:	f7f6 fba7 	bl	80002cc <__adddf3>
 8009b7e:	4622      	mov	r2, r4
 8009b80:	462b      	mov	r3, r5
 8009b82:	f7f6 fd59 	bl	8000638 <__aeabi_dmul>
 8009b86:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 8009b8a:	4602      	mov	r2, r0
 8009b8c:	460b      	mov	r3, r1
 8009b8e:	d148      	bne.n	8009c22 <atan+0x252>
 8009b90:	4620      	mov	r0, r4
 8009b92:	4629      	mov	r1, r5
 8009b94:	f7f6 fb98 	bl	80002c8 <__aeabi_dsub>
 8009b98:	e72f      	b.n	80099fa <atan+0x2a>
 8009b9a:	4b52      	ldr	r3, [pc, #328]	@ (8009ce4 <atan+0x314>)
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	4620      	mov	r0, r4
 8009ba0:	4629      	mov	r1, r5
 8009ba2:	f7f6 fb91 	bl	80002c8 <__aeabi_dsub>
 8009ba6:	4b4f      	ldr	r3, [pc, #316]	@ (8009ce4 <atan+0x314>)
 8009ba8:	4606      	mov	r6, r0
 8009baa:	460f      	mov	r7, r1
 8009bac:	2200      	movs	r2, #0
 8009bae:	4620      	mov	r0, r4
 8009bb0:	4629      	mov	r1, r5
 8009bb2:	f7f6 fb8b 	bl	80002cc <__adddf3>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	460b      	mov	r3, r1
 8009bba:	4630      	mov	r0, r6
 8009bbc:	4639      	mov	r1, r7
 8009bbe:	f7f6 fe65 	bl	800088c <__aeabi_ddiv>
 8009bc2:	f04f 0a01 	mov.w	sl, #1
 8009bc6:	4604      	mov	r4, r0
 8009bc8:	460d      	mov	r5, r1
 8009bca:	e765      	b.n	8009a98 <atan+0xc8>
 8009bcc:	4b47      	ldr	r3, [pc, #284]	@ (8009cec <atan+0x31c>)
 8009bce:	429e      	cmp	r6, r3
 8009bd0:	d21c      	bcs.n	8009c0c <atan+0x23c>
 8009bd2:	4b47      	ldr	r3, [pc, #284]	@ (8009cf0 <atan+0x320>)
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	4620      	mov	r0, r4
 8009bd8:	4629      	mov	r1, r5
 8009bda:	f7f6 fb75 	bl	80002c8 <__aeabi_dsub>
 8009bde:	4b44      	ldr	r3, [pc, #272]	@ (8009cf0 <atan+0x320>)
 8009be0:	4606      	mov	r6, r0
 8009be2:	460f      	mov	r7, r1
 8009be4:	2200      	movs	r2, #0
 8009be6:	4620      	mov	r0, r4
 8009be8:	4629      	mov	r1, r5
 8009bea:	f7f6 fd25 	bl	8000638 <__aeabi_dmul>
 8009bee:	4b3d      	ldr	r3, [pc, #244]	@ (8009ce4 <atan+0x314>)
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	f7f6 fb6b 	bl	80002cc <__adddf3>
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	460b      	mov	r3, r1
 8009bfa:	4630      	mov	r0, r6
 8009bfc:	4639      	mov	r1, r7
 8009bfe:	f7f6 fe45 	bl	800088c <__aeabi_ddiv>
 8009c02:	f04f 0a02 	mov.w	sl, #2
 8009c06:	4604      	mov	r4, r0
 8009c08:	460d      	mov	r5, r1
 8009c0a:	e745      	b.n	8009a98 <atan+0xc8>
 8009c0c:	4622      	mov	r2, r4
 8009c0e:	462b      	mov	r3, r5
 8009c10:	4938      	ldr	r1, [pc, #224]	@ (8009cf4 <atan+0x324>)
 8009c12:	2000      	movs	r0, #0
 8009c14:	f7f6 fe3a 	bl	800088c <__aeabi_ddiv>
 8009c18:	f04f 0a03 	mov.w	sl, #3
 8009c1c:	4604      	mov	r4, r0
 8009c1e:	460d      	mov	r5, r1
 8009c20:	e73a      	b.n	8009a98 <atan+0xc8>
 8009c22:	4b35      	ldr	r3, [pc, #212]	@ (8009cf8 <atan+0x328>)
 8009c24:	4e35      	ldr	r6, [pc, #212]	@ (8009cfc <atan+0x32c>)
 8009c26:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c2e:	f7f6 fb4b 	bl	80002c8 <__aeabi_dsub>
 8009c32:	4622      	mov	r2, r4
 8009c34:	462b      	mov	r3, r5
 8009c36:	f7f6 fb47 	bl	80002c8 <__aeabi_dsub>
 8009c3a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009c3e:	4602      	mov	r2, r0
 8009c40:	460b      	mov	r3, r1
 8009c42:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009c46:	f7f6 fb3f 	bl	80002c8 <__aeabi_dsub>
 8009c4a:	f1bb 0f00 	cmp.w	fp, #0
 8009c4e:	4604      	mov	r4, r0
 8009c50:	460d      	mov	r5, r1
 8009c52:	f6bf aedc 	bge.w	8009a0e <atan+0x3e>
 8009c56:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009c5a:	461d      	mov	r5, r3
 8009c5c:	e6d7      	b.n	8009a0e <atan+0x3e>
 8009c5e:	a51c      	add	r5, pc, #112	@ (adr r5, 8009cd0 <atan+0x300>)
 8009c60:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009c64:	e6d3      	b.n	8009a0e <atan+0x3e>
 8009c66:	bf00      	nop
 8009c68:	54442d18 	.word	0x54442d18
 8009c6c:	3ff921fb 	.word	0x3ff921fb
 8009c70:	8800759c 	.word	0x8800759c
 8009c74:	7e37e43c 	.word	0x7e37e43c
 8009c78:	e322da11 	.word	0xe322da11
 8009c7c:	3f90ad3a 	.word	0x3f90ad3a
 8009c80:	24760deb 	.word	0x24760deb
 8009c84:	3fa97b4b 	.word	0x3fa97b4b
 8009c88:	a0d03d51 	.word	0xa0d03d51
 8009c8c:	3fb10d66 	.word	0x3fb10d66
 8009c90:	c54c206e 	.word	0xc54c206e
 8009c94:	3fb745cd 	.word	0x3fb745cd
 8009c98:	920083ff 	.word	0x920083ff
 8009c9c:	3fc24924 	.word	0x3fc24924
 8009ca0:	5555550d 	.word	0x5555550d
 8009ca4:	3fd55555 	.word	0x3fd55555
 8009ca8:	2c6a6c2f 	.word	0x2c6a6c2f
 8009cac:	bfa2b444 	.word	0xbfa2b444
 8009cb0:	52defd9a 	.word	0x52defd9a
 8009cb4:	3fadde2d 	.word	0x3fadde2d
 8009cb8:	af749a6d 	.word	0xaf749a6d
 8009cbc:	3fb3b0f2 	.word	0x3fb3b0f2
 8009cc0:	fe231671 	.word	0xfe231671
 8009cc4:	3fbc71c6 	.word	0x3fbc71c6
 8009cc8:	9998ebc4 	.word	0x9998ebc4
 8009ccc:	3fc99999 	.word	0x3fc99999
 8009cd0:	54442d18 	.word	0x54442d18
 8009cd4:	bff921fb 	.word	0xbff921fb
 8009cd8:	440fffff 	.word	0x440fffff
 8009cdc:	7ff00000 	.word	0x7ff00000
 8009ce0:	3fdbffff 	.word	0x3fdbffff
 8009ce4:	3ff00000 	.word	0x3ff00000
 8009ce8:	3ff2ffff 	.word	0x3ff2ffff
 8009cec:	40038000 	.word	0x40038000
 8009cf0:	3ff80000 	.word	0x3ff80000
 8009cf4:	bff00000 	.word	0xbff00000
 8009cf8:	0800a088 	.word	0x0800a088
 8009cfc:	0800a0a8 	.word	0x0800a0a8

08009d00 <fabs>:
 8009d00:	ec51 0b10 	vmov	r0, r1, d0
 8009d04:	4602      	mov	r2, r0
 8009d06:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009d0a:	ec43 2b10 	vmov	d0, r2, r3
 8009d0e:	4770      	bx	lr

08009d10 <_init>:
 8009d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d12:	bf00      	nop
 8009d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d16:	bc08      	pop	{r3}
 8009d18:	469e      	mov	lr, r3
 8009d1a:	4770      	bx	lr

08009d1c <_fini>:
 8009d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d1e:	bf00      	nop
 8009d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d22:	bc08      	pop	{r3}
 8009d24:	469e      	mov	lr, r3
 8009d26:	4770      	bx	lr
