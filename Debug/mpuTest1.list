
mpuTest1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fb8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  08005188  08005188  00006188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005328  08005328  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  08005328  08005328  00006328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005330  08005330  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005330  08005330  00006330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005334  08005334  00006334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005338  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a50  20000060  08005398  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ab0  08005398  00007ab0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000102bf  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000216d  00000000  00000000  0001734f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f30  00000000  00000000  000194c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c07  00000000  00000000  0001a3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022925  00000000  00000000  0001aff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012d4a  00000000  00000000  0003d91c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3700  00000000  00000000  00050666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00123d66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000460c  00000000  00000000  00123dac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  001283b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005170 	.word	0x08005170

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08005170 	.word	0x08005170

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <myComfyPrint>:

extern UART_HandleTypeDef huart2;

uint8_t buff[2048] = { 0 };

void myComfyPrint(const char* string){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	strncpy((char*) buff, string, sizeof(buff));
 80005b8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80005bc:	6879      	ldr	r1, [r7, #4]
 80005be:	4809      	ldr	r0, [pc, #36]	@ (80005e4 <myComfyPrint+0x34>)
 80005c0:	f004 f94a 	bl	8004858 <strncpy>
	HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 80005c4:	4807      	ldr	r0, [pc, #28]	@ (80005e4 <myComfyPrint+0x34>)
 80005c6:	f7ff fe23 	bl	8000210 <strlen>
 80005ca:	4603      	mov	r3, r0
 80005cc:	b29a      	uxth	r2, r3
 80005ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005d2:	4904      	ldr	r1, [pc, #16]	@ (80005e4 <myComfyPrint+0x34>)
 80005d4:	4804      	ldr	r0, [pc, #16]	@ (80005e8 <myComfyPrint+0x38>)
 80005d6:	f003 fd5b 	bl	8004090 <HAL_UART_Transmit>
}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	2000007c 	.word	0x2000007c
 80005e8:	20000918 	.word	0x20000918

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	f6ad 0d18 	subw	sp, sp, #2072	@ 0x818
 80005f2:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f4:	f000 fdc0 	bl	8001178 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f8:	f000 f852 	bl	80006a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fc:	f000 f97a 	bl	80008f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000600:	f000 f94e 	bl	80008a0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000604:	f000 f8ba 	bl	800077c <MX_I2C1_Init>
  MX_TIM3_Init();
 8000608:	f000 f8e6 	bl	80007d8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  //initialize mpu6050
  mpu6050_init();
 800060c:	f000 fa34 	bl	8000a78 <mpu6050_init>

  //initialize motors
  motor_init();
 8000610:	f000 f9e6 	bl	80009e0 <motor_init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //read values from mpu6050
	  mpu6050_values_t mpu_values;
	  mpu6050_read(&mpu_values);
 8000614:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8000618:	4618      	mov	r0, r3
 800061a:	f000 fb79 	bl	8000d10 <mpu6050_read>

	  char myString[2048];
	  int string_length = sprintf((char*) myString, /*sizeof(buff),*/ "Acceleration X = %d\r\nAcceleration Y = %d\r\nAcceleration Z = %d\r\n", mpu_values.acc_x, mpu_values.acc_y, mpu_values.acc_z);
 800061e:	f9b7 3806 	ldrsh.w	r3, [r7, #2054]	@ 0x806
 8000622:	461a      	mov	r2, r3
 8000624:	f9b7 3808 	ldrsh.w	r3, [r7, #2056]	@ 0x808
 8000628:	4619      	mov	r1, r3
 800062a:	f9b7 380a 	ldrsh.w	r3, [r7, #2058]	@ 0x80a
 800062e:	4638      	mov	r0, r7
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	460b      	mov	r3, r1
 8000634:	4918      	ldr	r1, [pc, #96]	@ (8000698 <main+0xac>)
 8000636:	f004 f8e7 	bl	8004808 <siprintf>
 800063a:	f8c7 080c 	str.w	r0, [r7, #2060]	@ 0x80c
	  //HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
	  myComfyPrint(myString);
 800063e:	463b      	mov	r3, r7
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff ffb5 	bl	80005b0 <myComfyPrint>


	  static uint16_t asdf = 2000;
	  motor_control(MOTOR_DIR_FORWARDS, asdf);
 8000646:	4b15      	ldr	r3, [pc, #84]	@ (800069c <main+0xb0>)
 8000648:	881b      	ldrh	r3, [r3, #0]
 800064a:	4619      	mov	r1, r3
 800064c:	2000      	movs	r0, #0
 800064e:	f000 f9d5 	bl	80009fc <motor_control>
	  HAL_Delay(1000);
 8000652:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000656:	f000 fe01 	bl	800125c <HAL_Delay>
	  motor_control(MOTOR_DIR_BACKWARDS, asdf);
 800065a:	4b10      	ldr	r3, [pc, #64]	@ (800069c <main+0xb0>)
 800065c:	881b      	ldrh	r3, [r3, #0]
 800065e:	4619      	mov	r1, r3
 8000660:	2001      	movs	r0, #1
 8000662:	f000 f9cb 	bl	80009fc <motor_control>
	  HAL_Delay(1000);
 8000666:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800066a:	f000 fdf7 	bl	800125c <HAL_Delay>
	  motor_control(7, asdf);
 800066e:	4b0b      	ldr	r3, [pc, #44]	@ (800069c <main+0xb0>)
 8000670:	881b      	ldrh	r3, [r3, #0]
 8000672:	4619      	mov	r1, r3
 8000674:	2007      	movs	r0, #7
 8000676:	f000 f9c1 	bl	80009fc <motor_control>
	  HAL_Delay(1000);
 800067a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800067e:	f000 fded 	bl	800125c <HAL_Delay>
	  motor_control(MOTOR_DIR_FORWARDS, 50000);
 8000682:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8000686:	2000      	movs	r0, #0
 8000688:	f000 f9b8 	bl	80009fc <motor_control>
	  //asdf = (asdf + 100) % MOTOR_MAX_SPEED;

	  //HAL_GPIO_TogglePin(MOTOR2_DIR_GPIO_Port, MOTOR2_DIR_Pin);
	  //HAL_GPIO_TogglePin(MOTOR3_DIR_GPIO_Port, MOTOR3_DIR_Pin);

	  HAL_Delay(100);
 800068c:	2064      	movs	r0, #100	@ 0x64
 800068e:	f000 fde5 	bl	800125c <HAL_Delay>
  {
 8000692:	bf00      	nop
 8000694:	e7be      	b.n	8000614 <main+0x28>
 8000696:	bf00      	nop
 8000698:	08005188 	.word	0x08005188
 800069c:	20000000 	.word	0x20000000

080006a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b094      	sub	sp, #80	@ 0x50
 80006a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a6:	f107 031c 	add.w	r3, r7, #28
 80006aa:	2234      	movs	r2, #52	@ 0x34
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f004 f8ca 	bl	8004848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b4:	f107 0308 	add.w	r3, r7, #8
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c4:	2300      	movs	r3, #0
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	4b2a      	ldr	r3, [pc, #168]	@ (8000774 <SystemClock_Config+0xd4>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006cc:	4a29      	ldr	r2, [pc, #164]	@ (8000774 <SystemClock_Config+0xd4>)
 80006ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006d4:	4b27      	ldr	r3, [pc, #156]	@ (8000774 <SystemClock_Config+0xd4>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006e0:	2300      	movs	r3, #0
 80006e2:	603b      	str	r3, [r7, #0]
 80006e4:	4b24      	ldr	r3, [pc, #144]	@ (8000778 <SystemClock_Config+0xd8>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006ec:	4a22      	ldr	r2, [pc, #136]	@ (8000778 <SystemClock_Config+0xd8>)
 80006ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006f2:	6013      	str	r3, [r2, #0]
 80006f4:	4b20      	ldr	r3, [pc, #128]	@ (8000778 <SystemClock_Config+0xd8>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006fc:	603b      	str	r3, [r7, #0]
 80006fe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000700:	2302      	movs	r3, #2
 8000702:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000704:	2301      	movs	r3, #1
 8000706:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000708:	2310      	movs	r3, #16
 800070a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070c:	2302      	movs	r3, #2
 800070e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000710:	2300      	movs	r3, #0
 8000712:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000714:	2310      	movs	r3, #16
 8000716:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000718:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800071c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800071e:	2304      	movs	r3, #4
 8000720:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000722:	2302      	movs	r3, #2
 8000724:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000726:	2302      	movs	r3, #2
 8000728:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	4618      	mov	r0, r3
 8000730:	f002 fce8 	bl	8003104 <HAL_RCC_OscConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800073a:	f000 f94b 	bl	80009d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073e:	230f      	movs	r3, #15
 8000740:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000742:	2302      	movs	r3, #2
 8000744:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800074a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800074e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000754:	f107 0308 	add.w	r3, r7, #8
 8000758:	2102      	movs	r1, #2
 800075a:	4618      	mov	r0, r3
 800075c:	f002 f988 	bl	8002a70 <HAL_RCC_ClockConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000766:	f000 f935 	bl	80009d4 <Error_Handler>
  }
}
 800076a:	bf00      	nop
 800076c:	3750      	adds	r7, #80	@ 0x50
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800
 8000778:	40007000 	.word	0x40007000

0800077c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000780:	4b12      	ldr	r3, [pc, #72]	@ (80007cc <MX_I2C1_Init+0x50>)
 8000782:	4a13      	ldr	r2, [pc, #76]	@ (80007d0 <MX_I2C1_Init+0x54>)
 8000784:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000786:	4b11      	ldr	r3, [pc, #68]	@ (80007cc <MX_I2C1_Init+0x50>)
 8000788:	4a12      	ldr	r2, [pc, #72]	@ (80007d4 <MX_I2C1_Init+0x58>)
 800078a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800078c:	4b0f      	ldr	r3, [pc, #60]	@ (80007cc <MX_I2C1_Init+0x50>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000792:	4b0e      	ldr	r3, [pc, #56]	@ (80007cc <MX_I2C1_Init+0x50>)
 8000794:	2200      	movs	r2, #0
 8000796:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000798:	4b0c      	ldr	r3, [pc, #48]	@ (80007cc <MX_I2C1_Init+0x50>)
 800079a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800079e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a0:	4b0a      	ldr	r3, [pc, #40]	@ (80007cc <MX_I2C1_Init+0x50>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007a6:	4b09      	ldr	r3, [pc, #36]	@ (80007cc <MX_I2C1_Init+0x50>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ac:	4b07      	ldr	r3, [pc, #28]	@ (80007cc <MX_I2C1_Init+0x50>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007b2:	4b06      	ldr	r3, [pc, #24]	@ (80007cc <MX_I2C1_Init+0x50>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007b8:	4804      	ldr	r0, [pc, #16]	@ (80007cc <MX_I2C1_Init+0x50>)
 80007ba:	f001 f807 	bl	80017cc <HAL_I2C_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007c4:	f000 f906 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	2000087c 	.word	0x2000087c
 80007d0:	40005400 	.word	0x40005400
 80007d4:	000186a0 	.word	0x000186a0

080007d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08a      	sub	sp, #40	@ 0x28
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007de:	f107 0320 	add.w	r3, r7, #32
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007e8:	1d3b      	adds	r3, r7, #4
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	611a      	str	r2, [r3, #16]
 80007f6:	615a      	str	r2, [r3, #20]
 80007f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007fa:	4b27      	ldr	r3, [pc, #156]	@ (8000898 <MX_TIM3_Init+0xc0>)
 80007fc:	4a27      	ldr	r2, [pc, #156]	@ (800089c <MX_TIM3_Init+0xc4>)
 80007fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000800:	4b25      	ldr	r3, [pc, #148]	@ (8000898 <MX_TIM3_Init+0xc0>)
 8000802:	2200      	movs	r2, #0
 8000804:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000806:	4b24      	ldr	r3, [pc, #144]	@ (8000898 <MX_TIM3_Init+0xc0>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8400-1;
 800080c:	4b22      	ldr	r3, [pc, #136]	@ (8000898 <MX_TIM3_Init+0xc0>)
 800080e:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000812:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000814:	4b20      	ldr	r3, [pc, #128]	@ (8000898 <MX_TIM3_Init+0xc0>)
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800081a:	4b1f      	ldr	r3, [pc, #124]	@ (8000898 <MX_TIM3_Init+0xc0>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000820:	481d      	ldr	r0, [pc, #116]	@ (8000898 <MX_TIM3_Init+0xc0>)
 8000822:	f002 ff0d 	bl	8003640 <HAL_TIM_PWM_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800082c:	f000 f8d2 	bl	80009d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000830:	2300      	movs	r3, #0
 8000832:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000834:	2300      	movs	r3, #0
 8000836:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000838:	f107 0320 	add.w	r3, r7, #32
 800083c:	4619      	mov	r1, r3
 800083e:	4816      	ldr	r0, [pc, #88]	@ (8000898 <MX_TIM3_Init+0xc0>)
 8000840:	f003 fb5a 	bl	8003ef8 <HAL_TIMEx_MasterConfigSynchronization>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800084a:	f000 f8c3 	bl	80009d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800084e:	2360      	movs	r3, #96	@ 0x60
 8000850:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	2200      	movs	r2, #0
 8000862:	4619      	mov	r1, r3
 8000864:	480c      	ldr	r0, [pc, #48]	@ (8000898 <MX_TIM3_Init+0xc0>)
 8000866:	f003 f803 	bl	8003870 <HAL_TIM_PWM_ConfigChannel>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000870:	f000 f8b0 	bl	80009d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	2204      	movs	r2, #4
 8000878:	4619      	mov	r1, r3
 800087a:	4807      	ldr	r0, [pc, #28]	@ (8000898 <MX_TIM3_Init+0xc0>)
 800087c:	f002 fff8 	bl	8003870 <HAL_TIM_PWM_ConfigChannel>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000886:	f000 f8a5 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800088a:	4803      	ldr	r0, [pc, #12]	@ (8000898 <MX_TIM3_Init+0xc0>)
 800088c:	f000 fb30 	bl	8000ef0 <HAL_TIM_MspPostInit>

}
 8000890:	bf00      	nop
 8000892:	3728      	adds	r7, #40	@ 0x28
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	200008d0 	.word	0x200008d0
 800089c:	40000400 	.word	0x40000400

080008a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008a4:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <MX_USART2_UART_Init+0x4c>)
 80008a6:	4a12      	ldr	r2, [pc, #72]	@ (80008f0 <MX_USART2_UART_Init+0x50>)
 80008a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008aa:	4b10      	ldr	r3, [pc, #64]	@ (80008ec <MX_USART2_UART_Init+0x4c>)
 80008ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008b2:	4b0e      	ldr	r3, [pc, #56]	@ (80008ec <MX_USART2_UART_Init+0x4c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	@ (80008ec <MX_USART2_UART_Init+0x4c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008be:	4b0b      	ldr	r3, [pc, #44]	@ (80008ec <MX_USART2_UART_Init+0x4c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008c4:	4b09      	ldr	r3, [pc, #36]	@ (80008ec <MX_USART2_UART_Init+0x4c>)
 80008c6:	220c      	movs	r2, #12
 80008c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ca:	4b08      	ldr	r3, [pc, #32]	@ (80008ec <MX_USART2_UART_Init+0x4c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d0:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <MX_USART2_UART_Init+0x4c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008d6:	4805      	ldr	r0, [pc, #20]	@ (80008ec <MX_USART2_UART_Init+0x4c>)
 80008d8:	f003 fb8a 	bl	8003ff0 <HAL_UART_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008e2:	f000 f877 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000918 	.word	0x20000918
 80008f0:	40004400 	.word	0x40004400

080008f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08a      	sub	sp, #40	@ 0x28
 80008f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fa:	f107 0314 	add.w	r3, r7, #20
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]
 8000906:	60da      	str	r2, [r3, #12]
 8000908:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
 800090e:	4b2e      	ldr	r3, [pc, #184]	@ (80009c8 <MX_GPIO_Init+0xd4>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	4a2d      	ldr	r2, [pc, #180]	@ (80009c8 <MX_GPIO_Init+0xd4>)
 8000914:	f043 0304 	orr.w	r3, r3, #4
 8000918:	6313      	str	r3, [r2, #48]	@ 0x30
 800091a:	4b2b      	ldr	r3, [pc, #172]	@ (80009c8 <MX_GPIO_Init+0xd4>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	f003 0304 	and.w	r3, r3, #4
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	4b27      	ldr	r3, [pc, #156]	@ (80009c8 <MX_GPIO_Init+0xd4>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	4a26      	ldr	r2, [pc, #152]	@ (80009c8 <MX_GPIO_Init+0xd4>)
 8000930:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000934:	6313      	str	r3, [r2, #48]	@ 0x30
 8000936:	4b24      	ldr	r3, [pc, #144]	@ (80009c8 <MX_GPIO_Init+0xd4>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	4b20      	ldr	r3, [pc, #128]	@ (80009c8 <MX_GPIO_Init+0xd4>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	4a1f      	ldr	r2, [pc, #124]	@ (80009c8 <MX_GPIO_Init+0xd4>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	6313      	str	r3, [r2, #48]	@ 0x30
 8000952:	4b1d      	ldr	r3, [pc, #116]	@ (80009c8 <MX_GPIO_Init+0xd4>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	4b19      	ldr	r3, [pc, #100]	@ (80009c8 <MX_GPIO_Init+0xd4>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	4a18      	ldr	r2, [pc, #96]	@ (80009c8 <MX_GPIO_Init+0xd4>)
 8000968:	f043 0302 	orr.w	r3, r3, #2
 800096c:	6313      	str	r3, [r2, #48]	@ 0x30
 800096e:	4b16      	ldr	r3, [pc, #88]	@ (80009c8 <MX_GPIO_Init+0xd4>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	f003 0302 	and.w	r3, r3, #2
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|MOTOR2_DIR_Pin|MOTOR3_DIR_Pin, GPIO_PIN_RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8000980:	4812      	ldr	r0, [pc, #72]	@ (80009cc <MX_GPIO_Init+0xd8>)
 8000982:	f000 ff09 	bl	8001798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000986:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800098a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800098c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000990:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	4619      	mov	r1, r3
 800099c:	480c      	ldr	r0, [pc, #48]	@ (80009d0 <MX_GPIO_Init+0xdc>)
 800099e:	f000 fd67 	bl	8001470 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin MOTOR2_DIR_Pin MOTOR3_DIR_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|MOTOR2_DIR_Pin|MOTOR3_DIR_Pin;
 80009a2:	f44f 7318 	mov.w	r3, #608	@ 0x260
 80009a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a8:	2301      	movs	r3, #1
 80009aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2300      	movs	r3, #0
 80009b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	4619      	mov	r1, r3
 80009ba:	4804      	ldr	r0, [pc, #16]	@ (80009cc <MX_GPIO_Init+0xd8>)
 80009bc:	f000 fd58 	bl	8001470 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009c0:	bf00      	nop
 80009c2:	3728      	adds	r7, #40	@ 0x28
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40020000 	.word	0x40020000
 80009d0:	40020800 	.word	0x40020800

080009d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d8:	b672      	cpsid	i
}
 80009da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <Error_Handler+0x8>

080009e0 <motor_init>:


extern TIM_HandleTypeDef htim3;


void motor_init(){
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	//initialize PWM
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80009e4:	2100      	movs	r1, #0
 80009e6:	4804      	ldr	r0, [pc, #16]	@ (80009f8 <motor_init+0x18>)
 80009e8:	f002 fe7a 	bl	80036e0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80009ec:	2104      	movs	r1, #4
 80009ee:	4802      	ldr	r0, [pc, #8]	@ (80009f8 <motor_init+0x18>)
 80009f0:	f002 fe76 	bl	80036e0 <HAL_TIM_PWM_Start>
}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	200008d0 	.word	0x200008d0

080009fc <motor_control>:

void motor_control(uint8_t direction, uint16_t speed){
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	460a      	mov	r2, r1
 8000a06:	71fb      	strb	r3, [r7, #7]
 8000a08:	4613      	mov	r3, r2
 8000a0a:	80bb      	strh	r3, [r7, #4]
  //direction 0=forward, 1=backward, everything else leaves the current direction
  //speed 0=off, 255=max

  //Error Handling
  if(speed<0) speed=0;
  if(speed>MOTOR_MAX_SPEED) speed=MOTOR_MAX_SPEED;
 8000a0c:	88bb      	ldrh	r3, [r7, #4]
 8000a0e:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d902      	bls.n	8000a1c <motor_control+0x20>
 8000a16:	f242 03cf 	movw	r3, #8399	@ 0x20cf
 8000a1a:	80bb      	strh	r3, [r7, #4]

  //set motor direction
  switch(direction){
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d002      	beq.n	8000a28 <motor_control+0x2c>
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d00c      	beq.n	8000a40 <motor_control+0x44>
	  HAL_GPIO_WritePin(MOTOR2_DIR_GPIO_Port, MOTOR2_DIR_Pin, GPIO_PIN_SET);
	  HAL_GPIO_WritePin(MOTOR3_DIR_GPIO_Port, MOTOR3_DIR_Pin, GPIO_PIN_SET);
	  break;
  default:
	  //do nothing
	  break;
 8000a26:	e017      	b.n	8000a58 <motor_control+0x5c>
	  HAL_GPIO_WritePin(MOTOR2_DIR_GPIO_Port, MOTOR2_DIR_Pin, GPIO_PIN_RESET);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2140      	movs	r1, #64	@ 0x40
 8000a2c:	4810      	ldr	r0, [pc, #64]	@ (8000a70 <motor_control+0x74>)
 8000a2e:	f000 feb3 	bl	8001798 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(MOTOR3_DIR_GPIO_Port, MOTOR3_DIR_Pin, GPIO_PIN_RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a38:	480d      	ldr	r0, [pc, #52]	@ (8000a70 <motor_control+0x74>)
 8000a3a:	f000 fead 	bl	8001798 <HAL_GPIO_WritePin>
	  break;
 8000a3e:	e00b      	b.n	8000a58 <motor_control+0x5c>
	  HAL_GPIO_WritePin(MOTOR2_DIR_GPIO_Port, MOTOR2_DIR_Pin, GPIO_PIN_SET);
 8000a40:	2201      	movs	r2, #1
 8000a42:	2140      	movs	r1, #64	@ 0x40
 8000a44:	480a      	ldr	r0, [pc, #40]	@ (8000a70 <motor_control+0x74>)
 8000a46:	f000 fea7 	bl	8001798 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(MOTOR3_DIR_GPIO_Port, MOTOR3_DIR_Pin, GPIO_PIN_SET);
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a50:	4807      	ldr	r0, [pc, #28]	@ (8000a70 <motor_control+0x74>)
 8000a52:	f000 fea1 	bl	8001798 <HAL_GPIO_WritePin>
	  break;
 8000a56:	bf00      	nop
  }

  //set motor speed
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, speed);
 8000a58:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <motor_control+0x78>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	88ba      	ldrh	r2, [r7, #4]
 8000a5e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, speed);
 8000a60:	4b04      	ldr	r3, [pc, #16]	@ (8000a74 <motor_control+0x78>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	88ba      	ldrh	r2, [r7, #4]
 8000a66:	639a      	str	r2, [r3, #56]	@ 0x38

}
 8000a68:	bf00      	nop
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40020000 	.word	0x40020000
 8000a74:	200008d0 	.word	0x200008d0

08000a78 <mpu6050_init>:
#include <string.h>

extern I2C_HandleTypeDef hi2c1;
extern UART_HandleTypeDef huart2;

void mpu6050_init(){
 8000a78:	b5b0      	push	{r4, r5, r7, lr}
 8000a7a:	b0c6      	sub	sp, #280	@ 0x118
 8000a7c:	af04      	add	r7, sp, #16

	uint8_t buff[256] = { 0 };
 8000a7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000a82:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	3304      	adds	r3, #4
 8000a8c:	22fc      	movs	r2, #252	@ 0xfc
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4618      	mov	r0, r3
 8000a92:	f003 fed9 	bl	8004848 <memset>

	//check if MPU is ready
	  if(HAL_I2C_IsDeviceReady(&hi2c1, (DEVICE_ADDRESS<<1) +0, 1, 100) == HAL_OK){
 8000a96:	2364      	movs	r3, #100	@ 0x64
 8000a98:	2201      	movs	r2, #1
 8000a9a:	21d0      	movs	r1, #208	@ 0xd0
 8000a9c:	4892      	ldr	r0, [pc, #584]	@ (8000ce8 <mpu6050_init+0x270>)
 8000a9e:	f001 fb05 	bl	80020ac <HAL_I2C_IsDeviceReady>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d11a      	bne.n	8000ade <mpu6050_init+0x66>
		  strcpy((char*) buff, "The device is ready\r\n");
 8000aa8:	f107 0308 	add.w	r3, r7, #8
 8000aac:	4a8f      	ldr	r2, [pc, #572]	@ (8000cec <mpu6050_init+0x274>)
 8000aae:	461c      	mov	r4, r3
 8000ab0:	4615      	mov	r5, r2
 8000ab2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ab4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ab6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000aba:	6020      	str	r0, [r4, #0]
 8000abc:	3404      	adds	r4, #4
 8000abe:	8021      	strh	r1, [r4, #0]
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8000ac0:	f107 0308 	add.w	r3, r7, #8
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff fba3 	bl	8000210 <strlen>
 8000aca:	4603      	mov	r3, r0
 8000acc:	b29a      	uxth	r2, r3
 8000ace:	f107 0108 	add.w	r1, r7, #8
 8000ad2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ad6:	4886      	ldr	r0, [pc, #536]	@ (8000cf0 <mpu6050_init+0x278>)
 8000ad8:	f003 fada 	bl	8004090 <HAL_UART_Transmit>
 8000adc:	e01a      	b.n	8000b14 <mpu6050_init+0x9c>
	  }
	  else{
		  strcpy((char*) buff, "The device is not ready. Check the cables\r\n");
 8000ade:	f107 0308 	add.w	r3, r7, #8
 8000ae2:	4a84      	ldr	r2, [pc, #528]	@ (8000cf4 <mpu6050_init+0x27c>)
 8000ae4:	461c      	mov	r4, r3
 8000ae6:	4615      	mov	r5, r2
 8000ae8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000af0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000af4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8000af8:	f107 0308 	add.w	r3, r7, #8
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff fb87 	bl	8000210 <strlen>
 8000b02:	4603      	mov	r3, r0
 8000b04:	b29a      	uxth	r2, r3
 8000b06:	f107 0108 	add.w	r1, r7, #8
 8000b0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b0e:	4878      	ldr	r0, [pc, #480]	@ (8000cf0 <mpu6050_init+0x278>)
 8000b10:	f003 fabe 	bl	8004090 <HAL_UART_Transmit>
	  }

	  //configure gyroscope
	  uint8_t gyroscope_range = FS_GYRO_500;	//set gyroscope range to 500 °/s
 8000b14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000b18:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8000b1c:	2208      	movs	r2, #8
 8000b1e:	701a      	strb	r2, [r3, #0]
	  if(HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS<<1) +0, REG_CONFIG_GYRO, 1, &gyroscope_range, sizeof(gyroscope_range), 100) == HAL_OK){
 8000b20:	2364      	movs	r3, #100	@ 0x64
 8000b22:	9302      	str	r3, [sp, #8]
 8000b24:	2301      	movs	r3, #1
 8000b26:	9301      	str	r3, [sp, #4]
 8000b28:	1dfb      	adds	r3, r7, #7
 8000b2a:	9300      	str	r3, [sp, #0]
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	221b      	movs	r2, #27
 8000b30:	21d0      	movs	r1, #208	@ 0xd0
 8000b32:	486d      	ldr	r0, [pc, #436]	@ (8000ce8 <mpu6050_init+0x270>)
 8000b34:	f000 ff8e 	bl	8001a54 <HAL_I2C_Mem_Write>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d11d      	bne.n	8000b7a <mpu6050_init+0x102>
		  strcpy((char*) buff, "gyroscope range successfully set\r\n");
 8000b3e:	f107 0308 	add.w	r3, r7, #8
 8000b42:	4a6d      	ldr	r2, [pc, #436]	@ (8000cf8 <mpu6050_init+0x280>)
 8000b44:	461c      	mov	r4, r3
 8000b46:	4615      	mov	r5, r2
 8000b48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b50:	682b      	ldr	r3, [r5, #0]
 8000b52:	461a      	mov	r2, r3
 8000b54:	8022      	strh	r2, [r4, #0]
 8000b56:	3402      	adds	r4, #2
 8000b58:	0c1b      	lsrs	r3, r3, #16
 8000b5a:	7023      	strb	r3, [r4, #0]
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8000b5c:	f107 0308 	add.w	r3, r7, #8
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff fb55 	bl	8000210 <strlen>
 8000b66:	4603      	mov	r3, r0
 8000b68:	b29a      	uxth	r2, r3
 8000b6a:	f107 0108 	add.w	r1, r7, #8
 8000b6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b72:	485f      	ldr	r0, [pc, #380]	@ (8000cf0 <mpu6050_init+0x278>)
 8000b74:	f003 fa8c 	bl	8004090 <HAL_UART_Transmit>
 8000b78:	e018      	b.n	8000bac <mpu6050_init+0x134>
	  }
	  else{
		  strcpy((char*) buff, "failed setting gyroscope range\r\n");
 8000b7a:	f107 0308 	add.w	r3, r7, #8
 8000b7e:	4a5f      	ldr	r2, [pc, #380]	@ (8000cfc <mpu6050_init+0x284>)
 8000b80:	461c      	mov	r4, r3
 8000b82:	4615      	mov	r5, r2
 8000b84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b8c:	682b      	ldr	r3, [r5, #0]
 8000b8e:	7023      	strb	r3, [r4, #0]
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8000b90:	f107 0308 	add.w	r3, r7, #8
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff fb3b 	bl	8000210 <strlen>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	b29a      	uxth	r2, r3
 8000b9e:	f107 0108 	add.w	r1, r7, #8
 8000ba2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ba6:	4852      	ldr	r0, [pc, #328]	@ (8000cf0 <mpu6050_init+0x278>)
 8000ba8:	f003 fa72 	bl	8004090 <HAL_UART_Transmit>
	  }

	  //configure accelerometer
	  uint8_t accelerometer_range = FS_ACC_4G;	//set gyroscope range to 500 °/s
 8000bac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000bb0:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 8000bb4:	2208      	movs	r2, #8
 8000bb6:	701a      	strb	r2, [r3, #0]
	  if(HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS<<1) +0, REG_CONFIG_ACC, 1, &accelerometer_range, sizeof(accelerometer_range), 100) == HAL_OK){
 8000bb8:	2364      	movs	r3, #100	@ 0x64
 8000bba:	9302      	str	r3, [sp, #8]
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	9301      	str	r3, [sp, #4]
 8000bc0:	1dbb      	adds	r3, r7, #6
 8000bc2:	9300      	str	r3, [sp, #0]
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	221c      	movs	r2, #28
 8000bc8:	21d0      	movs	r1, #208	@ 0xd0
 8000bca:	4847      	ldr	r0, [pc, #284]	@ (8000ce8 <mpu6050_init+0x270>)
 8000bcc:	f000 ff42 	bl	8001a54 <HAL_I2C_Mem_Write>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d11f      	bne.n	8000c16 <mpu6050_init+0x19e>
		  strcpy((char*) buff, "accelerometer range successfully set\r\n");
 8000bd6:	f107 0308 	add.w	r3, r7, #8
 8000bda:	4a49      	ldr	r2, [pc, #292]	@ (8000d00 <mpu6050_init+0x288>)
 8000bdc:	461c      	mov	r4, r3
 8000bde:	4615      	mov	r5, r2
 8000be0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000be2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000be6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000bec:	6020      	str	r0, [r4, #0]
 8000bee:	3404      	adds	r4, #4
 8000bf0:	8021      	strh	r1, [r4, #0]
 8000bf2:	3402      	adds	r4, #2
 8000bf4:	0c0b      	lsrs	r3, r1, #16
 8000bf6:	7023      	strb	r3, [r4, #0]
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8000bf8:	f107 0308 	add.w	r3, r7, #8
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff fb07 	bl	8000210 <strlen>
 8000c02:	4603      	mov	r3, r0
 8000c04:	b29a      	uxth	r2, r3
 8000c06:	f107 0108 	add.w	r1, r7, #8
 8000c0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c0e:	4838      	ldr	r0, [pc, #224]	@ (8000cf0 <mpu6050_init+0x278>)
 8000c10:	f003 fa3e 	bl	8004090 <HAL_UART_Transmit>
 8000c14:	e01b      	b.n	8000c4e <mpu6050_init+0x1d6>
	  }
	  else{
		  strcpy((char*) buff, "failed setting accelerometer range\r\n");
 8000c16:	f107 0308 	add.w	r3, r7, #8
 8000c1a:	4a3a      	ldr	r2, [pc, #232]	@ (8000d04 <mpu6050_init+0x28c>)
 8000c1c:	461c      	mov	r4, r3
 8000c1e:	4615      	mov	r5, r2
 8000c20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c28:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c2c:	6020      	str	r0, [r4, #0]
 8000c2e:	3404      	adds	r4, #4
 8000c30:	7021      	strb	r1, [r4, #0]
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8000c32:	f107 0308 	add.w	r3, r7, #8
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff faea 	bl	8000210 <strlen>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	b29a      	uxth	r2, r3
 8000c40:	f107 0108 	add.w	r1, r7, #8
 8000c44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c48:	4829      	ldr	r0, [pc, #164]	@ (8000cf0 <mpu6050_init+0x278>)
 8000c4a:	f003 fa21 	bl	8004090 <HAL_UART_Transmit>
	  }

	  //deactivate sleep
	  uint8_t asdf_flags = 0b00001000;	//set the '1' also to '0' if you want the temperature sensor to be enabled
 8000c4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000c52:	f2a3 1303 	subw	r3, r3, #259	@ 0x103
 8000c56:	2208      	movs	r2, #8
 8000c58:	701a      	strb	r2, [r3, #0]
	  if(HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS<<1) +0, REG_USR_CTRL, 1, &asdf_flags, sizeof(asdf_flags), 100) == HAL_OK){
 8000c5a:	2364      	movs	r3, #100	@ 0x64
 8000c5c:	9302      	str	r3, [sp, #8]
 8000c5e:	2301      	movs	r3, #1
 8000c60:	9301      	str	r3, [sp, #4]
 8000c62:	1d7b      	adds	r3, r7, #5
 8000c64:	9300      	str	r3, [sp, #0]
 8000c66:	2301      	movs	r3, #1
 8000c68:	226b      	movs	r2, #107	@ 0x6b
 8000c6a:	21d0      	movs	r1, #208	@ 0xd0
 8000c6c:	481e      	ldr	r0, [pc, #120]	@ (8000ce8 <mpu6050_init+0x270>)
 8000c6e:	f000 fef1 	bl	8001a54 <HAL_I2C_Mem_Write>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d119      	bne.n	8000cac <mpu6050_init+0x234>
		  strcpy((char*) buff, "disablin sleep successfully\r\n");
 8000c78:	f107 0308 	add.w	r3, r7, #8
 8000c7c:	4a22      	ldr	r2, [pc, #136]	@ (8000d08 <mpu6050_init+0x290>)
 8000c7e:	461c      	mov	r4, r3
 8000c80:	4615      	mov	r5, r2
 8000c82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c86:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000c8a:	c407      	stmia	r4!, {r0, r1, r2}
 8000c8c:	8023      	strh	r3, [r4, #0]
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8000c8e:	f107 0308 	add.w	r3, r7, #8
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff fabc 	bl	8000210 <strlen>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	b29a      	uxth	r2, r3
 8000c9c:	f107 0108 	add.w	r1, r7, #8
 8000ca0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ca4:	4812      	ldr	r0, [pc, #72]	@ (8000cf0 <mpu6050_init+0x278>)
 8000ca6:	f003 f9f3 	bl	8004090 <HAL_UART_Transmit>
	  else{
		  strcpy((char*) buff, "error disabling sleep\r\n");
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
	  }

}
 8000caa:	e018      	b.n	8000cde <mpu6050_init+0x266>
		  strcpy((char*) buff, "error disabling sleep\r\n");
 8000cac:	f107 0308 	add.w	r3, r7, #8
 8000cb0:	4a16      	ldr	r2, [pc, #88]	@ (8000d0c <mpu6050_init+0x294>)
 8000cb2:	461c      	mov	r4, r3
 8000cb4:	4615      	mov	r5, r2
 8000cb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cba:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000cbe:	e884 0003 	stmia.w	r4, {r0, r1}
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8000cc2:	f107 0308 	add.w	r3, r7, #8
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff faa2 	bl	8000210 <strlen>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	b29a      	uxth	r2, r3
 8000cd0:	f107 0108 	add.w	r1, r7, #8
 8000cd4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cd8:	4805      	ldr	r0, [pc, #20]	@ (8000cf0 <mpu6050_init+0x278>)
 8000cda:	f003 f9d9 	bl	8004090 <HAL_UART_Transmit>
}
 8000cde:	bf00      	nop
 8000ce0:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bdb0      	pop	{r4, r5, r7, pc}
 8000ce8:	2000087c 	.word	0x2000087c
 8000cec:	080051c8 	.word	0x080051c8
 8000cf0:	20000918 	.word	0x20000918
 8000cf4:	080051e0 	.word	0x080051e0
 8000cf8:	0800520c 	.word	0x0800520c
 8000cfc:	08005230 	.word	0x08005230
 8000d00:	08005254 	.word	0x08005254
 8000d04:	0800527c 	.word	0x0800527c
 8000d08:	080052a4 	.word	0x080052a4
 8000d0c:	080052c4 	.word	0x080052c4

08000d10 <mpu6050_read>:



void mpu6050_read(mpu6050_values_t* values){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af04      	add	r7, sp, #16
 8000d16:	6078      	str	r0, [r7, #4]

	  uint8_t buff[6] = { 0 };
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	81bb      	strh	r3, [r7, #12]
	  HAL_I2C_Mem_Read(&hi2c1, (DEVICE_ADDRESS<<1) +1, REG_ACC_DATA, 1, buff, sizeof(buff), 100);
 8000d20:	2364      	movs	r3, #100	@ 0x64
 8000d22:	9302      	str	r3, [sp, #8]
 8000d24:	2306      	movs	r3, #6
 8000d26:	9301      	str	r3, [sp, #4]
 8000d28:	f107 0308 	add.w	r3, r7, #8
 8000d2c:	9300      	str	r3, [sp, #0]
 8000d2e:	2301      	movs	r3, #1
 8000d30:	223b      	movs	r2, #59	@ 0x3b
 8000d32:	21d1      	movs	r1, #209	@ 0xd1
 8000d34:	4824      	ldr	r0, [pc, #144]	@ (8000dc8 <mpu6050_read+0xb8>)
 8000d36:	f000 ff87 	bl	8001c48 <HAL_I2C_Mem_Read>
	  values->acc_x = (uint16_t) (buff[0]<<8) + buff[1];
 8000d3a:	7a3b      	ldrb	r3, [r7, #8]
 8000d3c:	021b      	lsls	r3, r3, #8
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	7a7a      	ldrb	r2, [r7, #9]
 8000d42:	4413      	add	r3, r2
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	b21a      	sxth	r2, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	80da      	strh	r2, [r3, #6]
	  values->acc_y = (uint16_t) (buff[2]<<8) + buff[3];
 8000d4c:	7abb      	ldrb	r3, [r7, #10]
 8000d4e:	021b      	lsls	r3, r3, #8
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	7afa      	ldrb	r2, [r7, #11]
 8000d54:	4413      	add	r3, r2
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	b21a      	sxth	r2, r3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	811a      	strh	r2, [r3, #8]
	  values->acc_z = (uint16_t) (buff[4]<<8) + buff[5];
 8000d5e:	7b3b      	ldrb	r3, [r7, #12]
 8000d60:	021b      	lsls	r3, r3, #8
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	7b7a      	ldrb	r2, [r7, #13]
 8000d66:	4413      	add	r3, r2
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	b21a      	sxth	r2, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	815a      	strh	r2, [r3, #10]

	  HAL_I2C_Mem_Read(&hi2c1, (DEVICE_ADDRESS<<1) +1, REG_GYRO_DATA, 1, buff, sizeof(buff), 100);
 8000d70:	2364      	movs	r3, #100	@ 0x64
 8000d72:	9302      	str	r3, [sp, #8]
 8000d74:	2306      	movs	r3, #6
 8000d76:	9301      	str	r3, [sp, #4]
 8000d78:	f107 0308 	add.w	r3, r7, #8
 8000d7c:	9300      	str	r3, [sp, #0]
 8000d7e:	2301      	movs	r3, #1
 8000d80:	2243      	movs	r2, #67	@ 0x43
 8000d82:	21d1      	movs	r1, #209	@ 0xd1
 8000d84:	4810      	ldr	r0, [pc, #64]	@ (8000dc8 <mpu6050_read+0xb8>)
 8000d86:	f000 ff5f 	bl	8001c48 <HAL_I2C_Mem_Read>
	  values->gyro_x = (uint16_t) (buff[0]<<8) + buff[1];
 8000d8a:	7a3b      	ldrb	r3, [r7, #8]
 8000d8c:	021b      	lsls	r3, r3, #8
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	7a7a      	ldrb	r2, [r7, #9]
 8000d92:	4413      	add	r3, r2
 8000d94:	b29b      	uxth	r3, r3
 8000d96:	b21a      	sxth	r2, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	801a      	strh	r2, [r3, #0]
	  values->gyro_y = (uint16_t) (buff[2]<<8) + buff[3];
 8000d9c:	7abb      	ldrb	r3, [r7, #10]
 8000d9e:	021b      	lsls	r3, r3, #8
 8000da0:	b29b      	uxth	r3, r3
 8000da2:	7afa      	ldrb	r2, [r7, #11]
 8000da4:	4413      	add	r3, r2
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	b21a      	sxth	r2, r3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	805a      	strh	r2, [r3, #2]
	  values->gyro_z = (uint16_t) (buff[4]<<8) + buff[5];
 8000dae:	7b3b      	ldrb	r3, [r7, #12]
 8000db0:	021b      	lsls	r3, r3, #8
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	7b7a      	ldrb	r2, [r7, #13]
 8000db6:	4413      	add	r3, r2
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	b21a      	sxth	r2, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	809a      	strh	r2, [r3, #4]

}
 8000dc0:	bf00      	nop
 8000dc2:	3710      	adds	r7, #16
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	2000087c 	.word	0x2000087c

08000dcc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	607b      	str	r3, [r7, #4]
 8000dd6:	4b10      	ldr	r3, [pc, #64]	@ (8000e18 <HAL_MspInit+0x4c>)
 8000dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dda:	4a0f      	ldr	r2, [pc, #60]	@ (8000e18 <HAL_MspInit+0x4c>)
 8000ddc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000de0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000de2:	4b0d      	ldr	r3, [pc, #52]	@ (8000e18 <HAL_MspInit+0x4c>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000de6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	603b      	str	r3, [r7, #0]
 8000df2:	4b09      	ldr	r3, [pc, #36]	@ (8000e18 <HAL_MspInit+0x4c>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df6:	4a08      	ldr	r2, [pc, #32]	@ (8000e18 <HAL_MspInit+0x4c>)
 8000df8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dfe:	4b06      	ldr	r3, [pc, #24]	@ (8000e18 <HAL_MspInit+0x4c>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e06:	603b      	str	r3, [r7, #0]
 8000e08:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e0a:	2007      	movs	r0, #7
 8000e0c:	f000 fafc 	bl	8001408 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e10:	bf00      	nop
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40023800 	.word	0x40023800

08000e1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08a      	sub	sp, #40	@ 0x28
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a19      	ldr	r2, [pc, #100]	@ (8000ea0 <HAL_I2C_MspInit+0x84>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d12c      	bne.n	8000e98 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
 8000e42:	4b18      	ldr	r3, [pc, #96]	@ (8000ea4 <HAL_I2C_MspInit+0x88>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	4a17      	ldr	r2, [pc, #92]	@ (8000ea4 <HAL_I2C_MspInit+0x88>)
 8000e48:	f043 0302 	orr.w	r3, r3, #2
 8000e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e4e:	4b15      	ldr	r3, [pc, #84]	@ (8000ea4 <HAL_I2C_MspInit+0x88>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e52:	f003 0302 	and.w	r3, r3, #2
 8000e56:	613b      	str	r3, [r7, #16]
 8000e58:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e5a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e60:	2312      	movs	r3, #18
 8000e62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e64:	2301      	movs	r3, #1
 8000e66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e6c:	2304      	movs	r3, #4
 8000e6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	4619      	mov	r1, r3
 8000e76:	480c      	ldr	r0, [pc, #48]	@ (8000ea8 <HAL_I2C_MspInit+0x8c>)
 8000e78:	f000 fafa 	bl	8001470 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	4b08      	ldr	r3, [pc, #32]	@ (8000ea4 <HAL_I2C_MspInit+0x88>)
 8000e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e84:	4a07      	ldr	r2, [pc, #28]	@ (8000ea4 <HAL_I2C_MspInit+0x88>)
 8000e86:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e8a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ea4 <HAL_I2C_MspInit+0x88>)
 8000e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000e98:	bf00      	nop
 8000e9a:	3728      	adds	r7, #40	@ 0x28
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40005400 	.word	0x40005400
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40020400 	.word	0x40020400

08000eac <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a0b      	ldr	r2, [pc, #44]	@ (8000ee8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d10d      	bne.n	8000eda <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8000eec <HAL_TIM_PWM_MspInit+0x40>)
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec6:	4a09      	ldr	r2, [pc, #36]	@ (8000eec <HAL_TIM_PWM_MspInit+0x40>)
 8000ec8:	f043 0302 	orr.w	r3, r3, #2
 8000ecc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ece:	4b07      	ldr	r3, [pc, #28]	@ (8000eec <HAL_TIM_PWM_MspInit+0x40>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed2:	f003 0302 	and.w	r3, r3, #2
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000eda:	bf00      	nop
 8000edc:	3714      	adds	r7, #20
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	40000400 	.word	0x40000400
 8000eec:	40023800 	.word	0x40023800

08000ef0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	@ 0x28
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a21      	ldr	r2, [pc, #132]	@ (8000f94 <HAL_TIM_MspPostInit+0xa4>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d13b      	bne.n	8000f8a <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
 8000f16:	4b20      	ldr	r3, [pc, #128]	@ (8000f98 <HAL_TIM_MspPostInit+0xa8>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1a:	4a1f      	ldr	r2, [pc, #124]	@ (8000f98 <HAL_TIM_MspPostInit+0xa8>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f22:	4b1d      	ldr	r3, [pc, #116]	@ (8000f98 <HAL_TIM_MspPostInit+0xa8>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	4b19      	ldr	r3, [pc, #100]	@ (8000f98 <HAL_TIM_MspPostInit+0xa8>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f36:	4a18      	ldr	r2, [pc, #96]	@ (8000f98 <HAL_TIM_MspPostInit+0xa8>)
 8000f38:	f043 0302 	orr.w	r3, r3, #2
 8000f3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3e:	4b16      	ldr	r3, [pc, #88]	@ (8000f98 <HAL_TIM_MspPostInit+0xa8>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f42:	f003 0302 	and.w	r3, r3, #2
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f4a:	2380      	movs	r3, #128	@ 0x80
 8000f4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	2300      	movs	r3, #0
 8000f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	4619      	mov	r1, r3
 8000f64:	480d      	ldr	r0, [pc, #52]	@ (8000f9c <HAL_TIM_MspPostInit+0xac>)
 8000f66:	f000 fa83 	bl	8001470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f6a:	2310      	movs	r3, #16
 8000f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f76:	2300      	movs	r3, #0
 8000f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7e:	f107 0314 	add.w	r3, r7, #20
 8000f82:	4619      	mov	r1, r3
 8000f84:	4806      	ldr	r0, [pc, #24]	@ (8000fa0 <HAL_TIM_MspPostInit+0xb0>)
 8000f86:	f000 fa73 	bl	8001470 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000f8a:	bf00      	nop
 8000f8c:	3728      	adds	r7, #40	@ 0x28
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40000400 	.word	0x40000400
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40020000 	.word	0x40020000
 8000fa0:	40020400 	.word	0x40020400

08000fa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08a      	sub	sp, #40	@ 0x28
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a19      	ldr	r2, [pc, #100]	@ (8001028 <HAL_UART_MspInit+0x84>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d12b      	bne.n	800101e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	613b      	str	r3, [r7, #16]
 8000fca:	4b18      	ldr	r3, [pc, #96]	@ (800102c <HAL_UART_MspInit+0x88>)
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fce:	4a17      	ldr	r2, [pc, #92]	@ (800102c <HAL_UART_MspInit+0x88>)
 8000fd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fd6:	4b15      	ldr	r3, [pc, #84]	@ (800102c <HAL_UART_MspInit+0x88>)
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	4b11      	ldr	r3, [pc, #68]	@ (800102c <HAL_UART_MspInit+0x88>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fea:	4a10      	ldr	r2, [pc, #64]	@ (800102c <HAL_UART_MspInit+0x88>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	@ (800102c <HAL_UART_MspInit+0x88>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ffe:	230c      	movs	r3, #12
 8001000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001002:	2302      	movs	r3, #2
 8001004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100a:	2303      	movs	r3, #3
 800100c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800100e:	2307      	movs	r3, #7
 8001010:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	4619      	mov	r1, r3
 8001018:	4805      	ldr	r0, [pc, #20]	@ (8001030 <HAL_UART_MspInit+0x8c>)
 800101a:	f000 fa29 	bl	8001470 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800101e:	bf00      	nop
 8001020:	3728      	adds	r7, #40	@ 0x28
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40004400 	.word	0x40004400
 800102c:	40023800 	.word	0x40023800
 8001030:	40020000 	.word	0x40020000

08001034 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001038:	bf00      	nop
 800103a:	e7fd      	b.n	8001038 <NMI_Handler+0x4>

0800103c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001040:	bf00      	nop
 8001042:	e7fd      	b.n	8001040 <HardFault_Handler+0x4>

08001044 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001048:	bf00      	nop
 800104a:	e7fd      	b.n	8001048 <MemManage_Handler+0x4>

0800104c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001050:	bf00      	nop
 8001052:	e7fd      	b.n	8001050 <BusFault_Handler+0x4>

08001054 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <UsageFault_Handler+0x4>

0800105c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800108a:	f000 f8c7 	bl	800121c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800109c:	4a14      	ldr	r2, [pc, #80]	@ (80010f0 <_sbrk+0x5c>)
 800109e:	4b15      	ldr	r3, [pc, #84]	@ (80010f4 <_sbrk+0x60>)
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010a8:	4b13      	ldr	r3, [pc, #76]	@ (80010f8 <_sbrk+0x64>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d102      	bne.n	80010b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010b0:	4b11      	ldr	r3, [pc, #68]	@ (80010f8 <_sbrk+0x64>)
 80010b2:	4a12      	ldr	r2, [pc, #72]	@ (80010fc <_sbrk+0x68>)
 80010b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010b6:	4b10      	ldr	r3, [pc, #64]	@ (80010f8 <_sbrk+0x64>)
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4413      	add	r3, r2
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d207      	bcs.n	80010d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010c4:	f003 fbdc 	bl	8004880 <__errno>
 80010c8:	4603      	mov	r3, r0
 80010ca:	220c      	movs	r2, #12
 80010cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010d2:	e009      	b.n	80010e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010d4:	4b08      	ldr	r3, [pc, #32]	@ (80010f8 <_sbrk+0x64>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010da:	4b07      	ldr	r3, [pc, #28]	@ (80010f8 <_sbrk+0x64>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4413      	add	r3, r2
 80010e2:	4a05      	ldr	r2, [pc, #20]	@ (80010f8 <_sbrk+0x64>)
 80010e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010e6:	68fb      	ldr	r3, [r7, #12]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3718      	adds	r7, #24
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20020000 	.word	0x20020000
 80010f4:	00000400 	.word	0x00000400
 80010f8:	20000960 	.word	0x20000960
 80010fc:	20000ab0 	.word	0x20000ab0

08001100 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001104:	4b06      	ldr	r3, [pc, #24]	@ (8001120 <SystemInit+0x20>)
 8001106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800110a:	4a05      	ldr	r2, [pc, #20]	@ (8001120 <SystemInit+0x20>)
 800110c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001110:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001124:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800115c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001128:	f7ff ffea 	bl	8001100 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800112c:	480c      	ldr	r0, [pc, #48]	@ (8001160 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800112e:	490d      	ldr	r1, [pc, #52]	@ (8001164 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001130:	4a0d      	ldr	r2, [pc, #52]	@ (8001168 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001132:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001134:	e002      	b.n	800113c <LoopCopyDataInit>

08001136 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001136:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001138:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800113a:	3304      	adds	r3, #4

0800113c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800113c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800113e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001140:	d3f9      	bcc.n	8001136 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001142:	4a0a      	ldr	r2, [pc, #40]	@ (800116c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001144:	4c0a      	ldr	r4, [pc, #40]	@ (8001170 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001146:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001148:	e001      	b.n	800114e <LoopFillZerobss>

0800114a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800114a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800114c:	3204      	adds	r2, #4

0800114e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800114e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001150:	d3fb      	bcc.n	800114a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001152:	f003 fb9b 	bl	800488c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001156:	f7ff fa49 	bl	80005ec <main>
  bx  lr    
 800115a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800115c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001160:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001164:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001168:	08005338 	.word	0x08005338
  ldr r2, =_sbss
 800116c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001170:	20000ab0 	.word	0x20000ab0

08001174 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001174:	e7fe      	b.n	8001174 <ADC_IRQHandler>
	...

08001178 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800117c:	4b0e      	ldr	r3, [pc, #56]	@ (80011b8 <HAL_Init+0x40>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a0d      	ldr	r2, [pc, #52]	@ (80011b8 <HAL_Init+0x40>)
 8001182:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001186:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001188:	4b0b      	ldr	r3, [pc, #44]	@ (80011b8 <HAL_Init+0x40>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a0a      	ldr	r2, [pc, #40]	@ (80011b8 <HAL_Init+0x40>)
 800118e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001192:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001194:	4b08      	ldr	r3, [pc, #32]	@ (80011b8 <HAL_Init+0x40>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a07      	ldr	r2, [pc, #28]	@ (80011b8 <HAL_Init+0x40>)
 800119a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800119e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a0:	2003      	movs	r0, #3
 80011a2:	f000 f931 	bl	8001408 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011a6:	2000      	movs	r0, #0
 80011a8:	f000 f808 	bl	80011bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011ac:	f7ff fe0e 	bl	8000dcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40023c00 	.word	0x40023c00

080011bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011c4:	4b12      	ldr	r3, [pc, #72]	@ (8001210 <HAL_InitTick+0x54>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4b12      	ldr	r3, [pc, #72]	@ (8001214 <HAL_InitTick+0x58>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	4619      	mov	r1, r3
 80011ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011da:	4618      	mov	r0, r3
 80011dc:	f000 f93b 	bl	8001456 <HAL_SYSTICK_Config>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e00e      	b.n	8001208 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2b0f      	cmp	r3, #15
 80011ee:	d80a      	bhi.n	8001206 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f0:	2200      	movs	r2, #0
 80011f2:	6879      	ldr	r1, [r7, #4]
 80011f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011f8:	f000 f911 	bl	800141e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011fc:	4a06      	ldr	r2, [pc, #24]	@ (8001218 <HAL_InitTick+0x5c>)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001202:	2300      	movs	r3, #0
 8001204:	e000      	b.n	8001208 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
}
 8001208:	4618      	mov	r0, r3
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000004 	.word	0x20000004
 8001214:	2000000c 	.word	0x2000000c
 8001218:	20000008 	.word	0x20000008

0800121c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001220:	4b06      	ldr	r3, [pc, #24]	@ (800123c <HAL_IncTick+0x20>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	461a      	mov	r2, r3
 8001226:	4b06      	ldr	r3, [pc, #24]	@ (8001240 <HAL_IncTick+0x24>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4413      	add	r3, r2
 800122c:	4a04      	ldr	r2, [pc, #16]	@ (8001240 <HAL_IncTick+0x24>)
 800122e:	6013      	str	r3, [r2, #0]
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	2000000c 	.word	0x2000000c
 8001240:	20000964 	.word	0x20000964

08001244 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  return uwTick;
 8001248:	4b03      	ldr	r3, [pc, #12]	@ (8001258 <HAL_GetTick+0x14>)
 800124a:	681b      	ldr	r3, [r3, #0]
}
 800124c:	4618      	mov	r0, r3
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	20000964 	.word	0x20000964

0800125c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001264:	f7ff ffee 	bl	8001244 <HAL_GetTick>
 8001268:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001274:	d005      	beq.n	8001282 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001276:	4b0a      	ldr	r3, [pc, #40]	@ (80012a0 <HAL_Delay+0x44>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	461a      	mov	r2, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	4413      	add	r3, r2
 8001280:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001282:	bf00      	nop
 8001284:	f7ff ffde 	bl	8001244 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	429a      	cmp	r2, r3
 8001292:	d8f7      	bhi.n	8001284 <HAL_Delay+0x28>
  {
  }
}
 8001294:	bf00      	nop
 8001296:	bf00      	nop
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	2000000c 	.word	0x2000000c

080012a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b4:	4b0c      	ldr	r3, [pc, #48]	@ (80012e8 <__NVIC_SetPriorityGrouping+0x44>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ba:	68ba      	ldr	r2, [r7, #8]
 80012bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012c0:	4013      	ands	r3, r2
 80012c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012d6:	4a04      	ldr	r2, [pc, #16]	@ (80012e8 <__NVIC_SetPriorityGrouping+0x44>)
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	60d3      	str	r3, [r2, #12]
}
 80012dc:	bf00      	nop
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f0:	4b04      	ldr	r3, [pc, #16]	@ (8001304 <__NVIC_GetPriorityGrouping+0x18>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	0a1b      	lsrs	r3, r3, #8
 80012f6:	f003 0307 	and.w	r3, r3, #7
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	6039      	str	r1, [r7, #0]
 8001312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001318:	2b00      	cmp	r3, #0
 800131a:	db0a      	blt.n	8001332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	b2da      	uxtb	r2, r3
 8001320:	490c      	ldr	r1, [pc, #48]	@ (8001354 <__NVIC_SetPriority+0x4c>)
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	0112      	lsls	r2, r2, #4
 8001328:	b2d2      	uxtb	r2, r2
 800132a:	440b      	add	r3, r1
 800132c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001330:	e00a      	b.n	8001348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	b2da      	uxtb	r2, r3
 8001336:	4908      	ldr	r1, [pc, #32]	@ (8001358 <__NVIC_SetPriority+0x50>)
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	f003 030f 	and.w	r3, r3, #15
 800133e:	3b04      	subs	r3, #4
 8001340:	0112      	lsls	r2, r2, #4
 8001342:	b2d2      	uxtb	r2, r2
 8001344:	440b      	add	r3, r1
 8001346:	761a      	strb	r2, [r3, #24]
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	e000e100 	.word	0xe000e100
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800135c:	b480      	push	{r7}
 800135e:	b089      	sub	sp, #36	@ 0x24
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	f1c3 0307 	rsb	r3, r3, #7
 8001376:	2b04      	cmp	r3, #4
 8001378:	bf28      	it	cs
 800137a:	2304      	movcs	r3, #4
 800137c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	3304      	adds	r3, #4
 8001382:	2b06      	cmp	r3, #6
 8001384:	d902      	bls.n	800138c <NVIC_EncodePriority+0x30>
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3b03      	subs	r3, #3
 800138a:	e000      	b.n	800138e <NVIC_EncodePriority+0x32>
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001390:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43da      	mvns	r2, r3
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	401a      	ands	r2, r3
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	fa01 f303 	lsl.w	r3, r1, r3
 80013ae:	43d9      	mvns	r1, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b4:	4313      	orrs	r3, r2
         );
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3724      	adds	r7, #36	@ 0x24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
	...

080013c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013d4:	d301      	bcc.n	80013da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013d6:	2301      	movs	r3, #1
 80013d8:	e00f      	b.n	80013fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013da:	4a0a      	ldr	r2, [pc, #40]	@ (8001404 <SysTick_Config+0x40>)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3b01      	subs	r3, #1
 80013e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013e2:	210f      	movs	r1, #15
 80013e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80013e8:	f7ff ff8e 	bl	8001308 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013ec:	4b05      	ldr	r3, [pc, #20]	@ (8001404 <SysTick_Config+0x40>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013f2:	4b04      	ldr	r3, [pc, #16]	@ (8001404 <SysTick_Config+0x40>)
 80013f4:	2207      	movs	r2, #7
 80013f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	e000e010 	.word	0xe000e010

08001408 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff ff47 	bl	80012a4 <__NVIC_SetPriorityGrouping>
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800141e:	b580      	push	{r7, lr}
 8001420:	b086      	sub	sp, #24
 8001422:	af00      	add	r7, sp, #0
 8001424:	4603      	mov	r3, r0
 8001426:	60b9      	str	r1, [r7, #8]
 8001428:	607a      	str	r2, [r7, #4]
 800142a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001430:	f7ff ff5c 	bl	80012ec <__NVIC_GetPriorityGrouping>
 8001434:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	68b9      	ldr	r1, [r7, #8]
 800143a:	6978      	ldr	r0, [r7, #20]
 800143c:	f7ff ff8e 	bl	800135c <NVIC_EncodePriority>
 8001440:	4602      	mov	r2, r0
 8001442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001446:	4611      	mov	r1, r2
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff ff5d 	bl	8001308 <__NVIC_SetPriority>
}
 800144e:	bf00      	nop
 8001450:	3718      	adds	r7, #24
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b082      	sub	sp, #8
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff ffb0 	bl	80013c4 <SysTick_Config>
 8001464:	4603      	mov	r3, r0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001470:	b480      	push	{r7}
 8001472:	b089      	sub	sp, #36	@ 0x24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800147e:	2300      	movs	r3, #0
 8001480:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001482:	2300      	movs	r3, #0
 8001484:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001486:	2300      	movs	r3, #0
 8001488:	61fb      	str	r3, [r7, #28]
 800148a:	e165      	b.n	8001758 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800148c:	2201      	movs	r2, #1
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	697a      	ldr	r2, [r7, #20]
 800149c:	4013      	ands	r3, r2
 800149e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	f040 8154 	bne.w	8001752 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f003 0303 	and.w	r3, r3, #3
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d005      	beq.n	80014c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d130      	bne.n	8001524 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	2203      	movs	r2, #3
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43db      	mvns	r3, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4013      	ands	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	68da      	ldr	r2, [r3, #12]
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014f8:	2201      	movs	r2, #1
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	43db      	mvns	r3, r3
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	4013      	ands	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	091b      	lsrs	r3, r3, #4
 800150e:	f003 0201 	and.w	r2, r3, #1
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4313      	orrs	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 0303 	and.w	r3, r3, #3
 800152c:	2b03      	cmp	r3, #3
 800152e:	d017      	beq.n	8001560 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	2203      	movs	r2, #3
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4013      	ands	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	689a      	ldr	r2, [r3, #8]
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4313      	orrs	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f003 0303 	and.w	r3, r3, #3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d123      	bne.n	80015b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	08da      	lsrs	r2, r3, #3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3208      	adds	r2, #8
 8001574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001578:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	f003 0307 	and.w	r3, r3, #7
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	220f      	movs	r2, #15
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	43db      	mvns	r3, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4013      	ands	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	691a      	ldr	r2, [r3, #16]
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	08da      	lsrs	r2, r3, #3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	3208      	adds	r2, #8
 80015ae:	69b9      	ldr	r1, [r7, #24]
 80015b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	2203      	movs	r2, #3
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	43db      	mvns	r3, r3
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	4013      	ands	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f003 0203 	and.w	r2, r3, #3
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4313      	orrs	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	f000 80ae 	beq.w	8001752 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	4b5d      	ldr	r3, [pc, #372]	@ (8001770 <HAL_GPIO_Init+0x300>)
 80015fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015fe:	4a5c      	ldr	r2, [pc, #368]	@ (8001770 <HAL_GPIO_Init+0x300>)
 8001600:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001604:	6453      	str	r3, [r2, #68]	@ 0x44
 8001606:	4b5a      	ldr	r3, [pc, #360]	@ (8001770 <HAL_GPIO_Init+0x300>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800160a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001612:	4a58      	ldr	r2, [pc, #352]	@ (8001774 <HAL_GPIO_Init+0x304>)
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	089b      	lsrs	r3, r3, #2
 8001618:	3302      	adds	r3, #2
 800161a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800161e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	f003 0303 	and.w	r3, r3, #3
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	220f      	movs	r2, #15
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	43db      	mvns	r3, r3
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	4013      	ands	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a4f      	ldr	r2, [pc, #316]	@ (8001778 <HAL_GPIO_Init+0x308>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d025      	beq.n	800168a <HAL_GPIO_Init+0x21a>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a4e      	ldr	r2, [pc, #312]	@ (800177c <HAL_GPIO_Init+0x30c>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d01f      	beq.n	8001686 <HAL_GPIO_Init+0x216>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a4d      	ldr	r2, [pc, #308]	@ (8001780 <HAL_GPIO_Init+0x310>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d019      	beq.n	8001682 <HAL_GPIO_Init+0x212>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a4c      	ldr	r2, [pc, #304]	@ (8001784 <HAL_GPIO_Init+0x314>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d013      	beq.n	800167e <HAL_GPIO_Init+0x20e>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a4b      	ldr	r2, [pc, #300]	@ (8001788 <HAL_GPIO_Init+0x318>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d00d      	beq.n	800167a <HAL_GPIO_Init+0x20a>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a4a      	ldr	r2, [pc, #296]	@ (800178c <HAL_GPIO_Init+0x31c>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d007      	beq.n	8001676 <HAL_GPIO_Init+0x206>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a49      	ldr	r2, [pc, #292]	@ (8001790 <HAL_GPIO_Init+0x320>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d101      	bne.n	8001672 <HAL_GPIO_Init+0x202>
 800166e:	2306      	movs	r3, #6
 8001670:	e00c      	b.n	800168c <HAL_GPIO_Init+0x21c>
 8001672:	2307      	movs	r3, #7
 8001674:	e00a      	b.n	800168c <HAL_GPIO_Init+0x21c>
 8001676:	2305      	movs	r3, #5
 8001678:	e008      	b.n	800168c <HAL_GPIO_Init+0x21c>
 800167a:	2304      	movs	r3, #4
 800167c:	e006      	b.n	800168c <HAL_GPIO_Init+0x21c>
 800167e:	2303      	movs	r3, #3
 8001680:	e004      	b.n	800168c <HAL_GPIO_Init+0x21c>
 8001682:	2302      	movs	r3, #2
 8001684:	e002      	b.n	800168c <HAL_GPIO_Init+0x21c>
 8001686:	2301      	movs	r3, #1
 8001688:	e000      	b.n	800168c <HAL_GPIO_Init+0x21c>
 800168a:	2300      	movs	r3, #0
 800168c:	69fa      	ldr	r2, [r7, #28]
 800168e:	f002 0203 	and.w	r2, r2, #3
 8001692:	0092      	lsls	r2, r2, #2
 8001694:	4093      	lsls	r3, r2
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	4313      	orrs	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800169c:	4935      	ldr	r1, [pc, #212]	@ (8001774 <HAL_GPIO_Init+0x304>)
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	089b      	lsrs	r3, r3, #2
 80016a2:	3302      	adds	r3, #2
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016aa:	4b3a      	ldr	r3, [pc, #232]	@ (8001794 <HAL_GPIO_Init+0x324>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	43db      	mvns	r3, r3
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	4013      	ands	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d003      	beq.n	80016ce <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016ce:	4a31      	ldr	r2, [pc, #196]	@ (8001794 <HAL_GPIO_Init+0x324>)
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001794 <HAL_GPIO_Init+0x324>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	43db      	mvns	r3, r3
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	4013      	ands	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d003      	beq.n	80016f8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016f8:	4a26      	ldr	r2, [pc, #152]	@ (8001794 <HAL_GPIO_Init+0x324>)
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016fe:	4b25      	ldr	r3, [pc, #148]	@ (8001794 <HAL_GPIO_Init+0x324>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	43db      	mvns	r3, r3
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4013      	ands	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d003      	beq.n	8001722 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	4313      	orrs	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001722:	4a1c      	ldr	r2, [pc, #112]	@ (8001794 <HAL_GPIO_Init+0x324>)
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001728:	4b1a      	ldr	r3, [pc, #104]	@ (8001794 <HAL_GPIO_Init+0x324>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	43db      	mvns	r3, r3
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	4013      	ands	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d003      	beq.n	800174c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	4313      	orrs	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800174c:	4a11      	ldr	r2, [pc, #68]	@ (8001794 <HAL_GPIO_Init+0x324>)
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	3301      	adds	r3, #1
 8001756:	61fb      	str	r3, [r7, #28]
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	2b0f      	cmp	r3, #15
 800175c:	f67f ae96 	bls.w	800148c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001760:	bf00      	nop
 8001762:	bf00      	nop
 8001764:	3724      	adds	r7, #36	@ 0x24
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	40023800 	.word	0x40023800
 8001774:	40013800 	.word	0x40013800
 8001778:	40020000 	.word	0x40020000
 800177c:	40020400 	.word	0x40020400
 8001780:	40020800 	.word	0x40020800
 8001784:	40020c00 	.word	0x40020c00
 8001788:	40021000 	.word	0x40021000
 800178c:	40021400 	.word	0x40021400
 8001790:	40021800 	.word	0x40021800
 8001794:	40013c00 	.word	0x40013c00

08001798 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	460b      	mov	r3, r1
 80017a2:	807b      	strh	r3, [r7, #2]
 80017a4:	4613      	mov	r3, r2
 80017a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017a8:	787b      	ldrb	r3, [r7, #1]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d003      	beq.n	80017b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017ae:	887a      	ldrh	r2, [r7, #2]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017b4:	e003      	b.n	80017be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017b6:	887b      	ldrh	r3, [r7, #2]
 80017b8:	041a      	lsls	r2, r3, #16
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	619a      	str	r2, [r3, #24]
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
	...

080017cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d101      	bne.n	80017de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e12b      	b.n	8001a36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d106      	bne.n	80017f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff fb12 	bl	8000e1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2224      	movs	r2, #36	@ 0x24
 80017fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f022 0201 	bic.w	r2, r2, #1
 800180e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800181e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800182e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001830:	f001 fa10 	bl	8002c54 <HAL_RCC_GetPCLK1Freq>
 8001834:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	4a81      	ldr	r2, [pc, #516]	@ (8001a40 <HAL_I2C_Init+0x274>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d807      	bhi.n	8001850 <HAL_I2C_Init+0x84>
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	4a80      	ldr	r2, [pc, #512]	@ (8001a44 <HAL_I2C_Init+0x278>)
 8001844:	4293      	cmp	r3, r2
 8001846:	bf94      	ite	ls
 8001848:	2301      	movls	r3, #1
 800184a:	2300      	movhi	r3, #0
 800184c:	b2db      	uxtb	r3, r3
 800184e:	e006      	b.n	800185e <HAL_I2C_Init+0x92>
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4a7d      	ldr	r2, [pc, #500]	@ (8001a48 <HAL_I2C_Init+0x27c>)
 8001854:	4293      	cmp	r3, r2
 8001856:	bf94      	ite	ls
 8001858:	2301      	movls	r3, #1
 800185a:	2300      	movhi	r3, #0
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e0e7      	b.n	8001a36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	4a78      	ldr	r2, [pc, #480]	@ (8001a4c <HAL_I2C_Init+0x280>)
 800186a:	fba2 2303 	umull	r2, r3, r2, r3
 800186e:	0c9b      	lsrs	r3, r3, #18
 8001870:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	68ba      	ldr	r2, [r7, #8]
 8001882:	430a      	orrs	r2, r1
 8001884:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	6a1b      	ldr	r3, [r3, #32]
 800188c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	4a6a      	ldr	r2, [pc, #424]	@ (8001a40 <HAL_I2C_Init+0x274>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d802      	bhi.n	80018a0 <HAL_I2C_Init+0xd4>
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	3301      	adds	r3, #1
 800189e:	e009      	b.n	80018b4 <HAL_I2C_Init+0xe8>
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80018a6:	fb02 f303 	mul.w	r3, r2, r3
 80018aa:	4a69      	ldr	r2, [pc, #420]	@ (8001a50 <HAL_I2C_Init+0x284>)
 80018ac:	fba2 2303 	umull	r2, r3, r2, r3
 80018b0:	099b      	lsrs	r3, r3, #6
 80018b2:	3301      	adds	r3, #1
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	6812      	ldr	r2, [r2, #0]
 80018b8:	430b      	orrs	r3, r1
 80018ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80018c6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	495c      	ldr	r1, [pc, #368]	@ (8001a40 <HAL_I2C_Init+0x274>)
 80018d0:	428b      	cmp	r3, r1
 80018d2:	d819      	bhi.n	8001908 <HAL_I2C_Init+0x13c>
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	1e59      	subs	r1, r3, #1
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	fbb1 f3f3 	udiv	r3, r1, r3
 80018e2:	1c59      	adds	r1, r3, #1
 80018e4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80018e8:	400b      	ands	r3, r1
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d00a      	beq.n	8001904 <HAL_I2C_Init+0x138>
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	1e59      	subs	r1, r3, #1
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80018fc:	3301      	adds	r3, #1
 80018fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001902:	e051      	b.n	80019a8 <HAL_I2C_Init+0x1dc>
 8001904:	2304      	movs	r3, #4
 8001906:	e04f      	b.n	80019a8 <HAL_I2C_Init+0x1dc>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d111      	bne.n	8001934 <HAL_I2C_Init+0x168>
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	1e58      	subs	r0, r3, #1
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6859      	ldr	r1, [r3, #4]
 8001918:	460b      	mov	r3, r1
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	440b      	add	r3, r1
 800191e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001922:	3301      	adds	r3, #1
 8001924:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001928:	2b00      	cmp	r3, #0
 800192a:	bf0c      	ite	eq
 800192c:	2301      	moveq	r3, #1
 800192e:	2300      	movne	r3, #0
 8001930:	b2db      	uxtb	r3, r3
 8001932:	e012      	b.n	800195a <HAL_I2C_Init+0x18e>
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	1e58      	subs	r0, r3, #1
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6859      	ldr	r1, [r3, #4]
 800193c:	460b      	mov	r3, r1
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	440b      	add	r3, r1
 8001942:	0099      	lsls	r1, r3, #2
 8001944:	440b      	add	r3, r1
 8001946:	fbb0 f3f3 	udiv	r3, r0, r3
 800194a:	3301      	adds	r3, #1
 800194c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001950:	2b00      	cmp	r3, #0
 8001952:	bf0c      	ite	eq
 8001954:	2301      	moveq	r3, #1
 8001956:	2300      	movne	r3, #0
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <HAL_I2C_Init+0x196>
 800195e:	2301      	movs	r3, #1
 8001960:	e022      	b.n	80019a8 <HAL_I2C_Init+0x1dc>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d10e      	bne.n	8001988 <HAL_I2C_Init+0x1bc>
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	1e58      	subs	r0, r3, #1
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6859      	ldr	r1, [r3, #4]
 8001972:	460b      	mov	r3, r1
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	440b      	add	r3, r1
 8001978:	fbb0 f3f3 	udiv	r3, r0, r3
 800197c:	3301      	adds	r3, #1
 800197e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001982:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001986:	e00f      	b.n	80019a8 <HAL_I2C_Init+0x1dc>
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	1e58      	subs	r0, r3, #1
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6859      	ldr	r1, [r3, #4]
 8001990:	460b      	mov	r3, r1
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	440b      	add	r3, r1
 8001996:	0099      	lsls	r1, r3, #2
 8001998:	440b      	add	r3, r1
 800199a:	fbb0 f3f3 	udiv	r3, r0, r3
 800199e:	3301      	adds	r3, #1
 80019a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80019a8:	6879      	ldr	r1, [r7, #4]
 80019aa:	6809      	ldr	r1, [r1, #0]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	69da      	ldr	r2, [r3, #28]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a1b      	ldr	r3, [r3, #32]
 80019c2:	431a      	orrs	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	430a      	orrs	r2, r1
 80019ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80019d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	6911      	ldr	r1, [r2, #16]
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	68d2      	ldr	r2, [r2, #12]
 80019e2:	4311      	orrs	r1, r2
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	6812      	ldr	r2, [r2, #0]
 80019e8:	430b      	orrs	r3, r1
 80019ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	695a      	ldr	r2, [r3, #20]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	431a      	orrs	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	430a      	orrs	r2, r1
 8001a06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f042 0201 	orr.w	r2, r2, #1
 8001a16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2220      	movs	r2, #32
 8001a22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	000186a0 	.word	0x000186a0
 8001a44:	001e847f 	.word	0x001e847f
 8001a48:	003d08ff 	.word	0x003d08ff
 8001a4c:	431bde83 	.word	0x431bde83
 8001a50:	10624dd3 	.word	0x10624dd3

08001a54 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b088      	sub	sp, #32
 8001a58:	af02      	add	r7, sp, #8
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	4608      	mov	r0, r1
 8001a5e:	4611      	mov	r1, r2
 8001a60:	461a      	mov	r2, r3
 8001a62:	4603      	mov	r3, r0
 8001a64:	817b      	strh	r3, [r7, #10]
 8001a66:	460b      	mov	r3, r1
 8001a68:	813b      	strh	r3, [r7, #8]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a6e:	f7ff fbe9 	bl	8001244 <HAL_GetTick>
 8001a72:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	2b20      	cmp	r3, #32
 8001a7e:	f040 80d9 	bne.w	8001c34 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	2319      	movs	r3, #25
 8001a88:	2201      	movs	r2, #1
 8001a8a:	496d      	ldr	r1, [pc, #436]	@ (8001c40 <HAL_I2C_Mem_Write+0x1ec>)
 8001a8c:	68f8      	ldr	r0, [r7, #12]
 8001a8e:	f000 fdb9 	bl	8002604 <I2C_WaitOnFlagUntilTimeout>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	e0cc      	b.n	8001c36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d101      	bne.n	8001aaa <HAL_I2C_Mem_Write+0x56>
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	e0c5      	b.n	8001c36 <HAL_I2C_Mem_Write+0x1e2>
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2201      	movs	r2, #1
 8001aae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d007      	beq.n	8001ad0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f042 0201 	orr.w	r2, r2, #1
 8001ace:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ade:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2221      	movs	r2, #33	@ 0x21
 8001ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2240      	movs	r2, #64	@ 0x40
 8001aec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2200      	movs	r2, #0
 8001af4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6a3a      	ldr	r2, [r7, #32]
 8001afa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001b00:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	4a4d      	ldr	r2, [pc, #308]	@ (8001c44 <HAL_I2C_Mem_Write+0x1f0>)
 8001b10:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b12:	88f8      	ldrh	r0, [r7, #6]
 8001b14:	893a      	ldrh	r2, [r7, #8]
 8001b16:	8979      	ldrh	r1, [r7, #10]
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	9301      	str	r3, [sp, #4]
 8001b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	4603      	mov	r3, r0
 8001b22:	68f8      	ldr	r0, [r7, #12]
 8001b24:	f000 fbf0 	bl	8002308 <I2C_RequestMemoryWrite>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d052      	beq.n	8001bd4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e081      	b.n	8001c36 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	f000 fe7e 	bl	8002838 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d00d      	beq.n	8001b5e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b46:	2b04      	cmp	r3, #4
 8001b48:	d107      	bne.n	8001b5a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b58:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e06b      	b.n	8001c36 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b62:	781a      	ldrb	r2, [r3, #0]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b6e:	1c5a      	adds	r2, r3, #1
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	3b01      	subs	r3, #1
 8001b88:	b29a      	uxth	r2, r3
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	695b      	ldr	r3, [r3, #20]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	2b04      	cmp	r3, #4
 8001b9a:	d11b      	bne.n	8001bd4 <HAL_I2C_Mem_Write+0x180>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d017      	beq.n	8001bd4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba8:	781a      	ldrb	r2, [r3, #0]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb4:	1c5a      	adds	r2, r3, #1
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1aa      	bne.n	8001b32 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bdc:	697a      	ldr	r2, [r7, #20]
 8001bde:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001be0:	68f8      	ldr	r0, [r7, #12]
 8001be2:	f000 fe71 	bl	80028c8 <I2C_WaitOnBTFFlagUntilTimeout>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d00d      	beq.n	8001c08 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf0:	2b04      	cmp	r3, #4
 8001bf2:	d107      	bne.n	8001c04 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c02:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e016      	b.n	8001c36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2220      	movs	r2, #32
 8001c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001c30:	2300      	movs	r3, #0
 8001c32:	e000      	b.n	8001c36 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001c34:	2302      	movs	r3, #2
  }
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	00100002 	.word	0x00100002
 8001c44:	ffff0000 	.word	0xffff0000

08001c48 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08c      	sub	sp, #48	@ 0x30
 8001c4c:	af02      	add	r7, sp, #8
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	4608      	mov	r0, r1
 8001c52:	4611      	mov	r1, r2
 8001c54:	461a      	mov	r2, r3
 8001c56:	4603      	mov	r3, r0
 8001c58:	817b      	strh	r3, [r7, #10]
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	813b      	strh	r3, [r7, #8]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c62:	f7ff faef 	bl	8001244 <HAL_GetTick>
 8001c66:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	2b20      	cmp	r3, #32
 8001c72:	f040 8214 	bne.w	800209e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	2319      	movs	r3, #25
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	497b      	ldr	r1, [pc, #492]	@ (8001e6c <HAL_I2C_Mem_Read+0x224>)
 8001c80:	68f8      	ldr	r0, [r7, #12]
 8001c82:	f000 fcbf 	bl	8002604 <I2C_WaitOnFlagUntilTimeout>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	e207      	b.n	80020a0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d101      	bne.n	8001c9e <HAL_I2C_Mem_Read+0x56>
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	e200      	b.n	80020a0 <HAL_I2C_Mem_Read+0x458>
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0301 	and.w	r3, r3, #1
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d007      	beq.n	8001cc4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f042 0201 	orr.w	r2, r2, #1
 8001cc2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001cd2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2222      	movs	r2, #34	@ 0x22
 8001cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2240      	movs	r2, #64	@ 0x40
 8001ce0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001cee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001cf4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	4a5b      	ldr	r2, [pc, #364]	@ (8001e70 <HAL_I2C_Mem_Read+0x228>)
 8001d04:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d06:	88f8      	ldrh	r0, [r7, #6]
 8001d08:	893a      	ldrh	r2, [r7, #8]
 8001d0a:	8979      	ldrh	r1, [r7, #10]
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d0e:	9301      	str	r3, [sp, #4]
 8001d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d12:	9300      	str	r3, [sp, #0]
 8001d14:	4603      	mov	r3, r0
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	f000 fb8c 	bl	8002434 <I2C_RequestMemoryRead>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e1bc      	b.n	80020a0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d113      	bne.n	8001d56 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d2e:	2300      	movs	r3, #0
 8001d30:	623b      	str	r3, [r7, #32]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	695b      	ldr	r3, [r3, #20]
 8001d38:	623b      	str	r3, [r7, #32]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	623b      	str	r3, [r7, #32]
 8001d42:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	e190      	b.n	8002078 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d11b      	bne.n	8001d96 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61fb      	str	r3, [r7, #28]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	695b      	ldr	r3, [r3, #20]
 8001d78:	61fb      	str	r3, [r7, #28]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	61fb      	str	r3, [r7, #28]
 8001d82:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	e170      	b.n	8002078 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d11b      	bne.n	8001dd6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001dac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001dbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61bb      	str	r3, [r7, #24]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	695b      	ldr	r3, [r3, #20]
 8001dc8:	61bb      	str	r3, [r7, #24]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	61bb      	str	r3, [r7, #24]
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	e150      	b.n	8002078 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	617b      	str	r3, [r7, #20]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	695b      	ldr	r3, [r3, #20]
 8001de0:	617b      	str	r3, [r7, #20]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	617b      	str	r3, [r7, #20]
 8001dea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001dec:	e144      	b.n	8002078 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001df2:	2b03      	cmp	r3, #3
 8001df4:	f200 80f1 	bhi.w	8001fda <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d123      	bne.n	8001e48 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e02:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001e04:	68f8      	ldr	r0, [r7, #12]
 8001e06:	f000 fda7 	bl	8002958 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e145      	b.n	80020a0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	691a      	ldr	r2, [r3, #16]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e1e:	b2d2      	uxtb	r2, r2
 8001e20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e26:	1c5a      	adds	r2, r3, #1
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e30:	3b01      	subs	r3, #1
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001e46:	e117      	b.n	8002078 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d14e      	bne.n	8001eee <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e52:	9300      	str	r3, [sp, #0]
 8001e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e56:	2200      	movs	r2, #0
 8001e58:	4906      	ldr	r1, [pc, #24]	@ (8001e74 <HAL_I2C_Mem_Read+0x22c>)
 8001e5a:	68f8      	ldr	r0, [r7, #12]
 8001e5c:	f000 fbd2 	bl	8002604 <I2C_WaitOnFlagUntilTimeout>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d008      	beq.n	8001e78 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e11a      	b.n	80020a0 <HAL_I2C_Mem_Read+0x458>
 8001e6a:	bf00      	nop
 8001e6c:	00100002 	.word	0x00100002
 8001e70:	ffff0000 	.word	0xffff0000
 8001e74:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	691a      	ldr	r2, [r3, #16]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e92:	b2d2      	uxtb	r2, r2
 8001e94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e9a:	1c5a      	adds	r2, r3, #1
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	691a      	ldr	r2, [r3, #16]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec4:	b2d2      	uxtb	r2, r2
 8001ec6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ecc:	1c5a      	adds	r2, r3, #1
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	3b01      	subs	r3, #1
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001eec:	e0c4      	b.n	8002078 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef0:	9300      	str	r3, [sp, #0]
 8001ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	496c      	ldr	r1, [pc, #432]	@ (80020a8 <HAL_I2C_Mem_Read+0x460>)
 8001ef8:	68f8      	ldr	r0, [r7, #12]
 8001efa:	f000 fb83 	bl	8002604 <I2C_WaitOnFlagUntilTimeout>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e0cb      	b.n	80020a0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	691a      	ldr	r2, [r3, #16]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f2a:	1c5a      	adds	r2, r3, #1
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f34:	3b01      	subs	r3, #1
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	3b01      	subs	r3, #1
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f50:	2200      	movs	r2, #0
 8001f52:	4955      	ldr	r1, [pc, #340]	@ (80020a8 <HAL_I2C_Mem_Read+0x460>)
 8001f54:	68f8      	ldr	r0, [r7, #12]
 8001f56:	f000 fb55 	bl	8002604 <I2C_WaitOnFlagUntilTimeout>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e09d      	b.n	80020a0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	691a      	ldr	r2, [r3, #16]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f86:	1c5a      	adds	r2, r3, #1
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f90:	3b01      	subs	r3, #1
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	691a      	ldr	r2, [r3, #16]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb0:	b2d2      	uxtb	r2, r2
 8001fb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb8:	1c5a      	adds	r2, r3, #1
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001fd8:	e04e      	b.n	8002078 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fdc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	f000 fcba 	bl	8002958 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e058      	b.n	80020a0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	691a      	ldr	r2, [r3, #16]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff8:	b2d2      	uxtb	r2, r2
 8001ffa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002000:	1c5a      	adds	r2, r3, #1
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800200a:	3b01      	subs	r3, #1
 800200c:	b29a      	uxth	r2, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002016:	b29b      	uxth	r3, r3
 8002018:	3b01      	subs	r3, #1
 800201a:	b29a      	uxth	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	f003 0304 	and.w	r3, r3, #4
 800202a:	2b04      	cmp	r3, #4
 800202c:	d124      	bne.n	8002078 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002032:	2b03      	cmp	r3, #3
 8002034:	d107      	bne.n	8002046 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002044:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	691a      	ldr	r2, [r3, #16]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002050:	b2d2      	uxtb	r2, r2
 8002052:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002058:	1c5a      	adds	r2, r3, #1
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002062:	3b01      	subs	r3, #1
 8002064:	b29a      	uxth	r2, r3
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800206e:	b29b      	uxth	r3, r3
 8002070:	3b01      	subs	r3, #1
 8002072:	b29a      	uxth	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800207c:	2b00      	cmp	r3, #0
 800207e:	f47f aeb6 	bne.w	8001dee <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2220      	movs	r2, #32
 8002086:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800209a:	2300      	movs	r3, #0
 800209c:	e000      	b.n	80020a0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800209e:	2302      	movs	r3, #2
  }
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3728      	adds	r7, #40	@ 0x28
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	00010004 	.word	0x00010004

080020ac <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b08a      	sub	sp, #40	@ 0x28
 80020b0:	af02      	add	r7, sp, #8
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	607a      	str	r2, [r7, #4]
 80020b6:	603b      	str	r3, [r7, #0]
 80020b8:	460b      	mov	r3, r1
 80020ba:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80020bc:	f7ff f8c2 	bl	8001244 <HAL_GetTick>
 80020c0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b20      	cmp	r3, #32
 80020d0:	f040 8111 	bne.w	80022f6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	9300      	str	r3, [sp, #0]
 80020d8:	2319      	movs	r3, #25
 80020da:	2201      	movs	r2, #1
 80020dc:	4988      	ldr	r1, [pc, #544]	@ (8002300 <HAL_I2C_IsDeviceReady+0x254>)
 80020de:	68f8      	ldr	r0, [r7, #12]
 80020e0:	f000 fa90 	bl	8002604 <I2C_WaitOnFlagUntilTimeout>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80020ea:	2302      	movs	r3, #2
 80020ec:	e104      	b.n	80022f8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d101      	bne.n	80020fc <HAL_I2C_IsDeviceReady+0x50>
 80020f8:	2302      	movs	r3, #2
 80020fa:	e0fd      	b.n	80022f8 <HAL_I2C_IsDeviceReady+0x24c>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b01      	cmp	r3, #1
 8002110:	d007      	beq.n	8002122 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f042 0201 	orr.w	r2, r2, #1
 8002120:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002130:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2224      	movs	r2, #36	@ 0x24
 8002136:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2200      	movs	r2, #0
 800213e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4a70      	ldr	r2, [pc, #448]	@ (8002304 <HAL_I2C_IsDeviceReady+0x258>)
 8002144:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002154:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	2200      	movs	r2, #0
 800215e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	f000 fa4e 	bl	8002604 <I2C_WaitOnFlagUntilTimeout>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00d      	beq.n	800218a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002178:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800217c:	d103      	bne.n	8002186 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002184:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e0b6      	b.n	80022f8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800218a:	897b      	ldrh	r3, [r7, #10]
 800218c:	b2db      	uxtb	r3, r3
 800218e:	461a      	mov	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002198:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800219a:	f7ff f853 	bl	8001244 <HAL_GetTick>
 800219e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	bf0c      	ite	eq
 80021ae:	2301      	moveq	r3, #1
 80021b0:	2300      	movne	r3, #0
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021c4:	bf0c      	ite	eq
 80021c6:	2301      	moveq	r3, #1
 80021c8:	2300      	movne	r3, #0
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80021ce:	e025      	b.n	800221c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80021d0:	f7ff f838 	bl	8001244 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d302      	bcc.n	80021e6 <HAL_I2C_IsDeviceReady+0x13a>
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d103      	bne.n	80021ee <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	22a0      	movs	r2, #160	@ 0xa0
 80021ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	bf0c      	ite	eq
 80021fc:	2301      	moveq	r3, #1
 80021fe:	2300      	movne	r3, #0
 8002200:	b2db      	uxtb	r3, r3
 8002202:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800220e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002212:	bf0c      	ite	eq
 8002214:	2301      	moveq	r3, #1
 8002216:	2300      	movne	r3, #0
 8002218:	b2db      	uxtb	r3, r3
 800221a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002222:	b2db      	uxtb	r3, r3
 8002224:	2ba0      	cmp	r3, #160	@ 0xa0
 8002226:	d005      	beq.n	8002234 <HAL_I2C_IsDeviceReady+0x188>
 8002228:	7dfb      	ldrb	r3, [r7, #23]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d102      	bne.n	8002234 <HAL_I2C_IsDeviceReady+0x188>
 800222e:	7dbb      	ldrb	r3, [r7, #22]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d0cd      	beq.n	80021d0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2220      	movs	r2, #32
 8002238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b02      	cmp	r3, #2
 8002248:	d129      	bne.n	800229e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002258:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800225a:	2300      	movs	r3, #0
 800225c:	613b      	str	r3, [r7, #16]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	613b      	str	r3, [r7, #16]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	9300      	str	r3, [sp, #0]
 8002274:	2319      	movs	r3, #25
 8002276:	2201      	movs	r2, #1
 8002278:	4921      	ldr	r1, [pc, #132]	@ (8002300 <HAL_I2C_IsDeviceReady+0x254>)
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f000 f9c2 	bl	8002604 <I2C_WaitOnFlagUntilTimeout>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e036      	b.n	80022f8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2220      	movs	r2, #32
 800228e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800229a:	2300      	movs	r3, #0
 800229c:	e02c      	b.n	80022f8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022ac:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80022b6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	9300      	str	r3, [sp, #0]
 80022bc:	2319      	movs	r3, #25
 80022be:	2201      	movs	r2, #1
 80022c0:	490f      	ldr	r1, [pc, #60]	@ (8002300 <HAL_I2C_IsDeviceReady+0x254>)
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f000 f99e 	bl	8002604 <I2C_WaitOnFlagUntilTimeout>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e012      	b.n	80022f8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	3301      	adds	r3, #1
 80022d6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	429a      	cmp	r2, r3
 80022de:	f4ff af32 	bcc.w	8002146 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2220      	movs	r2, #32
 80022e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e000      	b.n	80022f8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80022f6:	2302      	movs	r3, #2
  }
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3720      	adds	r7, #32
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	00100002 	.word	0x00100002
 8002304:	ffff0000 	.word	0xffff0000

08002308 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b088      	sub	sp, #32
 800230c:	af02      	add	r7, sp, #8
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	4608      	mov	r0, r1
 8002312:	4611      	mov	r1, r2
 8002314:	461a      	mov	r2, r3
 8002316:	4603      	mov	r3, r0
 8002318:	817b      	strh	r3, [r7, #10]
 800231a:	460b      	mov	r3, r1
 800231c:	813b      	strh	r3, [r7, #8]
 800231e:	4613      	mov	r3, r2
 8002320:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002330:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	6a3b      	ldr	r3, [r7, #32]
 8002338:	2200      	movs	r2, #0
 800233a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f000 f960 	bl	8002604 <I2C_WaitOnFlagUntilTimeout>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00d      	beq.n	8002366 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002354:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002358:	d103      	bne.n	8002362 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002360:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e05f      	b.n	8002426 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002366:	897b      	ldrh	r3, [r7, #10]
 8002368:	b2db      	uxtb	r3, r3
 800236a:	461a      	mov	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002374:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002378:	6a3a      	ldr	r2, [r7, #32]
 800237a:	492d      	ldr	r1, [pc, #180]	@ (8002430 <I2C_RequestMemoryWrite+0x128>)
 800237c:	68f8      	ldr	r0, [r7, #12]
 800237e:	f000 f9bb 	bl	80026f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e04c      	b.n	8002426 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800238c:	2300      	movs	r3, #0
 800238e:	617b      	str	r3, [r7, #20]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	617b      	str	r3, [r7, #20]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	617b      	str	r3, [r7, #20]
 80023a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023a4:	6a39      	ldr	r1, [r7, #32]
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f000 fa46 	bl	8002838 <I2C_WaitOnTXEFlagUntilTimeout>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00d      	beq.n	80023ce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	d107      	bne.n	80023ca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e02b      	b.n	8002426 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80023ce:	88fb      	ldrh	r3, [r7, #6]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d105      	bne.n	80023e0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80023d4:	893b      	ldrh	r3, [r7, #8]
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	611a      	str	r2, [r3, #16]
 80023de:	e021      	b.n	8002424 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80023e0:	893b      	ldrh	r3, [r7, #8]
 80023e2:	0a1b      	lsrs	r3, r3, #8
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023f0:	6a39      	ldr	r1, [r7, #32]
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f000 fa20 	bl	8002838 <I2C_WaitOnTXEFlagUntilTimeout>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00d      	beq.n	800241a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002402:	2b04      	cmp	r3, #4
 8002404:	d107      	bne.n	8002416 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002414:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e005      	b.n	8002426 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800241a:	893b      	ldrh	r3, [r7, #8]
 800241c:	b2da      	uxtb	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3718      	adds	r7, #24
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	00010002 	.word	0x00010002

08002434 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b088      	sub	sp, #32
 8002438:	af02      	add	r7, sp, #8
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	4608      	mov	r0, r1
 800243e:	4611      	mov	r1, r2
 8002440:	461a      	mov	r2, r3
 8002442:	4603      	mov	r3, r0
 8002444:	817b      	strh	r3, [r7, #10]
 8002446:	460b      	mov	r3, r1
 8002448:	813b      	strh	r3, [r7, #8]
 800244a:	4613      	mov	r3, r2
 800244c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800245c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800246c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800246e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	6a3b      	ldr	r3, [r7, #32]
 8002474:	2200      	movs	r2, #0
 8002476:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f000 f8c2 	bl	8002604 <I2C_WaitOnFlagUntilTimeout>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00d      	beq.n	80024a2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002490:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002494:	d103      	bne.n	800249e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800249c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e0aa      	b.n	80025f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024a2:	897b      	ldrh	r3, [r7, #10]
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	461a      	mov	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80024b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b4:	6a3a      	ldr	r2, [r7, #32]
 80024b6:	4952      	ldr	r1, [pc, #328]	@ (8002600 <I2C_RequestMemoryRead+0x1cc>)
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f000 f91d 	bl	80026f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e097      	b.n	80025f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024c8:	2300      	movs	r3, #0
 80024ca:	617b      	str	r3, [r7, #20]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	617b      	str	r3, [r7, #20]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	617b      	str	r3, [r7, #20]
 80024dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024e0:	6a39      	ldr	r1, [r7, #32]
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f000 f9a8 	bl	8002838 <I2C_WaitOnTXEFlagUntilTimeout>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00d      	beq.n	800250a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f2:	2b04      	cmp	r3, #4
 80024f4:	d107      	bne.n	8002506 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002504:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e076      	b.n	80025f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800250a:	88fb      	ldrh	r3, [r7, #6]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d105      	bne.n	800251c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002510:	893b      	ldrh	r3, [r7, #8]
 8002512:	b2da      	uxtb	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	611a      	str	r2, [r3, #16]
 800251a:	e021      	b.n	8002560 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800251c:	893b      	ldrh	r3, [r7, #8]
 800251e:	0a1b      	lsrs	r3, r3, #8
 8002520:	b29b      	uxth	r3, r3
 8002522:	b2da      	uxtb	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800252a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800252c:	6a39      	ldr	r1, [r7, #32]
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f000 f982 	bl	8002838 <I2C_WaitOnTXEFlagUntilTimeout>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00d      	beq.n	8002556 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253e:	2b04      	cmp	r3, #4
 8002540:	d107      	bne.n	8002552 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002550:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e050      	b.n	80025f8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002556:	893b      	ldrh	r3, [r7, #8]
 8002558:	b2da      	uxtb	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002560:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002562:	6a39      	ldr	r1, [r7, #32]
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f000 f967 	bl	8002838 <I2C_WaitOnTXEFlagUntilTimeout>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00d      	beq.n	800258c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002574:	2b04      	cmp	r3, #4
 8002576:	d107      	bne.n	8002588 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002586:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e035      	b.n	80025f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800259a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800259c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259e:	9300      	str	r3, [sp, #0]
 80025a0:	6a3b      	ldr	r3, [r7, #32]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f000 f82b 	bl	8002604 <I2C_WaitOnFlagUntilTimeout>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00d      	beq.n	80025d0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025c2:	d103      	bne.n	80025cc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025ca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e013      	b.n	80025f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80025d0:	897b      	ldrh	r3, [r7, #10]
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e2:	6a3a      	ldr	r2, [r7, #32]
 80025e4:	4906      	ldr	r1, [pc, #24]	@ (8002600 <I2C_RequestMemoryRead+0x1cc>)
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	f000 f886 	bl	80026f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e000      	b.n	80025f8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3718      	adds	r7, #24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	00010002 	.word	0x00010002

08002604 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	603b      	str	r3, [r7, #0]
 8002610:	4613      	mov	r3, r2
 8002612:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002614:	e048      	b.n	80026a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800261c:	d044      	beq.n	80026a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800261e:	f7fe fe11 	bl	8001244 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	429a      	cmp	r2, r3
 800262c:	d302      	bcc.n	8002634 <I2C_WaitOnFlagUntilTimeout+0x30>
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d139      	bne.n	80026a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	0c1b      	lsrs	r3, r3, #16
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b01      	cmp	r3, #1
 800263c:	d10d      	bne.n	800265a <I2C_WaitOnFlagUntilTimeout+0x56>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	43da      	mvns	r2, r3
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	4013      	ands	r3, r2
 800264a:	b29b      	uxth	r3, r3
 800264c:	2b00      	cmp	r3, #0
 800264e:	bf0c      	ite	eq
 8002650:	2301      	moveq	r3, #1
 8002652:	2300      	movne	r3, #0
 8002654:	b2db      	uxtb	r3, r3
 8002656:	461a      	mov	r2, r3
 8002658:	e00c      	b.n	8002674 <I2C_WaitOnFlagUntilTimeout+0x70>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	43da      	mvns	r2, r3
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	4013      	ands	r3, r2
 8002666:	b29b      	uxth	r3, r3
 8002668:	2b00      	cmp	r3, #0
 800266a:	bf0c      	ite	eq
 800266c:	2301      	moveq	r3, #1
 800266e:	2300      	movne	r3, #0
 8002670:	b2db      	uxtb	r3, r3
 8002672:	461a      	mov	r2, r3
 8002674:	79fb      	ldrb	r3, [r7, #7]
 8002676:	429a      	cmp	r2, r3
 8002678:	d116      	bne.n	80026a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2220      	movs	r2, #32
 8002684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002694:	f043 0220 	orr.w	r2, r3, #32
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e023      	b.n	80026f0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	0c1b      	lsrs	r3, r3, #16
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d10d      	bne.n	80026ce <I2C_WaitOnFlagUntilTimeout+0xca>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	43da      	mvns	r2, r3
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	4013      	ands	r3, r2
 80026be:	b29b      	uxth	r3, r3
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	bf0c      	ite	eq
 80026c4:	2301      	moveq	r3, #1
 80026c6:	2300      	movne	r3, #0
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	461a      	mov	r2, r3
 80026cc:	e00c      	b.n	80026e8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	43da      	mvns	r2, r3
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	4013      	ands	r3, r2
 80026da:	b29b      	uxth	r3, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	bf0c      	ite	eq
 80026e0:	2301      	moveq	r3, #1
 80026e2:	2300      	movne	r3, #0
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	461a      	mov	r2, r3
 80026e8:	79fb      	ldrb	r3, [r7, #7]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d093      	beq.n	8002616 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
 8002704:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002706:	e071      	b.n	80027ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002712:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002716:	d123      	bne.n	8002760 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002726:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002730:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2220      	movs	r2, #32
 800273c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274c:	f043 0204 	orr.w	r2, r3, #4
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e067      	b.n	8002830 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002766:	d041      	beq.n	80027ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002768:	f7fe fd6c 	bl	8001244 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	429a      	cmp	r2, r3
 8002776:	d302      	bcc.n	800277e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d136      	bne.n	80027ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	0c1b      	lsrs	r3, r3, #16
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b01      	cmp	r3, #1
 8002786:	d10c      	bne.n	80027a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	43da      	mvns	r2, r3
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	4013      	ands	r3, r2
 8002794:	b29b      	uxth	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	bf14      	ite	ne
 800279a:	2301      	movne	r3, #1
 800279c:	2300      	moveq	r3, #0
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	e00b      	b.n	80027ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	43da      	mvns	r2, r3
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	4013      	ands	r3, r2
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	bf14      	ite	ne
 80027b4:	2301      	movne	r3, #1
 80027b6:	2300      	moveq	r3, #0
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d016      	beq.n	80027ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2220      	movs	r2, #32
 80027c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d8:	f043 0220 	orr.w	r2, r3, #32
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e021      	b.n	8002830 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	0c1b      	lsrs	r3, r3, #16
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d10c      	bne.n	8002810 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	695b      	ldr	r3, [r3, #20]
 80027fc:	43da      	mvns	r2, r3
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	4013      	ands	r3, r2
 8002802:	b29b      	uxth	r3, r3
 8002804:	2b00      	cmp	r3, #0
 8002806:	bf14      	ite	ne
 8002808:	2301      	movne	r3, #1
 800280a:	2300      	moveq	r3, #0
 800280c:	b2db      	uxtb	r3, r3
 800280e:	e00b      	b.n	8002828 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	43da      	mvns	r2, r3
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	4013      	ands	r3, r2
 800281c:	b29b      	uxth	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	bf14      	ite	ne
 8002822:	2301      	movne	r3, #1
 8002824:	2300      	moveq	r3, #0
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b00      	cmp	r3, #0
 800282a:	f47f af6d 	bne.w	8002708 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002844:	e034      	b.n	80028b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 f8e3 	bl	8002a12 <I2C_IsAcknowledgeFailed>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e034      	b.n	80028c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800285c:	d028      	beq.n	80028b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800285e:	f7fe fcf1 	bl	8001244 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	68ba      	ldr	r2, [r7, #8]
 800286a:	429a      	cmp	r2, r3
 800286c:	d302      	bcc.n	8002874 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d11d      	bne.n	80028b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800287e:	2b80      	cmp	r3, #128	@ 0x80
 8002880:	d016      	beq.n	80028b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2220      	movs	r2, #32
 800288c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289c:	f043 0220 	orr.w	r2, r3, #32
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e007      	b.n	80028c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ba:	2b80      	cmp	r3, #128	@ 0x80
 80028bc:	d1c3      	bne.n	8002846 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028d4:	e034      	b.n	8002940 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 f89b 	bl	8002a12 <I2C_IsAcknowledgeFailed>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e034      	b.n	8002950 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80028ec:	d028      	beq.n	8002940 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ee:	f7fe fca9 	bl	8001244 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	68ba      	ldr	r2, [r7, #8]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d302      	bcc.n	8002904 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d11d      	bne.n	8002940 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	f003 0304 	and.w	r3, r3, #4
 800290e:	2b04      	cmp	r3, #4
 8002910:	d016      	beq.n	8002940 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2220      	movs	r2, #32
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292c:	f043 0220 	orr.w	r2, r3, #32
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e007      	b.n	8002950 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	f003 0304 	and.w	r3, r3, #4
 800294a:	2b04      	cmp	r3, #4
 800294c:	d1c3      	bne.n	80028d6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3710      	adds	r7, #16
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002964:	e049      	b.n	80029fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	695b      	ldr	r3, [r3, #20]
 800296c:	f003 0310 	and.w	r3, r3, #16
 8002970:	2b10      	cmp	r3, #16
 8002972:	d119      	bne.n	80029a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f06f 0210 	mvn.w	r2, #16
 800297c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2200      	movs	r2, #0
 8002982:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2220      	movs	r2, #32
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e030      	b.n	8002a0a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029a8:	f7fe fc4c 	bl	8001244 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d302      	bcc.n	80029be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d11d      	bne.n	80029fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029c8:	2b40      	cmp	r3, #64	@ 0x40
 80029ca:	d016      	beq.n	80029fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2220      	movs	r2, #32
 80029d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e6:	f043 0220 	orr.w	r2, r3, #32
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e007      	b.n	8002a0a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a04:	2b40      	cmp	r3, #64	@ 0x40
 8002a06:	d1ae      	bne.n	8002966 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b083      	sub	sp, #12
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a28:	d11b      	bne.n	8002a62 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a32:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2220      	movs	r2, #32
 8002a3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4e:	f043 0204 	orr.w	r2, r3, #4
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e000      	b.n	8002a64 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d101      	bne.n	8002a84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e0cc      	b.n	8002c1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a84:	4b68      	ldr	r3, [pc, #416]	@ (8002c28 <HAL_RCC_ClockConfig+0x1b8>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 030f 	and.w	r3, r3, #15
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d90c      	bls.n	8002aac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a92:	4b65      	ldr	r3, [pc, #404]	@ (8002c28 <HAL_RCC_ClockConfig+0x1b8>)
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a9a:	4b63      	ldr	r3, [pc, #396]	@ (8002c28 <HAL_RCC_ClockConfig+0x1b8>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 030f 	and.w	r3, r3, #15
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d001      	beq.n	8002aac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e0b8      	b.n	8002c1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d020      	beq.n	8002afa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d005      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ac4:	4b59      	ldr	r3, [pc, #356]	@ (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	4a58      	ldr	r2, [pc, #352]	@ (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002aca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002ace:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0308 	and.w	r3, r3, #8
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d005      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002adc:	4b53      	ldr	r3, [pc, #332]	@ (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	4a52      	ldr	r2, [pc, #328]	@ (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002ae2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002ae6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ae8:	4b50      	ldr	r3, [pc, #320]	@ (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	494d      	ldr	r1, [pc, #308]	@ (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d044      	beq.n	8002b90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d107      	bne.n	8002b1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0e:	4b47      	ldr	r3, [pc, #284]	@ (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d119      	bne.n	8002b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e07f      	b.n	8002c1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d003      	beq.n	8002b2e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b2a:	2b03      	cmp	r3, #3
 8002b2c:	d107      	bne.n	8002b3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b2e:	4b3f      	ldr	r3, [pc, #252]	@ (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d109      	bne.n	8002b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e06f      	b.n	8002c1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b3e:	4b3b      	ldr	r3, [pc, #236]	@ (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e067      	b.n	8002c1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b4e:	4b37      	ldr	r3, [pc, #220]	@ (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f023 0203 	bic.w	r2, r3, #3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	4934      	ldr	r1, [pc, #208]	@ (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b60:	f7fe fb70 	bl	8001244 <HAL_GetTick>
 8002b64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b66:	e00a      	b.n	8002b7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b68:	f7fe fb6c 	bl	8001244 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e04f      	b.n	8002c1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b7e:	4b2b      	ldr	r3, [pc, #172]	@ (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f003 020c 	and.w	r2, r3, #12
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d1eb      	bne.n	8002b68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b90:	4b25      	ldr	r3, [pc, #148]	@ (8002c28 <HAL_RCC_ClockConfig+0x1b8>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 030f 	and.w	r3, r3, #15
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d20c      	bcs.n	8002bb8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b9e:	4b22      	ldr	r3, [pc, #136]	@ (8002c28 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	b2d2      	uxtb	r2, r2
 8002ba4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ba6:	4b20      	ldr	r3, [pc, #128]	@ (8002c28 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d001      	beq.n	8002bb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e032      	b.n	8002c1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d008      	beq.n	8002bd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bc4:	4b19      	ldr	r3, [pc, #100]	@ (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	4916      	ldr	r1, [pc, #88]	@ (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0308 	and.w	r3, r3, #8
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d009      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002be2:	4b12      	ldr	r3, [pc, #72]	@ (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	490e      	ldr	r1, [pc, #56]	@ (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bf6:	f000 f855 	bl	8002ca4 <HAL_RCC_GetSysClockFreq>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	091b      	lsrs	r3, r3, #4
 8002c02:	f003 030f 	and.w	r3, r3, #15
 8002c06:	490a      	ldr	r1, [pc, #40]	@ (8002c30 <HAL_RCC_ClockConfig+0x1c0>)
 8002c08:	5ccb      	ldrb	r3, [r1, r3]
 8002c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c0e:	4a09      	ldr	r2, [pc, #36]	@ (8002c34 <HAL_RCC_ClockConfig+0x1c4>)
 8002c10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002c12:	4b09      	ldr	r3, [pc, #36]	@ (8002c38 <HAL_RCC_ClockConfig+0x1c8>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7fe fad0 	bl	80011bc <HAL_InitTick>

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	40023c00 	.word	0x40023c00
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	080052dc 	.word	0x080052dc
 8002c34:	20000004 	.word	0x20000004
 8002c38:	20000008 	.word	0x20000008

08002c3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c40:	4b03      	ldr	r3, [pc, #12]	@ (8002c50 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c42:	681b      	ldr	r3, [r3, #0]
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	20000004 	.word	0x20000004

08002c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c58:	f7ff fff0 	bl	8002c3c <HAL_RCC_GetHCLKFreq>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	4b05      	ldr	r3, [pc, #20]	@ (8002c74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	0a9b      	lsrs	r3, r3, #10
 8002c64:	f003 0307 	and.w	r3, r3, #7
 8002c68:	4903      	ldr	r1, [pc, #12]	@ (8002c78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c6a:	5ccb      	ldrb	r3, [r1, r3]
 8002c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	40023800 	.word	0x40023800
 8002c78:	080052ec 	.word	0x080052ec

08002c7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c80:	f7ff ffdc 	bl	8002c3c <HAL_RCC_GetHCLKFreq>
 8002c84:	4602      	mov	r2, r0
 8002c86:	4b05      	ldr	r3, [pc, #20]	@ (8002c9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	0b5b      	lsrs	r3, r3, #13
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	4903      	ldr	r1, [pc, #12]	@ (8002ca0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c92:	5ccb      	ldrb	r3, [r1, r3]
 8002c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	080052ec 	.word	0x080052ec

08002ca4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ca4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ca8:	b0ae      	sub	sp, #184	@ 0xb8
 8002caa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002cac:	2300      	movs	r3, #0
 8002cae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cca:	4bcb      	ldr	r3, [pc, #812]	@ (8002ff8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 030c 	and.w	r3, r3, #12
 8002cd2:	2b0c      	cmp	r3, #12
 8002cd4:	f200 8206 	bhi.w	80030e4 <HAL_RCC_GetSysClockFreq+0x440>
 8002cd8:	a201      	add	r2, pc, #4	@ (adr r2, 8002ce0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cde:	bf00      	nop
 8002ce0:	08002d15 	.word	0x08002d15
 8002ce4:	080030e5 	.word	0x080030e5
 8002ce8:	080030e5 	.word	0x080030e5
 8002cec:	080030e5 	.word	0x080030e5
 8002cf0:	08002d1d 	.word	0x08002d1d
 8002cf4:	080030e5 	.word	0x080030e5
 8002cf8:	080030e5 	.word	0x080030e5
 8002cfc:	080030e5 	.word	0x080030e5
 8002d00:	08002d25 	.word	0x08002d25
 8002d04:	080030e5 	.word	0x080030e5
 8002d08:	080030e5 	.word	0x080030e5
 8002d0c:	080030e5 	.word	0x080030e5
 8002d10:	08002f15 	.word	0x08002f15
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d14:	4bb9      	ldr	r3, [pc, #740]	@ (8002ffc <HAL_RCC_GetSysClockFreq+0x358>)
 8002d16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002d1a:	e1e7      	b.n	80030ec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d1c:	4bb8      	ldr	r3, [pc, #736]	@ (8003000 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002d1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002d22:	e1e3      	b.n	80030ec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d24:	4bb4      	ldr	r3, [pc, #720]	@ (8002ff8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d30:	4bb1      	ldr	r3, [pc, #708]	@ (8002ff8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d071      	beq.n	8002e20 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d3c:	4bae      	ldr	r3, [pc, #696]	@ (8002ff8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	099b      	lsrs	r3, r3, #6
 8002d42:	2200      	movs	r2, #0
 8002d44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002d48:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002d4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002d50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d54:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002d58:	2300      	movs	r3, #0
 8002d5a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002d5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002d62:	4622      	mov	r2, r4
 8002d64:	462b      	mov	r3, r5
 8002d66:	f04f 0000 	mov.w	r0, #0
 8002d6a:	f04f 0100 	mov.w	r1, #0
 8002d6e:	0159      	lsls	r1, r3, #5
 8002d70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d74:	0150      	lsls	r0, r2, #5
 8002d76:	4602      	mov	r2, r0
 8002d78:	460b      	mov	r3, r1
 8002d7a:	4621      	mov	r1, r4
 8002d7c:	1a51      	subs	r1, r2, r1
 8002d7e:	6439      	str	r1, [r7, #64]	@ 0x40
 8002d80:	4629      	mov	r1, r5
 8002d82:	eb63 0301 	sbc.w	r3, r3, r1
 8002d86:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d88:	f04f 0200 	mov.w	r2, #0
 8002d8c:	f04f 0300 	mov.w	r3, #0
 8002d90:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002d94:	4649      	mov	r1, r9
 8002d96:	018b      	lsls	r3, r1, #6
 8002d98:	4641      	mov	r1, r8
 8002d9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d9e:	4641      	mov	r1, r8
 8002da0:	018a      	lsls	r2, r1, #6
 8002da2:	4641      	mov	r1, r8
 8002da4:	1a51      	subs	r1, r2, r1
 8002da6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002da8:	4649      	mov	r1, r9
 8002daa:	eb63 0301 	sbc.w	r3, r3, r1
 8002dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002db0:	f04f 0200 	mov.w	r2, #0
 8002db4:	f04f 0300 	mov.w	r3, #0
 8002db8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002dbc:	4649      	mov	r1, r9
 8002dbe:	00cb      	lsls	r3, r1, #3
 8002dc0:	4641      	mov	r1, r8
 8002dc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dc6:	4641      	mov	r1, r8
 8002dc8:	00ca      	lsls	r2, r1, #3
 8002dca:	4610      	mov	r0, r2
 8002dcc:	4619      	mov	r1, r3
 8002dce:	4603      	mov	r3, r0
 8002dd0:	4622      	mov	r2, r4
 8002dd2:	189b      	adds	r3, r3, r2
 8002dd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002dd6:	462b      	mov	r3, r5
 8002dd8:	460a      	mov	r2, r1
 8002dda:	eb42 0303 	adc.w	r3, r2, r3
 8002dde:	637b      	str	r3, [r7, #52]	@ 0x34
 8002de0:	f04f 0200 	mov.w	r2, #0
 8002de4:	f04f 0300 	mov.w	r3, #0
 8002de8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002dec:	4629      	mov	r1, r5
 8002dee:	024b      	lsls	r3, r1, #9
 8002df0:	4621      	mov	r1, r4
 8002df2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002df6:	4621      	mov	r1, r4
 8002df8:	024a      	lsls	r2, r1, #9
 8002dfa:	4610      	mov	r0, r2
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e02:	2200      	movs	r2, #0
 8002e04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002e08:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002e0c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002e10:	f7fd fa56 	bl	80002c0 <__aeabi_uldivmod>
 8002e14:	4602      	mov	r2, r0
 8002e16:	460b      	mov	r3, r1
 8002e18:	4613      	mov	r3, r2
 8002e1a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e1e:	e067      	b.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e20:	4b75      	ldr	r3, [pc, #468]	@ (8002ff8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	099b      	lsrs	r3, r3, #6
 8002e26:	2200      	movs	r2, #0
 8002e28:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e2c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002e30:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e38:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002e3e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002e42:	4622      	mov	r2, r4
 8002e44:	462b      	mov	r3, r5
 8002e46:	f04f 0000 	mov.w	r0, #0
 8002e4a:	f04f 0100 	mov.w	r1, #0
 8002e4e:	0159      	lsls	r1, r3, #5
 8002e50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e54:	0150      	lsls	r0, r2, #5
 8002e56:	4602      	mov	r2, r0
 8002e58:	460b      	mov	r3, r1
 8002e5a:	4621      	mov	r1, r4
 8002e5c:	1a51      	subs	r1, r2, r1
 8002e5e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002e60:	4629      	mov	r1, r5
 8002e62:	eb63 0301 	sbc.w	r3, r3, r1
 8002e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e68:	f04f 0200 	mov.w	r2, #0
 8002e6c:	f04f 0300 	mov.w	r3, #0
 8002e70:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002e74:	4649      	mov	r1, r9
 8002e76:	018b      	lsls	r3, r1, #6
 8002e78:	4641      	mov	r1, r8
 8002e7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e7e:	4641      	mov	r1, r8
 8002e80:	018a      	lsls	r2, r1, #6
 8002e82:	4641      	mov	r1, r8
 8002e84:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e88:	4649      	mov	r1, r9
 8002e8a:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e8e:	f04f 0200 	mov.w	r2, #0
 8002e92:	f04f 0300 	mov.w	r3, #0
 8002e96:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e9a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ea2:	4692      	mov	sl, r2
 8002ea4:	469b      	mov	fp, r3
 8002ea6:	4623      	mov	r3, r4
 8002ea8:	eb1a 0303 	adds.w	r3, sl, r3
 8002eac:	623b      	str	r3, [r7, #32]
 8002eae:	462b      	mov	r3, r5
 8002eb0:	eb4b 0303 	adc.w	r3, fp, r3
 8002eb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eb6:	f04f 0200 	mov.w	r2, #0
 8002eba:	f04f 0300 	mov.w	r3, #0
 8002ebe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002ec2:	4629      	mov	r1, r5
 8002ec4:	028b      	lsls	r3, r1, #10
 8002ec6:	4621      	mov	r1, r4
 8002ec8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ecc:	4621      	mov	r1, r4
 8002ece:	028a      	lsls	r2, r1, #10
 8002ed0:	4610      	mov	r0, r2
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ed8:	2200      	movs	r2, #0
 8002eda:	673b      	str	r3, [r7, #112]	@ 0x70
 8002edc:	677a      	str	r2, [r7, #116]	@ 0x74
 8002ede:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002ee2:	f7fd f9ed 	bl	80002c0 <__aeabi_uldivmod>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	460b      	mov	r3, r1
 8002eea:	4613      	mov	r3, r2
 8002eec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002ef0:	4b41      	ldr	r3, [pc, #260]	@ (8002ff8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	0c1b      	lsrs	r3, r3, #16
 8002ef6:	f003 0303 	and.w	r3, r3, #3
 8002efa:	3301      	adds	r3, #1
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002f02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002f06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002f12:	e0eb      	b.n	80030ec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f14:	4b38      	ldr	r3, [pc, #224]	@ (8002ff8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f20:	4b35      	ldr	r3, [pc, #212]	@ (8002ff8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d06b      	beq.n	8003004 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f2c:	4b32      	ldr	r3, [pc, #200]	@ (8002ff8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	099b      	lsrs	r3, r3, #6
 8002f32:	2200      	movs	r2, #0
 8002f34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f36:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002f38:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f3e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f40:	2300      	movs	r3, #0
 8002f42:	667b      	str	r3, [r7, #100]	@ 0x64
 8002f44:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002f48:	4622      	mov	r2, r4
 8002f4a:	462b      	mov	r3, r5
 8002f4c:	f04f 0000 	mov.w	r0, #0
 8002f50:	f04f 0100 	mov.w	r1, #0
 8002f54:	0159      	lsls	r1, r3, #5
 8002f56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f5a:	0150      	lsls	r0, r2, #5
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	460b      	mov	r3, r1
 8002f60:	4621      	mov	r1, r4
 8002f62:	1a51      	subs	r1, r2, r1
 8002f64:	61b9      	str	r1, [r7, #24]
 8002f66:	4629      	mov	r1, r5
 8002f68:	eb63 0301 	sbc.w	r3, r3, r1
 8002f6c:	61fb      	str	r3, [r7, #28]
 8002f6e:	f04f 0200 	mov.w	r2, #0
 8002f72:	f04f 0300 	mov.w	r3, #0
 8002f76:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002f7a:	4659      	mov	r1, fp
 8002f7c:	018b      	lsls	r3, r1, #6
 8002f7e:	4651      	mov	r1, sl
 8002f80:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f84:	4651      	mov	r1, sl
 8002f86:	018a      	lsls	r2, r1, #6
 8002f88:	4651      	mov	r1, sl
 8002f8a:	ebb2 0801 	subs.w	r8, r2, r1
 8002f8e:	4659      	mov	r1, fp
 8002f90:	eb63 0901 	sbc.w	r9, r3, r1
 8002f94:	f04f 0200 	mov.w	r2, #0
 8002f98:	f04f 0300 	mov.w	r3, #0
 8002f9c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fa0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fa4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fa8:	4690      	mov	r8, r2
 8002faa:	4699      	mov	r9, r3
 8002fac:	4623      	mov	r3, r4
 8002fae:	eb18 0303 	adds.w	r3, r8, r3
 8002fb2:	613b      	str	r3, [r7, #16]
 8002fb4:	462b      	mov	r3, r5
 8002fb6:	eb49 0303 	adc.w	r3, r9, r3
 8002fba:	617b      	str	r3, [r7, #20]
 8002fbc:	f04f 0200 	mov.w	r2, #0
 8002fc0:	f04f 0300 	mov.w	r3, #0
 8002fc4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002fc8:	4629      	mov	r1, r5
 8002fca:	024b      	lsls	r3, r1, #9
 8002fcc:	4621      	mov	r1, r4
 8002fce:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fd2:	4621      	mov	r1, r4
 8002fd4:	024a      	lsls	r2, r1, #9
 8002fd6:	4610      	mov	r0, r2
 8002fd8:	4619      	mov	r1, r3
 8002fda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002fde:	2200      	movs	r2, #0
 8002fe0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002fe2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002fe4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002fe8:	f7fd f96a 	bl	80002c0 <__aeabi_uldivmod>
 8002fec:	4602      	mov	r2, r0
 8002fee:	460b      	mov	r3, r1
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ff6:	e065      	b.n	80030c4 <HAL_RCC_GetSysClockFreq+0x420>
 8002ff8:	40023800 	.word	0x40023800
 8002ffc:	00f42400 	.word	0x00f42400
 8003000:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003004:	4b3d      	ldr	r3, [pc, #244]	@ (80030fc <HAL_RCC_GetSysClockFreq+0x458>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	099b      	lsrs	r3, r3, #6
 800300a:	2200      	movs	r2, #0
 800300c:	4618      	mov	r0, r3
 800300e:	4611      	mov	r1, r2
 8003010:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003014:	653b      	str	r3, [r7, #80]	@ 0x50
 8003016:	2300      	movs	r3, #0
 8003018:	657b      	str	r3, [r7, #84]	@ 0x54
 800301a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800301e:	4642      	mov	r2, r8
 8003020:	464b      	mov	r3, r9
 8003022:	f04f 0000 	mov.w	r0, #0
 8003026:	f04f 0100 	mov.w	r1, #0
 800302a:	0159      	lsls	r1, r3, #5
 800302c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003030:	0150      	lsls	r0, r2, #5
 8003032:	4602      	mov	r2, r0
 8003034:	460b      	mov	r3, r1
 8003036:	4641      	mov	r1, r8
 8003038:	1a51      	subs	r1, r2, r1
 800303a:	60b9      	str	r1, [r7, #8]
 800303c:	4649      	mov	r1, r9
 800303e:	eb63 0301 	sbc.w	r3, r3, r1
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	f04f 0200 	mov.w	r2, #0
 8003048:	f04f 0300 	mov.w	r3, #0
 800304c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003050:	4659      	mov	r1, fp
 8003052:	018b      	lsls	r3, r1, #6
 8003054:	4651      	mov	r1, sl
 8003056:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800305a:	4651      	mov	r1, sl
 800305c:	018a      	lsls	r2, r1, #6
 800305e:	4651      	mov	r1, sl
 8003060:	1a54      	subs	r4, r2, r1
 8003062:	4659      	mov	r1, fp
 8003064:	eb63 0501 	sbc.w	r5, r3, r1
 8003068:	f04f 0200 	mov.w	r2, #0
 800306c:	f04f 0300 	mov.w	r3, #0
 8003070:	00eb      	lsls	r3, r5, #3
 8003072:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003076:	00e2      	lsls	r2, r4, #3
 8003078:	4614      	mov	r4, r2
 800307a:	461d      	mov	r5, r3
 800307c:	4643      	mov	r3, r8
 800307e:	18e3      	adds	r3, r4, r3
 8003080:	603b      	str	r3, [r7, #0]
 8003082:	464b      	mov	r3, r9
 8003084:	eb45 0303 	adc.w	r3, r5, r3
 8003088:	607b      	str	r3, [r7, #4]
 800308a:	f04f 0200 	mov.w	r2, #0
 800308e:	f04f 0300 	mov.w	r3, #0
 8003092:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003096:	4629      	mov	r1, r5
 8003098:	028b      	lsls	r3, r1, #10
 800309a:	4621      	mov	r1, r4
 800309c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030a0:	4621      	mov	r1, r4
 80030a2:	028a      	lsls	r2, r1, #10
 80030a4:	4610      	mov	r0, r2
 80030a6:	4619      	mov	r1, r3
 80030a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80030ac:	2200      	movs	r2, #0
 80030ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030b0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80030b2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80030b6:	f7fd f903 	bl	80002c0 <__aeabi_uldivmod>
 80030ba:	4602      	mov	r2, r0
 80030bc:	460b      	mov	r3, r1
 80030be:	4613      	mov	r3, r2
 80030c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80030c4:	4b0d      	ldr	r3, [pc, #52]	@ (80030fc <HAL_RCC_GetSysClockFreq+0x458>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	0f1b      	lsrs	r3, r3, #28
 80030ca:	f003 0307 	and.w	r3, r3, #7
 80030ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80030d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80030d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80030da:	fbb2 f3f3 	udiv	r3, r2, r3
 80030de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80030e2:	e003      	b.n	80030ec <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030e4:	4b06      	ldr	r3, [pc, #24]	@ (8003100 <HAL_RCC_GetSysClockFreq+0x45c>)
 80030e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80030ea:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	37b8      	adds	r7, #184	@ 0xb8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030fa:	bf00      	nop
 80030fc:	40023800 	.word	0x40023800
 8003100:	00f42400 	.word	0x00f42400

08003104 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e28d      	b.n	8003632 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 8083 	beq.w	800322a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003124:	4b94      	ldr	r3, [pc, #592]	@ (8003378 <HAL_RCC_OscConfig+0x274>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f003 030c 	and.w	r3, r3, #12
 800312c:	2b04      	cmp	r3, #4
 800312e:	d019      	beq.n	8003164 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003130:	4b91      	ldr	r3, [pc, #580]	@ (8003378 <HAL_RCC_OscConfig+0x274>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f003 030c 	and.w	r3, r3, #12
        || \
 8003138:	2b08      	cmp	r3, #8
 800313a:	d106      	bne.n	800314a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800313c:	4b8e      	ldr	r3, [pc, #568]	@ (8003378 <HAL_RCC_OscConfig+0x274>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003144:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003148:	d00c      	beq.n	8003164 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800314a:	4b8b      	ldr	r3, [pc, #556]	@ (8003378 <HAL_RCC_OscConfig+0x274>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003152:	2b0c      	cmp	r3, #12
 8003154:	d112      	bne.n	800317c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003156:	4b88      	ldr	r3, [pc, #544]	@ (8003378 <HAL_RCC_OscConfig+0x274>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800315e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003162:	d10b      	bne.n	800317c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003164:	4b84      	ldr	r3, [pc, #528]	@ (8003378 <HAL_RCC_OscConfig+0x274>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d05b      	beq.n	8003228 <HAL_RCC_OscConfig+0x124>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d157      	bne.n	8003228 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e25a      	b.n	8003632 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003184:	d106      	bne.n	8003194 <HAL_RCC_OscConfig+0x90>
 8003186:	4b7c      	ldr	r3, [pc, #496]	@ (8003378 <HAL_RCC_OscConfig+0x274>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a7b      	ldr	r2, [pc, #492]	@ (8003378 <HAL_RCC_OscConfig+0x274>)
 800318c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003190:	6013      	str	r3, [r2, #0]
 8003192:	e01d      	b.n	80031d0 <HAL_RCC_OscConfig+0xcc>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800319c:	d10c      	bne.n	80031b8 <HAL_RCC_OscConfig+0xb4>
 800319e:	4b76      	ldr	r3, [pc, #472]	@ (8003378 <HAL_RCC_OscConfig+0x274>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a75      	ldr	r2, [pc, #468]	@ (8003378 <HAL_RCC_OscConfig+0x274>)
 80031a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031a8:	6013      	str	r3, [r2, #0]
 80031aa:	4b73      	ldr	r3, [pc, #460]	@ (8003378 <HAL_RCC_OscConfig+0x274>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a72      	ldr	r2, [pc, #456]	@ (8003378 <HAL_RCC_OscConfig+0x274>)
 80031b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031b4:	6013      	str	r3, [r2, #0]
 80031b6:	e00b      	b.n	80031d0 <HAL_RCC_OscConfig+0xcc>
 80031b8:	4b6f      	ldr	r3, [pc, #444]	@ (8003378 <HAL_RCC_OscConfig+0x274>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a6e      	ldr	r2, [pc, #440]	@ (8003378 <HAL_RCC_OscConfig+0x274>)
 80031be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031c2:	6013      	str	r3, [r2, #0]
 80031c4:	4b6c      	ldr	r3, [pc, #432]	@ (8003378 <HAL_RCC_OscConfig+0x274>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a6b      	ldr	r2, [pc, #428]	@ (8003378 <HAL_RCC_OscConfig+0x274>)
 80031ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d013      	beq.n	8003200 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d8:	f7fe f834 	bl	8001244 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031e0:	f7fe f830 	bl	8001244 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b64      	cmp	r3, #100	@ 0x64
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e21f      	b.n	8003632 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031f2:	4b61      	ldr	r3, [pc, #388]	@ (8003378 <HAL_RCC_OscConfig+0x274>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d0f0      	beq.n	80031e0 <HAL_RCC_OscConfig+0xdc>
 80031fe:	e014      	b.n	800322a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003200:	f7fe f820 	bl	8001244 <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003208:	f7fe f81c 	bl	8001244 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b64      	cmp	r3, #100	@ 0x64
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e20b      	b.n	8003632 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800321a:	4b57      	ldr	r3, [pc, #348]	@ (8003378 <HAL_RCC_OscConfig+0x274>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1f0      	bne.n	8003208 <HAL_RCC_OscConfig+0x104>
 8003226:	e000      	b.n	800322a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003228:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d06f      	beq.n	8003316 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003236:	4b50      	ldr	r3, [pc, #320]	@ (8003378 <HAL_RCC_OscConfig+0x274>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f003 030c 	and.w	r3, r3, #12
 800323e:	2b00      	cmp	r3, #0
 8003240:	d017      	beq.n	8003272 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003242:	4b4d      	ldr	r3, [pc, #308]	@ (8003378 <HAL_RCC_OscConfig+0x274>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f003 030c 	and.w	r3, r3, #12
        || \
 800324a:	2b08      	cmp	r3, #8
 800324c:	d105      	bne.n	800325a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800324e:	4b4a      	ldr	r3, [pc, #296]	@ (8003378 <HAL_RCC_OscConfig+0x274>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00b      	beq.n	8003272 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800325a:	4b47      	ldr	r3, [pc, #284]	@ (8003378 <HAL_RCC_OscConfig+0x274>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003262:	2b0c      	cmp	r3, #12
 8003264:	d11c      	bne.n	80032a0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003266:	4b44      	ldr	r3, [pc, #272]	@ (8003378 <HAL_RCC_OscConfig+0x274>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d116      	bne.n	80032a0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003272:	4b41      	ldr	r3, [pc, #260]	@ (8003378 <HAL_RCC_OscConfig+0x274>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d005      	beq.n	800328a <HAL_RCC_OscConfig+0x186>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d001      	beq.n	800328a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e1d3      	b.n	8003632 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800328a:	4b3b      	ldr	r3, [pc, #236]	@ (8003378 <HAL_RCC_OscConfig+0x274>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	4937      	ldr	r1, [pc, #220]	@ (8003378 <HAL_RCC_OscConfig+0x274>)
 800329a:	4313      	orrs	r3, r2
 800329c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800329e:	e03a      	b.n	8003316 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d020      	beq.n	80032ea <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032a8:	4b34      	ldr	r3, [pc, #208]	@ (800337c <HAL_RCC_OscConfig+0x278>)
 80032aa:	2201      	movs	r2, #1
 80032ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ae:	f7fd ffc9 	bl	8001244 <HAL_GetTick>
 80032b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032b4:	e008      	b.n	80032c8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032b6:	f7fd ffc5 	bl	8001244 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e1b4      	b.n	8003632 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c8:	4b2b      	ldr	r3, [pc, #172]	@ (8003378 <HAL_RCC_OscConfig+0x274>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d0f0      	beq.n	80032b6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032d4:	4b28      	ldr	r3, [pc, #160]	@ (8003378 <HAL_RCC_OscConfig+0x274>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	4925      	ldr	r1, [pc, #148]	@ (8003378 <HAL_RCC_OscConfig+0x274>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	600b      	str	r3, [r1, #0]
 80032e8:	e015      	b.n	8003316 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032ea:	4b24      	ldr	r3, [pc, #144]	@ (800337c <HAL_RCC_OscConfig+0x278>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f0:	f7fd ffa8 	bl	8001244 <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032f8:	f7fd ffa4 	bl	8001244 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e193      	b.n	8003632 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800330a:	4b1b      	ldr	r3, [pc, #108]	@ (8003378 <HAL_RCC_OscConfig+0x274>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1f0      	bne.n	80032f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0308 	and.w	r3, r3, #8
 800331e:	2b00      	cmp	r3, #0
 8003320:	d036      	beq.n	8003390 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d016      	beq.n	8003358 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800332a:	4b15      	ldr	r3, [pc, #84]	@ (8003380 <HAL_RCC_OscConfig+0x27c>)
 800332c:	2201      	movs	r2, #1
 800332e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003330:	f7fd ff88 	bl	8001244 <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003338:	f7fd ff84 	bl	8001244 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e173      	b.n	8003632 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800334a:	4b0b      	ldr	r3, [pc, #44]	@ (8003378 <HAL_RCC_OscConfig+0x274>)
 800334c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d0f0      	beq.n	8003338 <HAL_RCC_OscConfig+0x234>
 8003356:	e01b      	b.n	8003390 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003358:	4b09      	ldr	r3, [pc, #36]	@ (8003380 <HAL_RCC_OscConfig+0x27c>)
 800335a:	2200      	movs	r2, #0
 800335c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800335e:	f7fd ff71 	bl	8001244 <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003364:	e00e      	b.n	8003384 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003366:	f7fd ff6d 	bl	8001244 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d907      	bls.n	8003384 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e15c      	b.n	8003632 <HAL_RCC_OscConfig+0x52e>
 8003378:	40023800 	.word	0x40023800
 800337c:	42470000 	.word	0x42470000
 8003380:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003384:	4b8a      	ldr	r3, [pc, #552]	@ (80035b0 <HAL_RCC_OscConfig+0x4ac>)
 8003386:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1ea      	bne.n	8003366 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	2b00      	cmp	r3, #0
 800339a:	f000 8097 	beq.w	80034cc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800339e:	2300      	movs	r3, #0
 80033a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033a2:	4b83      	ldr	r3, [pc, #524]	@ (80035b0 <HAL_RCC_OscConfig+0x4ac>)
 80033a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10f      	bne.n	80033ce <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ae:	2300      	movs	r3, #0
 80033b0:	60bb      	str	r3, [r7, #8]
 80033b2:	4b7f      	ldr	r3, [pc, #508]	@ (80035b0 <HAL_RCC_OscConfig+0x4ac>)
 80033b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b6:	4a7e      	ldr	r2, [pc, #504]	@ (80035b0 <HAL_RCC_OscConfig+0x4ac>)
 80033b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80033be:	4b7c      	ldr	r3, [pc, #496]	@ (80035b0 <HAL_RCC_OscConfig+0x4ac>)
 80033c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033c6:	60bb      	str	r3, [r7, #8]
 80033c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033ca:	2301      	movs	r3, #1
 80033cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ce:	4b79      	ldr	r3, [pc, #484]	@ (80035b4 <HAL_RCC_OscConfig+0x4b0>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d118      	bne.n	800340c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033da:	4b76      	ldr	r3, [pc, #472]	@ (80035b4 <HAL_RCC_OscConfig+0x4b0>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a75      	ldr	r2, [pc, #468]	@ (80035b4 <HAL_RCC_OscConfig+0x4b0>)
 80033e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033e6:	f7fd ff2d 	bl	8001244 <HAL_GetTick>
 80033ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ec:	e008      	b.n	8003400 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ee:	f7fd ff29 	bl	8001244 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e118      	b.n	8003632 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003400:	4b6c      	ldr	r3, [pc, #432]	@ (80035b4 <HAL_RCC_OscConfig+0x4b0>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003408:	2b00      	cmp	r3, #0
 800340a:	d0f0      	beq.n	80033ee <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d106      	bne.n	8003422 <HAL_RCC_OscConfig+0x31e>
 8003414:	4b66      	ldr	r3, [pc, #408]	@ (80035b0 <HAL_RCC_OscConfig+0x4ac>)
 8003416:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003418:	4a65      	ldr	r2, [pc, #404]	@ (80035b0 <HAL_RCC_OscConfig+0x4ac>)
 800341a:	f043 0301 	orr.w	r3, r3, #1
 800341e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003420:	e01c      	b.n	800345c <HAL_RCC_OscConfig+0x358>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	2b05      	cmp	r3, #5
 8003428:	d10c      	bne.n	8003444 <HAL_RCC_OscConfig+0x340>
 800342a:	4b61      	ldr	r3, [pc, #388]	@ (80035b0 <HAL_RCC_OscConfig+0x4ac>)
 800342c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800342e:	4a60      	ldr	r2, [pc, #384]	@ (80035b0 <HAL_RCC_OscConfig+0x4ac>)
 8003430:	f043 0304 	orr.w	r3, r3, #4
 8003434:	6713      	str	r3, [r2, #112]	@ 0x70
 8003436:	4b5e      	ldr	r3, [pc, #376]	@ (80035b0 <HAL_RCC_OscConfig+0x4ac>)
 8003438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800343a:	4a5d      	ldr	r2, [pc, #372]	@ (80035b0 <HAL_RCC_OscConfig+0x4ac>)
 800343c:	f043 0301 	orr.w	r3, r3, #1
 8003440:	6713      	str	r3, [r2, #112]	@ 0x70
 8003442:	e00b      	b.n	800345c <HAL_RCC_OscConfig+0x358>
 8003444:	4b5a      	ldr	r3, [pc, #360]	@ (80035b0 <HAL_RCC_OscConfig+0x4ac>)
 8003446:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003448:	4a59      	ldr	r2, [pc, #356]	@ (80035b0 <HAL_RCC_OscConfig+0x4ac>)
 800344a:	f023 0301 	bic.w	r3, r3, #1
 800344e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003450:	4b57      	ldr	r3, [pc, #348]	@ (80035b0 <HAL_RCC_OscConfig+0x4ac>)
 8003452:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003454:	4a56      	ldr	r2, [pc, #344]	@ (80035b0 <HAL_RCC_OscConfig+0x4ac>)
 8003456:	f023 0304 	bic.w	r3, r3, #4
 800345a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d015      	beq.n	8003490 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003464:	f7fd feee 	bl	8001244 <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800346a:	e00a      	b.n	8003482 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800346c:	f7fd feea 	bl	8001244 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	f241 3288 	movw	r2, #5000	@ 0x1388
 800347a:	4293      	cmp	r3, r2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e0d7      	b.n	8003632 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003482:	4b4b      	ldr	r3, [pc, #300]	@ (80035b0 <HAL_RCC_OscConfig+0x4ac>)
 8003484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d0ee      	beq.n	800346c <HAL_RCC_OscConfig+0x368>
 800348e:	e014      	b.n	80034ba <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003490:	f7fd fed8 	bl	8001244 <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003496:	e00a      	b.n	80034ae <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003498:	f7fd fed4 	bl	8001244 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e0c1      	b.n	8003632 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ae:	4b40      	ldr	r3, [pc, #256]	@ (80035b0 <HAL_RCC_OscConfig+0x4ac>)
 80034b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1ee      	bne.n	8003498 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034ba:	7dfb      	ldrb	r3, [r7, #23]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d105      	bne.n	80034cc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034c0:	4b3b      	ldr	r3, [pc, #236]	@ (80035b0 <HAL_RCC_OscConfig+0x4ac>)
 80034c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c4:	4a3a      	ldr	r2, [pc, #232]	@ (80035b0 <HAL_RCC_OscConfig+0x4ac>)
 80034c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034ca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 80ad 	beq.w	8003630 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034d6:	4b36      	ldr	r3, [pc, #216]	@ (80035b0 <HAL_RCC_OscConfig+0x4ac>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 030c 	and.w	r3, r3, #12
 80034de:	2b08      	cmp	r3, #8
 80034e0:	d060      	beq.n	80035a4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d145      	bne.n	8003576 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ea:	4b33      	ldr	r3, [pc, #204]	@ (80035b8 <HAL_RCC_OscConfig+0x4b4>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f0:	f7fd fea8 	bl	8001244 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f8:	f7fd fea4 	bl	8001244 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e093      	b.n	8003632 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800350a:	4b29      	ldr	r3, [pc, #164]	@ (80035b0 <HAL_RCC_OscConfig+0x4ac>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1f0      	bne.n	80034f8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69da      	ldr	r2, [r3, #28]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	431a      	orrs	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003524:	019b      	lsls	r3, r3, #6
 8003526:	431a      	orrs	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800352c:	085b      	lsrs	r3, r3, #1
 800352e:	3b01      	subs	r3, #1
 8003530:	041b      	lsls	r3, r3, #16
 8003532:	431a      	orrs	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003538:	061b      	lsls	r3, r3, #24
 800353a:	431a      	orrs	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003540:	071b      	lsls	r3, r3, #28
 8003542:	491b      	ldr	r1, [pc, #108]	@ (80035b0 <HAL_RCC_OscConfig+0x4ac>)
 8003544:	4313      	orrs	r3, r2
 8003546:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003548:	4b1b      	ldr	r3, [pc, #108]	@ (80035b8 <HAL_RCC_OscConfig+0x4b4>)
 800354a:	2201      	movs	r2, #1
 800354c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354e:	f7fd fe79 	bl	8001244 <HAL_GetTick>
 8003552:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003554:	e008      	b.n	8003568 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003556:	f7fd fe75 	bl	8001244 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e064      	b.n	8003632 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003568:	4b11      	ldr	r3, [pc, #68]	@ (80035b0 <HAL_RCC_OscConfig+0x4ac>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d0f0      	beq.n	8003556 <HAL_RCC_OscConfig+0x452>
 8003574:	e05c      	b.n	8003630 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003576:	4b10      	ldr	r3, [pc, #64]	@ (80035b8 <HAL_RCC_OscConfig+0x4b4>)
 8003578:	2200      	movs	r2, #0
 800357a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800357c:	f7fd fe62 	bl	8001244 <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003584:	f7fd fe5e 	bl	8001244 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e04d      	b.n	8003632 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003596:	4b06      	ldr	r3, [pc, #24]	@ (80035b0 <HAL_RCC_OscConfig+0x4ac>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1f0      	bne.n	8003584 <HAL_RCC_OscConfig+0x480>
 80035a2:	e045      	b.n	8003630 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d107      	bne.n	80035bc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e040      	b.n	8003632 <HAL_RCC_OscConfig+0x52e>
 80035b0:	40023800 	.word	0x40023800
 80035b4:	40007000 	.word	0x40007000
 80035b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035bc:	4b1f      	ldr	r3, [pc, #124]	@ (800363c <HAL_RCC_OscConfig+0x538>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d030      	beq.n	800362c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d129      	bne.n	800362c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d122      	bne.n	800362c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80035ec:	4013      	ands	r3, r2
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80035f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d119      	bne.n	800362c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003602:	085b      	lsrs	r3, r3, #1
 8003604:	3b01      	subs	r3, #1
 8003606:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003608:	429a      	cmp	r2, r3
 800360a:	d10f      	bne.n	800362c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003616:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003618:	429a      	cmp	r2, r3
 800361a:	d107      	bne.n	800362c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003626:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003628:	429a      	cmp	r2, r3
 800362a:	d001      	beq.n	8003630 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e000      	b.n	8003632 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3718      	adds	r7, #24
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	40023800 	.word	0x40023800

08003640 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e041      	b.n	80036d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d106      	bne.n	800366c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7fd fc20 	bl	8000eac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2202      	movs	r2, #2
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3304      	adds	r3, #4
 800367c:	4619      	mov	r1, r3
 800367e:	4610      	mov	r0, r2
 8003680:	f000 f9b8 	bl	80039f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
	...

080036e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d109      	bne.n	8003704 <HAL_TIM_PWM_Start+0x24>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	bf14      	ite	ne
 80036fc:	2301      	movne	r3, #1
 80036fe:	2300      	moveq	r3, #0
 8003700:	b2db      	uxtb	r3, r3
 8003702:	e022      	b.n	800374a <HAL_TIM_PWM_Start+0x6a>
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	2b04      	cmp	r3, #4
 8003708:	d109      	bne.n	800371e <HAL_TIM_PWM_Start+0x3e>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b01      	cmp	r3, #1
 8003714:	bf14      	ite	ne
 8003716:	2301      	movne	r3, #1
 8003718:	2300      	moveq	r3, #0
 800371a:	b2db      	uxtb	r3, r3
 800371c:	e015      	b.n	800374a <HAL_TIM_PWM_Start+0x6a>
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	2b08      	cmp	r3, #8
 8003722:	d109      	bne.n	8003738 <HAL_TIM_PWM_Start+0x58>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2b01      	cmp	r3, #1
 800372e:	bf14      	ite	ne
 8003730:	2301      	movne	r3, #1
 8003732:	2300      	moveq	r3, #0
 8003734:	b2db      	uxtb	r3, r3
 8003736:	e008      	b.n	800374a <HAL_TIM_PWM_Start+0x6a>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b01      	cmp	r3, #1
 8003742:	bf14      	ite	ne
 8003744:	2301      	movne	r3, #1
 8003746:	2300      	moveq	r3, #0
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e07c      	b.n	800384c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d104      	bne.n	8003762 <HAL_TIM_PWM_Start+0x82>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2202      	movs	r2, #2
 800375c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003760:	e013      	b.n	800378a <HAL_TIM_PWM_Start+0xaa>
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	2b04      	cmp	r3, #4
 8003766:	d104      	bne.n	8003772 <HAL_TIM_PWM_Start+0x92>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2202      	movs	r2, #2
 800376c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003770:	e00b      	b.n	800378a <HAL_TIM_PWM_Start+0xaa>
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	2b08      	cmp	r3, #8
 8003776:	d104      	bne.n	8003782 <HAL_TIM_PWM_Start+0xa2>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2202      	movs	r2, #2
 800377c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003780:	e003      	b.n	800378a <HAL_TIM_PWM_Start+0xaa>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2202      	movs	r2, #2
 8003786:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2201      	movs	r2, #1
 8003790:	6839      	ldr	r1, [r7, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f000 fb8a 	bl	8003eac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a2d      	ldr	r2, [pc, #180]	@ (8003854 <HAL_TIM_PWM_Start+0x174>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d004      	beq.n	80037ac <HAL_TIM_PWM_Start+0xcc>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a2c      	ldr	r2, [pc, #176]	@ (8003858 <HAL_TIM_PWM_Start+0x178>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d101      	bne.n	80037b0 <HAL_TIM_PWM_Start+0xd0>
 80037ac:	2301      	movs	r3, #1
 80037ae:	e000      	b.n	80037b2 <HAL_TIM_PWM_Start+0xd2>
 80037b0:	2300      	movs	r3, #0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d007      	beq.n	80037c6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037c4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a22      	ldr	r2, [pc, #136]	@ (8003854 <HAL_TIM_PWM_Start+0x174>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d022      	beq.n	8003816 <HAL_TIM_PWM_Start+0x136>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037d8:	d01d      	beq.n	8003816 <HAL_TIM_PWM_Start+0x136>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a1f      	ldr	r2, [pc, #124]	@ (800385c <HAL_TIM_PWM_Start+0x17c>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d018      	beq.n	8003816 <HAL_TIM_PWM_Start+0x136>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a1d      	ldr	r2, [pc, #116]	@ (8003860 <HAL_TIM_PWM_Start+0x180>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d013      	beq.n	8003816 <HAL_TIM_PWM_Start+0x136>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a1c      	ldr	r2, [pc, #112]	@ (8003864 <HAL_TIM_PWM_Start+0x184>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d00e      	beq.n	8003816 <HAL_TIM_PWM_Start+0x136>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a16      	ldr	r2, [pc, #88]	@ (8003858 <HAL_TIM_PWM_Start+0x178>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d009      	beq.n	8003816 <HAL_TIM_PWM_Start+0x136>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a18      	ldr	r2, [pc, #96]	@ (8003868 <HAL_TIM_PWM_Start+0x188>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d004      	beq.n	8003816 <HAL_TIM_PWM_Start+0x136>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a16      	ldr	r2, [pc, #88]	@ (800386c <HAL_TIM_PWM_Start+0x18c>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d111      	bne.n	800383a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f003 0307 	and.w	r3, r3, #7
 8003820:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2b06      	cmp	r3, #6
 8003826:	d010      	beq.n	800384a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f042 0201 	orr.w	r2, r2, #1
 8003836:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003838:	e007      	b.n	800384a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f042 0201 	orr.w	r2, r2, #1
 8003848:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	40010000 	.word	0x40010000
 8003858:	40010400 	.word	0x40010400
 800385c:	40000400 	.word	0x40000400
 8003860:	40000800 	.word	0x40000800
 8003864:	40000c00 	.word	0x40000c00
 8003868:	40014000 	.word	0x40014000
 800386c:	40001800 	.word	0x40001800

08003870 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b086      	sub	sp, #24
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800387c:	2300      	movs	r3, #0
 800387e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003886:	2b01      	cmp	r3, #1
 8003888:	d101      	bne.n	800388e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800388a:	2302      	movs	r3, #2
 800388c:	e0ae      	b.n	80039ec <HAL_TIM_PWM_ConfigChannel+0x17c>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2b0c      	cmp	r3, #12
 800389a:	f200 809f 	bhi.w	80039dc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800389e:	a201      	add	r2, pc, #4	@ (adr r2, 80038a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80038a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a4:	080038d9 	.word	0x080038d9
 80038a8:	080039dd 	.word	0x080039dd
 80038ac:	080039dd 	.word	0x080039dd
 80038b0:	080039dd 	.word	0x080039dd
 80038b4:	08003919 	.word	0x08003919
 80038b8:	080039dd 	.word	0x080039dd
 80038bc:	080039dd 	.word	0x080039dd
 80038c0:	080039dd 	.word	0x080039dd
 80038c4:	0800395b 	.word	0x0800395b
 80038c8:	080039dd 	.word	0x080039dd
 80038cc:	080039dd 	.word	0x080039dd
 80038d0:	080039dd 	.word	0x080039dd
 80038d4:	0800399b 	.word	0x0800399b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68b9      	ldr	r1, [r7, #8]
 80038de:	4618      	mov	r0, r3
 80038e0:	f000 f934 	bl	8003b4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	699a      	ldr	r2, [r3, #24]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 0208 	orr.w	r2, r2, #8
 80038f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	699a      	ldr	r2, [r3, #24]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 0204 	bic.w	r2, r2, #4
 8003902:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6999      	ldr	r1, [r3, #24]
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	691a      	ldr	r2, [r3, #16]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	430a      	orrs	r2, r1
 8003914:	619a      	str	r2, [r3, #24]
      break;
 8003916:	e064      	b.n	80039e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68b9      	ldr	r1, [r7, #8]
 800391e:	4618      	mov	r0, r3
 8003920:	f000 f984 	bl	8003c2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	699a      	ldr	r2, [r3, #24]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003932:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	699a      	ldr	r2, [r3, #24]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003942:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6999      	ldr	r1, [r3, #24]
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	021a      	lsls	r2, r3, #8
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	430a      	orrs	r2, r1
 8003956:	619a      	str	r2, [r3, #24]
      break;
 8003958:	e043      	b.n	80039e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68b9      	ldr	r1, [r7, #8]
 8003960:	4618      	mov	r0, r3
 8003962:	f000 f9d9 	bl	8003d18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	69da      	ldr	r2, [r3, #28]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f042 0208 	orr.w	r2, r2, #8
 8003974:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	69da      	ldr	r2, [r3, #28]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 0204 	bic.w	r2, r2, #4
 8003984:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	69d9      	ldr	r1, [r3, #28]
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	691a      	ldr	r2, [r3, #16]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	430a      	orrs	r2, r1
 8003996:	61da      	str	r2, [r3, #28]
      break;
 8003998:	e023      	b.n	80039e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68b9      	ldr	r1, [r7, #8]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f000 fa2d 	bl	8003e00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	69da      	ldr	r2, [r3, #28]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	69da      	ldr	r2, [r3, #28]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	69d9      	ldr	r1, [r3, #28]
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	021a      	lsls	r2, r3, #8
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	61da      	str	r2, [r3, #28]
      break;
 80039da:	e002      	b.n	80039e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	75fb      	strb	r3, [r7, #23]
      break;
 80039e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80039ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3718      	adds	r7, #24
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a46      	ldr	r2, [pc, #280]	@ (8003b20 <TIM_Base_SetConfig+0x12c>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d013      	beq.n	8003a34 <TIM_Base_SetConfig+0x40>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a12:	d00f      	beq.n	8003a34 <TIM_Base_SetConfig+0x40>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a43      	ldr	r2, [pc, #268]	@ (8003b24 <TIM_Base_SetConfig+0x130>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d00b      	beq.n	8003a34 <TIM_Base_SetConfig+0x40>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a42      	ldr	r2, [pc, #264]	@ (8003b28 <TIM_Base_SetConfig+0x134>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d007      	beq.n	8003a34 <TIM_Base_SetConfig+0x40>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a41      	ldr	r2, [pc, #260]	@ (8003b2c <TIM_Base_SetConfig+0x138>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d003      	beq.n	8003a34 <TIM_Base_SetConfig+0x40>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a40      	ldr	r2, [pc, #256]	@ (8003b30 <TIM_Base_SetConfig+0x13c>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d108      	bne.n	8003a46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a35      	ldr	r2, [pc, #212]	@ (8003b20 <TIM_Base_SetConfig+0x12c>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d02b      	beq.n	8003aa6 <TIM_Base_SetConfig+0xb2>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a54:	d027      	beq.n	8003aa6 <TIM_Base_SetConfig+0xb2>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a32      	ldr	r2, [pc, #200]	@ (8003b24 <TIM_Base_SetConfig+0x130>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d023      	beq.n	8003aa6 <TIM_Base_SetConfig+0xb2>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a31      	ldr	r2, [pc, #196]	@ (8003b28 <TIM_Base_SetConfig+0x134>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d01f      	beq.n	8003aa6 <TIM_Base_SetConfig+0xb2>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a30      	ldr	r2, [pc, #192]	@ (8003b2c <TIM_Base_SetConfig+0x138>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d01b      	beq.n	8003aa6 <TIM_Base_SetConfig+0xb2>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a2f      	ldr	r2, [pc, #188]	@ (8003b30 <TIM_Base_SetConfig+0x13c>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d017      	beq.n	8003aa6 <TIM_Base_SetConfig+0xb2>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a2e      	ldr	r2, [pc, #184]	@ (8003b34 <TIM_Base_SetConfig+0x140>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d013      	beq.n	8003aa6 <TIM_Base_SetConfig+0xb2>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a2d      	ldr	r2, [pc, #180]	@ (8003b38 <TIM_Base_SetConfig+0x144>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d00f      	beq.n	8003aa6 <TIM_Base_SetConfig+0xb2>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a2c      	ldr	r2, [pc, #176]	@ (8003b3c <TIM_Base_SetConfig+0x148>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d00b      	beq.n	8003aa6 <TIM_Base_SetConfig+0xb2>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a2b      	ldr	r2, [pc, #172]	@ (8003b40 <TIM_Base_SetConfig+0x14c>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d007      	beq.n	8003aa6 <TIM_Base_SetConfig+0xb2>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a2a      	ldr	r2, [pc, #168]	@ (8003b44 <TIM_Base_SetConfig+0x150>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d003      	beq.n	8003aa6 <TIM_Base_SetConfig+0xb2>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a29      	ldr	r2, [pc, #164]	@ (8003b48 <TIM_Base_SetConfig+0x154>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d108      	bne.n	8003ab8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a10      	ldr	r2, [pc, #64]	@ (8003b20 <TIM_Base_SetConfig+0x12c>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d003      	beq.n	8003aec <TIM_Base_SetConfig+0xf8>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a12      	ldr	r2, [pc, #72]	@ (8003b30 <TIM_Base_SetConfig+0x13c>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d103      	bne.n	8003af4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	691a      	ldr	r2, [r3, #16]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d105      	bne.n	8003b12 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	f023 0201 	bic.w	r2, r3, #1
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	611a      	str	r2, [r3, #16]
  }
}
 8003b12:	bf00      	nop
 8003b14:	3714      	adds	r7, #20
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	40010000 	.word	0x40010000
 8003b24:	40000400 	.word	0x40000400
 8003b28:	40000800 	.word	0x40000800
 8003b2c:	40000c00 	.word	0x40000c00
 8003b30:	40010400 	.word	0x40010400
 8003b34:	40014000 	.word	0x40014000
 8003b38:	40014400 	.word	0x40014400
 8003b3c:	40014800 	.word	0x40014800
 8003b40:	40001800 	.word	0x40001800
 8003b44:	40001c00 	.word	0x40001c00
 8003b48:	40002000 	.word	0x40002000

08003b4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b087      	sub	sp, #28
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	f023 0201 	bic.w	r2, r3, #1
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f023 0303 	bic.w	r3, r3, #3
 8003b82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	f023 0302 	bic.w	r3, r3, #2
 8003b94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a20      	ldr	r2, [pc, #128]	@ (8003c24 <TIM_OC1_SetConfig+0xd8>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d003      	beq.n	8003bb0 <TIM_OC1_SetConfig+0x64>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a1f      	ldr	r2, [pc, #124]	@ (8003c28 <TIM_OC1_SetConfig+0xdc>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d10c      	bne.n	8003bca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	f023 0308 	bic.w	r3, r3, #8
 8003bb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f023 0304 	bic.w	r3, r3, #4
 8003bc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a15      	ldr	r2, [pc, #84]	@ (8003c24 <TIM_OC1_SetConfig+0xd8>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d003      	beq.n	8003bda <TIM_OC1_SetConfig+0x8e>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a14      	ldr	r2, [pc, #80]	@ (8003c28 <TIM_OC1_SetConfig+0xdc>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d111      	bne.n	8003bfe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003be0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003be8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	697a      	ldr	r2, [r7, #20]
 8003c16:	621a      	str	r2, [r3, #32]
}
 8003c18:	bf00      	nop
 8003c1a:	371c      	adds	r7, #28
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	40010000 	.word	0x40010000
 8003c28:	40010400 	.word	0x40010400

08003c2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b087      	sub	sp, #28
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	f023 0210 	bic.w	r2, r3, #16
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	021b      	lsls	r3, r3, #8
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	f023 0320 	bic.w	r3, r3, #32
 8003c76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	011b      	lsls	r3, r3, #4
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a22      	ldr	r2, [pc, #136]	@ (8003d10 <TIM_OC2_SetConfig+0xe4>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d003      	beq.n	8003c94 <TIM_OC2_SetConfig+0x68>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a21      	ldr	r2, [pc, #132]	@ (8003d14 <TIM_OC2_SetConfig+0xe8>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d10d      	bne.n	8003cb0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	011b      	lsls	r3, r3, #4
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a17      	ldr	r2, [pc, #92]	@ (8003d10 <TIM_OC2_SetConfig+0xe4>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d003      	beq.n	8003cc0 <TIM_OC2_SetConfig+0x94>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a16      	ldr	r2, [pc, #88]	@ (8003d14 <TIM_OC2_SetConfig+0xe8>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d113      	bne.n	8003ce8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003cc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003cce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	621a      	str	r2, [r3, #32]
}
 8003d02:	bf00      	nop
 8003d04:	371c      	adds	r7, #28
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	40010000 	.word	0x40010000
 8003d14:	40010400 	.word	0x40010400

08003d18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b087      	sub	sp, #28
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a1b      	ldr	r3, [r3, #32]
 8003d2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f023 0303 	bic.w	r3, r3, #3
 8003d4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	021b      	lsls	r3, r3, #8
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a21      	ldr	r2, [pc, #132]	@ (8003df8 <TIM_OC3_SetConfig+0xe0>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d003      	beq.n	8003d7e <TIM_OC3_SetConfig+0x66>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a20      	ldr	r2, [pc, #128]	@ (8003dfc <TIM_OC3_SetConfig+0xe4>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d10d      	bne.n	8003d9a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	021b      	lsls	r3, r3, #8
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a16      	ldr	r2, [pc, #88]	@ (8003df8 <TIM_OC3_SetConfig+0xe0>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d003      	beq.n	8003daa <TIM_OC3_SetConfig+0x92>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a15      	ldr	r2, [pc, #84]	@ (8003dfc <TIM_OC3_SetConfig+0xe4>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d113      	bne.n	8003dd2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003db0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003db8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	011b      	lsls	r3, r3, #4
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	011b      	lsls	r3, r3, #4
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	621a      	str	r2, [r3, #32]
}
 8003dec:	bf00      	nop
 8003dee:	371c      	adds	r7, #28
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr
 8003df8:	40010000 	.word	0x40010000
 8003dfc:	40010400 	.word	0x40010400

08003e00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b087      	sub	sp, #28
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	021b      	lsls	r3, r3, #8
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	031b      	lsls	r3, r3, #12
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a12      	ldr	r2, [pc, #72]	@ (8003ea4 <TIM_OC4_SetConfig+0xa4>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d003      	beq.n	8003e68 <TIM_OC4_SetConfig+0x68>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a11      	ldr	r2, [pc, #68]	@ (8003ea8 <TIM_OC4_SetConfig+0xa8>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d109      	bne.n	8003e7c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	019b      	lsls	r3, r3, #6
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685a      	ldr	r2, [r3, #4]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	621a      	str	r2, [r3, #32]
}
 8003e96:	bf00      	nop
 8003e98:	371c      	adds	r7, #28
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	40010000 	.word	0x40010000
 8003ea8:	40010400 	.word	0x40010400

08003eac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b087      	sub	sp, #28
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	f003 031f 	and.w	r3, r3, #31
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6a1a      	ldr	r2, [r3, #32]
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	43db      	mvns	r3, r3
 8003ece:	401a      	ands	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6a1a      	ldr	r2, [r3, #32]
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	f003 031f 	and.w	r3, r3, #31
 8003ede:	6879      	ldr	r1, [r7, #4]
 8003ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	621a      	str	r2, [r3, #32]
}
 8003eea:	bf00      	nop
 8003eec:	371c      	adds	r7, #28
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
	...

08003ef8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d101      	bne.n	8003f10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	e05a      	b.n	8003fc6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a21      	ldr	r2, [pc, #132]	@ (8003fd4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d022      	beq.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f5c:	d01d      	beq.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a1d      	ldr	r2, [pc, #116]	@ (8003fd8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d018      	beq.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a1b      	ldr	r2, [pc, #108]	@ (8003fdc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d013      	beq.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a1a      	ldr	r2, [pc, #104]	@ (8003fe0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d00e      	beq.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a18      	ldr	r2, [pc, #96]	@ (8003fe4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d009      	beq.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a17      	ldr	r2, [pc, #92]	@ (8003fe8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d004      	beq.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a15      	ldr	r2, [pc, #84]	@ (8003fec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d10c      	bne.n	8003fb4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fa0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	68ba      	ldr	r2, [r7, #8]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3714      	adds	r7, #20
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	40010000 	.word	0x40010000
 8003fd8:	40000400 	.word	0x40000400
 8003fdc:	40000800 	.word	0x40000800
 8003fe0:	40000c00 	.word	0x40000c00
 8003fe4:	40010400 	.word	0x40010400
 8003fe8:	40014000 	.word	0x40014000
 8003fec:	40001800 	.word	0x40001800

08003ff0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e042      	b.n	8004088 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d106      	bne.n	800401c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f7fc ffc4 	bl	8000fa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2224      	movs	r2, #36	@ 0x24
 8004020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68da      	ldr	r2, [r3, #12]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004032:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 f973 	bl	8004320 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	691a      	ldr	r2, [r3, #16]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004048:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	695a      	ldr	r2, [r3, #20]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004058:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68da      	ldr	r2, [r3, #12]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004068:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2220      	movs	r2, #32
 8004074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2220      	movs	r2, #32
 800407c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3708      	adds	r7, #8
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b08a      	sub	sp, #40	@ 0x28
 8004094:	af02      	add	r7, sp, #8
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	603b      	str	r3, [r7, #0]
 800409c:	4613      	mov	r3, r2
 800409e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80040a0:	2300      	movs	r3, #0
 80040a2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	2b20      	cmp	r3, #32
 80040ae:	d175      	bne.n	800419c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d002      	beq.n	80040bc <HAL_UART_Transmit+0x2c>
 80040b6:	88fb      	ldrh	r3, [r7, #6]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e06e      	b.n	800419e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2221      	movs	r2, #33	@ 0x21
 80040ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040ce:	f7fd f8b9 	bl	8001244 <HAL_GetTick>
 80040d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	88fa      	ldrh	r2, [r7, #6]
 80040d8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	88fa      	ldrh	r2, [r7, #6]
 80040de:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040e8:	d108      	bne.n	80040fc <HAL_UART_Transmit+0x6c>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d104      	bne.n	80040fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80040f2:	2300      	movs	r3, #0
 80040f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	61bb      	str	r3, [r7, #24]
 80040fa:	e003      	b.n	8004104 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004100:	2300      	movs	r3, #0
 8004102:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004104:	e02e      	b.n	8004164 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	2200      	movs	r2, #0
 800410e:	2180      	movs	r1, #128	@ 0x80
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f000 f848 	bl	80041a6 <UART_WaitOnFlagUntilTimeout>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d005      	beq.n	8004128 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2220      	movs	r2, #32
 8004120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e03a      	b.n	800419e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10b      	bne.n	8004146 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	881b      	ldrh	r3, [r3, #0]
 8004132:	461a      	mov	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800413c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	3302      	adds	r3, #2
 8004142:	61bb      	str	r3, [r7, #24]
 8004144:	e007      	b.n	8004156 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	781a      	ldrb	r2, [r3, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	3301      	adds	r3, #1
 8004154:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800415a:	b29b      	uxth	r3, r3
 800415c:	3b01      	subs	r3, #1
 800415e:	b29a      	uxth	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004168:	b29b      	uxth	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1cb      	bne.n	8004106 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	2200      	movs	r2, #0
 8004176:	2140      	movs	r1, #64	@ 0x40
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 f814 	bl	80041a6 <UART_WaitOnFlagUntilTimeout>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d005      	beq.n	8004190 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2220      	movs	r2, #32
 8004188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e006      	b.n	800419e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2220      	movs	r2, #32
 8004194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004198:	2300      	movs	r3, #0
 800419a:	e000      	b.n	800419e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800419c:	2302      	movs	r3, #2
  }
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3720      	adds	r7, #32
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b086      	sub	sp, #24
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	60f8      	str	r0, [r7, #12]
 80041ae:	60b9      	str	r1, [r7, #8]
 80041b0:	603b      	str	r3, [r7, #0]
 80041b2:	4613      	mov	r3, r2
 80041b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041b6:	e03b      	b.n	8004230 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041b8:	6a3b      	ldr	r3, [r7, #32]
 80041ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041be:	d037      	beq.n	8004230 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041c0:	f7fd f840 	bl	8001244 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	6a3a      	ldr	r2, [r7, #32]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d302      	bcc.n	80041d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80041d0:	6a3b      	ldr	r3, [r7, #32]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e03a      	b.n	8004250 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	f003 0304 	and.w	r3, r3, #4
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d023      	beq.n	8004230 <UART_WaitOnFlagUntilTimeout+0x8a>
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	2b80      	cmp	r3, #128	@ 0x80
 80041ec:	d020      	beq.n	8004230 <UART_WaitOnFlagUntilTimeout+0x8a>
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	2b40      	cmp	r3, #64	@ 0x40
 80041f2:	d01d      	beq.n	8004230 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0308 	and.w	r3, r3, #8
 80041fe:	2b08      	cmp	r3, #8
 8004200:	d116      	bne.n	8004230 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004202:	2300      	movs	r3, #0
 8004204:	617b      	str	r3, [r7, #20]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	617b      	str	r3, [r7, #20]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	617b      	str	r3, [r7, #20]
 8004216:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f000 f81d 	bl	8004258 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2208      	movs	r2, #8
 8004222:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e00f      	b.n	8004250 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	4013      	ands	r3, r2
 800423a:	68ba      	ldr	r2, [r7, #8]
 800423c:	429a      	cmp	r2, r3
 800423e:	bf0c      	ite	eq
 8004240:	2301      	moveq	r3, #1
 8004242:	2300      	movne	r3, #0
 8004244:	b2db      	uxtb	r3, r3
 8004246:	461a      	mov	r2, r3
 8004248:	79fb      	ldrb	r3, [r7, #7]
 800424a:	429a      	cmp	r2, r3
 800424c:	d0b4      	beq.n	80041b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3718      	adds	r7, #24
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004258:	b480      	push	{r7}
 800425a:	b095      	sub	sp, #84	@ 0x54
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	330c      	adds	r3, #12
 8004266:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800426a:	e853 3f00 	ldrex	r3, [r3]
 800426e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004272:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004276:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	330c      	adds	r3, #12
 800427e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004280:	643a      	str	r2, [r7, #64]	@ 0x40
 8004282:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004284:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004286:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004288:	e841 2300 	strex	r3, r2, [r1]
 800428c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800428e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1e5      	bne.n	8004260 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	3314      	adds	r3, #20
 800429a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429c:	6a3b      	ldr	r3, [r7, #32]
 800429e:	e853 3f00 	ldrex	r3, [r3]
 80042a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	f023 0301 	bic.w	r3, r3, #1
 80042aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	3314      	adds	r3, #20
 80042b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042bc:	e841 2300 	strex	r3, r2, [r1]
 80042c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1e5      	bne.n	8004294 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d119      	bne.n	8004304 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	330c      	adds	r3, #12
 80042d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	e853 3f00 	ldrex	r3, [r3]
 80042de:	60bb      	str	r3, [r7, #8]
   return(result);
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	f023 0310 	bic.w	r3, r3, #16
 80042e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	330c      	adds	r3, #12
 80042ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042f0:	61ba      	str	r2, [r7, #24]
 80042f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f4:	6979      	ldr	r1, [r7, #20]
 80042f6:	69ba      	ldr	r2, [r7, #24]
 80042f8:	e841 2300 	strex	r3, r2, [r1]
 80042fc:	613b      	str	r3, [r7, #16]
   return(result);
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1e5      	bne.n	80042d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2220      	movs	r2, #32
 8004308:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004312:	bf00      	nop
 8004314:	3754      	adds	r7, #84	@ 0x54
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
	...

08004320 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004320:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004324:	b0c0      	sub	sp, #256	@ 0x100
 8004326:	af00      	add	r7, sp, #0
 8004328:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800432c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800433c:	68d9      	ldr	r1, [r3, #12]
 800433e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	ea40 0301 	orr.w	r3, r0, r1
 8004348:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800434a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800434e:	689a      	ldr	r2, [r3, #8]
 8004350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	431a      	orrs	r2, r3
 8004358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	431a      	orrs	r2, r3
 8004360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004364:	69db      	ldr	r3, [r3, #28]
 8004366:	4313      	orrs	r3, r2
 8004368:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800436c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004378:	f021 010c 	bic.w	r1, r1, #12
 800437c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004386:	430b      	orrs	r3, r1
 8004388:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800438a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800439a:	6999      	ldr	r1, [r3, #24]
 800439c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	ea40 0301 	orr.w	r3, r0, r1
 80043a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	4b8f      	ldr	r3, [pc, #572]	@ (80045ec <UART_SetConfig+0x2cc>)
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d005      	beq.n	80043c0 <UART_SetConfig+0xa0>
 80043b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	4b8d      	ldr	r3, [pc, #564]	@ (80045f0 <UART_SetConfig+0x2d0>)
 80043bc:	429a      	cmp	r2, r3
 80043be:	d104      	bne.n	80043ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80043c0:	f7fe fc5c 	bl	8002c7c <HAL_RCC_GetPCLK2Freq>
 80043c4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80043c8:	e003      	b.n	80043d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80043ca:	f7fe fc43 	bl	8002c54 <HAL_RCC_GetPCLK1Freq>
 80043ce:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043d6:	69db      	ldr	r3, [r3, #28]
 80043d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043dc:	f040 810c 	bne.w	80045f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043e4:	2200      	movs	r2, #0
 80043e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80043ea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80043ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80043f2:	4622      	mov	r2, r4
 80043f4:	462b      	mov	r3, r5
 80043f6:	1891      	adds	r1, r2, r2
 80043f8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80043fa:	415b      	adcs	r3, r3
 80043fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004402:	4621      	mov	r1, r4
 8004404:	eb12 0801 	adds.w	r8, r2, r1
 8004408:	4629      	mov	r1, r5
 800440a:	eb43 0901 	adc.w	r9, r3, r1
 800440e:	f04f 0200 	mov.w	r2, #0
 8004412:	f04f 0300 	mov.w	r3, #0
 8004416:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800441a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800441e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004422:	4690      	mov	r8, r2
 8004424:	4699      	mov	r9, r3
 8004426:	4623      	mov	r3, r4
 8004428:	eb18 0303 	adds.w	r3, r8, r3
 800442c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004430:	462b      	mov	r3, r5
 8004432:	eb49 0303 	adc.w	r3, r9, r3
 8004436:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800443a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004446:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800444a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800444e:	460b      	mov	r3, r1
 8004450:	18db      	adds	r3, r3, r3
 8004452:	653b      	str	r3, [r7, #80]	@ 0x50
 8004454:	4613      	mov	r3, r2
 8004456:	eb42 0303 	adc.w	r3, r2, r3
 800445a:	657b      	str	r3, [r7, #84]	@ 0x54
 800445c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004460:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004464:	f7fb ff2c 	bl	80002c0 <__aeabi_uldivmod>
 8004468:	4602      	mov	r2, r0
 800446a:	460b      	mov	r3, r1
 800446c:	4b61      	ldr	r3, [pc, #388]	@ (80045f4 <UART_SetConfig+0x2d4>)
 800446e:	fba3 2302 	umull	r2, r3, r3, r2
 8004472:	095b      	lsrs	r3, r3, #5
 8004474:	011c      	lsls	r4, r3, #4
 8004476:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800447a:	2200      	movs	r2, #0
 800447c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004480:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004484:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004488:	4642      	mov	r2, r8
 800448a:	464b      	mov	r3, r9
 800448c:	1891      	adds	r1, r2, r2
 800448e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004490:	415b      	adcs	r3, r3
 8004492:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004494:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004498:	4641      	mov	r1, r8
 800449a:	eb12 0a01 	adds.w	sl, r2, r1
 800449e:	4649      	mov	r1, r9
 80044a0:	eb43 0b01 	adc.w	fp, r3, r1
 80044a4:	f04f 0200 	mov.w	r2, #0
 80044a8:	f04f 0300 	mov.w	r3, #0
 80044ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80044b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80044b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044b8:	4692      	mov	sl, r2
 80044ba:	469b      	mov	fp, r3
 80044bc:	4643      	mov	r3, r8
 80044be:	eb1a 0303 	adds.w	r3, sl, r3
 80044c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80044c6:	464b      	mov	r3, r9
 80044c8:	eb4b 0303 	adc.w	r3, fp, r3
 80044cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80044d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80044dc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80044e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80044e4:	460b      	mov	r3, r1
 80044e6:	18db      	adds	r3, r3, r3
 80044e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80044ea:	4613      	mov	r3, r2
 80044ec:	eb42 0303 	adc.w	r3, r2, r3
 80044f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80044f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80044f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80044fa:	f7fb fee1 	bl	80002c0 <__aeabi_uldivmod>
 80044fe:	4602      	mov	r2, r0
 8004500:	460b      	mov	r3, r1
 8004502:	4611      	mov	r1, r2
 8004504:	4b3b      	ldr	r3, [pc, #236]	@ (80045f4 <UART_SetConfig+0x2d4>)
 8004506:	fba3 2301 	umull	r2, r3, r3, r1
 800450a:	095b      	lsrs	r3, r3, #5
 800450c:	2264      	movs	r2, #100	@ 0x64
 800450e:	fb02 f303 	mul.w	r3, r2, r3
 8004512:	1acb      	subs	r3, r1, r3
 8004514:	00db      	lsls	r3, r3, #3
 8004516:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800451a:	4b36      	ldr	r3, [pc, #216]	@ (80045f4 <UART_SetConfig+0x2d4>)
 800451c:	fba3 2302 	umull	r2, r3, r3, r2
 8004520:	095b      	lsrs	r3, r3, #5
 8004522:	005b      	lsls	r3, r3, #1
 8004524:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004528:	441c      	add	r4, r3
 800452a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800452e:	2200      	movs	r2, #0
 8004530:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004534:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004538:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800453c:	4642      	mov	r2, r8
 800453e:	464b      	mov	r3, r9
 8004540:	1891      	adds	r1, r2, r2
 8004542:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004544:	415b      	adcs	r3, r3
 8004546:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004548:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800454c:	4641      	mov	r1, r8
 800454e:	1851      	adds	r1, r2, r1
 8004550:	6339      	str	r1, [r7, #48]	@ 0x30
 8004552:	4649      	mov	r1, r9
 8004554:	414b      	adcs	r3, r1
 8004556:	637b      	str	r3, [r7, #52]	@ 0x34
 8004558:	f04f 0200 	mov.w	r2, #0
 800455c:	f04f 0300 	mov.w	r3, #0
 8004560:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004564:	4659      	mov	r1, fp
 8004566:	00cb      	lsls	r3, r1, #3
 8004568:	4651      	mov	r1, sl
 800456a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800456e:	4651      	mov	r1, sl
 8004570:	00ca      	lsls	r2, r1, #3
 8004572:	4610      	mov	r0, r2
 8004574:	4619      	mov	r1, r3
 8004576:	4603      	mov	r3, r0
 8004578:	4642      	mov	r2, r8
 800457a:	189b      	adds	r3, r3, r2
 800457c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004580:	464b      	mov	r3, r9
 8004582:	460a      	mov	r2, r1
 8004584:	eb42 0303 	adc.w	r3, r2, r3
 8004588:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800458c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004598:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800459c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80045a0:	460b      	mov	r3, r1
 80045a2:	18db      	adds	r3, r3, r3
 80045a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045a6:	4613      	mov	r3, r2
 80045a8:	eb42 0303 	adc.w	r3, r2, r3
 80045ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80045b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80045b6:	f7fb fe83 	bl	80002c0 <__aeabi_uldivmod>
 80045ba:	4602      	mov	r2, r0
 80045bc:	460b      	mov	r3, r1
 80045be:	4b0d      	ldr	r3, [pc, #52]	@ (80045f4 <UART_SetConfig+0x2d4>)
 80045c0:	fba3 1302 	umull	r1, r3, r3, r2
 80045c4:	095b      	lsrs	r3, r3, #5
 80045c6:	2164      	movs	r1, #100	@ 0x64
 80045c8:	fb01 f303 	mul.w	r3, r1, r3
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	00db      	lsls	r3, r3, #3
 80045d0:	3332      	adds	r3, #50	@ 0x32
 80045d2:	4a08      	ldr	r2, [pc, #32]	@ (80045f4 <UART_SetConfig+0x2d4>)
 80045d4:	fba2 2303 	umull	r2, r3, r2, r3
 80045d8:	095b      	lsrs	r3, r3, #5
 80045da:	f003 0207 	and.w	r2, r3, #7
 80045de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4422      	add	r2, r4
 80045e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80045e8:	e106      	b.n	80047f8 <UART_SetConfig+0x4d8>
 80045ea:	bf00      	nop
 80045ec:	40011000 	.word	0x40011000
 80045f0:	40011400 	.word	0x40011400
 80045f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045fc:	2200      	movs	r2, #0
 80045fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004602:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004606:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800460a:	4642      	mov	r2, r8
 800460c:	464b      	mov	r3, r9
 800460e:	1891      	adds	r1, r2, r2
 8004610:	6239      	str	r1, [r7, #32]
 8004612:	415b      	adcs	r3, r3
 8004614:	627b      	str	r3, [r7, #36]	@ 0x24
 8004616:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800461a:	4641      	mov	r1, r8
 800461c:	1854      	adds	r4, r2, r1
 800461e:	4649      	mov	r1, r9
 8004620:	eb43 0501 	adc.w	r5, r3, r1
 8004624:	f04f 0200 	mov.w	r2, #0
 8004628:	f04f 0300 	mov.w	r3, #0
 800462c:	00eb      	lsls	r3, r5, #3
 800462e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004632:	00e2      	lsls	r2, r4, #3
 8004634:	4614      	mov	r4, r2
 8004636:	461d      	mov	r5, r3
 8004638:	4643      	mov	r3, r8
 800463a:	18e3      	adds	r3, r4, r3
 800463c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004640:	464b      	mov	r3, r9
 8004642:	eb45 0303 	adc.w	r3, r5, r3
 8004646:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800464a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004656:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800465a:	f04f 0200 	mov.w	r2, #0
 800465e:	f04f 0300 	mov.w	r3, #0
 8004662:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004666:	4629      	mov	r1, r5
 8004668:	008b      	lsls	r3, r1, #2
 800466a:	4621      	mov	r1, r4
 800466c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004670:	4621      	mov	r1, r4
 8004672:	008a      	lsls	r2, r1, #2
 8004674:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004678:	f7fb fe22 	bl	80002c0 <__aeabi_uldivmod>
 800467c:	4602      	mov	r2, r0
 800467e:	460b      	mov	r3, r1
 8004680:	4b60      	ldr	r3, [pc, #384]	@ (8004804 <UART_SetConfig+0x4e4>)
 8004682:	fba3 2302 	umull	r2, r3, r3, r2
 8004686:	095b      	lsrs	r3, r3, #5
 8004688:	011c      	lsls	r4, r3, #4
 800468a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800468e:	2200      	movs	r2, #0
 8004690:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004694:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004698:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800469c:	4642      	mov	r2, r8
 800469e:	464b      	mov	r3, r9
 80046a0:	1891      	adds	r1, r2, r2
 80046a2:	61b9      	str	r1, [r7, #24]
 80046a4:	415b      	adcs	r3, r3
 80046a6:	61fb      	str	r3, [r7, #28]
 80046a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046ac:	4641      	mov	r1, r8
 80046ae:	1851      	adds	r1, r2, r1
 80046b0:	6139      	str	r1, [r7, #16]
 80046b2:	4649      	mov	r1, r9
 80046b4:	414b      	adcs	r3, r1
 80046b6:	617b      	str	r3, [r7, #20]
 80046b8:	f04f 0200 	mov.w	r2, #0
 80046bc:	f04f 0300 	mov.w	r3, #0
 80046c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046c4:	4659      	mov	r1, fp
 80046c6:	00cb      	lsls	r3, r1, #3
 80046c8:	4651      	mov	r1, sl
 80046ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046ce:	4651      	mov	r1, sl
 80046d0:	00ca      	lsls	r2, r1, #3
 80046d2:	4610      	mov	r0, r2
 80046d4:	4619      	mov	r1, r3
 80046d6:	4603      	mov	r3, r0
 80046d8:	4642      	mov	r2, r8
 80046da:	189b      	adds	r3, r3, r2
 80046dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80046e0:	464b      	mov	r3, r9
 80046e2:	460a      	mov	r2, r1
 80046e4:	eb42 0303 	adc.w	r3, r2, r3
 80046e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80046ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80046f6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80046f8:	f04f 0200 	mov.w	r2, #0
 80046fc:	f04f 0300 	mov.w	r3, #0
 8004700:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004704:	4649      	mov	r1, r9
 8004706:	008b      	lsls	r3, r1, #2
 8004708:	4641      	mov	r1, r8
 800470a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800470e:	4641      	mov	r1, r8
 8004710:	008a      	lsls	r2, r1, #2
 8004712:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004716:	f7fb fdd3 	bl	80002c0 <__aeabi_uldivmod>
 800471a:	4602      	mov	r2, r0
 800471c:	460b      	mov	r3, r1
 800471e:	4611      	mov	r1, r2
 8004720:	4b38      	ldr	r3, [pc, #224]	@ (8004804 <UART_SetConfig+0x4e4>)
 8004722:	fba3 2301 	umull	r2, r3, r3, r1
 8004726:	095b      	lsrs	r3, r3, #5
 8004728:	2264      	movs	r2, #100	@ 0x64
 800472a:	fb02 f303 	mul.w	r3, r2, r3
 800472e:	1acb      	subs	r3, r1, r3
 8004730:	011b      	lsls	r3, r3, #4
 8004732:	3332      	adds	r3, #50	@ 0x32
 8004734:	4a33      	ldr	r2, [pc, #204]	@ (8004804 <UART_SetConfig+0x4e4>)
 8004736:	fba2 2303 	umull	r2, r3, r2, r3
 800473a:	095b      	lsrs	r3, r3, #5
 800473c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004740:	441c      	add	r4, r3
 8004742:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004746:	2200      	movs	r2, #0
 8004748:	673b      	str	r3, [r7, #112]	@ 0x70
 800474a:	677a      	str	r2, [r7, #116]	@ 0x74
 800474c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004750:	4642      	mov	r2, r8
 8004752:	464b      	mov	r3, r9
 8004754:	1891      	adds	r1, r2, r2
 8004756:	60b9      	str	r1, [r7, #8]
 8004758:	415b      	adcs	r3, r3
 800475a:	60fb      	str	r3, [r7, #12]
 800475c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004760:	4641      	mov	r1, r8
 8004762:	1851      	adds	r1, r2, r1
 8004764:	6039      	str	r1, [r7, #0]
 8004766:	4649      	mov	r1, r9
 8004768:	414b      	adcs	r3, r1
 800476a:	607b      	str	r3, [r7, #4]
 800476c:	f04f 0200 	mov.w	r2, #0
 8004770:	f04f 0300 	mov.w	r3, #0
 8004774:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004778:	4659      	mov	r1, fp
 800477a:	00cb      	lsls	r3, r1, #3
 800477c:	4651      	mov	r1, sl
 800477e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004782:	4651      	mov	r1, sl
 8004784:	00ca      	lsls	r2, r1, #3
 8004786:	4610      	mov	r0, r2
 8004788:	4619      	mov	r1, r3
 800478a:	4603      	mov	r3, r0
 800478c:	4642      	mov	r2, r8
 800478e:	189b      	adds	r3, r3, r2
 8004790:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004792:	464b      	mov	r3, r9
 8004794:	460a      	mov	r2, r1
 8004796:	eb42 0303 	adc.w	r3, r2, r3
 800479a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800479c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80047a6:	667a      	str	r2, [r7, #100]	@ 0x64
 80047a8:	f04f 0200 	mov.w	r2, #0
 80047ac:	f04f 0300 	mov.w	r3, #0
 80047b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80047b4:	4649      	mov	r1, r9
 80047b6:	008b      	lsls	r3, r1, #2
 80047b8:	4641      	mov	r1, r8
 80047ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047be:	4641      	mov	r1, r8
 80047c0:	008a      	lsls	r2, r1, #2
 80047c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80047c6:	f7fb fd7b 	bl	80002c0 <__aeabi_uldivmod>
 80047ca:	4602      	mov	r2, r0
 80047cc:	460b      	mov	r3, r1
 80047ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004804 <UART_SetConfig+0x4e4>)
 80047d0:	fba3 1302 	umull	r1, r3, r3, r2
 80047d4:	095b      	lsrs	r3, r3, #5
 80047d6:	2164      	movs	r1, #100	@ 0x64
 80047d8:	fb01 f303 	mul.w	r3, r1, r3
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	011b      	lsls	r3, r3, #4
 80047e0:	3332      	adds	r3, #50	@ 0x32
 80047e2:	4a08      	ldr	r2, [pc, #32]	@ (8004804 <UART_SetConfig+0x4e4>)
 80047e4:	fba2 2303 	umull	r2, r3, r2, r3
 80047e8:	095b      	lsrs	r3, r3, #5
 80047ea:	f003 020f 	and.w	r2, r3, #15
 80047ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4422      	add	r2, r4
 80047f6:	609a      	str	r2, [r3, #8]
}
 80047f8:	bf00      	nop
 80047fa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80047fe:	46bd      	mov	sp, r7
 8004800:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004804:	51eb851f 	.word	0x51eb851f

08004808 <siprintf>:
 8004808:	b40e      	push	{r1, r2, r3}
 800480a:	b500      	push	{lr}
 800480c:	b09c      	sub	sp, #112	@ 0x70
 800480e:	ab1d      	add	r3, sp, #116	@ 0x74
 8004810:	9002      	str	r0, [sp, #8]
 8004812:	9006      	str	r0, [sp, #24]
 8004814:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004818:	4809      	ldr	r0, [pc, #36]	@ (8004840 <siprintf+0x38>)
 800481a:	9107      	str	r1, [sp, #28]
 800481c:	9104      	str	r1, [sp, #16]
 800481e:	4909      	ldr	r1, [pc, #36]	@ (8004844 <siprintf+0x3c>)
 8004820:	f853 2b04 	ldr.w	r2, [r3], #4
 8004824:	9105      	str	r1, [sp, #20]
 8004826:	6800      	ldr	r0, [r0, #0]
 8004828:	9301      	str	r3, [sp, #4]
 800482a:	a902      	add	r1, sp, #8
 800482c:	f000 f9a8 	bl	8004b80 <_svfiprintf_r>
 8004830:	9b02      	ldr	r3, [sp, #8]
 8004832:	2200      	movs	r2, #0
 8004834:	701a      	strb	r2, [r3, #0]
 8004836:	b01c      	add	sp, #112	@ 0x70
 8004838:	f85d eb04 	ldr.w	lr, [sp], #4
 800483c:	b003      	add	sp, #12
 800483e:	4770      	bx	lr
 8004840:	20000010 	.word	0x20000010
 8004844:	ffff0208 	.word	0xffff0208

08004848 <memset>:
 8004848:	4402      	add	r2, r0
 800484a:	4603      	mov	r3, r0
 800484c:	4293      	cmp	r3, r2
 800484e:	d100      	bne.n	8004852 <memset+0xa>
 8004850:	4770      	bx	lr
 8004852:	f803 1b01 	strb.w	r1, [r3], #1
 8004856:	e7f9      	b.n	800484c <memset+0x4>

08004858 <strncpy>:
 8004858:	b510      	push	{r4, lr}
 800485a:	3901      	subs	r1, #1
 800485c:	4603      	mov	r3, r0
 800485e:	b132      	cbz	r2, 800486e <strncpy+0x16>
 8004860:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004864:	f803 4b01 	strb.w	r4, [r3], #1
 8004868:	3a01      	subs	r2, #1
 800486a:	2c00      	cmp	r4, #0
 800486c:	d1f7      	bne.n	800485e <strncpy+0x6>
 800486e:	441a      	add	r2, r3
 8004870:	2100      	movs	r1, #0
 8004872:	4293      	cmp	r3, r2
 8004874:	d100      	bne.n	8004878 <strncpy+0x20>
 8004876:	bd10      	pop	{r4, pc}
 8004878:	f803 1b01 	strb.w	r1, [r3], #1
 800487c:	e7f9      	b.n	8004872 <strncpy+0x1a>
	...

08004880 <__errno>:
 8004880:	4b01      	ldr	r3, [pc, #4]	@ (8004888 <__errno+0x8>)
 8004882:	6818      	ldr	r0, [r3, #0]
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	20000010 	.word	0x20000010

0800488c <__libc_init_array>:
 800488c:	b570      	push	{r4, r5, r6, lr}
 800488e:	4d0d      	ldr	r5, [pc, #52]	@ (80048c4 <__libc_init_array+0x38>)
 8004890:	4c0d      	ldr	r4, [pc, #52]	@ (80048c8 <__libc_init_array+0x3c>)
 8004892:	1b64      	subs	r4, r4, r5
 8004894:	10a4      	asrs	r4, r4, #2
 8004896:	2600      	movs	r6, #0
 8004898:	42a6      	cmp	r6, r4
 800489a:	d109      	bne.n	80048b0 <__libc_init_array+0x24>
 800489c:	4d0b      	ldr	r5, [pc, #44]	@ (80048cc <__libc_init_array+0x40>)
 800489e:	4c0c      	ldr	r4, [pc, #48]	@ (80048d0 <__libc_init_array+0x44>)
 80048a0:	f000 fc66 	bl	8005170 <_init>
 80048a4:	1b64      	subs	r4, r4, r5
 80048a6:	10a4      	asrs	r4, r4, #2
 80048a8:	2600      	movs	r6, #0
 80048aa:	42a6      	cmp	r6, r4
 80048ac:	d105      	bne.n	80048ba <__libc_init_array+0x2e>
 80048ae:	bd70      	pop	{r4, r5, r6, pc}
 80048b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80048b4:	4798      	blx	r3
 80048b6:	3601      	adds	r6, #1
 80048b8:	e7ee      	b.n	8004898 <__libc_init_array+0xc>
 80048ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80048be:	4798      	blx	r3
 80048c0:	3601      	adds	r6, #1
 80048c2:	e7f2      	b.n	80048aa <__libc_init_array+0x1e>
 80048c4:	08005330 	.word	0x08005330
 80048c8:	08005330 	.word	0x08005330
 80048cc:	08005330 	.word	0x08005330
 80048d0:	08005334 	.word	0x08005334

080048d4 <__retarget_lock_acquire_recursive>:
 80048d4:	4770      	bx	lr

080048d6 <__retarget_lock_release_recursive>:
 80048d6:	4770      	bx	lr

080048d8 <_free_r>:
 80048d8:	b538      	push	{r3, r4, r5, lr}
 80048da:	4605      	mov	r5, r0
 80048dc:	2900      	cmp	r1, #0
 80048de:	d041      	beq.n	8004964 <_free_r+0x8c>
 80048e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048e4:	1f0c      	subs	r4, r1, #4
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	bfb8      	it	lt
 80048ea:	18e4      	addlt	r4, r4, r3
 80048ec:	f000 f8e0 	bl	8004ab0 <__malloc_lock>
 80048f0:	4a1d      	ldr	r2, [pc, #116]	@ (8004968 <_free_r+0x90>)
 80048f2:	6813      	ldr	r3, [r2, #0]
 80048f4:	b933      	cbnz	r3, 8004904 <_free_r+0x2c>
 80048f6:	6063      	str	r3, [r4, #4]
 80048f8:	6014      	str	r4, [r2, #0]
 80048fa:	4628      	mov	r0, r5
 80048fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004900:	f000 b8dc 	b.w	8004abc <__malloc_unlock>
 8004904:	42a3      	cmp	r3, r4
 8004906:	d908      	bls.n	800491a <_free_r+0x42>
 8004908:	6820      	ldr	r0, [r4, #0]
 800490a:	1821      	adds	r1, r4, r0
 800490c:	428b      	cmp	r3, r1
 800490e:	bf01      	itttt	eq
 8004910:	6819      	ldreq	r1, [r3, #0]
 8004912:	685b      	ldreq	r3, [r3, #4]
 8004914:	1809      	addeq	r1, r1, r0
 8004916:	6021      	streq	r1, [r4, #0]
 8004918:	e7ed      	b.n	80048f6 <_free_r+0x1e>
 800491a:	461a      	mov	r2, r3
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	b10b      	cbz	r3, 8004924 <_free_r+0x4c>
 8004920:	42a3      	cmp	r3, r4
 8004922:	d9fa      	bls.n	800491a <_free_r+0x42>
 8004924:	6811      	ldr	r1, [r2, #0]
 8004926:	1850      	adds	r0, r2, r1
 8004928:	42a0      	cmp	r0, r4
 800492a:	d10b      	bne.n	8004944 <_free_r+0x6c>
 800492c:	6820      	ldr	r0, [r4, #0]
 800492e:	4401      	add	r1, r0
 8004930:	1850      	adds	r0, r2, r1
 8004932:	4283      	cmp	r3, r0
 8004934:	6011      	str	r1, [r2, #0]
 8004936:	d1e0      	bne.n	80048fa <_free_r+0x22>
 8004938:	6818      	ldr	r0, [r3, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	6053      	str	r3, [r2, #4]
 800493e:	4408      	add	r0, r1
 8004940:	6010      	str	r0, [r2, #0]
 8004942:	e7da      	b.n	80048fa <_free_r+0x22>
 8004944:	d902      	bls.n	800494c <_free_r+0x74>
 8004946:	230c      	movs	r3, #12
 8004948:	602b      	str	r3, [r5, #0]
 800494a:	e7d6      	b.n	80048fa <_free_r+0x22>
 800494c:	6820      	ldr	r0, [r4, #0]
 800494e:	1821      	adds	r1, r4, r0
 8004950:	428b      	cmp	r3, r1
 8004952:	bf04      	itt	eq
 8004954:	6819      	ldreq	r1, [r3, #0]
 8004956:	685b      	ldreq	r3, [r3, #4]
 8004958:	6063      	str	r3, [r4, #4]
 800495a:	bf04      	itt	eq
 800495c:	1809      	addeq	r1, r1, r0
 800495e:	6021      	streq	r1, [r4, #0]
 8004960:	6054      	str	r4, [r2, #4]
 8004962:	e7ca      	b.n	80048fa <_free_r+0x22>
 8004964:	bd38      	pop	{r3, r4, r5, pc}
 8004966:	bf00      	nop
 8004968:	20000aac 	.word	0x20000aac

0800496c <sbrk_aligned>:
 800496c:	b570      	push	{r4, r5, r6, lr}
 800496e:	4e0f      	ldr	r6, [pc, #60]	@ (80049ac <sbrk_aligned+0x40>)
 8004970:	460c      	mov	r4, r1
 8004972:	6831      	ldr	r1, [r6, #0]
 8004974:	4605      	mov	r5, r0
 8004976:	b911      	cbnz	r1, 800497e <sbrk_aligned+0x12>
 8004978:	f000 fba6 	bl	80050c8 <_sbrk_r>
 800497c:	6030      	str	r0, [r6, #0]
 800497e:	4621      	mov	r1, r4
 8004980:	4628      	mov	r0, r5
 8004982:	f000 fba1 	bl	80050c8 <_sbrk_r>
 8004986:	1c43      	adds	r3, r0, #1
 8004988:	d103      	bne.n	8004992 <sbrk_aligned+0x26>
 800498a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800498e:	4620      	mov	r0, r4
 8004990:	bd70      	pop	{r4, r5, r6, pc}
 8004992:	1cc4      	adds	r4, r0, #3
 8004994:	f024 0403 	bic.w	r4, r4, #3
 8004998:	42a0      	cmp	r0, r4
 800499a:	d0f8      	beq.n	800498e <sbrk_aligned+0x22>
 800499c:	1a21      	subs	r1, r4, r0
 800499e:	4628      	mov	r0, r5
 80049a0:	f000 fb92 	bl	80050c8 <_sbrk_r>
 80049a4:	3001      	adds	r0, #1
 80049a6:	d1f2      	bne.n	800498e <sbrk_aligned+0x22>
 80049a8:	e7ef      	b.n	800498a <sbrk_aligned+0x1e>
 80049aa:	bf00      	nop
 80049ac:	20000aa8 	.word	0x20000aa8

080049b0 <_malloc_r>:
 80049b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049b4:	1ccd      	adds	r5, r1, #3
 80049b6:	f025 0503 	bic.w	r5, r5, #3
 80049ba:	3508      	adds	r5, #8
 80049bc:	2d0c      	cmp	r5, #12
 80049be:	bf38      	it	cc
 80049c0:	250c      	movcc	r5, #12
 80049c2:	2d00      	cmp	r5, #0
 80049c4:	4606      	mov	r6, r0
 80049c6:	db01      	blt.n	80049cc <_malloc_r+0x1c>
 80049c8:	42a9      	cmp	r1, r5
 80049ca:	d904      	bls.n	80049d6 <_malloc_r+0x26>
 80049cc:	230c      	movs	r3, #12
 80049ce:	6033      	str	r3, [r6, #0]
 80049d0:	2000      	movs	r0, #0
 80049d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004aac <_malloc_r+0xfc>
 80049da:	f000 f869 	bl	8004ab0 <__malloc_lock>
 80049de:	f8d8 3000 	ldr.w	r3, [r8]
 80049e2:	461c      	mov	r4, r3
 80049e4:	bb44      	cbnz	r4, 8004a38 <_malloc_r+0x88>
 80049e6:	4629      	mov	r1, r5
 80049e8:	4630      	mov	r0, r6
 80049ea:	f7ff ffbf 	bl	800496c <sbrk_aligned>
 80049ee:	1c43      	adds	r3, r0, #1
 80049f0:	4604      	mov	r4, r0
 80049f2:	d158      	bne.n	8004aa6 <_malloc_r+0xf6>
 80049f4:	f8d8 4000 	ldr.w	r4, [r8]
 80049f8:	4627      	mov	r7, r4
 80049fa:	2f00      	cmp	r7, #0
 80049fc:	d143      	bne.n	8004a86 <_malloc_r+0xd6>
 80049fe:	2c00      	cmp	r4, #0
 8004a00:	d04b      	beq.n	8004a9a <_malloc_r+0xea>
 8004a02:	6823      	ldr	r3, [r4, #0]
 8004a04:	4639      	mov	r1, r7
 8004a06:	4630      	mov	r0, r6
 8004a08:	eb04 0903 	add.w	r9, r4, r3
 8004a0c:	f000 fb5c 	bl	80050c8 <_sbrk_r>
 8004a10:	4581      	cmp	r9, r0
 8004a12:	d142      	bne.n	8004a9a <_malloc_r+0xea>
 8004a14:	6821      	ldr	r1, [r4, #0]
 8004a16:	1a6d      	subs	r5, r5, r1
 8004a18:	4629      	mov	r1, r5
 8004a1a:	4630      	mov	r0, r6
 8004a1c:	f7ff ffa6 	bl	800496c <sbrk_aligned>
 8004a20:	3001      	adds	r0, #1
 8004a22:	d03a      	beq.n	8004a9a <_malloc_r+0xea>
 8004a24:	6823      	ldr	r3, [r4, #0]
 8004a26:	442b      	add	r3, r5
 8004a28:	6023      	str	r3, [r4, #0]
 8004a2a:	f8d8 3000 	ldr.w	r3, [r8]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	bb62      	cbnz	r2, 8004a8c <_malloc_r+0xdc>
 8004a32:	f8c8 7000 	str.w	r7, [r8]
 8004a36:	e00f      	b.n	8004a58 <_malloc_r+0xa8>
 8004a38:	6822      	ldr	r2, [r4, #0]
 8004a3a:	1b52      	subs	r2, r2, r5
 8004a3c:	d420      	bmi.n	8004a80 <_malloc_r+0xd0>
 8004a3e:	2a0b      	cmp	r2, #11
 8004a40:	d917      	bls.n	8004a72 <_malloc_r+0xc2>
 8004a42:	1961      	adds	r1, r4, r5
 8004a44:	42a3      	cmp	r3, r4
 8004a46:	6025      	str	r5, [r4, #0]
 8004a48:	bf18      	it	ne
 8004a4a:	6059      	strne	r1, [r3, #4]
 8004a4c:	6863      	ldr	r3, [r4, #4]
 8004a4e:	bf08      	it	eq
 8004a50:	f8c8 1000 	streq.w	r1, [r8]
 8004a54:	5162      	str	r2, [r4, r5]
 8004a56:	604b      	str	r3, [r1, #4]
 8004a58:	4630      	mov	r0, r6
 8004a5a:	f000 f82f 	bl	8004abc <__malloc_unlock>
 8004a5e:	f104 000b 	add.w	r0, r4, #11
 8004a62:	1d23      	adds	r3, r4, #4
 8004a64:	f020 0007 	bic.w	r0, r0, #7
 8004a68:	1ac2      	subs	r2, r0, r3
 8004a6a:	bf1c      	itt	ne
 8004a6c:	1a1b      	subne	r3, r3, r0
 8004a6e:	50a3      	strne	r3, [r4, r2]
 8004a70:	e7af      	b.n	80049d2 <_malloc_r+0x22>
 8004a72:	6862      	ldr	r2, [r4, #4]
 8004a74:	42a3      	cmp	r3, r4
 8004a76:	bf0c      	ite	eq
 8004a78:	f8c8 2000 	streq.w	r2, [r8]
 8004a7c:	605a      	strne	r2, [r3, #4]
 8004a7e:	e7eb      	b.n	8004a58 <_malloc_r+0xa8>
 8004a80:	4623      	mov	r3, r4
 8004a82:	6864      	ldr	r4, [r4, #4]
 8004a84:	e7ae      	b.n	80049e4 <_malloc_r+0x34>
 8004a86:	463c      	mov	r4, r7
 8004a88:	687f      	ldr	r7, [r7, #4]
 8004a8a:	e7b6      	b.n	80049fa <_malloc_r+0x4a>
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	42a3      	cmp	r3, r4
 8004a92:	d1fb      	bne.n	8004a8c <_malloc_r+0xdc>
 8004a94:	2300      	movs	r3, #0
 8004a96:	6053      	str	r3, [r2, #4]
 8004a98:	e7de      	b.n	8004a58 <_malloc_r+0xa8>
 8004a9a:	230c      	movs	r3, #12
 8004a9c:	6033      	str	r3, [r6, #0]
 8004a9e:	4630      	mov	r0, r6
 8004aa0:	f000 f80c 	bl	8004abc <__malloc_unlock>
 8004aa4:	e794      	b.n	80049d0 <_malloc_r+0x20>
 8004aa6:	6005      	str	r5, [r0, #0]
 8004aa8:	e7d6      	b.n	8004a58 <_malloc_r+0xa8>
 8004aaa:	bf00      	nop
 8004aac:	20000aac 	.word	0x20000aac

08004ab0 <__malloc_lock>:
 8004ab0:	4801      	ldr	r0, [pc, #4]	@ (8004ab8 <__malloc_lock+0x8>)
 8004ab2:	f7ff bf0f 	b.w	80048d4 <__retarget_lock_acquire_recursive>
 8004ab6:	bf00      	nop
 8004ab8:	20000aa4 	.word	0x20000aa4

08004abc <__malloc_unlock>:
 8004abc:	4801      	ldr	r0, [pc, #4]	@ (8004ac4 <__malloc_unlock+0x8>)
 8004abe:	f7ff bf0a 	b.w	80048d6 <__retarget_lock_release_recursive>
 8004ac2:	bf00      	nop
 8004ac4:	20000aa4 	.word	0x20000aa4

08004ac8 <__ssputs_r>:
 8004ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004acc:	688e      	ldr	r6, [r1, #8]
 8004ace:	461f      	mov	r7, r3
 8004ad0:	42be      	cmp	r6, r7
 8004ad2:	680b      	ldr	r3, [r1, #0]
 8004ad4:	4682      	mov	sl, r0
 8004ad6:	460c      	mov	r4, r1
 8004ad8:	4690      	mov	r8, r2
 8004ada:	d82d      	bhi.n	8004b38 <__ssputs_r+0x70>
 8004adc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004ae0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004ae4:	d026      	beq.n	8004b34 <__ssputs_r+0x6c>
 8004ae6:	6965      	ldr	r5, [r4, #20]
 8004ae8:	6909      	ldr	r1, [r1, #16]
 8004aea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004aee:	eba3 0901 	sub.w	r9, r3, r1
 8004af2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004af6:	1c7b      	adds	r3, r7, #1
 8004af8:	444b      	add	r3, r9
 8004afa:	106d      	asrs	r5, r5, #1
 8004afc:	429d      	cmp	r5, r3
 8004afe:	bf38      	it	cc
 8004b00:	461d      	movcc	r5, r3
 8004b02:	0553      	lsls	r3, r2, #21
 8004b04:	d527      	bpl.n	8004b56 <__ssputs_r+0x8e>
 8004b06:	4629      	mov	r1, r5
 8004b08:	f7ff ff52 	bl	80049b0 <_malloc_r>
 8004b0c:	4606      	mov	r6, r0
 8004b0e:	b360      	cbz	r0, 8004b6a <__ssputs_r+0xa2>
 8004b10:	6921      	ldr	r1, [r4, #16]
 8004b12:	464a      	mov	r2, r9
 8004b14:	f000 fae8 	bl	80050e8 <memcpy>
 8004b18:	89a3      	ldrh	r3, [r4, #12]
 8004b1a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004b1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b22:	81a3      	strh	r3, [r4, #12]
 8004b24:	6126      	str	r6, [r4, #16]
 8004b26:	6165      	str	r5, [r4, #20]
 8004b28:	444e      	add	r6, r9
 8004b2a:	eba5 0509 	sub.w	r5, r5, r9
 8004b2e:	6026      	str	r6, [r4, #0]
 8004b30:	60a5      	str	r5, [r4, #8]
 8004b32:	463e      	mov	r6, r7
 8004b34:	42be      	cmp	r6, r7
 8004b36:	d900      	bls.n	8004b3a <__ssputs_r+0x72>
 8004b38:	463e      	mov	r6, r7
 8004b3a:	6820      	ldr	r0, [r4, #0]
 8004b3c:	4632      	mov	r2, r6
 8004b3e:	4641      	mov	r1, r8
 8004b40:	f000 faa8 	bl	8005094 <memmove>
 8004b44:	68a3      	ldr	r3, [r4, #8]
 8004b46:	1b9b      	subs	r3, r3, r6
 8004b48:	60a3      	str	r3, [r4, #8]
 8004b4a:	6823      	ldr	r3, [r4, #0]
 8004b4c:	4433      	add	r3, r6
 8004b4e:	6023      	str	r3, [r4, #0]
 8004b50:	2000      	movs	r0, #0
 8004b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b56:	462a      	mov	r2, r5
 8004b58:	f000 fad4 	bl	8005104 <_realloc_r>
 8004b5c:	4606      	mov	r6, r0
 8004b5e:	2800      	cmp	r0, #0
 8004b60:	d1e0      	bne.n	8004b24 <__ssputs_r+0x5c>
 8004b62:	6921      	ldr	r1, [r4, #16]
 8004b64:	4650      	mov	r0, sl
 8004b66:	f7ff feb7 	bl	80048d8 <_free_r>
 8004b6a:	230c      	movs	r3, #12
 8004b6c:	f8ca 3000 	str.w	r3, [sl]
 8004b70:	89a3      	ldrh	r3, [r4, #12]
 8004b72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b76:	81a3      	strh	r3, [r4, #12]
 8004b78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004b7c:	e7e9      	b.n	8004b52 <__ssputs_r+0x8a>
	...

08004b80 <_svfiprintf_r>:
 8004b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b84:	4698      	mov	r8, r3
 8004b86:	898b      	ldrh	r3, [r1, #12]
 8004b88:	061b      	lsls	r3, r3, #24
 8004b8a:	b09d      	sub	sp, #116	@ 0x74
 8004b8c:	4607      	mov	r7, r0
 8004b8e:	460d      	mov	r5, r1
 8004b90:	4614      	mov	r4, r2
 8004b92:	d510      	bpl.n	8004bb6 <_svfiprintf_r+0x36>
 8004b94:	690b      	ldr	r3, [r1, #16]
 8004b96:	b973      	cbnz	r3, 8004bb6 <_svfiprintf_r+0x36>
 8004b98:	2140      	movs	r1, #64	@ 0x40
 8004b9a:	f7ff ff09 	bl	80049b0 <_malloc_r>
 8004b9e:	6028      	str	r0, [r5, #0]
 8004ba0:	6128      	str	r0, [r5, #16]
 8004ba2:	b930      	cbnz	r0, 8004bb2 <_svfiprintf_r+0x32>
 8004ba4:	230c      	movs	r3, #12
 8004ba6:	603b      	str	r3, [r7, #0]
 8004ba8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004bac:	b01d      	add	sp, #116	@ 0x74
 8004bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bb2:	2340      	movs	r3, #64	@ 0x40
 8004bb4:	616b      	str	r3, [r5, #20]
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8004bba:	2320      	movs	r3, #32
 8004bbc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004bc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8004bc4:	2330      	movs	r3, #48	@ 0x30
 8004bc6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004d64 <_svfiprintf_r+0x1e4>
 8004bca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004bce:	f04f 0901 	mov.w	r9, #1
 8004bd2:	4623      	mov	r3, r4
 8004bd4:	469a      	mov	sl, r3
 8004bd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004bda:	b10a      	cbz	r2, 8004be0 <_svfiprintf_r+0x60>
 8004bdc:	2a25      	cmp	r2, #37	@ 0x25
 8004bde:	d1f9      	bne.n	8004bd4 <_svfiprintf_r+0x54>
 8004be0:	ebba 0b04 	subs.w	fp, sl, r4
 8004be4:	d00b      	beq.n	8004bfe <_svfiprintf_r+0x7e>
 8004be6:	465b      	mov	r3, fp
 8004be8:	4622      	mov	r2, r4
 8004bea:	4629      	mov	r1, r5
 8004bec:	4638      	mov	r0, r7
 8004bee:	f7ff ff6b 	bl	8004ac8 <__ssputs_r>
 8004bf2:	3001      	adds	r0, #1
 8004bf4:	f000 80a7 	beq.w	8004d46 <_svfiprintf_r+0x1c6>
 8004bf8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004bfa:	445a      	add	r2, fp
 8004bfc:	9209      	str	r2, [sp, #36]	@ 0x24
 8004bfe:	f89a 3000 	ldrb.w	r3, [sl]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f000 809f 	beq.w	8004d46 <_svfiprintf_r+0x1c6>
 8004c08:	2300      	movs	r3, #0
 8004c0a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004c0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c12:	f10a 0a01 	add.w	sl, sl, #1
 8004c16:	9304      	str	r3, [sp, #16]
 8004c18:	9307      	str	r3, [sp, #28]
 8004c1a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004c1e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004c20:	4654      	mov	r4, sl
 8004c22:	2205      	movs	r2, #5
 8004c24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c28:	484e      	ldr	r0, [pc, #312]	@ (8004d64 <_svfiprintf_r+0x1e4>)
 8004c2a:	f7fb faf9 	bl	8000220 <memchr>
 8004c2e:	9a04      	ldr	r2, [sp, #16]
 8004c30:	b9d8      	cbnz	r0, 8004c6a <_svfiprintf_r+0xea>
 8004c32:	06d0      	lsls	r0, r2, #27
 8004c34:	bf44      	itt	mi
 8004c36:	2320      	movmi	r3, #32
 8004c38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c3c:	0711      	lsls	r1, r2, #28
 8004c3e:	bf44      	itt	mi
 8004c40:	232b      	movmi	r3, #43	@ 0x2b
 8004c42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c46:	f89a 3000 	ldrb.w	r3, [sl]
 8004c4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c4c:	d015      	beq.n	8004c7a <_svfiprintf_r+0xfa>
 8004c4e:	9a07      	ldr	r2, [sp, #28]
 8004c50:	4654      	mov	r4, sl
 8004c52:	2000      	movs	r0, #0
 8004c54:	f04f 0c0a 	mov.w	ip, #10
 8004c58:	4621      	mov	r1, r4
 8004c5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c5e:	3b30      	subs	r3, #48	@ 0x30
 8004c60:	2b09      	cmp	r3, #9
 8004c62:	d94b      	bls.n	8004cfc <_svfiprintf_r+0x17c>
 8004c64:	b1b0      	cbz	r0, 8004c94 <_svfiprintf_r+0x114>
 8004c66:	9207      	str	r2, [sp, #28]
 8004c68:	e014      	b.n	8004c94 <_svfiprintf_r+0x114>
 8004c6a:	eba0 0308 	sub.w	r3, r0, r8
 8004c6e:	fa09 f303 	lsl.w	r3, r9, r3
 8004c72:	4313      	orrs	r3, r2
 8004c74:	9304      	str	r3, [sp, #16]
 8004c76:	46a2      	mov	sl, r4
 8004c78:	e7d2      	b.n	8004c20 <_svfiprintf_r+0xa0>
 8004c7a:	9b03      	ldr	r3, [sp, #12]
 8004c7c:	1d19      	adds	r1, r3, #4
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	9103      	str	r1, [sp, #12]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	bfbb      	ittet	lt
 8004c86:	425b      	neglt	r3, r3
 8004c88:	f042 0202 	orrlt.w	r2, r2, #2
 8004c8c:	9307      	strge	r3, [sp, #28]
 8004c8e:	9307      	strlt	r3, [sp, #28]
 8004c90:	bfb8      	it	lt
 8004c92:	9204      	strlt	r2, [sp, #16]
 8004c94:	7823      	ldrb	r3, [r4, #0]
 8004c96:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c98:	d10a      	bne.n	8004cb0 <_svfiprintf_r+0x130>
 8004c9a:	7863      	ldrb	r3, [r4, #1]
 8004c9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c9e:	d132      	bne.n	8004d06 <_svfiprintf_r+0x186>
 8004ca0:	9b03      	ldr	r3, [sp, #12]
 8004ca2:	1d1a      	adds	r2, r3, #4
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	9203      	str	r2, [sp, #12]
 8004ca8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004cac:	3402      	adds	r4, #2
 8004cae:	9305      	str	r3, [sp, #20]
 8004cb0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004d74 <_svfiprintf_r+0x1f4>
 8004cb4:	7821      	ldrb	r1, [r4, #0]
 8004cb6:	2203      	movs	r2, #3
 8004cb8:	4650      	mov	r0, sl
 8004cba:	f7fb fab1 	bl	8000220 <memchr>
 8004cbe:	b138      	cbz	r0, 8004cd0 <_svfiprintf_r+0x150>
 8004cc0:	9b04      	ldr	r3, [sp, #16]
 8004cc2:	eba0 000a 	sub.w	r0, r0, sl
 8004cc6:	2240      	movs	r2, #64	@ 0x40
 8004cc8:	4082      	lsls	r2, r0
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	3401      	adds	r4, #1
 8004cce:	9304      	str	r3, [sp, #16]
 8004cd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cd4:	4824      	ldr	r0, [pc, #144]	@ (8004d68 <_svfiprintf_r+0x1e8>)
 8004cd6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004cda:	2206      	movs	r2, #6
 8004cdc:	f7fb faa0 	bl	8000220 <memchr>
 8004ce0:	2800      	cmp	r0, #0
 8004ce2:	d036      	beq.n	8004d52 <_svfiprintf_r+0x1d2>
 8004ce4:	4b21      	ldr	r3, [pc, #132]	@ (8004d6c <_svfiprintf_r+0x1ec>)
 8004ce6:	bb1b      	cbnz	r3, 8004d30 <_svfiprintf_r+0x1b0>
 8004ce8:	9b03      	ldr	r3, [sp, #12]
 8004cea:	3307      	adds	r3, #7
 8004cec:	f023 0307 	bic.w	r3, r3, #7
 8004cf0:	3308      	adds	r3, #8
 8004cf2:	9303      	str	r3, [sp, #12]
 8004cf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cf6:	4433      	add	r3, r6
 8004cf8:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cfa:	e76a      	b.n	8004bd2 <_svfiprintf_r+0x52>
 8004cfc:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d00:	460c      	mov	r4, r1
 8004d02:	2001      	movs	r0, #1
 8004d04:	e7a8      	b.n	8004c58 <_svfiprintf_r+0xd8>
 8004d06:	2300      	movs	r3, #0
 8004d08:	3401      	adds	r4, #1
 8004d0a:	9305      	str	r3, [sp, #20]
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	f04f 0c0a 	mov.w	ip, #10
 8004d12:	4620      	mov	r0, r4
 8004d14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d18:	3a30      	subs	r2, #48	@ 0x30
 8004d1a:	2a09      	cmp	r2, #9
 8004d1c:	d903      	bls.n	8004d26 <_svfiprintf_r+0x1a6>
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d0c6      	beq.n	8004cb0 <_svfiprintf_r+0x130>
 8004d22:	9105      	str	r1, [sp, #20]
 8004d24:	e7c4      	b.n	8004cb0 <_svfiprintf_r+0x130>
 8004d26:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d2a:	4604      	mov	r4, r0
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e7f0      	b.n	8004d12 <_svfiprintf_r+0x192>
 8004d30:	ab03      	add	r3, sp, #12
 8004d32:	9300      	str	r3, [sp, #0]
 8004d34:	462a      	mov	r2, r5
 8004d36:	4b0e      	ldr	r3, [pc, #56]	@ (8004d70 <_svfiprintf_r+0x1f0>)
 8004d38:	a904      	add	r1, sp, #16
 8004d3a:	4638      	mov	r0, r7
 8004d3c:	f3af 8000 	nop.w
 8004d40:	1c42      	adds	r2, r0, #1
 8004d42:	4606      	mov	r6, r0
 8004d44:	d1d6      	bne.n	8004cf4 <_svfiprintf_r+0x174>
 8004d46:	89ab      	ldrh	r3, [r5, #12]
 8004d48:	065b      	lsls	r3, r3, #25
 8004d4a:	f53f af2d 	bmi.w	8004ba8 <_svfiprintf_r+0x28>
 8004d4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004d50:	e72c      	b.n	8004bac <_svfiprintf_r+0x2c>
 8004d52:	ab03      	add	r3, sp, #12
 8004d54:	9300      	str	r3, [sp, #0]
 8004d56:	462a      	mov	r2, r5
 8004d58:	4b05      	ldr	r3, [pc, #20]	@ (8004d70 <_svfiprintf_r+0x1f0>)
 8004d5a:	a904      	add	r1, sp, #16
 8004d5c:	4638      	mov	r0, r7
 8004d5e:	f000 f879 	bl	8004e54 <_printf_i>
 8004d62:	e7ed      	b.n	8004d40 <_svfiprintf_r+0x1c0>
 8004d64:	080052f4 	.word	0x080052f4
 8004d68:	080052fe 	.word	0x080052fe
 8004d6c:	00000000 	.word	0x00000000
 8004d70:	08004ac9 	.word	0x08004ac9
 8004d74:	080052fa 	.word	0x080052fa

08004d78 <_printf_common>:
 8004d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d7c:	4616      	mov	r6, r2
 8004d7e:	4698      	mov	r8, r3
 8004d80:	688a      	ldr	r2, [r1, #8]
 8004d82:	690b      	ldr	r3, [r1, #16]
 8004d84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	bfb8      	it	lt
 8004d8c:	4613      	movlt	r3, r2
 8004d8e:	6033      	str	r3, [r6, #0]
 8004d90:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004d94:	4607      	mov	r7, r0
 8004d96:	460c      	mov	r4, r1
 8004d98:	b10a      	cbz	r2, 8004d9e <_printf_common+0x26>
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	6033      	str	r3, [r6, #0]
 8004d9e:	6823      	ldr	r3, [r4, #0]
 8004da0:	0699      	lsls	r1, r3, #26
 8004da2:	bf42      	ittt	mi
 8004da4:	6833      	ldrmi	r3, [r6, #0]
 8004da6:	3302      	addmi	r3, #2
 8004da8:	6033      	strmi	r3, [r6, #0]
 8004daa:	6825      	ldr	r5, [r4, #0]
 8004dac:	f015 0506 	ands.w	r5, r5, #6
 8004db0:	d106      	bne.n	8004dc0 <_printf_common+0x48>
 8004db2:	f104 0a19 	add.w	sl, r4, #25
 8004db6:	68e3      	ldr	r3, [r4, #12]
 8004db8:	6832      	ldr	r2, [r6, #0]
 8004dba:	1a9b      	subs	r3, r3, r2
 8004dbc:	42ab      	cmp	r3, r5
 8004dbe:	dc26      	bgt.n	8004e0e <_printf_common+0x96>
 8004dc0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004dc4:	6822      	ldr	r2, [r4, #0]
 8004dc6:	3b00      	subs	r3, #0
 8004dc8:	bf18      	it	ne
 8004dca:	2301      	movne	r3, #1
 8004dcc:	0692      	lsls	r2, r2, #26
 8004dce:	d42b      	bmi.n	8004e28 <_printf_common+0xb0>
 8004dd0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004dd4:	4641      	mov	r1, r8
 8004dd6:	4638      	mov	r0, r7
 8004dd8:	47c8      	blx	r9
 8004dda:	3001      	adds	r0, #1
 8004ddc:	d01e      	beq.n	8004e1c <_printf_common+0xa4>
 8004dde:	6823      	ldr	r3, [r4, #0]
 8004de0:	6922      	ldr	r2, [r4, #16]
 8004de2:	f003 0306 	and.w	r3, r3, #6
 8004de6:	2b04      	cmp	r3, #4
 8004de8:	bf02      	ittt	eq
 8004dea:	68e5      	ldreq	r5, [r4, #12]
 8004dec:	6833      	ldreq	r3, [r6, #0]
 8004dee:	1aed      	subeq	r5, r5, r3
 8004df0:	68a3      	ldr	r3, [r4, #8]
 8004df2:	bf0c      	ite	eq
 8004df4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004df8:	2500      	movne	r5, #0
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	bfc4      	itt	gt
 8004dfe:	1a9b      	subgt	r3, r3, r2
 8004e00:	18ed      	addgt	r5, r5, r3
 8004e02:	2600      	movs	r6, #0
 8004e04:	341a      	adds	r4, #26
 8004e06:	42b5      	cmp	r5, r6
 8004e08:	d11a      	bne.n	8004e40 <_printf_common+0xc8>
 8004e0a:	2000      	movs	r0, #0
 8004e0c:	e008      	b.n	8004e20 <_printf_common+0xa8>
 8004e0e:	2301      	movs	r3, #1
 8004e10:	4652      	mov	r2, sl
 8004e12:	4641      	mov	r1, r8
 8004e14:	4638      	mov	r0, r7
 8004e16:	47c8      	blx	r9
 8004e18:	3001      	adds	r0, #1
 8004e1a:	d103      	bne.n	8004e24 <_printf_common+0xac>
 8004e1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e24:	3501      	adds	r5, #1
 8004e26:	e7c6      	b.n	8004db6 <_printf_common+0x3e>
 8004e28:	18e1      	adds	r1, r4, r3
 8004e2a:	1c5a      	adds	r2, r3, #1
 8004e2c:	2030      	movs	r0, #48	@ 0x30
 8004e2e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004e32:	4422      	add	r2, r4
 8004e34:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004e38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004e3c:	3302      	adds	r3, #2
 8004e3e:	e7c7      	b.n	8004dd0 <_printf_common+0x58>
 8004e40:	2301      	movs	r3, #1
 8004e42:	4622      	mov	r2, r4
 8004e44:	4641      	mov	r1, r8
 8004e46:	4638      	mov	r0, r7
 8004e48:	47c8      	blx	r9
 8004e4a:	3001      	adds	r0, #1
 8004e4c:	d0e6      	beq.n	8004e1c <_printf_common+0xa4>
 8004e4e:	3601      	adds	r6, #1
 8004e50:	e7d9      	b.n	8004e06 <_printf_common+0x8e>
	...

08004e54 <_printf_i>:
 8004e54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e58:	7e0f      	ldrb	r7, [r1, #24]
 8004e5a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004e5c:	2f78      	cmp	r7, #120	@ 0x78
 8004e5e:	4691      	mov	r9, r2
 8004e60:	4680      	mov	r8, r0
 8004e62:	460c      	mov	r4, r1
 8004e64:	469a      	mov	sl, r3
 8004e66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004e6a:	d807      	bhi.n	8004e7c <_printf_i+0x28>
 8004e6c:	2f62      	cmp	r7, #98	@ 0x62
 8004e6e:	d80a      	bhi.n	8004e86 <_printf_i+0x32>
 8004e70:	2f00      	cmp	r7, #0
 8004e72:	f000 80d2 	beq.w	800501a <_printf_i+0x1c6>
 8004e76:	2f58      	cmp	r7, #88	@ 0x58
 8004e78:	f000 80b9 	beq.w	8004fee <_printf_i+0x19a>
 8004e7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004e84:	e03a      	b.n	8004efc <_printf_i+0xa8>
 8004e86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004e8a:	2b15      	cmp	r3, #21
 8004e8c:	d8f6      	bhi.n	8004e7c <_printf_i+0x28>
 8004e8e:	a101      	add	r1, pc, #4	@ (adr r1, 8004e94 <_printf_i+0x40>)
 8004e90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e94:	08004eed 	.word	0x08004eed
 8004e98:	08004f01 	.word	0x08004f01
 8004e9c:	08004e7d 	.word	0x08004e7d
 8004ea0:	08004e7d 	.word	0x08004e7d
 8004ea4:	08004e7d 	.word	0x08004e7d
 8004ea8:	08004e7d 	.word	0x08004e7d
 8004eac:	08004f01 	.word	0x08004f01
 8004eb0:	08004e7d 	.word	0x08004e7d
 8004eb4:	08004e7d 	.word	0x08004e7d
 8004eb8:	08004e7d 	.word	0x08004e7d
 8004ebc:	08004e7d 	.word	0x08004e7d
 8004ec0:	08005001 	.word	0x08005001
 8004ec4:	08004f2b 	.word	0x08004f2b
 8004ec8:	08004fbb 	.word	0x08004fbb
 8004ecc:	08004e7d 	.word	0x08004e7d
 8004ed0:	08004e7d 	.word	0x08004e7d
 8004ed4:	08005023 	.word	0x08005023
 8004ed8:	08004e7d 	.word	0x08004e7d
 8004edc:	08004f2b 	.word	0x08004f2b
 8004ee0:	08004e7d 	.word	0x08004e7d
 8004ee4:	08004e7d 	.word	0x08004e7d
 8004ee8:	08004fc3 	.word	0x08004fc3
 8004eec:	6833      	ldr	r3, [r6, #0]
 8004eee:	1d1a      	adds	r2, r3, #4
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	6032      	str	r2, [r6, #0]
 8004ef4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ef8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004efc:	2301      	movs	r3, #1
 8004efe:	e09d      	b.n	800503c <_printf_i+0x1e8>
 8004f00:	6833      	ldr	r3, [r6, #0]
 8004f02:	6820      	ldr	r0, [r4, #0]
 8004f04:	1d19      	adds	r1, r3, #4
 8004f06:	6031      	str	r1, [r6, #0]
 8004f08:	0606      	lsls	r6, r0, #24
 8004f0a:	d501      	bpl.n	8004f10 <_printf_i+0xbc>
 8004f0c:	681d      	ldr	r5, [r3, #0]
 8004f0e:	e003      	b.n	8004f18 <_printf_i+0xc4>
 8004f10:	0645      	lsls	r5, r0, #25
 8004f12:	d5fb      	bpl.n	8004f0c <_printf_i+0xb8>
 8004f14:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004f18:	2d00      	cmp	r5, #0
 8004f1a:	da03      	bge.n	8004f24 <_printf_i+0xd0>
 8004f1c:	232d      	movs	r3, #45	@ 0x2d
 8004f1e:	426d      	negs	r5, r5
 8004f20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f24:	4859      	ldr	r0, [pc, #356]	@ (800508c <_printf_i+0x238>)
 8004f26:	230a      	movs	r3, #10
 8004f28:	e011      	b.n	8004f4e <_printf_i+0xfa>
 8004f2a:	6821      	ldr	r1, [r4, #0]
 8004f2c:	6833      	ldr	r3, [r6, #0]
 8004f2e:	0608      	lsls	r0, r1, #24
 8004f30:	f853 5b04 	ldr.w	r5, [r3], #4
 8004f34:	d402      	bmi.n	8004f3c <_printf_i+0xe8>
 8004f36:	0649      	lsls	r1, r1, #25
 8004f38:	bf48      	it	mi
 8004f3a:	b2ad      	uxthmi	r5, r5
 8004f3c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004f3e:	4853      	ldr	r0, [pc, #332]	@ (800508c <_printf_i+0x238>)
 8004f40:	6033      	str	r3, [r6, #0]
 8004f42:	bf14      	ite	ne
 8004f44:	230a      	movne	r3, #10
 8004f46:	2308      	moveq	r3, #8
 8004f48:	2100      	movs	r1, #0
 8004f4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004f4e:	6866      	ldr	r6, [r4, #4]
 8004f50:	60a6      	str	r6, [r4, #8]
 8004f52:	2e00      	cmp	r6, #0
 8004f54:	bfa2      	ittt	ge
 8004f56:	6821      	ldrge	r1, [r4, #0]
 8004f58:	f021 0104 	bicge.w	r1, r1, #4
 8004f5c:	6021      	strge	r1, [r4, #0]
 8004f5e:	b90d      	cbnz	r5, 8004f64 <_printf_i+0x110>
 8004f60:	2e00      	cmp	r6, #0
 8004f62:	d04b      	beq.n	8004ffc <_printf_i+0x1a8>
 8004f64:	4616      	mov	r6, r2
 8004f66:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f6a:	fb03 5711 	mls	r7, r3, r1, r5
 8004f6e:	5dc7      	ldrb	r7, [r0, r7]
 8004f70:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f74:	462f      	mov	r7, r5
 8004f76:	42bb      	cmp	r3, r7
 8004f78:	460d      	mov	r5, r1
 8004f7a:	d9f4      	bls.n	8004f66 <_printf_i+0x112>
 8004f7c:	2b08      	cmp	r3, #8
 8004f7e:	d10b      	bne.n	8004f98 <_printf_i+0x144>
 8004f80:	6823      	ldr	r3, [r4, #0]
 8004f82:	07df      	lsls	r7, r3, #31
 8004f84:	d508      	bpl.n	8004f98 <_printf_i+0x144>
 8004f86:	6923      	ldr	r3, [r4, #16]
 8004f88:	6861      	ldr	r1, [r4, #4]
 8004f8a:	4299      	cmp	r1, r3
 8004f8c:	bfde      	ittt	le
 8004f8e:	2330      	movle	r3, #48	@ 0x30
 8004f90:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f94:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004f98:	1b92      	subs	r2, r2, r6
 8004f9a:	6122      	str	r2, [r4, #16]
 8004f9c:	f8cd a000 	str.w	sl, [sp]
 8004fa0:	464b      	mov	r3, r9
 8004fa2:	aa03      	add	r2, sp, #12
 8004fa4:	4621      	mov	r1, r4
 8004fa6:	4640      	mov	r0, r8
 8004fa8:	f7ff fee6 	bl	8004d78 <_printf_common>
 8004fac:	3001      	adds	r0, #1
 8004fae:	d14a      	bne.n	8005046 <_printf_i+0x1f2>
 8004fb0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004fb4:	b004      	add	sp, #16
 8004fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fba:	6823      	ldr	r3, [r4, #0]
 8004fbc:	f043 0320 	orr.w	r3, r3, #32
 8004fc0:	6023      	str	r3, [r4, #0]
 8004fc2:	4833      	ldr	r0, [pc, #204]	@ (8005090 <_printf_i+0x23c>)
 8004fc4:	2778      	movs	r7, #120	@ 0x78
 8004fc6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004fca:	6823      	ldr	r3, [r4, #0]
 8004fcc:	6831      	ldr	r1, [r6, #0]
 8004fce:	061f      	lsls	r7, r3, #24
 8004fd0:	f851 5b04 	ldr.w	r5, [r1], #4
 8004fd4:	d402      	bmi.n	8004fdc <_printf_i+0x188>
 8004fd6:	065f      	lsls	r7, r3, #25
 8004fd8:	bf48      	it	mi
 8004fda:	b2ad      	uxthmi	r5, r5
 8004fdc:	6031      	str	r1, [r6, #0]
 8004fde:	07d9      	lsls	r1, r3, #31
 8004fe0:	bf44      	itt	mi
 8004fe2:	f043 0320 	orrmi.w	r3, r3, #32
 8004fe6:	6023      	strmi	r3, [r4, #0]
 8004fe8:	b11d      	cbz	r5, 8004ff2 <_printf_i+0x19e>
 8004fea:	2310      	movs	r3, #16
 8004fec:	e7ac      	b.n	8004f48 <_printf_i+0xf4>
 8004fee:	4827      	ldr	r0, [pc, #156]	@ (800508c <_printf_i+0x238>)
 8004ff0:	e7e9      	b.n	8004fc6 <_printf_i+0x172>
 8004ff2:	6823      	ldr	r3, [r4, #0]
 8004ff4:	f023 0320 	bic.w	r3, r3, #32
 8004ff8:	6023      	str	r3, [r4, #0]
 8004ffa:	e7f6      	b.n	8004fea <_printf_i+0x196>
 8004ffc:	4616      	mov	r6, r2
 8004ffe:	e7bd      	b.n	8004f7c <_printf_i+0x128>
 8005000:	6833      	ldr	r3, [r6, #0]
 8005002:	6825      	ldr	r5, [r4, #0]
 8005004:	6961      	ldr	r1, [r4, #20]
 8005006:	1d18      	adds	r0, r3, #4
 8005008:	6030      	str	r0, [r6, #0]
 800500a:	062e      	lsls	r6, r5, #24
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	d501      	bpl.n	8005014 <_printf_i+0x1c0>
 8005010:	6019      	str	r1, [r3, #0]
 8005012:	e002      	b.n	800501a <_printf_i+0x1c6>
 8005014:	0668      	lsls	r0, r5, #25
 8005016:	d5fb      	bpl.n	8005010 <_printf_i+0x1bc>
 8005018:	8019      	strh	r1, [r3, #0]
 800501a:	2300      	movs	r3, #0
 800501c:	6123      	str	r3, [r4, #16]
 800501e:	4616      	mov	r6, r2
 8005020:	e7bc      	b.n	8004f9c <_printf_i+0x148>
 8005022:	6833      	ldr	r3, [r6, #0]
 8005024:	1d1a      	adds	r2, r3, #4
 8005026:	6032      	str	r2, [r6, #0]
 8005028:	681e      	ldr	r6, [r3, #0]
 800502a:	6862      	ldr	r2, [r4, #4]
 800502c:	2100      	movs	r1, #0
 800502e:	4630      	mov	r0, r6
 8005030:	f7fb f8f6 	bl	8000220 <memchr>
 8005034:	b108      	cbz	r0, 800503a <_printf_i+0x1e6>
 8005036:	1b80      	subs	r0, r0, r6
 8005038:	6060      	str	r0, [r4, #4]
 800503a:	6863      	ldr	r3, [r4, #4]
 800503c:	6123      	str	r3, [r4, #16]
 800503e:	2300      	movs	r3, #0
 8005040:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005044:	e7aa      	b.n	8004f9c <_printf_i+0x148>
 8005046:	6923      	ldr	r3, [r4, #16]
 8005048:	4632      	mov	r2, r6
 800504a:	4649      	mov	r1, r9
 800504c:	4640      	mov	r0, r8
 800504e:	47d0      	blx	sl
 8005050:	3001      	adds	r0, #1
 8005052:	d0ad      	beq.n	8004fb0 <_printf_i+0x15c>
 8005054:	6823      	ldr	r3, [r4, #0]
 8005056:	079b      	lsls	r3, r3, #30
 8005058:	d413      	bmi.n	8005082 <_printf_i+0x22e>
 800505a:	68e0      	ldr	r0, [r4, #12]
 800505c:	9b03      	ldr	r3, [sp, #12]
 800505e:	4298      	cmp	r0, r3
 8005060:	bfb8      	it	lt
 8005062:	4618      	movlt	r0, r3
 8005064:	e7a6      	b.n	8004fb4 <_printf_i+0x160>
 8005066:	2301      	movs	r3, #1
 8005068:	4632      	mov	r2, r6
 800506a:	4649      	mov	r1, r9
 800506c:	4640      	mov	r0, r8
 800506e:	47d0      	blx	sl
 8005070:	3001      	adds	r0, #1
 8005072:	d09d      	beq.n	8004fb0 <_printf_i+0x15c>
 8005074:	3501      	adds	r5, #1
 8005076:	68e3      	ldr	r3, [r4, #12]
 8005078:	9903      	ldr	r1, [sp, #12]
 800507a:	1a5b      	subs	r3, r3, r1
 800507c:	42ab      	cmp	r3, r5
 800507e:	dcf2      	bgt.n	8005066 <_printf_i+0x212>
 8005080:	e7eb      	b.n	800505a <_printf_i+0x206>
 8005082:	2500      	movs	r5, #0
 8005084:	f104 0619 	add.w	r6, r4, #25
 8005088:	e7f5      	b.n	8005076 <_printf_i+0x222>
 800508a:	bf00      	nop
 800508c:	08005305 	.word	0x08005305
 8005090:	08005316 	.word	0x08005316

08005094 <memmove>:
 8005094:	4288      	cmp	r0, r1
 8005096:	b510      	push	{r4, lr}
 8005098:	eb01 0402 	add.w	r4, r1, r2
 800509c:	d902      	bls.n	80050a4 <memmove+0x10>
 800509e:	4284      	cmp	r4, r0
 80050a0:	4623      	mov	r3, r4
 80050a2:	d807      	bhi.n	80050b4 <memmove+0x20>
 80050a4:	1e43      	subs	r3, r0, #1
 80050a6:	42a1      	cmp	r1, r4
 80050a8:	d008      	beq.n	80050bc <memmove+0x28>
 80050aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80050b2:	e7f8      	b.n	80050a6 <memmove+0x12>
 80050b4:	4402      	add	r2, r0
 80050b6:	4601      	mov	r1, r0
 80050b8:	428a      	cmp	r2, r1
 80050ba:	d100      	bne.n	80050be <memmove+0x2a>
 80050bc:	bd10      	pop	{r4, pc}
 80050be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80050c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80050c6:	e7f7      	b.n	80050b8 <memmove+0x24>

080050c8 <_sbrk_r>:
 80050c8:	b538      	push	{r3, r4, r5, lr}
 80050ca:	4d06      	ldr	r5, [pc, #24]	@ (80050e4 <_sbrk_r+0x1c>)
 80050cc:	2300      	movs	r3, #0
 80050ce:	4604      	mov	r4, r0
 80050d0:	4608      	mov	r0, r1
 80050d2:	602b      	str	r3, [r5, #0]
 80050d4:	f7fb ffde 	bl	8001094 <_sbrk>
 80050d8:	1c43      	adds	r3, r0, #1
 80050da:	d102      	bne.n	80050e2 <_sbrk_r+0x1a>
 80050dc:	682b      	ldr	r3, [r5, #0]
 80050de:	b103      	cbz	r3, 80050e2 <_sbrk_r+0x1a>
 80050e0:	6023      	str	r3, [r4, #0]
 80050e2:	bd38      	pop	{r3, r4, r5, pc}
 80050e4:	20000aa0 	.word	0x20000aa0

080050e8 <memcpy>:
 80050e8:	440a      	add	r2, r1
 80050ea:	4291      	cmp	r1, r2
 80050ec:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80050f0:	d100      	bne.n	80050f4 <memcpy+0xc>
 80050f2:	4770      	bx	lr
 80050f4:	b510      	push	{r4, lr}
 80050f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050fe:	4291      	cmp	r1, r2
 8005100:	d1f9      	bne.n	80050f6 <memcpy+0xe>
 8005102:	bd10      	pop	{r4, pc}

08005104 <_realloc_r>:
 8005104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005108:	4680      	mov	r8, r0
 800510a:	4615      	mov	r5, r2
 800510c:	460c      	mov	r4, r1
 800510e:	b921      	cbnz	r1, 800511a <_realloc_r+0x16>
 8005110:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005114:	4611      	mov	r1, r2
 8005116:	f7ff bc4b 	b.w	80049b0 <_malloc_r>
 800511a:	b92a      	cbnz	r2, 8005128 <_realloc_r+0x24>
 800511c:	f7ff fbdc 	bl	80048d8 <_free_r>
 8005120:	2400      	movs	r4, #0
 8005122:	4620      	mov	r0, r4
 8005124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005128:	f000 f81a 	bl	8005160 <_malloc_usable_size_r>
 800512c:	4285      	cmp	r5, r0
 800512e:	4606      	mov	r6, r0
 8005130:	d802      	bhi.n	8005138 <_realloc_r+0x34>
 8005132:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005136:	d8f4      	bhi.n	8005122 <_realloc_r+0x1e>
 8005138:	4629      	mov	r1, r5
 800513a:	4640      	mov	r0, r8
 800513c:	f7ff fc38 	bl	80049b0 <_malloc_r>
 8005140:	4607      	mov	r7, r0
 8005142:	2800      	cmp	r0, #0
 8005144:	d0ec      	beq.n	8005120 <_realloc_r+0x1c>
 8005146:	42b5      	cmp	r5, r6
 8005148:	462a      	mov	r2, r5
 800514a:	4621      	mov	r1, r4
 800514c:	bf28      	it	cs
 800514e:	4632      	movcs	r2, r6
 8005150:	f7ff ffca 	bl	80050e8 <memcpy>
 8005154:	4621      	mov	r1, r4
 8005156:	4640      	mov	r0, r8
 8005158:	f7ff fbbe 	bl	80048d8 <_free_r>
 800515c:	463c      	mov	r4, r7
 800515e:	e7e0      	b.n	8005122 <_realloc_r+0x1e>

08005160 <_malloc_usable_size_r>:
 8005160:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005164:	1f18      	subs	r0, r3, #4
 8005166:	2b00      	cmp	r3, #0
 8005168:	bfbc      	itt	lt
 800516a:	580b      	ldrlt	r3, [r1, r0]
 800516c:	18c0      	addlt	r0, r0, r3
 800516e:	4770      	bx	lr

08005170 <_init>:
 8005170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005172:	bf00      	nop
 8005174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005176:	bc08      	pop	{r3}
 8005178:	469e      	mov	lr, r3
 800517a:	4770      	bx	lr

0800517c <_fini>:
 800517c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800517e:	bf00      	nop
 8005180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005182:	bc08      	pop	{r3}
 8005184:	469e      	mov	lr, r3
 8005186:	4770      	bx	lr
