
mpuTest1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006400  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000348  080065d0  080065d0  000075d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006918  08006918  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  08006918  08006918  00007918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006920  08006920  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006920  08006920  00007920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006924  08006924  00007924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006928  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b6c  20000060  08006988  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bcc  08006988  00008bcc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000104d1  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002182  00000000  00000000  00018561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f30  00000000  00000000  0001a6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c07  00000000  00000000  0001b618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022bda  00000000  00000000  0001c21f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012f32  00000000  00000000  0003edf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4162  00000000  00000000  00051d2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00125e8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048b0  00000000  00000000  00125ed0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0012a780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080065b8 	.word	0x080065b8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	080065b8 	.word	0x080065b8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2f>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b74:	bf24      	itt	cs
 8000b76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b7e:	d90d      	bls.n	8000b9c <__aeabi_d2f+0x30>
 8000b80:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b8c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b94:	bf08      	it	eq
 8000b96:	f020 0001 	biceq.w	r0, r0, #1
 8000b9a:	4770      	bx	lr
 8000b9c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ba0:	d121      	bne.n	8000be6 <__aeabi_d2f+0x7a>
 8000ba2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ba6:	bfbc      	itt	lt
 8000ba8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bac:	4770      	bxlt	lr
 8000bae:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bb2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb6:	f1c2 0218 	rsb	r2, r2, #24
 8000bba:	f1c2 0c20 	rsb	ip, r2, #32
 8000bbe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc6:	bf18      	it	ne
 8000bc8:	f040 0001 	orrne.w	r0, r0, #1
 8000bcc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd8:	ea40 000c 	orr.w	r0, r0, ip
 8000bdc:	fa23 f302 	lsr.w	r3, r3, r2
 8000be0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be4:	e7cc      	b.n	8000b80 <__aeabi_d2f+0x14>
 8000be6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bea:	d107      	bne.n	8000bfc <__aeabi_d2f+0x90>
 8000bec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bf6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bfa:	4770      	bxne	lr
 8000bfc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c00:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c04:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <__aeabi_uldivmod>:
 8000c0c:	b953      	cbnz	r3, 8000c24 <__aeabi_uldivmod+0x18>
 8000c0e:	b94a      	cbnz	r2, 8000c24 <__aeabi_uldivmod+0x18>
 8000c10:	2900      	cmp	r1, #0
 8000c12:	bf08      	it	eq
 8000c14:	2800      	cmpeq	r0, #0
 8000c16:	bf1c      	itt	ne
 8000c18:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c1c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c20:	f000 b96a 	b.w	8000ef8 <__aeabi_idiv0>
 8000c24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c2c:	f000 f806 	bl	8000c3c <__udivmoddi4>
 8000c30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c38:	b004      	add	sp, #16
 8000c3a:	4770      	bx	lr

08000c3c <__udivmoddi4>:
 8000c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c40:	9d08      	ldr	r5, [sp, #32]
 8000c42:	460c      	mov	r4, r1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d14e      	bne.n	8000ce6 <__udivmoddi4+0xaa>
 8000c48:	4694      	mov	ip, r2
 8000c4a:	458c      	cmp	ip, r1
 8000c4c:	4686      	mov	lr, r0
 8000c4e:	fab2 f282 	clz	r2, r2
 8000c52:	d962      	bls.n	8000d1a <__udivmoddi4+0xde>
 8000c54:	b14a      	cbz	r2, 8000c6a <__udivmoddi4+0x2e>
 8000c56:	f1c2 0320 	rsb	r3, r2, #32
 8000c5a:	4091      	lsls	r1, r2
 8000c5c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c64:	4319      	orrs	r1, r3
 8000c66:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6e:	fa1f f68c 	uxth.w	r6, ip
 8000c72:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c76:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c7a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c82:	fb04 f106 	mul.w	r1, r4, r6
 8000c86:	4299      	cmp	r1, r3
 8000c88:	d90a      	bls.n	8000ca0 <__udivmoddi4+0x64>
 8000c8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c92:	f080 8112 	bcs.w	8000eba <__udivmoddi4+0x27e>
 8000c96:	4299      	cmp	r1, r3
 8000c98:	f240 810f 	bls.w	8000eba <__udivmoddi4+0x27e>
 8000c9c:	3c02      	subs	r4, #2
 8000c9e:	4463      	add	r3, ip
 8000ca0:	1a59      	subs	r1, r3, r1
 8000ca2:	fa1f f38e 	uxth.w	r3, lr
 8000ca6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000caa:	fb07 1110 	mls	r1, r7, r0, r1
 8000cae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb2:	fb00 f606 	mul.w	r6, r0, r6
 8000cb6:	429e      	cmp	r6, r3
 8000cb8:	d90a      	bls.n	8000cd0 <__udivmoddi4+0x94>
 8000cba:	eb1c 0303 	adds.w	r3, ip, r3
 8000cbe:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000cc2:	f080 80fc 	bcs.w	8000ebe <__udivmoddi4+0x282>
 8000cc6:	429e      	cmp	r6, r3
 8000cc8:	f240 80f9 	bls.w	8000ebe <__udivmoddi4+0x282>
 8000ccc:	4463      	add	r3, ip
 8000cce:	3802      	subs	r0, #2
 8000cd0:	1b9b      	subs	r3, r3, r6
 8000cd2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	b11d      	cbz	r5, 8000ce2 <__udivmoddi4+0xa6>
 8000cda:	40d3      	lsrs	r3, r2
 8000cdc:	2200      	movs	r2, #0
 8000cde:	e9c5 3200 	strd	r3, r2, [r5]
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d905      	bls.n	8000cf6 <__udivmoddi4+0xba>
 8000cea:	b10d      	cbz	r5, 8000cf0 <__udivmoddi4+0xb4>
 8000cec:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4608      	mov	r0, r1
 8000cf4:	e7f5      	b.n	8000ce2 <__udivmoddi4+0xa6>
 8000cf6:	fab3 f183 	clz	r1, r3
 8000cfa:	2900      	cmp	r1, #0
 8000cfc:	d146      	bne.n	8000d8c <__udivmoddi4+0x150>
 8000cfe:	42a3      	cmp	r3, r4
 8000d00:	d302      	bcc.n	8000d08 <__udivmoddi4+0xcc>
 8000d02:	4290      	cmp	r0, r2
 8000d04:	f0c0 80f0 	bcc.w	8000ee8 <__udivmoddi4+0x2ac>
 8000d08:	1a86      	subs	r6, r0, r2
 8000d0a:	eb64 0303 	sbc.w	r3, r4, r3
 8000d0e:	2001      	movs	r0, #1
 8000d10:	2d00      	cmp	r5, #0
 8000d12:	d0e6      	beq.n	8000ce2 <__udivmoddi4+0xa6>
 8000d14:	e9c5 6300 	strd	r6, r3, [r5]
 8000d18:	e7e3      	b.n	8000ce2 <__udivmoddi4+0xa6>
 8000d1a:	2a00      	cmp	r2, #0
 8000d1c:	f040 8090 	bne.w	8000e40 <__udivmoddi4+0x204>
 8000d20:	eba1 040c 	sub.w	r4, r1, ip
 8000d24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d28:	fa1f f78c 	uxth.w	r7, ip
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d36:	fb08 4416 	mls	r4, r8, r6, r4
 8000d3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d3e:	fb07 f006 	mul.w	r0, r7, r6
 8000d42:	4298      	cmp	r0, r3
 8000d44:	d908      	bls.n	8000d58 <__udivmoddi4+0x11c>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d4e:	d202      	bcs.n	8000d56 <__udivmoddi4+0x11a>
 8000d50:	4298      	cmp	r0, r3
 8000d52:	f200 80cd 	bhi.w	8000ef0 <__udivmoddi4+0x2b4>
 8000d56:	4626      	mov	r6, r4
 8000d58:	1a1c      	subs	r4, r3, r0
 8000d5a:	fa1f f38e 	uxth.w	r3, lr
 8000d5e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d62:	fb08 4410 	mls	r4, r8, r0, r4
 8000d66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d6a:	fb00 f707 	mul.w	r7, r0, r7
 8000d6e:	429f      	cmp	r7, r3
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x148>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x146>
 8000d7c:	429f      	cmp	r7, r3
 8000d7e:	f200 80b0 	bhi.w	8000ee2 <__udivmoddi4+0x2a6>
 8000d82:	4620      	mov	r0, r4
 8000d84:	1bdb      	subs	r3, r3, r7
 8000d86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d8a:	e7a5      	b.n	8000cd8 <__udivmoddi4+0x9c>
 8000d8c:	f1c1 0620 	rsb	r6, r1, #32
 8000d90:	408b      	lsls	r3, r1
 8000d92:	fa22 f706 	lsr.w	r7, r2, r6
 8000d96:	431f      	orrs	r7, r3
 8000d98:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d9c:	fa04 f301 	lsl.w	r3, r4, r1
 8000da0:	ea43 030c 	orr.w	r3, r3, ip
 8000da4:	40f4      	lsrs	r4, r6
 8000da6:	fa00 f801 	lsl.w	r8, r0, r1
 8000daa:	0c38      	lsrs	r0, r7, #16
 8000dac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000db0:	fbb4 fef0 	udiv	lr, r4, r0
 8000db4:	fa1f fc87 	uxth.w	ip, r7
 8000db8:	fb00 441e 	mls	r4, r0, lr, r4
 8000dbc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc0:	fb0e f90c 	mul.w	r9, lr, ip
 8000dc4:	45a1      	cmp	r9, r4
 8000dc6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dca:	d90a      	bls.n	8000de2 <__udivmoddi4+0x1a6>
 8000dcc:	193c      	adds	r4, r7, r4
 8000dce:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dd2:	f080 8084 	bcs.w	8000ede <__udivmoddi4+0x2a2>
 8000dd6:	45a1      	cmp	r9, r4
 8000dd8:	f240 8081 	bls.w	8000ede <__udivmoddi4+0x2a2>
 8000ddc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000de0:	443c      	add	r4, r7
 8000de2:	eba4 0409 	sub.w	r4, r4, r9
 8000de6:	fa1f f983 	uxth.w	r9, r3
 8000dea:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dee:	fb00 4413 	mls	r4, r0, r3, r4
 8000df2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000df6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dfa:	45a4      	cmp	ip, r4
 8000dfc:	d907      	bls.n	8000e0e <__udivmoddi4+0x1d2>
 8000dfe:	193c      	adds	r4, r7, r4
 8000e00:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e04:	d267      	bcs.n	8000ed6 <__udivmoddi4+0x29a>
 8000e06:	45a4      	cmp	ip, r4
 8000e08:	d965      	bls.n	8000ed6 <__udivmoddi4+0x29a>
 8000e0a:	3b02      	subs	r3, #2
 8000e0c:	443c      	add	r4, r7
 8000e0e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e12:	fba0 9302 	umull	r9, r3, r0, r2
 8000e16:	eba4 040c 	sub.w	r4, r4, ip
 8000e1a:	429c      	cmp	r4, r3
 8000e1c:	46ce      	mov	lr, r9
 8000e1e:	469c      	mov	ip, r3
 8000e20:	d351      	bcc.n	8000ec6 <__udivmoddi4+0x28a>
 8000e22:	d04e      	beq.n	8000ec2 <__udivmoddi4+0x286>
 8000e24:	b155      	cbz	r5, 8000e3c <__udivmoddi4+0x200>
 8000e26:	ebb8 030e 	subs.w	r3, r8, lr
 8000e2a:	eb64 040c 	sbc.w	r4, r4, ip
 8000e2e:	fa04 f606 	lsl.w	r6, r4, r6
 8000e32:	40cb      	lsrs	r3, r1
 8000e34:	431e      	orrs	r6, r3
 8000e36:	40cc      	lsrs	r4, r1
 8000e38:	e9c5 6400 	strd	r6, r4, [r5]
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	e750      	b.n	8000ce2 <__udivmoddi4+0xa6>
 8000e40:	f1c2 0320 	rsb	r3, r2, #32
 8000e44:	fa20 f103 	lsr.w	r1, r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa24 f303 	lsr.w	r3, r4, r3
 8000e50:	4094      	lsls	r4, r2
 8000e52:	430c      	orrs	r4, r1
 8000e54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e58:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e5c:	fa1f f78c 	uxth.w	r7, ip
 8000e60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e64:	fb08 3110 	mls	r1, r8, r0, r3
 8000e68:	0c23      	lsrs	r3, r4, #16
 8000e6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e6e:	fb00 f107 	mul.w	r1, r0, r7
 8000e72:	4299      	cmp	r1, r3
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x24c>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e7e:	d22c      	bcs.n	8000eda <__udivmoddi4+0x29e>
 8000e80:	4299      	cmp	r1, r3
 8000e82:	d92a      	bls.n	8000eda <__udivmoddi4+0x29e>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1a5b      	subs	r3, r3, r1
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e90:	fb08 3311 	mls	r3, r8, r1, r3
 8000e94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e98:	fb01 f307 	mul.w	r3, r1, r7
 8000e9c:	42a3      	cmp	r3, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x276>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ea8:	d213      	bcs.n	8000ed2 <__udivmoddi4+0x296>
 8000eaa:	42a3      	cmp	r3, r4
 8000eac:	d911      	bls.n	8000ed2 <__udivmoddi4+0x296>
 8000eae:	3902      	subs	r1, #2
 8000eb0:	4464      	add	r4, ip
 8000eb2:	1ae4      	subs	r4, r4, r3
 8000eb4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000eb8:	e739      	b.n	8000d2e <__udivmoddi4+0xf2>
 8000eba:	4604      	mov	r4, r0
 8000ebc:	e6f0      	b.n	8000ca0 <__udivmoddi4+0x64>
 8000ebe:	4608      	mov	r0, r1
 8000ec0:	e706      	b.n	8000cd0 <__udivmoddi4+0x94>
 8000ec2:	45c8      	cmp	r8, r9
 8000ec4:	d2ae      	bcs.n	8000e24 <__udivmoddi4+0x1e8>
 8000ec6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eca:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ece:	3801      	subs	r0, #1
 8000ed0:	e7a8      	b.n	8000e24 <__udivmoddi4+0x1e8>
 8000ed2:	4631      	mov	r1, r6
 8000ed4:	e7ed      	b.n	8000eb2 <__udivmoddi4+0x276>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	e799      	b.n	8000e0e <__udivmoddi4+0x1d2>
 8000eda:	4630      	mov	r0, r6
 8000edc:	e7d4      	b.n	8000e88 <__udivmoddi4+0x24c>
 8000ede:	46d6      	mov	lr, sl
 8000ee0:	e77f      	b.n	8000de2 <__udivmoddi4+0x1a6>
 8000ee2:	4463      	add	r3, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e74d      	b.n	8000d84 <__udivmoddi4+0x148>
 8000ee8:	4606      	mov	r6, r0
 8000eea:	4623      	mov	r3, r4
 8000eec:	4608      	mov	r0, r1
 8000eee:	e70f      	b.n	8000d10 <__udivmoddi4+0xd4>
 8000ef0:	3e02      	subs	r6, #2
 8000ef2:	4463      	add	r3, ip
 8000ef4:	e730      	b.n	8000d58 <__udivmoddi4+0x11c>
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <myComfyPrint>:

extern UART_HandleTypeDef huart2;

uint8_t buff[2048] = { 0 };

void myComfyPrint(const char* string){
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	strncpy((char*) buff, string, sizeof(buff));
 8000f04:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f08:	6879      	ldr	r1, [r7, #4]
 8000f0a:	4809      	ldr	r0, [pc, #36]	@ (8000f30 <myComfyPrint+0x34>)
 8000f0c:	f004 fc5c 	bl	80057c8 <strncpy>
	HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8000f10:	4807      	ldr	r0, [pc, #28]	@ (8000f30 <myComfyPrint+0x34>)
 8000f12:	f7ff f97d 	bl	8000210 <strlen>
 8000f16:	4603      	mov	r3, r0
 8000f18:	b29a      	uxth	r2, r3
 8000f1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f1e:	4904      	ldr	r1, [pc, #16]	@ (8000f30 <myComfyPrint+0x34>)
 8000f20:	4804      	ldr	r0, [pc, #16]	@ (8000f34 <myComfyPrint+0x38>)
 8000f22:	f004 f86d 	bl	8005000 <HAL_UART_Transmit>
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	2000007c 	.word	0x2000007c
 8000f34:	20000918 	.word	0x20000918

08000f38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f38:	b5b0      	push	{r4, r5, r7, lr}
 8000f3a:	f5ad 6d05 	sub.w	sp, sp, #2128	@ 0x850
 8000f3e:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f40:	f001 f8f6 	bl	8002130 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f44:	f000 fb6c 	bl	8001620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f48:	f000 fc94 	bl	8001874 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f4c:	f000 fc68 	bl	8001820 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000f50:	f000 fbd4 	bl	80016fc <MX_I2C1_Init>
  MX_TIM3_Init();
 8000f54:	f000 fc00 	bl	8001758 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  //initialize mpu6050
  mpu6050_init();
 8000f58:	f000 fd4e 	bl	80019f8 <mpu6050_init>

  //initialize motors
  motor_init();
 8000f5c:	f000 fd00 	bl	8001960 <motor_init>
	  char myString[2048];


	  //test read values from mpu6050
	  mpu6050_values_t mpu_values;
	  mpu6050_read(&mpu_values);
 8000f60:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8000f64:	4618      	mov	r0, r3
 8000f66:	f000 fea5 	bl	8001cb4 <mpu6050_read>
	  sprintf((char*) myString, /*sizeof(buff),*/ "Acceleration X = %d\r\nAcceleration Y = %d\r\nAcceleration Z = %d\r\n", mpu_values.acc_x, mpu_values.acc_y, mpu_values.acc_z);
 8000f6a:	f9b7 3806 	ldrsh.w	r3, [r7, #2054]	@ 0x806
 8000f6e:	461a      	mov	r2, r3
 8000f70:	f9b7 3808 	ldrsh.w	r3, [r7, #2056]	@ 0x808
 8000f74:	4619      	mov	r1, r3
 8000f76:	f9b7 380a 	ldrsh.w	r3, [r7, #2058]	@ 0x80a
 8000f7a:	4638      	mov	r0, r7
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	460b      	mov	r3, r1
 8000f80:	49d5      	ldr	r1, [pc, #852]	@ (80012d8 <main+0x3a0>)
 8000f82:	f004 fbf9 	bl	8005778 <siprintf>
	  myComfyPrint(myString);
 8000f86:	463b      	mov	r3, r7
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff ffb7 	bl	8000efc <myComfyPrint>
	  sprintf((char*) myString, /*sizeof(buff),*/ "Gyroscope X = %d\r\nGyroscope Y = %d\r\nGyroscope Z = %d\r\n", mpu_values.gyro_x, mpu_values.gyro_y, mpu_values.gyro_z);
 8000f8e:	f9b7 3800 	ldrsh.w	r3, [r7, #2048]	@ 0x800
 8000f92:	461a      	mov	r2, r3
 8000f94:	f9b7 3802 	ldrsh.w	r3, [r7, #2050]	@ 0x802
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f9b7 3804 	ldrsh.w	r3, [r7, #2052]	@ 0x804
 8000f9e:	4638      	mov	r0, r7
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	49cd      	ldr	r1, [pc, #820]	@ (80012dc <main+0x3a4>)
 8000fa6:	f004 fbe7 	bl	8005778 <siprintf>
	  myComfyPrint(myString);
 8000faa:	463b      	mov	r3, r7
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff ffa5 	bl	8000efc <myComfyPrint>

	  //debug
	  static int16_t counter = 0;
	  static int16_t myArr[25] = { 0 };
	  myArr[counter] = mpu_values.gyro_y;
 8000fb2:	4bcb      	ldr	r3, [pc, #812]	@ (80012e0 <main+0x3a8>)
 8000fb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	f9b7 1802 	ldrsh.w	r1, [r7, #2050]	@ 0x802
 8000fbe:	4bc9      	ldr	r3, [pc, #804]	@ (80012e4 <main+0x3ac>)
 8000fc0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  counter = (counter+1) % 25;
 8000fc4:	4bc6      	ldr	r3, [pc, #792]	@ (80012e0 <main+0x3a8>)
 8000fc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fca:	1c5a      	adds	r2, r3, #1
 8000fcc:	4bc6      	ldr	r3, [pc, #792]	@ (80012e8 <main+0x3b0>)
 8000fce:	fb83 1302 	smull	r1, r3, r3, r2
 8000fd2:	10d9      	asrs	r1, r3, #3
 8000fd4:	17d3      	asrs	r3, r2, #31
 8000fd6:	1ac9      	subs	r1, r1, r3
 8000fd8:	460b      	mov	r3, r1
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	440b      	add	r3, r1
 8000fde:	0099      	lsls	r1, r3, #2
 8000fe0:	440b      	add	r3, r1
 8000fe2:	1ad1      	subs	r1, r2, r3
 8000fe4:	b20a      	sxth	r2, r1
 8000fe6:	4bbe      	ldr	r3, [pc, #760]	@ (80012e0 <main+0x3a8>)
 8000fe8:	801a      	strh	r2, [r3, #0]
	  int32_t sum = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	f8c7 3844 	str.w	r3, [r7, #2116]	@ 0x844
	  for(int i = 0; i<25; i++){
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	f8c7 3840 	str.w	r3, [r7, #2112]	@ 0x840
 8000ff6:	e00f      	b.n	8001018 <main+0xe0>
		  sum += myArr[i];
 8000ff8:	4aba      	ldr	r2, [pc, #744]	@ (80012e4 <main+0x3ac>)
 8000ffa:	f8d7 3840 	ldr.w	r3, [r7, #2112]	@ 0x840
 8000ffe:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001002:	461a      	mov	r2, r3
 8001004:	f8d7 3844 	ldr.w	r3, [r7, #2116]	@ 0x844
 8001008:	4413      	add	r3, r2
 800100a:	f8c7 3844 	str.w	r3, [r7, #2116]	@ 0x844
	  for(int i = 0; i<25; i++){
 800100e:	f8d7 3840 	ldr.w	r3, [r7, #2112]	@ 0x840
 8001012:	3301      	adds	r3, #1
 8001014:	f8c7 3840 	str.w	r3, [r7, #2112]	@ 0x840
 8001018:	f8d7 3840 	ldr.w	r3, [r7, #2112]	@ 0x840
 800101c:	2b18      	cmp	r3, #24
 800101e:	ddeb      	ble.n	8000ff8 <main+0xc0>
	  }
	  sprintf((char*) myString, "average gyro_y = %d\r\n", sum/25);
 8001020:	f8d7 3844 	ldr.w	r3, [r7, #2116]	@ 0x844
 8001024:	4ab0      	ldr	r2, [pc, #704]	@ (80012e8 <main+0x3b0>)
 8001026:	fb82 1203 	smull	r1, r2, r2, r3
 800102a:	10d2      	asrs	r2, r2, #3
 800102c:	17db      	asrs	r3, r3, #31
 800102e:	1ad2      	subs	r2, r2, r3
 8001030:	463b      	mov	r3, r7
 8001032:	49ae      	ldr	r1, [pc, #696]	@ (80012ec <main+0x3b4>)
 8001034:	4618      	mov	r0, r3
 8001036:	f004 fb9f 	bl	8005778 <siprintf>
	  myComfyPrint(myString);
 800103a:	463b      	mov	r3, r7
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ff5d 	bl	8000efc <myComfyPrint>



	  static int16_t max_acc_x = INT16_MIN;
	  static int16_t min_acc_x = INT16_MAX;
	  if(mpu_values.acc_x > max_acc_x) max_acc_x = mpu_values.acc_x;
 8001042:	f9b7 2806 	ldrsh.w	r2, [r7, #2054]	@ 0x806
 8001046:	4baa      	ldr	r3, [pc, #680]	@ (80012f0 <main+0x3b8>)
 8001048:	f9b3 3000 	ldrsh.w	r3, [r3]
 800104c:	429a      	cmp	r2, r3
 800104e:	dd03      	ble.n	8001058 <main+0x120>
 8001050:	f9b7 2806 	ldrsh.w	r2, [r7, #2054]	@ 0x806
 8001054:	4ba6      	ldr	r3, [pc, #664]	@ (80012f0 <main+0x3b8>)
 8001056:	801a      	strh	r2, [r3, #0]
	  if(mpu_values.acc_x < min_acc_x) min_acc_x = mpu_values.acc_x;
 8001058:	f9b7 2806 	ldrsh.w	r2, [r7, #2054]	@ 0x806
 800105c:	4ba5      	ldr	r3, [pc, #660]	@ (80012f4 <main+0x3bc>)
 800105e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001062:	429a      	cmp	r2, r3
 8001064:	da03      	bge.n	800106e <main+0x136>
 8001066:	f9b7 2806 	ldrsh.w	r2, [r7, #2054]	@ 0x806
 800106a:	4ba2      	ldr	r3, [pc, #648]	@ (80012f4 <main+0x3bc>)
 800106c:	801a      	strh	r2, [r3, #0]
	  sprintf((char*) myString, "max diff = %d\r\n", max_acc_x - min_acc_x);
 800106e:	4ba0      	ldr	r3, [pc, #640]	@ (80012f0 <main+0x3b8>)
 8001070:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001074:	461a      	mov	r2, r3
 8001076:	4b9f      	ldr	r3, [pc, #636]	@ (80012f4 <main+0x3bc>)
 8001078:	f9b3 3000 	ldrsh.w	r3, [r3]
 800107c:	1ad2      	subs	r2, r2, r3
 800107e:	463b      	mov	r3, r7
 8001080:	499d      	ldr	r1, [pc, #628]	@ (80012f8 <main+0x3c0>)
 8001082:	4618      	mov	r0, r3
 8001084:	f004 fb78 	bl	8005778 <siprintf>
	  myComfyPrint(myString);
 8001088:	463b      	mov	r3, r7
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff ff36 	bl	8000efc <myComfyPrint>


	  //angle stuff for pid
	  //while loop to wait until robot is in upright position
	  //calculate angle from acceleration values
	  	  float acc_angle_temp=1;
 8001090:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001094:	f607 023c 	addw	r2, r7, #2108	@ 0x83c
 8001098:	6013      	str	r3, [r2, #0]
	  	  static uint8_t done_already = 0;

	  	  if(done_already == 0){
 800109a:	4b98      	ldr	r3, [pc, #608]	@ (80012fc <main+0x3c4>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d170      	bne.n	8001184 <main+0x24c>
			  while(acc_angle_temp != 0){
 80010a2:	e05e      	b.n	8001162 <main+0x22a>
				  acc_angle_temp = atan2(mpu_values.acc_x, mpu_values.acc_z)*RAD_TO_DEG;	//*(180/M_PI) to convert from radian to degree
 80010a4:	f9b7 3806 	ldrsh.w	r3, [r7, #2054]	@ 0x806
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fa5b 	bl	8000564 <__aeabi_i2d>
 80010ae:	4604      	mov	r4, r0
 80010b0:	460d      	mov	r5, r1
 80010b2:	f9b7 380a 	ldrsh.w	r3, [r7, #2058]	@ 0x80a
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff fa54 	bl	8000564 <__aeabi_i2d>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
 80010c0:	ec43 2b11 	vmov	d1, r2, r3
 80010c4:	ec45 4b10 	vmov	d0, r4, r5
 80010c8:	f005 f80a 	bl	80060e0 <atan2>
 80010cc:	ec51 0b10 	vmov	r0, r1, d0
 80010d0:	f04f 0200 	mov.w	r2, #0
 80010d4:	4b8a      	ldr	r3, [pc, #552]	@ (8001300 <main+0x3c8>)
 80010d6:	f7ff faaf 	bl	8000638 <__aeabi_dmul>
 80010da:	4602      	mov	r2, r0
 80010dc:	460b      	mov	r3, r1
 80010de:	4610      	mov	r0, r2
 80010e0:	4619      	mov	r1, r3
 80010e2:	a37b      	add	r3, pc, #492	@ (adr r3, 80012d0 <main+0x398>)
 80010e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e8:	f7ff fbd0 	bl	800088c <__aeabi_ddiv>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	4610      	mov	r0, r2
 80010f2:	4619      	mov	r1, r3
 80010f4:	f7ff fd3a 	bl	8000b6c <__aeabi_d2f>
 80010f8:	4603      	mov	r3, r0
 80010fa:	f607 023c 	addw	r2, r7, #2108	@ 0x83c
 80010fe:	6013      	str	r3, [r2, #0]
				  if(isnan(acc_angle_temp)){
 8001100:	f607 033c 	addw	r3, r7, #2108	@ 0x83c
 8001104:	ed93 7a00 	vldr	s14, [r3]
 8001108:	f607 033c 	addw	r3, r7, #2108	@ 0x83c
 800110c:	edd3 7a00 	vldr	s15, [r3]
 8001110:	eeb4 7a67 	vcmp.f32	s14, s15
 8001114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001118:	d709      	bvc.n	800112e <main+0x1f6>
					  sprintf((char*) myString, "acc_angle_temp is NaN\r\n");
 800111a:	463b      	mov	r3, r7
 800111c:	4979      	ldr	r1, [pc, #484]	@ (8001304 <main+0x3cc>)
 800111e:	4618      	mov	r0, r3
 8001120:	f004 fb2a 	bl	8005778 <siprintf>
					  myComfyPrint(myString);
 8001124:	463b      	mov	r3, r7
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff fee8 	bl	8000efc <myComfyPrint>
 800112c:	e014      	b.n	8001158 <main+0x220>
				  }
				  else{
					  sprintf((char*) myString, "acc_angle_temp*100 = %d\r\n", (int) (acc_angle_temp*100));	//apparently floating numbers are disabled in print funcitons by defautl if using newlib
 800112e:	f607 033c 	addw	r3, r7, #2108	@ 0x83c
 8001132:	edd3 7a00 	vldr	s15, [r3]
 8001136:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8001308 <main+0x3d0>
 800113a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800113e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001142:	463b      	mov	r3, r7
 8001144:	ee17 2a90 	vmov	r2, s15
 8001148:	4970      	ldr	r1, [pc, #448]	@ (800130c <main+0x3d4>)
 800114a:	4618      	mov	r0, r3
 800114c:	f004 fb14 	bl	8005778 <siprintf>
					  myComfyPrint(myString);
 8001150:	463b      	mov	r3, r7
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff fed2 	bl	8000efc <myComfyPrint>
				  }

				  mpu6050_read(&mpu_values);
 8001158:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 800115c:	4618      	mov	r0, r3
 800115e:	f000 fda9 	bl	8001cb4 <mpu6050_read>
			  while(acc_angle_temp != 0){
 8001162:	f607 033c 	addw	r3, r7, #2108	@ 0x83c
 8001166:	edd3 7a00 	vldr	s15, [r3]
 800116a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800116e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001172:	d197      	bne.n	80010a4 <main+0x16c>
			  }
	  	  	  done_already = 1;
 8001174:	4b61      	ldr	r3, [pc, #388]	@ (80012fc <main+0x3c4>)
 8001176:	2201      	movs	r2, #1
 8001178:	701a      	strb	r2, [r3, #0]
	  	  	  mpu6050_read(&mpu_values);
 800117a:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 800117e:	4618      	mov	r0, r3
 8001180:	f000 fd98 	bl	8001cb4 <mpu6050_read>
  	  	  }
	  	  sprintf((char*) myString, /*sizeof(buff),*/ "Acceleration X = %d\r\nAcceleration Y = %d\r\nAcceleration Z = %d\r\n", mpu_values.acc_x, mpu_values.acc_y, mpu_values.acc_z);
 8001184:	f9b7 3806 	ldrsh.w	r3, [r7, #2054]	@ 0x806
 8001188:	461a      	mov	r2, r3
 800118a:	f9b7 3808 	ldrsh.w	r3, [r7, #2056]	@ 0x808
 800118e:	4619      	mov	r1, r3
 8001190:	f9b7 380a 	ldrsh.w	r3, [r7, #2058]	@ 0x80a
 8001194:	4638      	mov	r0, r7
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	460b      	mov	r3, r1
 800119a:	494f      	ldr	r1, [pc, #316]	@ (80012d8 <main+0x3a0>)
 800119c:	f004 faec 	bl	8005778 <siprintf>
	  	  myComfyPrint(myString);
 80011a0:	463b      	mov	r3, r7
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff feaa 	bl	8000efc <myComfyPrint>
	  	  sprintf((char*) myString, /*sizeof(buff),*/ "Gyroscope X = %d\r\nGyroscope Y = %d\r\nGyroscope Z = %d\r\n", mpu_values.gyro_x, mpu_values.gyro_y, mpu_values.gyro_z);
 80011a8:	f9b7 3800 	ldrsh.w	r3, [r7, #2048]	@ 0x800
 80011ac:	461a      	mov	r2, r3
 80011ae:	f9b7 3802 	ldrsh.w	r3, [r7, #2050]	@ 0x802
 80011b2:	4619      	mov	r1, r3
 80011b4:	f9b7 3804 	ldrsh.w	r3, [r7, #2052]	@ 0x804
 80011b8:	4638      	mov	r0, r7
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	460b      	mov	r3, r1
 80011be:	4947      	ldr	r1, [pc, #284]	@ (80012dc <main+0x3a4>)
 80011c0:	f004 fada 	bl	8005778 <siprintf>
	  	  myComfyPrint(myString);
 80011c4:	463b      	mov	r3, r7
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff fe98 	bl	8000efc <myComfyPrint>

	  //calculate angle from acceleration values
	  float acc_angle;
	  acc_angle = atan2(mpu_values.acc_x, mpu_values.acc_z)*RAD_TO_DEG;	//*(180/M_PI) to convert from radian to degree
 80011cc:	f9b7 3806 	ldrsh.w	r3, [r7, #2054]	@ 0x806
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff f9c7 	bl	8000564 <__aeabi_i2d>
 80011d6:	4604      	mov	r4, r0
 80011d8:	460d      	mov	r5, r1
 80011da:	f9b7 380a 	ldrsh.w	r3, [r7, #2058]	@ 0x80a
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff f9c0 	bl	8000564 <__aeabi_i2d>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	ec43 2b11 	vmov	d1, r2, r3
 80011ec:	ec45 4b10 	vmov	d0, r4, r5
 80011f0:	f004 ff76 	bl	80060e0 <atan2>
 80011f4:	ec51 0b10 	vmov	r0, r1, d0
 80011f8:	f04f 0200 	mov.w	r2, #0
 80011fc:	4b40      	ldr	r3, [pc, #256]	@ (8001300 <main+0x3c8>)
 80011fe:	f7ff fa1b 	bl	8000638 <__aeabi_dmul>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	4610      	mov	r0, r2
 8001208:	4619      	mov	r1, r3
 800120a:	a331      	add	r3, pc, #196	@ (adr r3, 80012d0 <main+0x398>)
 800120c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001210:	f7ff fb3c 	bl	800088c <__aeabi_ddiv>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4610      	mov	r0, r2
 800121a:	4619      	mov	r1, r3
 800121c:	f7ff fca6 	bl	8000b6c <__aeabi_d2f>
 8001220:	4603      	mov	r3, r0
 8001222:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8001226:	6013      	str	r3, [r2, #0]
	  if(isnan(acc_angle)){
 8001228:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 800122c:	ed93 7a00 	vldr	s14, [r3]
 8001230:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 8001234:	edd3 7a00 	vldr	s15, [r3]
 8001238:	eeb4 7a67 	vcmp.f32	s14, s15
 800123c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001240:	d709      	bvc.n	8001256 <main+0x31e>
		  sprintf((char*) myString, "acc_angle is NaN\r\n");
 8001242:	463b      	mov	r3, r7
 8001244:	4932      	ldr	r1, [pc, #200]	@ (8001310 <main+0x3d8>)
 8001246:	4618      	mov	r0, r3
 8001248:	f004 fa96 	bl	8005778 <siprintf>
		  myComfyPrint(myString);
 800124c:	463b      	mov	r3, r7
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff fe54 	bl	8000efc <myComfyPrint>
 8001254:	e014      	b.n	8001280 <main+0x348>
	  }
	  else{
		  sprintf((char*) myString, "acc_angle*100 = %d\r\n", (int) (acc_angle*100));	//apparently floating numbers are disabled in print funcitons by defautl if using newlib
 8001256:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 800125a:	edd3 7a00 	vldr	s15, [r3]
 800125e:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001308 <main+0x3d0>
 8001262:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001266:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800126a:	463b      	mov	r3, r7
 800126c:	ee17 2a90 	vmov	r2, s15
 8001270:	4928      	ldr	r1, [pc, #160]	@ (8001314 <main+0x3dc>)
 8001272:	4618      	mov	r0, r3
 8001274:	f004 fa80 	bl	8005778 <siprintf>
		  myComfyPrint(myString);
 8001278:	463b      	mov	r3, r7
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fe3e 	bl	8000efc <myComfyPrint>
	  }

	  //debug
	  	  static int16_t counter2 = 0;
	  	  static int16_t myArr2[100] = { 0 };
	  	  myArr2[counter2] = acc_angle;
 8001280:	4b25      	ldr	r3, [pc, #148]	@ (8001318 <main+0x3e0>)
 8001282:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001286:	461a      	mov	r2, r3
 8001288:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 800128c:	edd3 7a00 	vldr	s15, [r3]
 8001290:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001294:	ee17 3a90 	vmov	r3, s15
 8001298:	b219      	sxth	r1, r3
 800129a:	4b20      	ldr	r3, [pc, #128]	@ (800131c <main+0x3e4>)
 800129c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  	  counter2 = (counter2+1) % 100;
 80012a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001318 <main+0x3e0>)
 80012a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012a6:	3301      	adds	r3, #1
 80012a8:	4a0f      	ldr	r2, [pc, #60]	@ (80012e8 <main+0x3b0>)
 80012aa:	fb82 1203 	smull	r1, r2, r2, r3
 80012ae:	1151      	asrs	r1, r2, #5
 80012b0:	17da      	asrs	r2, r3, #31
 80012b2:	1a8a      	subs	r2, r1, r2
 80012b4:	2164      	movs	r1, #100	@ 0x64
 80012b6:	fb01 f202 	mul.w	r2, r1, r2
 80012ba:	1a9a      	subs	r2, r3, r2
 80012bc:	b212      	sxth	r2, r2
 80012be:	4b16      	ldr	r3, [pc, #88]	@ (8001318 <main+0x3e0>)
 80012c0:	801a      	strh	r2, [r3, #0]
	  	  int32_t sum2 = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	f8c7 3838 	str.w	r3, [r7, #2104]	@ 0x838
	  	  for(int i = 0; i<100; i++){
 80012c8:	2300      	movs	r3, #0
 80012ca:	f8c7 3834 	str.w	r3, [r7, #2100]	@ 0x834
 80012ce:	e037      	b.n	8001340 <main+0x408>
 80012d0:	54442d18 	.word	0x54442d18
 80012d4:	400921fb 	.word	0x400921fb
 80012d8:	080065d0 	.word	0x080065d0
 80012dc:	08006610 	.word	0x08006610
 80012e0:	20000960 	.word	0x20000960
 80012e4:	20000964 	.word	0x20000964
 80012e8:	51eb851f 	.word	0x51eb851f
 80012ec:	08006648 	.word	0x08006648
 80012f0:	20000000 	.word	0x20000000
 80012f4:	20000002 	.word	0x20000002
 80012f8:	08006660 	.word	0x08006660
 80012fc:	20000996 	.word	0x20000996
 8001300:	40668000 	.word	0x40668000
 8001304:	08006670 	.word	0x08006670
 8001308:	42c80000 	.word	0x42c80000
 800130c:	08006688 	.word	0x08006688
 8001310:	080066a4 	.word	0x080066a4
 8001314:	080066b8 	.word	0x080066b8
 8001318:	20000998 	.word	0x20000998
 800131c:	2000099c 	.word	0x2000099c
	  		  sum2 += myArr2[i];
 8001320:	4aad      	ldr	r2, [pc, #692]	@ (80015d8 <main+0x6a0>)
 8001322:	f8d7 3834 	ldr.w	r3, [r7, #2100]	@ 0x834
 8001326:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800132a:	461a      	mov	r2, r3
 800132c:	f8d7 3838 	ldr.w	r3, [r7, #2104]	@ 0x838
 8001330:	4413      	add	r3, r2
 8001332:	f8c7 3838 	str.w	r3, [r7, #2104]	@ 0x838
	  	  for(int i = 0; i<100; i++){
 8001336:	f8d7 3834 	ldr.w	r3, [r7, #2100]	@ 0x834
 800133a:	3301      	adds	r3, #1
 800133c:	f8c7 3834 	str.w	r3, [r7, #2100]	@ 0x834
 8001340:	f8d7 3834 	ldr.w	r3, [r7, #2100]	@ 0x834
 8001344:	2b63      	cmp	r3, #99	@ 0x63
 8001346:	ddeb      	ble.n	8001320 <main+0x3e8>
	  	  }
	  	  sprintf((char*) myString, "average acc_angle*100000 = %d\r\n", (sum2*100000)/100);
 8001348:	f8d7 3838 	ldr.w	r3, [r7, #2104]	@ 0x838
 800134c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001350:	fb03 f202 	mul.w	r2, r3, r2
 8001354:	463b      	mov	r3, r7
 8001356:	49a1      	ldr	r1, [pc, #644]	@ (80015dc <main+0x6a4>)
 8001358:	4618      	mov	r0, r3
 800135a:	f004 fa0d 	bl	8005778 <siprintf>
	  myComfyPrint(myString);
 800135e:	463b      	mov	r3, r7
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff fdcb 	bl	8000efc <myComfyPrint>



	  //calculate angle from gyroscope
	  float gyro_rate = mpu_values.gyro_y * (1000.0/INT16_MAX);	//500, because that is the range that the mpu6050 is set to currently
 8001366:	f9b7 3802 	ldrsh.w	r3, [r7, #2050]	@ 0x802
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff f8fa 	bl	8000564 <__aeabi_i2d>
 8001370:	a397      	add	r3, pc, #604	@ (adr r3, 80015d0 <main+0x698>)
 8001372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001376:	f7ff f95f 	bl	8000638 <__aeabi_dmul>
 800137a:	4602      	mov	r2, r0
 800137c:	460b      	mov	r3, r1
 800137e:	4610      	mov	r0, r2
 8001380:	4619      	mov	r1, r3
 8001382:	f7ff fbf3 	bl	8000b6c <__aeabi_d2f>
 8001386:	4603      	mov	r3, r0
 8001388:	f607 022c 	addw	r2, r7, #2092	@ 0x82c
 800138c:	6013      	str	r3, [r2, #0]
	  static float gyro_angle;
	  static uint32_t current_time=0;
	  static uint32_t last_time;
	  if(done_already == 1){
 800138e:	4b94      	ldr	r3, [pc, #592]	@ (80015e0 <main+0x6a8>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d108      	bne.n	80013a8 <main+0x470>
		  last_time = HAL_GetTick();
 8001396:	f000 ff31 	bl	80021fc <HAL_GetTick>
 800139a:	4603      	mov	r3, r0
 800139c:	4a91      	ldr	r2, [pc, #580]	@ (80015e4 <main+0x6ac>)
 800139e:	6013      	str	r3, [r2, #0]
		  done_already = 2;
 80013a0:	4b8f      	ldr	r3, [pc, #572]	@ (80015e0 <main+0x6a8>)
 80013a2:	2202      	movs	r2, #2
 80013a4:	701a      	strb	r2, [r3, #0]
 80013a6:	e003      	b.n	80013b0 <main+0x478>
	  }
	  else{
		  last_time = current_time;
 80013a8:	4b8f      	ldr	r3, [pc, #572]	@ (80015e8 <main+0x6b0>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a8d      	ldr	r2, [pc, #564]	@ (80015e4 <main+0x6ac>)
 80013ae:	6013      	str	r3, [r2, #0]
	  }
	  current_time = HAL_GetTick();
 80013b0:	f000 ff24 	bl	80021fc <HAL_GetTick>
 80013b4:	4603      	mov	r3, r0
 80013b6:	4a8c      	ldr	r2, [pc, #560]	@ (80015e8 <main+0x6b0>)
 80013b8:	6013      	str	r3, [r2, #0]

	  gyro_angle = gyro_angle + gyro_rate*((float)(current_time-last_time)/1000);
 80013ba:	4b8b      	ldr	r3, [pc, #556]	@ (80015e8 <main+0x6b0>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	4b89      	ldr	r3, [pc, #548]	@ (80015e4 <main+0x6ac>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	ee07 3a90 	vmov	s15, r3
 80013c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013cc:	eddf 6a87 	vldr	s13, [pc, #540]	@ 80015ec <main+0x6b4>
 80013d0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80013d4:	f607 032c 	addw	r3, r7, #2092	@ 0x82c
 80013d8:	edd3 7a00 	vldr	s15, [r3]
 80013dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013e0:	4b83      	ldr	r3, [pc, #524]	@ (80015f0 <main+0x6b8>)
 80013e2:	edd3 7a00 	vldr	s15, [r3]
 80013e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ea:	4b81      	ldr	r3, [pc, #516]	@ (80015f0 <main+0x6b8>)
 80013ec:	edc3 7a00 	vstr	s15, [r3]
	  sprintf((char*) myString, "gyro_angle*100 = %d\r\n", (int) (gyro_angle*100));	//apparently floating numbers are disabled in print funcitons by defautl if using newlib
 80013f0:	4b7f      	ldr	r3, [pc, #508]	@ (80015f0 <main+0x6b8>)
 80013f2:	edd3 7a00 	vldr	s15, [r3]
 80013f6:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 80015f4 <main+0x6bc>
 80013fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001402:	463b      	mov	r3, r7
 8001404:	ee17 2a90 	vmov	r2, s15
 8001408:	497b      	ldr	r1, [pc, #492]	@ (80015f8 <main+0x6c0>)
 800140a:	4618      	mov	r0, r3
 800140c:	f004 f9b4 	bl	8005778 <siprintf>
	  myComfyPrint(myString);
 8001410:	463b      	mov	r3, r7
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff fd72 	bl	8000efc <myComfyPrint>

	  //combine both values into one
	  static float current_angle=0;
	  static float last_angle=0;
	  float alpha = 0.9934;
 8001418:	4b78      	ldr	r3, [pc, #480]	@ (80015fc <main+0x6c4>)
 800141a:	f607 0228 	addw	r2, r7, #2088	@ 0x828
 800141e:	6013      	str	r3, [r2, #0]
	  last_angle = current_angle;
 8001420:	4b77      	ldr	r3, [pc, #476]	@ (8001600 <main+0x6c8>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a77      	ldr	r2, [pc, #476]	@ (8001604 <main+0x6cc>)
 8001426:	6013      	str	r3, [r2, #0]
	  current_angle = alpha * (gyro_angle) + (float) (1-alpha) * acc_angle;
 8001428:	4b71      	ldr	r3, [pc, #452]	@ (80015f0 <main+0x6b8>)
 800142a:	ed93 7a00 	vldr	s14, [r3]
 800142e:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 8001432:	edd3 7a00 	vldr	s15, [r3]
 8001436:	ee27 7a27 	vmul.f32	s14, s14, s15
 800143a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800143e:	f607 0328 	addw	r3, r7, #2088	@ 0x828
 8001442:	edd3 7a00 	vldr	s15, [r3]
 8001446:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800144a:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 800144e:	edd3 7a00 	vldr	s15, [r3]
 8001452:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001456:	ee77 7a27 	vadd.f32	s15, s14, s15
 800145a:	4b69      	ldr	r3, [pc, #420]	@ (8001600 <main+0x6c8>)
 800145c:	edc3 7a00 	vstr	s15, [r3]
	  sprintf((char*) myString, "combined_angle*100 = %d\r\n", (int) current_angle);
 8001460:	4b67      	ldr	r3, [pc, #412]	@ (8001600 <main+0x6c8>)
 8001462:	edd3 7a00 	vldr	s15, [r3]
 8001466:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800146a:	463b      	mov	r3, r7
 800146c:	ee17 2a90 	vmov	r2, s15
 8001470:	4965      	ldr	r1, [pc, #404]	@ (8001608 <main+0x6d0>)
 8001472:	4618      	mov	r0, r3
 8001474:	f004 f980 	bl	8005778 <siprintf>
	  myComfyPrint(myString);
 8001478:	463b      	mov	r3, r7
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff fd3e 	bl	8000efc <myComfyPrint>


	  //PID
	  float target_angle = 0;
 8001480:	f04f 0300 	mov.w	r3, #0
 8001484:	f607 0224 	addw	r2, r7, #2084	@ 0x824
 8001488:	6013      	str	r3, [r2, #0]
	  float deviation = current_angle - target_angle;
 800148a:	4b5d      	ldr	r3, [pc, #372]	@ (8001600 <main+0x6c8>)
 800148c:	ed93 7a00 	vldr	s14, [r3]
 8001490:	f607 0324 	addw	r3, r7, #2084	@ 0x824
 8001494:	edd3 7a00 	vldr	s15, [r3]
 8001498:	ee77 7a67 	vsub.f32	s15, s14, s15
 800149c:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80014a0:	edc3 7a00 	vstr	s15, [r3]
	  static float deviation_sum;
	  deviation_sum = deviation_sum + deviation;
 80014a4:	4b59      	ldr	r3, [pc, #356]	@ (800160c <main+0x6d4>)
 80014a6:	ed93 7a00 	vldr	s14, [r3]
 80014aa:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80014ae:	edd3 7a00 	vldr	s15, [r3]
 80014b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014b6:	4b55      	ldr	r3, [pc, #340]	@ (800160c <main+0x6d4>)
 80014b8:	edc3 7a00 	vstr	s15, [r3]
	  //add constraining of max value of deviation_sum here

	  float Kp=11.8, Ki=0, Kd=0.15;
 80014bc:	4b54      	ldr	r3, [pc, #336]	@ (8001610 <main+0x6d8>)
 80014be:	f607 021c 	addw	r2, r7, #2076	@ 0x81c
 80014c2:	6013      	str	r3, [r2, #0]
 80014c4:	f04f 0300 	mov.w	r3, #0
 80014c8:	f607 0218 	addw	r2, r7, #2072	@ 0x818
 80014cc:	6013      	str	r3, [r2, #0]
 80014ce:	4b51      	ldr	r3, [pc, #324]	@ (8001614 <main+0x6dc>)
 80014d0:	f607 0214 	addw	r2, r7, #2068	@ 0x814
 80014d4:	6013      	str	r3, [r2, #0]
	  float motor_value_in_percent = Kp*deviation + Ki*deviation_sum*((float)(current_time-last_time)/1000) + Kd*(current_angle)/((float)(current_time-last_time)/1000);
 80014d6:	f607 031c 	addw	r3, r7, #2076	@ 0x81c
 80014da:	ed93 7a00 	vldr	s14, [r3]
 80014de:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80014e2:	edd3 7a00 	vldr	s15, [r3]
 80014e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014ea:	4b48      	ldr	r3, [pc, #288]	@ (800160c <main+0x6d4>)
 80014ec:	edd3 6a00 	vldr	s13, [r3]
 80014f0:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 80014f4:	edd3 7a00 	vldr	s15, [r3]
 80014f8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80014fc:	4b3a      	ldr	r3, [pc, #232]	@ (80015e8 <main+0x6b0>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4b38      	ldr	r3, [pc, #224]	@ (80015e4 <main+0x6ac>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	ee07 3a90 	vmov	s15, r3
 800150a:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 800150e:	eddf 5a37 	vldr	s11, [pc, #220]	@ 80015ec <main+0x6b4>
 8001512:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001516:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800151a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800151e:	4b38      	ldr	r3, [pc, #224]	@ (8001600 <main+0x6c8>)
 8001520:	edd3 6a00 	vldr	s13, [r3]
 8001524:	f607 0314 	addw	r3, r7, #2068	@ 0x814
 8001528:	edd3 7a00 	vldr	s15, [r3]
 800152c:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001530:	4b2d      	ldr	r3, [pc, #180]	@ (80015e8 <main+0x6b0>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	4b2b      	ldr	r3, [pc, #172]	@ (80015e4 <main+0x6ac>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	ee07 3a90 	vmov	s15, r3
 800153e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001542:	eddf 5a2a 	vldr	s11, [pc, #168]	@ 80015ec <main+0x6b4>
 8001546:	eec7 6aa5 	vdiv.f32	s13, s15, s11
 800154a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800154e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001552:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8001556:	edc3 7a00 	vstr	s15, [r3]
	  int32_t motor_value = (motor_value_in_percent * MOTOR_MAX_SPEED) /100;
 800155a:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 800155e:	edd3 7a00 	vldr	s15, [r3]
 8001562:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8001618 <main+0x6e0>
 8001566:	ee27 7a87 	vmul.f32	s14, s15, s14
 800156a:	eddf 6a22 	vldr	s13, [pc, #136]	@ 80015f4 <main+0x6bc>
 800156e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001572:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001576:	ee17 3a90 	vmov	r3, s15
 800157a:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c

	  if(motor_value >= 0){
 800157e:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8001582:	2b00      	cmp	r3, #0
 8001584:	db0a      	blt.n	800159c <main+0x664>
		  motor_control(MOTOR_DIR_FORWARDS, (uint16_t) abs(motor_value));
 8001586:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 800158a:	2b00      	cmp	r3, #0
 800158c:	bfb8      	it	lt
 800158e:	425b      	neglt	r3, r3
 8001590:	b29b      	uxth	r3, r3
 8001592:	4619      	mov	r1, r3
 8001594:	2000      	movs	r0, #0
 8001596:	f000 f9f1 	bl	800197c <motor_control>
 800159a:	e00d      	b.n	80015b8 <main+0x680>
	  }
	  else if(motor_value < 0){
 800159c:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	da09      	bge.n	80015b8 <main+0x680>
		  motor_control(MOTOR_DIR_BACKWARDS, (uint16_t) abs(motor_value));
 80015a4:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	bfb8      	it	lt
 80015ac:	425b      	neglt	r3, r3
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	4619      	mov	r1, r3
 80015b2:	2001      	movs	r0, #1
 80015b4:	f000 f9e2 	bl	800197c <motor_control>
	  }

	  sprintf((char*) myString, "calculated motorValue = %d\r\n", motor_value);
 80015b8:	463b      	mov	r3, r7
 80015ba:	f8d7 280c 	ldr.w	r2, [r7, #2060]	@ 0x80c
 80015be:	4917      	ldr	r1, [pc, #92]	@ (800161c <main+0x6e4>)
 80015c0:	4618      	mov	r0, r3
 80015c2:	f004 f8d9 	bl	8005778 <siprintf>
	  myComfyPrint(myString);
 80015c6:	463b      	mov	r3, r7
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff fc97 	bl	8000efc <myComfyPrint>
  {
 80015ce:	e4c7      	b.n	8000f60 <main+0x28>
 80015d0:	807d00fa 	.word	0x807d00fa
 80015d4:	3f9f403e 	.word	0x3f9f403e
 80015d8:	2000099c 	.word	0x2000099c
 80015dc:	080066d0 	.word	0x080066d0
 80015e0:	20000996 	.word	0x20000996
 80015e4:	20000a64 	.word	0x20000a64
 80015e8:	20000a68 	.word	0x20000a68
 80015ec:	447a0000 	.word	0x447a0000
 80015f0:	20000a6c 	.word	0x20000a6c
 80015f4:	42c80000 	.word	0x42c80000
 80015f8:	080066f0 	.word	0x080066f0
 80015fc:	3f7e4f76 	.word	0x3f7e4f76
 8001600:	20000a70 	.word	0x20000a70
 8001604:	20000a74 	.word	0x20000a74
 8001608:	08006708 	.word	0x08006708
 800160c:	20000a78 	.word	0x20000a78
 8001610:	413ccccd 	.word	0x413ccccd
 8001614:	3e19999a 	.word	0x3e19999a
 8001618:	46033c00 	.word	0x46033c00
 800161c:	08006724 	.word	0x08006724

08001620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b094      	sub	sp, #80	@ 0x50
 8001624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001626:	f107 031c 	add.w	r3, r7, #28
 800162a:	2234      	movs	r2, #52	@ 0x34
 800162c:	2100      	movs	r1, #0
 800162e:	4618      	mov	r0, r3
 8001630:	f004 f8c2 	bl	80057b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001634:	f107 0308 	add.w	r3, r7, #8
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001644:	2300      	movs	r3, #0
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	4b2a      	ldr	r3, [pc, #168]	@ (80016f4 <SystemClock_Config+0xd4>)
 800164a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164c:	4a29      	ldr	r2, [pc, #164]	@ (80016f4 <SystemClock_Config+0xd4>)
 800164e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001652:	6413      	str	r3, [r2, #64]	@ 0x40
 8001654:	4b27      	ldr	r3, [pc, #156]	@ (80016f4 <SystemClock_Config+0xd4>)
 8001656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001658:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800165c:	607b      	str	r3, [r7, #4]
 800165e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001660:	2300      	movs	r3, #0
 8001662:	603b      	str	r3, [r7, #0]
 8001664:	4b24      	ldr	r3, [pc, #144]	@ (80016f8 <SystemClock_Config+0xd8>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800166c:	4a22      	ldr	r2, [pc, #136]	@ (80016f8 <SystemClock_Config+0xd8>)
 800166e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001672:	6013      	str	r3, [r2, #0]
 8001674:	4b20      	ldr	r3, [pc, #128]	@ (80016f8 <SystemClock_Config+0xd8>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800167c:	603b      	str	r3, [r7, #0]
 800167e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001680:	2302      	movs	r3, #2
 8001682:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001684:	2301      	movs	r3, #1
 8001686:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001688:	2310      	movs	r3, #16
 800168a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800168c:	2302      	movs	r3, #2
 800168e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001690:	2300      	movs	r3, #0
 8001692:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001694:	2310      	movs	r3, #16
 8001696:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001698:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800169c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800169e:	2304      	movs	r3, #4
 80016a0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80016a2:	2302      	movs	r3, #2
 80016a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80016a6:	2302      	movs	r3, #2
 80016a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016aa:	f107 031c 	add.w	r3, r7, #28
 80016ae:	4618      	mov	r0, r3
 80016b0:	f002 fce0 	bl	8004074 <HAL_RCC_OscConfig>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80016ba:	f000 f94b 	bl	8001954 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016be:	230f      	movs	r3, #15
 80016c0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016c2:	2302      	movs	r3, #2
 80016c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016c6:	2300      	movs	r3, #0
 80016c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016d0:	2300      	movs	r3, #0
 80016d2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016d4:	f107 0308 	add.w	r3, r7, #8
 80016d8:	2102      	movs	r1, #2
 80016da:	4618      	mov	r0, r3
 80016dc:	f002 f980 	bl	80039e0 <HAL_RCC_ClockConfig>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <SystemClock_Config+0xca>
  {
    Error_Handler();
 80016e6:	f000 f935 	bl	8001954 <Error_Handler>
  }
}
 80016ea:	bf00      	nop
 80016ec:	3750      	adds	r7, #80	@ 0x50
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40023800 	.word	0x40023800
 80016f8:	40007000 	.word	0x40007000

080016fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001700:	4b12      	ldr	r3, [pc, #72]	@ (800174c <MX_I2C1_Init+0x50>)
 8001702:	4a13      	ldr	r2, [pc, #76]	@ (8001750 <MX_I2C1_Init+0x54>)
 8001704:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001706:	4b11      	ldr	r3, [pc, #68]	@ (800174c <MX_I2C1_Init+0x50>)
 8001708:	4a12      	ldr	r2, [pc, #72]	@ (8001754 <MX_I2C1_Init+0x58>)
 800170a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800170c:	4b0f      	ldr	r3, [pc, #60]	@ (800174c <MX_I2C1_Init+0x50>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001712:	4b0e      	ldr	r3, [pc, #56]	@ (800174c <MX_I2C1_Init+0x50>)
 8001714:	2200      	movs	r2, #0
 8001716:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001718:	4b0c      	ldr	r3, [pc, #48]	@ (800174c <MX_I2C1_Init+0x50>)
 800171a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800171e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001720:	4b0a      	ldr	r3, [pc, #40]	@ (800174c <MX_I2C1_Init+0x50>)
 8001722:	2200      	movs	r2, #0
 8001724:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001726:	4b09      	ldr	r3, [pc, #36]	@ (800174c <MX_I2C1_Init+0x50>)
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800172c:	4b07      	ldr	r3, [pc, #28]	@ (800174c <MX_I2C1_Init+0x50>)
 800172e:	2200      	movs	r2, #0
 8001730:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001732:	4b06      	ldr	r3, [pc, #24]	@ (800174c <MX_I2C1_Init+0x50>)
 8001734:	2200      	movs	r2, #0
 8001736:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001738:	4804      	ldr	r0, [pc, #16]	@ (800174c <MX_I2C1_Init+0x50>)
 800173a:	f000 ffff 	bl	800273c <HAL_I2C_Init>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001744:	f000 f906 	bl	8001954 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}
 800174c:	2000087c 	.word	0x2000087c
 8001750:	40005400 	.word	0x40005400
 8001754:	000186a0 	.word	0x000186a0

08001758 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08a      	sub	sp, #40	@ 0x28
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800175e:	f107 0320 	add.w	r3, r7, #32
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001768:	1d3b      	adds	r3, r7, #4
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	605a      	str	r2, [r3, #4]
 8001770:	609a      	str	r2, [r3, #8]
 8001772:	60da      	str	r2, [r3, #12]
 8001774:	611a      	str	r2, [r3, #16]
 8001776:	615a      	str	r2, [r3, #20]
 8001778:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800177a:	4b27      	ldr	r3, [pc, #156]	@ (8001818 <MX_TIM3_Init+0xc0>)
 800177c:	4a27      	ldr	r2, [pc, #156]	@ (800181c <MX_TIM3_Init+0xc4>)
 800177e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001780:	4b25      	ldr	r3, [pc, #148]	@ (8001818 <MX_TIM3_Init+0xc0>)
 8001782:	2200      	movs	r2, #0
 8001784:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001786:	4b24      	ldr	r3, [pc, #144]	@ (8001818 <MX_TIM3_Init+0xc0>)
 8001788:	2200      	movs	r2, #0
 800178a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8400-1;
 800178c:	4b22      	ldr	r3, [pc, #136]	@ (8001818 <MX_TIM3_Init+0xc0>)
 800178e:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001792:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001794:	4b20      	ldr	r3, [pc, #128]	@ (8001818 <MX_TIM3_Init+0xc0>)
 8001796:	2200      	movs	r2, #0
 8001798:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800179a:	4b1f      	ldr	r3, [pc, #124]	@ (8001818 <MX_TIM3_Init+0xc0>)
 800179c:	2200      	movs	r2, #0
 800179e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017a0:	481d      	ldr	r0, [pc, #116]	@ (8001818 <MX_TIM3_Init+0xc0>)
 80017a2:	f002 ff05 	bl	80045b0 <HAL_TIM_PWM_Init>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80017ac:	f000 f8d2 	bl	8001954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017b0:	2300      	movs	r3, #0
 80017b2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b4:	2300      	movs	r3, #0
 80017b6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017b8:	f107 0320 	add.w	r3, r7, #32
 80017bc:	4619      	mov	r1, r3
 80017be:	4816      	ldr	r0, [pc, #88]	@ (8001818 <MX_TIM3_Init+0xc0>)
 80017c0:	f003 fb52 	bl	8004e68 <HAL_TIMEx_MasterConfigSynchronization>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80017ca:	f000 f8c3 	bl	8001954 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017ce:	2360      	movs	r3, #96	@ 0x60
 80017d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017d6:	2300      	movs	r3, #0
 80017d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017da:	2300      	movs	r3, #0
 80017dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017de:	1d3b      	adds	r3, r7, #4
 80017e0:	2200      	movs	r2, #0
 80017e2:	4619      	mov	r1, r3
 80017e4:	480c      	ldr	r0, [pc, #48]	@ (8001818 <MX_TIM3_Init+0xc0>)
 80017e6:	f002 fffb 	bl	80047e0 <HAL_TIM_PWM_ConfigChannel>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80017f0:	f000 f8b0 	bl	8001954 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017f4:	1d3b      	adds	r3, r7, #4
 80017f6:	2204      	movs	r2, #4
 80017f8:	4619      	mov	r1, r3
 80017fa:	4807      	ldr	r0, [pc, #28]	@ (8001818 <MX_TIM3_Init+0xc0>)
 80017fc:	f002 fff0 	bl	80047e0 <HAL_TIM_PWM_ConfigChannel>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001806:	f000 f8a5 	bl	8001954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800180a:	4803      	ldr	r0, [pc, #12]	@ (8001818 <MX_TIM3_Init+0xc0>)
 800180c:	f000 fb4c 	bl	8001ea8 <HAL_TIM_MspPostInit>

}
 8001810:	bf00      	nop
 8001812:	3728      	adds	r7, #40	@ 0x28
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	200008d0 	.word	0x200008d0
 800181c:	40000400 	.word	0x40000400

08001820 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001824:	4b11      	ldr	r3, [pc, #68]	@ (800186c <MX_USART2_UART_Init+0x4c>)
 8001826:	4a12      	ldr	r2, [pc, #72]	@ (8001870 <MX_USART2_UART_Init+0x50>)
 8001828:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800182a:	4b10      	ldr	r3, [pc, #64]	@ (800186c <MX_USART2_UART_Init+0x4c>)
 800182c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001830:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001832:	4b0e      	ldr	r3, [pc, #56]	@ (800186c <MX_USART2_UART_Init+0x4c>)
 8001834:	2200      	movs	r2, #0
 8001836:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001838:	4b0c      	ldr	r3, [pc, #48]	@ (800186c <MX_USART2_UART_Init+0x4c>)
 800183a:	2200      	movs	r2, #0
 800183c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800183e:	4b0b      	ldr	r3, [pc, #44]	@ (800186c <MX_USART2_UART_Init+0x4c>)
 8001840:	2200      	movs	r2, #0
 8001842:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001844:	4b09      	ldr	r3, [pc, #36]	@ (800186c <MX_USART2_UART_Init+0x4c>)
 8001846:	220c      	movs	r2, #12
 8001848:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800184a:	4b08      	ldr	r3, [pc, #32]	@ (800186c <MX_USART2_UART_Init+0x4c>)
 800184c:	2200      	movs	r2, #0
 800184e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001850:	4b06      	ldr	r3, [pc, #24]	@ (800186c <MX_USART2_UART_Init+0x4c>)
 8001852:	2200      	movs	r2, #0
 8001854:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001856:	4805      	ldr	r0, [pc, #20]	@ (800186c <MX_USART2_UART_Init+0x4c>)
 8001858:	f003 fb82 	bl	8004f60 <HAL_UART_Init>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001862:	f000 f877 	bl	8001954 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000918 	.word	0x20000918
 8001870:	40004400 	.word	0x40004400

08001874 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b08a      	sub	sp, #40	@ 0x28
 8001878:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187a:	f107 0314 	add.w	r3, r7, #20
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	605a      	str	r2, [r3, #4]
 8001884:	609a      	str	r2, [r3, #8]
 8001886:	60da      	str	r2, [r3, #12]
 8001888:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	613b      	str	r3, [r7, #16]
 800188e:	4b2e      	ldr	r3, [pc, #184]	@ (8001948 <MX_GPIO_Init+0xd4>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001892:	4a2d      	ldr	r2, [pc, #180]	@ (8001948 <MX_GPIO_Init+0xd4>)
 8001894:	f043 0304 	orr.w	r3, r3, #4
 8001898:	6313      	str	r3, [r2, #48]	@ 0x30
 800189a:	4b2b      	ldr	r3, [pc, #172]	@ (8001948 <MX_GPIO_Init+0xd4>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189e:	f003 0304 	and.w	r3, r3, #4
 80018a2:	613b      	str	r3, [r7, #16]
 80018a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	4b27      	ldr	r3, [pc, #156]	@ (8001948 <MX_GPIO_Init+0xd4>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ae:	4a26      	ldr	r2, [pc, #152]	@ (8001948 <MX_GPIO_Init+0xd4>)
 80018b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018b6:	4b24      	ldr	r3, [pc, #144]	@ (8001948 <MX_GPIO_Init+0xd4>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	60bb      	str	r3, [r7, #8]
 80018c6:	4b20      	ldr	r3, [pc, #128]	@ (8001948 <MX_GPIO_Init+0xd4>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ca:	4a1f      	ldr	r2, [pc, #124]	@ (8001948 <MX_GPIO_Init+0xd4>)
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001948 <MX_GPIO_Init+0xd4>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	60bb      	str	r3, [r7, #8]
 80018dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	607b      	str	r3, [r7, #4]
 80018e2:	4b19      	ldr	r3, [pc, #100]	@ (8001948 <MX_GPIO_Init+0xd4>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e6:	4a18      	ldr	r2, [pc, #96]	@ (8001948 <MX_GPIO_Init+0xd4>)
 80018e8:	f043 0302 	orr.w	r3, r3, #2
 80018ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ee:	4b16      	ldr	r3, [pc, #88]	@ (8001948 <MX_GPIO_Init+0xd4>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	607b      	str	r3, [r7, #4]
 80018f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|MOTOR2_DIR_Pin|MOTOR3_DIR_Pin, GPIO_PIN_RESET);
 80018fa:	2200      	movs	r2, #0
 80018fc:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8001900:	4812      	ldr	r0, [pc, #72]	@ (800194c <MX_GPIO_Init+0xd8>)
 8001902:	f000 ff01 	bl	8002708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001906:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800190a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800190c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001910:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001916:	f107 0314 	add.w	r3, r7, #20
 800191a:	4619      	mov	r1, r3
 800191c:	480c      	ldr	r0, [pc, #48]	@ (8001950 <MX_GPIO_Init+0xdc>)
 800191e:	f000 fd5f 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin MOTOR2_DIR_Pin MOTOR3_DIR_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|MOTOR2_DIR_Pin|MOTOR3_DIR_Pin;
 8001922:	f44f 7318 	mov.w	r3, #608	@ 0x260
 8001926:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001928:	2301      	movs	r3, #1
 800192a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001930:	2300      	movs	r3, #0
 8001932:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	4619      	mov	r1, r3
 800193a:	4804      	ldr	r0, [pc, #16]	@ (800194c <MX_GPIO_Init+0xd8>)
 800193c:	f000 fd50 	bl	80023e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001940:	bf00      	nop
 8001942:	3728      	adds	r7, #40	@ 0x28
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40023800 	.word	0x40023800
 800194c:	40020000 	.word	0x40020000
 8001950:	40020800 	.word	0x40020800

08001954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001958:	b672      	cpsid	i
}
 800195a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800195c:	bf00      	nop
 800195e:	e7fd      	b.n	800195c <Error_Handler+0x8>

08001960 <motor_init>:


extern TIM_HandleTypeDef htim3;


void motor_init(){
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
	//initialize PWM
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001964:	2100      	movs	r1, #0
 8001966:	4804      	ldr	r0, [pc, #16]	@ (8001978 <motor_init+0x18>)
 8001968:	f002 fe72 	bl	8004650 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800196c:	2104      	movs	r1, #4
 800196e:	4802      	ldr	r0, [pc, #8]	@ (8001978 <motor_init+0x18>)
 8001970:	f002 fe6e 	bl	8004650 <HAL_TIM_PWM_Start>
}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}
 8001978:	200008d0 	.word	0x200008d0

0800197c <motor_control>:

void motor_control(uint8_t direction, uint16_t speed){
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	460a      	mov	r2, r1
 8001986:	71fb      	strb	r3, [r7, #7]
 8001988:	4613      	mov	r3, r2
 800198a:	80bb      	strh	r3, [r7, #4]
  //direction 0=forward, 1=backward, everything else leaves the current direction
  //speed 0=off, 255=max

  //Error Handling
  if(speed<0) speed=0;
  if(speed>MOTOR_MAX_SPEED) speed=MOTOR_MAX_SPEED;
 800198c:	88bb      	ldrh	r3, [r7, #4]
 800198e:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001992:	4293      	cmp	r3, r2
 8001994:	d902      	bls.n	800199c <motor_control+0x20>
 8001996:	f242 03cf 	movw	r3, #8399	@ 0x20cf
 800199a:	80bb      	strh	r3, [r7, #4]

  //set motor direction
  switch(direction){
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d002      	beq.n	80019a8 <motor_control+0x2c>
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d00c      	beq.n	80019c0 <motor_control+0x44>
	  HAL_GPIO_WritePin(MOTOR2_DIR_GPIO_Port, MOTOR2_DIR_Pin, GPIO_PIN_SET);
	  HAL_GPIO_WritePin(MOTOR3_DIR_GPIO_Port, MOTOR3_DIR_Pin, GPIO_PIN_SET);
	  break;
  default:
	  //do nothing
	  break;
 80019a6:	e017      	b.n	80019d8 <motor_control+0x5c>
	  HAL_GPIO_WritePin(MOTOR2_DIR_GPIO_Port, MOTOR2_DIR_Pin, GPIO_PIN_RESET);
 80019a8:	2200      	movs	r2, #0
 80019aa:	2140      	movs	r1, #64	@ 0x40
 80019ac:	4810      	ldr	r0, [pc, #64]	@ (80019f0 <motor_control+0x74>)
 80019ae:	f000 feab 	bl	8002708 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(MOTOR3_DIR_GPIO_Port, MOTOR3_DIR_Pin, GPIO_PIN_RESET);
 80019b2:	2200      	movs	r2, #0
 80019b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019b8:	480d      	ldr	r0, [pc, #52]	@ (80019f0 <motor_control+0x74>)
 80019ba:	f000 fea5 	bl	8002708 <HAL_GPIO_WritePin>
	  break;
 80019be:	e00b      	b.n	80019d8 <motor_control+0x5c>
	  HAL_GPIO_WritePin(MOTOR2_DIR_GPIO_Port, MOTOR2_DIR_Pin, GPIO_PIN_SET);
 80019c0:	2201      	movs	r2, #1
 80019c2:	2140      	movs	r1, #64	@ 0x40
 80019c4:	480a      	ldr	r0, [pc, #40]	@ (80019f0 <motor_control+0x74>)
 80019c6:	f000 fe9f 	bl	8002708 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(MOTOR3_DIR_GPIO_Port, MOTOR3_DIR_Pin, GPIO_PIN_SET);
 80019ca:	2201      	movs	r2, #1
 80019cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019d0:	4807      	ldr	r0, [pc, #28]	@ (80019f0 <motor_control+0x74>)
 80019d2:	f000 fe99 	bl	8002708 <HAL_GPIO_WritePin>
	  break;
 80019d6:	bf00      	nop
  }

  //set motor speed
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, speed);
 80019d8:	4b06      	ldr	r3, [pc, #24]	@ (80019f4 <motor_control+0x78>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	88ba      	ldrh	r2, [r7, #4]
 80019de:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, speed);
 80019e0:	4b04      	ldr	r3, [pc, #16]	@ (80019f4 <motor_control+0x78>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	88ba      	ldrh	r2, [r7, #4]
 80019e6:	639a      	str	r2, [r3, #56]	@ 0x38

}
 80019e8:	bf00      	nop
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40020000 	.word	0x40020000
 80019f4:	200008d0 	.word	0x200008d0

080019f8 <mpu6050_init>:
#include <string.h>

extern I2C_HandleTypeDef hi2c1;
extern UART_HandleTypeDef huart2;

void mpu6050_init(){
 80019f8:	b5b0      	push	{r4, r5, r7, lr}
 80019fa:	b0c6      	sub	sp, #280	@ 0x118
 80019fc:	af04      	add	r7, sp, #16

	uint8_t buff[256] = { 0 };
 80019fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001a02:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	3304      	adds	r3, #4
 8001a0c:	22fc      	movs	r2, #252	@ 0xfc
 8001a0e:	2100      	movs	r1, #0
 8001a10:	4618      	mov	r0, r3
 8001a12:	f003 fed1 	bl	80057b8 <memset>

	//check if MPU is ready
	  if(HAL_I2C_IsDeviceReady(&hi2c1, (DEVICE_ADDRESS<<1) +0, 1, 100) == HAL_OK){
 8001a16:	2364      	movs	r3, #100	@ 0x64
 8001a18:	2201      	movs	r2, #1
 8001a1a:	21d0      	movs	r1, #208	@ 0xd0
 8001a1c:	489b      	ldr	r0, [pc, #620]	@ (8001c8c <mpu6050_init+0x294>)
 8001a1e:	f001 fafd 	bl	800301c <HAL_I2C_IsDeviceReady>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d11a      	bne.n	8001a5e <mpu6050_init+0x66>
		  strcpy((char*) buff, "The device is ready\r\n");
 8001a28:	f107 0308 	add.w	r3, r7, #8
 8001a2c:	4a98      	ldr	r2, [pc, #608]	@ (8001c90 <mpu6050_init+0x298>)
 8001a2e:	461c      	mov	r4, r3
 8001a30:	4615      	mov	r5, r2
 8001a32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a36:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a3a:	6020      	str	r0, [r4, #0]
 8001a3c:	3404      	adds	r4, #4
 8001a3e:	8021      	strh	r1, [r4, #0]
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8001a40:	f107 0308 	add.w	r3, r7, #8
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7fe fbe3 	bl	8000210 <strlen>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	f107 0108 	add.w	r1, r7, #8
 8001a52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a56:	488f      	ldr	r0, [pc, #572]	@ (8001c94 <mpu6050_init+0x29c>)
 8001a58:	f003 fad2 	bl	8005000 <HAL_UART_Transmit>
 8001a5c:	e01a      	b.n	8001a94 <mpu6050_init+0x9c>
	  }
	  else{
		  strcpy((char*) buff, "The device is not ready. Check the cables\r\n");
 8001a5e:	f107 0308 	add.w	r3, r7, #8
 8001a62:	4a8d      	ldr	r2, [pc, #564]	@ (8001c98 <mpu6050_init+0x2a0>)
 8001a64:	461c      	mov	r4, r3
 8001a66:	4615      	mov	r5, r2
 8001a68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a70:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8001a78:	f107 0308 	add.w	r3, r7, #8
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7fe fbc7 	bl	8000210 <strlen>
 8001a82:	4603      	mov	r3, r0
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	f107 0108 	add.w	r1, r7, #8
 8001a8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a8e:	4881      	ldr	r0, [pc, #516]	@ (8001c94 <mpu6050_init+0x29c>)
 8001a90:	f003 fab6 	bl	8005000 <HAL_UART_Transmit>
	  }

	  //configure gyroscope
	  uint8_t gyroscope_range = FS_GYRO_1000;	//set gyroscope range to 500 °/s
 8001a94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001a98:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8001a9c:	2210      	movs	r2, #16
 8001a9e:	701a      	strb	r2, [r3, #0]
	  if(HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS<<1) +0, REG_CONFIG_GYRO, 1, &gyroscope_range, sizeof(gyroscope_range), 100) == HAL_OK){
 8001aa0:	2364      	movs	r3, #100	@ 0x64
 8001aa2:	9302      	str	r3, [sp, #8]
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	9301      	str	r3, [sp, #4]
 8001aa8:	1dfb      	adds	r3, r7, #7
 8001aaa:	9300      	str	r3, [sp, #0]
 8001aac:	2301      	movs	r3, #1
 8001aae:	221b      	movs	r2, #27
 8001ab0:	21d0      	movs	r1, #208	@ 0xd0
 8001ab2:	4876      	ldr	r0, [pc, #472]	@ (8001c8c <mpu6050_init+0x294>)
 8001ab4:	f000 ff86 	bl	80029c4 <HAL_I2C_Mem_Write>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d11d      	bne.n	8001afa <mpu6050_init+0x102>
		  strcpy((char*) buff, "gyroscope range successfully set\r\n");
 8001abe:	f107 0308 	add.w	r3, r7, #8
 8001ac2:	4a76      	ldr	r2, [pc, #472]	@ (8001c9c <mpu6050_init+0x2a4>)
 8001ac4:	461c      	mov	r4, r3
 8001ac6:	4615      	mov	r5, r2
 8001ac8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001aca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001acc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ace:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ad0:	682b      	ldr	r3, [r5, #0]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	8022      	strh	r2, [r4, #0]
 8001ad6:	3402      	adds	r4, #2
 8001ad8:	0c1b      	lsrs	r3, r3, #16
 8001ada:	7023      	strb	r3, [r4, #0]
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8001adc:	f107 0308 	add.w	r3, r7, #8
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7fe fb95 	bl	8000210 <strlen>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	f107 0108 	add.w	r1, r7, #8
 8001aee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001af2:	4868      	ldr	r0, [pc, #416]	@ (8001c94 <mpu6050_init+0x29c>)
 8001af4:	f003 fa84 	bl	8005000 <HAL_UART_Transmit>
 8001af8:	e018      	b.n	8001b2c <mpu6050_init+0x134>
	  }
	  else{
		  strcpy((char*) buff, "failed setting gyroscope range\r\n");
 8001afa:	f107 0308 	add.w	r3, r7, #8
 8001afe:	4a68      	ldr	r2, [pc, #416]	@ (8001ca0 <mpu6050_init+0x2a8>)
 8001b00:	461c      	mov	r4, r3
 8001b02:	4615      	mov	r5, r2
 8001b04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b0c:	682b      	ldr	r3, [r5, #0]
 8001b0e:	7023      	strb	r3, [r4, #0]
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8001b10:	f107 0308 	add.w	r3, r7, #8
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7fe fb7b 	bl	8000210 <strlen>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	f107 0108 	add.w	r1, r7, #8
 8001b22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b26:	485b      	ldr	r0, [pc, #364]	@ (8001c94 <mpu6050_init+0x29c>)
 8001b28:	f003 fa6a 	bl	8005000 <HAL_UART_Transmit>
	  }

	  //configure accelerometer
	  uint8_t accelerometer_range = FS_ACC_2G;	//set gyroscope range to 500 °/s
 8001b2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001b30:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 8001b34:	2200      	movs	r2, #0
 8001b36:	701a      	strb	r2, [r3, #0]
	  if(HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS<<1) +0, REG_CONFIG_ACC, 1, &accelerometer_range, sizeof(accelerometer_range), 100) == HAL_OK){
 8001b38:	2364      	movs	r3, #100	@ 0x64
 8001b3a:	9302      	str	r3, [sp, #8]
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	9301      	str	r3, [sp, #4]
 8001b40:	1dbb      	adds	r3, r7, #6
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	2301      	movs	r3, #1
 8001b46:	221c      	movs	r2, #28
 8001b48:	21d0      	movs	r1, #208	@ 0xd0
 8001b4a:	4850      	ldr	r0, [pc, #320]	@ (8001c8c <mpu6050_init+0x294>)
 8001b4c:	f000 ff3a 	bl	80029c4 <HAL_I2C_Mem_Write>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d11f      	bne.n	8001b96 <mpu6050_init+0x19e>
		  strcpy((char*) buff, "accelerometer range successfully set\r\n");
 8001b56:	f107 0308 	add.w	r3, r7, #8
 8001b5a:	4a52      	ldr	r2, [pc, #328]	@ (8001ca4 <mpu6050_init+0x2ac>)
 8001b5c:	461c      	mov	r4, r3
 8001b5e:	4615      	mov	r5, r2
 8001b60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b68:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b6c:	6020      	str	r0, [r4, #0]
 8001b6e:	3404      	adds	r4, #4
 8001b70:	8021      	strh	r1, [r4, #0]
 8001b72:	3402      	adds	r4, #2
 8001b74:	0c0b      	lsrs	r3, r1, #16
 8001b76:	7023      	strb	r3, [r4, #0]
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8001b78:	f107 0308 	add.w	r3, r7, #8
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7fe fb47 	bl	8000210 <strlen>
 8001b82:	4603      	mov	r3, r0
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	f107 0108 	add.w	r1, r7, #8
 8001b8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b8e:	4841      	ldr	r0, [pc, #260]	@ (8001c94 <mpu6050_init+0x29c>)
 8001b90:	f003 fa36 	bl	8005000 <HAL_UART_Transmit>
 8001b94:	e01b      	b.n	8001bce <mpu6050_init+0x1d6>
	  }
	  else{
		  strcpy((char*) buff, "failed setting accelerometer range\r\n");
 8001b96:	f107 0308 	add.w	r3, r7, #8
 8001b9a:	4a43      	ldr	r2, [pc, #268]	@ (8001ca8 <mpu6050_init+0x2b0>)
 8001b9c:	461c      	mov	r4, r3
 8001b9e:	4615      	mov	r5, r2
 8001ba0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ba2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ba4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ba6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ba8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001bac:	6020      	str	r0, [r4, #0]
 8001bae:	3404      	adds	r4, #4
 8001bb0:	7021      	strb	r1, [r4, #0]
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8001bb2:	f107 0308 	add.w	r3, r7, #8
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7fe fb2a 	bl	8000210 <strlen>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	f107 0108 	add.w	r1, r7, #8
 8001bc4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bc8:	4832      	ldr	r0, [pc, #200]	@ (8001c94 <mpu6050_init+0x29c>)
 8001bca:	f003 fa19 	bl	8005000 <HAL_UART_Transmit>
	  }

	  //set low pass filter
	  uint8_t lpf_setting = LPF_44;
 8001bce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001bd2:	f2a3 1303 	subw	r3, r3, #259	@ 0x103
 8001bd6:	2203      	movs	r2, #3
 8001bd8:	701a      	strb	r2, [r3, #0]
	  HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS<<1) +0, REG_LOW_PASS_FILTER, 1, &lpf_setting, sizeof(lpf_setting), 100);
 8001bda:	2364      	movs	r3, #100	@ 0x64
 8001bdc:	9302      	str	r3, [sp, #8]
 8001bde:	2301      	movs	r3, #1
 8001be0:	9301      	str	r3, [sp, #4]
 8001be2:	1d7b      	adds	r3, r7, #5
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	2301      	movs	r3, #1
 8001be8:	221a      	movs	r2, #26
 8001bea:	21d0      	movs	r1, #208	@ 0xd0
 8001bec:	4827      	ldr	r0, [pc, #156]	@ (8001c8c <mpu6050_init+0x294>)
 8001bee:	f000 fee9 	bl	80029c4 <HAL_I2C_Mem_Write>

	  //deactivate sleep
	  uint8_t asdf_flags = 0b00001000;	//set the '1' also to '0' if you want the temperature sensor to be enabled
 8001bf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001bf6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001bfa:	2208      	movs	r2, #8
 8001bfc:	701a      	strb	r2, [r3, #0]
	  if(HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS<<1) +0, REG_USR_CTRL, 1, &asdf_flags, sizeof(asdf_flags), 100) == HAL_OK){
 8001bfe:	2364      	movs	r3, #100	@ 0x64
 8001c00:	9302      	str	r3, [sp, #8]
 8001c02:	2301      	movs	r3, #1
 8001c04:	9301      	str	r3, [sp, #4]
 8001c06:	1d3b      	adds	r3, r7, #4
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	226b      	movs	r2, #107	@ 0x6b
 8001c0e:	21d0      	movs	r1, #208	@ 0xd0
 8001c10:	481e      	ldr	r0, [pc, #120]	@ (8001c8c <mpu6050_init+0x294>)
 8001c12:	f000 fed7 	bl	80029c4 <HAL_I2C_Mem_Write>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d119      	bne.n	8001c50 <mpu6050_init+0x258>
		  strcpy((char*) buff, "disablin sleep successfully\r\n");
 8001c1c:	f107 0308 	add.w	r3, r7, #8
 8001c20:	4a22      	ldr	r2, [pc, #136]	@ (8001cac <mpu6050_init+0x2b4>)
 8001c22:	461c      	mov	r4, r3
 8001c24:	4615      	mov	r5, r2
 8001c26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c2a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001c2e:	c407      	stmia	r4!, {r0, r1, r2}
 8001c30:	8023      	strh	r3, [r4, #0]
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8001c32:	f107 0308 	add.w	r3, r7, #8
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7fe faea 	bl	8000210 <strlen>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	f107 0108 	add.w	r1, r7, #8
 8001c44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c48:	4812      	ldr	r0, [pc, #72]	@ (8001c94 <mpu6050_init+0x29c>)
 8001c4a:	f003 f9d9 	bl	8005000 <HAL_UART_Transmit>
	  else{
		  strcpy((char*) buff, "error disabling sleep\r\n");
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
	  }

}
 8001c4e:	e018      	b.n	8001c82 <mpu6050_init+0x28a>
		  strcpy((char*) buff, "error disabling sleep\r\n");
 8001c50:	f107 0308 	add.w	r3, r7, #8
 8001c54:	4a16      	ldr	r2, [pc, #88]	@ (8001cb0 <mpu6050_init+0x2b8>)
 8001c56:	461c      	mov	r4, r3
 8001c58:	4615      	mov	r5, r2
 8001c5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c5e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c62:	e884 0003 	stmia.w	r4, {r0, r1}
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8001c66:	f107 0308 	add.w	r3, r7, #8
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7fe fad0 	bl	8000210 <strlen>
 8001c70:	4603      	mov	r3, r0
 8001c72:	b29a      	uxth	r2, r3
 8001c74:	f107 0108 	add.w	r1, r7, #8
 8001c78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c7c:	4805      	ldr	r0, [pc, #20]	@ (8001c94 <mpu6050_init+0x29c>)
 8001c7e:	f003 f9bf 	bl	8005000 <HAL_UART_Transmit>
}
 8001c82:	bf00      	nop
 8001c84:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bdb0      	pop	{r4, r5, r7, pc}
 8001c8c:	2000087c 	.word	0x2000087c
 8001c90:	08006744 	.word	0x08006744
 8001c94:	20000918 	.word	0x20000918
 8001c98:	0800675c 	.word	0x0800675c
 8001c9c:	08006788 	.word	0x08006788
 8001ca0:	080067ac 	.word	0x080067ac
 8001ca4:	080067d0 	.word	0x080067d0
 8001ca8:	080067f8 	.word	0x080067f8
 8001cac:	08006820 	.word	0x08006820
 8001cb0:	08006840 	.word	0x08006840

08001cb4 <mpu6050_read>:



void mpu6050_read(mpu6050_values_t* values){
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b088      	sub	sp, #32
 8001cb8:	af04      	add	r7, sp, #16
 8001cba:	6078      	str	r0, [r7, #4]

	  uint8_t buff[6] = { 0 };
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	60bb      	str	r3, [r7, #8]
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	81bb      	strh	r3, [r7, #12]
	  HAL_I2C_Mem_Read(&hi2c1, (DEVICE_ADDRESS<<1) +1, REG_ACC_DATA, 1, buff, sizeof(buff), 100);
 8001cc4:	2364      	movs	r3, #100	@ 0x64
 8001cc6:	9302      	str	r3, [sp, #8]
 8001cc8:	2306      	movs	r3, #6
 8001cca:	9301      	str	r3, [sp, #4]
 8001ccc:	f107 0308 	add.w	r3, r7, #8
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	223b      	movs	r2, #59	@ 0x3b
 8001cd6:	21d1      	movs	r1, #209	@ 0xd1
 8001cd8:	4829      	ldr	r0, [pc, #164]	@ (8001d80 <mpu6050_read+0xcc>)
 8001cda:	f000 ff6d 	bl	8002bb8 <HAL_I2C_Mem_Read>
	  values->acc_x = (uint16_t) (buff[0]<<8) + buff[1];
 8001cde:	7a3b      	ldrb	r3, [r7, #8]
 8001ce0:	021b      	lsls	r3, r3, #8
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	7a7a      	ldrb	r2, [r7, #9]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	b21a      	sxth	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	80da      	strh	r2, [r3, #6]
	  values->acc_y = (uint16_t) (buff[2]<<8) + buff[3];
 8001cf0:	7abb      	ldrb	r3, [r7, #10]
 8001cf2:	021b      	lsls	r3, r3, #8
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	7afa      	ldrb	r2, [r7, #11]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	b21a      	sxth	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	811a      	strh	r2, [r3, #8]
	  values->acc_z = (uint16_t) (buff[4]<<8) + buff[5];
 8001d02:	7b3b      	ldrb	r3, [r7, #12]
 8001d04:	021b      	lsls	r3, r3, #8
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	7b7a      	ldrb	r2, [r7, #13]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	b21a      	sxth	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	815a      	strh	r2, [r3, #10]

	  HAL_I2C_Mem_Read(&hi2c1, (DEVICE_ADDRESS<<1) +1, REG_GYRO_DATA, 1, buff, sizeof(buff), 100);
 8001d14:	2364      	movs	r3, #100	@ 0x64
 8001d16:	9302      	str	r3, [sp, #8]
 8001d18:	2306      	movs	r3, #6
 8001d1a:	9301      	str	r3, [sp, #4]
 8001d1c:	f107 0308 	add.w	r3, r7, #8
 8001d20:	9300      	str	r3, [sp, #0]
 8001d22:	2301      	movs	r3, #1
 8001d24:	2243      	movs	r2, #67	@ 0x43
 8001d26:	21d1      	movs	r1, #209	@ 0xd1
 8001d28:	4815      	ldr	r0, [pc, #84]	@ (8001d80 <mpu6050_read+0xcc>)
 8001d2a:	f000 ff45 	bl	8002bb8 <HAL_I2C_Mem_Read>
	  values->gyro_x = (uint16_t) (buff[0]<<8) + buff[1];
 8001d2e:	7a3b      	ldrb	r3, [r7, #8]
 8001d30:	021b      	lsls	r3, r3, #8
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	7a7a      	ldrb	r2, [r7, #9]
 8001d36:	4413      	add	r3, r2
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	b21a      	sxth	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	801a      	strh	r2, [r3, #0]
	  values->gyro_y = (uint16_t) (buff[2]<<8) + buff[3];
 8001d40:	7abb      	ldrb	r3, [r7, #10]
 8001d42:	021b      	lsls	r3, r3, #8
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	7afa      	ldrb	r2, [r7, #11]
 8001d48:	4413      	add	r3, r2
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	b21a      	sxth	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	805a      	strh	r2, [r3, #2]
	  values->gyro_z = (uint16_t) (buff[4]<<8) + buff[5];
 8001d52:	7b3b      	ldrb	r3, [r7, #12]
 8001d54:	021b      	lsls	r3, r3, #8
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	7b7a      	ldrb	r2, [r7, #13]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	b21a      	sxth	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	809a      	strh	r2, [r3, #4]

	  //apply offsets
	  values->gyro_y += GYRO_Y_OFFSET_1000;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	330c      	adds	r3, #12
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	b21a      	sxth	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	805a      	strh	r2, [r3, #2]

}
 8001d76:	bf00      	nop
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	2000087c 	.word	0x2000087c

08001d84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	607b      	str	r3, [r7, #4]
 8001d8e:	4b10      	ldr	r3, [pc, #64]	@ (8001dd0 <HAL_MspInit+0x4c>)
 8001d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d92:	4a0f      	ldr	r2, [pc, #60]	@ (8001dd0 <HAL_MspInit+0x4c>)
 8001d94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d98:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd0 <HAL_MspInit+0x4c>)
 8001d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001da2:	607b      	str	r3, [r7, #4]
 8001da4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	603b      	str	r3, [r7, #0]
 8001daa:	4b09      	ldr	r3, [pc, #36]	@ (8001dd0 <HAL_MspInit+0x4c>)
 8001dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dae:	4a08      	ldr	r2, [pc, #32]	@ (8001dd0 <HAL_MspInit+0x4c>)
 8001db0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001db4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001db6:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <HAL_MspInit+0x4c>)
 8001db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dbe:	603b      	str	r3, [r7, #0]
 8001dc0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001dc2:	2007      	movs	r0, #7
 8001dc4:	f000 fad8 	bl	8002378 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dc8:	bf00      	nop
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40023800 	.word	0x40023800

08001dd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08a      	sub	sp, #40	@ 0x28
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ddc:	f107 0314 	add.w	r3, r7, #20
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a19      	ldr	r2, [pc, #100]	@ (8001e58 <HAL_I2C_MspInit+0x84>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d12c      	bne.n	8001e50 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	613b      	str	r3, [r7, #16]
 8001dfa:	4b18      	ldr	r3, [pc, #96]	@ (8001e5c <HAL_I2C_MspInit+0x88>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfe:	4a17      	ldr	r2, [pc, #92]	@ (8001e5c <HAL_I2C_MspInit+0x88>)
 8001e00:	f043 0302 	orr.w	r3, r3, #2
 8001e04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e06:	4b15      	ldr	r3, [pc, #84]	@ (8001e5c <HAL_I2C_MspInit+0x88>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e12:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001e16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e18:	2312      	movs	r3, #18
 8001e1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e20:	2303      	movs	r3, #3
 8001e22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e24:	2304      	movs	r3, #4
 8001e26:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e28:	f107 0314 	add.w	r3, r7, #20
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	480c      	ldr	r0, [pc, #48]	@ (8001e60 <HAL_I2C_MspInit+0x8c>)
 8001e30:	f000 fad6 	bl	80023e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e34:	2300      	movs	r3, #0
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	4b08      	ldr	r3, [pc, #32]	@ (8001e5c <HAL_I2C_MspInit+0x88>)
 8001e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3c:	4a07      	ldr	r2, [pc, #28]	@ (8001e5c <HAL_I2C_MspInit+0x88>)
 8001e3e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e42:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e44:	4b05      	ldr	r3, [pc, #20]	@ (8001e5c <HAL_I2C_MspInit+0x88>)
 8001e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001e50:	bf00      	nop
 8001e52:	3728      	adds	r7, #40	@ 0x28
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40005400 	.word	0x40005400
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	40020400 	.word	0x40020400

08001e64 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a0b      	ldr	r2, [pc, #44]	@ (8001ea0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d10d      	bne.n	8001e92 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea4 <HAL_TIM_PWM_MspInit+0x40>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7e:	4a09      	ldr	r2, [pc, #36]	@ (8001ea4 <HAL_TIM_PWM_MspInit+0x40>)
 8001e80:	f043 0302 	orr.w	r3, r3, #2
 8001e84:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e86:	4b07      	ldr	r3, [pc, #28]	@ (8001ea4 <HAL_TIM_PWM_MspInit+0x40>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001e92:	bf00      	nop
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	40000400 	.word	0x40000400
 8001ea4:	40023800 	.word	0x40023800

08001ea8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b08a      	sub	sp, #40	@ 0x28
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb0:	f107 0314 	add.w	r3, r7, #20
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a21      	ldr	r2, [pc, #132]	@ (8001f4c <HAL_TIM_MspPostInit+0xa4>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d13b      	bne.n	8001f42 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	613b      	str	r3, [r7, #16]
 8001ece:	4b20      	ldr	r3, [pc, #128]	@ (8001f50 <HAL_TIM_MspPostInit+0xa8>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed2:	4a1f      	ldr	r2, [pc, #124]	@ (8001f50 <HAL_TIM_MspPostInit+0xa8>)
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eda:	4b1d      	ldr	r3, [pc, #116]	@ (8001f50 <HAL_TIM_MspPostInit+0xa8>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	613b      	str	r3, [r7, #16]
 8001ee4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	4b19      	ldr	r3, [pc, #100]	@ (8001f50 <HAL_TIM_MspPostInit+0xa8>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eee:	4a18      	ldr	r2, [pc, #96]	@ (8001f50 <HAL_TIM_MspPostInit+0xa8>)
 8001ef0:	f043 0302 	orr.w	r3, r3, #2
 8001ef4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ef6:	4b16      	ldr	r3, [pc, #88]	@ (8001f50 <HAL_TIM_MspPostInit+0xa8>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001f02:	2380      	movs	r3, #128	@ 0x80
 8001f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f06:	2302      	movs	r3, #2
 8001f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f12:	2302      	movs	r3, #2
 8001f14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f16:	f107 0314 	add.w	r3, r7, #20
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	480d      	ldr	r0, [pc, #52]	@ (8001f54 <HAL_TIM_MspPostInit+0xac>)
 8001f1e:	f000 fa5f 	bl	80023e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f22:	2310      	movs	r3, #16
 8001f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f26:	2302      	movs	r3, #2
 8001f28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f32:	2302      	movs	r3, #2
 8001f34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f36:	f107 0314 	add.w	r3, r7, #20
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4806      	ldr	r0, [pc, #24]	@ (8001f58 <HAL_TIM_MspPostInit+0xb0>)
 8001f3e:	f000 fa4f 	bl	80023e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001f42:	bf00      	nop
 8001f44:	3728      	adds	r7, #40	@ 0x28
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40000400 	.word	0x40000400
 8001f50:	40023800 	.word	0x40023800
 8001f54:	40020000 	.word	0x40020000
 8001f58:	40020400 	.word	0x40020400

08001f5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b08a      	sub	sp, #40	@ 0x28
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f64:	f107 0314 	add.w	r3, r7, #20
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	605a      	str	r2, [r3, #4]
 8001f6e:	609a      	str	r2, [r3, #8]
 8001f70:	60da      	str	r2, [r3, #12]
 8001f72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a19      	ldr	r2, [pc, #100]	@ (8001fe0 <HAL_UART_MspInit+0x84>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d12b      	bne.n	8001fd6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	613b      	str	r3, [r7, #16]
 8001f82:	4b18      	ldr	r3, [pc, #96]	@ (8001fe4 <HAL_UART_MspInit+0x88>)
 8001f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f86:	4a17      	ldr	r2, [pc, #92]	@ (8001fe4 <HAL_UART_MspInit+0x88>)
 8001f88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f8e:	4b15      	ldr	r3, [pc, #84]	@ (8001fe4 <HAL_UART_MspInit+0x88>)
 8001f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f96:	613b      	str	r3, [r7, #16]
 8001f98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	4b11      	ldr	r3, [pc, #68]	@ (8001fe4 <HAL_UART_MspInit+0x88>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa2:	4a10      	ldr	r2, [pc, #64]	@ (8001fe4 <HAL_UART_MspInit+0x88>)
 8001fa4:	f043 0301 	orr.w	r3, r3, #1
 8001fa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001faa:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe4 <HAL_UART_MspInit+0x88>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001fb6:	230c      	movs	r3, #12
 8001fb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fc6:	2307      	movs	r3, #7
 8001fc8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fca:	f107 0314 	add.w	r3, r7, #20
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4805      	ldr	r0, [pc, #20]	@ (8001fe8 <HAL_UART_MspInit+0x8c>)
 8001fd2:	f000 fa05 	bl	80023e0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001fd6:	bf00      	nop
 8001fd8:	3728      	adds	r7, #40	@ 0x28
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40004400 	.word	0x40004400
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	40020000 	.word	0x40020000

08001fec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ff0:	bf00      	nop
 8001ff2:	e7fd      	b.n	8001ff0 <NMI_Handler+0x4>

08001ff4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ff8:	bf00      	nop
 8001ffa:	e7fd      	b.n	8001ff8 <HardFault_Handler+0x4>

08001ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002000:	bf00      	nop
 8002002:	e7fd      	b.n	8002000 <MemManage_Handler+0x4>

08002004 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002008:	bf00      	nop
 800200a:	e7fd      	b.n	8002008 <BusFault_Handler+0x4>

0800200c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002010:	bf00      	nop
 8002012:	e7fd      	b.n	8002010 <UsageFault_Handler+0x4>

08002014 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002022:	b480      	push	{r7}
 8002024:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002034:	bf00      	nop
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002042:	f000 f8c7 	bl	80021d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
	...

0800204c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002054:	4a14      	ldr	r2, [pc, #80]	@ (80020a8 <_sbrk+0x5c>)
 8002056:	4b15      	ldr	r3, [pc, #84]	@ (80020ac <_sbrk+0x60>)
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002060:	4b13      	ldr	r3, [pc, #76]	@ (80020b0 <_sbrk+0x64>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d102      	bne.n	800206e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002068:	4b11      	ldr	r3, [pc, #68]	@ (80020b0 <_sbrk+0x64>)
 800206a:	4a12      	ldr	r2, [pc, #72]	@ (80020b4 <_sbrk+0x68>)
 800206c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800206e:	4b10      	ldr	r3, [pc, #64]	@ (80020b0 <_sbrk+0x64>)
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4413      	add	r3, r2
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	429a      	cmp	r2, r3
 800207a:	d207      	bcs.n	800208c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800207c:	f003 fbb8 	bl	80057f0 <__errno>
 8002080:	4603      	mov	r3, r0
 8002082:	220c      	movs	r2, #12
 8002084:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002086:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800208a:	e009      	b.n	80020a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800208c:	4b08      	ldr	r3, [pc, #32]	@ (80020b0 <_sbrk+0x64>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002092:	4b07      	ldr	r3, [pc, #28]	@ (80020b0 <_sbrk+0x64>)
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4413      	add	r3, r2
 800209a:	4a05      	ldr	r2, [pc, #20]	@ (80020b0 <_sbrk+0x64>)
 800209c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800209e:	68fb      	ldr	r3, [r7, #12]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3718      	adds	r7, #24
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	20020000 	.word	0x20020000
 80020ac:	00000400 	.word	0x00000400
 80020b0:	20000a7c 	.word	0x20000a7c
 80020b4:	20000bd0 	.word	0x20000bd0

080020b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020bc:	4b06      	ldr	r3, [pc, #24]	@ (80020d8 <SystemInit+0x20>)
 80020be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020c2:	4a05      	ldr	r2, [pc, #20]	@ (80020d8 <SystemInit+0x20>)
 80020c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020cc:	bf00      	nop
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	e000ed00 	.word	0xe000ed00

080020dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80020dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002114 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80020e0:	f7ff ffea 	bl	80020b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020e4:	480c      	ldr	r0, [pc, #48]	@ (8002118 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020e6:	490d      	ldr	r1, [pc, #52]	@ (800211c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002120 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020ec:	e002      	b.n	80020f4 <LoopCopyDataInit>

080020ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020f2:	3304      	adds	r3, #4

080020f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020f8:	d3f9      	bcc.n	80020ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002124 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020fc:	4c0a      	ldr	r4, [pc, #40]	@ (8002128 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002100:	e001      	b.n	8002106 <LoopFillZerobss>

08002102 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002102:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002104:	3204      	adds	r2, #4

08002106 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002106:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002108:	d3fb      	bcc.n	8002102 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800210a:	f003 fb77 	bl	80057fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800210e:	f7fe ff13 	bl	8000f38 <main>
  bx  lr    
 8002112:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002114:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002118:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800211c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002120:	08006928 	.word	0x08006928
  ldr r2, =_sbss
 8002124:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002128:	20000bcc 	.word	0x20000bcc

0800212c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800212c:	e7fe      	b.n	800212c <ADC_IRQHandler>
	...

08002130 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002134:	4b0e      	ldr	r3, [pc, #56]	@ (8002170 <HAL_Init+0x40>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a0d      	ldr	r2, [pc, #52]	@ (8002170 <HAL_Init+0x40>)
 800213a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800213e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002140:	4b0b      	ldr	r3, [pc, #44]	@ (8002170 <HAL_Init+0x40>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a0a      	ldr	r2, [pc, #40]	@ (8002170 <HAL_Init+0x40>)
 8002146:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800214a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800214c:	4b08      	ldr	r3, [pc, #32]	@ (8002170 <HAL_Init+0x40>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a07      	ldr	r2, [pc, #28]	@ (8002170 <HAL_Init+0x40>)
 8002152:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002156:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002158:	2003      	movs	r0, #3
 800215a:	f000 f90d 	bl	8002378 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800215e:	2000      	movs	r0, #0
 8002160:	f000 f808 	bl	8002174 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002164:	f7ff fe0e 	bl	8001d84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40023c00 	.word	0x40023c00

08002174 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800217c:	4b12      	ldr	r3, [pc, #72]	@ (80021c8 <HAL_InitTick+0x54>)
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	4b12      	ldr	r3, [pc, #72]	@ (80021cc <HAL_InitTick+0x58>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	4619      	mov	r1, r3
 8002186:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800218a:	fbb3 f3f1 	udiv	r3, r3, r1
 800218e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002192:	4618      	mov	r0, r3
 8002194:	f000 f917 	bl	80023c6 <HAL_SYSTICK_Config>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e00e      	b.n	80021c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2b0f      	cmp	r3, #15
 80021a6:	d80a      	bhi.n	80021be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021a8:	2200      	movs	r2, #0
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80021b0:	f000 f8ed 	bl	800238e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021b4:	4a06      	ldr	r2, [pc, #24]	@ (80021d0 <HAL_InitTick+0x5c>)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
 80021bc:	e000      	b.n	80021c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	20000004 	.word	0x20000004
 80021cc:	2000000c 	.word	0x2000000c
 80021d0:	20000008 	.word	0x20000008

080021d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021d8:	4b06      	ldr	r3, [pc, #24]	@ (80021f4 <HAL_IncTick+0x20>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	461a      	mov	r2, r3
 80021de:	4b06      	ldr	r3, [pc, #24]	@ (80021f8 <HAL_IncTick+0x24>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4413      	add	r3, r2
 80021e4:	4a04      	ldr	r2, [pc, #16]	@ (80021f8 <HAL_IncTick+0x24>)
 80021e6:	6013      	str	r3, [r2, #0]
}
 80021e8:	bf00      	nop
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	2000000c 	.word	0x2000000c
 80021f8:	20000a80 	.word	0x20000a80

080021fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002200:	4b03      	ldr	r3, [pc, #12]	@ (8002210 <HAL_GetTick+0x14>)
 8002202:	681b      	ldr	r3, [r3, #0]
}
 8002204:	4618      	mov	r0, r3
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	20000a80 	.word	0x20000a80

08002214 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002224:	4b0c      	ldr	r3, [pc, #48]	@ (8002258 <__NVIC_SetPriorityGrouping+0x44>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002230:	4013      	ands	r3, r2
 8002232:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800223c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002240:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002244:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002246:	4a04      	ldr	r2, [pc, #16]	@ (8002258 <__NVIC_SetPriorityGrouping+0x44>)
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	60d3      	str	r3, [r2, #12]
}
 800224c:	bf00      	nop
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	e000ed00 	.word	0xe000ed00

0800225c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002260:	4b04      	ldr	r3, [pc, #16]	@ (8002274 <__NVIC_GetPriorityGrouping+0x18>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	0a1b      	lsrs	r3, r3, #8
 8002266:	f003 0307 	and.w	r3, r3, #7
}
 800226a:	4618      	mov	r0, r3
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	6039      	str	r1, [r7, #0]
 8002282:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002288:	2b00      	cmp	r3, #0
 800228a:	db0a      	blt.n	80022a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	b2da      	uxtb	r2, r3
 8002290:	490c      	ldr	r1, [pc, #48]	@ (80022c4 <__NVIC_SetPriority+0x4c>)
 8002292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002296:	0112      	lsls	r2, r2, #4
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	440b      	add	r3, r1
 800229c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022a0:	e00a      	b.n	80022b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	4908      	ldr	r1, [pc, #32]	@ (80022c8 <__NVIC_SetPriority+0x50>)
 80022a8:	79fb      	ldrb	r3, [r7, #7]
 80022aa:	f003 030f 	and.w	r3, r3, #15
 80022ae:	3b04      	subs	r3, #4
 80022b0:	0112      	lsls	r2, r2, #4
 80022b2:	b2d2      	uxtb	r2, r2
 80022b4:	440b      	add	r3, r1
 80022b6:	761a      	strb	r2, [r3, #24]
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	e000e100 	.word	0xe000e100
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b089      	sub	sp, #36	@ 0x24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	f1c3 0307 	rsb	r3, r3, #7
 80022e6:	2b04      	cmp	r3, #4
 80022e8:	bf28      	it	cs
 80022ea:	2304      	movcs	r3, #4
 80022ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	3304      	adds	r3, #4
 80022f2:	2b06      	cmp	r3, #6
 80022f4:	d902      	bls.n	80022fc <NVIC_EncodePriority+0x30>
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	3b03      	subs	r3, #3
 80022fa:	e000      	b.n	80022fe <NVIC_EncodePriority+0x32>
 80022fc:	2300      	movs	r3, #0
 80022fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002300:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	43da      	mvns	r2, r3
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	401a      	ands	r2, r3
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002314:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	fa01 f303 	lsl.w	r3, r1, r3
 800231e:	43d9      	mvns	r1, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002324:	4313      	orrs	r3, r2
         );
}
 8002326:	4618      	mov	r0, r3
 8002328:	3724      	adds	r7, #36	@ 0x24
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
	...

08002334 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	3b01      	subs	r3, #1
 8002340:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002344:	d301      	bcc.n	800234a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002346:	2301      	movs	r3, #1
 8002348:	e00f      	b.n	800236a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800234a:	4a0a      	ldr	r2, [pc, #40]	@ (8002374 <SysTick_Config+0x40>)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	3b01      	subs	r3, #1
 8002350:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002352:	210f      	movs	r1, #15
 8002354:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002358:	f7ff ff8e 	bl	8002278 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800235c:	4b05      	ldr	r3, [pc, #20]	@ (8002374 <SysTick_Config+0x40>)
 800235e:	2200      	movs	r2, #0
 8002360:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002362:	4b04      	ldr	r3, [pc, #16]	@ (8002374 <SysTick_Config+0x40>)
 8002364:	2207      	movs	r2, #7
 8002366:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	e000e010 	.word	0xe000e010

08002378 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f7ff ff47 	bl	8002214 <__NVIC_SetPriorityGrouping>
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800238e:	b580      	push	{r7, lr}
 8002390:	b086      	sub	sp, #24
 8002392:	af00      	add	r7, sp, #0
 8002394:	4603      	mov	r3, r0
 8002396:	60b9      	str	r1, [r7, #8]
 8002398:	607a      	str	r2, [r7, #4]
 800239a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800239c:	2300      	movs	r3, #0
 800239e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023a0:	f7ff ff5c 	bl	800225c <__NVIC_GetPriorityGrouping>
 80023a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	68b9      	ldr	r1, [r7, #8]
 80023aa:	6978      	ldr	r0, [r7, #20]
 80023ac:	f7ff ff8e 	bl	80022cc <NVIC_EncodePriority>
 80023b0:	4602      	mov	r2, r0
 80023b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023b6:	4611      	mov	r1, r2
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff ff5d 	bl	8002278 <__NVIC_SetPriority>
}
 80023be:	bf00      	nop
 80023c0:	3718      	adds	r7, #24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b082      	sub	sp, #8
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f7ff ffb0 	bl	8002334 <SysTick_Config>
 80023d4:	4603      	mov	r3, r0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
	...

080023e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b089      	sub	sp, #36	@ 0x24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023ea:	2300      	movs	r3, #0
 80023ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023ee:	2300      	movs	r3, #0
 80023f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023f2:	2300      	movs	r3, #0
 80023f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023f6:	2300      	movs	r3, #0
 80023f8:	61fb      	str	r3, [r7, #28]
 80023fa:	e165      	b.n	80026c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023fc:	2201      	movs	r2, #1
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	4013      	ands	r3, r2
 800240e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	429a      	cmp	r2, r3
 8002416:	f040 8154 	bne.w	80026c2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f003 0303 	and.w	r3, r3, #3
 8002422:	2b01      	cmp	r3, #1
 8002424:	d005      	beq.n	8002432 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800242e:	2b02      	cmp	r3, #2
 8002430:	d130      	bne.n	8002494 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	2203      	movs	r2, #3
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43db      	mvns	r3, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4013      	ands	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	68da      	ldr	r2, [r3, #12]
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4313      	orrs	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002468:	2201      	movs	r2, #1
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	43db      	mvns	r3, r3
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4013      	ands	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	091b      	lsrs	r3, r3, #4
 800247e:	f003 0201 	and.w	r2, r3, #1
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4313      	orrs	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f003 0303 	and.w	r3, r3, #3
 800249c:	2b03      	cmp	r3, #3
 800249e:	d017      	beq.n	80024d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	2203      	movs	r2, #3
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	43db      	mvns	r3, r3
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4013      	ands	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f003 0303 	and.w	r3, r3, #3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d123      	bne.n	8002524 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	08da      	lsrs	r2, r3, #3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3208      	adds	r2, #8
 80024e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	f003 0307 	and.w	r3, r3, #7
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	220f      	movs	r2, #15
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	43db      	mvns	r3, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4013      	ands	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	691a      	ldr	r2, [r3, #16]
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4313      	orrs	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	08da      	lsrs	r2, r3, #3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	3208      	adds	r2, #8
 800251e:	69b9      	ldr	r1, [r7, #24]
 8002520:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	2203      	movs	r2, #3
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4013      	ands	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f003 0203 	and.w	r2, r3, #3
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4313      	orrs	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002560:	2b00      	cmp	r3, #0
 8002562:	f000 80ae 	beq.w	80026c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002566:	2300      	movs	r3, #0
 8002568:	60fb      	str	r3, [r7, #12]
 800256a:	4b5d      	ldr	r3, [pc, #372]	@ (80026e0 <HAL_GPIO_Init+0x300>)
 800256c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800256e:	4a5c      	ldr	r2, [pc, #368]	@ (80026e0 <HAL_GPIO_Init+0x300>)
 8002570:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002574:	6453      	str	r3, [r2, #68]	@ 0x44
 8002576:	4b5a      	ldr	r3, [pc, #360]	@ (80026e0 <HAL_GPIO_Init+0x300>)
 8002578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800257a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002582:	4a58      	ldr	r2, [pc, #352]	@ (80026e4 <HAL_GPIO_Init+0x304>)
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	089b      	lsrs	r3, r3, #2
 8002588:	3302      	adds	r3, #2
 800258a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800258e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	220f      	movs	r2, #15
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	43db      	mvns	r3, r3
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4013      	ands	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a4f      	ldr	r2, [pc, #316]	@ (80026e8 <HAL_GPIO_Init+0x308>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d025      	beq.n	80025fa <HAL_GPIO_Init+0x21a>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a4e      	ldr	r2, [pc, #312]	@ (80026ec <HAL_GPIO_Init+0x30c>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d01f      	beq.n	80025f6 <HAL_GPIO_Init+0x216>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a4d      	ldr	r2, [pc, #308]	@ (80026f0 <HAL_GPIO_Init+0x310>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d019      	beq.n	80025f2 <HAL_GPIO_Init+0x212>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a4c      	ldr	r2, [pc, #304]	@ (80026f4 <HAL_GPIO_Init+0x314>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d013      	beq.n	80025ee <HAL_GPIO_Init+0x20e>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a4b      	ldr	r2, [pc, #300]	@ (80026f8 <HAL_GPIO_Init+0x318>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d00d      	beq.n	80025ea <HAL_GPIO_Init+0x20a>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a4a      	ldr	r2, [pc, #296]	@ (80026fc <HAL_GPIO_Init+0x31c>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d007      	beq.n	80025e6 <HAL_GPIO_Init+0x206>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a49      	ldr	r2, [pc, #292]	@ (8002700 <HAL_GPIO_Init+0x320>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d101      	bne.n	80025e2 <HAL_GPIO_Init+0x202>
 80025de:	2306      	movs	r3, #6
 80025e0:	e00c      	b.n	80025fc <HAL_GPIO_Init+0x21c>
 80025e2:	2307      	movs	r3, #7
 80025e4:	e00a      	b.n	80025fc <HAL_GPIO_Init+0x21c>
 80025e6:	2305      	movs	r3, #5
 80025e8:	e008      	b.n	80025fc <HAL_GPIO_Init+0x21c>
 80025ea:	2304      	movs	r3, #4
 80025ec:	e006      	b.n	80025fc <HAL_GPIO_Init+0x21c>
 80025ee:	2303      	movs	r3, #3
 80025f0:	e004      	b.n	80025fc <HAL_GPIO_Init+0x21c>
 80025f2:	2302      	movs	r3, #2
 80025f4:	e002      	b.n	80025fc <HAL_GPIO_Init+0x21c>
 80025f6:	2301      	movs	r3, #1
 80025f8:	e000      	b.n	80025fc <HAL_GPIO_Init+0x21c>
 80025fa:	2300      	movs	r3, #0
 80025fc:	69fa      	ldr	r2, [r7, #28]
 80025fe:	f002 0203 	and.w	r2, r2, #3
 8002602:	0092      	lsls	r2, r2, #2
 8002604:	4093      	lsls	r3, r2
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4313      	orrs	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800260c:	4935      	ldr	r1, [pc, #212]	@ (80026e4 <HAL_GPIO_Init+0x304>)
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	089b      	lsrs	r3, r3, #2
 8002612:	3302      	adds	r3, #2
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800261a:	4b3a      	ldr	r3, [pc, #232]	@ (8002704 <HAL_GPIO_Init+0x324>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	43db      	mvns	r3, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4013      	ands	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800263e:	4a31      	ldr	r2, [pc, #196]	@ (8002704 <HAL_GPIO_Init+0x324>)
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002644:	4b2f      	ldr	r3, [pc, #188]	@ (8002704 <HAL_GPIO_Init+0x324>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	43db      	mvns	r3, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4013      	ands	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d003      	beq.n	8002668 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002668:	4a26      	ldr	r2, [pc, #152]	@ (8002704 <HAL_GPIO_Init+0x324>)
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800266e:	4b25      	ldr	r3, [pc, #148]	@ (8002704 <HAL_GPIO_Init+0x324>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	43db      	mvns	r3, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4013      	ands	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002692:	4a1c      	ldr	r2, [pc, #112]	@ (8002704 <HAL_GPIO_Init+0x324>)
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002698:	4b1a      	ldr	r3, [pc, #104]	@ (8002704 <HAL_GPIO_Init+0x324>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	43db      	mvns	r3, r3
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4013      	ands	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d003      	beq.n	80026bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026bc:	4a11      	ldr	r2, [pc, #68]	@ (8002704 <HAL_GPIO_Init+0x324>)
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	3301      	adds	r3, #1
 80026c6:	61fb      	str	r3, [r7, #28]
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	2b0f      	cmp	r3, #15
 80026cc:	f67f ae96 	bls.w	80023fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026d0:	bf00      	nop
 80026d2:	bf00      	nop
 80026d4:	3724      	adds	r7, #36	@ 0x24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	40023800 	.word	0x40023800
 80026e4:	40013800 	.word	0x40013800
 80026e8:	40020000 	.word	0x40020000
 80026ec:	40020400 	.word	0x40020400
 80026f0:	40020800 	.word	0x40020800
 80026f4:	40020c00 	.word	0x40020c00
 80026f8:	40021000 	.word	0x40021000
 80026fc:	40021400 	.word	0x40021400
 8002700:	40021800 	.word	0x40021800
 8002704:	40013c00 	.word	0x40013c00

08002708 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	460b      	mov	r3, r1
 8002712:	807b      	strh	r3, [r7, #2]
 8002714:	4613      	mov	r3, r2
 8002716:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002718:	787b      	ldrb	r3, [r7, #1]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800271e:	887a      	ldrh	r2, [r7, #2]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002724:	e003      	b.n	800272e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002726:	887b      	ldrh	r3, [r7, #2]
 8002728:	041a      	lsls	r2, r3, #16
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	619a      	str	r2, [r3, #24]
}
 800272e:	bf00      	nop
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
	...

0800273c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e12b      	b.n	80029a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d106      	bne.n	8002768 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7ff fb36 	bl	8001dd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2224      	movs	r2, #36	@ 0x24
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0201 	bic.w	r2, r2, #1
 800277e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800278e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800279e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027a0:	f001 fa10 	bl	8003bc4 <HAL_RCC_GetPCLK1Freq>
 80027a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	4a81      	ldr	r2, [pc, #516]	@ (80029b0 <HAL_I2C_Init+0x274>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d807      	bhi.n	80027c0 <HAL_I2C_Init+0x84>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	4a80      	ldr	r2, [pc, #512]	@ (80029b4 <HAL_I2C_Init+0x278>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	bf94      	ite	ls
 80027b8:	2301      	movls	r3, #1
 80027ba:	2300      	movhi	r3, #0
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	e006      	b.n	80027ce <HAL_I2C_Init+0x92>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	4a7d      	ldr	r2, [pc, #500]	@ (80029b8 <HAL_I2C_Init+0x27c>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	bf94      	ite	ls
 80027c8:	2301      	movls	r3, #1
 80027ca:	2300      	movhi	r3, #0
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e0e7      	b.n	80029a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	4a78      	ldr	r2, [pc, #480]	@ (80029bc <HAL_I2C_Init+0x280>)
 80027da:	fba2 2303 	umull	r2, r3, r2, r3
 80027de:	0c9b      	lsrs	r3, r3, #18
 80027e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68ba      	ldr	r2, [r7, #8]
 80027f2:	430a      	orrs	r2, r1
 80027f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	4a6a      	ldr	r2, [pc, #424]	@ (80029b0 <HAL_I2C_Init+0x274>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d802      	bhi.n	8002810 <HAL_I2C_Init+0xd4>
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	3301      	adds	r3, #1
 800280e:	e009      	b.n	8002824 <HAL_I2C_Init+0xe8>
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002816:	fb02 f303 	mul.w	r3, r2, r3
 800281a:	4a69      	ldr	r2, [pc, #420]	@ (80029c0 <HAL_I2C_Init+0x284>)
 800281c:	fba2 2303 	umull	r2, r3, r2, r3
 8002820:	099b      	lsrs	r3, r3, #6
 8002822:	3301      	adds	r3, #1
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	6812      	ldr	r2, [r2, #0]
 8002828:	430b      	orrs	r3, r1
 800282a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002836:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	495c      	ldr	r1, [pc, #368]	@ (80029b0 <HAL_I2C_Init+0x274>)
 8002840:	428b      	cmp	r3, r1
 8002842:	d819      	bhi.n	8002878 <HAL_I2C_Init+0x13c>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	1e59      	subs	r1, r3, #1
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002852:	1c59      	adds	r1, r3, #1
 8002854:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002858:	400b      	ands	r3, r1
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00a      	beq.n	8002874 <HAL_I2C_Init+0x138>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	1e59      	subs	r1, r3, #1
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	fbb1 f3f3 	udiv	r3, r1, r3
 800286c:	3301      	adds	r3, #1
 800286e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002872:	e051      	b.n	8002918 <HAL_I2C_Init+0x1dc>
 8002874:	2304      	movs	r3, #4
 8002876:	e04f      	b.n	8002918 <HAL_I2C_Init+0x1dc>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d111      	bne.n	80028a4 <HAL_I2C_Init+0x168>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	1e58      	subs	r0, r3, #1
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6859      	ldr	r1, [r3, #4]
 8002888:	460b      	mov	r3, r1
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	440b      	add	r3, r1
 800288e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002892:	3301      	adds	r3, #1
 8002894:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002898:	2b00      	cmp	r3, #0
 800289a:	bf0c      	ite	eq
 800289c:	2301      	moveq	r3, #1
 800289e:	2300      	movne	r3, #0
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	e012      	b.n	80028ca <HAL_I2C_Init+0x18e>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	1e58      	subs	r0, r3, #1
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6859      	ldr	r1, [r3, #4]
 80028ac:	460b      	mov	r3, r1
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	440b      	add	r3, r1
 80028b2:	0099      	lsls	r1, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ba:	3301      	adds	r3, #1
 80028bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	bf0c      	ite	eq
 80028c4:	2301      	moveq	r3, #1
 80028c6:	2300      	movne	r3, #0
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <HAL_I2C_Init+0x196>
 80028ce:	2301      	movs	r3, #1
 80028d0:	e022      	b.n	8002918 <HAL_I2C_Init+0x1dc>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10e      	bne.n	80028f8 <HAL_I2C_Init+0x1bc>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	1e58      	subs	r0, r3, #1
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6859      	ldr	r1, [r3, #4]
 80028e2:	460b      	mov	r3, r1
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	440b      	add	r3, r1
 80028e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ec:	3301      	adds	r3, #1
 80028ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028f6:	e00f      	b.n	8002918 <HAL_I2C_Init+0x1dc>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	1e58      	subs	r0, r3, #1
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6859      	ldr	r1, [r3, #4]
 8002900:	460b      	mov	r3, r1
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	440b      	add	r3, r1
 8002906:	0099      	lsls	r1, r3, #2
 8002908:	440b      	add	r3, r1
 800290a:	fbb0 f3f3 	udiv	r3, r0, r3
 800290e:	3301      	adds	r3, #1
 8002910:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002914:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002918:	6879      	ldr	r1, [r7, #4]
 800291a:	6809      	ldr	r1, [r1, #0]
 800291c:	4313      	orrs	r3, r2
 800291e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	69da      	ldr	r2, [r3, #28]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	430a      	orrs	r2, r1
 800293a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002946:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	6911      	ldr	r1, [r2, #16]
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	68d2      	ldr	r2, [r2, #12]
 8002952:	4311      	orrs	r1, r2
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	6812      	ldr	r2, [r2, #0]
 8002958:	430b      	orrs	r3, r1
 800295a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	695a      	ldr	r2, [r3, #20]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	431a      	orrs	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	430a      	orrs	r2, r1
 8002976:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f042 0201 	orr.w	r2, r2, #1
 8002986:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2220      	movs	r2, #32
 8002992:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	000186a0 	.word	0x000186a0
 80029b4:	001e847f 	.word	0x001e847f
 80029b8:	003d08ff 	.word	0x003d08ff
 80029bc:	431bde83 	.word	0x431bde83
 80029c0:	10624dd3 	.word	0x10624dd3

080029c4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b088      	sub	sp, #32
 80029c8:	af02      	add	r7, sp, #8
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	4608      	mov	r0, r1
 80029ce:	4611      	mov	r1, r2
 80029d0:	461a      	mov	r2, r3
 80029d2:	4603      	mov	r3, r0
 80029d4:	817b      	strh	r3, [r7, #10]
 80029d6:	460b      	mov	r3, r1
 80029d8:	813b      	strh	r3, [r7, #8]
 80029da:	4613      	mov	r3, r2
 80029dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029de:	f7ff fc0d 	bl	80021fc <HAL_GetTick>
 80029e2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b20      	cmp	r3, #32
 80029ee:	f040 80d9 	bne.w	8002ba4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	2319      	movs	r3, #25
 80029f8:	2201      	movs	r2, #1
 80029fa:	496d      	ldr	r1, [pc, #436]	@ (8002bb0 <HAL_I2C_Mem_Write+0x1ec>)
 80029fc:	68f8      	ldr	r0, [r7, #12]
 80029fe:	f000 fdb9 	bl	8003574 <I2C_WaitOnFlagUntilTimeout>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002a08:	2302      	movs	r3, #2
 8002a0a:	e0cc      	b.n	8002ba6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d101      	bne.n	8002a1a <HAL_I2C_Mem_Write+0x56>
 8002a16:	2302      	movs	r3, #2
 8002a18:	e0c5      	b.n	8002ba6 <HAL_I2C_Mem_Write+0x1e2>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d007      	beq.n	8002a40 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f042 0201 	orr.w	r2, r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2221      	movs	r2, #33	@ 0x21
 8002a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2240      	movs	r2, #64	@ 0x40
 8002a5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6a3a      	ldr	r2, [r7, #32]
 8002a6a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002a70:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	4a4d      	ldr	r2, [pc, #308]	@ (8002bb4 <HAL_I2C_Mem_Write+0x1f0>)
 8002a80:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a82:	88f8      	ldrh	r0, [r7, #6]
 8002a84:	893a      	ldrh	r2, [r7, #8]
 8002a86:	8979      	ldrh	r1, [r7, #10]
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	9301      	str	r3, [sp, #4]
 8002a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	4603      	mov	r3, r0
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f000 fbf0 	bl	8003278 <I2C_RequestMemoryWrite>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d052      	beq.n	8002b44 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e081      	b.n	8002ba6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f000 fe7e 	bl	80037a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00d      	beq.n	8002ace <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	d107      	bne.n	8002aca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ac8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e06b      	b.n	8002ba6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad2:	781a      	ldrb	r2, [r3, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ade:	1c5a      	adds	r2, r3, #1
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	3b01      	subs	r3, #1
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	695b      	ldr	r3, [r3, #20]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b04      	cmp	r3, #4
 8002b0a:	d11b      	bne.n	8002b44 <HAL_I2C_Mem_Write+0x180>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d017      	beq.n	8002b44 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b18:	781a      	ldrb	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b24:	1c5a      	adds	r2, r3, #1
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1aa      	bne.n	8002aa2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f000 fe71 	bl	8003838 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00d      	beq.n	8002b78 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b60:	2b04      	cmp	r3, #4
 8002b62:	d107      	bne.n	8002b74 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b72:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e016      	b.n	8002ba6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2220      	movs	r2, #32
 8002b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	e000      	b.n	8002ba6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002ba4:	2302      	movs	r3, #2
  }
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3718      	adds	r7, #24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	00100002 	.word	0x00100002
 8002bb4:	ffff0000 	.word	0xffff0000

08002bb8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b08c      	sub	sp, #48	@ 0x30
 8002bbc:	af02      	add	r7, sp, #8
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	4608      	mov	r0, r1
 8002bc2:	4611      	mov	r1, r2
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	817b      	strh	r3, [r7, #10]
 8002bca:	460b      	mov	r3, r1
 8002bcc:	813b      	strh	r3, [r7, #8]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bd2:	f7ff fb13 	bl	80021fc <HAL_GetTick>
 8002bd6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b20      	cmp	r3, #32
 8002be2:	f040 8214 	bne.w	800300e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	2319      	movs	r3, #25
 8002bec:	2201      	movs	r2, #1
 8002bee:	497b      	ldr	r1, [pc, #492]	@ (8002ddc <HAL_I2C_Mem_Read+0x224>)
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 fcbf 	bl	8003574 <I2C_WaitOnFlagUntilTimeout>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	e207      	b.n	8003010 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d101      	bne.n	8002c0e <HAL_I2C_Mem_Read+0x56>
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	e200      	b.n	8003010 <HAL_I2C_Mem_Read+0x458>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d007      	beq.n	8002c34 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 0201 	orr.w	r2, r2, #1
 8002c32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2222      	movs	r2, #34	@ 0x22
 8002c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2240      	movs	r2, #64	@ 0x40
 8002c50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c5e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002c64:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	4a5b      	ldr	r2, [pc, #364]	@ (8002de0 <HAL_I2C_Mem_Read+0x228>)
 8002c74:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c76:	88f8      	ldrh	r0, [r7, #6]
 8002c78:	893a      	ldrh	r2, [r7, #8]
 8002c7a:	8979      	ldrh	r1, [r7, #10]
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7e:	9301      	str	r3, [sp, #4]
 8002c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	4603      	mov	r3, r0
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f000 fb8c 	bl	80033a4 <I2C_RequestMemoryRead>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e1bc      	b.n	8003010 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d113      	bne.n	8002cc6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	623b      	str	r3, [r7, #32]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	695b      	ldr	r3, [r3, #20]
 8002ca8:	623b      	str	r3, [r7, #32]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	623b      	str	r3, [r7, #32]
 8002cb2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cc2:	601a      	str	r2, [r3, #0]
 8002cc4:	e190      	b.n	8002fe8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d11b      	bne.n	8002d06 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cdc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cde:	2300      	movs	r3, #0
 8002ce0:	61fb      	str	r3, [r7, #28]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	61fb      	str	r3, [r7, #28]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	61fb      	str	r3, [r7, #28]
 8002cf2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	e170      	b.n	8002fe8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d11b      	bne.n	8002d46 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d1c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d2e:	2300      	movs	r3, #0
 8002d30:	61bb      	str	r3, [r7, #24]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	61bb      	str	r3, [r7, #24]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	61bb      	str	r3, [r7, #24]
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	e150      	b.n	8002fe8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d46:	2300      	movs	r3, #0
 8002d48:	617b      	str	r3, [r7, #20]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	617b      	str	r3, [r7, #20]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	617b      	str	r3, [r7, #20]
 8002d5a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002d5c:	e144      	b.n	8002fe8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d62:	2b03      	cmp	r3, #3
 8002d64:	f200 80f1 	bhi.w	8002f4a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d123      	bne.n	8002db8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d72:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f000 fda7 	bl	80038c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e145      	b.n	8003010 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	691a      	ldr	r2, [r3, #16]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8e:	b2d2      	uxtb	r2, r2
 8002d90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d96:	1c5a      	adds	r2, r3, #1
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002da0:	3b01      	subs	r3, #1
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	3b01      	subs	r3, #1
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002db6:	e117      	b.n	8002fe8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d14e      	bne.n	8002e5e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc2:	9300      	str	r3, [sp, #0]
 8002dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	4906      	ldr	r1, [pc, #24]	@ (8002de4 <HAL_I2C_Mem_Read+0x22c>)
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	f000 fbd2 	bl	8003574 <I2C_WaitOnFlagUntilTimeout>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d008      	beq.n	8002de8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e11a      	b.n	8003010 <HAL_I2C_Mem_Read+0x458>
 8002dda:	bf00      	nop
 8002ddc:	00100002 	.word	0x00100002
 8002de0:	ffff0000 	.word	0xffff0000
 8002de4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002df6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	691a      	ldr	r2, [r3, #16]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e02:	b2d2      	uxtb	r2, r2
 8002e04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0a:	1c5a      	adds	r2, r3, #1
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e14:	3b01      	subs	r3, #1
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	3b01      	subs	r3, #1
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	691a      	ldr	r2, [r3, #16]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e34:	b2d2      	uxtb	r2, r2
 8002e36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3c:	1c5a      	adds	r2, r3, #1
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e46:	3b01      	subs	r3, #1
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	3b01      	subs	r3, #1
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e5c:	e0c4      	b.n	8002fe8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e60:	9300      	str	r3, [sp, #0]
 8002e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e64:	2200      	movs	r2, #0
 8002e66:	496c      	ldr	r1, [pc, #432]	@ (8003018 <HAL_I2C_Mem_Read+0x460>)
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f000 fb83 	bl	8003574 <I2C_WaitOnFlagUntilTimeout>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e0cb      	b.n	8003010 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	691a      	ldr	r2, [r3, #16]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e92:	b2d2      	uxtb	r2, r2
 8002e94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9a:	1c5a      	adds	r2, r3, #1
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	4955      	ldr	r1, [pc, #340]	@ (8003018 <HAL_I2C_Mem_Read+0x460>)
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f000 fb55 	bl	8003574 <I2C_WaitOnFlagUntilTimeout>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e09d      	b.n	8003010 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ee2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	691a      	ldr	r2, [r3, #16]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eee:	b2d2      	uxtb	r2, r2
 8002ef0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef6:	1c5a      	adds	r2, r3, #1
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f00:	3b01      	subs	r3, #1
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	691a      	ldr	r2, [r3, #16]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f20:	b2d2      	uxtb	r2, r2
 8002f22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f28:	1c5a      	adds	r2, r3, #1
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f32:	3b01      	subs	r3, #1
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	3b01      	subs	r3, #1
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f48:	e04e      	b.n	8002fe8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f4c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 fcba 	bl	80038c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e058      	b.n	8003010 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	691a      	ldr	r2, [r3, #16]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f68:	b2d2      	uxtb	r2, r2
 8002f6a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f70:	1c5a      	adds	r2, r3, #1
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	f003 0304 	and.w	r3, r3, #4
 8002f9a:	2b04      	cmp	r3, #4
 8002f9c:	d124      	bne.n	8002fe8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fa2:	2b03      	cmp	r3, #3
 8002fa4:	d107      	bne.n	8002fb6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fb4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	691a      	ldr	r2, [r3, #16]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc0:	b2d2      	uxtb	r2, r2
 8002fc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc8:	1c5a      	adds	r2, r3, #1
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f47f aeb6 	bne.w	8002d5e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800300a:	2300      	movs	r3, #0
 800300c:	e000      	b.n	8003010 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800300e:	2302      	movs	r3, #2
  }
}
 8003010:	4618      	mov	r0, r3
 8003012:	3728      	adds	r7, #40	@ 0x28
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	00010004 	.word	0x00010004

0800301c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b08a      	sub	sp, #40	@ 0x28
 8003020:	af02      	add	r7, sp, #8
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	607a      	str	r2, [r7, #4]
 8003026:	603b      	str	r3, [r7, #0]
 8003028:	460b      	mov	r3, r1
 800302a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800302c:	f7ff f8e6 	bl	80021fc <HAL_GetTick>
 8003030:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003032:	2300      	movs	r3, #0
 8003034:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b20      	cmp	r3, #32
 8003040:	f040 8111 	bne.w	8003266 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	9300      	str	r3, [sp, #0]
 8003048:	2319      	movs	r3, #25
 800304a:	2201      	movs	r2, #1
 800304c:	4988      	ldr	r1, [pc, #544]	@ (8003270 <HAL_I2C_IsDeviceReady+0x254>)
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f000 fa90 	bl	8003574 <I2C_WaitOnFlagUntilTimeout>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800305a:	2302      	movs	r3, #2
 800305c:	e104      	b.n	8003268 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003064:	2b01      	cmp	r3, #1
 8003066:	d101      	bne.n	800306c <HAL_I2C_IsDeviceReady+0x50>
 8003068:	2302      	movs	r3, #2
 800306a:	e0fd      	b.n	8003268 <HAL_I2C_IsDeviceReady+0x24c>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b01      	cmp	r3, #1
 8003080:	d007      	beq.n	8003092 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f042 0201 	orr.w	r2, r2, #1
 8003090:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2224      	movs	r2, #36	@ 0x24
 80030a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	4a70      	ldr	r2, [pc, #448]	@ (8003274 <HAL_I2C_IsDeviceReady+0x258>)
 80030b4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030c4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	9300      	str	r3, [sp, #0]
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f000 fa4e 	bl	8003574 <I2C_WaitOnFlagUntilTimeout>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00d      	beq.n	80030fa <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030ec:	d103      	bne.n	80030f6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030f4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e0b6      	b.n	8003268 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030fa:	897b      	ldrh	r3, [r7, #10]
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	461a      	mov	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003108:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800310a:	f7ff f877 	bl	80021fc <HAL_GetTick>
 800310e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b02      	cmp	r3, #2
 800311c:	bf0c      	ite	eq
 800311e:	2301      	moveq	r3, #1
 8003120:	2300      	movne	r3, #0
 8003122:	b2db      	uxtb	r3, r3
 8003124:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003130:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003134:	bf0c      	ite	eq
 8003136:	2301      	moveq	r3, #1
 8003138:	2300      	movne	r3, #0
 800313a:	b2db      	uxtb	r3, r3
 800313c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800313e:	e025      	b.n	800318c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003140:	f7ff f85c 	bl	80021fc <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	429a      	cmp	r2, r3
 800314e:	d302      	bcc.n	8003156 <HAL_I2C_IsDeviceReady+0x13a>
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d103      	bne.n	800315e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	22a0      	movs	r2, #160	@ 0xa0
 800315a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	695b      	ldr	r3, [r3, #20]
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b02      	cmp	r3, #2
 800316a:	bf0c      	ite	eq
 800316c:	2301      	moveq	r3, #1
 800316e:	2300      	movne	r3, #0
 8003170:	b2db      	uxtb	r3, r3
 8003172:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800317e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003182:	bf0c      	ite	eq
 8003184:	2301      	moveq	r3, #1
 8003186:	2300      	movne	r3, #0
 8003188:	b2db      	uxtb	r3, r3
 800318a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2ba0      	cmp	r3, #160	@ 0xa0
 8003196:	d005      	beq.n	80031a4 <HAL_I2C_IsDeviceReady+0x188>
 8003198:	7dfb      	ldrb	r3, [r7, #23]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d102      	bne.n	80031a4 <HAL_I2C_IsDeviceReady+0x188>
 800319e:	7dbb      	ldrb	r3, [r7, #22]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0cd      	beq.n	8003140 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2220      	movs	r2, #32
 80031a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d129      	bne.n	800320e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031c8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031ca:	2300      	movs	r3, #0
 80031cc:	613b      	str	r3, [r7, #16]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	613b      	str	r3, [r7, #16]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	613b      	str	r3, [r7, #16]
 80031de:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	9300      	str	r3, [sp, #0]
 80031e4:	2319      	movs	r3, #25
 80031e6:	2201      	movs	r2, #1
 80031e8:	4921      	ldr	r1, [pc, #132]	@ (8003270 <HAL_I2C_IsDeviceReady+0x254>)
 80031ea:	68f8      	ldr	r0, [r7, #12]
 80031ec:	f000 f9c2 	bl	8003574 <I2C_WaitOnFlagUntilTimeout>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e036      	b.n	8003268 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2220      	movs	r2, #32
 80031fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800320a:	2300      	movs	r3, #0
 800320c:	e02c      	b.n	8003268 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800321c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003226:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	9300      	str	r3, [sp, #0]
 800322c:	2319      	movs	r3, #25
 800322e:	2201      	movs	r2, #1
 8003230:	490f      	ldr	r1, [pc, #60]	@ (8003270 <HAL_I2C_IsDeviceReady+0x254>)
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f000 f99e 	bl	8003574 <I2C_WaitOnFlagUntilTimeout>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e012      	b.n	8003268 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	3301      	adds	r3, #1
 8003246:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	429a      	cmp	r2, r3
 800324e:	f4ff af32 	bcc.w	80030b6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2220      	movs	r2, #32
 8003256:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e000      	b.n	8003268 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003266:	2302      	movs	r3, #2
  }
}
 8003268:	4618      	mov	r0, r3
 800326a:	3720      	adds	r7, #32
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	00100002 	.word	0x00100002
 8003274:	ffff0000 	.word	0xffff0000

08003278 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b088      	sub	sp, #32
 800327c:	af02      	add	r7, sp, #8
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	4608      	mov	r0, r1
 8003282:	4611      	mov	r1, r2
 8003284:	461a      	mov	r2, r3
 8003286:	4603      	mov	r3, r0
 8003288:	817b      	strh	r3, [r7, #10]
 800328a:	460b      	mov	r3, r1
 800328c:	813b      	strh	r3, [r7, #8]
 800328e:	4613      	mov	r3, r2
 8003290:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a4:	9300      	str	r3, [sp, #0]
 80032a6:	6a3b      	ldr	r3, [r7, #32]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f000 f960 	bl	8003574 <I2C_WaitOnFlagUntilTimeout>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00d      	beq.n	80032d6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032c8:	d103      	bne.n	80032d2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032d0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e05f      	b.n	8003396 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032d6:	897b      	ldrh	r3, [r7, #10]
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	461a      	mov	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80032e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e8:	6a3a      	ldr	r2, [r7, #32]
 80032ea:	492d      	ldr	r1, [pc, #180]	@ (80033a0 <I2C_RequestMemoryWrite+0x128>)
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f000 f9bb 	bl	8003668 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e04c      	b.n	8003396 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032fc:	2300      	movs	r3, #0
 80032fe:	617b      	str	r3, [r7, #20]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	617b      	str	r3, [r7, #20]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	617b      	str	r3, [r7, #20]
 8003310:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003312:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003314:	6a39      	ldr	r1, [r7, #32]
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 fa46 	bl	80037a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00d      	beq.n	800333e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003326:	2b04      	cmp	r3, #4
 8003328:	d107      	bne.n	800333a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003338:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e02b      	b.n	8003396 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800333e:	88fb      	ldrh	r3, [r7, #6]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d105      	bne.n	8003350 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003344:	893b      	ldrh	r3, [r7, #8]
 8003346:	b2da      	uxtb	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	611a      	str	r2, [r3, #16]
 800334e:	e021      	b.n	8003394 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003350:	893b      	ldrh	r3, [r7, #8]
 8003352:	0a1b      	lsrs	r3, r3, #8
 8003354:	b29b      	uxth	r3, r3
 8003356:	b2da      	uxtb	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800335e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003360:	6a39      	ldr	r1, [r7, #32]
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f000 fa20 	bl	80037a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00d      	beq.n	800338a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003372:	2b04      	cmp	r3, #4
 8003374:	d107      	bne.n	8003386 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003384:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e005      	b.n	8003396 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800338a:	893b      	ldrh	r3, [r7, #8]
 800338c:	b2da      	uxtb	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3718      	adds	r7, #24
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	00010002 	.word	0x00010002

080033a4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b088      	sub	sp, #32
 80033a8:	af02      	add	r7, sp, #8
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	4608      	mov	r0, r1
 80033ae:	4611      	mov	r1, r2
 80033b0:	461a      	mov	r2, r3
 80033b2:	4603      	mov	r3, r0
 80033b4:	817b      	strh	r3, [r7, #10]
 80033b6:	460b      	mov	r3, r1
 80033b8:	813b      	strh	r3, [r7, #8]
 80033ba:	4613      	mov	r3, r2
 80033bc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80033cc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e0:	9300      	str	r3, [sp, #0]
 80033e2:	6a3b      	ldr	r3, [r7, #32]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f000 f8c2 	bl	8003574 <I2C_WaitOnFlagUntilTimeout>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00d      	beq.n	8003412 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003400:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003404:	d103      	bne.n	800340e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800340c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e0aa      	b.n	8003568 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003412:	897b      	ldrh	r3, [r7, #10]
 8003414:	b2db      	uxtb	r3, r3
 8003416:	461a      	mov	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003420:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003424:	6a3a      	ldr	r2, [r7, #32]
 8003426:	4952      	ldr	r1, [pc, #328]	@ (8003570 <I2C_RequestMemoryRead+0x1cc>)
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f000 f91d 	bl	8003668 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e097      	b.n	8003568 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003438:	2300      	movs	r3, #0
 800343a:	617b      	str	r3, [r7, #20]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	617b      	str	r3, [r7, #20]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	617b      	str	r3, [r7, #20]
 800344c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800344e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003450:	6a39      	ldr	r1, [r7, #32]
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f000 f9a8 	bl	80037a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00d      	beq.n	800347a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003462:	2b04      	cmp	r3, #4
 8003464:	d107      	bne.n	8003476 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003474:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e076      	b.n	8003568 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800347a:	88fb      	ldrh	r3, [r7, #6]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d105      	bne.n	800348c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003480:	893b      	ldrh	r3, [r7, #8]
 8003482:	b2da      	uxtb	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	611a      	str	r2, [r3, #16]
 800348a:	e021      	b.n	80034d0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800348c:	893b      	ldrh	r3, [r7, #8]
 800348e:	0a1b      	lsrs	r3, r3, #8
 8003490:	b29b      	uxth	r3, r3
 8003492:	b2da      	uxtb	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800349a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800349c:	6a39      	ldr	r1, [r7, #32]
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f000 f982 	bl	80037a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00d      	beq.n	80034c6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	d107      	bne.n	80034c2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e050      	b.n	8003568 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034c6:	893b      	ldrh	r3, [r7, #8]
 80034c8:	b2da      	uxtb	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034d2:	6a39      	ldr	r1, [r7, #32]
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f000 f967 	bl	80037a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00d      	beq.n	80034fc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e4:	2b04      	cmp	r3, #4
 80034e6:	d107      	bne.n	80034f8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034f6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e035      	b.n	8003568 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800350a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800350c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350e:	9300      	str	r3, [sp, #0]
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	2200      	movs	r2, #0
 8003514:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f000 f82b 	bl	8003574 <I2C_WaitOnFlagUntilTimeout>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00d      	beq.n	8003540 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800352e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003532:	d103      	bne.n	800353c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800353a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e013      	b.n	8003568 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003540:	897b      	ldrh	r3, [r7, #10]
 8003542:	b2db      	uxtb	r3, r3
 8003544:	f043 0301 	orr.w	r3, r3, #1
 8003548:	b2da      	uxtb	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003552:	6a3a      	ldr	r2, [r7, #32]
 8003554:	4906      	ldr	r1, [pc, #24]	@ (8003570 <I2C_RequestMemoryRead+0x1cc>)
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 f886 	bl	8003668 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e000      	b.n	8003568 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3718      	adds	r7, #24
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	00010002 	.word	0x00010002

08003574 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	603b      	str	r3, [r7, #0]
 8003580:	4613      	mov	r3, r2
 8003582:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003584:	e048      	b.n	8003618 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800358c:	d044      	beq.n	8003618 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800358e:	f7fe fe35 	bl	80021fc <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	429a      	cmp	r2, r3
 800359c:	d302      	bcc.n	80035a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d139      	bne.n	8003618 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	0c1b      	lsrs	r3, r3, #16
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d10d      	bne.n	80035ca <I2C_WaitOnFlagUntilTimeout+0x56>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	43da      	mvns	r2, r3
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	4013      	ands	r3, r2
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	bf0c      	ite	eq
 80035c0:	2301      	moveq	r3, #1
 80035c2:	2300      	movne	r3, #0
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	461a      	mov	r2, r3
 80035c8:	e00c      	b.n	80035e4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	43da      	mvns	r2, r3
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	4013      	ands	r3, r2
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	2b00      	cmp	r3, #0
 80035da:	bf0c      	ite	eq
 80035dc:	2301      	moveq	r3, #1
 80035de:	2300      	movne	r3, #0
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	461a      	mov	r2, r3
 80035e4:	79fb      	ldrb	r3, [r7, #7]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d116      	bne.n	8003618 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2220      	movs	r2, #32
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003604:	f043 0220 	orr.w	r2, r3, #32
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e023      	b.n	8003660 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	0c1b      	lsrs	r3, r3, #16
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b01      	cmp	r3, #1
 8003620:	d10d      	bne.n	800363e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	43da      	mvns	r2, r3
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	4013      	ands	r3, r2
 800362e:	b29b      	uxth	r3, r3
 8003630:	2b00      	cmp	r3, #0
 8003632:	bf0c      	ite	eq
 8003634:	2301      	moveq	r3, #1
 8003636:	2300      	movne	r3, #0
 8003638:	b2db      	uxtb	r3, r3
 800363a:	461a      	mov	r2, r3
 800363c:	e00c      	b.n	8003658 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	43da      	mvns	r2, r3
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	4013      	ands	r3, r2
 800364a:	b29b      	uxth	r3, r3
 800364c:	2b00      	cmp	r3, #0
 800364e:	bf0c      	ite	eq
 8003650:	2301      	moveq	r3, #1
 8003652:	2300      	movne	r3, #0
 8003654:	b2db      	uxtb	r3, r3
 8003656:	461a      	mov	r2, r3
 8003658:	79fb      	ldrb	r3, [r7, #7]
 800365a:	429a      	cmp	r2, r3
 800365c:	d093      	beq.n	8003586 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
 8003674:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003676:	e071      	b.n	800375c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003682:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003686:	d123      	bne.n	80036d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003696:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80036a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2220      	movs	r2, #32
 80036ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036bc:	f043 0204 	orr.w	r2, r3, #4
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e067      	b.n	80037a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036d6:	d041      	beq.n	800375c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036d8:	f7fe fd90 	bl	80021fc <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d302      	bcc.n	80036ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d136      	bne.n	800375c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	0c1b      	lsrs	r3, r3, #16
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d10c      	bne.n	8003712 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	43da      	mvns	r2, r3
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	4013      	ands	r3, r2
 8003704:	b29b      	uxth	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	bf14      	ite	ne
 800370a:	2301      	movne	r3, #1
 800370c:	2300      	moveq	r3, #0
 800370e:	b2db      	uxtb	r3, r3
 8003710:	e00b      	b.n	800372a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	43da      	mvns	r2, r3
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	4013      	ands	r3, r2
 800371e:	b29b      	uxth	r3, r3
 8003720:	2b00      	cmp	r3, #0
 8003722:	bf14      	ite	ne
 8003724:	2301      	movne	r3, #1
 8003726:	2300      	moveq	r3, #0
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d016      	beq.n	800375c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2220      	movs	r2, #32
 8003738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003748:	f043 0220 	orr.w	r2, r3, #32
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e021      	b.n	80037a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	0c1b      	lsrs	r3, r3, #16
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b01      	cmp	r3, #1
 8003764:	d10c      	bne.n	8003780 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	695b      	ldr	r3, [r3, #20]
 800376c:	43da      	mvns	r2, r3
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	4013      	ands	r3, r2
 8003772:	b29b      	uxth	r3, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	bf14      	ite	ne
 8003778:	2301      	movne	r3, #1
 800377a:	2300      	moveq	r3, #0
 800377c:	b2db      	uxtb	r3, r3
 800377e:	e00b      	b.n	8003798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	43da      	mvns	r2, r3
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	4013      	ands	r3, r2
 800378c:	b29b      	uxth	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	bf14      	ite	ne
 8003792:	2301      	movne	r3, #1
 8003794:	2300      	moveq	r3, #0
 8003796:	b2db      	uxtb	r3, r3
 8003798:	2b00      	cmp	r3, #0
 800379a:	f47f af6d 	bne.w	8003678 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037b4:	e034      	b.n	8003820 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037b6:	68f8      	ldr	r0, [r7, #12]
 80037b8:	f000 f8e3 	bl	8003982 <I2C_IsAcknowledgeFailed>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e034      	b.n	8003830 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80037cc:	d028      	beq.n	8003820 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ce:	f7fe fd15 	bl	80021fc <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	68ba      	ldr	r2, [r7, #8]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d302      	bcc.n	80037e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d11d      	bne.n	8003820 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037ee:	2b80      	cmp	r3, #128	@ 0x80
 80037f0:	d016      	beq.n	8003820 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2220      	movs	r2, #32
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380c:	f043 0220 	orr.w	r2, r3, #32
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e007      	b.n	8003830 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800382a:	2b80      	cmp	r3, #128	@ 0x80
 800382c:	d1c3      	bne.n	80037b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3710      	adds	r7, #16
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003844:	e034      	b.n	80038b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f000 f89b 	bl	8003982 <I2C_IsAcknowledgeFailed>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e034      	b.n	80038c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800385c:	d028      	beq.n	80038b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800385e:	f7fe fccd 	bl	80021fc <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	68ba      	ldr	r2, [r7, #8]
 800386a:	429a      	cmp	r2, r3
 800386c:	d302      	bcc.n	8003874 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d11d      	bne.n	80038b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	f003 0304 	and.w	r3, r3, #4
 800387e:	2b04      	cmp	r3, #4
 8003880:	d016      	beq.n	80038b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2220      	movs	r2, #32
 800388c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389c:	f043 0220 	orr.w	r2, r3, #32
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e007      	b.n	80038c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	f003 0304 	and.w	r3, r3, #4
 80038ba:	2b04      	cmp	r3, #4
 80038bc:	d1c3      	bne.n	8003846 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038d4:	e049      	b.n	800396a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	f003 0310 	and.w	r3, r3, #16
 80038e0:	2b10      	cmp	r3, #16
 80038e2:	d119      	bne.n	8003918 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f06f 0210 	mvn.w	r2, #16
 80038ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2220      	movs	r2, #32
 80038f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e030      	b.n	800397a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003918:	f7fe fc70 	bl	80021fc <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	68ba      	ldr	r2, [r7, #8]
 8003924:	429a      	cmp	r2, r3
 8003926:	d302      	bcc.n	800392e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d11d      	bne.n	800396a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003938:	2b40      	cmp	r3, #64	@ 0x40
 800393a:	d016      	beq.n	800396a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2220      	movs	r2, #32
 8003946:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003956:	f043 0220 	orr.w	r2, r3, #32
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e007      	b.n	800397a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003974:	2b40      	cmp	r3, #64	@ 0x40
 8003976:	d1ae      	bne.n	80038d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003982:	b480      	push	{r7}
 8003984:	b083      	sub	sp, #12
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	695b      	ldr	r3, [r3, #20]
 8003990:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003994:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003998:	d11b      	bne.n	80039d2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80039a2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2220      	movs	r2, #32
 80039ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039be:	f043 0204 	orr.w	r2, r3, #4
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e000      	b.n	80039d4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d101      	bne.n	80039f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e0cc      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039f4:	4b68      	ldr	r3, [pc, #416]	@ (8003b98 <HAL_RCC_ClockConfig+0x1b8>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 030f 	and.w	r3, r3, #15
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d90c      	bls.n	8003a1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a02:	4b65      	ldr	r3, [pc, #404]	@ (8003b98 <HAL_RCC_ClockConfig+0x1b8>)
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	b2d2      	uxtb	r2, r2
 8003a08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a0a:	4b63      	ldr	r3, [pc, #396]	@ (8003b98 <HAL_RCC_ClockConfig+0x1b8>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 030f 	and.w	r3, r3, #15
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d001      	beq.n	8003a1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e0b8      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d020      	beq.n	8003a6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0304 	and.w	r3, r3, #4
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d005      	beq.n	8003a40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a34:	4b59      	ldr	r3, [pc, #356]	@ (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	4a58      	ldr	r2, [pc, #352]	@ (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003a3a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a3e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0308 	and.w	r3, r3, #8
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d005      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a4c:	4b53      	ldr	r3, [pc, #332]	@ (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	4a52      	ldr	r2, [pc, #328]	@ (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003a52:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a58:	4b50      	ldr	r3, [pc, #320]	@ (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	494d      	ldr	r1, [pc, #308]	@ (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d044      	beq.n	8003b00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d107      	bne.n	8003a8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a7e:	4b47      	ldr	r3, [pc, #284]	@ (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d119      	bne.n	8003abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e07f      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d003      	beq.n	8003a9e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a9a:	2b03      	cmp	r3, #3
 8003a9c:	d107      	bne.n	8003aae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a9e:	4b3f      	ldr	r3, [pc, #252]	@ (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d109      	bne.n	8003abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e06f      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aae:	4b3b      	ldr	r3, [pc, #236]	@ (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e067      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003abe:	4b37      	ldr	r3, [pc, #220]	@ (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f023 0203 	bic.w	r2, r3, #3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	4934      	ldr	r1, [pc, #208]	@ (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ad0:	f7fe fb94 	bl	80021fc <HAL_GetTick>
 8003ad4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ad6:	e00a      	b.n	8003aee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ad8:	f7fe fb90 	bl	80021fc <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e04f      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aee:	4b2b      	ldr	r3, [pc, #172]	@ (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 020c 	and.w	r2, r3, #12
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d1eb      	bne.n	8003ad8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b00:	4b25      	ldr	r3, [pc, #148]	@ (8003b98 <HAL_RCC_ClockConfig+0x1b8>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 030f 	and.w	r3, r3, #15
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d20c      	bcs.n	8003b28 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b0e:	4b22      	ldr	r3, [pc, #136]	@ (8003b98 <HAL_RCC_ClockConfig+0x1b8>)
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	b2d2      	uxtb	r2, r2
 8003b14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b16:	4b20      	ldr	r3, [pc, #128]	@ (8003b98 <HAL_RCC_ClockConfig+0x1b8>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 030f 	and.w	r3, r3, #15
 8003b1e:	683a      	ldr	r2, [r7, #0]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d001      	beq.n	8003b28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e032      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d008      	beq.n	8003b46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b34:	4b19      	ldr	r3, [pc, #100]	@ (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	4916      	ldr	r1, [pc, #88]	@ (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0308 	and.w	r3, r3, #8
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d009      	beq.n	8003b66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b52:	4b12      	ldr	r3, [pc, #72]	@ (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	490e      	ldr	r1, [pc, #56]	@ (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b66:	f000 f855 	bl	8003c14 <HAL_RCC_GetSysClockFreq>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	091b      	lsrs	r3, r3, #4
 8003b72:	f003 030f 	and.w	r3, r3, #15
 8003b76:	490a      	ldr	r1, [pc, #40]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b78:	5ccb      	ldrb	r3, [r1, r3]
 8003b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b7e:	4a09      	ldr	r2, [pc, #36]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003b82:	4b09      	ldr	r3, [pc, #36]	@ (8003ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7fe faf4 	bl	8002174 <HAL_InitTick>

  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	40023c00 	.word	0x40023c00
 8003b9c:	40023800 	.word	0x40023800
 8003ba0:	08006858 	.word	0x08006858
 8003ba4:	20000004 	.word	0x20000004
 8003ba8:	20000008 	.word	0x20000008

08003bac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bac:	b480      	push	{r7}
 8003bae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bb0:	4b03      	ldr	r3, [pc, #12]	@ (8003bc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	20000004 	.word	0x20000004

08003bc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003bc8:	f7ff fff0 	bl	8003bac <HAL_RCC_GetHCLKFreq>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	4b05      	ldr	r3, [pc, #20]	@ (8003be4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	0a9b      	lsrs	r3, r3, #10
 8003bd4:	f003 0307 	and.w	r3, r3, #7
 8003bd8:	4903      	ldr	r1, [pc, #12]	@ (8003be8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bda:	5ccb      	ldrb	r3, [r1, r3]
 8003bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	40023800 	.word	0x40023800
 8003be8:	08006868 	.word	0x08006868

08003bec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003bf0:	f7ff ffdc 	bl	8003bac <HAL_RCC_GetHCLKFreq>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	4b05      	ldr	r3, [pc, #20]	@ (8003c0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	0b5b      	lsrs	r3, r3, #13
 8003bfc:	f003 0307 	and.w	r3, r3, #7
 8003c00:	4903      	ldr	r1, [pc, #12]	@ (8003c10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c02:	5ccb      	ldrb	r3, [r1, r3]
 8003c04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	40023800 	.word	0x40023800
 8003c10:	08006868 	.word	0x08006868

08003c14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c18:	b0ae      	sub	sp, #184	@ 0xb8
 8003c1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003c22:	2300      	movs	r3, #0
 8003c24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003c34:	2300      	movs	r3, #0
 8003c36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c3a:	4bcb      	ldr	r3, [pc, #812]	@ (8003f68 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f003 030c 	and.w	r3, r3, #12
 8003c42:	2b0c      	cmp	r3, #12
 8003c44:	f200 8206 	bhi.w	8004054 <HAL_RCC_GetSysClockFreq+0x440>
 8003c48:	a201      	add	r2, pc, #4	@ (adr r2, 8003c50 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4e:	bf00      	nop
 8003c50:	08003c85 	.word	0x08003c85
 8003c54:	08004055 	.word	0x08004055
 8003c58:	08004055 	.word	0x08004055
 8003c5c:	08004055 	.word	0x08004055
 8003c60:	08003c8d 	.word	0x08003c8d
 8003c64:	08004055 	.word	0x08004055
 8003c68:	08004055 	.word	0x08004055
 8003c6c:	08004055 	.word	0x08004055
 8003c70:	08003c95 	.word	0x08003c95
 8003c74:	08004055 	.word	0x08004055
 8003c78:	08004055 	.word	0x08004055
 8003c7c:	08004055 	.word	0x08004055
 8003c80:	08003e85 	.word	0x08003e85
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c84:	4bb9      	ldr	r3, [pc, #740]	@ (8003f6c <HAL_RCC_GetSysClockFreq+0x358>)
 8003c86:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003c8a:	e1e7      	b.n	800405c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c8c:	4bb8      	ldr	r3, [pc, #736]	@ (8003f70 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003c8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003c92:	e1e3      	b.n	800405c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c94:	4bb4      	ldr	r3, [pc, #720]	@ (8003f68 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ca0:	4bb1      	ldr	r3, [pc, #708]	@ (8003f68 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d071      	beq.n	8003d90 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cac:	4bae      	ldr	r3, [pc, #696]	@ (8003f68 <HAL_RCC_GetSysClockFreq+0x354>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	099b      	lsrs	r3, r3, #6
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003cb8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003cbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003cc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cc4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003cc8:	2300      	movs	r3, #0
 8003cca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003cce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003cd2:	4622      	mov	r2, r4
 8003cd4:	462b      	mov	r3, r5
 8003cd6:	f04f 0000 	mov.w	r0, #0
 8003cda:	f04f 0100 	mov.w	r1, #0
 8003cde:	0159      	lsls	r1, r3, #5
 8003ce0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ce4:	0150      	lsls	r0, r2, #5
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	460b      	mov	r3, r1
 8003cea:	4621      	mov	r1, r4
 8003cec:	1a51      	subs	r1, r2, r1
 8003cee:	6439      	str	r1, [r7, #64]	@ 0x40
 8003cf0:	4629      	mov	r1, r5
 8003cf2:	eb63 0301 	sbc.w	r3, r3, r1
 8003cf6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cf8:	f04f 0200 	mov.w	r2, #0
 8003cfc:	f04f 0300 	mov.w	r3, #0
 8003d00:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003d04:	4649      	mov	r1, r9
 8003d06:	018b      	lsls	r3, r1, #6
 8003d08:	4641      	mov	r1, r8
 8003d0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d0e:	4641      	mov	r1, r8
 8003d10:	018a      	lsls	r2, r1, #6
 8003d12:	4641      	mov	r1, r8
 8003d14:	1a51      	subs	r1, r2, r1
 8003d16:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003d18:	4649      	mov	r1, r9
 8003d1a:	eb63 0301 	sbc.w	r3, r3, r1
 8003d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d20:	f04f 0200 	mov.w	r2, #0
 8003d24:	f04f 0300 	mov.w	r3, #0
 8003d28:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003d2c:	4649      	mov	r1, r9
 8003d2e:	00cb      	lsls	r3, r1, #3
 8003d30:	4641      	mov	r1, r8
 8003d32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d36:	4641      	mov	r1, r8
 8003d38:	00ca      	lsls	r2, r1, #3
 8003d3a:	4610      	mov	r0, r2
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	4603      	mov	r3, r0
 8003d40:	4622      	mov	r2, r4
 8003d42:	189b      	adds	r3, r3, r2
 8003d44:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d46:	462b      	mov	r3, r5
 8003d48:	460a      	mov	r2, r1
 8003d4a:	eb42 0303 	adc.w	r3, r2, r3
 8003d4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d50:	f04f 0200 	mov.w	r2, #0
 8003d54:	f04f 0300 	mov.w	r3, #0
 8003d58:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003d5c:	4629      	mov	r1, r5
 8003d5e:	024b      	lsls	r3, r1, #9
 8003d60:	4621      	mov	r1, r4
 8003d62:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d66:	4621      	mov	r1, r4
 8003d68:	024a      	lsls	r2, r1, #9
 8003d6a:	4610      	mov	r0, r2
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003d72:	2200      	movs	r2, #0
 8003d74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003d78:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003d7c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003d80:	f7fc ff44 	bl	8000c0c <__aeabi_uldivmod>
 8003d84:	4602      	mov	r2, r0
 8003d86:	460b      	mov	r3, r1
 8003d88:	4613      	mov	r3, r2
 8003d8a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d8e:	e067      	b.n	8003e60 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d90:	4b75      	ldr	r3, [pc, #468]	@ (8003f68 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	099b      	lsrs	r3, r3, #6
 8003d96:	2200      	movs	r2, #0
 8003d98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d9c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003da0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003da4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003da8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003daa:	2300      	movs	r3, #0
 8003dac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003dae:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003db2:	4622      	mov	r2, r4
 8003db4:	462b      	mov	r3, r5
 8003db6:	f04f 0000 	mov.w	r0, #0
 8003dba:	f04f 0100 	mov.w	r1, #0
 8003dbe:	0159      	lsls	r1, r3, #5
 8003dc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dc4:	0150      	lsls	r0, r2, #5
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	460b      	mov	r3, r1
 8003dca:	4621      	mov	r1, r4
 8003dcc:	1a51      	subs	r1, r2, r1
 8003dce:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003dd0:	4629      	mov	r1, r5
 8003dd2:	eb63 0301 	sbc.w	r3, r3, r1
 8003dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003dd8:	f04f 0200 	mov.w	r2, #0
 8003ddc:	f04f 0300 	mov.w	r3, #0
 8003de0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003de4:	4649      	mov	r1, r9
 8003de6:	018b      	lsls	r3, r1, #6
 8003de8:	4641      	mov	r1, r8
 8003dea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dee:	4641      	mov	r1, r8
 8003df0:	018a      	lsls	r2, r1, #6
 8003df2:	4641      	mov	r1, r8
 8003df4:	ebb2 0a01 	subs.w	sl, r2, r1
 8003df8:	4649      	mov	r1, r9
 8003dfa:	eb63 0b01 	sbc.w	fp, r3, r1
 8003dfe:	f04f 0200 	mov.w	r2, #0
 8003e02:	f04f 0300 	mov.w	r3, #0
 8003e06:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e0a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e0e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e12:	4692      	mov	sl, r2
 8003e14:	469b      	mov	fp, r3
 8003e16:	4623      	mov	r3, r4
 8003e18:	eb1a 0303 	adds.w	r3, sl, r3
 8003e1c:	623b      	str	r3, [r7, #32]
 8003e1e:	462b      	mov	r3, r5
 8003e20:	eb4b 0303 	adc.w	r3, fp, r3
 8003e24:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e26:	f04f 0200 	mov.w	r2, #0
 8003e2a:	f04f 0300 	mov.w	r3, #0
 8003e2e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003e32:	4629      	mov	r1, r5
 8003e34:	028b      	lsls	r3, r1, #10
 8003e36:	4621      	mov	r1, r4
 8003e38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e3c:	4621      	mov	r1, r4
 8003e3e:	028a      	lsls	r2, r1, #10
 8003e40:	4610      	mov	r0, r2
 8003e42:	4619      	mov	r1, r3
 8003e44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e48:	2200      	movs	r2, #0
 8003e4a:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e4c:	677a      	str	r2, [r7, #116]	@ 0x74
 8003e4e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003e52:	f7fc fedb 	bl	8000c0c <__aeabi_uldivmod>
 8003e56:	4602      	mov	r2, r0
 8003e58:	460b      	mov	r3, r1
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003e60:	4b41      	ldr	r3, [pc, #260]	@ (8003f68 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	0c1b      	lsrs	r3, r3, #16
 8003e66:	f003 0303 	and.w	r3, r3, #3
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003e72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003e76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003e82:	e0eb      	b.n	800405c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e84:	4b38      	ldr	r3, [pc, #224]	@ (8003f68 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e90:	4b35      	ldr	r3, [pc, #212]	@ (8003f68 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d06b      	beq.n	8003f74 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e9c:	4b32      	ldr	r3, [pc, #200]	@ (8003f68 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	099b      	lsrs	r3, r3, #6
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ea6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003ea8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eae:	663b      	str	r3, [r7, #96]	@ 0x60
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	667b      	str	r3, [r7, #100]	@ 0x64
 8003eb4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003eb8:	4622      	mov	r2, r4
 8003eba:	462b      	mov	r3, r5
 8003ebc:	f04f 0000 	mov.w	r0, #0
 8003ec0:	f04f 0100 	mov.w	r1, #0
 8003ec4:	0159      	lsls	r1, r3, #5
 8003ec6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003eca:	0150      	lsls	r0, r2, #5
 8003ecc:	4602      	mov	r2, r0
 8003ece:	460b      	mov	r3, r1
 8003ed0:	4621      	mov	r1, r4
 8003ed2:	1a51      	subs	r1, r2, r1
 8003ed4:	61b9      	str	r1, [r7, #24]
 8003ed6:	4629      	mov	r1, r5
 8003ed8:	eb63 0301 	sbc.w	r3, r3, r1
 8003edc:	61fb      	str	r3, [r7, #28]
 8003ede:	f04f 0200 	mov.w	r2, #0
 8003ee2:	f04f 0300 	mov.w	r3, #0
 8003ee6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003eea:	4659      	mov	r1, fp
 8003eec:	018b      	lsls	r3, r1, #6
 8003eee:	4651      	mov	r1, sl
 8003ef0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ef4:	4651      	mov	r1, sl
 8003ef6:	018a      	lsls	r2, r1, #6
 8003ef8:	4651      	mov	r1, sl
 8003efa:	ebb2 0801 	subs.w	r8, r2, r1
 8003efe:	4659      	mov	r1, fp
 8003f00:	eb63 0901 	sbc.w	r9, r3, r1
 8003f04:	f04f 0200 	mov.w	r2, #0
 8003f08:	f04f 0300 	mov.w	r3, #0
 8003f0c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f10:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f14:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f18:	4690      	mov	r8, r2
 8003f1a:	4699      	mov	r9, r3
 8003f1c:	4623      	mov	r3, r4
 8003f1e:	eb18 0303 	adds.w	r3, r8, r3
 8003f22:	613b      	str	r3, [r7, #16]
 8003f24:	462b      	mov	r3, r5
 8003f26:	eb49 0303 	adc.w	r3, r9, r3
 8003f2a:	617b      	str	r3, [r7, #20]
 8003f2c:	f04f 0200 	mov.w	r2, #0
 8003f30:	f04f 0300 	mov.w	r3, #0
 8003f34:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003f38:	4629      	mov	r1, r5
 8003f3a:	024b      	lsls	r3, r1, #9
 8003f3c:	4621      	mov	r1, r4
 8003f3e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f42:	4621      	mov	r1, r4
 8003f44:	024a      	lsls	r2, r1, #9
 8003f46:	4610      	mov	r0, r2
 8003f48:	4619      	mov	r1, r3
 8003f4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f4e:	2200      	movs	r2, #0
 8003f50:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003f52:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003f54:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003f58:	f7fc fe58 	bl	8000c0c <__aeabi_uldivmod>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	460b      	mov	r3, r1
 8003f60:	4613      	mov	r3, r2
 8003f62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f66:	e065      	b.n	8004034 <HAL_RCC_GetSysClockFreq+0x420>
 8003f68:	40023800 	.word	0x40023800
 8003f6c:	00f42400 	.word	0x00f42400
 8003f70:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f74:	4b3d      	ldr	r3, [pc, #244]	@ (800406c <HAL_RCC_GetSysClockFreq+0x458>)
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	099b      	lsrs	r3, r3, #6
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	4611      	mov	r1, r2
 8003f80:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f84:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f86:	2300      	movs	r3, #0
 8003f88:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f8a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003f8e:	4642      	mov	r2, r8
 8003f90:	464b      	mov	r3, r9
 8003f92:	f04f 0000 	mov.w	r0, #0
 8003f96:	f04f 0100 	mov.w	r1, #0
 8003f9a:	0159      	lsls	r1, r3, #5
 8003f9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fa0:	0150      	lsls	r0, r2, #5
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	4641      	mov	r1, r8
 8003fa8:	1a51      	subs	r1, r2, r1
 8003faa:	60b9      	str	r1, [r7, #8]
 8003fac:	4649      	mov	r1, r9
 8003fae:	eb63 0301 	sbc.w	r3, r3, r1
 8003fb2:	60fb      	str	r3, [r7, #12]
 8003fb4:	f04f 0200 	mov.w	r2, #0
 8003fb8:	f04f 0300 	mov.w	r3, #0
 8003fbc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003fc0:	4659      	mov	r1, fp
 8003fc2:	018b      	lsls	r3, r1, #6
 8003fc4:	4651      	mov	r1, sl
 8003fc6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fca:	4651      	mov	r1, sl
 8003fcc:	018a      	lsls	r2, r1, #6
 8003fce:	4651      	mov	r1, sl
 8003fd0:	1a54      	subs	r4, r2, r1
 8003fd2:	4659      	mov	r1, fp
 8003fd4:	eb63 0501 	sbc.w	r5, r3, r1
 8003fd8:	f04f 0200 	mov.w	r2, #0
 8003fdc:	f04f 0300 	mov.w	r3, #0
 8003fe0:	00eb      	lsls	r3, r5, #3
 8003fe2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fe6:	00e2      	lsls	r2, r4, #3
 8003fe8:	4614      	mov	r4, r2
 8003fea:	461d      	mov	r5, r3
 8003fec:	4643      	mov	r3, r8
 8003fee:	18e3      	adds	r3, r4, r3
 8003ff0:	603b      	str	r3, [r7, #0]
 8003ff2:	464b      	mov	r3, r9
 8003ff4:	eb45 0303 	adc.w	r3, r5, r3
 8003ff8:	607b      	str	r3, [r7, #4]
 8003ffa:	f04f 0200 	mov.w	r2, #0
 8003ffe:	f04f 0300 	mov.w	r3, #0
 8004002:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004006:	4629      	mov	r1, r5
 8004008:	028b      	lsls	r3, r1, #10
 800400a:	4621      	mov	r1, r4
 800400c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004010:	4621      	mov	r1, r4
 8004012:	028a      	lsls	r2, r1, #10
 8004014:	4610      	mov	r0, r2
 8004016:	4619      	mov	r1, r3
 8004018:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800401c:	2200      	movs	r2, #0
 800401e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004020:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004022:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004026:	f7fc fdf1 	bl	8000c0c <__aeabi_uldivmod>
 800402a:	4602      	mov	r2, r0
 800402c:	460b      	mov	r3, r1
 800402e:	4613      	mov	r3, r2
 8004030:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004034:	4b0d      	ldr	r3, [pc, #52]	@ (800406c <HAL_RCC_GetSysClockFreq+0x458>)
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	0f1b      	lsrs	r3, r3, #28
 800403a:	f003 0307 	and.w	r3, r3, #7
 800403e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004042:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004046:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800404a:	fbb2 f3f3 	udiv	r3, r2, r3
 800404e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004052:	e003      	b.n	800405c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004054:	4b06      	ldr	r3, [pc, #24]	@ (8004070 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004056:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800405a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800405c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004060:	4618      	mov	r0, r3
 8004062:	37b8      	adds	r7, #184	@ 0xb8
 8004064:	46bd      	mov	sp, r7
 8004066:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800406a:	bf00      	nop
 800406c:	40023800 	.word	0x40023800
 8004070:	00f42400 	.word	0x00f42400

08004074 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b086      	sub	sp, #24
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e28d      	b.n	80045a2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	2b00      	cmp	r3, #0
 8004090:	f000 8083 	beq.w	800419a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004094:	4b94      	ldr	r3, [pc, #592]	@ (80042e8 <HAL_RCC_OscConfig+0x274>)
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f003 030c 	and.w	r3, r3, #12
 800409c:	2b04      	cmp	r3, #4
 800409e:	d019      	beq.n	80040d4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80040a0:	4b91      	ldr	r3, [pc, #580]	@ (80042e8 <HAL_RCC_OscConfig+0x274>)
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f003 030c 	and.w	r3, r3, #12
        || \
 80040a8:	2b08      	cmp	r3, #8
 80040aa:	d106      	bne.n	80040ba <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80040ac:	4b8e      	ldr	r3, [pc, #568]	@ (80042e8 <HAL_RCC_OscConfig+0x274>)
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040b8:	d00c      	beq.n	80040d4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040ba:	4b8b      	ldr	r3, [pc, #556]	@ (80042e8 <HAL_RCC_OscConfig+0x274>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80040c2:	2b0c      	cmp	r3, #12
 80040c4:	d112      	bne.n	80040ec <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040c6:	4b88      	ldr	r3, [pc, #544]	@ (80042e8 <HAL_RCC_OscConfig+0x274>)
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040d2:	d10b      	bne.n	80040ec <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040d4:	4b84      	ldr	r3, [pc, #528]	@ (80042e8 <HAL_RCC_OscConfig+0x274>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d05b      	beq.n	8004198 <HAL_RCC_OscConfig+0x124>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d157      	bne.n	8004198 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e25a      	b.n	80045a2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040f4:	d106      	bne.n	8004104 <HAL_RCC_OscConfig+0x90>
 80040f6:	4b7c      	ldr	r3, [pc, #496]	@ (80042e8 <HAL_RCC_OscConfig+0x274>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a7b      	ldr	r2, [pc, #492]	@ (80042e8 <HAL_RCC_OscConfig+0x274>)
 80040fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004100:	6013      	str	r3, [r2, #0]
 8004102:	e01d      	b.n	8004140 <HAL_RCC_OscConfig+0xcc>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800410c:	d10c      	bne.n	8004128 <HAL_RCC_OscConfig+0xb4>
 800410e:	4b76      	ldr	r3, [pc, #472]	@ (80042e8 <HAL_RCC_OscConfig+0x274>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a75      	ldr	r2, [pc, #468]	@ (80042e8 <HAL_RCC_OscConfig+0x274>)
 8004114:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004118:	6013      	str	r3, [r2, #0]
 800411a:	4b73      	ldr	r3, [pc, #460]	@ (80042e8 <HAL_RCC_OscConfig+0x274>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a72      	ldr	r2, [pc, #456]	@ (80042e8 <HAL_RCC_OscConfig+0x274>)
 8004120:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004124:	6013      	str	r3, [r2, #0]
 8004126:	e00b      	b.n	8004140 <HAL_RCC_OscConfig+0xcc>
 8004128:	4b6f      	ldr	r3, [pc, #444]	@ (80042e8 <HAL_RCC_OscConfig+0x274>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a6e      	ldr	r2, [pc, #440]	@ (80042e8 <HAL_RCC_OscConfig+0x274>)
 800412e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004132:	6013      	str	r3, [r2, #0]
 8004134:	4b6c      	ldr	r3, [pc, #432]	@ (80042e8 <HAL_RCC_OscConfig+0x274>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a6b      	ldr	r2, [pc, #428]	@ (80042e8 <HAL_RCC_OscConfig+0x274>)
 800413a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800413e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d013      	beq.n	8004170 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004148:	f7fe f858 	bl	80021fc <HAL_GetTick>
 800414c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800414e:	e008      	b.n	8004162 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004150:	f7fe f854 	bl	80021fc <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	2b64      	cmp	r3, #100	@ 0x64
 800415c:	d901      	bls.n	8004162 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e21f      	b.n	80045a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004162:	4b61      	ldr	r3, [pc, #388]	@ (80042e8 <HAL_RCC_OscConfig+0x274>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d0f0      	beq.n	8004150 <HAL_RCC_OscConfig+0xdc>
 800416e:	e014      	b.n	800419a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004170:	f7fe f844 	bl	80021fc <HAL_GetTick>
 8004174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004176:	e008      	b.n	800418a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004178:	f7fe f840 	bl	80021fc <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b64      	cmp	r3, #100	@ 0x64
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e20b      	b.n	80045a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800418a:	4b57      	ldr	r3, [pc, #348]	@ (80042e8 <HAL_RCC_OscConfig+0x274>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1f0      	bne.n	8004178 <HAL_RCC_OscConfig+0x104>
 8004196:	e000      	b.n	800419a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004198:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d06f      	beq.n	8004286 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80041a6:	4b50      	ldr	r3, [pc, #320]	@ (80042e8 <HAL_RCC_OscConfig+0x274>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f003 030c 	and.w	r3, r3, #12
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d017      	beq.n	80041e2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80041b2:	4b4d      	ldr	r3, [pc, #308]	@ (80042e8 <HAL_RCC_OscConfig+0x274>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f003 030c 	and.w	r3, r3, #12
        || \
 80041ba:	2b08      	cmp	r3, #8
 80041bc:	d105      	bne.n	80041ca <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80041be:	4b4a      	ldr	r3, [pc, #296]	@ (80042e8 <HAL_RCC_OscConfig+0x274>)
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00b      	beq.n	80041e2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041ca:	4b47      	ldr	r3, [pc, #284]	@ (80042e8 <HAL_RCC_OscConfig+0x274>)
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80041d2:	2b0c      	cmp	r3, #12
 80041d4:	d11c      	bne.n	8004210 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041d6:	4b44      	ldr	r3, [pc, #272]	@ (80042e8 <HAL_RCC_OscConfig+0x274>)
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d116      	bne.n	8004210 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041e2:	4b41      	ldr	r3, [pc, #260]	@ (80042e8 <HAL_RCC_OscConfig+0x274>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d005      	beq.n	80041fa <HAL_RCC_OscConfig+0x186>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d001      	beq.n	80041fa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e1d3      	b.n	80045a2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041fa:	4b3b      	ldr	r3, [pc, #236]	@ (80042e8 <HAL_RCC_OscConfig+0x274>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	00db      	lsls	r3, r3, #3
 8004208:	4937      	ldr	r1, [pc, #220]	@ (80042e8 <HAL_RCC_OscConfig+0x274>)
 800420a:	4313      	orrs	r3, r2
 800420c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800420e:	e03a      	b.n	8004286 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d020      	beq.n	800425a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004218:	4b34      	ldr	r3, [pc, #208]	@ (80042ec <HAL_RCC_OscConfig+0x278>)
 800421a:	2201      	movs	r2, #1
 800421c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800421e:	f7fd ffed 	bl	80021fc <HAL_GetTick>
 8004222:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004224:	e008      	b.n	8004238 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004226:	f7fd ffe9 	bl	80021fc <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	2b02      	cmp	r3, #2
 8004232:	d901      	bls.n	8004238 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e1b4      	b.n	80045a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004238:	4b2b      	ldr	r3, [pc, #172]	@ (80042e8 <HAL_RCC_OscConfig+0x274>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d0f0      	beq.n	8004226 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004244:	4b28      	ldr	r3, [pc, #160]	@ (80042e8 <HAL_RCC_OscConfig+0x274>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	00db      	lsls	r3, r3, #3
 8004252:	4925      	ldr	r1, [pc, #148]	@ (80042e8 <HAL_RCC_OscConfig+0x274>)
 8004254:	4313      	orrs	r3, r2
 8004256:	600b      	str	r3, [r1, #0]
 8004258:	e015      	b.n	8004286 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800425a:	4b24      	ldr	r3, [pc, #144]	@ (80042ec <HAL_RCC_OscConfig+0x278>)
 800425c:	2200      	movs	r2, #0
 800425e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004260:	f7fd ffcc 	bl	80021fc <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004266:	e008      	b.n	800427a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004268:	f7fd ffc8 	bl	80021fc <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b02      	cmp	r3, #2
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e193      	b.n	80045a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800427a:	4b1b      	ldr	r3, [pc, #108]	@ (80042e8 <HAL_RCC_OscConfig+0x274>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1f0      	bne.n	8004268 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0308 	and.w	r3, r3, #8
 800428e:	2b00      	cmp	r3, #0
 8004290:	d036      	beq.n	8004300 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d016      	beq.n	80042c8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800429a:	4b15      	ldr	r3, [pc, #84]	@ (80042f0 <HAL_RCC_OscConfig+0x27c>)
 800429c:	2201      	movs	r2, #1
 800429e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a0:	f7fd ffac 	bl	80021fc <HAL_GetTick>
 80042a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042a6:	e008      	b.n	80042ba <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042a8:	f7fd ffa8 	bl	80021fc <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e173      	b.n	80045a2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042ba:	4b0b      	ldr	r3, [pc, #44]	@ (80042e8 <HAL_RCC_OscConfig+0x274>)
 80042bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d0f0      	beq.n	80042a8 <HAL_RCC_OscConfig+0x234>
 80042c6:	e01b      	b.n	8004300 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042c8:	4b09      	ldr	r3, [pc, #36]	@ (80042f0 <HAL_RCC_OscConfig+0x27c>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ce:	f7fd ff95 	bl	80021fc <HAL_GetTick>
 80042d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042d4:	e00e      	b.n	80042f4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042d6:	f7fd ff91 	bl	80021fc <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d907      	bls.n	80042f4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e15c      	b.n	80045a2 <HAL_RCC_OscConfig+0x52e>
 80042e8:	40023800 	.word	0x40023800
 80042ec:	42470000 	.word	0x42470000
 80042f0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042f4:	4b8a      	ldr	r3, [pc, #552]	@ (8004520 <HAL_RCC_OscConfig+0x4ac>)
 80042f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1ea      	bne.n	80042d6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	2b00      	cmp	r3, #0
 800430a:	f000 8097 	beq.w	800443c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800430e:	2300      	movs	r3, #0
 8004310:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004312:	4b83      	ldr	r3, [pc, #524]	@ (8004520 <HAL_RCC_OscConfig+0x4ac>)
 8004314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004316:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10f      	bne.n	800433e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800431e:	2300      	movs	r3, #0
 8004320:	60bb      	str	r3, [r7, #8]
 8004322:	4b7f      	ldr	r3, [pc, #508]	@ (8004520 <HAL_RCC_OscConfig+0x4ac>)
 8004324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004326:	4a7e      	ldr	r2, [pc, #504]	@ (8004520 <HAL_RCC_OscConfig+0x4ac>)
 8004328:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800432c:	6413      	str	r3, [r2, #64]	@ 0x40
 800432e:	4b7c      	ldr	r3, [pc, #496]	@ (8004520 <HAL_RCC_OscConfig+0x4ac>)
 8004330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004336:	60bb      	str	r3, [r7, #8]
 8004338:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800433a:	2301      	movs	r3, #1
 800433c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800433e:	4b79      	ldr	r3, [pc, #484]	@ (8004524 <HAL_RCC_OscConfig+0x4b0>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004346:	2b00      	cmp	r3, #0
 8004348:	d118      	bne.n	800437c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800434a:	4b76      	ldr	r3, [pc, #472]	@ (8004524 <HAL_RCC_OscConfig+0x4b0>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a75      	ldr	r2, [pc, #468]	@ (8004524 <HAL_RCC_OscConfig+0x4b0>)
 8004350:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004354:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004356:	f7fd ff51 	bl	80021fc <HAL_GetTick>
 800435a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800435c:	e008      	b.n	8004370 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800435e:	f7fd ff4d 	bl	80021fc <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	2b02      	cmp	r3, #2
 800436a:	d901      	bls.n	8004370 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e118      	b.n	80045a2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004370:	4b6c      	ldr	r3, [pc, #432]	@ (8004524 <HAL_RCC_OscConfig+0x4b0>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004378:	2b00      	cmp	r3, #0
 800437a:	d0f0      	beq.n	800435e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d106      	bne.n	8004392 <HAL_RCC_OscConfig+0x31e>
 8004384:	4b66      	ldr	r3, [pc, #408]	@ (8004520 <HAL_RCC_OscConfig+0x4ac>)
 8004386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004388:	4a65      	ldr	r2, [pc, #404]	@ (8004520 <HAL_RCC_OscConfig+0x4ac>)
 800438a:	f043 0301 	orr.w	r3, r3, #1
 800438e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004390:	e01c      	b.n	80043cc <HAL_RCC_OscConfig+0x358>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	2b05      	cmp	r3, #5
 8004398:	d10c      	bne.n	80043b4 <HAL_RCC_OscConfig+0x340>
 800439a:	4b61      	ldr	r3, [pc, #388]	@ (8004520 <HAL_RCC_OscConfig+0x4ac>)
 800439c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800439e:	4a60      	ldr	r2, [pc, #384]	@ (8004520 <HAL_RCC_OscConfig+0x4ac>)
 80043a0:	f043 0304 	orr.w	r3, r3, #4
 80043a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80043a6:	4b5e      	ldr	r3, [pc, #376]	@ (8004520 <HAL_RCC_OscConfig+0x4ac>)
 80043a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043aa:	4a5d      	ldr	r2, [pc, #372]	@ (8004520 <HAL_RCC_OscConfig+0x4ac>)
 80043ac:	f043 0301 	orr.w	r3, r3, #1
 80043b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80043b2:	e00b      	b.n	80043cc <HAL_RCC_OscConfig+0x358>
 80043b4:	4b5a      	ldr	r3, [pc, #360]	@ (8004520 <HAL_RCC_OscConfig+0x4ac>)
 80043b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043b8:	4a59      	ldr	r2, [pc, #356]	@ (8004520 <HAL_RCC_OscConfig+0x4ac>)
 80043ba:	f023 0301 	bic.w	r3, r3, #1
 80043be:	6713      	str	r3, [r2, #112]	@ 0x70
 80043c0:	4b57      	ldr	r3, [pc, #348]	@ (8004520 <HAL_RCC_OscConfig+0x4ac>)
 80043c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043c4:	4a56      	ldr	r2, [pc, #344]	@ (8004520 <HAL_RCC_OscConfig+0x4ac>)
 80043c6:	f023 0304 	bic.w	r3, r3, #4
 80043ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d015      	beq.n	8004400 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d4:	f7fd ff12 	bl	80021fc <HAL_GetTick>
 80043d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043da:	e00a      	b.n	80043f2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043dc:	f7fd ff0e 	bl	80021fc <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e0d7      	b.n	80045a2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043f2:	4b4b      	ldr	r3, [pc, #300]	@ (8004520 <HAL_RCC_OscConfig+0x4ac>)
 80043f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d0ee      	beq.n	80043dc <HAL_RCC_OscConfig+0x368>
 80043fe:	e014      	b.n	800442a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004400:	f7fd fefc 	bl	80021fc <HAL_GetTick>
 8004404:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004406:	e00a      	b.n	800441e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004408:	f7fd fef8 	bl	80021fc <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004416:	4293      	cmp	r3, r2
 8004418:	d901      	bls.n	800441e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e0c1      	b.n	80045a2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800441e:	4b40      	ldr	r3, [pc, #256]	@ (8004520 <HAL_RCC_OscConfig+0x4ac>)
 8004420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1ee      	bne.n	8004408 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800442a:	7dfb      	ldrb	r3, [r7, #23]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d105      	bne.n	800443c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004430:	4b3b      	ldr	r3, [pc, #236]	@ (8004520 <HAL_RCC_OscConfig+0x4ac>)
 8004432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004434:	4a3a      	ldr	r2, [pc, #232]	@ (8004520 <HAL_RCC_OscConfig+0x4ac>)
 8004436:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800443a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	2b00      	cmp	r3, #0
 8004442:	f000 80ad 	beq.w	80045a0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004446:	4b36      	ldr	r3, [pc, #216]	@ (8004520 <HAL_RCC_OscConfig+0x4ac>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f003 030c 	and.w	r3, r3, #12
 800444e:	2b08      	cmp	r3, #8
 8004450:	d060      	beq.n	8004514 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	2b02      	cmp	r3, #2
 8004458:	d145      	bne.n	80044e6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800445a:	4b33      	ldr	r3, [pc, #204]	@ (8004528 <HAL_RCC_OscConfig+0x4b4>)
 800445c:	2200      	movs	r2, #0
 800445e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004460:	f7fd fecc 	bl	80021fc <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004468:	f7fd fec8 	bl	80021fc <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b02      	cmp	r3, #2
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e093      	b.n	80045a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800447a:	4b29      	ldr	r3, [pc, #164]	@ (8004520 <HAL_RCC_OscConfig+0x4ac>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1f0      	bne.n	8004468 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	69da      	ldr	r2, [r3, #28]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	431a      	orrs	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004494:	019b      	lsls	r3, r3, #6
 8004496:	431a      	orrs	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800449c:	085b      	lsrs	r3, r3, #1
 800449e:	3b01      	subs	r3, #1
 80044a0:	041b      	lsls	r3, r3, #16
 80044a2:	431a      	orrs	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a8:	061b      	lsls	r3, r3, #24
 80044aa:	431a      	orrs	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044b0:	071b      	lsls	r3, r3, #28
 80044b2:	491b      	ldr	r1, [pc, #108]	@ (8004520 <HAL_RCC_OscConfig+0x4ac>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044b8:	4b1b      	ldr	r3, [pc, #108]	@ (8004528 <HAL_RCC_OscConfig+0x4b4>)
 80044ba:	2201      	movs	r2, #1
 80044bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044be:	f7fd fe9d 	bl	80021fc <HAL_GetTick>
 80044c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044c4:	e008      	b.n	80044d8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044c6:	f7fd fe99 	bl	80021fc <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d901      	bls.n	80044d8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e064      	b.n	80045a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044d8:	4b11      	ldr	r3, [pc, #68]	@ (8004520 <HAL_RCC_OscConfig+0x4ac>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d0f0      	beq.n	80044c6 <HAL_RCC_OscConfig+0x452>
 80044e4:	e05c      	b.n	80045a0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044e6:	4b10      	ldr	r3, [pc, #64]	@ (8004528 <HAL_RCC_OscConfig+0x4b4>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ec:	f7fd fe86 	bl	80021fc <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044f4:	f7fd fe82 	bl	80021fc <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e04d      	b.n	80045a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004506:	4b06      	ldr	r3, [pc, #24]	@ (8004520 <HAL_RCC_OscConfig+0x4ac>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1f0      	bne.n	80044f4 <HAL_RCC_OscConfig+0x480>
 8004512:	e045      	b.n	80045a0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d107      	bne.n	800452c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e040      	b.n	80045a2 <HAL_RCC_OscConfig+0x52e>
 8004520:	40023800 	.word	0x40023800
 8004524:	40007000 	.word	0x40007000
 8004528:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800452c:	4b1f      	ldr	r3, [pc, #124]	@ (80045ac <HAL_RCC_OscConfig+0x538>)
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d030      	beq.n	800459c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004544:	429a      	cmp	r2, r3
 8004546:	d129      	bne.n	800459c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004552:	429a      	cmp	r2, r3
 8004554:	d122      	bne.n	800459c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800455c:	4013      	ands	r3, r2
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004562:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004564:	4293      	cmp	r3, r2
 8004566:	d119      	bne.n	800459c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004572:	085b      	lsrs	r3, r3, #1
 8004574:	3b01      	subs	r3, #1
 8004576:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004578:	429a      	cmp	r2, r3
 800457a:	d10f      	bne.n	800459c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004586:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004588:	429a      	cmp	r2, r3
 800458a:	d107      	bne.n	800459c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004596:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004598:	429a      	cmp	r2, r3
 800459a:	d001      	beq.n	80045a0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e000      	b.n	80045a2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3718      	adds	r7, #24
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	40023800 	.word	0x40023800

080045b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e041      	b.n	8004646 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d106      	bne.n	80045dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f7fd fc44 	bl	8001e64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2202      	movs	r2, #2
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	3304      	adds	r3, #4
 80045ec:	4619      	mov	r1, r3
 80045ee:	4610      	mov	r0, r2
 80045f0:	f000 f9b8 	bl	8004964 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
	...

08004650 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d109      	bne.n	8004674 <HAL_TIM_PWM_Start+0x24>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004666:	b2db      	uxtb	r3, r3
 8004668:	2b01      	cmp	r3, #1
 800466a:	bf14      	ite	ne
 800466c:	2301      	movne	r3, #1
 800466e:	2300      	moveq	r3, #0
 8004670:	b2db      	uxtb	r3, r3
 8004672:	e022      	b.n	80046ba <HAL_TIM_PWM_Start+0x6a>
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	2b04      	cmp	r3, #4
 8004678:	d109      	bne.n	800468e <HAL_TIM_PWM_Start+0x3e>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b01      	cmp	r3, #1
 8004684:	bf14      	ite	ne
 8004686:	2301      	movne	r3, #1
 8004688:	2300      	moveq	r3, #0
 800468a:	b2db      	uxtb	r3, r3
 800468c:	e015      	b.n	80046ba <HAL_TIM_PWM_Start+0x6a>
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	2b08      	cmp	r3, #8
 8004692:	d109      	bne.n	80046a8 <HAL_TIM_PWM_Start+0x58>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b01      	cmp	r3, #1
 800469e:	bf14      	ite	ne
 80046a0:	2301      	movne	r3, #1
 80046a2:	2300      	moveq	r3, #0
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	e008      	b.n	80046ba <HAL_TIM_PWM_Start+0x6a>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	bf14      	ite	ne
 80046b4:	2301      	movne	r3, #1
 80046b6:	2300      	moveq	r3, #0
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d001      	beq.n	80046c2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e07c      	b.n	80047bc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d104      	bne.n	80046d2 <HAL_TIM_PWM_Start+0x82>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2202      	movs	r2, #2
 80046cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046d0:	e013      	b.n	80046fa <HAL_TIM_PWM_Start+0xaa>
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	2b04      	cmp	r3, #4
 80046d6:	d104      	bne.n	80046e2 <HAL_TIM_PWM_Start+0x92>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2202      	movs	r2, #2
 80046dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046e0:	e00b      	b.n	80046fa <HAL_TIM_PWM_Start+0xaa>
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	2b08      	cmp	r3, #8
 80046e6:	d104      	bne.n	80046f2 <HAL_TIM_PWM_Start+0xa2>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2202      	movs	r2, #2
 80046ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046f0:	e003      	b.n	80046fa <HAL_TIM_PWM_Start+0xaa>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2202      	movs	r2, #2
 80046f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2201      	movs	r2, #1
 8004700:	6839      	ldr	r1, [r7, #0]
 8004702:	4618      	mov	r0, r3
 8004704:	f000 fb8a 	bl	8004e1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a2d      	ldr	r2, [pc, #180]	@ (80047c4 <HAL_TIM_PWM_Start+0x174>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d004      	beq.n	800471c <HAL_TIM_PWM_Start+0xcc>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a2c      	ldr	r2, [pc, #176]	@ (80047c8 <HAL_TIM_PWM_Start+0x178>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d101      	bne.n	8004720 <HAL_TIM_PWM_Start+0xd0>
 800471c:	2301      	movs	r3, #1
 800471e:	e000      	b.n	8004722 <HAL_TIM_PWM_Start+0xd2>
 8004720:	2300      	movs	r3, #0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d007      	beq.n	8004736 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004734:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a22      	ldr	r2, [pc, #136]	@ (80047c4 <HAL_TIM_PWM_Start+0x174>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d022      	beq.n	8004786 <HAL_TIM_PWM_Start+0x136>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004748:	d01d      	beq.n	8004786 <HAL_TIM_PWM_Start+0x136>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a1f      	ldr	r2, [pc, #124]	@ (80047cc <HAL_TIM_PWM_Start+0x17c>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d018      	beq.n	8004786 <HAL_TIM_PWM_Start+0x136>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a1d      	ldr	r2, [pc, #116]	@ (80047d0 <HAL_TIM_PWM_Start+0x180>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d013      	beq.n	8004786 <HAL_TIM_PWM_Start+0x136>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a1c      	ldr	r2, [pc, #112]	@ (80047d4 <HAL_TIM_PWM_Start+0x184>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d00e      	beq.n	8004786 <HAL_TIM_PWM_Start+0x136>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a16      	ldr	r2, [pc, #88]	@ (80047c8 <HAL_TIM_PWM_Start+0x178>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d009      	beq.n	8004786 <HAL_TIM_PWM_Start+0x136>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a18      	ldr	r2, [pc, #96]	@ (80047d8 <HAL_TIM_PWM_Start+0x188>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d004      	beq.n	8004786 <HAL_TIM_PWM_Start+0x136>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a16      	ldr	r2, [pc, #88]	@ (80047dc <HAL_TIM_PWM_Start+0x18c>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d111      	bne.n	80047aa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f003 0307 	and.w	r3, r3, #7
 8004790:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2b06      	cmp	r3, #6
 8004796:	d010      	beq.n	80047ba <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f042 0201 	orr.w	r2, r2, #1
 80047a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047a8:	e007      	b.n	80047ba <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f042 0201 	orr.w	r2, r2, #1
 80047b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	40010000 	.word	0x40010000
 80047c8:	40010400 	.word	0x40010400
 80047cc:	40000400 	.word	0x40000400
 80047d0:	40000800 	.word	0x40000800
 80047d4:	40000c00 	.word	0x40000c00
 80047d8:	40014000 	.word	0x40014000
 80047dc:	40001800 	.word	0x40001800

080047e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047ec:	2300      	movs	r3, #0
 80047ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d101      	bne.n	80047fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80047fa:	2302      	movs	r3, #2
 80047fc:	e0ae      	b.n	800495c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2b0c      	cmp	r3, #12
 800480a:	f200 809f 	bhi.w	800494c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800480e:	a201      	add	r2, pc, #4	@ (adr r2, 8004814 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004814:	08004849 	.word	0x08004849
 8004818:	0800494d 	.word	0x0800494d
 800481c:	0800494d 	.word	0x0800494d
 8004820:	0800494d 	.word	0x0800494d
 8004824:	08004889 	.word	0x08004889
 8004828:	0800494d 	.word	0x0800494d
 800482c:	0800494d 	.word	0x0800494d
 8004830:	0800494d 	.word	0x0800494d
 8004834:	080048cb 	.word	0x080048cb
 8004838:	0800494d 	.word	0x0800494d
 800483c:	0800494d 	.word	0x0800494d
 8004840:	0800494d 	.word	0x0800494d
 8004844:	0800490b 	.word	0x0800490b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68b9      	ldr	r1, [r7, #8]
 800484e:	4618      	mov	r0, r3
 8004850:	f000 f934 	bl	8004abc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	699a      	ldr	r2, [r3, #24]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f042 0208 	orr.w	r2, r2, #8
 8004862:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	699a      	ldr	r2, [r3, #24]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f022 0204 	bic.w	r2, r2, #4
 8004872:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6999      	ldr	r1, [r3, #24]
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	691a      	ldr	r2, [r3, #16]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	430a      	orrs	r2, r1
 8004884:	619a      	str	r2, [r3, #24]
      break;
 8004886:	e064      	b.n	8004952 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68b9      	ldr	r1, [r7, #8]
 800488e:	4618      	mov	r0, r3
 8004890:	f000 f984 	bl	8004b9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	699a      	ldr	r2, [r3, #24]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	699a      	ldr	r2, [r3, #24]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	6999      	ldr	r1, [r3, #24]
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	021a      	lsls	r2, r3, #8
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	430a      	orrs	r2, r1
 80048c6:	619a      	str	r2, [r3, #24]
      break;
 80048c8:	e043      	b.n	8004952 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68b9      	ldr	r1, [r7, #8]
 80048d0:	4618      	mov	r0, r3
 80048d2:	f000 f9d9 	bl	8004c88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	69da      	ldr	r2, [r3, #28]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f042 0208 	orr.w	r2, r2, #8
 80048e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	69da      	ldr	r2, [r3, #28]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f022 0204 	bic.w	r2, r2, #4
 80048f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	69d9      	ldr	r1, [r3, #28]
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	691a      	ldr	r2, [r3, #16]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	430a      	orrs	r2, r1
 8004906:	61da      	str	r2, [r3, #28]
      break;
 8004908:	e023      	b.n	8004952 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68b9      	ldr	r1, [r7, #8]
 8004910:	4618      	mov	r0, r3
 8004912:	f000 fa2d 	bl	8004d70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	69da      	ldr	r2, [r3, #28]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004924:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	69da      	ldr	r2, [r3, #28]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004934:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	69d9      	ldr	r1, [r3, #28]
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	021a      	lsls	r2, r3, #8
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	430a      	orrs	r2, r1
 8004948:	61da      	str	r2, [r3, #28]
      break;
 800494a:	e002      	b.n	8004952 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	75fb      	strb	r3, [r7, #23]
      break;
 8004950:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800495a:	7dfb      	ldrb	r3, [r7, #23]
}
 800495c:	4618      	mov	r0, r3
 800495e:	3718      	adds	r7, #24
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a46      	ldr	r2, [pc, #280]	@ (8004a90 <TIM_Base_SetConfig+0x12c>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d013      	beq.n	80049a4 <TIM_Base_SetConfig+0x40>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004982:	d00f      	beq.n	80049a4 <TIM_Base_SetConfig+0x40>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a43      	ldr	r2, [pc, #268]	@ (8004a94 <TIM_Base_SetConfig+0x130>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d00b      	beq.n	80049a4 <TIM_Base_SetConfig+0x40>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a42      	ldr	r2, [pc, #264]	@ (8004a98 <TIM_Base_SetConfig+0x134>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d007      	beq.n	80049a4 <TIM_Base_SetConfig+0x40>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a41      	ldr	r2, [pc, #260]	@ (8004a9c <TIM_Base_SetConfig+0x138>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d003      	beq.n	80049a4 <TIM_Base_SetConfig+0x40>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a40      	ldr	r2, [pc, #256]	@ (8004aa0 <TIM_Base_SetConfig+0x13c>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d108      	bne.n	80049b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a35      	ldr	r2, [pc, #212]	@ (8004a90 <TIM_Base_SetConfig+0x12c>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d02b      	beq.n	8004a16 <TIM_Base_SetConfig+0xb2>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049c4:	d027      	beq.n	8004a16 <TIM_Base_SetConfig+0xb2>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a32      	ldr	r2, [pc, #200]	@ (8004a94 <TIM_Base_SetConfig+0x130>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d023      	beq.n	8004a16 <TIM_Base_SetConfig+0xb2>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a31      	ldr	r2, [pc, #196]	@ (8004a98 <TIM_Base_SetConfig+0x134>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d01f      	beq.n	8004a16 <TIM_Base_SetConfig+0xb2>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a30      	ldr	r2, [pc, #192]	@ (8004a9c <TIM_Base_SetConfig+0x138>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d01b      	beq.n	8004a16 <TIM_Base_SetConfig+0xb2>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a2f      	ldr	r2, [pc, #188]	@ (8004aa0 <TIM_Base_SetConfig+0x13c>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d017      	beq.n	8004a16 <TIM_Base_SetConfig+0xb2>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a2e      	ldr	r2, [pc, #184]	@ (8004aa4 <TIM_Base_SetConfig+0x140>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d013      	beq.n	8004a16 <TIM_Base_SetConfig+0xb2>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a2d      	ldr	r2, [pc, #180]	@ (8004aa8 <TIM_Base_SetConfig+0x144>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d00f      	beq.n	8004a16 <TIM_Base_SetConfig+0xb2>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a2c      	ldr	r2, [pc, #176]	@ (8004aac <TIM_Base_SetConfig+0x148>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d00b      	beq.n	8004a16 <TIM_Base_SetConfig+0xb2>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a2b      	ldr	r2, [pc, #172]	@ (8004ab0 <TIM_Base_SetConfig+0x14c>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d007      	beq.n	8004a16 <TIM_Base_SetConfig+0xb2>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a2a      	ldr	r2, [pc, #168]	@ (8004ab4 <TIM_Base_SetConfig+0x150>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d003      	beq.n	8004a16 <TIM_Base_SetConfig+0xb2>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a29      	ldr	r2, [pc, #164]	@ (8004ab8 <TIM_Base_SetConfig+0x154>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d108      	bne.n	8004a28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	689a      	ldr	r2, [r3, #8]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a10      	ldr	r2, [pc, #64]	@ (8004a90 <TIM_Base_SetConfig+0x12c>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d003      	beq.n	8004a5c <TIM_Base_SetConfig+0xf8>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a12      	ldr	r2, [pc, #72]	@ (8004aa0 <TIM_Base_SetConfig+0x13c>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d103      	bne.n	8004a64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	691a      	ldr	r2, [r3, #16]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d105      	bne.n	8004a82 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	f023 0201 	bic.w	r2, r3, #1
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	611a      	str	r2, [r3, #16]
  }
}
 8004a82:	bf00      	nop
 8004a84:	3714      	adds	r7, #20
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	40010000 	.word	0x40010000
 8004a94:	40000400 	.word	0x40000400
 8004a98:	40000800 	.word	0x40000800
 8004a9c:	40000c00 	.word	0x40000c00
 8004aa0:	40010400 	.word	0x40010400
 8004aa4:	40014000 	.word	0x40014000
 8004aa8:	40014400 	.word	0x40014400
 8004aac:	40014800 	.word	0x40014800
 8004ab0:	40001800 	.word	0x40001800
 8004ab4:	40001c00 	.word	0x40001c00
 8004ab8:	40002000 	.word	0x40002000

08004abc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b087      	sub	sp, #28
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a1b      	ldr	r3, [r3, #32]
 8004ad0:	f023 0201 	bic.w	r2, r3, #1
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f023 0303 	bic.w	r3, r3, #3
 8004af2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	f023 0302 	bic.w	r3, r3, #2
 8004b04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a20      	ldr	r2, [pc, #128]	@ (8004b94 <TIM_OC1_SetConfig+0xd8>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d003      	beq.n	8004b20 <TIM_OC1_SetConfig+0x64>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a1f      	ldr	r2, [pc, #124]	@ (8004b98 <TIM_OC1_SetConfig+0xdc>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d10c      	bne.n	8004b3a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	f023 0308 	bic.w	r3, r3, #8
 8004b26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	f023 0304 	bic.w	r3, r3, #4
 8004b38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a15      	ldr	r2, [pc, #84]	@ (8004b94 <TIM_OC1_SetConfig+0xd8>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d003      	beq.n	8004b4a <TIM_OC1_SetConfig+0x8e>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a14      	ldr	r2, [pc, #80]	@ (8004b98 <TIM_OC1_SetConfig+0xdc>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d111      	bne.n	8004b6e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004b58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	685a      	ldr	r2, [r3, #4]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	697a      	ldr	r2, [r7, #20]
 8004b86:	621a      	str	r2, [r3, #32]
}
 8004b88:	bf00      	nop
 8004b8a:	371c      	adds	r7, #28
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	40010000 	.word	0x40010000
 8004b98:	40010400 	.word	0x40010400

08004b9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b087      	sub	sp, #28
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a1b      	ldr	r3, [r3, #32]
 8004bb0:	f023 0210 	bic.w	r2, r3, #16
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	021b      	lsls	r3, r3, #8
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	f023 0320 	bic.w	r3, r3, #32
 8004be6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	011b      	lsls	r3, r3, #4
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a22      	ldr	r2, [pc, #136]	@ (8004c80 <TIM_OC2_SetConfig+0xe4>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d003      	beq.n	8004c04 <TIM_OC2_SetConfig+0x68>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a21      	ldr	r2, [pc, #132]	@ (8004c84 <TIM_OC2_SetConfig+0xe8>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d10d      	bne.n	8004c20 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	011b      	lsls	r3, r3, #4
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c1e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a17      	ldr	r2, [pc, #92]	@ (8004c80 <TIM_OC2_SetConfig+0xe4>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d003      	beq.n	8004c30 <TIM_OC2_SetConfig+0x94>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a16      	ldr	r2, [pc, #88]	@ (8004c84 <TIM_OC2_SetConfig+0xe8>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d113      	bne.n	8004c58 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	695b      	ldr	r3, [r3, #20]
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	693a      	ldr	r2, [r7, #16]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	693a      	ldr	r2, [r7, #16]
 8004c5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	685a      	ldr	r2, [r3, #4]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	621a      	str	r2, [r3, #32]
}
 8004c72:	bf00      	nop
 8004c74:	371c      	adds	r7, #28
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	40010000 	.word	0x40010000
 8004c84:	40010400 	.word	0x40010400

08004c88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b087      	sub	sp, #28
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a1b      	ldr	r3, [r3, #32]
 8004c9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	69db      	ldr	r3, [r3, #28]
 8004cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f023 0303 	bic.w	r3, r3, #3
 8004cbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004cd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	021b      	lsls	r3, r3, #8
 8004cd8:	697a      	ldr	r2, [r7, #20]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a21      	ldr	r2, [pc, #132]	@ (8004d68 <TIM_OC3_SetConfig+0xe0>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d003      	beq.n	8004cee <TIM_OC3_SetConfig+0x66>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a20      	ldr	r2, [pc, #128]	@ (8004d6c <TIM_OC3_SetConfig+0xe4>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d10d      	bne.n	8004d0a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004cf4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	021b      	lsls	r3, r3, #8
 8004cfc:	697a      	ldr	r2, [r7, #20]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a16      	ldr	r2, [pc, #88]	@ (8004d68 <TIM_OC3_SetConfig+0xe0>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d003      	beq.n	8004d1a <TIM_OC3_SetConfig+0x92>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a15      	ldr	r2, [pc, #84]	@ (8004d6c <TIM_OC3_SetConfig+0xe4>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d113      	bne.n	8004d42 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004d28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	011b      	lsls	r3, r3, #4
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	011b      	lsls	r3, r3, #4
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	685a      	ldr	r2, [r3, #4]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	621a      	str	r2, [r3, #32]
}
 8004d5c:	bf00      	nop
 8004d5e:	371c      	adds	r7, #28
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr
 8004d68:	40010000 	.word	0x40010000
 8004d6c:	40010400 	.word	0x40010400

08004d70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b087      	sub	sp, #28
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a1b      	ldr	r3, [r3, #32]
 8004d84:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	69db      	ldr	r3, [r3, #28]
 8004d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	021b      	lsls	r3, r3, #8
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004dba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	031b      	lsls	r3, r3, #12
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a12      	ldr	r2, [pc, #72]	@ (8004e14 <TIM_OC4_SetConfig+0xa4>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d003      	beq.n	8004dd8 <TIM_OC4_SetConfig+0x68>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a11      	ldr	r2, [pc, #68]	@ (8004e18 <TIM_OC4_SetConfig+0xa8>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d109      	bne.n	8004dec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004dde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	695b      	ldr	r3, [r3, #20]
 8004de4:	019b      	lsls	r3, r3, #6
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	621a      	str	r2, [r3, #32]
}
 8004e06:	bf00      	nop
 8004e08:	371c      	adds	r7, #28
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	40010000 	.word	0x40010000
 8004e18:	40010400 	.word	0x40010400

08004e1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b087      	sub	sp, #28
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	f003 031f 	and.w	r3, r3, #31
 8004e2e:	2201      	movs	r2, #1
 8004e30:	fa02 f303 	lsl.w	r3, r2, r3
 8004e34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6a1a      	ldr	r2, [r3, #32]
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	43db      	mvns	r3, r3
 8004e3e:	401a      	ands	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6a1a      	ldr	r2, [r3, #32]
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	f003 031f 	and.w	r3, r3, #31
 8004e4e:	6879      	ldr	r1, [r7, #4]
 8004e50:	fa01 f303 	lsl.w	r3, r1, r3
 8004e54:	431a      	orrs	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	621a      	str	r2, [r3, #32]
}
 8004e5a:	bf00      	nop
 8004e5c:	371c      	adds	r7, #28
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
	...

08004e68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d101      	bne.n	8004e80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	e05a      	b.n	8004f36 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ea6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a21      	ldr	r2, [pc, #132]	@ (8004f44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d022      	beq.n	8004f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ecc:	d01d      	beq.n	8004f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a1d      	ldr	r2, [pc, #116]	@ (8004f48 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d018      	beq.n	8004f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a1b      	ldr	r2, [pc, #108]	@ (8004f4c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d013      	beq.n	8004f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a1a      	ldr	r2, [pc, #104]	@ (8004f50 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d00e      	beq.n	8004f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a18      	ldr	r2, [pc, #96]	@ (8004f54 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d009      	beq.n	8004f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a17      	ldr	r2, [pc, #92]	@ (8004f58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d004      	beq.n	8004f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a15      	ldr	r2, [pc, #84]	@ (8004f5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d10c      	bne.n	8004f24 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	68ba      	ldr	r2, [r7, #8]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68ba      	ldr	r2, [r7, #8]
 8004f22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3714      	adds	r7, #20
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	40010000 	.word	0x40010000
 8004f48:	40000400 	.word	0x40000400
 8004f4c:	40000800 	.word	0x40000800
 8004f50:	40000c00 	.word	0x40000c00
 8004f54:	40010400 	.word	0x40010400
 8004f58:	40014000 	.word	0x40014000
 8004f5c:	40001800 	.word	0x40001800

08004f60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d101      	bne.n	8004f72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e042      	b.n	8004ff8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d106      	bne.n	8004f8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f7fc ffe8 	bl	8001f5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2224      	movs	r2, #36	@ 0x24
 8004f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68da      	ldr	r2, [r3, #12]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004fa2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 f973 	bl	8005290 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	691a      	ldr	r2, [r3, #16]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004fb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	695a      	ldr	r2, [r3, #20]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004fc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68da      	ldr	r2, [r3, #12]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004fd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2220      	movs	r2, #32
 8004fe4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2220      	movs	r2, #32
 8004fec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3708      	adds	r7, #8
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b08a      	sub	sp, #40	@ 0x28
 8005004:	af02      	add	r7, sp, #8
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	603b      	str	r3, [r7, #0]
 800500c:	4613      	mov	r3, r2
 800500e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005010:	2300      	movs	r3, #0
 8005012:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800501a:	b2db      	uxtb	r3, r3
 800501c:	2b20      	cmp	r3, #32
 800501e:	d175      	bne.n	800510c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d002      	beq.n	800502c <HAL_UART_Transmit+0x2c>
 8005026:	88fb      	ldrh	r3, [r7, #6]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d101      	bne.n	8005030 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e06e      	b.n	800510e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2221      	movs	r2, #33	@ 0x21
 800503a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800503e:	f7fd f8dd 	bl	80021fc <HAL_GetTick>
 8005042:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	88fa      	ldrh	r2, [r7, #6]
 8005048:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	88fa      	ldrh	r2, [r7, #6]
 800504e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005058:	d108      	bne.n	800506c <HAL_UART_Transmit+0x6c>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d104      	bne.n	800506c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005062:	2300      	movs	r3, #0
 8005064:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	61bb      	str	r3, [r7, #24]
 800506a:	e003      	b.n	8005074 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005070:	2300      	movs	r3, #0
 8005072:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005074:	e02e      	b.n	80050d4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	9300      	str	r3, [sp, #0]
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	2200      	movs	r2, #0
 800507e:	2180      	movs	r1, #128	@ 0x80
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f000 f848 	bl	8005116 <UART_WaitOnFlagUntilTimeout>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d005      	beq.n	8005098 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2220      	movs	r2, #32
 8005090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e03a      	b.n	800510e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d10b      	bne.n	80050b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	881b      	ldrh	r3, [r3, #0]
 80050a2:	461a      	mov	r2, r3
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	3302      	adds	r3, #2
 80050b2:	61bb      	str	r3, [r7, #24]
 80050b4:	e007      	b.n	80050c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	781a      	ldrb	r2, [r3, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	3301      	adds	r3, #1
 80050c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	3b01      	subs	r3, #1
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80050d8:	b29b      	uxth	r3, r3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1cb      	bne.n	8005076 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	9300      	str	r3, [sp, #0]
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	2200      	movs	r2, #0
 80050e6:	2140      	movs	r1, #64	@ 0x40
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f000 f814 	bl	8005116 <UART_WaitOnFlagUntilTimeout>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d005      	beq.n	8005100 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2220      	movs	r2, #32
 80050f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e006      	b.n	800510e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2220      	movs	r2, #32
 8005104:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005108:	2300      	movs	r3, #0
 800510a:	e000      	b.n	800510e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800510c:	2302      	movs	r3, #2
  }
}
 800510e:	4618      	mov	r0, r3
 8005110:	3720      	adds	r7, #32
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b086      	sub	sp, #24
 800511a:	af00      	add	r7, sp, #0
 800511c:	60f8      	str	r0, [r7, #12]
 800511e:	60b9      	str	r1, [r7, #8]
 8005120:	603b      	str	r3, [r7, #0]
 8005122:	4613      	mov	r3, r2
 8005124:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005126:	e03b      	b.n	80051a0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005128:	6a3b      	ldr	r3, [r7, #32]
 800512a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800512e:	d037      	beq.n	80051a0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005130:	f7fd f864 	bl	80021fc <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	6a3a      	ldr	r2, [r7, #32]
 800513c:	429a      	cmp	r2, r3
 800513e:	d302      	bcc.n	8005146 <UART_WaitOnFlagUntilTimeout+0x30>
 8005140:	6a3b      	ldr	r3, [r7, #32]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d101      	bne.n	800514a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e03a      	b.n	80051c0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	f003 0304 	and.w	r3, r3, #4
 8005154:	2b00      	cmp	r3, #0
 8005156:	d023      	beq.n	80051a0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	2b80      	cmp	r3, #128	@ 0x80
 800515c:	d020      	beq.n	80051a0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	2b40      	cmp	r3, #64	@ 0x40
 8005162:	d01d      	beq.n	80051a0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0308 	and.w	r3, r3, #8
 800516e:	2b08      	cmp	r3, #8
 8005170:	d116      	bne.n	80051a0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005172:	2300      	movs	r3, #0
 8005174:	617b      	str	r3, [r7, #20]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	617b      	str	r3, [r7, #20]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	617b      	str	r3, [r7, #20]
 8005186:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f000 f81d 	bl	80051c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2208      	movs	r2, #8
 8005192:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e00f      	b.n	80051c0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	4013      	ands	r3, r2
 80051aa:	68ba      	ldr	r2, [r7, #8]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	bf0c      	ite	eq
 80051b0:	2301      	moveq	r3, #1
 80051b2:	2300      	movne	r3, #0
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	461a      	mov	r2, r3
 80051b8:	79fb      	ldrb	r3, [r7, #7]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d0b4      	beq.n	8005128 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3718      	adds	r7, #24
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b095      	sub	sp, #84	@ 0x54
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	330c      	adds	r3, #12
 80051d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051da:	e853 3f00 	ldrex	r3, [r3]
 80051de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80051e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	330c      	adds	r3, #12
 80051ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80051f0:	643a      	str	r2, [r7, #64]	@ 0x40
 80051f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80051f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051f8:	e841 2300 	strex	r3, r2, [r1]
 80051fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80051fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005200:	2b00      	cmp	r3, #0
 8005202:	d1e5      	bne.n	80051d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	3314      	adds	r3, #20
 800520a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520c:	6a3b      	ldr	r3, [r7, #32]
 800520e:	e853 3f00 	ldrex	r3, [r3]
 8005212:	61fb      	str	r3, [r7, #28]
   return(result);
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	f023 0301 	bic.w	r3, r3, #1
 800521a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	3314      	adds	r3, #20
 8005222:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005224:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005226:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005228:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800522a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800522c:	e841 2300 	strex	r3, r2, [r1]
 8005230:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005234:	2b00      	cmp	r3, #0
 8005236:	d1e5      	bne.n	8005204 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800523c:	2b01      	cmp	r3, #1
 800523e:	d119      	bne.n	8005274 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	330c      	adds	r3, #12
 8005246:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	e853 3f00 	ldrex	r3, [r3]
 800524e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	f023 0310 	bic.w	r3, r3, #16
 8005256:	647b      	str	r3, [r7, #68]	@ 0x44
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	330c      	adds	r3, #12
 800525e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005260:	61ba      	str	r2, [r7, #24]
 8005262:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005264:	6979      	ldr	r1, [r7, #20]
 8005266:	69ba      	ldr	r2, [r7, #24]
 8005268:	e841 2300 	strex	r3, r2, [r1]
 800526c:	613b      	str	r3, [r7, #16]
   return(result);
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1e5      	bne.n	8005240 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2220      	movs	r2, #32
 8005278:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005282:	bf00      	nop
 8005284:	3754      	adds	r7, #84	@ 0x54
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
	...

08005290 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005290:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005294:	b0c0      	sub	sp, #256	@ 0x100
 8005296:	af00      	add	r7, sp, #0
 8005298:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800529c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80052a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052ac:	68d9      	ldr	r1, [r3, #12]
 80052ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	ea40 0301 	orr.w	r3, r0, r1
 80052b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80052ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052be:	689a      	ldr	r2, [r3, #8]
 80052c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	431a      	orrs	r2, r3
 80052c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	431a      	orrs	r2, r3
 80052d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052d4:	69db      	ldr	r3, [r3, #28]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80052dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80052e8:	f021 010c 	bic.w	r1, r1, #12
 80052ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80052f6:	430b      	orrs	r3, r1
 80052f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	695b      	ldr	r3, [r3, #20]
 8005302:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800530a:	6999      	ldr	r1, [r3, #24]
 800530c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	ea40 0301 	orr.w	r3, r0, r1
 8005316:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	4b8f      	ldr	r3, [pc, #572]	@ (800555c <UART_SetConfig+0x2cc>)
 8005320:	429a      	cmp	r2, r3
 8005322:	d005      	beq.n	8005330 <UART_SetConfig+0xa0>
 8005324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	4b8d      	ldr	r3, [pc, #564]	@ (8005560 <UART_SetConfig+0x2d0>)
 800532c:	429a      	cmp	r2, r3
 800532e:	d104      	bne.n	800533a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005330:	f7fe fc5c 	bl	8003bec <HAL_RCC_GetPCLK2Freq>
 8005334:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005338:	e003      	b.n	8005342 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800533a:	f7fe fc43 	bl	8003bc4 <HAL_RCC_GetPCLK1Freq>
 800533e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005346:	69db      	ldr	r3, [r3, #28]
 8005348:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800534c:	f040 810c 	bne.w	8005568 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005350:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005354:	2200      	movs	r2, #0
 8005356:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800535a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800535e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005362:	4622      	mov	r2, r4
 8005364:	462b      	mov	r3, r5
 8005366:	1891      	adds	r1, r2, r2
 8005368:	65b9      	str	r1, [r7, #88]	@ 0x58
 800536a:	415b      	adcs	r3, r3
 800536c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800536e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005372:	4621      	mov	r1, r4
 8005374:	eb12 0801 	adds.w	r8, r2, r1
 8005378:	4629      	mov	r1, r5
 800537a:	eb43 0901 	adc.w	r9, r3, r1
 800537e:	f04f 0200 	mov.w	r2, #0
 8005382:	f04f 0300 	mov.w	r3, #0
 8005386:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800538a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800538e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005392:	4690      	mov	r8, r2
 8005394:	4699      	mov	r9, r3
 8005396:	4623      	mov	r3, r4
 8005398:	eb18 0303 	adds.w	r3, r8, r3
 800539c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80053a0:	462b      	mov	r3, r5
 80053a2:	eb49 0303 	adc.w	r3, r9, r3
 80053a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80053aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80053b6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80053ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80053be:	460b      	mov	r3, r1
 80053c0:	18db      	adds	r3, r3, r3
 80053c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80053c4:	4613      	mov	r3, r2
 80053c6:	eb42 0303 	adc.w	r3, r2, r3
 80053ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80053cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80053d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80053d4:	f7fb fc1a 	bl	8000c0c <__aeabi_uldivmod>
 80053d8:	4602      	mov	r2, r0
 80053da:	460b      	mov	r3, r1
 80053dc:	4b61      	ldr	r3, [pc, #388]	@ (8005564 <UART_SetConfig+0x2d4>)
 80053de:	fba3 2302 	umull	r2, r3, r3, r2
 80053e2:	095b      	lsrs	r3, r3, #5
 80053e4:	011c      	lsls	r4, r3, #4
 80053e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053ea:	2200      	movs	r2, #0
 80053ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80053f0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80053f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80053f8:	4642      	mov	r2, r8
 80053fa:	464b      	mov	r3, r9
 80053fc:	1891      	adds	r1, r2, r2
 80053fe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005400:	415b      	adcs	r3, r3
 8005402:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005404:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005408:	4641      	mov	r1, r8
 800540a:	eb12 0a01 	adds.w	sl, r2, r1
 800540e:	4649      	mov	r1, r9
 8005410:	eb43 0b01 	adc.w	fp, r3, r1
 8005414:	f04f 0200 	mov.w	r2, #0
 8005418:	f04f 0300 	mov.w	r3, #0
 800541c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005420:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005424:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005428:	4692      	mov	sl, r2
 800542a:	469b      	mov	fp, r3
 800542c:	4643      	mov	r3, r8
 800542e:	eb1a 0303 	adds.w	r3, sl, r3
 8005432:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005436:	464b      	mov	r3, r9
 8005438:	eb4b 0303 	adc.w	r3, fp, r3
 800543c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800544c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005450:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005454:	460b      	mov	r3, r1
 8005456:	18db      	adds	r3, r3, r3
 8005458:	643b      	str	r3, [r7, #64]	@ 0x40
 800545a:	4613      	mov	r3, r2
 800545c:	eb42 0303 	adc.w	r3, r2, r3
 8005460:	647b      	str	r3, [r7, #68]	@ 0x44
 8005462:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005466:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800546a:	f7fb fbcf 	bl	8000c0c <__aeabi_uldivmod>
 800546e:	4602      	mov	r2, r0
 8005470:	460b      	mov	r3, r1
 8005472:	4611      	mov	r1, r2
 8005474:	4b3b      	ldr	r3, [pc, #236]	@ (8005564 <UART_SetConfig+0x2d4>)
 8005476:	fba3 2301 	umull	r2, r3, r3, r1
 800547a:	095b      	lsrs	r3, r3, #5
 800547c:	2264      	movs	r2, #100	@ 0x64
 800547e:	fb02 f303 	mul.w	r3, r2, r3
 8005482:	1acb      	subs	r3, r1, r3
 8005484:	00db      	lsls	r3, r3, #3
 8005486:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800548a:	4b36      	ldr	r3, [pc, #216]	@ (8005564 <UART_SetConfig+0x2d4>)
 800548c:	fba3 2302 	umull	r2, r3, r3, r2
 8005490:	095b      	lsrs	r3, r3, #5
 8005492:	005b      	lsls	r3, r3, #1
 8005494:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005498:	441c      	add	r4, r3
 800549a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800549e:	2200      	movs	r2, #0
 80054a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80054a4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80054a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80054ac:	4642      	mov	r2, r8
 80054ae:	464b      	mov	r3, r9
 80054b0:	1891      	adds	r1, r2, r2
 80054b2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80054b4:	415b      	adcs	r3, r3
 80054b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80054bc:	4641      	mov	r1, r8
 80054be:	1851      	adds	r1, r2, r1
 80054c0:	6339      	str	r1, [r7, #48]	@ 0x30
 80054c2:	4649      	mov	r1, r9
 80054c4:	414b      	adcs	r3, r1
 80054c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80054c8:	f04f 0200 	mov.w	r2, #0
 80054cc:	f04f 0300 	mov.w	r3, #0
 80054d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80054d4:	4659      	mov	r1, fp
 80054d6:	00cb      	lsls	r3, r1, #3
 80054d8:	4651      	mov	r1, sl
 80054da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054de:	4651      	mov	r1, sl
 80054e0:	00ca      	lsls	r2, r1, #3
 80054e2:	4610      	mov	r0, r2
 80054e4:	4619      	mov	r1, r3
 80054e6:	4603      	mov	r3, r0
 80054e8:	4642      	mov	r2, r8
 80054ea:	189b      	adds	r3, r3, r2
 80054ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80054f0:	464b      	mov	r3, r9
 80054f2:	460a      	mov	r2, r1
 80054f4:	eb42 0303 	adc.w	r3, r2, r3
 80054f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80054fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005508:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800550c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005510:	460b      	mov	r3, r1
 8005512:	18db      	adds	r3, r3, r3
 8005514:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005516:	4613      	mov	r3, r2
 8005518:	eb42 0303 	adc.w	r3, r2, r3
 800551c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800551e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005522:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005526:	f7fb fb71 	bl	8000c0c <__aeabi_uldivmod>
 800552a:	4602      	mov	r2, r0
 800552c:	460b      	mov	r3, r1
 800552e:	4b0d      	ldr	r3, [pc, #52]	@ (8005564 <UART_SetConfig+0x2d4>)
 8005530:	fba3 1302 	umull	r1, r3, r3, r2
 8005534:	095b      	lsrs	r3, r3, #5
 8005536:	2164      	movs	r1, #100	@ 0x64
 8005538:	fb01 f303 	mul.w	r3, r1, r3
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	00db      	lsls	r3, r3, #3
 8005540:	3332      	adds	r3, #50	@ 0x32
 8005542:	4a08      	ldr	r2, [pc, #32]	@ (8005564 <UART_SetConfig+0x2d4>)
 8005544:	fba2 2303 	umull	r2, r3, r2, r3
 8005548:	095b      	lsrs	r3, r3, #5
 800554a:	f003 0207 	and.w	r2, r3, #7
 800554e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4422      	add	r2, r4
 8005556:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005558:	e106      	b.n	8005768 <UART_SetConfig+0x4d8>
 800555a:	bf00      	nop
 800555c:	40011000 	.word	0x40011000
 8005560:	40011400 	.word	0x40011400
 8005564:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005568:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800556c:	2200      	movs	r2, #0
 800556e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005572:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005576:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800557a:	4642      	mov	r2, r8
 800557c:	464b      	mov	r3, r9
 800557e:	1891      	adds	r1, r2, r2
 8005580:	6239      	str	r1, [r7, #32]
 8005582:	415b      	adcs	r3, r3
 8005584:	627b      	str	r3, [r7, #36]	@ 0x24
 8005586:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800558a:	4641      	mov	r1, r8
 800558c:	1854      	adds	r4, r2, r1
 800558e:	4649      	mov	r1, r9
 8005590:	eb43 0501 	adc.w	r5, r3, r1
 8005594:	f04f 0200 	mov.w	r2, #0
 8005598:	f04f 0300 	mov.w	r3, #0
 800559c:	00eb      	lsls	r3, r5, #3
 800559e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055a2:	00e2      	lsls	r2, r4, #3
 80055a4:	4614      	mov	r4, r2
 80055a6:	461d      	mov	r5, r3
 80055a8:	4643      	mov	r3, r8
 80055aa:	18e3      	adds	r3, r4, r3
 80055ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80055b0:	464b      	mov	r3, r9
 80055b2:	eb45 0303 	adc.w	r3, r5, r3
 80055b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80055ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80055c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80055ca:	f04f 0200 	mov.w	r2, #0
 80055ce:	f04f 0300 	mov.w	r3, #0
 80055d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80055d6:	4629      	mov	r1, r5
 80055d8:	008b      	lsls	r3, r1, #2
 80055da:	4621      	mov	r1, r4
 80055dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055e0:	4621      	mov	r1, r4
 80055e2:	008a      	lsls	r2, r1, #2
 80055e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80055e8:	f7fb fb10 	bl	8000c0c <__aeabi_uldivmod>
 80055ec:	4602      	mov	r2, r0
 80055ee:	460b      	mov	r3, r1
 80055f0:	4b60      	ldr	r3, [pc, #384]	@ (8005774 <UART_SetConfig+0x4e4>)
 80055f2:	fba3 2302 	umull	r2, r3, r3, r2
 80055f6:	095b      	lsrs	r3, r3, #5
 80055f8:	011c      	lsls	r4, r3, #4
 80055fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055fe:	2200      	movs	r2, #0
 8005600:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005604:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005608:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800560c:	4642      	mov	r2, r8
 800560e:	464b      	mov	r3, r9
 8005610:	1891      	adds	r1, r2, r2
 8005612:	61b9      	str	r1, [r7, #24]
 8005614:	415b      	adcs	r3, r3
 8005616:	61fb      	str	r3, [r7, #28]
 8005618:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800561c:	4641      	mov	r1, r8
 800561e:	1851      	adds	r1, r2, r1
 8005620:	6139      	str	r1, [r7, #16]
 8005622:	4649      	mov	r1, r9
 8005624:	414b      	adcs	r3, r1
 8005626:	617b      	str	r3, [r7, #20]
 8005628:	f04f 0200 	mov.w	r2, #0
 800562c:	f04f 0300 	mov.w	r3, #0
 8005630:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005634:	4659      	mov	r1, fp
 8005636:	00cb      	lsls	r3, r1, #3
 8005638:	4651      	mov	r1, sl
 800563a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800563e:	4651      	mov	r1, sl
 8005640:	00ca      	lsls	r2, r1, #3
 8005642:	4610      	mov	r0, r2
 8005644:	4619      	mov	r1, r3
 8005646:	4603      	mov	r3, r0
 8005648:	4642      	mov	r2, r8
 800564a:	189b      	adds	r3, r3, r2
 800564c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005650:	464b      	mov	r3, r9
 8005652:	460a      	mov	r2, r1
 8005654:	eb42 0303 	adc.w	r3, r2, r3
 8005658:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800565c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005666:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005668:	f04f 0200 	mov.w	r2, #0
 800566c:	f04f 0300 	mov.w	r3, #0
 8005670:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005674:	4649      	mov	r1, r9
 8005676:	008b      	lsls	r3, r1, #2
 8005678:	4641      	mov	r1, r8
 800567a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800567e:	4641      	mov	r1, r8
 8005680:	008a      	lsls	r2, r1, #2
 8005682:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005686:	f7fb fac1 	bl	8000c0c <__aeabi_uldivmod>
 800568a:	4602      	mov	r2, r0
 800568c:	460b      	mov	r3, r1
 800568e:	4611      	mov	r1, r2
 8005690:	4b38      	ldr	r3, [pc, #224]	@ (8005774 <UART_SetConfig+0x4e4>)
 8005692:	fba3 2301 	umull	r2, r3, r3, r1
 8005696:	095b      	lsrs	r3, r3, #5
 8005698:	2264      	movs	r2, #100	@ 0x64
 800569a:	fb02 f303 	mul.w	r3, r2, r3
 800569e:	1acb      	subs	r3, r1, r3
 80056a0:	011b      	lsls	r3, r3, #4
 80056a2:	3332      	adds	r3, #50	@ 0x32
 80056a4:	4a33      	ldr	r2, [pc, #204]	@ (8005774 <UART_SetConfig+0x4e4>)
 80056a6:	fba2 2303 	umull	r2, r3, r2, r3
 80056aa:	095b      	lsrs	r3, r3, #5
 80056ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80056b0:	441c      	add	r4, r3
 80056b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056b6:	2200      	movs	r2, #0
 80056b8:	673b      	str	r3, [r7, #112]	@ 0x70
 80056ba:	677a      	str	r2, [r7, #116]	@ 0x74
 80056bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80056c0:	4642      	mov	r2, r8
 80056c2:	464b      	mov	r3, r9
 80056c4:	1891      	adds	r1, r2, r2
 80056c6:	60b9      	str	r1, [r7, #8]
 80056c8:	415b      	adcs	r3, r3
 80056ca:	60fb      	str	r3, [r7, #12]
 80056cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056d0:	4641      	mov	r1, r8
 80056d2:	1851      	adds	r1, r2, r1
 80056d4:	6039      	str	r1, [r7, #0]
 80056d6:	4649      	mov	r1, r9
 80056d8:	414b      	adcs	r3, r1
 80056da:	607b      	str	r3, [r7, #4]
 80056dc:	f04f 0200 	mov.w	r2, #0
 80056e0:	f04f 0300 	mov.w	r3, #0
 80056e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80056e8:	4659      	mov	r1, fp
 80056ea:	00cb      	lsls	r3, r1, #3
 80056ec:	4651      	mov	r1, sl
 80056ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056f2:	4651      	mov	r1, sl
 80056f4:	00ca      	lsls	r2, r1, #3
 80056f6:	4610      	mov	r0, r2
 80056f8:	4619      	mov	r1, r3
 80056fa:	4603      	mov	r3, r0
 80056fc:	4642      	mov	r2, r8
 80056fe:	189b      	adds	r3, r3, r2
 8005700:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005702:	464b      	mov	r3, r9
 8005704:	460a      	mov	r2, r1
 8005706:	eb42 0303 	adc.w	r3, r2, r3
 800570a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800570c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	663b      	str	r3, [r7, #96]	@ 0x60
 8005716:	667a      	str	r2, [r7, #100]	@ 0x64
 8005718:	f04f 0200 	mov.w	r2, #0
 800571c:	f04f 0300 	mov.w	r3, #0
 8005720:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005724:	4649      	mov	r1, r9
 8005726:	008b      	lsls	r3, r1, #2
 8005728:	4641      	mov	r1, r8
 800572a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800572e:	4641      	mov	r1, r8
 8005730:	008a      	lsls	r2, r1, #2
 8005732:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005736:	f7fb fa69 	bl	8000c0c <__aeabi_uldivmod>
 800573a:	4602      	mov	r2, r0
 800573c:	460b      	mov	r3, r1
 800573e:	4b0d      	ldr	r3, [pc, #52]	@ (8005774 <UART_SetConfig+0x4e4>)
 8005740:	fba3 1302 	umull	r1, r3, r3, r2
 8005744:	095b      	lsrs	r3, r3, #5
 8005746:	2164      	movs	r1, #100	@ 0x64
 8005748:	fb01 f303 	mul.w	r3, r1, r3
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	011b      	lsls	r3, r3, #4
 8005750:	3332      	adds	r3, #50	@ 0x32
 8005752:	4a08      	ldr	r2, [pc, #32]	@ (8005774 <UART_SetConfig+0x4e4>)
 8005754:	fba2 2303 	umull	r2, r3, r2, r3
 8005758:	095b      	lsrs	r3, r3, #5
 800575a:	f003 020f 	and.w	r2, r3, #15
 800575e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4422      	add	r2, r4
 8005766:	609a      	str	r2, [r3, #8]
}
 8005768:	bf00      	nop
 800576a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800576e:	46bd      	mov	sp, r7
 8005770:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005774:	51eb851f 	.word	0x51eb851f

08005778 <siprintf>:
 8005778:	b40e      	push	{r1, r2, r3}
 800577a:	b500      	push	{lr}
 800577c:	b09c      	sub	sp, #112	@ 0x70
 800577e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005780:	9002      	str	r0, [sp, #8]
 8005782:	9006      	str	r0, [sp, #24]
 8005784:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005788:	4809      	ldr	r0, [pc, #36]	@ (80057b0 <siprintf+0x38>)
 800578a:	9107      	str	r1, [sp, #28]
 800578c:	9104      	str	r1, [sp, #16]
 800578e:	4909      	ldr	r1, [pc, #36]	@ (80057b4 <siprintf+0x3c>)
 8005790:	f853 2b04 	ldr.w	r2, [r3], #4
 8005794:	9105      	str	r1, [sp, #20]
 8005796:	6800      	ldr	r0, [r0, #0]
 8005798:	9301      	str	r3, [sp, #4]
 800579a:	a902      	add	r1, sp, #8
 800579c:	f000 f9a8 	bl	8005af0 <_svfiprintf_r>
 80057a0:	9b02      	ldr	r3, [sp, #8]
 80057a2:	2200      	movs	r2, #0
 80057a4:	701a      	strb	r2, [r3, #0]
 80057a6:	b01c      	add	sp, #112	@ 0x70
 80057a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80057ac:	b003      	add	sp, #12
 80057ae:	4770      	bx	lr
 80057b0:	20000010 	.word	0x20000010
 80057b4:	ffff0208 	.word	0xffff0208

080057b8 <memset>:
 80057b8:	4402      	add	r2, r0
 80057ba:	4603      	mov	r3, r0
 80057bc:	4293      	cmp	r3, r2
 80057be:	d100      	bne.n	80057c2 <memset+0xa>
 80057c0:	4770      	bx	lr
 80057c2:	f803 1b01 	strb.w	r1, [r3], #1
 80057c6:	e7f9      	b.n	80057bc <memset+0x4>

080057c8 <strncpy>:
 80057c8:	b510      	push	{r4, lr}
 80057ca:	3901      	subs	r1, #1
 80057cc:	4603      	mov	r3, r0
 80057ce:	b132      	cbz	r2, 80057de <strncpy+0x16>
 80057d0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80057d4:	f803 4b01 	strb.w	r4, [r3], #1
 80057d8:	3a01      	subs	r2, #1
 80057da:	2c00      	cmp	r4, #0
 80057dc:	d1f7      	bne.n	80057ce <strncpy+0x6>
 80057de:	441a      	add	r2, r3
 80057e0:	2100      	movs	r1, #0
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d100      	bne.n	80057e8 <strncpy+0x20>
 80057e6:	bd10      	pop	{r4, pc}
 80057e8:	f803 1b01 	strb.w	r1, [r3], #1
 80057ec:	e7f9      	b.n	80057e2 <strncpy+0x1a>
	...

080057f0 <__errno>:
 80057f0:	4b01      	ldr	r3, [pc, #4]	@ (80057f8 <__errno+0x8>)
 80057f2:	6818      	ldr	r0, [r3, #0]
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	20000010 	.word	0x20000010

080057fc <__libc_init_array>:
 80057fc:	b570      	push	{r4, r5, r6, lr}
 80057fe:	4d0d      	ldr	r5, [pc, #52]	@ (8005834 <__libc_init_array+0x38>)
 8005800:	4c0d      	ldr	r4, [pc, #52]	@ (8005838 <__libc_init_array+0x3c>)
 8005802:	1b64      	subs	r4, r4, r5
 8005804:	10a4      	asrs	r4, r4, #2
 8005806:	2600      	movs	r6, #0
 8005808:	42a6      	cmp	r6, r4
 800580a:	d109      	bne.n	8005820 <__libc_init_array+0x24>
 800580c:	4d0b      	ldr	r5, [pc, #44]	@ (800583c <__libc_init_array+0x40>)
 800580e:	4c0c      	ldr	r4, [pc, #48]	@ (8005840 <__libc_init_array+0x44>)
 8005810:	f000 fed2 	bl	80065b8 <_init>
 8005814:	1b64      	subs	r4, r4, r5
 8005816:	10a4      	asrs	r4, r4, #2
 8005818:	2600      	movs	r6, #0
 800581a:	42a6      	cmp	r6, r4
 800581c:	d105      	bne.n	800582a <__libc_init_array+0x2e>
 800581e:	bd70      	pop	{r4, r5, r6, pc}
 8005820:	f855 3b04 	ldr.w	r3, [r5], #4
 8005824:	4798      	blx	r3
 8005826:	3601      	adds	r6, #1
 8005828:	e7ee      	b.n	8005808 <__libc_init_array+0xc>
 800582a:	f855 3b04 	ldr.w	r3, [r5], #4
 800582e:	4798      	blx	r3
 8005830:	3601      	adds	r6, #1
 8005832:	e7f2      	b.n	800581a <__libc_init_array+0x1e>
 8005834:	08006920 	.word	0x08006920
 8005838:	08006920 	.word	0x08006920
 800583c:	08006920 	.word	0x08006920
 8005840:	08006924 	.word	0x08006924

08005844 <__retarget_lock_acquire_recursive>:
 8005844:	4770      	bx	lr

08005846 <__retarget_lock_release_recursive>:
 8005846:	4770      	bx	lr

08005848 <_free_r>:
 8005848:	b538      	push	{r3, r4, r5, lr}
 800584a:	4605      	mov	r5, r0
 800584c:	2900      	cmp	r1, #0
 800584e:	d041      	beq.n	80058d4 <_free_r+0x8c>
 8005850:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005854:	1f0c      	subs	r4, r1, #4
 8005856:	2b00      	cmp	r3, #0
 8005858:	bfb8      	it	lt
 800585a:	18e4      	addlt	r4, r4, r3
 800585c:	f000 f8e0 	bl	8005a20 <__malloc_lock>
 8005860:	4a1d      	ldr	r2, [pc, #116]	@ (80058d8 <_free_r+0x90>)
 8005862:	6813      	ldr	r3, [r2, #0]
 8005864:	b933      	cbnz	r3, 8005874 <_free_r+0x2c>
 8005866:	6063      	str	r3, [r4, #4]
 8005868:	6014      	str	r4, [r2, #0]
 800586a:	4628      	mov	r0, r5
 800586c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005870:	f000 b8dc 	b.w	8005a2c <__malloc_unlock>
 8005874:	42a3      	cmp	r3, r4
 8005876:	d908      	bls.n	800588a <_free_r+0x42>
 8005878:	6820      	ldr	r0, [r4, #0]
 800587a:	1821      	adds	r1, r4, r0
 800587c:	428b      	cmp	r3, r1
 800587e:	bf01      	itttt	eq
 8005880:	6819      	ldreq	r1, [r3, #0]
 8005882:	685b      	ldreq	r3, [r3, #4]
 8005884:	1809      	addeq	r1, r1, r0
 8005886:	6021      	streq	r1, [r4, #0]
 8005888:	e7ed      	b.n	8005866 <_free_r+0x1e>
 800588a:	461a      	mov	r2, r3
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	b10b      	cbz	r3, 8005894 <_free_r+0x4c>
 8005890:	42a3      	cmp	r3, r4
 8005892:	d9fa      	bls.n	800588a <_free_r+0x42>
 8005894:	6811      	ldr	r1, [r2, #0]
 8005896:	1850      	adds	r0, r2, r1
 8005898:	42a0      	cmp	r0, r4
 800589a:	d10b      	bne.n	80058b4 <_free_r+0x6c>
 800589c:	6820      	ldr	r0, [r4, #0]
 800589e:	4401      	add	r1, r0
 80058a0:	1850      	adds	r0, r2, r1
 80058a2:	4283      	cmp	r3, r0
 80058a4:	6011      	str	r1, [r2, #0]
 80058a6:	d1e0      	bne.n	800586a <_free_r+0x22>
 80058a8:	6818      	ldr	r0, [r3, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	6053      	str	r3, [r2, #4]
 80058ae:	4408      	add	r0, r1
 80058b0:	6010      	str	r0, [r2, #0]
 80058b2:	e7da      	b.n	800586a <_free_r+0x22>
 80058b4:	d902      	bls.n	80058bc <_free_r+0x74>
 80058b6:	230c      	movs	r3, #12
 80058b8:	602b      	str	r3, [r5, #0]
 80058ba:	e7d6      	b.n	800586a <_free_r+0x22>
 80058bc:	6820      	ldr	r0, [r4, #0]
 80058be:	1821      	adds	r1, r4, r0
 80058c0:	428b      	cmp	r3, r1
 80058c2:	bf04      	itt	eq
 80058c4:	6819      	ldreq	r1, [r3, #0]
 80058c6:	685b      	ldreq	r3, [r3, #4]
 80058c8:	6063      	str	r3, [r4, #4]
 80058ca:	bf04      	itt	eq
 80058cc:	1809      	addeq	r1, r1, r0
 80058ce:	6021      	streq	r1, [r4, #0]
 80058d0:	6054      	str	r4, [r2, #4]
 80058d2:	e7ca      	b.n	800586a <_free_r+0x22>
 80058d4:	bd38      	pop	{r3, r4, r5, pc}
 80058d6:	bf00      	nop
 80058d8:	20000bc8 	.word	0x20000bc8

080058dc <sbrk_aligned>:
 80058dc:	b570      	push	{r4, r5, r6, lr}
 80058de:	4e0f      	ldr	r6, [pc, #60]	@ (800591c <sbrk_aligned+0x40>)
 80058e0:	460c      	mov	r4, r1
 80058e2:	6831      	ldr	r1, [r6, #0]
 80058e4:	4605      	mov	r5, r0
 80058e6:	b911      	cbnz	r1, 80058ee <sbrk_aligned+0x12>
 80058e8:	f000 fba6 	bl	8006038 <_sbrk_r>
 80058ec:	6030      	str	r0, [r6, #0]
 80058ee:	4621      	mov	r1, r4
 80058f0:	4628      	mov	r0, r5
 80058f2:	f000 fba1 	bl	8006038 <_sbrk_r>
 80058f6:	1c43      	adds	r3, r0, #1
 80058f8:	d103      	bne.n	8005902 <sbrk_aligned+0x26>
 80058fa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80058fe:	4620      	mov	r0, r4
 8005900:	bd70      	pop	{r4, r5, r6, pc}
 8005902:	1cc4      	adds	r4, r0, #3
 8005904:	f024 0403 	bic.w	r4, r4, #3
 8005908:	42a0      	cmp	r0, r4
 800590a:	d0f8      	beq.n	80058fe <sbrk_aligned+0x22>
 800590c:	1a21      	subs	r1, r4, r0
 800590e:	4628      	mov	r0, r5
 8005910:	f000 fb92 	bl	8006038 <_sbrk_r>
 8005914:	3001      	adds	r0, #1
 8005916:	d1f2      	bne.n	80058fe <sbrk_aligned+0x22>
 8005918:	e7ef      	b.n	80058fa <sbrk_aligned+0x1e>
 800591a:	bf00      	nop
 800591c:	20000bc4 	.word	0x20000bc4

08005920 <_malloc_r>:
 8005920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005924:	1ccd      	adds	r5, r1, #3
 8005926:	f025 0503 	bic.w	r5, r5, #3
 800592a:	3508      	adds	r5, #8
 800592c:	2d0c      	cmp	r5, #12
 800592e:	bf38      	it	cc
 8005930:	250c      	movcc	r5, #12
 8005932:	2d00      	cmp	r5, #0
 8005934:	4606      	mov	r6, r0
 8005936:	db01      	blt.n	800593c <_malloc_r+0x1c>
 8005938:	42a9      	cmp	r1, r5
 800593a:	d904      	bls.n	8005946 <_malloc_r+0x26>
 800593c:	230c      	movs	r3, #12
 800593e:	6033      	str	r3, [r6, #0]
 8005940:	2000      	movs	r0, #0
 8005942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005946:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005a1c <_malloc_r+0xfc>
 800594a:	f000 f869 	bl	8005a20 <__malloc_lock>
 800594e:	f8d8 3000 	ldr.w	r3, [r8]
 8005952:	461c      	mov	r4, r3
 8005954:	bb44      	cbnz	r4, 80059a8 <_malloc_r+0x88>
 8005956:	4629      	mov	r1, r5
 8005958:	4630      	mov	r0, r6
 800595a:	f7ff ffbf 	bl	80058dc <sbrk_aligned>
 800595e:	1c43      	adds	r3, r0, #1
 8005960:	4604      	mov	r4, r0
 8005962:	d158      	bne.n	8005a16 <_malloc_r+0xf6>
 8005964:	f8d8 4000 	ldr.w	r4, [r8]
 8005968:	4627      	mov	r7, r4
 800596a:	2f00      	cmp	r7, #0
 800596c:	d143      	bne.n	80059f6 <_malloc_r+0xd6>
 800596e:	2c00      	cmp	r4, #0
 8005970:	d04b      	beq.n	8005a0a <_malloc_r+0xea>
 8005972:	6823      	ldr	r3, [r4, #0]
 8005974:	4639      	mov	r1, r7
 8005976:	4630      	mov	r0, r6
 8005978:	eb04 0903 	add.w	r9, r4, r3
 800597c:	f000 fb5c 	bl	8006038 <_sbrk_r>
 8005980:	4581      	cmp	r9, r0
 8005982:	d142      	bne.n	8005a0a <_malloc_r+0xea>
 8005984:	6821      	ldr	r1, [r4, #0]
 8005986:	1a6d      	subs	r5, r5, r1
 8005988:	4629      	mov	r1, r5
 800598a:	4630      	mov	r0, r6
 800598c:	f7ff ffa6 	bl	80058dc <sbrk_aligned>
 8005990:	3001      	adds	r0, #1
 8005992:	d03a      	beq.n	8005a0a <_malloc_r+0xea>
 8005994:	6823      	ldr	r3, [r4, #0]
 8005996:	442b      	add	r3, r5
 8005998:	6023      	str	r3, [r4, #0]
 800599a:	f8d8 3000 	ldr.w	r3, [r8]
 800599e:	685a      	ldr	r2, [r3, #4]
 80059a0:	bb62      	cbnz	r2, 80059fc <_malloc_r+0xdc>
 80059a2:	f8c8 7000 	str.w	r7, [r8]
 80059a6:	e00f      	b.n	80059c8 <_malloc_r+0xa8>
 80059a8:	6822      	ldr	r2, [r4, #0]
 80059aa:	1b52      	subs	r2, r2, r5
 80059ac:	d420      	bmi.n	80059f0 <_malloc_r+0xd0>
 80059ae:	2a0b      	cmp	r2, #11
 80059b0:	d917      	bls.n	80059e2 <_malloc_r+0xc2>
 80059b2:	1961      	adds	r1, r4, r5
 80059b4:	42a3      	cmp	r3, r4
 80059b6:	6025      	str	r5, [r4, #0]
 80059b8:	bf18      	it	ne
 80059ba:	6059      	strne	r1, [r3, #4]
 80059bc:	6863      	ldr	r3, [r4, #4]
 80059be:	bf08      	it	eq
 80059c0:	f8c8 1000 	streq.w	r1, [r8]
 80059c4:	5162      	str	r2, [r4, r5]
 80059c6:	604b      	str	r3, [r1, #4]
 80059c8:	4630      	mov	r0, r6
 80059ca:	f000 f82f 	bl	8005a2c <__malloc_unlock>
 80059ce:	f104 000b 	add.w	r0, r4, #11
 80059d2:	1d23      	adds	r3, r4, #4
 80059d4:	f020 0007 	bic.w	r0, r0, #7
 80059d8:	1ac2      	subs	r2, r0, r3
 80059da:	bf1c      	itt	ne
 80059dc:	1a1b      	subne	r3, r3, r0
 80059de:	50a3      	strne	r3, [r4, r2]
 80059e0:	e7af      	b.n	8005942 <_malloc_r+0x22>
 80059e2:	6862      	ldr	r2, [r4, #4]
 80059e4:	42a3      	cmp	r3, r4
 80059e6:	bf0c      	ite	eq
 80059e8:	f8c8 2000 	streq.w	r2, [r8]
 80059ec:	605a      	strne	r2, [r3, #4]
 80059ee:	e7eb      	b.n	80059c8 <_malloc_r+0xa8>
 80059f0:	4623      	mov	r3, r4
 80059f2:	6864      	ldr	r4, [r4, #4]
 80059f4:	e7ae      	b.n	8005954 <_malloc_r+0x34>
 80059f6:	463c      	mov	r4, r7
 80059f8:	687f      	ldr	r7, [r7, #4]
 80059fa:	e7b6      	b.n	800596a <_malloc_r+0x4a>
 80059fc:	461a      	mov	r2, r3
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	42a3      	cmp	r3, r4
 8005a02:	d1fb      	bne.n	80059fc <_malloc_r+0xdc>
 8005a04:	2300      	movs	r3, #0
 8005a06:	6053      	str	r3, [r2, #4]
 8005a08:	e7de      	b.n	80059c8 <_malloc_r+0xa8>
 8005a0a:	230c      	movs	r3, #12
 8005a0c:	6033      	str	r3, [r6, #0]
 8005a0e:	4630      	mov	r0, r6
 8005a10:	f000 f80c 	bl	8005a2c <__malloc_unlock>
 8005a14:	e794      	b.n	8005940 <_malloc_r+0x20>
 8005a16:	6005      	str	r5, [r0, #0]
 8005a18:	e7d6      	b.n	80059c8 <_malloc_r+0xa8>
 8005a1a:	bf00      	nop
 8005a1c:	20000bc8 	.word	0x20000bc8

08005a20 <__malloc_lock>:
 8005a20:	4801      	ldr	r0, [pc, #4]	@ (8005a28 <__malloc_lock+0x8>)
 8005a22:	f7ff bf0f 	b.w	8005844 <__retarget_lock_acquire_recursive>
 8005a26:	bf00      	nop
 8005a28:	20000bc0 	.word	0x20000bc0

08005a2c <__malloc_unlock>:
 8005a2c:	4801      	ldr	r0, [pc, #4]	@ (8005a34 <__malloc_unlock+0x8>)
 8005a2e:	f7ff bf0a 	b.w	8005846 <__retarget_lock_release_recursive>
 8005a32:	bf00      	nop
 8005a34:	20000bc0 	.word	0x20000bc0

08005a38 <__ssputs_r>:
 8005a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a3c:	688e      	ldr	r6, [r1, #8]
 8005a3e:	461f      	mov	r7, r3
 8005a40:	42be      	cmp	r6, r7
 8005a42:	680b      	ldr	r3, [r1, #0]
 8005a44:	4682      	mov	sl, r0
 8005a46:	460c      	mov	r4, r1
 8005a48:	4690      	mov	r8, r2
 8005a4a:	d82d      	bhi.n	8005aa8 <__ssputs_r+0x70>
 8005a4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005a50:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005a54:	d026      	beq.n	8005aa4 <__ssputs_r+0x6c>
 8005a56:	6965      	ldr	r5, [r4, #20]
 8005a58:	6909      	ldr	r1, [r1, #16]
 8005a5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a5e:	eba3 0901 	sub.w	r9, r3, r1
 8005a62:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a66:	1c7b      	adds	r3, r7, #1
 8005a68:	444b      	add	r3, r9
 8005a6a:	106d      	asrs	r5, r5, #1
 8005a6c:	429d      	cmp	r5, r3
 8005a6e:	bf38      	it	cc
 8005a70:	461d      	movcc	r5, r3
 8005a72:	0553      	lsls	r3, r2, #21
 8005a74:	d527      	bpl.n	8005ac6 <__ssputs_r+0x8e>
 8005a76:	4629      	mov	r1, r5
 8005a78:	f7ff ff52 	bl	8005920 <_malloc_r>
 8005a7c:	4606      	mov	r6, r0
 8005a7e:	b360      	cbz	r0, 8005ada <__ssputs_r+0xa2>
 8005a80:	6921      	ldr	r1, [r4, #16]
 8005a82:	464a      	mov	r2, r9
 8005a84:	f000 fae8 	bl	8006058 <memcpy>
 8005a88:	89a3      	ldrh	r3, [r4, #12]
 8005a8a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005a8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a92:	81a3      	strh	r3, [r4, #12]
 8005a94:	6126      	str	r6, [r4, #16]
 8005a96:	6165      	str	r5, [r4, #20]
 8005a98:	444e      	add	r6, r9
 8005a9a:	eba5 0509 	sub.w	r5, r5, r9
 8005a9e:	6026      	str	r6, [r4, #0]
 8005aa0:	60a5      	str	r5, [r4, #8]
 8005aa2:	463e      	mov	r6, r7
 8005aa4:	42be      	cmp	r6, r7
 8005aa6:	d900      	bls.n	8005aaa <__ssputs_r+0x72>
 8005aa8:	463e      	mov	r6, r7
 8005aaa:	6820      	ldr	r0, [r4, #0]
 8005aac:	4632      	mov	r2, r6
 8005aae:	4641      	mov	r1, r8
 8005ab0:	f000 faa8 	bl	8006004 <memmove>
 8005ab4:	68a3      	ldr	r3, [r4, #8]
 8005ab6:	1b9b      	subs	r3, r3, r6
 8005ab8:	60a3      	str	r3, [r4, #8]
 8005aba:	6823      	ldr	r3, [r4, #0]
 8005abc:	4433      	add	r3, r6
 8005abe:	6023      	str	r3, [r4, #0]
 8005ac0:	2000      	movs	r0, #0
 8005ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ac6:	462a      	mov	r2, r5
 8005ac8:	f000 fad4 	bl	8006074 <_realloc_r>
 8005acc:	4606      	mov	r6, r0
 8005ace:	2800      	cmp	r0, #0
 8005ad0:	d1e0      	bne.n	8005a94 <__ssputs_r+0x5c>
 8005ad2:	6921      	ldr	r1, [r4, #16]
 8005ad4:	4650      	mov	r0, sl
 8005ad6:	f7ff feb7 	bl	8005848 <_free_r>
 8005ada:	230c      	movs	r3, #12
 8005adc:	f8ca 3000 	str.w	r3, [sl]
 8005ae0:	89a3      	ldrh	r3, [r4, #12]
 8005ae2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ae6:	81a3      	strh	r3, [r4, #12]
 8005ae8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005aec:	e7e9      	b.n	8005ac2 <__ssputs_r+0x8a>
	...

08005af0 <_svfiprintf_r>:
 8005af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005af4:	4698      	mov	r8, r3
 8005af6:	898b      	ldrh	r3, [r1, #12]
 8005af8:	061b      	lsls	r3, r3, #24
 8005afa:	b09d      	sub	sp, #116	@ 0x74
 8005afc:	4607      	mov	r7, r0
 8005afe:	460d      	mov	r5, r1
 8005b00:	4614      	mov	r4, r2
 8005b02:	d510      	bpl.n	8005b26 <_svfiprintf_r+0x36>
 8005b04:	690b      	ldr	r3, [r1, #16]
 8005b06:	b973      	cbnz	r3, 8005b26 <_svfiprintf_r+0x36>
 8005b08:	2140      	movs	r1, #64	@ 0x40
 8005b0a:	f7ff ff09 	bl	8005920 <_malloc_r>
 8005b0e:	6028      	str	r0, [r5, #0]
 8005b10:	6128      	str	r0, [r5, #16]
 8005b12:	b930      	cbnz	r0, 8005b22 <_svfiprintf_r+0x32>
 8005b14:	230c      	movs	r3, #12
 8005b16:	603b      	str	r3, [r7, #0]
 8005b18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005b1c:	b01d      	add	sp, #116	@ 0x74
 8005b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b22:	2340      	movs	r3, #64	@ 0x40
 8005b24:	616b      	str	r3, [r5, #20]
 8005b26:	2300      	movs	r3, #0
 8005b28:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b2a:	2320      	movs	r3, #32
 8005b2c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005b30:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b34:	2330      	movs	r3, #48	@ 0x30
 8005b36:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005cd4 <_svfiprintf_r+0x1e4>
 8005b3a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005b3e:	f04f 0901 	mov.w	r9, #1
 8005b42:	4623      	mov	r3, r4
 8005b44:	469a      	mov	sl, r3
 8005b46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b4a:	b10a      	cbz	r2, 8005b50 <_svfiprintf_r+0x60>
 8005b4c:	2a25      	cmp	r2, #37	@ 0x25
 8005b4e:	d1f9      	bne.n	8005b44 <_svfiprintf_r+0x54>
 8005b50:	ebba 0b04 	subs.w	fp, sl, r4
 8005b54:	d00b      	beq.n	8005b6e <_svfiprintf_r+0x7e>
 8005b56:	465b      	mov	r3, fp
 8005b58:	4622      	mov	r2, r4
 8005b5a:	4629      	mov	r1, r5
 8005b5c:	4638      	mov	r0, r7
 8005b5e:	f7ff ff6b 	bl	8005a38 <__ssputs_r>
 8005b62:	3001      	adds	r0, #1
 8005b64:	f000 80a7 	beq.w	8005cb6 <_svfiprintf_r+0x1c6>
 8005b68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b6a:	445a      	add	r2, fp
 8005b6c:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b6e:	f89a 3000 	ldrb.w	r3, [sl]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	f000 809f 	beq.w	8005cb6 <_svfiprintf_r+0x1c6>
 8005b78:	2300      	movs	r3, #0
 8005b7a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005b7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b82:	f10a 0a01 	add.w	sl, sl, #1
 8005b86:	9304      	str	r3, [sp, #16]
 8005b88:	9307      	str	r3, [sp, #28]
 8005b8a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005b8e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005b90:	4654      	mov	r4, sl
 8005b92:	2205      	movs	r2, #5
 8005b94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b98:	484e      	ldr	r0, [pc, #312]	@ (8005cd4 <_svfiprintf_r+0x1e4>)
 8005b9a:	f7fa fb41 	bl	8000220 <memchr>
 8005b9e:	9a04      	ldr	r2, [sp, #16]
 8005ba0:	b9d8      	cbnz	r0, 8005bda <_svfiprintf_r+0xea>
 8005ba2:	06d0      	lsls	r0, r2, #27
 8005ba4:	bf44      	itt	mi
 8005ba6:	2320      	movmi	r3, #32
 8005ba8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005bac:	0711      	lsls	r1, r2, #28
 8005bae:	bf44      	itt	mi
 8005bb0:	232b      	movmi	r3, #43	@ 0x2b
 8005bb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005bb6:	f89a 3000 	ldrb.w	r3, [sl]
 8005bba:	2b2a      	cmp	r3, #42	@ 0x2a
 8005bbc:	d015      	beq.n	8005bea <_svfiprintf_r+0xfa>
 8005bbe:	9a07      	ldr	r2, [sp, #28]
 8005bc0:	4654      	mov	r4, sl
 8005bc2:	2000      	movs	r0, #0
 8005bc4:	f04f 0c0a 	mov.w	ip, #10
 8005bc8:	4621      	mov	r1, r4
 8005bca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005bce:	3b30      	subs	r3, #48	@ 0x30
 8005bd0:	2b09      	cmp	r3, #9
 8005bd2:	d94b      	bls.n	8005c6c <_svfiprintf_r+0x17c>
 8005bd4:	b1b0      	cbz	r0, 8005c04 <_svfiprintf_r+0x114>
 8005bd6:	9207      	str	r2, [sp, #28]
 8005bd8:	e014      	b.n	8005c04 <_svfiprintf_r+0x114>
 8005bda:	eba0 0308 	sub.w	r3, r0, r8
 8005bde:	fa09 f303 	lsl.w	r3, r9, r3
 8005be2:	4313      	orrs	r3, r2
 8005be4:	9304      	str	r3, [sp, #16]
 8005be6:	46a2      	mov	sl, r4
 8005be8:	e7d2      	b.n	8005b90 <_svfiprintf_r+0xa0>
 8005bea:	9b03      	ldr	r3, [sp, #12]
 8005bec:	1d19      	adds	r1, r3, #4
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	9103      	str	r1, [sp, #12]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	bfbb      	ittet	lt
 8005bf6:	425b      	neglt	r3, r3
 8005bf8:	f042 0202 	orrlt.w	r2, r2, #2
 8005bfc:	9307      	strge	r3, [sp, #28]
 8005bfe:	9307      	strlt	r3, [sp, #28]
 8005c00:	bfb8      	it	lt
 8005c02:	9204      	strlt	r2, [sp, #16]
 8005c04:	7823      	ldrb	r3, [r4, #0]
 8005c06:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c08:	d10a      	bne.n	8005c20 <_svfiprintf_r+0x130>
 8005c0a:	7863      	ldrb	r3, [r4, #1]
 8005c0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c0e:	d132      	bne.n	8005c76 <_svfiprintf_r+0x186>
 8005c10:	9b03      	ldr	r3, [sp, #12]
 8005c12:	1d1a      	adds	r2, r3, #4
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	9203      	str	r2, [sp, #12]
 8005c18:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005c1c:	3402      	adds	r4, #2
 8005c1e:	9305      	str	r3, [sp, #20]
 8005c20:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005ce4 <_svfiprintf_r+0x1f4>
 8005c24:	7821      	ldrb	r1, [r4, #0]
 8005c26:	2203      	movs	r2, #3
 8005c28:	4650      	mov	r0, sl
 8005c2a:	f7fa faf9 	bl	8000220 <memchr>
 8005c2e:	b138      	cbz	r0, 8005c40 <_svfiprintf_r+0x150>
 8005c30:	9b04      	ldr	r3, [sp, #16]
 8005c32:	eba0 000a 	sub.w	r0, r0, sl
 8005c36:	2240      	movs	r2, #64	@ 0x40
 8005c38:	4082      	lsls	r2, r0
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	3401      	adds	r4, #1
 8005c3e:	9304      	str	r3, [sp, #16]
 8005c40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c44:	4824      	ldr	r0, [pc, #144]	@ (8005cd8 <_svfiprintf_r+0x1e8>)
 8005c46:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005c4a:	2206      	movs	r2, #6
 8005c4c:	f7fa fae8 	bl	8000220 <memchr>
 8005c50:	2800      	cmp	r0, #0
 8005c52:	d036      	beq.n	8005cc2 <_svfiprintf_r+0x1d2>
 8005c54:	4b21      	ldr	r3, [pc, #132]	@ (8005cdc <_svfiprintf_r+0x1ec>)
 8005c56:	bb1b      	cbnz	r3, 8005ca0 <_svfiprintf_r+0x1b0>
 8005c58:	9b03      	ldr	r3, [sp, #12]
 8005c5a:	3307      	adds	r3, #7
 8005c5c:	f023 0307 	bic.w	r3, r3, #7
 8005c60:	3308      	adds	r3, #8
 8005c62:	9303      	str	r3, [sp, #12]
 8005c64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c66:	4433      	add	r3, r6
 8005c68:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c6a:	e76a      	b.n	8005b42 <_svfiprintf_r+0x52>
 8005c6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c70:	460c      	mov	r4, r1
 8005c72:	2001      	movs	r0, #1
 8005c74:	e7a8      	b.n	8005bc8 <_svfiprintf_r+0xd8>
 8005c76:	2300      	movs	r3, #0
 8005c78:	3401      	adds	r4, #1
 8005c7a:	9305      	str	r3, [sp, #20]
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	f04f 0c0a 	mov.w	ip, #10
 8005c82:	4620      	mov	r0, r4
 8005c84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c88:	3a30      	subs	r2, #48	@ 0x30
 8005c8a:	2a09      	cmp	r2, #9
 8005c8c:	d903      	bls.n	8005c96 <_svfiprintf_r+0x1a6>
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d0c6      	beq.n	8005c20 <_svfiprintf_r+0x130>
 8005c92:	9105      	str	r1, [sp, #20]
 8005c94:	e7c4      	b.n	8005c20 <_svfiprintf_r+0x130>
 8005c96:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c9a:	4604      	mov	r4, r0
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e7f0      	b.n	8005c82 <_svfiprintf_r+0x192>
 8005ca0:	ab03      	add	r3, sp, #12
 8005ca2:	9300      	str	r3, [sp, #0]
 8005ca4:	462a      	mov	r2, r5
 8005ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8005ce0 <_svfiprintf_r+0x1f0>)
 8005ca8:	a904      	add	r1, sp, #16
 8005caa:	4638      	mov	r0, r7
 8005cac:	f3af 8000 	nop.w
 8005cb0:	1c42      	adds	r2, r0, #1
 8005cb2:	4606      	mov	r6, r0
 8005cb4:	d1d6      	bne.n	8005c64 <_svfiprintf_r+0x174>
 8005cb6:	89ab      	ldrh	r3, [r5, #12]
 8005cb8:	065b      	lsls	r3, r3, #25
 8005cba:	f53f af2d 	bmi.w	8005b18 <_svfiprintf_r+0x28>
 8005cbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005cc0:	e72c      	b.n	8005b1c <_svfiprintf_r+0x2c>
 8005cc2:	ab03      	add	r3, sp, #12
 8005cc4:	9300      	str	r3, [sp, #0]
 8005cc6:	462a      	mov	r2, r5
 8005cc8:	4b05      	ldr	r3, [pc, #20]	@ (8005ce0 <_svfiprintf_r+0x1f0>)
 8005cca:	a904      	add	r1, sp, #16
 8005ccc:	4638      	mov	r0, r7
 8005cce:	f000 f879 	bl	8005dc4 <_printf_i>
 8005cd2:	e7ed      	b.n	8005cb0 <_svfiprintf_r+0x1c0>
 8005cd4:	08006870 	.word	0x08006870
 8005cd8:	0800687a 	.word	0x0800687a
 8005cdc:	00000000 	.word	0x00000000
 8005ce0:	08005a39 	.word	0x08005a39
 8005ce4:	08006876 	.word	0x08006876

08005ce8 <_printf_common>:
 8005ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cec:	4616      	mov	r6, r2
 8005cee:	4698      	mov	r8, r3
 8005cf0:	688a      	ldr	r2, [r1, #8]
 8005cf2:	690b      	ldr	r3, [r1, #16]
 8005cf4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	bfb8      	it	lt
 8005cfc:	4613      	movlt	r3, r2
 8005cfe:	6033      	str	r3, [r6, #0]
 8005d00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005d04:	4607      	mov	r7, r0
 8005d06:	460c      	mov	r4, r1
 8005d08:	b10a      	cbz	r2, 8005d0e <_printf_common+0x26>
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	6033      	str	r3, [r6, #0]
 8005d0e:	6823      	ldr	r3, [r4, #0]
 8005d10:	0699      	lsls	r1, r3, #26
 8005d12:	bf42      	ittt	mi
 8005d14:	6833      	ldrmi	r3, [r6, #0]
 8005d16:	3302      	addmi	r3, #2
 8005d18:	6033      	strmi	r3, [r6, #0]
 8005d1a:	6825      	ldr	r5, [r4, #0]
 8005d1c:	f015 0506 	ands.w	r5, r5, #6
 8005d20:	d106      	bne.n	8005d30 <_printf_common+0x48>
 8005d22:	f104 0a19 	add.w	sl, r4, #25
 8005d26:	68e3      	ldr	r3, [r4, #12]
 8005d28:	6832      	ldr	r2, [r6, #0]
 8005d2a:	1a9b      	subs	r3, r3, r2
 8005d2c:	42ab      	cmp	r3, r5
 8005d2e:	dc26      	bgt.n	8005d7e <_printf_common+0x96>
 8005d30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005d34:	6822      	ldr	r2, [r4, #0]
 8005d36:	3b00      	subs	r3, #0
 8005d38:	bf18      	it	ne
 8005d3a:	2301      	movne	r3, #1
 8005d3c:	0692      	lsls	r2, r2, #26
 8005d3e:	d42b      	bmi.n	8005d98 <_printf_common+0xb0>
 8005d40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005d44:	4641      	mov	r1, r8
 8005d46:	4638      	mov	r0, r7
 8005d48:	47c8      	blx	r9
 8005d4a:	3001      	adds	r0, #1
 8005d4c:	d01e      	beq.n	8005d8c <_printf_common+0xa4>
 8005d4e:	6823      	ldr	r3, [r4, #0]
 8005d50:	6922      	ldr	r2, [r4, #16]
 8005d52:	f003 0306 	and.w	r3, r3, #6
 8005d56:	2b04      	cmp	r3, #4
 8005d58:	bf02      	ittt	eq
 8005d5a:	68e5      	ldreq	r5, [r4, #12]
 8005d5c:	6833      	ldreq	r3, [r6, #0]
 8005d5e:	1aed      	subeq	r5, r5, r3
 8005d60:	68a3      	ldr	r3, [r4, #8]
 8005d62:	bf0c      	ite	eq
 8005d64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d68:	2500      	movne	r5, #0
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	bfc4      	itt	gt
 8005d6e:	1a9b      	subgt	r3, r3, r2
 8005d70:	18ed      	addgt	r5, r5, r3
 8005d72:	2600      	movs	r6, #0
 8005d74:	341a      	adds	r4, #26
 8005d76:	42b5      	cmp	r5, r6
 8005d78:	d11a      	bne.n	8005db0 <_printf_common+0xc8>
 8005d7a:	2000      	movs	r0, #0
 8005d7c:	e008      	b.n	8005d90 <_printf_common+0xa8>
 8005d7e:	2301      	movs	r3, #1
 8005d80:	4652      	mov	r2, sl
 8005d82:	4641      	mov	r1, r8
 8005d84:	4638      	mov	r0, r7
 8005d86:	47c8      	blx	r9
 8005d88:	3001      	adds	r0, #1
 8005d8a:	d103      	bne.n	8005d94 <_printf_common+0xac>
 8005d8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d94:	3501      	adds	r5, #1
 8005d96:	e7c6      	b.n	8005d26 <_printf_common+0x3e>
 8005d98:	18e1      	adds	r1, r4, r3
 8005d9a:	1c5a      	adds	r2, r3, #1
 8005d9c:	2030      	movs	r0, #48	@ 0x30
 8005d9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005da2:	4422      	add	r2, r4
 8005da4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005da8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005dac:	3302      	adds	r3, #2
 8005dae:	e7c7      	b.n	8005d40 <_printf_common+0x58>
 8005db0:	2301      	movs	r3, #1
 8005db2:	4622      	mov	r2, r4
 8005db4:	4641      	mov	r1, r8
 8005db6:	4638      	mov	r0, r7
 8005db8:	47c8      	blx	r9
 8005dba:	3001      	adds	r0, #1
 8005dbc:	d0e6      	beq.n	8005d8c <_printf_common+0xa4>
 8005dbe:	3601      	adds	r6, #1
 8005dc0:	e7d9      	b.n	8005d76 <_printf_common+0x8e>
	...

08005dc4 <_printf_i>:
 8005dc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005dc8:	7e0f      	ldrb	r7, [r1, #24]
 8005dca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005dcc:	2f78      	cmp	r7, #120	@ 0x78
 8005dce:	4691      	mov	r9, r2
 8005dd0:	4680      	mov	r8, r0
 8005dd2:	460c      	mov	r4, r1
 8005dd4:	469a      	mov	sl, r3
 8005dd6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005dda:	d807      	bhi.n	8005dec <_printf_i+0x28>
 8005ddc:	2f62      	cmp	r7, #98	@ 0x62
 8005dde:	d80a      	bhi.n	8005df6 <_printf_i+0x32>
 8005de0:	2f00      	cmp	r7, #0
 8005de2:	f000 80d2 	beq.w	8005f8a <_printf_i+0x1c6>
 8005de6:	2f58      	cmp	r7, #88	@ 0x58
 8005de8:	f000 80b9 	beq.w	8005f5e <_printf_i+0x19a>
 8005dec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005df0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005df4:	e03a      	b.n	8005e6c <_printf_i+0xa8>
 8005df6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005dfa:	2b15      	cmp	r3, #21
 8005dfc:	d8f6      	bhi.n	8005dec <_printf_i+0x28>
 8005dfe:	a101      	add	r1, pc, #4	@ (adr r1, 8005e04 <_printf_i+0x40>)
 8005e00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e04:	08005e5d 	.word	0x08005e5d
 8005e08:	08005e71 	.word	0x08005e71
 8005e0c:	08005ded 	.word	0x08005ded
 8005e10:	08005ded 	.word	0x08005ded
 8005e14:	08005ded 	.word	0x08005ded
 8005e18:	08005ded 	.word	0x08005ded
 8005e1c:	08005e71 	.word	0x08005e71
 8005e20:	08005ded 	.word	0x08005ded
 8005e24:	08005ded 	.word	0x08005ded
 8005e28:	08005ded 	.word	0x08005ded
 8005e2c:	08005ded 	.word	0x08005ded
 8005e30:	08005f71 	.word	0x08005f71
 8005e34:	08005e9b 	.word	0x08005e9b
 8005e38:	08005f2b 	.word	0x08005f2b
 8005e3c:	08005ded 	.word	0x08005ded
 8005e40:	08005ded 	.word	0x08005ded
 8005e44:	08005f93 	.word	0x08005f93
 8005e48:	08005ded 	.word	0x08005ded
 8005e4c:	08005e9b 	.word	0x08005e9b
 8005e50:	08005ded 	.word	0x08005ded
 8005e54:	08005ded 	.word	0x08005ded
 8005e58:	08005f33 	.word	0x08005f33
 8005e5c:	6833      	ldr	r3, [r6, #0]
 8005e5e:	1d1a      	adds	r2, r3, #4
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	6032      	str	r2, [r6, #0]
 8005e64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e09d      	b.n	8005fac <_printf_i+0x1e8>
 8005e70:	6833      	ldr	r3, [r6, #0]
 8005e72:	6820      	ldr	r0, [r4, #0]
 8005e74:	1d19      	adds	r1, r3, #4
 8005e76:	6031      	str	r1, [r6, #0]
 8005e78:	0606      	lsls	r6, r0, #24
 8005e7a:	d501      	bpl.n	8005e80 <_printf_i+0xbc>
 8005e7c:	681d      	ldr	r5, [r3, #0]
 8005e7e:	e003      	b.n	8005e88 <_printf_i+0xc4>
 8005e80:	0645      	lsls	r5, r0, #25
 8005e82:	d5fb      	bpl.n	8005e7c <_printf_i+0xb8>
 8005e84:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005e88:	2d00      	cmp	r5, #0
 8005e8a:	da03      	bge.n	8005e94 <_printf_i+0xd0>
 8005e8c:	232d      	movs	r3, #45	@ 0x2d
 8005e8e:	426d      	negs	r5, r5
 8005e90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e94:	4859      	ldr	r0, [pc, #356]	@ (8005ffc <_printf_i+0x238>)
 8005e96:	230a      	movs	r3, #10
 8005e98:	e011      	b.n	8005ebe <_printf_i+0xfa>
 8005e9a:	6821      	ldr	r1, [r4, #0]
 8005e9c:	6833      	ldr	r3, [r6, #0]
 8005e9e:	0608      	lsls	r0, r1, #24
 8005ea0:	f853 5b04 	ldr.w	r5, [r3], #4
 8005ea4:	d402      	bmi.n	8005eac <_printf_i+0xe8>
 8005ea6:	0649      	lsls	r1, r1, #25
 8005ea8:	bf48      	it	mi
 8005eaa:	b2ad      	uxthmi	r5, r5
 8005eac:	2f6f      	cmp	r7, #111	@ 0x6f
 8005eae:	4853      	ldr	r0, [pc, #332]	@ (8005ffc <_printf_i+0x238>)
 8005eb0:	6033      	str	r3, [r6, #0]
 8005eb2:	bf14      	ite	ne
 8005eb4:	230a      	movne	r3, #10
 8005eb6:	2308      	moveq	r3, #8
 8005eb8:	2100      	movs	r1, #0
 8005eba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005ebe:	6866      	ldr	r6, [r4, #4]
 8005ec0:	60a6      	str	r6, [r4, #8]
 8005ec2:	2e00      	cmp	r6, #0
 8005ec4:	bfa2      	ittt	ge
 8005ec6:	6821      	ldrge	r1, [r4, #0]
 8005ec8:	f021 0104 	bicge.w	r1, r1, #4
 8005ecc:	6021      	strge	r1, [r4, #0]
 8005ece:	b90d      	cbnz	r5, 8005ed4 <_printf_i+0x110>
 8005ed0:	2e00      	cmp	r6, #0
 8005ed2:	d04b      	beq.n	8005f6c <_printf_i+0x1a8>
 8005ed4:	4616      	mov	r6, r2
 8005ed6:	fbb5 f1f3 	udiv	r1, r5, r3
 8005eda:	fb03 5711 	mls	r7, r3, r1, r5
 8005ede:	5dc7      	ldrb	r7, [r0, r7]
 8005ee0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ee4:	462f      	mov	r7, r5
 8005ee6:	42bb      	cmp	r3, r7
 8005ee8:	460d      	mov	r5, r1
 8005eea:	d9f4      	bls.n	8005ed6 <_printf_i+0x112>
 8005eec:	2b08      	cmp	r3, #8
 8005eee:	d10b      	bne.n	8005f08 <_printf_i+0x144>
 8005ef0:	6823      	ldr	r3, [r4, #0]
 8005ef2:	07df      	lsls	r7, r3, #31
 8005ef4:	d508      	bpl.n	8005f08 <_printf_i+0x144>
 8005ef6:	6923      	ldr	r3, [r4, #16]
 8005ef8:	6861      	ldr	r1, [r4, #4]
 8005efa:	4299      	cmp	r1, r3
 8005efc:	bfde      	ittt	le
 8005efe:	2330      	movle	r3, #48	@ 0x30
 8005f00:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f04:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005f08:	1b92      	subs	r2, r2, r6
 8005f0a:	6122      	str	r2, [r4, #16]
 8005f0c:	f8cd a000 	str.w	sl, [sp]
 8005f10:	464b      	mov	r3, r9
 8005f12:	aa03      	add	r2, sp, #12
 8005f14:	4621      	mov	r1, r4
 8005f16:	4640      	mov	r0, r8
 8005f18:	f7ff fee6 	bl	8005ce8 <_printf_common>
 8005f1c:	3001      	adds	r0, #1
 8005f1e:	d14a      	bne.n	8005fb6 <_printf_i+0x1f2>
 8005f20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005f24:	b004      	add	sp, #16
 8005f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f2a:	6823      	ldr	r3, [r4, #0]
 8005f2c:	f043 0320 	orr.w	r3, r3, #32
 8005f30:	6023      	str	r3, [r4, #0]
 8005f32:	4833      	ldr	r0, [pc, #204]	@ (8006000 <_printf_i+0x23c>)
 8005f34:	2778      	movs	r7, #120	@ 0x78
 8005f36:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005f3a:	6823      	ldr	r3, [r4, #0]
 8005f3c:	6831      	ldr	r1, [r6, #0]
 8005f3e:	061f      	lsls	r7, r3, #24
 8005f40:	f851 5b04 	ldr.w	r5, [r1], #4
 8005f44:	d402      	bmi.n	8005f4c <_printf_i+0x188>
 8005f46:	065f      	lsls	r7, r3, #25
 8005f48:	bf48      	it	mi
 8005f4a:	b2ad      	uxthmi	r5, r5
 8005f4c:	6031      	str	r1, [r6, #0]
 8005f4e:	07d9      	lsls	r1, r3, #31
 8005f50:	bf44      	itt	mi
 8005f52:	f043 0320 	orrmi.w	r3, r3, #32
 8005f56:	6023      	strmi	r3, [r4, #0]
 8005f58:	b11d      	cbz	r5, 8005f62 <_printf_i+0x19e>
 8005f5a:	2310      	movs	r3, #16
 8005f5c:	e7ac      	b.n	8005eb8 <_printf_i+0xf4>
 8005f5e:	4827      	ldr	r0, [pc, #156]	@ (8005ffc <_printf_i+0x238>)
 8005f60:	e7e9      	b.n	8005f36 <_printf_i+0x172>
 8005f62:	6823      	ldr	r3, [r4, #0]
 8005f64:	f023 0320 	bic.w	r3, r3, #32
 8005f68:	6023      	str	r3, [r4, #0]
 8005f6a:	e7f6      	b.n	8005f5a <_printf_i+0x196>
 8005f6c:	4616      	mov	r6, r2
 8005f6e:	e7bd      	b.n	8005eec <_printf_i+0x128>
 8005f70:	6833      	ldr	r3, [r6, #0]
 8005f72:	6825      	ldr	r5, [r4, #0]
 8005f74:	6961      	ldr	r1, [r4, #20]
 8005f76:	1d18      	adds	r0, r3, #4
 8005f78:	6030      	str	r0, [r6, #0]
 8005f7a:	062e      	lsls	r6, r5, #24
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	d501      	bpl.n	8005f84 <_printf_i+0x1c0>
 8005f80:	6019      	str	r1, [r3, #0]
 8005f82:	e002      	b.n	8005f8a <_printf_i+0x1c6>
 8005f84:	0668      	lsls	r0, r5, #25
 8005f86:	d5fb      	bpl.n	8005f80 <_printf_i+0x1bc>
 8005f88:	8019      	strh	r1, [r3, #0]
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	6123      	str	r3, [r4, #16]
 8005f8e:	4616      	mov	r6, r2
 8005f90:	e7bc      	b.n	8005f0c <_printf_i+0x148>
 8005f92:	6833      	ldr	r3, [r6, #0]
 8005f94:	1d1a      	adds	r2, r3, #4
 8005f96:	6032      	str	r2, [r6, #0]
 8005f98:	681e      	ldr	r6, [r3, #0]
 8005f9a:	6862      	ldr	r2, [r4, #4]
 8005f9c:	2100      	movs	r1, #0
 8005f9e:	4630      	mov	r0, r6
 8005fa0:	f7fa f93e 	bl	8000220 <memchr>
 8005fa4:	b108      	cbz	r0, 8005faa <_printf_i+0x1e6>
 8005fa6:	1b80      	subs	r0, r0, r6
 8005fa8:	6060      	str	r0, [r4, #4]
 8005faa:	6863      	ldr	r3, [r4, #4]
 8005fac:	6123      	str	r3, [r4, #16]
 8005fae:	2300      	movs	r3, #0
 8005fb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fb4:	e7aa      	b.n	8005f0c <_printf_i+0x148>
 8005fb6:	6923      	ldr	r3, [r4, #16]
 8005fb8:	4632      	mov	r2, r6
 8005fba:	4649      	mov	r1, r9
 8005fbc:	4640      	mov	r0, r8
 8005fbe:	47d0      	blx	sl
 8005fc0:	3001      	adds	r0, #1
 8005fc2:	d0ad      	beq.n	8005f20 <_printf_i+0x15c>
 8005fc4:	6823      	ldr	r3, [r4, #0]
 8005fc6:	079b      	lsls	r3, r3, #30
 8005fc8:	d413      	bmi.n	8005ff2 <_printf_i+0x22e>
 8005fca:	68e0      	ldr	r0, [r4, #12]
 8005fcc:	9b03      	ldr	r3, [sp, #12]
 8005fce:	4298      	cmp	r0, r3
 8005fd0:	bfb8      	it	lt
 8005fd2:	4618      	movlt	r0, r3
 8005fd4:	e7a6      	b.n	8005f24 <_printf_i+0x160>
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	4632      	mov	r2, r6
 8005fda:	4649      	mov	r1, r9
 8005fdc:	4640      	mov	r0, r8
 8005fde:	47d0      	blx	sl
 8005fe0:	3001      	adds	r0, #1
 8005fe2:	d09d      	beq.n	8005f20 <_printf_i+0x15c>
 8005fe4:	3501      	adds	r5, #1
 8005fe6:	68e3      	ldr	r3, [r4, #12]
 8005fe8:	9903      	ldr	r1, [sp, #12]
 8005fea:	1a5b      	subs	r3, r3, r1
 8005fec:	42ab      	cmp	r3, r5
 8005fee:	dcf2      	bgt.n	8005fd6 <_printf_i+0x212>
 8005ff0:	e7eb      	b.n	8005fca <_printf_i+0x206>
 8005ff2:	2500      	movs	r5, #0
 8005ff4:	f104 0619 	add.w	r6, r4, #25
 8005ff8:	e7f5      	b.n	8005fe6 <_printf_i+0x222>
 8005ffa:	bf00      	nop
 8005ffc:	08006881 	.word	0x08006881
 8006000:	08006892 	.word	0x08006892

08006004 <memmove>:
 8006004:	4288      	cmp	r0, r1
 8006006:	b510      	push	{r4, lr}
 8006008:	eb01 0402 	add.w	r4, r1, r2
 800600c:	d902      	bls.n	8006014 <memmove+0x10>
 800600e:	4284      	cmp	r4, r0
 8006010:	4623      	mov	r3, r4
 8006012:	d807      	bhi.n	8006024 <memmove+0x20>
 8006014:	1e43      	subs	r3, r0, #1
 8006016:	42a1      	cmp	r1, r4
 8006018:	d008      	beq.n	800602c <memmove+0x28>
 800601a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800601e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006022:	e7f8      	b.n	8006016 <memmove+0x12>
 8006024:	4402      	add	r2, r0
 8006026:	4601      	mov	r1, r0
 8006028:	428a      	cmp	r2, r1
 800602a:	d100      	bne.n	800602e <memmove+0x2a>
 800602c:	bd10      	pop	{r4, pc}
 800602e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006032:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006036:	e7f7      	b.n	8006028 <memmove+0x24>

08006038 <_sbrk_r>:
 8006038:	b538      	push	{r3, r4, r5, lr}
 800603a:	4d06      	ldr	r5, [pc, #24]	@ (8006054 <_sbrk_r+0x1c>)
 800603c:	2300      	movs	r3, #0
 800603e:	4604      	mov	r4, r0
 8006040:	4608      	mov	r0, r1
 8006042:	602b      	str	r3, [r5, #0]
 8006044:	f7fc f802 	bl	800204c <_sbrk>
 8006048:	1c43      	adds	r3, r0, #1
 800604a:	d102      	bne.n	8006052 <_sbrk_r+0x1a>
 800604c:	682b      	ldr	r3, [r5, #0]
 800604e:	b103      	cbz	r3, 8006052 <_sbrk_r+0x1a>
 8006050:	6023      	str	r3, [r4, #0]
 8006052:	bd38      	pop	{r3, r4, r5, pc}
 8006054:	20000bbc 	.word	0x20000bbc

08006058 <memcpy>:
 8006058:	440a      	add	r2, r1
 800605a:	4291      	cmp	r1, r2
 800605c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006060:	d100      	bne.n	8006064 <memcpy+0xc>
 8006062:	4770      	bx	lr
 8006064:	b510      	push	{r4, lr}
 8006066:	f811 4b01 	ldrb.w	r4, [r1], #1
 800606a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800606e:	4291      	cmp	r1, r2
 8006070:	d1f9      	bne.n	8006066 <memcpy+0xe>
 8006072:	bd10      	pop	{r4, pc}

08006074 <_realloc_r>:
 8006074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006078:	4680      	mov	r8, r0
 800607a:	4615      	mov	r5, r2
 800607c:	460c      	mov	r4, r1
 800607e:	b921      	cbnz	r1, 800608a <_realloc_r+0x16>
 8006080:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006084:	4611      	mov	r1, r2
 8006086:	f7ff bc4b 	b.w	8005920 <_malloc_r>
 800608a:	b92a      	cbnz	r2, 8006098 <_realloc_r+0x24>
 800608c:	f7ff fbdc 	bl	8005848 <_free_r>
 8006090:	2400      	movs	r4, #0
 8006092:	4620      	mov	r0, r4
 8006094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006098:	f000 f81a 	bl	80060d0 <_malloc_usable_size_r>
 800609c:	4285      	cmp	r5, r0
 800609e:	4606      	mov	r6, r0
 80060a0:	d802      	bhi.n	80060a8 <_realloc_r+0x34>
 80060a2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80060a6:	d8f4      	bhi.n	8006092 <_realloc_r+0x1e>
 80060a8:	4629      	mov	r1, r5
 80060aa:	4640      	mov	r0, r8
 80060ac:	f7ff fc38 	bl	8005920 <_malloc_r>
 80060b0:	4607      	mov	r7, r0
 80060b2:	2800      	cmp	r0, #0
 80060b4:	d0ec      	beq.n	8006090 <_realloc_r+0x1c>
 80060b6:	42b5      	cmp	r5, r6
 80060b8:	462a      	mov	r2, r5
 80060ba:	4621      	mov	r1, r4
 80060bc:	bf28      	it	cs
 80060be:	4632      	movcs	r2, r6
 80060c0:	f7ff ffca 	bl	8006058 <memcpy>
 80060c4:	4621      	mov	r1, r4
 80060c6:	4640      	mov	r0, r8
 80060c8:	f7ff fbbe 	bl	8005848 <_free_r>
 80060cc:	463c      	mov	r4, r7
 80060ce:	e7e0      	b.n	8006092 <_realloc_r+0x1e>

080060d0 <_malloc_usable_size_r>:
 80060d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060d4:	1f18      	subs	r0, r3, #4
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	bfbc      	itt	lt
 80060da:	580b      	ldrlt	r3, [r1, r0]
 80060dc:	18c0      	addlt	r0, r0, r3
 80060de:	4770      	bx	lr

080060e0 <atan2>:
 80060e0:	f000 b802 	b.w	80060e8 <__ieee754_atan2>
 80060e4:	0000      	movs	r0, r0
	...

080060e8 <__ieee754_atan2>:
 80060e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060ec:	ec57 6b11 	vmov	r6, r7, d1
 80060f0:	4273      	negs	r3, r6
 80060f2:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8006270 <__ieee754_atan2+0x188>
 80060f6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 80060fa:	4333      	orrs	r3, r6
 80060fc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8006100:	4543      	cmp	r3, r8
 8006102:	ec51 0b10 	vmov	r0, r1, d0
 8006106:	4635      	mov	r5, r6
 8006108:	d809      	bhi.n	800611e <__ieee754_atan2+0x36>
 800610a:	4244      	negs	r4, r0
 800610c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006110:	4304      	orrs	r4, r0
 8006112:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8006116:	4544      	cmp	r4, r8
 8006118:	468e      	mov	lr, r1
 800611a:	4681      	mov	r9, r0
 800611c:	d907      	bls.n	800612e <__ieee754_atan2+0x46>
 800611e:	4632      	mov	r2, r6
 8006120:	463b      	mov	r3, r7
 8006122:	f7fa f8d3 	bl	80002cc <__adddf3>
 8006126:	ec41 0b10 	vmov	d0, r0, r1
 800612a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800612e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8006132:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8006136:	4334      	orrs	r4, r6
 8006138:	d103      	bne.n	8006142 <__ieee754_atan2+0x5a>
 800613a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800613e:	f000 b89b 	b.w	8006278 <atan>
 8006142:	17bc      	asrs	r4, r7, #30
 8006144:	f004 0402 	and.w	r4, r4, #2
 8006148:	ea53 0909 	orrs.w	r9, r3, r9
 800614c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8006150:	d107      	bne.n	8006162 <__ieee754_atan2+0x7a>
 8006152:	2c02      	cmp	r4, #2
 8006154:	d05f      	beq.n	8006216 <__ieee754_atan2+0x12e>
 8006156:	2c03      	cmp	r4, #3
 8006158:	d1e5      	bne.n	8006126 <__ieee754_atan2+0x3e>
 800615a:	a141      	add	r1, pc, #260	@ (adr r1, 8006260 <__ieee754_atan2+0x178>)
 800615c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006160:	e7e1      	b.n	8006126 <__ieee754_atan2+0x3e>
 8006162:	4315      	orrs	r5, r2
 8006164:	d106      	bne.n	8006174 <__ieee754_atan2+0x8c>
 8006166:	f1be 0f00 	cmp.w	lr, #0
 800616a:	da5f      	bge.n	800622c <__ieee754_atan2+0x144>
 800616c:	a13e      	add	r1, pc, #248	@ (adr r1, 8006268 <__ieee754_atan2+0x180>)
 800616e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006172:	e7d8      	b.n	8006126 <__ieee754_atan2+0x3e>
 8006174:	4542      	cmp	r2, r8
 8006176:	d10f      	bne.n	8006198 <__ieee754_atan2+0xb0>
 8006178:	4293      	cmp	r3, r2
 800617a:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 800617e:	d107      	bne.n	8006190 <__ieee754_atan2+0xa8>
 8006180:	2c02      	cmp	r4, #2
 8006182:	d84c      	bhi.n	800621e <__ieee754_atan2+0x136>
 8006184:	4b34      	ldr	r3, [pc, #208]	@ (8006258 <__ieee754_atan2+0x170>)
 8006186:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800618a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800618e:	e7ca      	b.n	8006126 <__ieee754_atan2+0x3e>
 8006190:	2c02      	cmp	r4, #2
 8006192:	d848      	bhi.n	8006226 <__ieee754_atan2+0x13e>
 8006194:	4b31      	ldr	r3, [pc, #196]	@ (800625c <__ieee754_atan2+0x174>)
 8006196:	e7f6      	b.n	8006186 <__ieee754_atan2+0x9e>
 8006198:	4543      	cmp	r3, r8
 800619a:	d0e4      	beq.n	8006166 <__ieee754_atan2+0x7e>
 800619c:	1a9b      	subs	r3, r3, r2
 800619e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 80061a2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80061a6:	da1e      	bge.n	80061e6 <__ieee754_atan2+0xfe>
 80061a8:	2f00      	cmp	r7, #0
 80061aa:	da01      	bge.n	80061b0 <__ieee754_atan2+0xc8>
 80061ac:	323c      	adds	r2, #60	@ 0x3c
 80061ae:	db1e      	blt.n	80061ee <__ieee754_atan2+0x106>
 80061b0:	4632      	mov	r2, r6
 80061b2:	463b      	mov	r3, r7
 80061b4:	f7fa fb6a 	bl	800088c <__aeabi_ddiv>
 80061b8:	ec41 0b10 	vmov	d0, r0, r1
 80061bc:	f000 f9f4 	bl	80065a8 <fabs>
 80061c0:	f000 f85a 	bl	8006278 <atan>
 80061c4:	ec51 0b10 	vmov	r0, r1, d0
 80061c8:	2c01      	cmp	r4, #1
 80061ca:	d013      	beq.n	80061f4 <__ieee754_atan2+0x10c>
 80061cc:	2c02      	cmp	r4, #2
 80061ce:	d015      	beq.n	80061fc <__ieee754_atan2+0x114>
 80061d0:	2c00      	cmp	r4, #0
 80061d2:	d0a8      	beq.n	8006126 <__ieee754_atan2+0x3e>
 80061d4:	a318      	add	r3, pc, #96	@ (adr r3, 8006238 <__ieee754_atan2+0x150>)
 80061d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061da:	f7fa f875 	bl	80002c8 <__aeabi_dsub>
 80061de:	a318      	add	r3, pc, #96	@ (adr r3, 8006240 <__ieee754_atan2+0x158>)
 80061e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e4:	e014      	b.n	8006210 <__ieee754_atan2+0x128>
 80061e6:	a118      	add	r1, pc, #96	@ (adr r1, 8006248 <__ieee754_atan2+0x160>)
 80061e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061ec:	e7ec      	b.n	80061c8 <__ieee754_atan2+0xe0>
 80061ee:	2000      	movs	r0, #0
 80061f0:	2100      	movs	r1, #0
 80061f2:	e7e9      	b.n	80061c8 <__ieee754_atan2+0xe0>
 80061f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80061f8:	4619      	mov	r1, r3
 80061fa:	e794      	b.n	8006126 <__ieee754_atan2+0x3e>
 80061fc:	a30e      	add	r3, pc, #56	@ (adr r3, 8006238 <__ieee754_atan2+0x150>)
 80061fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006202:	f7fa f861 	bl	80002c8 <__aeabi_dsub>
 8006206:	4602      	mov	r2, r0
 8006208:	460b      	mov	r3, r1
 800620a:	a10d      	add	r1, pc, #52	@ (adr r1, 8006240 <__ieee754_atan2+0x158>)
 800620c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006210:	f7fa f85a 	bl	80002c8 <__aeabi_dsub>
 8006214:	e787      	b.n	8006126 <__ieee754_atan2+0x3e>
 8006216:	a10a      	add	r1, pc, #40	@ (adr r1, 8006240 <__ieee754_atan2+0x158>)
 8006218:	e9d1 0100 	ldrd	r0, r1, [r1]
 800621c:	e783      	b.n	8006126 <__ieee754_atan2+0x3e>
 800621e:	a10c      	add	r1, pc, #48	@ (adr r1, 8006250 <__ieee754_atan2+0x168>)
 8006220:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006224:	e77f      	b.n	8006126 <__ieee754_atan2+0x3e>
 8006226:	2000      	movs	r0, #0
 8006228:	2100      	movs	r1, #0
 800622a:	e77c      	b.n	8006126 <__ieee754_atan2+0x3e>
 800622c:	a106      	add	r1, pc, #24	@ (adr r1, 8006248 <__ieee754_atan2+0x160>)
 800622e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006232:	e778      	b.n	8006126 <__ieee754_atan2+0x3e>
 8006234:	f3af 8000 	nop.w
 8006238:	33145c07 	.word	0x33145c07
 800623c:	3ca1a626 	.word	0x3ca1a626
 8006240:	54442d18 	.word	0x54442d18
 8006244:	400921fb 	.word	0x400921fb
 8006248:	54442d18 	.word	0x54442d18
 800624c:	3ff921fb 	.word	0x3ff921fb
 8006250:	54442d18 	.word	0x54442d18
 8006254:	3fe921fb 	.word	0x3fe921fb
 8006258:	080068c0 	.word	0x080068c0
 800625c:	080068a8 	.word	0x080068a8
 8006260:	54442d18 	.word	0x54442d18
 8006264:	c00921fb 	.word	0xc00921fb
 8006268:	54442d18 	.word	0x54442d18
 800626c:	bff921fb 	.word	0xbff921fb
 8006270:	7ff00000 	.word	0x7ff00000
 8006274:	00000000 	.word	0x00000000

08006278 <atan>:
 8006278:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800627c:	ec55 4b10 	vmov	r4, r5, d0
 8006280:	4bbf      	ldr	r3, [pc, #764]	@ (8006580 <atan+0x308>)
 8006282:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8006286:	429e      	cmp	r6, r3
 8006288:	46ab      	mov	fp, r5
 800628a:	d918      	bls.n	80062be <atan+0x46>
 800628c:	4bbd      	ldr	r3, [pc, #756]	@ (8006584 <atan+0x30c>)
 800628e:	429e      	cmp	r6, r3
 8006290:	d801      	bhi.n	8006296 <atan+0x1e>
 8006292:	d109      	bne.n	80062a8 <atan+0x30>
 8006294:	b144      	cbz	r4, 80062a8 <atan+0x30>
 8006296:	4622      	mov	r2, r4
 8006298:	462b      	mov	r3, r5
 800629a:	4620      	mov	r0, r4
 800629c:	4629      	mov	r1, r5
 800629e:	f7fa f815 	bl	80002cc <__adddf3>
 80062a2:	4604      	mov	r4, r0
 80062a4:	460d      	mov	r5, r1
 80062a6:	e006      	b.n	80062b6 <atan+0x3e>
 80062a8:	f1bb 0f00 	cmp.w	fp, #0
 80062ac:	f340 812b 	ble.w	8006506 <atan+0x28e>
 80062b0:	a597      	add	r5, pc, #604	@ (adr r5, 8006510 <atan+0x298>)
 80062b2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80062b6:	ec45 4b10 	vmov	d0, r4, r5
 80062ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062be:	4bb2      	ldr	r3, [pc, #712]	@ (8006588 <atan+0x310>)
 80062c0:	429e      	cmp	r6, r3
 80062c2:	d813      	bhi.n	80062ec <atan+0x74>
 80062c4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80062c8:	429e      	cmp	r6, r3
 80062ca:	d80c      	bhi.n	80062e6 <atan+0x6e>
 80062cc:	a392      	add	r3, pc, #584	@ (adr r3, 8006518 <atan+0x2a0>)
 80062ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d2:	4620      	mov	r0, r4
 80062d4:	4629      	mov	r1, r5
 80062d6:	f7f9 fff9 	bl	80002cc <__adddf3>
 80062da:	4bac      	ldr	r3, [pc, #688]	@ (800658c <atan+0x314>)
 80062dc:	2200      	movs	r2, #0
 80062de:	f7fa fc3b 	bl	8000b58 <__aeabi_dcmpgt>
 80062e2:	2800      	cmp	r0, #0
 80062e4:	d1e7      	bne.n	80062b6 <atan+0x3e>
 80062e6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80062ea:	e029      	b.n	8006340 <atan+0xc8>
 80062ec:	f000 f95c 	bl	80065a8 <fabs>
 80062f0:	4ba7      	ldr	r3, [pc, #668]	@ (8006590 <atan+0x318>)
 80062f2:	429e      	cmp	r6, r3
 80062f4:	ec55 4b10 	vmov	r4, r5, d0
 80062f8:	f200 80bc 	bhi.w	8006474 <atan+0x1fc>
 80062fc:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8006300:	429e      	cmp	r6, r3
 8006302:	f200 809e 	bhi.w	8006442 <atan+0x1ca>
 8006306:	4622      	mov	r2, r4
 8006308:	462b      	mov	r3, r5
 800630a:	4620      	mov	r0, r4
 800630c:	4629      	mov	r1, r5
 800630e:	f7f9 ffdd 	bl	80002cc <__adddf3>
 8006312:	4b9e      	ldr	r3, [pc, #632]	@ (800658c <atan+0x314>)
 8006314:	2200      	movs	r2, #0
 8006316:	f7f9 ffd7 	bl	80002c8 <__aeabi_dsub>
 800631a:	2200      	movs	r2, #0
 800631c:	4606      	mov	r6, r0
 800631e:	460f      	mov	r7, r1
 8006320:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006324:	4620      	mov	r0, r4
 8006326:	4629      	mov	r1, r5
 8006328:	f7f9 ffd0 	bl	80002cc <__adddf3>
 800632c:	4602      	mov	r2, r0
 800632e:	460b      	mov	r3, r1
 8006330:	4630      	mov	r0, r6
 8006332:	4639      	mov	r1, r7
 8006334:	f7fa faaa 	bl	800088c <__aeabi_ddiv>
 8006338:	f04f 0a00 	mov.w	sl, #0
 800633c:	4604      	mov	r4, r0
 800633e:	460d      	mov	r5, r1
 8006340:	4622      	mov	r2, r4
 8006342:	462b      	mov	r3, r5
 8006344:	4620      	mov	r0, r4
 8006346:	4629      	mov	r1, r5
 8006348:	f7fa f976 	bl	8000638 <__aeabi_dmul>
 800634c:	4602      	mov	r2, r0
 800634e:	460b      	mov	r3, r1
 8006350:	4680      	mov	r8, r0
 8006352:	4689      	mov	r9, r1
 8006354:	f7fa f970 	bl	8000638 <__aeabi_dmul>
 8006358:	a371      	add	r3, pc, #452	@ (adr r3, 8006520 <atan+0x2a8>)
 800635a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635e:	4606      	mov	r6, r0
 8006360:	460f      	mov	r7, r1
 8006362:	f7fa f969 	bl	8000638 <__aeabi_dmul>
 8006366:	a370      	add	r3, pc, #448	@ (adr r3, 8006528 <atan+0x2b0>)
 8006368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636c:	f7f9 ffae 	bl	80002cc <__adddf3>
 8006370:	4632      	mov	r2, r6
 8006372:	463b      	mov	r3, r7
 8006374:	f7fa f960 	bl	8000638 <__aeabi_dmul>
 8006378:	a36d      	add	r3, pc, #436	@ (adr r3, 8006530 <atan+0x2b8>)
 800637a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637e:	f7f9 ffa5 	bl	80002cc <__adddf3>
 8006382:	4632      	mov	r2, r6
 8006384:	463b      	mov	r3, r7
 8006386:	f7fa f957 	bl	8000638 <__aeabi_dmul>
 800638a:	a36b      	add	r3, pc, #428	@ (adr r3, 8006538 <atan+0x2c0>)
 800638c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006390:	f7f9 ff9c 	bl	80002cc <__adddf3>
 8006394:	4632      	mov	r2, r6
 8006396:	463b      	mov	r3, r7
 8006398:	f7fa f94e 	bl	8000638 <__aeabi_dmul>
 800639c:	a368      	add	r3, pc, #416	@ (adr r3, 8006540 <atan+0x2c8>)
 800639e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a2:	f7f9 ff93 	bl	80002cc <__adddf3>
 80063a6:	4632      	mov	r2, r6
 80063a8:	463b      	mov	r3, r7
 80063aa:	f7fa f945 	bl	8000638 <__aeabi_dmul>
 80063ae:	a366      	add	r3, pc, #408	@ (adr r3, 8006548 <atan+0x2d0>)
 80063b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b4:	f7f9 ff8a 	bl	80002cc <__adddf3>
 80063b8:	4642      	mov	r2, r8
 80063ba:	464b      	mov	r3, r9
 80063bc:	f7fa f93c 	bl	8000638 <__aeabi_dmul>
 80063c0:	a363      	add	r3, pc, #396	@ (adr r3, 8006550 <atan+0x2d8>)
 80063c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c6:	4680      	mov	r8, r0
 80063c8:	4689      	mov	r9, r1
 80063ca:	4630      	mov	r0, r6
 80063cc:	4639      	mov	r1, r7
 80063ce:	f7fa f933 	bl	8000638 <__aeabi_dmul>
 80063d2:	a361      	add	r3, pc, #388	@ (adr r3, 8006558 <atan+0x2e0>)
 80063d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d8:	f7f9 ff76 	bl	80002c8 <__aeabi_dsub>
 80063dc:	4632      	mov	r2, r6
 80063de:	463b      	mov	r3, r7
 80063e0:	f7fa f92a 	bl	8000638 <__aeabi_dmul>
 80063e4:	a35e      	add	r3, pc, #376	@ (adr r3, 8006560 <atan+0x2e8>)
 80063e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ea:	f7f9 ff6d 	bl	80002c8 <__aeabi_dsub>
 80063ee:	4632      	mov	r2, r6
 80063f0:	463b      	mov	r3, r7
 80063f2:	f7fa f921 	bl	8000638 <__aeabi_dmul>
 80063f6:	a35c      	add	r3, pc, #368	@ (adr r3, 8006568 <atan+0x2f0>)
 80063f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063fc:	f7f9 ff64 	bl	80002c8 <__aeabi_dsub>
 8006400:	4632      	mov	r2, r6
 8006402:	463b      	mov	r3, r7
 8006404:	f7fa f918 	bl	8000638 <__aeabi_dmul>
 8006408:	a359      	add	r3, pc, #356	@ (adr r3, 8006570 <atan+0x2f8>)
 800640a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640e:	f7f9 ff5b 	bl	80002c8 <__aeabi_dsub>
 8006412:	4632      	mov	r2, r6
 8006414:	463b      	mov	r3, r7
 8006416:	f7fa f90f 	bl	8000638 <__aeabi_dmul>
 800641a:	4602      	mov	r2, r0
 800641c:	460b      	mov	r3, r1
 800641e:	4640      	mov	r0, r8
 8006420:	4649      	mov	r1, r9
 8006422:	f7f9 ff53 	bl	80002cc <__adddf3>
 8006426:	4622      	mov	r2, r4
 8006428:	462b      	mov	r3, r5
 800642a:	f7fa f905 	bl	8000638 <__aeabi_dmul>
 800642e:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 8006432:	4602      	mov	r2, r0
 8006434:	460b      	mov	r3, r1
 8006436:	d148      	bne.n	80064ca <atan+0x252>
 8006438:	4620      	mov	r0, r4
 800643a:	4629      	mov	r1, r5
 800643c:	f7f9 ff44 	bl	80002c8 <__aeabi_dsub>
 8006440:	e72f      	b.n	80062a2 <atan+0x2a>
 8006442:	4b52      	ldr	r3, [pc, #328]	@ (800658c <atan+0x314>)
 8006444:	2200      	movs	r2, #0
 8006446:	4620      	mov	r0, r4
 8006448:	4629      	mov	r1, r5
 800644a:	f7f9 ff3d 	bl	80002c8 <__aeabi_dsub>
 800644e:	4b4f      	ldr	r3, [pc, #316]	@ (800658c <atan+0x314>)
 8006450:	4606      	mov	r6, r0
 8006452:	460f      	mov	r7, r1
 8006454:	2200      	movs	r2, #0
 8006456:	4620      	mov	r0, r4
 8006458:	4629      	mov	r1, r5
 800645a:	f7f9 ff37 	bl	80002cc <__adddf3>
 800645e:	4602      	mov	r2, r0
 8006460:	460b      	mov	r3, r1
 8006462:	4630      	mov	r0, r6
 8006464:	4639      	mov	r1, r7
 8006466:	f7fa fa11 	bl	800088c <__aeabi_ddiv>
 800646a:	f04f 0a01 	mov.w	sl, #1
 800646e:	4604      	mov	r4, r0
 8006470:	460d      	mov	r5, r1
 8006472:	e765      	b.n	8006340 <atan+0xc8>
 8006474:	4b47      	ldr	r3, [pc, #284]	@ (8006594 <atan+0x31c>)
 8006476:	429e      	cmp	r6, r3
 8006478:	d21c      	bcs.n	80064b4 <atan+0x23c>
 800647a:	4b47      	ldr	r3, [pc, #284]	@ (8006598 <atan+0x320>)
 800647c:	2200      	movs	r2, #0
 800647e:	4620      	mov	r0, r4
 8006480:	4629      	mov	r1, r5
 8006482:	f7f9 ff21 	bl	80002c8 <__aeabi_dsub>
 8006486:	4b44      	ldr	r3, [pc, #272]	@ (8006598 <atan+0x320>)
 8006488:	4606      	mov	r6, r0
 800648a:	460f      	mov	r7, r1
 800648c:	2200      	movs	r2, #0
 800648e:	4620      	mov	r0, r4
 8006490:	4629      	mov	r1, r5
 8006492:	f7fa f8d1 	bl	8000638 <__aeabi_dmul>
 8006496:	4b3d      	ldr	r3, [pc, #244]	@ (800658c <atan+0x314>)
 8006498:	2200      	movs	r2, #0
 800649a:	f7f9 ff17 	bl	80002cc <__adddf3>
 800649e:	4602      	mov	r2, r0
 80064a0:	460b      	mov	r3, r1
 80064a2:	4630      	mov	r0, r6
 80064a4:	4639      	mov	r1, r7
 80064a6:	f7fa f9f1 	bl	800088c <__aeabi_ddiv>
 80064aa:	f04f 0a02 	mov.w	sl, #2
 80064ae:	4604      	mov	r4, r0
 80064b0:	460d      	mov	r5, r1
 80064b2:	e745      	b.n	8006340 <atan+0xc8>
 80064b4:	4622      	mov	r2, r4
 80064b6:	462b      	mov	r3, r5
 80064b8:	4938      	ldr	r1, [pc, #224]	@ (800659c <atan+0x324>)
 80064ba:	2000      	movs	r0, #0
 80064bc:	f7fa f9e6 	bl	800088c <__aeabi_ddiv>
 80064c0:	f04f 0a03 	mov.w	sl, #3
 80064c4:	4604      	mov	r4, r0
 80064c6:	460d      	mov	r5, r1
 80064c8:	e73a      	b.n	8006340 <atan+0xc8>
 80064ca:	4b35      	ldr	r3, [pc, #212]	@ (80065a0 <atan+0x328>)
 80064cc:	4e35      	ldr	r6, [pc, #212]	@ (80065a4 <atan+0x32c>)
 80064ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80064d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d6:	f7f9 fef7 	bl	80002c8 <__aeabi_dsub>
 80064da:	4622      	mov	r2, r4
 80064dc:	462b      	mov	r3, r5
 80064de:	f7f9 fef3 	bl	80002c8 <__aeabi_dsub>
 80064e2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80064e6:	4602      	mov	r2, r0
 80064e8:	460b      	mov	r3, r1
 80064ea:	e9d6 0100 	ldrd	r0, r1, [r6]
 80064ee:	f7f9 feeb 	bl	80002c8 <__aeabi_dsub>
 80064f2:	f1bb 0f00 	cmp.w	fp, #0
 80064f6:	4604      	mov	r4, r0
 80064f8:	460d      	mov	r5, r1
 80064fa:	f6bf aedc 	bge.w	80062b6 <atan+0x3e>
 80064fe:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006502:	461d      	mov	r5, r3
 8006504:	e6d7      	b.n	80062b6 <atan+0x3e>
 8006506:	a51c      	add	r5, pc, #112	@ (adr r5, 8006578 <atan+0x300>)
 8006508:	e9d5 4500 	ldrd	r4, r5, [r5]
 800650c:	e6d3      	b.n	80062b6 <atan+0x3e>
 800650e:	bf00      	nop
 8006510:	54442d18 	.word	0x54442d18
 8006514:	3ff921fb 	.word	0x3ff921fb
 8006518:	8800759c 	.word	0x8800759c
 800651c:	7e37e43c 	.word	0x7e37e43c
 8006520:	e322da11 	.word	0xe322da11
 8006524:	3f90ad3a 	.word	0x3f90ad3a
 8006528:	24760deb 	.word	0x24760deb
 800652c:	3fa97b4b 	.word	0x3fa97b4b
 8006530:	a0d03d51 	.word	0xa0d03d51
 8006534:	3fb10d66 	.word	0x3fb10d66
 8006538:	c54c206e 	.word	0xc54c206e
 800653c:	3fb745cd 	.word	0x3fb745cd
 8006540:	920083ff 	.word	0x920083ff
 8006544:	3fc24924 	.word	0x3fc24924
 8006548:	5555550d 	.word	0x5555550d
 800654c:	3fd55555 	.word	0x3fd55555
 8006550:	2c6a6c2f 	.word	0x2c6a6c2f
 8006554:	bfa2b444 	.word	0xbfa2b444
 8006558:	52defd9a 	.word	0x52defd9a
 800655c:	3fadde2d 	.word	0x3fadde2d
 8006560:	af749a6d 	.word	0xaf749a6d
 8006564:	3fb3b0f2 	.word	0x3fb3b0f2
 8006568:	fe231671 	.word	0xfe231671
 800656c:	3fbc71c6 	.word	0x3fbc71c6
 8006570:	9998ebc4 	.word	0x9998ebc4
 8006574:	3fc99999 	.word	0x3fc99999
 8006578:	54442d18 	.word	0x54442d18
 800657c:	bff921fb 	.word	0xbff921fb
 8006580:	440fffff 	.word	0x440fffff
 8006584:	7ff00000 	.word	0x7ff00000
 8006588:	3fdbffff 	.word	0x3fdbffff
 800658c:	3ff00000 	.word	0x3ff00000
 8006590:	3ff2ffff 	.word	0x3ff2ffff
 8006594:	40038000 	.word	0x40038000
 8006598:	3ff80000 	.word	0x3ff80000
 800659c:	bff00000 	.word	0xbff00000
 80065a0:	080068d8 	.word	0x080068d8
 80065a4:	080068f8 	.word	0x080068f8

080065a8 <fabs>:
 80065a8:	ec51 0b10 	vmov	r0, r1, d0
 80065ac:	4602      	mov	r2, r0
 80065ae:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80065b2:	ec43 2b10 	vmov	d0, r2, r3
 80065b6:	4770      	bx	lr

080065b8 <_init>:
 80065b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ba:	bf00      	nop
 80065bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065be:	bc08      	pop	{r3}
 80065c0:	469e      	mov	lr, r3
 80065c2:	4770      	bx	lr

080065c4 <_fini>:
 80065c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065c6:	bf00      	nop
 80065c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ca:	bc08      	pop	{r3}
 80065cc:	469e      	mov	lr, r3
 80065ce:	4770      	bx	lr
