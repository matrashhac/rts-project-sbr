
mpuTest1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d28  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  08009ef8  08009ef8  0000aef8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2a0  0800a2a0  0000c060  2**0
                  CONTENTS
  4 .ARM          00000008  0800a2a0  0800a2a0  0000b2a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2a8  0800a2a8  0000c060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2a8  0800a2a8  0000b2a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a2ac  0800a2ac  0000b2ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800a2b0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005498  20000060  0800a310  0000c060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200054f8  0800a310  0000c4f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cd2b  00000000  00000000  0000c090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b00  00000000  00000000  00028dbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a8  00000000  00000000  0002c8c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000128a  00000000  00000000  0002e068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004658  00000000  00000000  0002f2f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b732  00000000  00000000  0003394a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dedda  00000000  00000000  0004f07c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012de56  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c74  00000000  00000000  0012de9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00134b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009ee0 	.word	0x08009ee0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08009ee0 	.word	0x08009ee0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2f>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b74:	bf24      	itt	cs
 8000b76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b7e:	d90d      	bls.n	8000b9c <__aeabi_d2f+0x30>
 8000b80:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b8c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b94:	bf08      	it	eq
 8000b96:	f020 0001 	biceq.w	r0, r0, #1
 8000b9a:	4770      	bx	lr
 8000b9c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ba0:	d121      	bne.n	8000be6 <__aeabi_d2f+0x7a>
 8000ba2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ba6:	bfbc      	itt	lt
 8000ba8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bac:	4770      	bxlt	lr
 8000bae:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bb2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb6:	f1c2 0218 	rsb	r2, r2, #24
 8000bba:	f1c2 0c20 	rsb	ip, r2, #32
 8000bbe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc6:	bf18      	it	ne
 8000bc8:	f040 0001 	orrne.w	r0, r0, #1
 8000bcc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd8:	ea40 000c 	orr.w	r0, r0, ip
 8000bdc:	fa23 f302 	lsr.w	r3, r3, r2
 8000be0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be4:	e7cc      	b.n	8000b80 <__aeabi_d2f+0x14>
 8000be6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bea:	d107      	bne.n	8000bfc <__aeabi_d2f+0x90>
 8000bec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bf6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bfa:	4770      	bxne	lr
 8000bfc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c00:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c04:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <__aeabi_uldivmod>:
 8000c0c:	b953      	cbnz	r3, 8000c24 <__aeabi_uldivmod+0x18>
 8000c0e:	b94a      	cbnz	r2, 8000c24 <__aeabi_uldivmod+0x18>
 8000c10:	2900      	cmp	r1, #0
 8000c12:	bf08      	it	eq
 8000c14:	2800      	cmpeq	r0, #0
 8000c16:	bf1c      	itt	ne
 8000c18:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c1c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c20:	f000 b96a 	b.w	8000ef8 <__aeabi_idiv0>
 8000c24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c2c:	f000 f806 	bl	8000c3c <__udivmoddi4>
 8000c30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c38:	b004      	add	sp, #16
 8000c3a:	4770      	bx	lr

08000c3c <__udivmoddi4>:
 8000c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c40:	9d08      	ldr	r5, [sp, #32]
 8000c42:	460c      	mov	r4, r1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d14e      	bne.n	8000ce6 <__udivmoddi4+0xaa>
 8000c48:	4694      	mov	ip, r2
 8000c4a:	458c      	cmp	ip, r1
 8000c4c:	4686      	mov	lr, r0
 8000c4e:	fab2 f282 	clz	r2, r2
 8000c52:	d962      	bls.n	8000d1a <__udivmoddi4+0xde>
 8000c54:	b14a      	cbz	r2, 8000c6a <__udivmoddi4+0x2e>
 8000c56:	f1c2 0320 	rsb	r3, r2, #32
 8000c5a:	4091      	lsls	r1, r2
 8000c5c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c64:	4319      	orrs	r1, r3
 8000c66:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6e:	fa1f f68c 	uxth.w	r6, ip
 8000c72:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c76:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c7a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c82:	fb04 f106 	mul.w	r1, r4, r6
 8000c86:	4299      	cmp	r1, r3
 8000c88:	d90a      	bls.n	8000ca0 <__udivmoddi4+0x64>
 8000c8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c92:	f080 8112 	bcs.w	8000eba <__udivmoddi4+0x27e>
 8000c96:	4299      	cmp	r1, r3
 8000c98:	f240 810f 	bls.w	8000eba <__udivmoddi4+0x27e>
 8000c9c:	3c02      	subs	r4, #2
 8000c9e:	4463      	add	r3, ip
 8000ca0:	1a59      	subs	r1, r3, r1
 8000ca2:	fa1f f38e 	uxth.w	r3, lr
 8000ca6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000caa:	fb07 1110 	mls	r1, r7, r0, r1
 8000cae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb2:	fb00 f606 	mul.w	r6, r0, r6
 8000cb6:	429e      	cmp	r6, r3
 8000cb8:	d90a      	bls.n	8000cd0 <__udivmoddi4+0x94>
 8000cba:	eb1c 0303 	adds.w	r3, ip, r3
 8000cbe:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000cc2:	f080 80fc 	bcs.w	8000ebe <__udivmoddi4+0x282>
 8000cc6:	429e      	cmp	r6, r3
 8000cc8:	f240 80f9 	bls.w	8000ebe <__udivmoddi4+0x282>
 8000ccc:	4463      	add	r3, ip
 8000cce:	3802      	subs	r0, #2
 8000cd0:	1b9b      	subs	r3, r3, r6
 8000cd2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	b11d      	cbz	r5, 8000ce2 <__udivmoddi4+0xa6>
 8000cda:	40d3      	lsrs	r3, r2
 8000cdc:	2200      	movs	r2, #0
 8000cde:	e9c5 3200 	strd	r3, r2, [r5]
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d905      	bls.n	8000cf6 <__udivmoddi4+0xba>
 8000cea:	b10d      	cbz	r5, 8000cf0 <__udivmoddi4+0xb4>
 8000cec:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4608      	mov	r0, r1
 8000cf4:	e7f5      	b.n	8000ce2 <__udivmoddi4+0xa6>
 8000cf6:	fab3 f183 	clz	r1, r3
 8000cfa:	2900      	cmp	r1, #0
 8000cfc:	d146      	bne.n	8000d8c <__udivmoddi4+0x150>
 8000cfe:	42a3      	cmp	r3, r4
 8000d00:	d302      	bcc.n	8000d08 <__udivmoddi4+0xcc>
 8000d02:	4290      	cmp	r0, r2
 8000d04:	f0c0 80f0 	bcc.w	8000ee8 <__udivmoddi4+0x2ac>
 8000d08:	1a86      	subs	r6, r0, r2
 8000d0a:	eb64 0303 	sbc.w	r3, r4, r3
 8000d0e:	2001      	movs	r0, #1
 8000d10:	2d00      	cmp	r5, #0
 8000d12:	d0e6      	beq.n	8000ce2 <__udivmoddi4+0xa6>
 8000d14:	e9c5 6300 	strd	r6, r3, [r5]
 8000d18:	e7e3      	b.n	8000ce2 <__udivmoddi4+0xa6>
 8000d1a:	2a00      	cmp	r2, #0
 8000d1c:	f040 8090 	bne.w	8000e40 <__udivmoddi4+0x204>
 8000d20:	eba1 040c 	sub.w	r4, r1, ip
 8000d24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d28:	fa1f f78c 	uxth.w	r7, ip
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d36:	fb08 4416 	mls	r4, r8, r6, r4
 8000d3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d3e:	fb07 f006 	mul.w	r0, r7, r6
 8000d42:	4298      	cmp	r0, r3
 8000d44:	d908      	bls.n	8000d58 <__udivmoddi4+0x11c>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d4e:	d202      	bcs.n	8000d56 <__udivmoddi4+0x11a>
 8000d50:	4298      	cmp	r0, r3
 8000d52:	f200 80cd 	bhi.w	8000ef0 <__udivmoddi4+0x2b4>
 8000d56:	4626      	mov	r6, r4
 8000d58:	1a1c      	subs	r4, r3, r0
 8000d5a:	fa1f f38e 	uxth.w	r3, lr
 8000d5e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d62:	fb08 4410 	mls	r4, r8, r0, r4
 8000d66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d6a:	fb00 f707 	mul.w	r7, r0, r7
 8000d6e:	429f      	cmp	r7, r3
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x148>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x146>
 8000d7c:	429f      	cmp	r7, r3
 8000d7e:	f200 80b0 	bhi.w	8000ee2 <__udivmoddi4+0x2a6>
 8000d82:	4620      	mov	r0, r4
 8000d84:	1bdb      	subs	r3, r3, r7
 8000d86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d8a:	e7a5      	b.n	8000cd8 <__udivmoddi4+0x9c>
 8000d8c:	f1c1 0620 	rsb	r6, r1, #32
 8000d90:	408b      	lsls	r3, r1
 8000d92:	fa22 f706 	lsr.w	r7, r2, r6
 8000d96:	431f      	orrs	r7, r3
 8000d98:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d9c:	fa04 f301 	lsl.w	r3, r4, r1
 8000da0:	ea43 030c 	orr.w	r3, r3, ip
 8000da4:	40f4      	lsrs	r4, r6
 8000da6:	fa00 f801 	lsl.w	r8, r0, r1
 8000daa:	0c38      	lsrs	r0, r7, #16
 8000dac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000db0:	fbb4 fef0 	udiv	lr, r4, r0
 8000db4:	fa1f fc87 	uxth.w	ip, r7
 8000db8:	fb00 441e 	mls	r4, r0, lr, r4
 8000dbc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc0:	fb0e f90c 	mul.w	r9, lr, ip
 8000dc4:	45a1      	cmp	r9, r4
 8000dc6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dca:	d90a      	bls.n	8000de2 <__udivmoddi4+0x1a6>
 8000dcc:	193c      	adds	r4, r7, r4
 8000dce:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dd2:	f080 8084 	bcs.w	8000ede <__udivmoddi4+0x2a2>
 8000dd6:	45a1      	cmp	r9, r4
 8000dd8:	f240 8081 	bls.w	8000ede <__udivmoddi4+0x2a2>
 8000ddc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000de0:	443c      	add	r4, r7
 8000de2:	eba4 0409 	sub.w	r4, r4, r9
 8000de6:	fa1f f983 	uxth.w	r9, r3
 8000dea:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dee:	fb00 4413 	mls	r4, r0, r3, r4
 8000df2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000df6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dfa:	45a4      	cmp	ip, r4
 8000dfc:	d907      	bls.n	8000e0e <__udivmoddi4+0x1d2>
 8000dfe:	193c      	adds	r4, r7, r4
 8000e00:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e04:	d267      	bcs.n	8000ed6 <__udivmoddi4+0x29a>
 8000e06:	45a4      	cmp	ip, r4
 8000e08:	d965      	bls.n	8000ed6 <__udivmoddi4+0x29a>
 8000e0a:	3b02      	subs	r3, #2
 8000e0c:	443c      	add	r4, r7
 8000e0e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e12:	fba0 9302 	umull	r9, r3, r0, r2
 8000e16:	eba4 040c 	sub.w	r4, r4, ip
 8000e1a:	429c      	cmp	r4, r3
 8000e1c:	46ce      	mov	lr, r9
 8000e1e:	469c      	mov	ip, r3
 8000e20:	d351      	bcc.n	8000ec6 <__udivmoddi4+0x28a>
 8000e22:	d04e      	beq.n	8000ec2 <__udivmoddi4+0x286>
 8000e24:	b155      	cbz	r5, 8000e3c <__udivmoddi4+0x200>
 8000e26:	ebb8 030e 	subs.w	r3, r8, lr
 8000e2a:	eb64 040c 	sbc.w	r4, r4, ip
 8000e2e:	fa04 f606 	lsl.w	r6, r4, r6
 8000e32:	40cb      	lsrs	r3, r1
 8000e34:	431e      	orrs	r6, r3
 8000e36:	40cc      	lsrs	r4, r1
 8000e38:	e9c5 6400 	strd	r6, r4, [r5]
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	e750      	b.n	8000ce2 <__udivmoddi4+0xa6>
 8000e40:	f1c2 0320 	rsb	r3, r2, #32
 8000e44:	fa20 f103 	lsr.w	r1, r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa24 f303 	lsr.w	r3, r4, r3
 8000e50:	4094      	lsls	r4, r2
 8000e52:	430c      	orrs	r4, r1
 8000e54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e58:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e5c:	fa1f f78c 	uxth.w	r7, ip
 8000e60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e64:	fb08 3110 	mls	r1, r8, r0, r3
 8000e68:	0c23      	lsrs	r3, r4, #16
 8000e6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e6e:	fb00 f107 	mul.w	r1, r0, r7
 8000e72:	4299      	cmp	r1, r3
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x24c>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e7e:	d22c      	bcs.n	8000eda <__udivmoddi4+0x29e>
 8000e80:	4299      	cmp	r1, r3
 8000e82:	d92a      	bls.n	8000eda <__udivmoddi4+0x29e>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1a5b      	subs	r3, r3, r1
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e90:	fb08 3311 	mls	r3, r8, r1, r3
 8000e94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e98:	fb01 f307 	mul.w	r3, r1, r7
 8000e9c:	42a3      	cmp	r3, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x276>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ea8:	d213      	bcs.n	8000ed2 <__udivmoddi4+0x296>
 8000eaa:	42a3      	cmp	r3, r4
 8000eac:	d911      	bls.n	8000ed2 <__udivmoddi4+0x296>
 8000eae:	3902      	subs	r1, #2
 8000eb0:	4464      	add	r4, ip
 8000eb2:	1ae4      	subs	r4, r4, r3
 8000eb4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000eb8:	e739      	b.n	8000d2e <__udivmoddi4+0xf2>
 8000eba:	4604      	mov	r4, r0
 8000ebc:	e6f0      	b.n	8000ca0 <__udivmoddi4+0x64>
 8000ebe:	4608      	mov	r0, r1
 8000ec0:	e706      	b.n	8000cd0 <__udivmoddi4+0x94>
 8000ec2:	45c8      	cmp	r8, r9
 8000ec4:	d2ae      	bcs.n	8000e24 <__udivmoddi4+0x1e8>
 8000ec6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eca:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ece:	3801      	subs	r0, #1
 8000ed0:	e7a8      	b.n	8000e24 <__udivmoddi4+0x1e8>
 8000ed2:	4631      	mov	r1, r6
 8000ed4:	e7ed      	b.n	8000eb2 <__udivmoddi4+0x276>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	e799      	b.n	8000e0e <__udivmoddi4+0x1d2>
 8000eda:	4630      	mov	r0, r6
 8000edc:	e7d4      	b.n	8000e88 <__udivmoddi4+0x24c>
 8000ede:	46d6      	mov	lr, sl
 8000ee0:	e77f      	b.n	8000de2 <__udivmoddi4+0x1a6>
 8000ee2:	4463      	add	r3, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e74d      	b.n	8000d84 <__udivmoddi4+0x148>
 8000ee8:	4606      	mov	r6, r0
 8000eea:	4623      	mov	r3, r4
 8000eec:	4608      	mov	r0, r1
 8000eee:	e70f      	b.n	8000d10 <__udivmoddi4+0xd4>
 8000ef0:	3e02      	subs	r6, #2
 8000ef2:	4463      	add	r3, ip
 8000ef4:	e730      	b.n	8000d58 <__udivmoddi4+0x11c>
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <myComfyPrint>:

extern UART_HandleTypeDef huart2;

uint8_t buff[2048] = { 0 };

void myComfyPrint(const char* string){
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	strncpy((char*) buff, string, sizeof(buff));
 8000f04:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f08:	6879      	ldr	r1, [r7, #4]
 8000f0a:	4809      	ldr	r0, [pc, #36]	@ (8000f30 <myComfyPrint+0x34>)
 8000f0c:	f008 f89c 	bl	8009048 <strncpy>
	HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8000f10:	4807      	ldr	r0, [pc, #28]	@ (8000f30 <myComfyPrint+0x34>)
 8000f12:	f7ff f97d 	bl	8000210 <strlen>
 8000f16:	4603      	mov	r3, r0
 8000f18:	b29a      	uxth	r2, r3
 8000f1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f1e:	4904      	ldr	r1, [pc, #16]	@ (8000f30 <myComfyPrint+0x34>)
 8000f20:	4804      	ldr	r0, [pc, #16]	@ (8000f34 <myComfyPrint+0x38>)
 8000f22:	f004 fc35 	bl	8005790 <HAL_UART_Transmit>
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	2000007c 	.word	0x2000007c
 8000f34:	20000918 	.word	0x20000918

08000f38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f38:	b5b0      	push	{r4, r5, r7, lr}
 8000f3a:	b0c6      	sub	sp, #280	@ 0x118
 8000f3c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f3e:	f001 faa7 	bl	8002490 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f42:	f000 f93d 	bl	80011c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f46:	f000 fa65 	bl	8001414 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f4a:	f000 fa39 	bl	80013c0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000f4e:	f000 f9a5 	bl	800129c <MX_I2C1_Init>
  MX_TIM3_Init();
 8000f52:	f000 f9d1 	bl	80012f8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  //initialize mpu6050
  HAL_Delay(1000);
 8000f56:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f5a:	f001 fadb 	bl	8002514 <HAL_Delay>
  while(mpu6050_init() != 0){
 8000f5e:	e003      	b.n	8000f68 <main+0x30>
	  HAL_Delay(1000);
 8000f60:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f64:	f001 fad6 	bl	8002514 <HAL_Delay>
  while(mpu6050_init() != 0){
 8000f68:	f000 fe6a 	bl	8001c40 <mpu6050_init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d1f6      	bne.n	8000f60 <main+0x28>
	  //try until it worked
  }

  //initialize motors
  motor_init();
 8000f72:	f000 fe19 	bl	8001ba8 <motor_init>



  //while loop to wait until robot is in upright position
  //calculate angle from acceleration values
  float acc_angle_temp=1;
 8000f76:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000f7a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  static uint8_t done_already = 0;
  char myString[256] = { 0 };
 8000f7e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000f82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	3304      	adds	r3, #4
 8000f8c:	22fc      	movs	r2, #252	@ 0xfc
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4618      	mov	r0, r3
 8000f92:	f008 f851 	bl	8009038 <memset>
  mpu6050_values_t mpu_values;

  mpu6050_read(&mpu_values);
 8000f96:	463b      	mov	r3, r7
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f000 ffc5 	bl	8001f28 <mpu6050_read>

  if(done_already == 0){
 8000f9e:	4b74      	ldr	r3, [pc, #464]	@ (8001170 <main+0x238>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d171      	bne.n	800108a <main+0x152>
	  while(acc_angle_temp != 0){
 8000fa6:	e062      	b.n	800106e <main+0x136>
		  acc_angle_temp = atan2(mpu_values.acc_x, mpu_values.acc_z)*RAD_TO_DEG;	//*(180/M_PI) to convert from radian to degree
 8000fa8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000fac:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000fb0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fad5 	bl	8000564 <__aeabi_i2d>
 8000fba:	4604      	mov	r4, r0
 8000fbc:	460d      	mov	r5, r1
 8000fbe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000fc2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000fc6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff faca 	bl	8000564 <__aeabi_i2d>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	ec43 2b11 	vmov	d1, r2, r3
 8000fd8:	ec45 4b10 	vmov	d0, r4, r5
 8000fdc:	f008 fd16 	bl	8009a0c <atan2>
 8000fe0:	ec51 0b10 	vmov	r0, r1, d0
 8000fe4:	f04f 0200 	mov.w	r2, #0
 8000fe8:	4b62      	ldr	r3, [pc, #392]	@ (8001174 <main+0x23c>)
 8000fea:	f7ff fb25 	bl	8000638 <__aeabi_dmul>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	4610      	mov	r0, r2
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	a35c      	add	r3, pc, #368	@ (adr r3, 8001168 <main+0x230>)
 8000ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ffc:	f7ff fc46 	bl	800088c <__aeabi_ddiv>
 8001000:	4602      	mov	r2, r0
 8001002:	460b      	mov	r3, r1
 8001004:	4610      	mov	r0, r2
 8001006:	4619      	mov	r1, r3
 8001008:	f7ff fdb0 	bl	8000b6c <__aeabi_d2f>
 800100c:	4603      	mov	r3, r0
 800100e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
		  if(isnan(acc_angle_temp)){
 8001012:	ed97 7a43 	vldr	s14, [r7, #268]	@ 0x10c
 8001016:	edd7 7a43 	vldr	s15, [r7, #268]	@ 0x10c
 800101a:	eeb4 7a67 	vcmp.f32	s14, s15
 800101e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001022:	d70b      	bvc.n	800103c <main+0x104>
			  sprintf((char*) myString, "acc_angle_temp is NaN\r\n");
 8001024:	f107 030c 	add.w	r3, r7, #12
 8001028:	4953      	ldr	r1, [pc, #332]	@ (8001178 <main+0x240>)
 800102a:	4618      	mov	r0, r3
 800102c:	f007 ffe4 	bl	8008ff8 <siprintf>
			  myComfyPrint(myString);
 8001030:	f107 030c 	add.w	r3, r7, #12
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff61 	bl	8000efc <myComfyPrint>
 800103a:	e014      	b.n	8001066 <main+0x12e>
		  }
		  else{
			  sprintf((char*) myString, "acc_angle_temp*100 = %d\r\n", (int) (acc_angle_temp*100));	//apparently floating numbers are disabled in print funcitons by defautl if using newlib
 800103c:	edd7 7a43 	vldr	s15, [r7, #268]	@ 0x10c
 8001040:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 800117c <main+0x244>
 8001044:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001048:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	ee17 2a90 	vmov	r2, s15
 8001054:	494a      	ldr	r1, [pc, #296]	@ (8001180 <main+0x248>)
 8001056:	4618      	mov	r0, r3
 8001058:	f007 ffce 	bl	8008ff8 <siprintf>
			  myComfyPrint(myString);
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ff4b 	bl	8000efc <myComfyPrint>
		  }

		  mpu6050_read(&mpu_values);
 8001066:	463b      	mov	r3, r7
 8001068:	4618      	mov	r0, r3
 800106a:	f000 ff5d 	bl	8001f28 <mpu6050_read>
	  while(acc_angle_temp != 0){
 800106e:	edd7 7a43 	vldr	s15, [r7, #268]	@ 0x10c
 8001072:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800107a:	d195      	bne.n	8000fa8 <main+0x70>
	  }
	  done_already = 1;
 800107c:	4b3c      	ldr	r3, [pc, #240]	@ (8001170 <main+0x238>)
 800107e:	2201      	movs	r2, #1
 8001080:	701a      	strb	r2, [r3, #0]
	  mpu6050_read(&mpu_values);
 8001082:	463b      	mov	r3, r7
 8001084:	4618      	mov	r0, r3
 8001086:	f000 ff4f 	bl	8001f28 <mpu6050_read>
  }
  sprintf((char*) myString, "Acceleration X = %d\r\nAcceleration Y = %d\r\nAcceleration Z = %d\r\n", mpu_values.acc_x, mpu_values.acc_y, mpu_values.acc_z);
 800108a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800108e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001092:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001096:	461a      	mov	r2, r3
 8001098:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800109c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80010a0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80010a4:	4619      	mov	r1, r3
 80010a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80010aa:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80010ae:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80010b2:	f107 000c 	add.w	r0, r7, #12
 80010b6:	9300      	str	r3, [sp, #0]
 80010b8:	460b      	mov	r3, r1
 80010ba:	4932      	ldr	r1, [pc, #200]	@ (8001184 <main+0x24c>)
 80010bc:	f007 ff9c 	bl	8008ff8 <siprintf>
  myComfyPrint(myString);
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ff19 	bl	8000efc <myComfyPrint>
  sprintf((char*) myString, "Gyroscope X = %d\r\nGyroscope Y = %d\r\nGyroscope Z = %d\r\n", mpu_values.gyro_x, mpu_values.gyro_y, mpu_values.gyro_z);
 80010ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80010ce:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80010d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010d6:	461a      	mov	r2, r3
 80010d8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80010dc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80010e0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010e4:	4619      	mov	r1, r3
 80010e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80010ea:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80010ee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010f2:	f107 000c 	add.w	r0, r7, #12
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	460b      	mov	r3, r1
 80010fa:	4923      	ldr	r1, [pc, #140]	@ (8001188 <main+0x250>)
 80010fc:	f007 ff7c 	bl	8008ff8 <siprintf>
  myComfyPrint(myString);
 8001100:	f107 030c 	add.w	r3, r7, #12
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff fef9 	bl	8000efc <myComfyPrint>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800110a:	f004 ff41 	bl	8005f90 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of mpu6050_values_queue */
  mpu6050_values_queueHandle = osMessageQueueNew (8, sizeof(mpu6050_values_t), &mpu6050_values_queue_attributes);
 800110e:	4a1f      	ldr	r2, [pc, #124]	@ (800118c <main+0x254>)
 8001110:	210c      	movs	r1, #12
 8001112:	2008      	movs	r0, #8
 8001114:	f005 f836 	bl	8006184 <osMessageQueueNew>
 8001118:	4603      	mov	r3, r0
 800111a:	4a1d      	ldr	r2, [pc, #116]	@ (8001190 <main+0x258>)
 800111c:	6013      	str	r3, [r2, #0]

  /* creation of motor_value_queue */
  motor_value_queueHandle = osMessageQueueNew (1, sizeof(int32_t), &motor_value_queue_attributes);
 800111e:	4a1d      	ldr	r2, [pc, #116]	@ (8001194 <main+0x25c>)
 8001120:	2104      	movs	r1, #4
 8001122:	2001      	movs	r0, #1
 8001124:	f005 f82e 	bl	8006184 <osMessageQueueNew>
 8001128:	4603      	mov	r3, r0
 800112a:	4a1b      	ldr	r2, [pc, #108]	@ (8001198 <main+0x260>)
 800112c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task_ReadMPU605 */
  Task_ReadMPU605Handle = osThreadNew(task_read_mpu6050, NULL, &Task_ReadMPU605_attributes);
 800112e:	4a1b      	ldr	r2, [pc, #108]	@ (800119c <main+0x264>)
 8001130:	2100      	movs	r1, #0
 8001132:	481b      	ldr	r0, [pc, #108]	@ (80011a0 <main+0x268>)
 8001134:	f004 ff94 	bl	8006060 <osThreadNew>
 8001138:	4603      	mov	r3, r0
 800113a:	4a1a      	ldr	r2, [pc, #104]	@ (80011a4 <main+0x26c>)
 800113c:	6013      	str	r3, [r2, #0]

  /* creation of Task_CalcValues */
  Task_CalcValuesHandle = osThreadNew(task_calculate_motor_values, NULL, &Task_CalcValues_attributes);
 800113e:	4a1a      	ldr	r2, [pc, #104]	@ (80011a8 <main+0x270>)
 8001140:	2100      	movs	r1, #0
 8001142:	481a      	ldr	r0, [pc, #104]	@ (80011ac <main+0x274>)
 8001144:	f004 ff8c 	bl	8006060 <osThreadNew>
 8001148:	4603      	mov	r3, r0
 800114a:	4a19      	ldr	r2, [pc, #100]	@ (80011b0 <main+0x278>)
 800114c:	6013      	str	r3, [r2, #0]

  /* creation of Task_CtrlMotor */
  Task_CtrlMotorHandle = osThreadNew(task_control_motors, NULL, &Task_CtrlMotor_attributes);
 800114e:	4a19      	ldr	r2, [pc, #100]	@ (80011b4 <main+0x27c>)
 8001150:	2100      	movs	r1, #0
 8001152:	4819      	ldr	r0, [pc, #100]	@ (80011b8 <main+0x280>)
 8001154:	f004 ff84 	bl	8006060 <osThreadNew>
 8001158:	4603      	mov	r3, r0
 800115a:	4a18      	ldr	r2, [pc, #96]	@ (80011bc <main+0x284>)
 800115c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800115e:	f004 ff3b 	bl	8005fd8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001162:	bf00      	nop
 8001164:	e7fd      	b.n	8001162 <main+0x22a>
 8001166:	bf00      	nop
 8001168:	54442d18 	.word	0x54442d18
 800116c:	400921fb 	.word	0x400921fb
 8001170:	20000974 	.word	0x20000974
 8001174:	40668000 	.word	0x40668000
 8001178:	08009f54 	.word	0x08009f54
 800117c:	42c80000 	.word	0x42c80000
 8001180:	08009f6c 	.word	0x08009f6c
 8001184:	08009f88 	.word	0x08009f88
 8001188:	08009fc8 	.word	0x08009fc8
 800118c:	0800a1b0 	.word	0x0800a1b0
 8001190:	2000096c 	.word	0x2000096c
 8001194:	0800a1c8 	.word	0x0800a1c8
 8001198:	20000970 	.word	0x20000970
 800119c:	0800a144 	.word	0x0800a144
 80011a0:	08001515 	.word	0x08001515
 80011a4:	20000960 	.word	0x20000960
 80011a8:	0800a168 	.word	0x0800a168
 80011ac:	080015f9 	.word	0x080015f9
 80011b0:	20000964 	.word	0x20000964
 80011b4:	0800a18c 	.word	0x0800a18c
 80011b8:	08001b15 	.word	0x08001b15
 80011bc:	20000968 	.word	0x20000968

080011c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b094      	sub	sp, #80	@ 0x50
 80011c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011c6:	f107 031c 	add.w	r3, r7, #28
 80011ca:	2234      	movs	r2, #52	@ 0x34
 80011cc:	2100      	movs	r1, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f007 ff32 	bl	8009038 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d4:	f107 0308 	add.w	r3, r7, #8
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e4:	2300      	movs	r3, #0
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001294 <SystemClock_Config+0xd4>)
 80011ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ec:	4a29      	ldr	r2, [pc, #164]	@ (8001294 <SystemClock_Config+0xd4>)
 80011ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80011f4:	4b27      	ldr	r3, [pc, #156]	@ (8001294 <SystemClock_Config+0xd4>)
 80011f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011fc:	607b      	str	r3, [r7, #4]
 80011fe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001200:	2300      	movs	r3, #0
 8001202:	603b      	str	r3, [r7, #0]
 8001204:	4b24      	ldr	r3, [pc, #144]	@ (8001298 <SystemClock_Config+0xd8>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800120c:	4a22      	ldr	r2, [pc, #136]	@ (8001298 <SystemClock_Config+0xd8>)
 800120e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001212:	6013      	str	r3, [r2, #0]
 8001214:	4b20      	ldr	r3, [pc, #128]	@ (8001298 <SystemClock_Config+0xd8>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800121c:	603b      	str	r3, [r7, #0]
 800121e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001220:	2302      	movs	r3, #2
 8001222:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001224:	2301      	movs	r3, #1
 8001226:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001228:	2310      	movs	r3, #16
 800122a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800122c:	2302      	movs	r3, #2
 800122e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001230:	2300      	movs	r3, #0
 8001232:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001234:	2310      	movs	r3, #16
 8001236:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001238:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800123c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800123e:	2304      	movs	r3, #4
 8001240:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001242:	2302      	movs	r3, #2
 8001244:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001246:	2302      	movs	r3, #2
 8001248:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800124a:	f107 031c 	add.w	r3, r7, #28
 800124e:	4618      	mov	r0, r3
 8001250:	f003 f8e2 	bl	8004418 <HAL_RCC_OscConfig>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800125a:	f000 fc9f 	bl	8001b9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800125e:	230f      	movs	r3, #15
 8001260:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001262:	2302      	movs	r3, #2
 8001264:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001266:	2300      	movs	r3, #0
 8001268:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800126a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800126e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001270:	2300      	movs	r3, #0
 8001272:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001274:	f107 0308 	add.w	r3, r7, #8
 8001278:	2102      	movs	r1, #2
 800127a:	4618      	mov	r0, r3
 800127c:	f002 fd50 	bl	8003d20 <HAL_RCC_ClockConfig>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001286:	f000 fc89 	bl	8001b9c <Error_Handler>
  }
}
 800128a:	bf00      	nop
 800128c:	3750      	adds	r7, #80	@ 0x50
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40023800 	.word	0x40023800
 8001298:	40007000 	.word	0x40007000

0800129c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012a0:	4b12      	ldr	r3, [pc, #72]	@ (80012ec <MX_I2C1_Init+0x50>)
 80012a2:	4a13      	ldr	r2, [pc, #76]	@ (80012f0 <MX_I2C1_Init+0x54>)
 80012a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012a6:	4b11      	ldr	r3, [pc, #68]	@ (80012ec <MX_I2C1_Init+0x50>)
 80012a8:	4a12      	ldr	r2, [pc, #72]	@ (80012f4 <MX_I2C1_Init+0x58>)
 80012aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012ac:	4b0f      	ldr	r3, [pc, #60]	@ (80012ec <MX_I2C1_Init+0x50>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012b2:	4b0e      	ldr	r3, [pc, #56]	@ (80012ec <MX_I2C1_Init+0x50>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012b8:	4b0c      	ldr	r3, [pc, #48]	@ (80012ec <MX_I2C1_Init+0x50>)
 80012ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012c0:	4b0a      	ldr	r3, [pc, #40]	@ (80012ec <MX_I2C1_Init+0x50>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012c6:	4b09      	ldr	r3, [pc, #36]	@ (80012ec <MX_I2C1_Init+0x50>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012cc:	4b07      	ldr	r3, [pc, #28]	@ (80012ec <MX_I2C1_Init+0x50>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012d2:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <MX_I2C1_Init+0x50>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012d8:	4804      	ldr	r0, [pc, #16]	@ (80012ec <MX_I2C1_Init+0x50>)
 80012da:	f001 fbcf 	bl	8002a7c <HAL_I2C_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012e4:	f000 fc5a 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	2000087c 	.word	0x2000087c
 80012f0:	40005400 	.word	0x40005400
 80012f4:	000186a0 	.word	0x000186a0

080012f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08a      	sub	sp, #40	@ 0x28
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012fe:	f107 0320 	add.w	r3, r7, #32
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
 8001314:	611a      	str	r2, [r3, #16]
 8001316:	615a      	str	r2, [r3, #20]
 8001318:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800131a:	4b27      	ldr	r3, [pc, #156]	@ (80013b8 <MX_TIM3_Init+0xc0>)
 800131c:	4a27      	ldr	r2, [pc, #156]	@ (80013bc <MX_TIM3_Init+0xc4>)
 800131e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001320:	4b25      	ldr	r3, [pc, #148]	@ (80013b8 <MX_TIM3_Init+0xc0>)
 8001322:	2200      	movs	r2, #0
 8001324:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001326:	4b24      	ldr	r3, [pc, #144]	@ (80013b8 <MX_TIM3_Init+0xc0>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8400-1;
 800132c:	4b22      	ldr	r3, [pc, #136]	@ (80013b8 <MX_TIM3_Init+0xc0>)
 800132e:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001332:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001334:	4b20      	ldr	r3, [pc, #128]	@ (80013b8 <MX_TIM3_Init+0xc0>)
 8001336:	2200      	movs	r2, #0
 8001338:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800133a:	4b1f      	ldr	r3, [pc, #124]	@ (80013b8 <MX_TIM3_Init+0xc0>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001340:	481d      	ldr	r0, [pc, #116]	@ (80013b8 <MX_TIM3_Init+0xc0>)
 8001342:	f003 fbd1 	bl	8004ae8 <HAL_TIM_PWM_Init>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800134c:	f000 fc26 	bl	8001b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001350:	2300      	movs	r3, #0
 8001352:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001354:	2300      	movs	r3, #0
 8001356:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001358:	f107 0320 	add.w	r3, r7, #32
 800135c:	4619      	mov	r1, r3
 800135e:	4816      	ldr	r0, [pc, #88]	@ (80013b8 <MX_TIM3_Init+0xc0>)
 8001360:	f004 f936 	bl	80055d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800136a:	f000 fc17 	bl	8001b9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800136e:	2360      	movs	r3, #96	@ 0x60
 8001370:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	2200      	movs	r2, #0
 8001382:	4619      	mov	r1, r3
 8001384:	480c      	ldr	r0, [pc, #48]	@ (80013b8 <MX_TIM3_Init+0xc0>)
 8001386:	f003 fdb7 	bl	8004ef8 <HAL_TIM_PWM_ConfigChannel>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001390:	f000 fc04 	bl	8001b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001394:	1d3b      	adds	r3, r7, #4
 8001396:	2204      	movs	r2, #4
 8001398:	4619      	mov	r1, r3
 800139a:	4807      	ldr	r0, [pc, #28]	@ (80013b8 <MX_TIM3_Init+0xc0>)
 800139c:	f003 fdac 	bl	8004ef8 <HAL_TIM_PWM_ConfigChannel>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80013a6:	f000 fbf9 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013aa:	4803      	ldr	r0, [pc, #12]	@ (80013b8 <MX_TIM3_Init+0xc0>)
 80013ac:	f000 feba 	bl	8002124 <HAL_TIM_MspPostInit>

}
 80013b0:	bf00      	nop
 80013b2:	3728      	adds	r7, #40	@ 0x28
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	200008d0 	.word	0x200008d0
 80013bc:	40000400 	.word	0x40000400

080013c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013c4:	4b11      	ldr	r3, [pc, #68]	@ (800140c <MX_USART2_UART_Init+0x4c>)
 80013c6:	4a12      	ldr	r2, [pc, #72]	@ (8001410 <MX_USART2_UART_Init+0x50>)
 80013c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013ca:	4b10      	ldr	r3, [pc, #64]	@ (800140c <MX_USART2_UART_Init+0x4c>)
 80013cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013d2:	4b0e      	ldr	r3, [pc, #56]	@ (800140c <MX_USART2_UART_Init+0x4c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013d8:	4b0c      	ldr	r3, [pc, #48]	@ (800140c <MX_USART2_UART_Init+0x4c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013de:	4b0b      	ldr	r3, [pc, #44]	@ (800140c <MX_USART2_UART_Init+0x4c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013e4:	4b09      	ldr	r3, [pc, #36]	@ (800140c <MX_USART2_UART_Init+0x4c>)
 80013e6:	220c      	movs	r2, #12
 80013e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ea:	4b08      	ldr	r3, [pc, #32]	@ (800140c <MX_USART2_UART_Init+0x4c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f0:	4b06      	ldr	r3, [pc, #24]	@ (800140c <MX_USART2_UART_Init+0x4c>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013f6:	4805      	ldr	r0, [pc, #20]	@ (800140c <MX_USART2_UART_Init+0x4c>)
 80013f8:	f004 f97a 	bl	80056f0 <HAL_UART_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001402:	f000 fbcb 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000918 	.word	0x20000918
 8001410:	40004400 	.word	0x40004400

08001414 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08a      	sub	sp, #40	@ 0x28
 8001418:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141a:	f107 0314 	add.w	r3, r7, #20
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	60da      	str	r2, [r3, #12]
 8001428:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	4b35      	ldr	r3, [pc, #212]	@ (8001504 <MX_GPIO_Init+0xf0>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001432:	4a34      	ldr	r2, [pc, #208]	@ (8001504 <MX_GPIO_Init+0xf0>)
 8001434:	f043 0304 	orr.w	r3, r3, #4
 8001438:	6313      	str	r3, [r2, #48]	@ 0x30
 800143a:	4b32      	ldr	r3, [pc, #200]	@ (8001504 <MX_GPIO_Init+0xf0>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	f003 0304 	and.w	r3, r3, #4
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	4b2e      	ldr	r3, [pc, #184]	@ (8001504 <MX_GPIO_Init+0xf0>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144e:	4a2d      	ldr	r2, [pc, #180]	@ (8001504 <MX_GPIO_Init+0xf0>)
 8001450:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001454:	6313      	str	r3, [r2, #48]	@ 0x30
 8001456:	4b2b      	ldr	r3, [pc, #172]	@ (8001504 <MX_GPIO_Init+0xf0>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	60bb      	str	r3, [r7, #8]
 8001466:	4b27      	ldr	r3, [pc, #156]	@ (8001504 <MX_GPIO_Init+0xf0>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146a:	4a26      	ldr	r2, [pc, #152]	@ (8001504 <MX_GPIO_Init+0xf0>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	6313      	str	r3, [r2, #48]	@ 0x30
 8001472:	4b24      	ldr	r3, [pc, #144]	@ (8001504 <MX_GPIO_Init+0xf0>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	60bb      	str	r3, [r7, #8]
 800147c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	4b20      	ldr	r3, [pc, #128]	@ (8001504 <MX_GPIO_Init+0xf0>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001486:	4a1f      	ldr	r2, [pc, #124]	@ (8001504 <MX_GPIO_Init+0xf0>)
 8001488:	f043 0302 	orr.w	r3, r3, #2
 800148c:	6313      	str	r3, [r2, #48]	@ 0x30
 800148e:	4b1d      	ldr	r3, [pc, #116]	@ (8001504 <MX_GPIO_Init+0xf0>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|MOTOR2_DIR_Pin|MOTOR3_DIR_Pin, GPIO_PIN_RESET);
 800149a:	2200      	movs	r2, #0
 800149c:	f44f 7118 	mov.w	r1, #608	@ 0x260
 80014a0:	4819      	ldr	r0, [pc, #100]	@ (8001508 <MX_GPIO_Init+0xf4>)
 80014a2:	f001 fad1 	bl	8002a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80014a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014ac:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	4619      	mov	r1, r3
 80014bc:	4813      	ldr	r0, [pc, #76]	@ (800150c <MX_GPIO_Init+0xf8>)
 80014be:	f001 f92f 	bl	8002720 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin MOTOR2_DIR_Pin MOTOR3_DIR_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|MOTOR2_DIR_Pin|MOTOR3_DIR_Pin;
 80014c2:	f44f 7318 	mov.w	r3, #608	@ 0x260
 80014c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c8:	2301      	movs	r3, #1
 80014ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2300      	movs	r3, #0
 80014d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	4619      	mov	r1, r3
 80014da:	480b      	ldr	r0, [pc, #44]	@ (8001508 <MX_GPIO_Init+0xf4>)
 80014dc:	f001 f920 	bl	8002720 <HAL_GPIO_Init>

  /*Configure GPIO pin : MPU6050_INT_Pin */
  GPIO_InitStruct.Pin = MPU6050_INT_Pin;
 80014e0:	2320      	movs	r3, #32
 80014e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014e4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014ea:	2302      	movs	r3, #2
 80014ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MPU6050_INT_GPIO_Port, &GPIO_InitStruct);
 80014ee:	f107 0314 	add.w	r3, r7, #20
 80014f2:	4619      	mov	r1, r3
 80014f4:	4806      	ldr	r0, [pc, #24]	@ (8001510 <MX_GPIO_Init+0xfc>)
 80014f6:	f001 f913 	bl	8002720 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014fa:	bf00      	nop
 80014fc:	3728      	adds	r7, #40	@ 0x28
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40023800 	.word	0x40023800
 8001508:	40020000 	.word	0x40020000
 800150c:	40020800 	.word	0x40020800
 8001510:	40020400 	.word	0x40020400

08001514 <task_read_mpu6050>:

/* USER CODE BEGIN Header_task_read_mpu6050 */

/* USER CODE END Header_task_read_mpu6050 */
void task_read_mpu6050(void *argument)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08c      	sub	sp, #48	@ 0x30
 8001518:	af04      	add	r7, sp, #16
 800151a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	uint8_t read_mpu_buff[6] = { 0 };
 800151c:	2300      	movs	r3, #0
 800151e:	61bb      	str	r3, [r7, #24]
 8001520:	2300      	movs	r3, #0
 8001522:	83bb      	strh	r3, [r7, #28]

	for(;;)
	{

		//make sure there is room in queue
		while(osMessageQueueGetSpace(mpu6050_values_queueHandle) == 0){
 8001524:	bf00      	nop
 8001526:	4b31      	ldr	r3, [pc, #196]	@ (80015ec <task_read_mpu6050+0xd8>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f004 ff7c 	bl	8006428 <osMessageQueueGetSpace>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d0f7      	beq.n	8001526 <task_read_mpu6050+0x12>
			//busy waiting
		}

		//read accelerometer data
		HAL_I2C_Mem_Read(&hi2c1, (DEVICE_ADDRESS<<1) +1, REG_ACC_DATA, 1, read_mpu_buff, sizeof(read_mpu_buff), 100);
 8001536:	2364      	movs	r3, #100	@ 0x64
 8001538:	9302      	str	r3, [sp, #8]
 800153a:	2306      	movs	r3, #6
 800153c:	9301      	str	r3, [sp, #4]
 800153e:	f107 0318 	add.w	r3, r7, #24
 8001542:	9300      	str	r3, [sp, #0]
 8001544:	2301      	movs	r3, #1
 8001546:	223b      	movs	r2, #59	@ 0x3b
 8001548:	21d1      	movs	r1, #209	@ 0xd1
 800154a:	4829      	ldr	r0, [pc, #164]	@ (80015f0 <task_read_mpu6050+0xdc>)
 800154c:	f001 fcd4 	bl	8002ef8 <HAL_I2C_Mem_Read>
		mpu_values_temp.acc_x = (int16_t) (read_mpu_buff[0]<<8) + read_mpu_buff[1];
 8001550:	7e3b      	ldrb	r3, [r7, #24]
 8001552:	021b      	lsls	r3, r3, #8
 8001554:	b29b      	uxth	r3, r3
 8001556:	7e7a      	ldrb	r2, [r7, #25]
 8001558:	4413      	add	r3, r2
 800155a:	b29b      	uxth	r3, r3
 800155c:	b21b      	sxth	r3, r3
 800155e:	827b      	strh	r3, [r7, #18]
		mpu_values_temp.acc_y = (int16_t) (read_mpu_buff[2]<<8) + read_mpu_buff[3];
 8001560:	7ebb      	ldrb	r3, [r7, #26]
 8001562:	021b      	lsls	r3, r3, #8
 8001564:	b29b      	uxth	r3, r3
 8001566:	7efa      	ldrb	r2, [r7, #27]
 8001568:	4413      	add	r3, r2
 800156a:	b29b      	uxth	r3, r3
 800156c:	b21b      	sxth	r3, r3
 800156e:	82bb      	strh	r3, [r7, #20]
		mpu_values_temp.acc_z = (int16_t) (read_mpu_buff[4]<<8) + read_mpu_buff[5];
 8001570:	7f3b      	ldrb	r3, [r7, #28]
 8001572:	021b      	lsls	r3, r3, #8
 8001574:	b29b      	uxth	r3, r3
 8001576:	7f7a      	ldrb	r2, [r7, #29]
 8001578:	4413      	add	r3, r2
 800157a:	b29b      	uxth	r3, r3
 800157c:	b21b      	sxth	r3, r3
 800157e:	82fb      	strh	r3, [r7, #22]

		//read gyroscope data
		HAL_I2C_Mem_Read(&hi2c1, (DEVICE_ADDRESS<<1) +1, REG_GYRO_DATA, 1, read_mpu_buff, sizeof(read_mpu_buff), 100);
 8001580:	2364      	movs	r3, #100	@ 0x64
 8001582:	9302      	str	r3, [sp, #8]
 8001584:	2306      	movs	r3, #6
 8001586:	9301      	str	r3, [sp, #4]
 8001588:	f107 0318 	add.w	r3, r7, #24
 800158c:	9300      	str	r3, [sp, #0]
 800158e:	2301      	movs	r3, #1
 8001590:	2243      	movs	r2, #67	@ 0x43
 8001592:	21d1      	movs	r1, #209	@ 0xd1
 8001594:	4816      	ldr	r0, [pc, #88]	@ (80015f0 <task_read_mpu6050+0xdc>)
 8001596:	f001 fcaf 	bl	8002ef8 <HAL_I2C_Mem_Read>
		mpu_values_temp.gyro_x = (int16_t) (read_mpu_buff[0]<<8) + read_mpu_buff[1];
 800159a:	7e3b      	ldrb	r3, [r7, #24]
 800159c:	021b      	lsls	r3, r3, #8
 800159e:	b29b      	uxth	r3, r3
 80015a0:	7e7a      	ldrb	r2, [r7, #25]
 80015a2:	4413      	add	r3, r2
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	b21b      	sxth	r3, r3
 80015a8:	81bb      	strh	r3, [r7, #12]
		mpu_values_temp.gyro_y = (int16_t) (read_mpu_buff[2]<<8) + read_mpu_buff[3];
 80015aa:	7ebb      	ldrb	r3, [r7, #26]
 80015ac:	021b      	lsls	r3, r3, #8
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	7efa      	ldrb	r2, [r7, #27]
 80015b2:	4413      	add	r3, r2
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	b21b      	sxth	r3, r3
 80015b8:	81fb      	strh	r3, [r7, #14]
		mpu_values_temp.gyro_z = (int16_t) (read_mpu_buff[4]<<8) + read_mpu_buff[5];
 80015ba:	7f3b      	ldrb	r3, [r7, #28]
 80015bc:	021b      	lsls	r3, r3, #8
 80015be:	b29b      	uxth	r3, r3
 80015c0:	7f7a      	ldrb	r2, [r7, #29]
 80015c2:	4413      	add	r3, r2
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	b21b      	sxth	r3, r3
 80015c8:	823b      	strh	r3, [r7, #16]

		//apply offsets
		mpu_values_temp.gyro_y += GYRO_Y_OFFSET_1000;
 80015ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	330c      	adds	r3, #12
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	b21b      	sxth	r3, r3
 80015d6:	81fb      	strh	r3, [r7, #14]

		//send values to queue
		osMessageQueuePut(mpu6050_values_queueHandle, &mpu_values_temp, 0, osWaitForever);
 80015d8:	4b04      	ldr	r3, [pc, #16]	@ (80015ec <task_read_mpu6050+0xd8>)
 80015da:	6818      	ldr	r0, [r3, #0]
 80015dc:	f107 010c 	add.w	r1, r7, #12
 80015e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015e4:	2200      	movs	r2, #0
 80015e6:	f004 fe41 	bl	800626c <osMessageQueuePut>
		while(osMessageQueueGetSpace(mpu6050_values_queueHandle) == 0){
 80015ea:	e79b      	b.n	8001524 <task_read_mpu6050+0x10>
 80015ec:	2000096c 	.word	0x2000096c
 80015f0:	2000087c 	.word	0x2000087c
 80015f4:	00000000 	.word	0x00000000

080015f8 <task_calculate_motor_values>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_calculate_motor_values */
void task_calculate_motor_values(void *argument)
{
 80015f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80015fc:	b0c4      	sub	sp, #272	@ 0x110
 80015fe:	af00      	add	r7, sp, #0
 8001600:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001604:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001608:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN task_calculate_motor_values */

	  float acc_angle;
	  float gyro_rate, gyro_angle;
	  uint32_t current_time=(osKernelGetTickCount()*1000 / osKernelGetTickFreq()), last_time = current_time;
 800160a:	f004 fd0b 	bl	8006024 <osKernelGetTickCount>
 800160e:	4603      	mov	r3, r0
 8001610:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001614:	fb02 f403 	mul.w	r4, r2, r3
 8001618:	f004 fd19 	bl	800604e <osKernelGetTickFreq>
 800161c:	4603      	mov	r3, r0
 800161e:	fbb4 f3f3 	udiv	r3, r4, r3
 8001622:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8001626:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800162a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
	  float current_angle=0, last_angle=0;
 800162e:	f04f 0300 	mov.w	r3, #0
 8001632:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001636:	f04f 0300 	mov.w	r3, #0
 800163a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
	  float alpha = 0.9934;
 800163e:	4b38      	ldr	r3, [pc, #224]	@ (8001720 <task_calculate_motor_values+0x128>)
 8001640:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	  float target_angle=0;
 8001644:	f04f 0300 	mov.w	r3, #0
 8001648:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	  float deviation, deviation_sum=0;
 800164c:	f04f 0300 	mov.w	r3, #0
 8001650:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
	  float Kp=12, Ki=0, Kd=0;
 8001654:	4b33      	ldr	r3, [pc, #204]	@ (8001724 <task_calculate_motor_values+0x12c>)
 8001656:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800165a:	f04f 0300 	mov.w	r3, #0
 800165e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001662:	f04f 0300 	mov.w	r3, #0
 8001666:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
	  int32_t motor_value;
	  mpu6050_values_t mpu6050_temp_values;
	  mpu6050_values_t mpu_values;

	  //makeshift ringbuffer
	  mpu6050_values_t mpu_arr[8] = { 0 };
 800166a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800166e:	2260      	movs	r2, #96	@ 0x60
 8001670:	2100      	movs	r1, #0
 8001672:	4618      	mov	r0, r3
 8001674:	f007 fce0 	bl	8009038 <memset>
	  const uint8_t mpu_arr_size = sizeof(mpu_arr)/sizeof(mpu6050_values_t);
 8001678:	2308      	movs	r3, #8
 800167a:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
	  uint8_t mpu_arr_counter = 0;
 800167e:	2300      	movs	r3, #0
 8001680:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
  /* Infinite loop */
  for(;;)
  {

	  //wait for there to be values in the queue
	  while(osMessageQueueGetCount(mpu6050_values_queueHandle) == 0){
 8001684:	bf00      	nop
 8001686:	4b28      	ldr	r3, [pc, #160]	@ (8001728 <task_calculate_motor_values+0x130>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f004 feac 	bl	80063e8 <osMessageQueueGetCount>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d0f7      	beq.n	8001686 <task_calculate_motor_values+0x8e>
		  //busy waiting
	  }

	  //read values from queue into makeshift ringbuffer
	  for(int i=0; i<osMessageQueueGetCount(mpu6050_values_queueHandle); i++){
 8001696:	2300      	movs	r3, #0
 8001698:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800169c:	e020      	b.n	80016e0 <task_calculate_motor_values+0xe8>
		  osMessageQueueGet(mpu6050_values_queueHandle, &mpu_arr[mpu_arr_counter], NULL, osWaitForever);
 800169e:	4b22      	ldr	r3, [pc, #136]	@ (8001728 <task_calculate_motor_values+0x130>)
 80016a0:	6818      	ldr	r0, [r3, #0]
 80016a2:	f897 20ff 	ldrb.w	r2, [r7, #255]	@ 0xff
 80016a6:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80016aa:	4613      	mov	r3, r2
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	4413      	add	r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	4419      	add	r1, r3
 80016b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016b8:	2200      	movs	r2, #0
 80016ba:	f004 fe37 	bl	800632c <osMessageQueueGet>
		  mpu_arr_counter = (mpu_arr_counter+1) % mpu_arr_size;
 80016be:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 80016c2:	3301      	adds	r3, #1
 80016c4:	f897 20bf 	ldrb.w	r2, [r7, #191]	@ 0xbf
 80016c8:	fb93 f1f2 	sdiv	r1, r3, r2
 80016cc:	fb01 f202 	mul.w	r2, r1, r2
 80016d0:	1a9b      	subs	r3, r3, r2
 80016d2:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
	  for(int i=0; i<osMessageQueueGetCount(mpu6050_values_queueHandle); i++){
 80016d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80016da:	3301      	adds	r3, #1
 80016dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80016e0:	4b11      	ldr	r3, [pc, #68]	@ (8001728 <task_calculate_motor_values+0x130>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f004 fe7f 	bl	80063e8 <osMessageQueueGetCount>
 80016ea:	4602      	mov	r2, r0
 80016ec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d8d4      	bhi.n	800169e <task_calculate_motor_values+0xa6>
	  }

	  //calculate average mpu value
	  int32_t acc_x=0, acc_y=0, acc_z=0, gyro_x=0, gyro_y=0, gyro_z=0;	//temporary storage, because saving it directly in mpu_values.xy coudld make it overflow, bc it is int16_t
 80016f4:	2300      	movs	r3, #0
 80016f6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80016fa:	2300      	movs	r3, #0
 80016fc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8001700:	2300      	movs	r3, #0
 8001702:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001706:	2300      	movs	r3, #0
 8001708:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800170c:	2300      	movs	r3, #0
 800170e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001712:	2300      	movs	r3, #0
 8001714:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
	  for(int i=0; i<mpu_arr_size; i++){
 8001718:	2300      	movs	r3, #0
 800171a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800171e:	e076      	b.n	800180e <task_calculate_motor_values+0x216>
 8001720:	3f7e4f76 	.word	0x3f7e4f76
 8001724:	41400000 	.word	0x41400000
 8001728:	2000096c 	.word	0x2000096c
		  acc_x += (int32_t) mpu_arr[i].acc_x;
 800172c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001730:	4613      	mov	r3, r2
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	4413      	add	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800173c:	443b      	add	r3, r7
 800173e:	3bda      	subs	r3, #218	@ 0xda
 8001740:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001744:	461a      	mov	r2, r3
 8001746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800174a:	4413      	add	r3, r2
 800174c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
		  acc_y += (int32_t) mpu_arr[i].acc_y;
 8001750:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001754:	4613      	mov	r3, r2
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	4413      	add	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8001760:	443b      	add	r3, r7
 8001762:	3bd8      	subs	r3, #216	@ 0xd8
 8001764:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001768:	461a      	mov	r2, r3
 800176a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800176e:	4413      	add	r3, r2
 8001770:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
		  acc_z += (int32_t) mpu_arr[i].acc_z;
 8001774:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001778:	4613      	mov	r3, r2
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	4413      	add	r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8001784:	443b      	add	r3, r7
 8001786:	3bd6      	subs	r3, #214	@ 0xd6
 8001788:	f9b3 3000 	ldrsh.w	r3, [r3]
 800178c:	461a      	mov	r2, r3
 800178e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001792:	4413      	add	r3, r2
 8001794:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
		  gyro_x += (int32_t) mpu_arr[i].gyro_x;
 8001798:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800179c:	4613      	mov	r3, r2
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	4413      	add	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80017a8:	443b      	add	r3, r7
 80017aa:	3be0      	subs	r3, #224	@ 0xe0
 80017ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017b0:	461a      	mov	r2, r3
 80017b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80017b6:	4413      	add	r3, r2
 80017b8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
		  gyro_y += (int32_t) mpu_arr[i].gyro_y;
 80017bc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80017c0:	4613      	mov	r3, r2
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	4413      	add	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80017cc:	443b      	add	r3, r7
 80017ce:	3bde      	subs	r3, #222	@ 0xde
 80017d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017d4:	461a      	mov	r2, r3
 80017d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80017da:	4413      	add	r3, r2
 80017dc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
		  gyro_z += (int32_t) mpu_arr[i].gyro_z;
 80017e0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80017e4:	4613      	mov	r3, r2
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	4413      	add	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80017f0:	443b      	add	r3, r7
 80017f2:	3bdc      	subs	r3, #220	@ 0xdc
 80017f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017f8:	461a      	mov	r2, r3
 80017fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80017fe:	4413      	add	r3, r2
 8001800:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
	  for(int i=0; i<mpu_arr_size; i++){
 8001804:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001808:	3301      	adds	r3, #1
 800180a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800180e:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8001812:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001816:	429a      	cmp	r2, r3
 8001818:	db88      	blt.n	800172c <task_calculate_motor_values+0x134>
	  }
	  mpu_values.acc_x = (int16_t) (acc_x / mpu_arr_size);
 800181a:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 800181e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001822:	fb92 f3f3 	sdiv	r3, r2, r3
 8001826:	b21b      	sxth	r3, r3
 8001828:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
	  mpu_values.acc_y = (int16_t) (acc_y / mpu_arr_size);
 800182c:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8001830:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8001834:	fb92 f3f3 	sdiv	r3, r2, r3
 8001838:	b21b      	sxth	r3, r3
 800183a:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
	  mpu_values.acc_z = (int16_t) (acc_z / mpu_arr_size);
 800183e:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8001842:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8001846:	fb92 f3f3 	sdiv	r3, r2, r3
 800184a:	b21b      	sxth	r3, r3
 800184c:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
	  mpu_values.gyro_x = (int16_t) (gyro_x / mpu_arr_size);
 8001850:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8001854:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8001858:	fb92 f3f3 	sdiv	r3, r2, r3
 800185c:	b21b      	sxth	r3, r3
 800185e:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
	  mpu_values.gyro_y = (int16_t) (gyro_y / mpu_arr_size);
 8001862:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8001866:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800186a:	fb92 f3f3 	sdiv	r3, r2, r3
 800186e:	b21b      	sxth	r3, r3
 8001870:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
	  mpu_values.gyro_z = (int16_t) (gyro_z / mpu_arr_size);
 8001874:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8001878:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800187c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001880:	b21b      	sxth	r3, r3
 8001882:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

	  {char temp_string[32] = {0};
 8001886:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800188a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	3304      	adds	r3, #4
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]
 80018a0:	615a      	str	r2, [r3, #20]
 80018a2:	619a      	str	r2, [r3, #24]
	  sprintf(temp_string, "mpu_values.acc_x = %d\r\n", mpu_values.acc_x);
 80018a4:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	@ 0x96
 80018a8:	461a      	mov	r2, r3
 80018aa:	f107 030c 	add.w	r3, r7, #12
 80018ae:	4992      	ldr	r1, [pc, #584]	@ (8001af8 <task_calculate_motor_values+0x500>)
 80018b0:	4618      	mov	r0, r3
 80018b2:	f007 fba1 	bl	8008ff8 <siprintf>
	  myComfyPrint(temp_string);}
 80018b6:	f107 030c 	add.w	r3, r7, #12
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff fb1e 	bl	8000efc <myComfyPrint>


	  //calculate angle from acceleration values
	  acc_angle = atan2(mpu_values.acc_x, mpu_values.acc_z)*RAD_TO_DEG;	//*(180/M_PI) to convert from radian to degree
 80018c0:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	@ 0x96
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7fe fe4d 	bl	8000564 <__aeabi_i2d>
 80018ca:	4604      	mov	r4, r0
 80018cc:	460d      	mov	r5, r1
 80018ce:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	@ 0x9a
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fe46 	bl	8000564 <__aeabi_i2d>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	ec43 2b11 	vmov	d1, r2, r3
 80018e0:	ec45 4b10 	vmov	d0, r4, r5
 80018e4:	f008 f892 	bl	8009a0c <atan2>
 80018e8:	ec51 0b10 	vmov	r0, r1, d0
 80018ec:	f04f 0200 	mov.w	r2, #0
 80018f0:	4b82      	ldr	r3, [pc, #520]	@ (8001afc <task_calculate_motor_values+0x504>)
 80018f2:	f7fe fea1 	bl	8000638 <__aeabi_dmul>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	4610      	mov	r0, r2
 80018fc:	4619      	mov	r1, r3
 80018fe:	a37a      	add	r3, pc, #488	@ (adr r3, 8001ae8 <task_calculate_motor_values+0x4f0>)
 8001900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001904:	f7fe ffc2 	bl	800088c <__aeabi_ddiv>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4610      	mov	r0, r2
 800190e:	4619      	mov	r1, r3
 8001910:	f7ff f92c 	bl	8000b6c <__aeabi_d2f>
 8001914:	4603      	mov	r3, r0
 8001916:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

	  //calculate angle from gyroscope
	  gyro_rate = mpu_values.gyro_y * (1000.0/INT16_MAX);	//500, because that is the range that the mpu6050 is set to currently
 800191a:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	@ 0x92
 800191e:	4618      	mov	r0, r3
 8001920:	f7fe fe20 	bl	8000564 <__aeabi_i2d>
 8001924:	a372      	add	r3, pc, #456	@ (adr r3, 8001af0 <task_calculate_motor_values+0x4f8>)
 8001926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192a:	f7fe fe85 	bl	8000638 <__aeabi_dmul>
 800192e:	4602      	mov	r2, r0
 8001930:	460b      	mov	r3, r1
 8001932:	4610      	mov	r0, r2
 8001934:	4619      	mov	r1, r3
 8001936:	f7ff f919 	bl	8000b6c <__aeabi_d2f>
 800193a:	4603      	mov	r3, r0
 800193c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	  last_time = current_time;
 8001940:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001944:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
	  current_time = ((osKernelGetTickCount()*1000) / osKernelGetTickFreq());
 8001948:	f004 fb6c 	bl	8006024 <osKernelGetTickCount>
 800194c:	4603      	mov	r3, r0
 800194e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001952:	fb02 f403 	mul.w	r4, r2, r3
 8001956:	f004 fb7a 	bl	800604e <osKernelGetTickFreq>
 800195a:	4603      	mov	r3, r0
 800195c:	fbb4 f3f3 	udiv	r3, r4, r3
 8001960:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	  gyro_angle = gyro_angle + gyro_rate*((float)(current_time-last_time)/1000.0);
 8001964:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8001968:	f7fe fe0e 	bl	8000588 <__aeabi_f2d>
 800196c:	4604      	mov	r4, r0
 800196e:	460d      	mov	r5, r1
 8001970:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8001974:	f7fe fe08 	bl	8000588 <__aeabi_f2d>
 8001978:	4680      	mov	r8, r0
 800197a:	4689      	mov	r9, r1
 800197c:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001980:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	ee07 3a90 	vmov	s15, r3
 800198a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800198e:	ee17 0a90 	vmov	r0, s15
 8001992:	f7fe fdf9 	bl	8000588 <__aeabi_f2d>
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	4b59      	ldr	r3, [pc, #356]	@ (8001b00 <task_calculate_motor_values+0x508>)
 800199c:	f7fe ff76 	bl	800088c <__aeabi_ddiv>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	4640      	mov	r0, r8
 80019a6:	4649      	mov	r1, r9
 80019a8:	f7fe fe46 	bl	8000638 <__aeabi_dmul>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	4620      	mov	r0, r4
 80019b2:	4629      	mov	r1, r5
 80019b4:	f7fe fc8a 	bl	80002cc <__adddf3>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	4610      	mov	r0, r2
 80019be:	4619      	mov	r1, r3
 80019c0:	f7ff f8d4 	bl	8000b6c <__aeabi_d2f>
 80019c4:	4603      	mov	r3, r0
 80019c6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	  //combine both values into one
	  last_angle = current_angle;
 80019ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80019ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
	  current_angle = alpha * (gyro_angle) + (float) (1-alpha) * acc_angle;
 80019d2:	ed97 7a34 	vldr	s14, [r7, #208]	@ 0xd0
 80019d6:	edd7 7a43 	vldr	s15, [r7, #268]	@ 0x10c
 80019da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80019e2:	edd7 7a34 	vldr	s15, [r7, #208]	@ 0xd0
 80019e6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80019ea:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80019ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019f6:	edc7 7a41 	vstr	s15, [r7, #260]	@ 0x104


	  //PID
	  deviation = current_angle - target_angle;
 80019fa:	ed97 7a41 	vldr	s14, [r7, #260]	@ 0x104
 80019fe:	edd7 7a33 	vldr	s15, [r7, #204]	@ 0xcc
 8001a02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a06:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
	  deviation_sum = deviation_sum + deviation;
 8001a0a:	ed97 7a40 	vldr	s14, [r7, #256]	@ 0x100
 8001a0e:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8001a12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a16:	edc7 7a40 	vstr	s15, [r7, #256]	@ 0x100
	  //add constraining of max value of deviation_sum here

	  motor_value_in_percent = Kp*deviation + Ki*deviation_sum*((float)(current_time-last_time)/1000) - Kd*(current_angle-last_angle)/((float)(current_time-last_time)/1000);
 8001a1a:	ed97 7a32 	vldr	s14, [r7, #200]	@ 0xc8
 8001a1e:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8001a22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a26:	edd7 6a31 	vldr	s13, [r7, #196]	@ 0xc4
 8001a2a:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 8001a2e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a32:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001a36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	ee07 3a90 	vmov	s15, r3
 8001a40:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8001a44:	eddf 5a2f 	vldr	s11, [pc, #188]	@ 8001b04 <task_calculate_motor_values+0x50c>
 8001a48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001a4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a54:	edd7 6a41 	vldr	s13, [r7, #260]	@ 0x104
 8001a58:	edd7 7a35 	vldr	s15, [r7, #212]	@ 0xd4
 8001a5c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001a60:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 8001a64:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001a68:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001a6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	ee07 3a90 	vmov	s15, r3
 8001a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a7a:	eddf 5a22 	vldr	s11, [pc, #136]	@ 8001b04 <task_calculate_motor_values+0x50c>
 8001a7e:	eec7 6aa5 	vdiv.f32	s13, s15, s11
 8001a82:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001a86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a8a:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
	  motor_value = (motor_value_in_percent * MOTOR_MAX_SPEED) /100;
 8001a8e:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8001a92:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001b08 <task_calculate_motor_values+0x510>
 8001a96:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a9a:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8001b0c <task_calculate_motor_values+0x514>
 8001a9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aa2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001aa6:	ee17 3a90 	vmov	r3, s15
 8001aaa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8


	  //if there is already a message in the queue, remove it
	  if(osMessageQueueGetSpace(motor_value_queueHandle) < 1){
 8001aae:	4b18      	ldr	r3, [pc, #96]	@ (8001b10 <task_calculate_motor_values+0x518>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f004 fcb8 	bl	8006428 <osMessageQueueGetSpace>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d108      	bne.n	8001ad0 <task_calculate_motor_values+0x4d8>
		  int16_t temp;
		  osMessageQueueGet(motor_value_queueHandle, &temp, NULL, osWaitForever);
 8001abe:	4b14      	ldr	r3, [pc, #80]	@ (8001b10 <task_calculate_motor_values+0x518>)
 8001ac0:	6818      	ldr	r0, [r3, #0]
 8001ac2:	f107 012e 	add.w	r1, r7, #46	@ 0x2e
 8001ac6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001aca:	2200      	movs	r2, #0
 8001acc:	f004 fc2e 	bl	800632c <osMessageQueueGet>
	  }
	  //send motor value to queue
	  osMessageQueuePut(motor_value_queueHandle, &motor_value, 0, osWaitForever);
 8001ad0:	4b0f      	ldr	r3, [pc, #60]	@ (8001b10 <task_calculate_motor_values+0x518>)
 8001ad2:	6818      	ldr	r0, [r3, #0]
 8001ad4:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8001ad8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001adc:	2200      	movs	r2, #0
 8001ade:	f004 fbc5 	bl	800626c <osMessageQueuePut>
  {
 8001ae2:	e5cf      	b.n	8001684 <task_calculate_motor_values+0x8c>
 8001ae4:	f3af 8000 	nop.w
 8001ae8:	54442d18 	.word	0x54442d18
 8001aec:	400921fb 	.word	0x400921fb
 8001af0:	807d00fa 	.word	0x807d00fa
 8001af4:	3f9f403e 	.word	0x3f9f403e
 8001af8:	0800a000 	.word	0x0800a000
 8001afc:	40668000 	.word	0x40668000
 8001b00:	408f4000 	.word	0x408f4000
 8001b04:	447a0000 	.word	0x447a0000
 8001b08:	46033c00 	.word	0x46033c00
 8001b0c:	42c80000 	.word	0x42c80000
 8001b10:	20000970 	.word	0x20000970

08001b14 <task_control_motors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_control_motors */
void task_control_motors(void *argument)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {

	  //wait for a value
	  while(osMessageQueueGetCount(motor_value_queueHandle) == 0){
 8001b1c:	bf00      	nop
 8001b1e:	4b15      	ldr	r3, [pc, #84]	@ (8001b74 <task_control_motors+0x60>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f004 fc60 	bl	80063e8 <osMessageQueueGetCount>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d0f7      	beq.n	8001b1e <task_control_motors+0xa>
		  //busy waiting
	  }

	  //get motor value
	  osMessageQueueGet(motor_value_queueHandle, &motor_value, NULL, osWaitForever);
 8001b2e:	4b11      	ldr	r3, [pc, #68]	@ (8001b74 <task_control_motors+0x60>)
 8001b30:	6818      	ldr	r0, [r3, #0]
 8001b32:	f107 010c 	add.w	r1, r7, #12
 8001b36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f004 fbf6 	bl	800632c <osMessageQueueGet>

	  if(motor_value >= 0){
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	db09      	blt.n	8001b5a <task_control_motors+0x46>
		  motor_control(MOTOR_DIR_FORWARDS, (uint16_t) abs(motor_value));
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	bfb8      	it	lt
 8001b4c:	425b      	neglt	r3, r3
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	4619      	mov	r1, r3
 8001b52:	2000      	movs	r0, #0
 8001b54:	f000 f836 	bl	8001bc4 <motor_control>
 8001b58:	e7e0      	b.n	8001b1c <task_control_motors+0x8>
	  }
	  else if(motor_value < 0){
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	dadd      	bge.n	8001b1c <task_control_motors+0x8>
		  motor_control(MOTOR_DIR_BACKWARDS, (uint16_t) abs(motor_value));
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	bfb8      	it	lt
 8001b66:	425b      	neglt	r3, r3
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	2001      	movs	r0, #1
 8001b6e:	f000 f829 	bl	8001bc4 <motor_control>
	  while(osMessageQueueGetCount(motor_value_queueHandle) == 0){
 8001b72:	e7d3      	b.n	8001b1c <task_control_motors+0x8>
 8001b74:	20000970 	.word	0x20000970

08001b78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a04      	ldr	r2, [pc, #16]	@ (8001b98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d101      	bne.n	8001b8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b8a:	f000 fca3 	bl	80024d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40001000 	.word	0x40001000

08001b9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ba0:	b672      	cpsid	i
}
 8001ba2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ba4:	bf00      	nop
 8001ba6:	e7fd      	b.n	8001ba4 <Error_Handler+0x8>

08001ba8 <motor_init>:


extern TIM_HandleTypeDef htim3;


void motor_init(){
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
	//initialize PWM
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001bac:	2100      	movs	r1, #0
 8001bae:	4804      	ldr	r0, [pc, #16]	@ (8001bc0 <motor_init+0x18>)
 8001bb0:	f002 ffea 	bl	8004b88 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001bb4:	2104      	movs	r1, #4
 8001bb6:	4802      	ldr	r0, [pc, #8]	@ (8001bc0 <motor_init+0x18>)
 8001bb8:	f002 ffe6 	bl	8004b88 <HAL_TIM_PWM_Start>
}
 8001bbc:	bf00      	nop
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	200008d0 	.word	0x200008d0

08001bc4 <motor_control>:

void motor_control(uint8_t direction, uint16_t speed){
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	460a      	mov	r2, r1
 8001bce:	71fb      	strb	r3, [r7, #7]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	80bb      	strh	r3, [r7, #4]
  //direction 0=forward, 1=backward, everything else leaves the current direction
  //speed 0=off, 255=max

  //Error Handling
  if(speed<0) speed=0;
  if(speed>MOTOR_MAX_SPEED) speed=MOTOR_MAX_SPEED;
 8001bd4:	88bb      	ldrh	r3, [r7, #4]
 8001bd6:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d902      	bls.n	8001be4 <motor_control+0x20>
 8001bde:	f242 03cf 	movw	r3, #8399	@ 0x20cf
 8001be2:	80bb      	strh	r3, [r7, #4]

  //set motor direction
  switch(direction){
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d002      	beq.n	8001bf0 <motor_control+0x2c>
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d00c      	beq.n	8001c08 <motor_control+0x44>
	  HAL_GPIO_WritePin(MOTOR2_DIR_GPIO_Port, MOTOR2_DIR_Pin, GPIO_PIN_SET);
	  HAL_GPIO_WritePin(MOTOR3_DIR_GPIO_Port, MOTOR3_DIR_Pin, GPIO_PIN_SET);
	  break;
  default:
	  //do nothing
	  break;
 8001bee:	e017      	b.n	8001c20 <motor_control+0x5c>
	  HAL_GPIO_WritePin(MOTOR2_DIR_GPIO_Port, MOTOR2_DIR_Pin, GPIO_PIN_RESET);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2140      	movs	r1, #64	@ 0x40
 8001bf4:	4810      	ldr	r0, [pc, #64]	@ (8001c38 <motor_control+0x74>)
 8001bf6:	f000 ff27 	bl	8002a48 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(MOTOR3_DIR_GPIO_Port, MOTOR3_DIR_Pin, GPIO_PIN_RESET);
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c00:	480d      	ldr	r0, [pc, #52]	@ (8001c38 <motor_control+0x74>)
 8001c02:	f000 ff21 	bl	8002a48 <HAL_GPIO_WritePin>
	  break;
 8001c06:	e00b      	b.n	8001c20 <motor_control+0x5c>
	  HAL_GPIO_WritePin(MOTOR2_DIR_GPIO_Port, MOTOR2_DIR_Pin, GPIO_PIN_SET);
 8001c08:	2201      	movs	r2, #1
 8001c0a:	2140      	movs	r1, #64	@ 0x40
 8001c0c:	480a      	ldr	r0, [pc, #40]	@ (8001c38 <motor_control+0x74>)
 8001c0e:	f000 ff1b 	bl	8002a48 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(MOTOR3_DIR_GPIO_Port, MOTOR3_DIR_Pin, GPIO_PIN_SET);
 8001c12:	2201      	movs	r2, #1
 8001c14:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c18:	4807      	ldr	r0, [pc, #28]	@ (8001c38 <motor_control+0x74>)
 8001c1a:	f000 ff15 	bl	8002a48 <HAL_GPIO_WritePin>
	  break;
 8001c1e:	bf00      	nop
  }

  //set motor speed
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, speed);
 8001c20:	4b06      	ldr	r3, [pc, #24]	@ (8001c3c <motor_control+0x78>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	88ba      	ldrh	r2, [r7, #4]
 8001c26:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, speed);
 8001c28:	4b04      	ldr	r3, [pc, #16]	@ (8001c3c <motor_control+0x78>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	88ba      	ldrh	r2, [r7, #4]
 8001c2e:	639a      	str	r2, [r3, #56]	@ 0x38

}
 8001c30:	bf00      	nop
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40020000 	.word	0x40020000
 8001c3c:	200008d0 	.word	0x200008d0

08001c40 <mpu6050_init>:
#include <string.h>

extern I2C_HandleTypeDef hi2c1;
extern UART_HandleTypeDef huart2;

int mpu6050_init(){
 8001c40:	b5b0      	push	{r4, r5, r7, lr}
 8001c42:	b0c6      	sub	sp, #280	@ 0x118
 8001c44:	af04      	add	r7, sp, #16

	uint8_t buff[256] = { 0 };
 8001c46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001c4a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	3304      	adds	r3, #4
 8001c54:	22fc      	movs	r2, #252	@ 0xfc
 8001c56:	2100      	movs	r1, #0
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f007 f9ed 	bl	8009038 <memset>

	//check if MPU is ready
	  if(HAL_I2C_IsDeviceReady(&hi2c1, (DEVICE_ADDRESS<<1) +0, 1, 100) == HAL_OK){
 8001c5e:	2364      	movs	r3, #100	@ 0x64
 8001c60:	2201      	movs	r2, #1
 8001c62:	21d0      	movs	r1, #208	@ 0xd0
 8001c64:	48a6      	ldr	r0, [pc, #664]	@ (8001f00 <mpu6050_init+0x2c0>)
 8001c66:	f001 fb79 	bl	800335c <HAL_I2C_IsDeviceReady>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d12f      	bne.n	8001cd0 <mpu6050_init+0x90>
		  strcpy((char*) buff, "The device is ready\r\n");
 8001c70:	f107 0308 	add.w	r3, r7, #8
 8001c74:	4aa3      	ldr	r2, [pc, #652]	@ (8001f04 <mpu6050_init+0x2c4>)
 8001c76:	461c      	mov	r4, r3
 8001c78:	4615      	mov	r5, r2
 8001c7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c7e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c82:	6020      	str	r0, [r4, #0]
 8001c84:	3404      	adds	r4, #4
 8001c86:	8021      	strh	r1, [r4, #0]
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8001c88:	f107 0308 	add.w	r3, r7, #8
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7fe fabf 	bl	8000210 <strlen>
 8001c92:	4603      	mov	r3, r0
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	f107 0108 	add.w	r1, r7, #8
 8001c9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c9e:	489a      	ldr	r0, [pc, #616]	@ (8001f08 <mpu6050_init+0x2c8>)
 8001ca0:	f003 fd76 	bl	8005790 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
		  return -1;
	  }

	  //configure gyroscope
	  uint8_t gyroscope_range = FS_GYRO_1000;	//set gyroscope range to 500 °/s
 8001ca4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001ca8:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8001cac:	2210      	movs	r2, #16
 8001cae:	701a      	strb	r2, [r3, #0]
	  if(HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS<<1) +0, REG_CONFIG_GYRO, 1, &gyroscope_range, sizeof(gyroscope_range), 100) == HAL_OK){
 8001cb0:	2364      	movs	r3, #100	@ 0x64
 8001cb2:	9302      	str	r3, [sp, #8]
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	9301      	str	r3, [sp, #4]
 8001cb8:	1dfb      	adds	r3, r7, #7
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	221b      	movs	r2, #27
 8001cc0:	21d0      	movs	r1, #208	@ 0xd0
 8001cc2:	488f      	ldr	r0, [pc, #572]	@ (8001f00 <mpu6050_init+0x2c0>)
 8001cc4:	f001 f81e 	bl	8002d04 <HAL_I2C_Mem_Write>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d13c      	bne.n	8001d48 <mpu6050_init+0x108>
 8001cce:	e01d      	b.n	8001d0c <mpu6050_init+0xcc>
		  strcpy((char*) buff, "The device is not ready. Check the cables\r\n");
 8001cd0:	f107 0308 	add.w	r3, r7, #8
 8001cd4:	4a8d      	ldr	r2, [pc, #564]	@ (8001f0c <mpu6050_init+0x2cc>)
 8001cd6:	461c      	mov	r4, r3
 8001cd8:	4615      	mov	r5, r2
 8001cda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ce0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ce2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ce6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8001cea:	f107 0308 	add.w	r3, r7, #8
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7fe fa8e 	bl	8000210 <strlen>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	f107 0108 	add.w	r1, r7, #8
 8001cfc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d00:	4881      	ldr	r0, [pc, #516]	@ (8001f08 <mpu6050_init+0x2c8>)
 8001d02:	f003 fd45 	bl	8005790 <HAL_UART_Transmit>
		  return -1;
 8001d06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d0a:	e0f4      	b.n	8001ef6 <mpu6050_init+0x2b6>
		  strcpy((char*) buff, "gyroscope range successfully set\r\n");
 8001d0c:	f107 0308 	add.w	r3, r7, #8
 8001d10:	4a7f      	ldr	r2, [pc, #508]	@ (8001f10 <mpu6050_init+0x2d0>)
 8001d12:	461c      	mov	r4, r3
 8001d14:	4615      	mov	r5, r2
 8001d16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d1e:	682b      	ldr	r3, [r5, #0]
 8001d20:	461a      	mov	r2, r3
 8001d22:	8022      	strh	r2, [r4, #0]
 8001d24:	3402      	adds	r4, #2
 8001d26:	0c1b      	lsrs	r3, r3, #16
 8001d28:	7023      	strb	r3, [r4, #0]
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8001d2a:	f107 0308 	add.w	r3, r7, #8
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe fa6e 	bl	8000210 <strlen>
 8001d34:	4603      	mov	r3, r0
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	f107 0108 	add.w	r1, r7, #8
 8001d3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d40:	4871      	ldr	r0, [pc, #452]	@ (8001f08 <mpu6050_init+0x2c8>)
 8001d42:	f003 fd25 	bl	8005790 <HAL_UART_Transmit>
 8001d46:	e018      	b.n	8001d7a <mpu6050_init+0x13a>
	  }
	  else{
		  strcpy((char*) buff, "failed setting gyroscope range\r\n");
 8001d48:	f107 0308 	add.w	r3, r7, #8
 8001d4c:	4a71      	ldr	r2, [pc, #452]	@ (8001f14 <mpu6050_init+0x2d4>)
 8001d4e:	461c      	mov	r4, r3
 8001d50:	4615      	mov	r5, r2
 8001d52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d5a:	682b      	ldr	r3, [r5, #0]
 8001d5c:	7023      	strb	r3, [r4, #0]
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8001d5e:	f107 0308 	add.w	r3, r7, #8
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7fe fa54 	bl	8000210 <strlen>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	f107 0108 	add.w	r1, r7, #8
 8001d70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d74:	4864      	ldr	r0, [pc, #400]	@ (8001f08 <mpu6050_init+0x2c8>)
 8001d76:	f003 fd0b 	bl	8005790 <HAL_UART_Transmit>
	  }

	  //configure accelerometer
	  uint8_t accelerometer_range = FS_ACC_2G;	//set gyroscope range to 500 °/s
 8001d7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001d7e:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 8001d82:	2200      	movs	r2, #0
 8001d84:	701a      	strb	r2, [r3, #0]
	  if(HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS<<1) +0, REG_CONFIG_ACC, 1, &accelerometer_range, sizeof(accelerometer_range), 100) == HAL_OK){
 8001d86:	2364      	movs	r3, #100	@ 0x64
 8001d88:	9302      	str	r3, [sp, #8]
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	9301      	str	r3, [sp, #4]
 8001d8e:	1dbb      	adds	r3, r7, #6
 8001d90:	9300      	str	r3, [sp, #0]
 8001d92:	2301      	movs	r3, #1
 8001d94:	221c      	movs	r2, #28
 8001d96:	21d0      	movs	r1, #208	@ 0xd0
 8001d98:	4859      	ldr	r0, [pc, #356]	@ (8001f00 <mpu6050_init+0x2c0>)
 8001d9a:	f000 ffb3 	bl	8002d04 <HAL_I2C_Mem_Write>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d11f      	bne.n	8001de4 <mpu6050_init+0x1a4>
		  strcpy((char*) buff, "accelerometer range successfully set\r\n");
 8001da4:	f107 0308 	add.w	r3, r7, #8
 8001da8:	4a5b      	ldr	r2, [pc, #364]	@ (8001f18 <mpu6050_init+0x2d8>)
 8001daa:	461c      	mov	r4, r3
 8001dac:	4615      	mov	r5, r2
 8001dae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001db0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001db2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001db4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001db6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001dba:	6020      	str	r0, [r4, #0]
 8001dbc:	3404      	adds	r4, #4
 8001dbe:	8021      	strh	r1, [r4, #0]
 8001dc0:	3402      	adds	r4, #2
 8001dc2:	0c0b      	lsrs	r3, r1, #16
 8001dc4:	7023      	strb	r3, [r4, #0]
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8001dc6:	f107 0308 	add.w	r3, r7, #8
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7fe fa20 	bl	8000210 <strlen>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	f107 0108 	add.w	r1, r7, #8
 8001dd8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ddc:	484a      	ldr	r0, [pc, #296]	@ (8001f08 <mpu6050_init+0x2c8>)
 8001dde:	f003 fcd7 	bl	8005790 <HAL_UART_Transmit>
 8001de2:	e01b      	b.n	8001e1c <mpu6050_init+0x1dc>
	  }
	  else{
		  strcpy((char*) buff, "failed setting accelerometer range\r\n");
 8001de4:	f107 0308 	add.w	r3, r7, #8
 8001de8:	4a4c      	ldr	r2, [pc, #304]	@ (8001f1c <mpu6050_init+0x2dc>)
 8001dea:	461c      	mov	r4, r3
 8001dec:	4615      	mov	r5, r2
 8001dee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001df0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001df2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001df4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001df6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001dfa:	6020      	str	r0, [r4, #0]
 8001dfc:	3404      	adds	r4, #4
 8001dfe:	7021      	strb	r1, [r4, #0]
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8001e00:	f107 0308 	add.w	r3, r7, #8
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7fe fa03 	bl	8000210 <strlen>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	f107 0108 	add.w	r1, r7, #8
 8001e12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e16:	483c      	ldr	r0, [pc, #240]	@ (8001f08 <mpu6050_init+0x2c8>)
 8001e18:	f003 fcba 	bl	8005790 <HAL_UART_Transmit>
	  }

	  //set low pass filter
	  uint8_t lpf_setting = LPF_44;
 8001e1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001e20:	f2a3 1303 	subw	r3, r3, #259	@ 0x103
 8001e24:	2203      	movs	r2, #3
 8001e26:	701a      	strb	r2, [r3, #0]
	  HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS<<1) +0, REG_LOW_PASS_FILTER, 1, &lpf_setting, sizeof(lpf_setting), 100);
 8001e28:	2364      	movs	r3, #100	@ 0x64
 8001e2a:	9302      	str	r3, [sp, #8]
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	9301      	str	r3, [sp, #4]
 8001e30:	1d7b      	adds	r3, r7, #5
 8001e32:	9300      	str	r3, [sp, #0]
 8001e34:	2301      	movs	r3, #1
 8001e36:	221a      	movs	r2, #26
 8001e38:	21d0      	movs	r1, #208	@ 0xd0
 8001e3a:	4831      	ldr	r0, [pc, #196]	@ (8001f00 <mpu6050_init+0x2c0>)
 8001e3c:	f000 ff62 	bl	8002d04 <HAL_I2C_Mem_Write>

	  //enable interrupt to signal that data is ready to be read
	  uint8_t interrupt_signal = INT_DATA_READY;
 8001e40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001e44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001e48:	2201      	movs	r2, #1
 8001e4a:	701a      	strb	r2, [r3, #0]
	  HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS<<1) +0, REG_INTERRUPT, 1, &interrupt_signal, sizeof(interrupt_signal), 100);
 8001e4c:	2364      	movs	r3, #100	@ 0x64
 8001e4e:	9302      	str	r3, [sp, #8]
 8001e50:	2301      	movs	r3, #1
 8001e52:	9301      	str	r3, [sp, #4]
 8001e54:	1d3b      	adds	r3, r7, #4
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	2301      	movs	r3, #1
 8001e5a:	2238      	movs	r2, #56	@ 0x38
 8001e5c:	21d0      	movs	r1, #208	@ 0xd0
 8001e5e:	4828      	ldr	r0, [pc, #160]	@ (8001f00 <mpu6050_init+0x2c0>)
 8001e60:	f000 ff50 	bl	8002d04 <HAL_I2C_Mem_Write>

	  //deactivate sleep
	  uint8_t asdf_flags = 0b00001000;	//set the '1' also to '0' if you want the temperature sensor to be enabled
 8001e64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001e68:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 8001e6c:	2208      	movs	r2, #8
 8001e6e:	701a      	strb	r2, [r3, #0]
	  if(HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS<<1) +0, REG_USR_CTRL, 1, &asdf_flags, sizeof(asdf_flags), 100) == HAL_OK){
 8001e70:	2364      	movs	r3, #100	@ 0x64
 8001e72:	9302      	str	r3, [sp, #8]
 8001e74:	2301      	movs	r3, #1
 8001e76:	9301      	str	r3, [sp, #4]
 8001e78:	1cfb      	adds	r3, r7, #3
 8001e7a:	9300      	str	r3, [sp, #0]
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	226b      	movs	r2, #107	@ 0x6b
 8001e80:	21d0      	movs	r1, #208	@ 0xd0
 8001e82:	481f      	ldr	r0, [pc, #124]	@ (8001f00 <mpu6050_init+0x2c0>)
 8001e84:	f000 ff3e 	bl	8002d04 <HAL_I2C_Mem_Write>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d119      	bne.n	8001ec2 <mpu6050_init+0x282>
		  strcpy((char*) buff, "disablin sleep successfully\r\n");
 8001e8e:	f107 0308 	add.w	r3, r7, #8
 8001e92:	4a23      	ldr	r2, [pc, #140]	@ (8001f20 <mpu6050_init+0x2e0>)
 8001e94:	461c      	mov	r4, r3
 8001e96:	4615      	mov	r5, r2
 8001e98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e9c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001ea0:	c407      	stmia	r4!, {r0, r1, r2}
 8001ea2:	8023      	strh	r3, [r4, #0]
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8001ea4:	f107 0308 	add.w	r3, r7, #8
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7fe f9b1 	bl	8000210 <strlen>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	f107 0108 	add.w	r1, r7, #8
 8001eb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001eba:	4813      	ldr	r0, [pc, #76]	@ (8001f08 <mpu6050_init+0x2c8>)
 8001ebc:	f003 fc68 	bl	8005790 <HAL_UART_Transmit>
 8001ec0:	e018      	b.n	8001ef4 <mpu6050_init+0x2b4>
	  }
	  else{
		  strcpy((char*) buff, "error disabling sleep\r\n");
 8001ec2:	f107 0308 	add.w	r3, r7, #8
 8001ec6:	4a17      	ldr	r2, [pc, #92]	@ (8001f24 <mpu6050_init+0x2e4>)
 8001ec8:	461c      	mov	r4, r3
 8001eca:	4615      	mov	r5, r2
 8001ecc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ece:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ed0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001ed4:	e884 0003 	stmia.w	r4, {r0, r1}
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8001ed8:	f107 0308 	add.w	r3, r7, #8
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7fe f997 	bl	8000210 <strlen>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	f107 0108 	add.w	r1, r7, #8
 8001eea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001eee:	4806      	ldr	r0, [pc, #24]	@ (8001f08 <mpu6050_init+0x2c8>)
 8001ef0:	f003 fc4e 	bl	8005790 <HAL_UART_Transmit>
	  }

	  return 0;
 8001ef4:	2300      	movs	r3, #0

}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bdb0      	pop	{r4, r5, r7, pc}
 8001f00:	2000087c 	.word	0x2000087c
 8001f04:	0800a018 	.word	0x0800a018
 8001f08:	20000918 	.word	0x20000918
 8001f0c:	0800a030 	.word	0x0800a030
 8001f10:	0800a05c 	.word	0x0800a05c
 8001f14:	0800a080 	.word	0x0800a080
 8001f18:	0800a0a4 	.word	0x0800a0a4
 8001f1c:	0800a0cc 	.word	0x0800a0cc
 8001f20:	0800a0f4 	.word	0x0800a0f4
 8001f24:	0800a114 	.word	0x0800a114

08001f28 <mpu6050_read>:



void mpu6050_read(mpu6050_values_t* values){
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b088      	sub	sp, #32
 8001f2c:	af04      	add	r7, sp, #16
 8001f2e:	6078      	str	r0, [r7, #4]

	  uint8_t buff[6] = { 0 };
 8001f30:	2300      	movs	r3, #0
 8001f32:	60bb      	str	r3, [r7, #8]
 8001f34:	2300      	movs	r3, #0
 8001f36:	81bb      	strh	r3, [r7, #12]
	  HAL_I2C_Mem_Read(&hi2c1, (DEVICE_ADDRESS<<1) +1, REG_ACC_DATA, 1, buff, sizeof(buff), 100);
 8001f38:	2364      	movs	r3, #100	@ 0x64
 8001f3a:	9302      	str	r3, [sp, #8]
 8001f3c:	2306      	movs	r3, #6
 8001f3e:	9301      	str	r3, [sp, #4]
 8001f40:	f107 0308 	add.w	r3, r7, #8
 8001f44:	9300      	str	r3, [sp, #0]
 8001f46:	2301      	movs	r3, #1
 8001f48:	223b      	movs	r2, #59	@ 0x3b
 8001f4a:	21d1      	movs	r1, #209	@ 0xd1
 8001f4c:	4829      	ldr	r0, [pc, #164]	@ (8001ff4 <mpu6050_read+0xcc>)
 8001f4e:	f000 ffd3 	bl	8002ef8 <HAL_I2C_Mem_Read>
	  values->acc_x = (uint16_t) (buff[0]<<8) + buff[1];
 8001f52:	7a3b      	ldrb	r3, [r7, #8]
 8001f54:	021b      	lsls	r3, r3, #8
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	7a7a      	ldrb	r2, [r7, #9]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	b21a      	sxth	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	80da      	strh	r2, [r3, #6]
	  values->acc_y = (uint16_t) (buff[2]<<8) + buff[3];
 8001f64:	7abb      	ldrb	r3, [r7, #10]
 8001f66:	021b      	lsls	r3, r3, #8
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	7afa      	ldrb	r2, [r7, #11]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	b21a      	sxth	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	811a      	strh	r2, [r3, #8]
	  values->acc_z = (uint16_t) (buff[4]<<8) + buff[5];
 8001f76:	7b3b      	ldrb	r3, [r7, #12]
 8001f78:	021b      	lsls	r3, r3, #8
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	7b7a      	ldrb	r2, [r7, #13]
 8001f7e:	4413      	add	r3, r2
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	b21a      	sxth	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	815a      	strh	r2, [r3, #10]

	  HAL_I2C_Mem_Read(&hi2c1, (DEVICE_ADDRESS<<1) +1, REG_GYRO_DATA, 1, buff, sizeof(buff), 100);
 8001f88:	2364      	movs	r3, #100	@ 0x64
 8001f8a:	9302      	str	r3, [sp, #8]
 8001f8c:	2306      	movs	r3, #6
 8001f8e:	9301      	str	r3, [sp, #4]
 8001f90:	f107 0308 	add.w	r3, r7, #8
 8001f94:	9300      	str	r3, [sp, #0]
 8001f96:	2301      	movs	r3, #1
 8001f98:	2243      	movs	r2, #67	@ 0x43
 8001f9a:	21d1      	movs	r1, #209	@ 0xd1
 8001f9c:	4815      	ldr	r0, [pc, #84]	@ (8001ff4 <mpu6050_read+0xcc>)
 8001f9e:	f000 ffab 	bl	8002ef8 <HAL_I2C_Mem_Read>
	  values->gyro_x = (uint16_t) (buff[0]<<8) + buff[1];
 8001fa2:	7a3b      	ldrb	r3, [r7, #8]
 8001fa4:	021b      	lsls	r3, r3, #8
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	7a7a      	ldrb	r2, [r7, #9]
 8001faa:	4413      	add	r3, r2
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	b21a      	sxth	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	801a      	strh	r2, [r3, #0]
	  values->gyro_y = (uint16_t) (buff[2]<<8) + buff[3];
 8001fb4:	7abb      	ldrb	r3, [r7, #10]
 8001fb6:	021b      	lsls	r3, r3, #8
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	7afa      	ldrb	r2, [r7, #11]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	b21a      	sxth	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	805a      	strh	r2, [r3, #2]
	  values->gyro_z = (uint16_t) (buff[4]<<8) + buff[5];
 8001fc6:	7b3b      	ldrb	r3, [r7, #12]
 8001fc8:	021b      	lsls	r3, r3, #8
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	7b7a      	ldrb	r2, [r7, #13]
 8001fce:	4413      	add	r3, r2
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	b21a      	sxth	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	809a      	strh	r2, [r3, #4]

	  //apply offsets
	  values->gyro_y += GYRO_Y_OFFSET_1000;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	330c      	adds	r3, #12
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	b21a      	sxth	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	805a      	strh	r2, [r3, #2]

}
 8001fea:	bf00      	nop
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	2000087c 	.word	0x2000087c

08001ff8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	607b      	str	r3, [r7, #4]
 8002002:	4b12      	ldr	r3, [pc, #72]	@ (800204c <HAL_MspInit+0x54>)
 8002004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002006:	4a11      	ldr	r2, [pc, #68]	@ (800204c <HAL_MspInit+0x54>)
 8002008:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800200c:	6453      	str	r3, [r2, #68]	@ 0x44
 800200e:	4b0f      	ldr	r3, [pc, #60]	@ (800204c <HAL_MspInit+0x54>)
 8002010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002012:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002016:	607b      	str	r3, [r7, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	603b      	str	r3, [r7, #0]
 800201e:	4b0b      	ldr	r3, [pc, #44]	@ (800204c <HAL_MspInit+0x54>)
 8002020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002022:	4a0a      	ldr	r2, [pc, #40]	@ (800204c <HAL_MspInit+0x54>)
 8002024:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002028:	6413      	str	r3, [r2, #64]	@ 0x40
 800202a:	4b08      	ldr	r3, [pc, #32]	@ (800204c <HAL_MspInit+0x54>)
 800202c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002032:	603b      	str	r3, [r7, #0]
 8002034:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002036:	2200      	movs	r2, #0
 8002038:	210f      	movs	r1, #15
 800203a:	f06f 0001 	mvn.w	r0, #1
 800203e:	f000 fb45 	bl	80026cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002042:	bf00      	nop
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40023800 	.word	0x40023800

08002050 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b08a      	sub	sp, #40	@ 0x28
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002058:	f107 0314 	add.w	r3, r7, #20
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	605a      	str	r2, [r3, #4]
 8002062:	609a      	str	r2, [r3, #8]
 8002064:	60da      	str	r2, [r3, #12]
 8002066:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a19      	ldr	r2, [pc, #100]	@ (80020d4 <HAL_I2C_MspInit+0x84>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d12c      	bne.n	80020cc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	613b      	str	r3, [r7, #16]
 8002076:	4b18      	ldr	r3, [pc, #96]	@ (80020d8 <HAL_I2C_MspInit+0x88>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207a:	4a17      	ldr	r2, [pc, #92]	@ (80020d8 <HAL_I2C_MspInit+0x88>)
 800207c:	f043 0302 	orr.w	r3, r3, #2
 8002080:	6313      	str	r3, [r2, #48]	@ 0x30
 8002082:	4b15      	ldr	r3, [pc, #84]	@ (80020d8 <HAL_I2C_MspInit+0x88>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	613b      	str	r3, [r7, #16]
 800208c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800208e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002092:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002094:	2312      	movs	r3, #18
 8002096:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002098:	2301      	movs	r3, #1
 800209a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800209c:	2303      	movs	r3, #3
 800209e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020a0:	2304      	movs	r3, #4
 80020a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a4:	f107 0314 	add.w	r3, r7, #20
 80020a8:	4619      	mov	r1, r3
 80020aa:	480c      	ldr	r0, [pc, #48]	@ (80020dc <HAL_I2C_MspInit+0x8c>)
 80020ac:	f000 fb38 	bl	8002720 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020b0:	2300      	movs	r3, #0
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	4b08      	ldr	r3, [pc, #32]	@ (80020d8 <HAL_I2C_MspInit+0x88>)
 80020b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b8:	4a07      	ldr	r2, [pc, #28]	@ (80020d8 <HAL_I2C_MspInit+0x88>)
 80020ba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80020be:	6413      	str	r3, [r2, #64]	@ 0x40
 80020c0:	4b05      	ldr	r3, [pc, #20]	@ (80020d8 <HAL_I2C_MspInit+0x88>)
 80020c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80020cc:	bf00      	nop
 80020ce:	3728      	adds	r7, #40	@ 0x28
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40005400 	.word	0x40005400
 80020d8:	40023800 	.word	0x40023800
 80020dc:	40020400 	.word	0x40020400

080020e0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a0b      	ldr	r2, [pc, #44]	@ (800211c <HAL_TIM_PWM_MspInit+0x3c>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d10d      	bne.n	800210e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002120 <HAL_TIM_PWM_MspInit+0x40>)
 80020f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fa:	4a09      	ldr	r2, [pc, #36]	@ (8002120 <HAL_TIM_PWM_MspInit+0x40>)
 80020fc:	f043 0302 	orr.w	r3, r3, #2
 8002100:	6413      	str	r3, [r2, #64]	@ 0x40
 8002102:	4b07      	ldr	r3, [pc, #28]	@ (8002120 <HAL_TIM_PWM_MspInit+0x40>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800210e:	bf00      	nop
 8002110:	3714      	adds	r7, #20
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	40000400 	.word	0x40000400
 8002120:	40023800 	.word	0x40023800

08002124 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b08a      	sub	sp, #40	@ 0x28
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800212c:	f107 0314 	add.w	r3, r7, #20
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	60da      	str	r2, [r3, #12]
 800213a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a21      	ldr	r2, [pc, #132]	@ (80021c8 <HAL_TIM_MspPostInit+0xa4>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d13b      	bne.n	80021be <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	613b      	str	r3, [r7, #16]
 800214a:	4b20      	ldr	r3, [pc, #128]	@ (80021cc <HAL_TIM_MspPostInit+0xa8>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214e:	4a1f      	ldr	r2, [pc, #124]	@ (80021cc <HAL_TIM_MspPostInit+0xa8>)
 8002150:	f043 0301 	orr.w	r3, r3, #1
 8002154:	6313      	str	r3, [r2, #48]	@ 0x30
 8002156:	4b1d      	ldr	r3, [pc, #116]	@ (80021cc <HAL_TIM_MspPostInit+0xa8>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	613b      	str	r3, [r7, #16]
 8002160:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	4b19      	ldr	r3, [pc, #100]	@ (80021cc <HAL_TIM_MspPostInit+0xa8>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216a:	4a18      	ldr	r2, [pc, #96]	@ (80021cc <HAL_TIM_MspPostInit+0xa8>)
 800216c:	f043 0302 	orr.w	r3, r3, #2
 8002170:	6313      	str	r3, [r2, #48]	@ 0x30
 8002172:	4b16      	ldr	r3, [pc, #88]	@ (80021cc <HAL_TIM_MspPostInit+0xa8>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800217e:	2380      	movs	r3, #128	@ 0x80
 8002180:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002182:	2302      	movs	r3, #2
 8002184:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002186:	2300      	movs	r3, #0
 8002188:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218a:	2300      	movs	r3, #0
 800218c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800218e:	2302      	movs	r3, #2
 8002190:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002192:	f107 0314 	add.w	r3, r7, #20
 8002196:	4619      	mov	r1, r3
 8002198:	480d      	ldr	r0, [pc, #52]	@ (80021d0 <HAL_TIM_MspPostInit+0xac>)
 800219a:	f000 fac1 	bl	8002720 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800219e:	2310      	movs	r3, #16
 80021a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a2:	2302      	movs	r3, #2
 80021a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a6:	2300      	movs	r3, #0
 80021a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021aa:	2300      	movs	r3, #0
 80021ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021ae:	2302      	movs	r3, #2
 80021b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b2:	f107 0314 	add.w	r3, r7, #20
 80021b6:	4619      	mov	r1, r3
 80021b8:	4806      	ldr	r0, [pc, #24]	@ (80021d4 <HAL_TIM_MspPostInit+0xb0>)
 80021ba:	f000 fab1 	bl	8002720 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80021be:	bf00      	nop
 80021c0:	3728      	adds	r7, #40	@ 0x28
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40000400 	.word	0x40000400
 80021cc:	40023800 	.word	0x40023800
 80021d0:	40020000 	.word	0x40020000
 80021d4:	40020400 	.word	0x40020400

080021d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b08a      	sub	sp, #40	@ 0x28
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e0:	f107 0314 	add.w	r3, r7, #20
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	605a      	str	r2, [r3, #4]
 80021ea:	609a      	str	r2, [r3, #8]
 80021ec:	60da      	str	r2, [r3, #12]
 80021ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a19      	ldr	r2, [pc, #100]	@ (800225c <HAL_UART_MspInit+0x84>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d12b      	bne.n	8002252 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	613b      	str	r3, [r7, #16]
 80021fe:	4b18      	ldr	r3, [pc, #96]	@ (8002260 <HAL_UART_MspInit+0x88>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002202:	4a17      	ldr	r2, [pc, #92]	@ (8002260 <HAL_UART_MspInit+0x88>)
 8002204:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002208:	6413      	str	r3, [r2, #64]	@ 0x40
 800220a:	4b15      	ldr	r3, [pc, #84]	@ (8002260 <HAL_UART_MspInit+0x88>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002212:	613b      	str	r3, [r7, #16]
 8002214:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	4b11      	ldr	r3, [pc, #68]	@ (8002260 <HAL_UART_MspInit+0x88>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221e:	4a10      	ldr	r2, [pc, #64]	@ (8002260 <HAL_UART_MspInit+0x88>)
 8002220:	f043 0301 	orr.w	r3, r3, #1
 8002224:	6313      	str	r3, [r2, #48]	@ 0x30
 8002226:	4b0e      	ldr	r3, [pc, #56]	@ (8002260 <HAL_UART_MspInit+0x88>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002232:	230c      	movs	r3, #12
 8002234:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002236:	2302      	movs	r3, #2
 8002238:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223a:	2300      	movs	r3, #0
 800223c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800223e:	2303      	movs	r3, #3
 8002240:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002242:	2307      	movs	r3, #7
 8002244:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002246:	f107 0314 	add.w	r3, r7, #20
 800224a:	4619      	mov	r1, r3
 800224c:	4805      	ldr	r0, [pc, #20]	@ (8002264 <HAL_UART_MspInit+0x8c>)
 800224e:	f000 fa67 	bl	8002720 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002252:	bf00      	nop
 8002254:	3728      	adds	r7, #40	@ 0x28
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40004400 	.word	0x40004400
 8002260:	40023800 	.word	0x40023800
 8002264:	40020000 	.word	0x40020000

08002268 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b08e      	sub	sp, #56	@ 0x38
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002270:	2300      	movs	r3, #0
 8002272:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002274:	2300      	movs	r3, #0
 8002276:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002278:	2300      	movs	r3, #0
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	4b33      	ldr	r3, [pc, #204]	@ (800234c <HAL_InitTick+0xe4>)
 800227e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002280:	4a32      	ldr	r2, [pc, #200]	@ (800234c <HAL_InitTick+0xe4>)
 8002282:	f043 0310 	orr.w	r3, r3, #16
 8002286:	6413      	str	r3, [r2, #64]	@ 0x40
 8002288:	4b30      	ldr	r3, [pc, #192]	@ (800234c <HAL_InitTick+0xe4>)
 800228a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228c:	f003 0310 	and.w	r3, r3, #16
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002294:	f107 0210 	add.w	r2, r7, #16
 8002298:	f107 0314 	add.w	r3, r7, #20
 800229c:	4611      	mov	r1, r2
 800229e:	4618      	mov	r0, r3
 80022a0:	f001 fe58 	bl	8003f54 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80022a4:	6a3b      	ldr	r3, [r7, #32]
 80022a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80022a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d103      	bne.n	80022b6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80022ae:	f001 fe29 	bl	8003f04 <HAL_RCC_GetPCLK1Freq>
 80022b2:	6378      	str	r0, [r7, #52]	@ 0x34
 80022b4:	e004      	b.n	80022c0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80022b6:	f001 fe25 	bl	8003f04 <HAL_RCC_GetPCLK1Freq>
 80022ba:	4603      	mov	r3, r0
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80022c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022c2:	4a23      	ldr	r2, [pc, #140]	@ (8002350 <HAL_InitTick+0xe8>)
 80022c4:	fba2 2303 	umull	r2, r3, r2, r3
 80022c8:	0c9b      	lsrs	r3, r3, #18
 80022ca:	3b01      	subs	r3, #1
 80022cc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80022ce:	4b21      	ldr	r3, [pc, #132]	@ (8002354 <HAL_InitTick+0xec>)
 80022d0:	4a21      	ldr	r2, [pc, #132]	@ (8002358 <HAL_InitTick+0xf0>)
 80022d2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80022d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002354 <HAL_InitTick+0xec>)
 80022d6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80022da:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80022dc:	4a1d      	ldr	r2, [pc, #116]	@ (8002354 <HAL_InitTick+0xec>)
 80022de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022e0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80022e2:	4b1c      	ldr	r3, [pc, #112]	@ (8002354 <HAL_InitTick+0xec>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002354 <HAL_InitTick+0xec>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022ee:	4b19      	ldr	r3, [pc, #100]	@ (8002354 <HAL_InitTick+0xec>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80022f4:	4817      	ldr	r0, [pc, #92]	@ (8002354 <HAL_InitTick+0xec>)
 80022f6:	f002 fb2d 	bl	8004954 <HAL_TIM_Base_Init>
 80022fa:	4603      	mov	r3, r0
 80022fc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002300:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002304:	2b00      	cmp	r3, #0
 8002306:	d11b      	bne.n	8002340 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002308:	4812      	ldr	r0, [pc, #72]	@ (8002354 <HAL_InitTick+0xec>)
 800230a:	f002 fb7d 	bl	8004a08 <HAL_TIM_Base_Start_IT>
 800230e:	4603      	mov	r3, r0
 8002310:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002314:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002318:	2b00      	cmp	r3, #0
 800231a:	d111      	bne.n	8002340 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800231c:	2036      	movs	r0, #54	@ 0x36
 800231e:	f000 f9f1 	bl	8002704 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b0f      	cmp	r3, #15
 8002326:	d808      	bhi.n	800233a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002328:	2200      	movs	r2, #0
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	2036      	movs	r0, #54	@ 0x36
 800232e:	f000 f9cd 	bl	80026cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002332:	4a0a      	ldr	r2, [pc, #40]	@ (800235c <HAL_InitTick+0xf4>)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6013      	str	r3, [r2, #0]
 8002338:	e002      	b.n	8002340 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002340:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002344:	4618      	mov	r0, r3
 8002346:	3738      	adds	r7, #56	@ 0x38
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40023800 	.word	0x40023800
 8002350:	431bde83 	.word	0x431bde83
 8002354:	20000978 	.word	0x20000978
 8002358:	40001000 	.word	0x40001000
 800235c:	20000004 	.word	0x20000004

08002360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002364:	bf00      	nop
 8002366:	e7fd      	b.n	8002364 <NMI_Handler+0x4>

08002368 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800236c:	bf00      	nop
 800236e:	e7fd      	b.n	800236c <HardFault_Handler+0x4>

08002370 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002374:	bf00      	nop
 8002376:	e7fd      	b.n	8002374 <MemManage_Handler+0x4>

08002378 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800237c:	bf00      	nop
 800237e:	e7fd      	b.n	800237c <BusFault_Handler+0x4>

08002380 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002384:	bf00      	nop
 8002386:	e7fd      	b.n	8002384 <UsageFault_Handler+0x4>

08002388 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800238c:	bf00      	nop
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
	...

08002398 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800239c:	4802      	ldr	r0, [pc, #8]	@ (80023a8 <TIM6_DAC_IRQHandler+0x10>)
 800239e:	f002 fcbb 	bl	8004d18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	20000978 	.word	0x20000978

080023ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023b4:	4a14      	ldr	r2, [pc, #80]	@ (8002408 <_sbrk+0x5c>)
 80023b6:	4b15      	ldr	r3, [pc, #84]	@ (800240c <_sbrk+0x60>)
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023c0:	4b13      	ldr	r3, [pc, #76]	@ (8002410 <_sbrk+0x64>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d102      	bne.n	80023ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023c8:	4b11      	ldr	r3, [pc, #68]	@ (8002410 <_sbrk+0x64>)
 80023ca:	4a12      	ldr	r2, [pc, #72]	@ (8002414 <_sbrk+0x68>)
 80023cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023ce:	4b10      	ldr	r3, [pc, #64]	@ (8002410 <_sbrk+0x64>)
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4413      	add	r3, r2
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d207      	bcs.n	80023ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023dc:	f006 fe9e 	bl	800911c <__errno>
 80023e0:	4603      	mov	r3, r0
 80023e2:	220c      	movs	r2, #12
 80023e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80023ea:	e009      	b.n	8002400 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023ec:	4b08      	ldr	r3, [pc, #32]	@ (8002410 <_sbrk+0x64>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023f2:	4b07      	ldr	r3, [pc, #28]	@ (8002410 <_sbrk+0x64>)
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4413      	add	r3, r2
 80023fa:	4a05      	ldr	r2, [pc, #20]	@ (8002410 <_sbrk+0x64>)
 80023fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023fe:	68fb      	ldr	r3, [r7, #12]
}
 8002400:	4618      	mov	r0, r3
 8002402:	3718      	adds	r7, #24
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	20020000 	.word	0x20020000
 800240c:	00000400 	.word	0x00000400
 8002410:	200009c0 	.word	0x200009c0
 8002414:	200054f8 	.word	0x200054f8

08002418 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800241c:	4b06      	ldr	r3, [pc, #24]	@ (8002438 <SystemInit+0x20>)
 800241e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002422:	4a05      	ldr	r2, [pc, #20]	@ (8002438 <SystemInit+0x20>)
 8002424:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002428:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800242c:	bf00      	nop
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	e000ed00 	.word	0xe000ed00

0800243c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800243c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002474 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002440:	f7ff ffea 	bl	8002418 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002444:	480c      	ldr	r0, [pc, #48]	@ (8002478 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002446:	490d      	ldr	r1, [pc, #52]	@ (800247c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002448:	4a0d      	ldr	r2, [pc, #52]	@ (8002480 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800244a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800244c:	e002      	b.n	8002454 <LoopCopyDataInit>

0800244e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800244e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002450:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002452:	3304      	adds	r3, #4

08002454 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002454:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002456:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002458:	d3f9      	bcc.n	800244e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800245a:	4a0a      	ldr	r2, [pc, #40]	@ (8002484 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800245c:	4c0a      	ldr	r4, [pc, #40]	@ (8002488 <LoopFillZerobss+0x22>)
  movs r3, #0
 800245e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002460:	e001      	b.n	8002466 <LoopFillZerobss>

08002462 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002462:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002464:	3204      	adds	r2, #4

08002466 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002466:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002468:	d3fb      	bcc.n	8002462 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800246a:	f006 fe5d 	bl	8009128 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800246e:	f7fe fd63 	bl	8000f38 <main>
  bx  lr    
 8002472:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002474:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002478:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800247c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002480:	0800a2b0 	.word	0x0800a2b0
  ldr r2, =_sbss
 8002484:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002488:	200054f8 	.word	0x200054f8

0800248c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800248c:	e7fe      	b.n	800248c <ADC_IRQHandler>
	...

08002490 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002494:	4b0e      	ldr	r3, [pc, #56]	@ (80024d0 <HAL_Init+0x40>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a0d      	ldr	r2, [pc, #52]	@ (80024d0 <HAL_Init+0x40>)
 800249a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800249e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024a0:	4b0b      	ldr	r3, [pc, #44]	@ (80024d0 <HAL_Init+0x40>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a0a      	ldr	r2, [pc, #40]	@ (80024d0 <HAL_Init+0x40>)
 80024a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024ac:	4b08      	ldr	r3, [pc, #32]	@ (80024d0 <HAL_Init+0x40>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a07      	ldr	r2, [pc, #28]	@ (80024d0 <HAL_Init+0x40>)
 80024b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024b8:	2003      	movs	r0, #3
 80024ba:	f000 f8fc 	bl	80026b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024be:	200f      	movs	r0, #15
 80024c0:	f7ff fed2 	bl	8002268 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024c4:	f7ff fd98 	bl	8001ff8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40023c00 	.word	0x40023c00

080024d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024d8:	4b06      	ldr	r3, [pc, #24]	@ (80024f4 <HAL_IncTick+0x20>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	461a      	mov	r2, r3
 80024de:	4b06      	ldr	r3, [pc, #24]	@ (80024f8 <HAL_IncTick+0x24>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4413      	add	r3, r2
 80024e4:	4a04      	ldr	r2, [pc, #16]	@ (80024f8 <HAL_IncTick+0x24>)
 80024e6:	6013      	str	r3, [r2, #0]
}
 80024e8:	bf00      	nop
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	20000008 	.word	0x20000008
 80024f8:	200009c4 	.word	0x200009c4

080024fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002500:	4b03      	ldr	r3, [pc, #12]	@ (8002510 <HAL_GetTick+0x14>)
 8002502:	681b      	ldr	r3, [r3, #0]
}
 8002504:	4618      	mov	r0, r3
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	200009c4 	.word	0x200009c4

08002514 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800251c:	f7ff ffee 	bl	80024fc <HAL_GetTick>
 8002520:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800252c:	d005      	beq.n	800253a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800252e:	4b0a      	ldr	r3, [pc, #40]	@ (8002558 <HAL_Delay+0x44>)
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	461a      	mov	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4413      	add	r3, r2
 8002538:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800253a:	bf00      	nop
 800253c:	f7ff ffde 	bl	80024fc <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	429a      	cmp	r2, r3
 800254a:	d8f7      	bhi.n	800253c <HAL_Delay+0x28>
  {
  }
}
 800254c:	bf00      	nop
 800254e:	bf00      	nop
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	20000008 	.word	0x20000008

0800255c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800256c:	4b0c      	ldr	r3, [pc, #48]	@ (80025a0 <__NVIC_SetPriorityGrouping+0x44>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002578:	4013      	ands	r3, r2
 800257a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002584:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002588:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800258c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800258e:	4a04      	ldr	r2, [pc, #16]	@ (80025a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	60d3      	str	r3, [r2, #12]
}
 8002594:	bf00      	nop
 8002596:	3714      	adds	r7, #20
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	e000ed00 	.word	0xe000ed00

080025a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025a8:	4b04      	ldr	r3, [pc, #16]	@ (80025bc <__NVIC_GetPriorityGrouping+0x18>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	0a1b      	lsrs	r3, r3, #8
 80025ae:	f003 0307 	and.w	r3, r3, #7
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	e000ed00 	.word	0xe000ed00

080025c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	db0b      	blt.n	80025ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025d2:	79fb      	ldrb	r3, [r7, #7]
 80025d4:	f003 021f 	and.w	r2, r3, #31
 80025d8:	4907      	ldr	r1, [pc, #28]	@ (80025f8 <__NVIC_EnableIRQ+0x38>)
 80025da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025de:	095b      	lsrs	r3, r3, #5
 80025e0:	2001      	movs	r0, #1
 80025e2:	fa00 f202 	lsl.w	r2, r0, r2
 80025e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	e000e100 	.word	0xe000e100

080025fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	4603      	mov	r3, r0
 8002604:	6039      	str	r1, [r7, #0]
 8002606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260c:	2b00      	cmp	r3, #0
 800260e:	db0a      	blt.n	8002626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	b2da      	uxtb	r2, r3
 8002614:	490c      	ldr	r1, [pc, #48]	@ (8002648 <__NVIC_SetPriority+0x4c>)
 8002616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261a:	0112      	lsls	r2, r2, #4
 800261c:	b2d2      	uxtb	r2, r2
 800261e:	440b      	add	r3, r1
 8002620:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002624:	e00a      	b.n	800263c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	b2da      	uxtb	r2, r3
 800262a:	4908      	ldr	r1, [pc, #32]	@ (800264c <__NVIC_SetPriority+0x50>)
 800262c:	79fb      	ldrb	r3, [r7, #7]
 800262e:	f003 030f 	and.w	r3, r3, #15
 8002632:	3b04      	subs	r3, #4
 8002634:	0112      	lsls	r2, r2, #4
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	440b      	add	r3, r1
 800263a:	761a      	strb	r2, [r3, #24]
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	e000e100 	.word	0xe000e100
 800264c:	e000ed00 	.word	0xe000ed00

08002650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002650:	b480      	push	{r7}
 8002652:	b089      	sub	sp, #36	@ 0x24
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	f1c3 0307 	rsb	r3, r3, #7
 800266a:	2b04      	cmp	r3, #4
 800266c:	bf28      	it	cs
 800266e:	2304      	movcs	r3, #4
 8002670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	3304      	adds	r3, #4
 8002676:	2b06      	cmp	r3, #6
 8002678:	d902      	bls.n	8002680 <NVIC_EncodePriority+0x30>
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	3b03      	subs	r3, #3
 800267e:	e000      	b.n	8002682 <NVIC_EncodePriority+0x32>
 8002680:	2300      	movs	r3, #0
 8002682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002684:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43da      	mvns	r2, r3
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	401a      	ands	r2, r3
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002698:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	fa01 f303 	lsl.w	r3, r1, r3
 80026a2:	43d9      	mvns	r1, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a8:	4313      	orrs	r3, r2
         );
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3724      	adds	r7, #36	@ 0x24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr

080026b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b082      	sub	sp, #8
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f7ff ff4c 	bl	800255c <__NVIC_SetPriorityGrouping>
}
 80026c4:	bf00      	nop
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	4603      	mov	r3, r0
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
 80026d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026da:	2300      	movs	r3, #0
 80026dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026de:	f7ff ff61 	bl	80025a4 <__NVIC_GetPriorityGrouping>
 80026e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	68b9      	ldr	r1, [r7, #8]
 80026e8:	6978      	ldr	r0, [r7, #20]
 80026ea:	f7ff ffb1 	bl	8002650 <NVIC_EncodePriority>
 80026ee:	4602      	mov	r2, r0
 80026f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026f4:	4611      	mov	r1, r2
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff ff80 	bl	80025fc <__NVIC_SetPriority>
}
 80026fc:	bf00      	nop
 80026fe:	3718      	adds	r7, #24
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800270e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff ff54 	bl	80025c0 <__NVIC_EnableIRQ>
}
 8002718:	bf00      	nop
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002720:	b480      	push	{r7}
 8002722:	b089      	sub	sp, #36	@ 0x24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800272a:	2300      	movs	r3, #0
 800272c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800272e:	2300      	movs	r3, #0
 8002730:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002732:	2300      	movs	r3, #0
 8002734:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002736:	2300      	movs	r3, #0
 8002738:	61fb      	str	r3, [r7, #28]
 800273a:	e165      	b.n	8002a08 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800273c:	2201      	movs	r2, #1
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	4013      	ands	r3, r2
 800274e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	429a      	cmp	r2, r3
 8002756:	f040 8154 	bne.w	8002a02 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	2b01      	cmp	r3, #1
 8002764:	d005      	beq.n	8002772 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800276e:	2b02      	cmp	r3, #2
 8002770:	d130      	bne.n	80027d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	2203      	movs	r2, #3
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	43db      	mvns	r3, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4013      	ands	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	68da      	ldr	r2, [r3, #12]
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	4313      	orrs	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027a8:	2201      	movs	r2, #1
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	43db      	mvns	r3, r3
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4013      	ands	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	091b      	lsrs	r3, r3, #4
 80027be:	f003 0201 	and.w	r2, r3, #1
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f003 0303 	and.w	r3, r3, #3
 80027dc:	2b03      	cmp	r3, #3
 80027de:	d017      	beq.n	8002810 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	2203      	movs	r2, #3
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	43db      	mvns	r3, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4013      	ands	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4313      	orrs	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f003 0303 	and.w	r3, r3, #3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d123      	bne.n	8002864 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	08da      	lsrs	r2, r3, #3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3208      	adds	r2, #8
 8002824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002828:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	220f      	movs	r2, #15
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	691a      	ldr	r2, [r3, #16]
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4313      	orrs	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	08da      	lsrs	r2, r3, #3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	3208      	adds	r2, #8
 800285e:	69b9      	ldr	r1, [r7, #24]
 8002860:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	2203      	movs	r2, #3
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	43db      	mvns	r3, r3
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	4013      	ands	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 0203 	and.w	r2, r3, #3
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4313      	orrs	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 80ae 	beq.w	8002a02 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028a6:	2300      	movs	r3, #0
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	4b5d      	ldr	r3, [pc, #372]	@ (8002a20 <HAL_GPIO_Init+0x300>)
 80028ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ae:	4a5c      	ldr	r2, [pc, #368]	@ (8002a20 <HAL_GPIO_Init+0x300>)
 80028b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80028b6:	4b5a      	ldr	r3, [pc, #360]	@ (8002a20 <HAL_GPIO_Init+0x300>)
 80028b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028c2:	4a58      	ldr	r2, [pc, #352]	@ (8002a24 <HAL_GPIO_Init+0x304>)
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	089b      	lsrs	r3, r3, #2
 80028c8:	3302      	adds	r3, #2
 80028ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	220f      	movs	r2, #15
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	43db      	mvns	r3, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4013      	ands	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a4f      	ldr	r2, [pc, #316]	@ (8002a28 <HAL_GPIO_Init+0x308>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d025      	beq.n	800293a <HAL_GPIO_Init+0x21a>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a4e      	ldr	r2, [pc, #312]	@ (8002a2c <HAL_GPIO_Init+0x30c>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d01f      	beq.n	8002936 <HAL_GPIO_Init+0x216>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a4d      	ldr	r2, [pc, #308]	@ (8002a30 <HAL_GPIO_Init+0x310>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d019      	beq.n	8002932 <HAL_GPIO_Init+0x212>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a4c      	ldr	r2, [pc, #304]	@ (8002a34 <HAL_GPIO_Init+0x314>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d013      	beq.n	800292e <HAL_GPIO_Init+0x20e>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a4b      	ldr	r2, [pc, #300]	@ (8002a38 <HAL_GPIO_Init+0x318>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d00d      	beq.n	800292a <HAL_GPIO_Init+0x20a>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a4a      	ldr	r2, [pc, #296]	@ (8002a3c <HAL_GPIO_Init+0x31c>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d007      	beq.n	8002926 <HAL_GPIO_Init+0x206>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a49      	ldr	r2, [pc, #292]	@ (8002a40 <HAL_GPIO_Init+0x320>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d101      	bne.n	8002922 <HAL_GPIO_Init+0x202>
 800291e:	2306      	movs	r3, #6
 8002920:	e00c      	b.n	800293c <HAL_GPIO_Init+0x21c>
 8002922:	2307      	movs	r3, #7
 8002924:	e00a      	b.n	800293c <HAL_GPIO_Init+0x21c>
 8002926:	2305      	movs	r3, #5
 8002928:	e008      	b.n	800293c <HAL_GPIO_Init+0x21c>
 800292a:	2304      	movs	r3, #4
 800292c:	e006      	b.n	800293c <HAL_GPIO_Init+0x21c>
 800292e:	2303      	movs	r3, #3
 8002930:	e004      	b.n	800293c <HAL_GPIO_Init+0x21c>
 8002932:	2302      	movs	r3, #2
 8002934:	e002      	b.n	800293c <HAL_GPIO_Init+0x21c>
 8002936:	2301      	movs	r3, #1
 8002938:	e000      	b.n	800293c <HAL_GPIO_Init+0x21c>
 800293a:	2300      	movs	r3, #0
 800293c:	69fa      	ldr	r2, [r7, #28]
 800293e:	f002 0203 	and.w	r2, r2, #3
 8002942:	0092      	lsls	r2, r2, #2
 8002944:	4093      	lsls	r3, r2
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	4313      	orrs	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800294c:	4935      	ldr	r1, [pc, #212]	@ (8002a24 <HAL_GPIO_Init+0x304>)
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	089b      	lsrs	r3, r3, #2
 8002952:	3302      	adds	r3, #2
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800295a:	4b3a      	ldr	r3, [pc, #232]	@ (8002a44 <HAL_GPIO_Init+0x324>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	43db      	mvns	r3, r3
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	4013      	ands	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	4313      	orrs	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800297e:	4a31      	ldr	r2, [pc, #196]	@ (8002a44 <HAL_GPIO_Init+0x324>)
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002984:	4b2f      	ldr	r3, [pc, #188]	@ (8002a44 <HAL_GPIO_Init+0x324>)
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	43db      	mvns	r3, r3
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4013      	ands	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d003      	beq.n	80029a8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029a8:	4a26      	ldr	r2, [pc, #152]	@ (8002a44 <HAL_GPIO_Init+0x324>)
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029ae:	4b25      	ldr	r3, [pc, #148]	@ (8002a44 <HAL_GPIO_Init+0x324>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	43db      	mvns	r3, r3
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	4013      	ands	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029d2:	4a1c      	ldr	r2, [pc, #112]	@ (8002a44 <HAL_GPIO_Init+0x324>)
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002a44 <HAL_GPIO_Init+0x324>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	43db      	mvns	r3, r3
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	4013      	ands	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d003      	beq.n	80029fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029fc:	4a11      	ldr	r2, [pc, #68]	@ (8002a44 <HAL_GPIO_Init+0x324>)
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	3301      	adds	r3, #1
 8002a06:	61fb      	str	r3, [r7, #28]
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	2b0f      	cmp	r3, #15
 8002a0c:	f67f ae96 	bls.w	800273c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a10:	bf00      	nop
 8002a12:	bf00      	nop
 8002a14:	3724      	adds	r7, #36	@ 0x24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	40023800 	.word	0x40023800
 8002a24:	40013800 	.word	0x40013800
 8002a28:	40020000 	.word	0x40020000
 8002a2c:	40020400 	.word	0x40020400
 8002a30:	40020800 	.word	0x40020800
 8002a34:	40020c00 	.word	0x40020c00
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	40021400 	.word	0x40021400
 8002a40:	40021800 	.word	0x40021800
 8002a44:	40013c00 	.word	0x40013c00

08002a48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	460b      	mov	r3, r1
 8002a52:	807b      	strh	r3, [r7, #2]
 8002a54:	4613      	mov	r3, r2
 8002a56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a58:	787b      	ldrb	r3, [r7, #1]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d003      	beq.n	8002a66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a5e:	887a      	ldrh	r2, [r7, #2]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a64:	e003      	b.n	8002a6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a66:	887b      	ldrh	r3, [r7, #2]
 8002a68:	041a      	lsls	r2, r3, #16
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	619a      	str	r2, [r3, #24]
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
	...

08002a7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e12b      	b.n	8002ce6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d106      	bne.n	8002aa8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f7ff fad4 	bl	8002050 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2224      	movs	r2, #36	@ 0x24
 8002aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f022 0201 	bic.w	r2, r2, #1
 8002abe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ace:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ade:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ae0:	f001 fa10 	bl	8003f04 <HAL_RCC_GetPCLK1Freq>
 8002ae4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	4a81      	ldr	r2, [pc, #516]	@ (8002cf0 <HAL_I2C_Init+0x274>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d807      	bhi.n	8002b00 <HAL_I2C_Init+0x84>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	4a80      	ldr	r2, [pc, #512]	@ (8002cf4 <HAL_I2C_Init+0x278>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	bf94      	ite	ls
 8002af8:	2301      	movls	r3, #1
 8002afa:	2300      	movhi	r3, #0
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	e006      	b.n	8002b0e <HAL_I2C_Init+0x92>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	4a7d      	ldr	r2, [pc, #500]	@ (8002cf8 <HAL_I2C_Init+0x27c>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	bf94      	ite	ls
 8002b08:	2301      	movls	r3, #1
 8002b0a:	2300      	movhi	r3, #0
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e0e7      	b.n	8002ce6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	4a78      	ldr	r2, [pc, #480]	@ (8002cfc <HAL_I2C_Init+0x280>)
 8002b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1e:	0c9b      	lsrs	r3, r3, #18
 8002b20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	430a      	orrs	r2, r1
 8002b34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	4a6a      	ldr	r2, [pc, #424]	@ (8002cf0 <HAL_I2C_Init+0x274>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d802      	bhi.n	8002b50 <HAL_I2C_Init+0xd4>
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	e009      	b.n	8002b64 <HAL_I2C_Init+0xe8>
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002b56:	fb02 f303 	mul.w	r3, r2, r3
 8002b5a:	4a69      	ldr	r2, [pc, #420]	@ (8002d00 <HAL_I2C_Init+0x284>)
 8002b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b60:	099b      	lsrs	r3, r3, #6
 8002b62:	3301      	adds	r3, #1
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	6812      	ldr	r2, [r2, #0]
 8002b68:	430b      	orrs	r3, r1
 8002b6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002b76:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	495c      	ldr	r1, [pc, #368]	@ (8002cf0 <HAL_I2C_Init+0x274>)
 8002b80:	428b      	cmp	r3, r1
 8002b82:	d819      	bhi.n	8002bb8 <HAL_I2C_Init+0x13c>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	1e59      	subs	r1, r3, #1
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b92:	1c59      	adds	r1, r3, #1
 8002b94:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002b98:	400b      	ands	r3, r1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00a      	beq.n	8002bb4 <HAL_I2C_Init+0x138>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	1e59      	subs	r1, r3, #1
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bac:	3301      	adds	r3, #1
 8002bae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bb2:	e051      	b.n	8002c58 <HAL_I2C_Init+0x1dc>
 8002bb4:	2304      	movs	r3, #4
 8002bb6:	e04f      	b.n	8002c58 <HAL_I2C_Init+0x1dc>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d111      	bne.n	8002be4 <HAL_I2C_Init+0x168>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	1e58      	subs	r0, r3, #1
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6859      	ldr	r1, [r3, #4]
 8002bc8:	460b      	mov	r3, r1
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	440b      	add	r3, r1
 8002bce:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	bf0c      	ite	eq
 8002bdc:	2301      	moveq	r3, #1
 8002bde:	2300      	movne	r3, #0
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	e012      	b.n	8002c0a <HAL_I2C_Init+0x18e>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	1e58      	subs	r0, r3, #1
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6859      	ldr	r1, [r3, #4]
 8002bec:	460b      	mov	r3, r1
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	0099      	lsls	r1, r3, #2
 8002bf4:	440b      	add	r3, r1
 8002bf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	bf0c      	ite	eq
 8002c04:	2301      	moveq	r3, #1
 8002c06:	2300      	movne	r3, #0
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <HAL_I2C_Init+0x196>
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e022      	b.n	8002c58 <HAL_I2C_Init+0x1dc>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10e      	bne.n	8002c38 <HAL_I2C_Init+0x1bc>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	1e58      	subs	r0, r3, #1
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6859      	ldr	r1, [r3, #4]
 8002c22:	460b      	mov	r3, r1
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	440b      	add	r3, r1
 8002c28:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c36:	e00f      	b.n	8002c58 <HAL_I2C_Init+0x1dc>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	1e58      	subs	r0, r3, #1
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6859      	ldr	r1, [r3, #4]
 8002c40:	460b      	mov	r3, r1
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	440b      	add	r3, r1
 8002c46:	0099      	lsls	r1, r3, #2
 8002c48:	440b      	add	r3, r1
 8002c4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c4e:	3301      	adds	r3, #1
 8002c50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c54:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	6809      	ldr	r1, [r1, #0]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	69da      	ldr	r2, [r3, #28]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	431a      	orrs	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002c86:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6911      	ldr	r1, [r2, #16]
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	68d2      	ldr	r2, [r2, #12]
 8002c92:	4311      	orrs	r1, r2
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6812      	ldr	r2, [r2, #0]
 8002c98:	430b      	orrs	r3, r1
 8002c9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	695a      	ldr	r2, [r3, #20]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f042 0201 	orr.w	r2, r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2220      	movs	r2, #32
 8002cd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	000186a0 	.word	0x000186a0
 8002cf4:	001e847f 	.word	0x001e847f
 8002cf8:	003d08ff 	.word	0x003d08ff
 8002cfc:	431bde83 	.word	0x431bde83
 8002d00:	10624dd3 	.word	0x10624dd3

08002d04 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b088      	sub	sp, #32
 8002d08:	af02      	add	r7, sp, #8
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	4608      	mov	r0, r1
 8002d0e:	4611      	mov	r1, r2
 8002d10:	461a      	mov	r2, r3
 8002d12:	4603      	mov	r3, r0
 8002d14:	817b      	strh	r3, [r7, #10]
 8002d16:	460b      	mov	r3, r1
 8002d18:	813b      	strh	r3, [r7, #8]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d1e:	f7ff fbed 	bl	80024fc <HAL_GetTick>
 8002d22:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b20      	cmp	r3, #32
 8002d2e:	f040 80d9 	bne.w	8002ee4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	2319      	movs	r3, #25
 8002d38:	2201      	movs	r2, #1
 8002d3a:	496d      	ldr	r1, [pc, #436]	@ (8002ef0 <HAL_I2C_Mem_Write+0x1ec>)
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f000 fdb9 	bl	80038b4 <I2C_WaitOnFlagUntilTimeout>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002d48:	2302      	movs	r3, #2
 8002d4a:	e0cc      	b.n	8002ee6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d101      	bne.n	8002d5a <HAL_I2C_Mem_Write+0x56>
 8002d56:	2302      	movs	r3, #2
 8002d58:	e0c5      	b.n	8002ee6 <HAL_I2C_Mem_Write+0x1e2>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d007      	beq.n	8002d80 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f042 0201 	orr.w	r2, r2, #1
 8002d7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2221      	movs	r2, #33	@ 0x21
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2240      	movs	r2, #64	@ 0x40
 8002d9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6a3a      	ldr	r2, [r7, #32]
 8002daa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002db0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4a4d      	ldr	r2, [pc, #308]	@ (8002ef4 <HAL_I2C_Mem_Write+0x1f0>)
 8002dc0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002dc2:	88f8      	ldrh	r0, [r7, #6]
 8002dc4:	893a      	ldrh	r2, [r7, #8]
 8002dc6:	8979      	ldrh	r1, [r7, #10]
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	9301      	str	r3, [sp, #4]
 8002dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 fbf0 	bl	80035b8 <I2C_RequestMemoryWrite>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d052      	beq.n	8002e84 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e081      	b.n	8002ee6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 fe7e 	bl	8003ae8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00d      	beq.n	8002e0e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	d107      	bne.n	8002e0a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e06b      	b.n	8002ee6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e12:	781a      	ldrb	r2, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1e:	1c5a      	adds	r2, r3, #1
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	3b01      	subs	r3, #1
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b04      	cmp	r3, #4
 8002e4a:	d11b      	bne.n	8002e84 <HAL_I2C_Mem_Write+0x180>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d017      	beq.n	8002e84 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e58:	781a      	ldrb	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e64:	1c5a      	adds	r2, r3, #1
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1aa      	bne.n	8002de2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f000 fe71 	bl	8003b78 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00d      	beq.n	8002eb8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea0:	2b04      	cmp	r3, #4
 8002ea2:	d107      	bne.n	8002eb4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eb2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e016      	b.n	8002ee6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ec6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2220      	movs	r2, #32
 8002ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	e000      	b.n	8002ee6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002ee4:	2302      	movs	r3, #2
  }
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3718      	adds	r7, #24
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	00100002 	.word	0x00100002
 8002ef4:	ffff0000 	.word	0xffff0000

08002ef8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b08c      	sub	sp, #48	@ 0x30
 8002efc:	af02      	add	r7, sp, #8
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	4608      	mov	r0, r1
 8002f02:	4611      	mov	r1, r2
 8002f04:	461a      	mov	r2, r3
 8002f06:	4603      	mov	r3, r0
 8002f08:	817b      	strh	r3, [r7, #10]
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	813b      	strh	r3, [r7, #8]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f12:	f7ff faf3 	bl	80024fc <HAL_GetTick>
 8002f16:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	2b20      	cmp	r3, #32
 8002f22:	f040 8214 	bne.w	800334e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f28:	9300      	str	r3, [sp, #0]
 8002f2a:	2319      	movs	r3, #25
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	497b      	ldr	r1, [pc, #492]	@ (800311c <HAL_I2C_Mem_Read+0x224>)
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f000 fcbf 	bl	80038b4 <I2C_WaitOnFlagUntilTimeout>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	e207      	b.n	8003350 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d101      	bne.n	8002f4e <HAL_I2C_Mem_Read+0x56>
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	e200      	b.n	8003350 <HAL_I2C_Mem_Read+0x458>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d007      	beq.n	8002f74 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f042 0201 	orr.w	r2, r2, #1
 8002f72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2222      	movs	r2, #34	@ 0x22
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2240      	movs	r2, #64	@ 0x40
 8002f90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f9e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002fa4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	4a5b      	ldr	r2, [pc, #364]	@ (8003120 <HAL_I2C_Mem_Read+0x228>)
 8002fb4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fb6:	88f8      	ldrh	r0, [r7, #6]
 8002fb8:	893a      	ldrh	r2, [r7, #8]
 8002fba:	8979      	ldrh	r1, [r7, #10]
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fbe:	9301      	str	r3, [sp, #4]
 8002fc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fc2:	9300      	str	r3, [sp, #0]
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f000 fb8c 	bl	80036e4 <I2C_RequestMemoryRead>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e1bc      	b.n	8003350 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d113      	bne.n	8003006 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fde:	2300      	movs	r3, #0
 8002fe0:	623b      	str	r3, [r7, #32]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	623b      	str	r3, [r7, #32]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	623b      	str	r3, [r7, #32]
 8002ff2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	e190      	b.n	8003328 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800300a:	2b01      	cmp	r3, #1
 800300c:	d11b      	bne.n	8003046 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800301c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800301e:	2300      	movs	r3, #0
 8003020:	61fb      	str	r3, [r7, #28]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	695b      	ldr	r3, [r3, #20]
 8003028:	61fb      	str	r3, [r7, #28]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	61fb      	str	r3, [r7, #28]
 8003032:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	e170      	b.n	8003328 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800304a:	2b02      	cmp	r3, #2
 800304c:	d11b      	bne.n	8003086 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800305c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800306c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800306e:	2300      	movs	r3, #0
 8003070:	61bb      	str	r3, [r7, #24]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	61bb      	str	r3, [r7, #24]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	61bb      	str	r3, [r7, #24]
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	e150      	b.n	8003328 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003086:	2300      	movs	r3, #0
 8003088:	617b      	str	r3, [r7, #20]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	617b      	str	r3, [r7, #20]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	617b      	str	r3, [r7, #20]
 800309a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800309c:	e144      	b.n	8003328 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030a2:	2b03      	cmp	r3, #3
 80030a4:	f200 80f1 	bhi.w	800328a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d123      	bne.n	80030f8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030b2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f000 fda7 	bl	8003c08 <I2C_WaitOnRXNEFlagUntilTimeout>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e145      	b.n	8003350 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	691a      	ldr	r2, [r3, #16]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ce:	b2d2      	uxtb	r2, r2
 80030d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d6:	1c5a      	adds	r2, r3, #1
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030e0:	3b01      	subs	r3, #1
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	3b01      	subs	r3, #1
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80030f6:	e117      	b.n	8003328 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d14e      	bne.n	800319e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003102:	9300      	str	r3, [sp, #0]
 8003104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003106:	2200      	movs	r2, #0
 8003108:	4906      	ldr	r1, [pc, #24]	@ (8003124 <HAL_I2C_Mem_Read+0x22c>)
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f000 fbd2 	bl	80038b4 <I2C_WaitOnFlagUntilTimeout>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d008      	beq.n	8003128 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e11a      	b.n	8003350 <HAL_I2C_Mem_Read+0x458>
 800311a:	bf00      	nop
 800311c:	00100002 	.word	0x00100002
 8003120:	ffff0000 	.word	0xffff0000
 8003124:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003136:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	691a      	ldr	r2, [r3, #16]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003142:	b2d2      	uxtb	r2, r2
 8003144:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314a:	1c5a      	adds	r2, r3, #1
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003154:	3b01      	subs	r3, #1
 8003156:	b29a      	uxth	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003160:	b29b      	uxth	r3, r3
 8003162:	3b01      	subs	r3, #1
 8003164:	b29a      	uxth	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	691a      	ldr	r2, [r3, #16]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003174:	b2d2      	uxtb	r2, r2
 8003176:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317c:	1c5a      	adds	r2, r3, #1
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003186:	3b01      	subs	r3, #1
 8003188:	b29a      	uxth	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003192:	b29b      	uxth	r3, r3
 8003194:	3b01      	subs	r3, #1
 8003196:	b29a      	uxth	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800319c:	e0c4      	b.n	8003328 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800319e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a0:	9300      	str	r3, [sp, #0]
 80031a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031a4:	2200      	movs	r2, #0
 80031a6:	496c      	ldr	r1, [pc, #432]	@ (8003358 <HAL_I2C_Mem_Read+0x460>)
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	f000 fb83 	bl	80038b4 <I2C_WaitOnFlagUntilTimeout>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e0cb      	b.n	8003350 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	691a      	ldr	r2, [r3, #16]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031da:	1c5a      	adds	r2, r3, #1
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031e4:	3b01      	subs	r3, #1
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	3b01      	subs	r3, #1
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031fc:	9300      	str	r3, [sp, #0]
 80031fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003200:	2200      	movs	r2, #0
 8003202:	4955      	ldr	r1, [pc, #340]	@ (8003358 <HAL_I2C_Mem_Read+0x460>)
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	f000 fb55 	bl	80038b4 <I2C_WaitOnFlagUntilTimeout>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e09d      	b.n	8003350 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003222:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	691a      	ldr	r2, [r3, #16]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800322e:	b2d2      	uxtb	r2, r2
 8003230:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003236:	1c5a      	adds	r2, r3, #1
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003240:	3b01      	subs	r3, #1
 8003242:	b29a      	uxth	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800324c:	b29b      	uxth	r3, r3
 800324e:	3b01      	subs	r3, #1
 8003250:	b29a      	uxth	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	691a      	ldr	r2, [r3, #16]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003260:	b2d2      	uxtb	r2, r2
 8003262:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003268:	1c5a      	adds	r2, r3, #1
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003272:	3b01      	subs	r3, #1
 8003274:	b29a      	uxth	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800327e:	b29b      	uxth	r3, r3
 8003280:	3b01      	subs	r3, #1
 8003282:	b29a      	uxth	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003288:	e04e      	b.n	8003328 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800328a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800328c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 fcba 	bl	8003c08 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e058      	b.n	8003350 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	691a      	ldr	r2, [r3, #16]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a8:	b2d2      	uxtb	r2, r2
 80032aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b0:	1c5a      	adds	r2, r3, #1
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ba:	3b01      	subs	r3, #1
 80032bc:	b29a      	uxth	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	3b01      	subs	r3, #1
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	f003 0304 	and.w	r3, r3, #4
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d124      	bne.n	8003328 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032e2:	2b03      	cmp	r3, #3
 80032e4:	d107      	bne.n	80032f6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032f4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	691a      	ldr	r2, [r3, #16]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003300:	b2d2      	uxtb	r2, r2
 8003302:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003308:	1c5a      	adds	r2, r3, #1
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003312:	3b01      	subs	r3, #1
 8003314:	b29a      	uxth	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800331e:	b29b      	uxth	r3, r3
 8003320:	3b01      	subs	r3, #1
 8003322:	b29a      	uxth	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800332c:	2b00      	cmp	r3, #0
 800332e:	f47f aeb6 	bne.w	800309e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2220      	movs	r2, #32
 8003336:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800334a:	2300      	movs	r3, #0
 800334c:	e000      	b.n	8003350 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800334e:	2302      	movs	r3, #2
  }
}
 8003350:	4618      	mov	r0, r3
 8003352:	3728      	adds	r7, #40	@ 0x28
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	00010004 	.word	0x00010004

0800335c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b08a      	sub	sp, #40	@ 0x28
 8003360:	af02      	add	r7, sp, #8
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	607a      	str	r2, [r7, #4]
 8003366:	603b      	str	r3, [r7, #0]
 8003368:	460b      	mov	r3, r1
 800336a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800336c:	f7ff f8c6 	bl	80024fc <HAL_GetTick>
 8003370:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003372:	2300      	movs	r3, #0
 8003374:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b20      	cmp	r3, #32
 8003380:	f040 8111 	bne.w	80035a6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	2319      	movs	r3, #25
 800338a:	2201      	movs	r2, #1
 800338c:	4988      	ldr	r1, [pc, #544]	@ (80035b0 <HAL_I2C_IsDeviceReady+0x254>)
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f000 fa90 	bl	80038b4 <I2C_WaitOnFlagUntilTimeout>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800339a:	2302      	movs	r3, #2
 800339c:	e104      	b.n	80035a8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d101      	bne.n	80033ac <HAL_I2C_IsDeviceReady+0x50>
 80033a8:	2302      	movs	r3, #2
 80033aa:	e0fd      	b.n	80035a8 <HAL_I2C_IsDeviceReady+0x24c>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d007      	beq.n	80033d2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f042 0201 	orr.w	r2, r2, #1
 80033d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2224      	movs	r2, #36	@ 0x24
 80033e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	4a70      	ldr	r2, [pc, #448]	@ (80035b4 <HAL_I2C_IsDeviceReady+0x258>)
 80033f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003404:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	2200      	movs	r2, #0
 800340e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 fa4e 	bl	80038b4 <I2C_WaitOnFlagUntilTimeout>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00d      	beq.n	800343a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003428:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800342c:	d103      	bne.n	8003436 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003434:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e0b6      	b.n	80035a8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800343a:	897b      	ldrh	r3, [r7, #10]
 800343c:	b2db      	uxtb	r3, r3
 800343e:	461a      	mov	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003448:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800344a:	f7ff f857 	bl	80024fc <HAL_GetTick>
 800344e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b02      	cmp	r3, #2
 800345c:	bf0c      	ite	eq
 800345e:	2301      	moveq	r3, #1
 8003460:	2300      	movne	r3, #0
 8003462:	b2db      	uxtb	r3, r3
 8003464:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	695b      	ldr	r3, [r3, #20]
 800346c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003470:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003474:	bf0c      	ite	eq
 8003476:	2301      	moveq	r3, #1
 8003478:	2300      	movne	r3, #0
 800347a:	b2db      	uxtb	r3, r3
 800347c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800347e:	e025      	b.n	80034cc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003480:	f7ff f83c 	bl	80024fc <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	429a      	cmp	r2, r3
 800348e:	d302      	bcc.n	8003496 <HAL_I2C_IsDeviceReady+0x13a>
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d103      	bne.n	800349e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	22a0      	movs	r2, #160	@ 0xa0
 800349a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	695b      	ldr	r3, [r3, #20]
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	bf0c      	ite	eq
 80034ac:	2301      	moveq	r3, #1
 80034ae:	2300      	movne	r3, #0
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034c2:	bf0c      	ite	eq
 80034c4:	2301      	moveq	r3, #1
 80034c6:	2300      	movne	r3, #0
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2ba0      	cmp	r3, #160	@ 0xa0
 80034d6:	d005      	beq.n	80034e4 <HAL_I2C_IsDeviceReady+0x188>
 80034d8:	7dfb      	ldrb	r3, [r7, #23]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d102      	bne.n	80034e4 <HAL_I2C_IsDeviceReady+0x188>
 80034de:	7dbb      	ldrb	r3, [r7, #22]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d0cd      	beq.n	8003480 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2220      	movs	r2, #32
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d129      	bne.n	800354e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003508:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800350a:	2300      	movs	r3, #0
 800350c:	613b      	str	r3, [r7, #16]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	613b      	str	r3, [r7, #16]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	613b      	str	r3, [r7, #16]
 800351e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	2319      	movs	r3, #25
 8003526:	2201      	movs	r2, #1
 8003528:	4921      	ldr	r1, [pc, #132]	@ (80035b0 <HAL_I2C_IsDeviceReady+0x254>)
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f000 f9c2 	bl	80038b4 <I2C_WaitOnFlagUntilTimeout>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e036      	b.n	80035a8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2220      	movs	r2, #32
 800353e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800354a:	2300      	movs	r3, #0
 800354c:	e02c      	b.n	80035a8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800355c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003566:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	9300      	str	r3, [sp, #0]
 800356c:	2319      	movs	r3, #25
 800356e:	2201      	movs	r2, #1
 8003570:	490f      	ldr	r1, [pc, #60]	@ (80035b0 <HAL_I2C_IsDeviceReady+0x254>)
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 f99e 	bl	80038b4 <I2C_WaitOnFlagUntilTimeout>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e012      	b.n	80035a8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	3301      	adds	r3, #1
 8003586:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	429a      	cmp	r2, r3
 800358e:	f4ff af32 	bcc.w	80033f6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2220      	movs	r2, #32
 8003596:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e000      	b.n	80035a8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80035a6:	2302      	movs	r3, #2
  }
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3720      	adds	r7, #32
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	00100002 	.word	0x00100002
 80035b4:	ffff0000 	.word	0xffff0000

080035b8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b088      	sub	sp, #32
 80035bc:	af02      	add	r7, sp, #8
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	4608      	mov	r0, r1
 80035c2:	4611      	mov	r1, r2
 80035c4:	461a      	mov	r2, r3
 80035c6:	4603      	mov	r3, r0
 80035c8:	817b      	strh	r3, [r7, #10]
 80035ca:	460b      	mov	r3, r1
 80035cc:	813b      	strh	r3, [r7, #8]
 80035ce:	4613      	mov	r3, r2
 80035d0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	6a3b      	ldr	r3, [r7, #32]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f000 f960 	bl	80038b4 <I2C_WaitOnFlagUntilTimeout>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00d      	beq.n	8003616 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003604:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003608:	d103      	bne.n	8003612 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003610:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e05f      	b.n	80036d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003616:	897b      	ldrh	r3, [r7, #10]
 8003618:	b2db      	uxtb	r3, r3
 800361a:	461a      	mov	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003624:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003628:	6a3a      	ldr	r2, [r7, #32]
 800362a:	492d      	ldr	r1, [pc, #180]	@ (80036e0 <I2C_RequestMemoryWrite+0x128>)
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f000 f9bb 	bl	80039a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d001      	beq.n	800363c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e04c      	b.n	80036d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800363c:	2300      	movs	r3, #0
 800363e:	617b      	str	r3, [r7, #20]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	617b      	str	r3, [r7, #20]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	617b      	str	r3, [r7, #20]
 8003650:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003652:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003654:	6a39      	ldr	r1, [r7, #32]
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f000 fa46 	bl	8003ae8 <I2C_WaitOnTXEFlagUntilTimeout>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00d      	beq.n	800367e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003666:	2b04      	cmp	r3, #4
 8003668:	d107      	bne.n	800367a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003678:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e02b      	b.n	80036d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800367e:	88fb      	ldrh	r3, [r7, #6]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d105      	bne.n	8003690 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003684:	893b      	ldrh	r3, [r7, #8]
 8003686:	b2da      	uxtb	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	611a      	str	r2, [r3, #16]
 800368e:	e021      	b.n	80036d4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003690:	893b      	ldrh	r3, [r7, #8]
 8003692:	0a1b      	lsrs	r3, r3, #8
 8003694:	b29b      	uxth	r3, r3
 8003696:	b2da      	uxtb	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800369e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036a0:	6a39      	ldr	r1, [r7, #32]
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f000 fa20 	bl	8003ae8 <I2C_WaitOnTXEFlagUntilTimeout>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00d      	beq.n	80036ca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b2:	2b04      	cmp	r3, #4
 80036b4:	d107      	bne.n	80036c6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e005      	b.n	80036d6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036ca:	893b      	ldrh	r3, [r7, #8]
 80036cc:	b2da      	uxtb	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3718      	adds	r7, #24
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	00010002 	.word	0x00010002

080036e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b088      	sub	sp, #32
 80036e8:	af02      	add	r7, sp, #8
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	4608      	mov	r0, r1
 80036ee:	4611      	mov	r1, r2
 80036f0:	461a      	mov	r2, r3
 80036f2:	4603      	mov	r3, r0
 80036f4:	817b      	strh	r3, [r7, #10]
 80036f6:	460b      	mov	r3, r1
 80036f8:	813b      	strh	r3, [r7, #8]
 80036fa:	4613      	mov	r3, r2
 80036fc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800370c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800371c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800371e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	6a3b      	ldr	r3, [r7, #32]
 8003724:	2200      	movs	r2, #0
 8003726:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f000 f8c2 	bl	80038b4 <I2C_WaitOnFlagUntilTimeout>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00d      	beq.n	8003752 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003740:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003744:	d103      	bne.n	800374e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800374c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e0aa      	b.n	80038a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003752:	897b      	ldrh	r3, [r7, #10]
 8003754:	b2db      	uxtb	r3, r3
 8003756:	461a      	mov	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003760:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003764:	6a3a      	ldr	r2, [r7, #32]
 8003766:	4952      	ldr	r1, [pc, #328]	@ (80038b0 <I2C_RequestMemoryRead+0x1cc>)
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f000 f91d 	bl	80039a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e097      	b.n	80038a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003778:	2300      	movs	r3, #0
 800377a:	617b      	str	r3, [r7, #20]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	617b      	str	r3, [r7, #20]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	617b      	str	r3, [r7, #20]
 800378c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800378e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003790:	6a39      	ldr	r1, [r7, #32]
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	f000 f9a8 	bl	8003ae8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00d      	beq.n	80037ba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a2:	2b04      	cmp	r3, #4
 80037a4:	d107      	bne.n	80037b6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e076      	b.n	80038a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80037ba:	88fb      	ldrh	r3, [r7, #6]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d105      	bne.n	80037cc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037c0:	893b      	ldrh	r3, [r7, #8]
 80037c2:	b2da      	uxtb	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	611a      	str	r2, [r3, #16]
 80037ca:	e021      	b.n	8003810 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80037cc:	893b      	ldrh	r3, [r7, #8]
 80037ce:	0a1b      	lsrs	r3, r3, #8
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	b2da      	uxtb	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037dc:	6a39      	ldr	r1, [r7, #32]
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f000 f982 	bl	8003ae8 <I2C_WaitOnTXEFlagUntilTimeout>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00d      	beq.n	8003806 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ee:	2b04      	cmp	r3, #4
 80037f0:	d107      	bne.n	8003802 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003800:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e050      	b.n	80038a8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003806:	893b      	ldrh	r3, [r7, #8]
 8003808:	b2da      	uxtb	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003810:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003812:	6a39      	ldr	r1, [r7, #32]
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f000 f967 	bl	8003ae8 <I2C_WaitOnTXEFlagUntilTimeout>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00d      	beq.n	800383c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003824:	2b04      	cmp	r3, #4
 8003826:	d107      	bne.n	8003838 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003836:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e035      	b.n	80038a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800384a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800384c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800384e:	9300      	str	r3, [sp, #0]
 8003850:	6a3b      	ldr	r3, [r7, #32]
 8003852:	2200      	movs	r2, #0
 8003854:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	f000 f82b 	bl	80038b4 <I2C_WaitOnFlagUntilTimeout>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00d      	beq.n	8003880 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800386e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003872:	d103      	bne.n	800387c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800387a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e013      	b.n	80038a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003880:	897b      	ldrh	r3, [r7, #10]
 8003882:	b2db      	uxtb	r3, r3
 8003884:	f043 0301 	orr.w	r3, r3, #1
 8003888:	b2da      	uxtb	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003892:	6a3a      	ldr	r2, [r7, #32]
 8003894:	4906      	ldr	r1, [pc, #24]	@ (80038b0 <I2C_RequestMemoryRead+0x1cc>)
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 f886 	bl	80039a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e000      	b.n	80038a8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3718      	adds	r7, #24
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	00010002 	.word	0x00010002

080038b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	603b      	str	r3, [r7, #0]
 80038c0:	4613      	mov	r3, r2
 80038c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038c4:	e048      	b.n	8003958 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038cc:	d044      	beq.n	8003958 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ce:	f7fe fe15 	bl	80024fc <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d302      	bcc.n	80038e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d139      	bne.n	8003958 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	0c1b      	lsrs	r3, r3, #16
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d10d      	bne.n	800390a <I2C_WaitOnFlagUntilTimeout+0x56>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	43da      	mvns	r2, r3
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	4013      	ands	r3, r2
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	bf0c      	ite	eq
 8003900:	2301      	moveq	r3, #1
 8003902:	2300      	movne	r3, #0
 8003904:	b2db      	uxtb	r3, r3
 8003906:	461a      	mov	r2, r3
 8003908:	e00c      	b.n	8003924 <I2C_WaitOnFlagUntilTimeout+0x70>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	43da      	mvns	r2, r3
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	4013      	ands	r3, r2
 8003916:	b29b      	uxth	r3, r3
 8003918:	2b00      	cmp	r3, #0
 800391a:	bf0c      	ite	eq
 800391c:	2301      	moveq	r3, #1
 800391e:	2300      	movne	r3, #0
 8003920:	b2db      	uxtb	r3, r3
 8003922:	461a      	mov	r2, r3
 8003924:	79fb      	ldrb	r3, [r7, #7]
 8003926:	429a      	cmp	r2, r3
 8003928:	d116      	bne.n	8003958 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2220      	movs	r2, #32
 8003934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003944:	f043 0220 	orr.w	r2, r3, #32
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e023      	b.n	80039a0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	0c1b      	lsrs	r3, r3, #16
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b01      	cmp	r3, #1
 8003960:	d10d      	bne.n	800397e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	43da      	mvns	r2, r3
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	4013      	ands	r3, r2
 800396e:	b29b      	uxth	r3, r3
 8003970:	2b00      	cmp	r3, #0
 8003972:	bf0c      	ite	eq
 8003974:	2301      	moveq	r3, #1
 8003976:	2300      	movne	r3, #0
 8003978:	b2db      	uxtb	r3, r3
 800397a:	461a      	mov	r2, r3
 800397c:	e00c      	b.n	8003998 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	43da      	mvns	r2, r3
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	4013      	ands	r3, r2
 800398a:	b29b      	uxth	r3, r3
 800398c:	2b00      	cmp	r3, #0
 800398e:	bf0c      	ite	eq
 8003990:	2301      	moveq	r3, #1
 8003992:	2300      	movne	r3, #0
 8003994:	b2db      	uxtb	r3, r3
 8003996:	461a      	mov	r2, r3
 8003998:	79fb      	ldrb	r3, [r7, #7]
 800399a:	429a      	cmp	r2, r3
 800399c:	d093      	beq.n	80038c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
 80039b4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039b6:	e071      	b.n	8003a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039c6:	d123      	bne.n	8003a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039d6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80039e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2220      	movs	r2, #32
 80039ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fc:	f043 0204 	orr.w	r2, r3, #4
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e067      	b.n	8003ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a16:	d041      	beq.n	8003a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a18:	f7fe fd70 	bl	80024fc <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d302      	bcc.n	8003a2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d136      	bne.n	8003a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	0c1b      	lsrs	r3, r3, #16
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d10c      	bne.n	8003a52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	43da      	mvns	r2, r3
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	4013      	ands	r3, r2
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	bf14      	ite	ne
 8003a4a:	2301      	movne	r3, #1
 8003a4c:	2300      	moveq	r3, #0
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	e00b      	b.n	8003a6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	43da      	mvns	r2, r3
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	bf14      	ite	ne
 8003a64:	2301      	movne	r3, #1
 8003a66:	2300      	moveq	r3, #0
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d016      	beq.n	8003a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2220      	movs	r2, #32
 8003a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a88:	f043 0220 	orr.w	r2, r3, #32
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e021      	b.n	8003ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	0c1b      	lsrs	r3, r3, #16
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d10c      	bne.n	8003ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	43da      	mvns	r2, r3
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	bf14      	ite	ne
 8003ab8:	2301      	movne	r3, #1
 8003aba:	2300      	moveq	r3, #0
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	e00b      	b.n	8003ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	43da      	mvns	r2, r3
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	4013      	ands	r3, r2
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	bf14      	ite	ne
 8003ad2:	2301      	movne	r3, #1
 8003ad4:	2300      	moveq	r3, #0
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f47f af6d 	bne.w	80039b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003af4:	e034      	b.n	8003b60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f000 f8e3 	bl	8003cc2 <I2C_IsAcknowledgeFailed>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e034      	b.n	8003b70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b0c:	d028      	beq.n	8003b60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b0e:	f7fe fcf5 	bl	80024fc <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	68ba      	ldr	r2, [r7, #8]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d302      	bcc.n	8003b24 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d11d      	bne.n	8003b60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b2e:	2b80      	cmp	r3, #128	@ 0x80
 8003b30:	d016      	beq.n	8003b60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4c:	f043 0220 	orr.w	r2, r3, #32
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e007      	b.n	8003b70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b6a:	2b80      	cmp	r3, #128	@ 0x80
 8003b6c:	d1c3      	bne.n	8003af6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3710      	adds	r7, #16
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b84:	e034      	b.n	8003bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f000 f89b 	bl	8003cc2 <I2C_IsAcknowledgeFailed>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e034      	b.n	8003c00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b9c:	d028      	beq.n	8003bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b9e:	f7fe fcad 	bl	80024fc <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d302      	bcc.n	8003bb4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d11d      	bne.n	8003bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	f003 0304 	and.w	r3, r3, #4
 8003bbe:	2b04      	cmp	r3, #4
 8003bc0:	d016      	beq.n	8003bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2220      	movs	r2, #32
 8003bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bdc:	f043 0220 	orr.w	r2, r3, #32
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e007      	b.n	8003c00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	f003 0304 	and.w	r3, r3, #4
 8003bfa:	2b04      	cmp	r3, #4
 8003bfc:	d1c3      	bne.n	8003b86 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c14:	e049      	b.n	8003caa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	f003 0310 	and.w	r3, r3, #16
 8003c20:	2b10      	cmp	r3, #16
 8003c22:	d119      	bne.n	8003c58 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f06f 0210 	mvn.w	r2, #16
 8003c2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2220      	movs	r2, #32
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e030      	b.n	8003cba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c58:	f7fe fc50 	bl	80024fc <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	68ba      	ldr	r2, [r7, #8]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d302      	bcc.n	8003c6e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d11d      	bne.n	8003caa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c78:	2b40      	cmp	r3, #64	@ 0x40
 8003c7a:	d016      	beq.n	8003caa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2220      	movs	r2, #32
 8003c86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c96:	f043 0220 	orr.w	r2, r3, #32
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e007      	b.n	8003cba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cb4:	2b40      	cmp	r3, #64	@ 0x40
 8003cb6:	d1ae      	bne.n	8003c16 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	b083      	sub	sp, #12
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cd8:	d11b      	bne.n	8003d12 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ce2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2220      	movs	r2, #32
 8003cee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfe:	f043 0204 	orr.w	r2, r3, #4
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e000      	b.n	8003d14 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d101      	bne.n	8003d34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e0cc      	b.n	8003ece <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d34:	4b68      	ldr	r3, [pc, #416]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 030f 	and.w	r3, r3, #15
 8003d3c:	683a      	ldr	r2, [r7, #0]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d90c      	bls.n	8003d5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d42:	4b65      	ldr	r3, [pc, #404]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	b2d2      	uxtb	r2, r2
 8003d48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d4a:	4b63      	ldr	r3, [pc, #396]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 030f 	and.w	r3, r3, #15
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d001      	beq.n	8003d5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e0b8      	b.n	8003ece <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d020      	beq.n	8003daa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0304 	and.w	r3, r3, #4
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d005      	beq.n	8003d80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d74:	4b59      	ldr	r3, [pc, #356]	@ (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	4a58      	ldr	r2, [pc, #352]	@ (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003d7a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003d7e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0308 	and.w	r3, r3, #8
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d005      	beq.n	8003d98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d8c:	4b53      	ldr	r3, [pc, #332]	@ (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	4a52      	ldr	r2, [pc, #328]	@ (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003d92:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d98:	4b50      	ldr	r3, [pc, #320]	@ (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	494d      	ldr	r1, [pc, #308]	@ (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d044      	beq.n	8003e40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d107      	bne.n	8003dce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dbe:	4b47      	ldr	r3, [pc, #284]	@ (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d119      	bne.n	8003dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e07f      	b.n	8003ece <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d003      	beq.n	8003dde <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dda:	2b03      	cmp	r3, #3
 8003ddc:	d107      	bne.n	8003dee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dde:	4b3f      	ldr	r3, [pc, #252]	@ (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d109      	bne.n	8003dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e06f      	b.n	8003ece <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dee:	4b3b      	ldr	r3, [pc, #236]	@ (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e067      	b.n	8003ece <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dfe:	4b37      	ldr	r3, [pc, #220]	@ (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f023 0203 	bic.w	r2, r3, #3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	4934      	ldr	r1, [pc, #208]	@ (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e10:	f7fe fb74 	bl	80024fc <HAL_GetTick>
 8003e14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e16:	e00a      	b.n	8003e2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e18:	f7fe fb70 	bl	80024fc <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e04f      	b.n	8003ece <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e2e:	4b2b      	ldr	r3, [pc, #172]	@ (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f003 020c 	and.w	r2, r3, #12
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d1eb      	bne.n	8003e18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e40:	4b25      	ldr	r3, [pc, #148]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 030f 	and.w	r3, r3, #15
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d20c      	bcs.n	8003e68 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e4e:	4b22      	ldr	r3, [pc, #136]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	b2d2      	uxtb	r2, r2
 8003e54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e56:	4b20      	ldr	r3, [pc, #128]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 030f 	and.w	r3, r3, #15
 8003e5e:	683a      	ldr	r2, [r7, #0]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d001      	beq.n	8003e68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e032      	b.n	8003ece <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d008      	beq.n	8003e86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e74:	4b19      	ldr	r3, [pc, #100]	@ (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	4916      	ldr	r1, [pc, #88]	@ (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0308 	and.w	r3, r3, #8
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d009      	beq.n	8003ea6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e92:	4b12      	ldr	r3, [pc, #72]	@ (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	490e      	ldr	r1, [pc, #56]	@ (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ea6:	f000 f887 	bl	8003fb8 <HAL_RCC_GetSysClockFreq>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	4b0b      	ldr	r3, [pc, #44]	@ (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	091b      	lsrs	r3, r3, #4
 8003eb2:	f003 030f 	and.w	r3, r3, #15
 8003eb6:	490a      	ldr	r1, [pc, #40]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8003eb8:	5ccb      	ldrb	r3, [r1, r3]
 8003eba:	fa22 f303 	lsr.w	r3, r2, r3
 8003ebe:	4a09      	ldr	r2, [pc, #36]	@ (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ec0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003ec2:	4b09      	ldr	r3, [pc, #36]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7fe f9ce 	bl	8002268 <HAL_InitTick>

  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	40023c00 	.word	0x40023c00
 8003edc:	40023800 	.word	0x40023800
 8003ee0:	0800a1e0 	.word	0x0800a1e0
 8003ee4:	20000000 	.word	0x20000000
 8003ee8:	20000004 	.word	0x20000004

08003eec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ef0:	4b03      	ldr	r3, [pc, #12]	@ (8003f00 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	20000000 	.word	0x20000000

08003f04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f08:	f7ff fff0 	bl	8003eec <HAL_RCC_GetHCLKFreq>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	4b05      	ldr	r3, [pc, #20]	@ (8003f24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	0a9b      	lsrs	r3, r3, #10
 8003f14:	f003 0307 	and.w	r3, r3, #7
 8003f18:	4903      	ldr	r1, [pc, #12]	@ (8003f28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f1a:	5ccb      	ldrb	r3, [r1, r3]
 8003f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	40023800 	.word	0x40023800
 8003f28:	0800a1f0 	.word	0x0800a1f0

08003f2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f30:	f7ff ffdc 	bl	8003eec <HAL_RCC_GetHCLKFreq>
 8003f34:	4602      	mov	r2, r0
 8003f36:	4b05      	ldr	r3, [pc, #20]	@ (8003f4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	0b5b      	lsrs	r3, r3, #13
 8003f3c:	f003 0307 	and.w	r3, r3, #7
 8003f40:	4903      	ldr	r1, [pc, #12]	@ (8003f50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f42:	5ccb      	ldrb	r3, [r1, r3]
 8003f44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	40023800 	.word	0x40023800
 8003f50:	0800a1f0 	.word	0x0800a1f0

08003f54 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	220f      	movs	r2, #15
 8003f62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003f64:	4b12      	ldr	r3, [pc, #72]	@ (8003fb0 <HAL_RCC_GetClockConfig+0x5c>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f003 0203 	and.w	r2, r3, #3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003f70:	4b0f      	ldr	r3, [pc, #60]	@ (8003fb0 <HAL_RCC_GetClockConfig+0x5c>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8003fb0 <HAL_RCC_GetClockConfig+0x5c>)
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003f88:	4b09      	ldr	r3, [pc, #36]	@ (8003fb0 <HAL_RCC_GetClockConfig+0x5c>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	08db      	lsrs	r3, r3, #3
 8003f8e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003f96:	4b07      	ldr	r3, [pc, #28]	@ (8003fb4 <HAL_RCC_GetClockConfig+0x60>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 020f 	and.w	r2, r3, #15
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	601a      	str	r2, [r3, #0]
}
 8003fa2:	bf00      	nop
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	40023800 	.word	0x40023800
 8003fb4:	40023c00 	.word	0x40023c00

08003fb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fbc:	b0ae      	sub	sp, #184	@ 0xb8
 8003fbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fde:	4bcb      	ldr	r3, [pc, #812]	@ (800430c <HAL_RCC_GetSysClockFreq+0x354>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f003 030c 	and.w	r3, r3, #12
 8003fe6:	2b0c      	cmp	r3, #12
 8003fe8:	f200 8206 	bhi.w	80043f8 <HAL_RCC_GetSysClockFreq+0x440>
 8003fec:	a201      	add	r2, pc, #4	@ (adr r2, 8003ff4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff2:	bf00      	nop
 8003ff4:	08004029 	.word	0x08004029
 8003ff8:	080043f9 	.word	0x080043f9
 8003ffc:	080043f9 	.word	0x080043f9
 8004000:	080043f9 	.word	0x080043f9
 8004004:	08004031 	.word	0x08004031
 8004008:	080043f9 	.word	0x080043f9
 800400c:	080043f9 	.word	0x080043f9
 8004010:	080043f9 	.word	0x080043f9
 8004014:	08004039 	.word	0x08004039
 8004018:	080043f9 	.word	0x080043f9
 800401c:	080043f9 	.word	0x080043f9
 8004020:	080043f9 	.word	0x080043f9
 8004024:	08004229 	.word	0x08004229
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004028:	4bb9      	ldr	r3, [pc, #740]	@ (8004310 <HAL_RCC_GetSysClockFreq+0x358>)
 800402a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800402e:	e1e7      	b.n	8004400 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004030:	4bb8      	ldr	r3, [pc, #736]	@ (8004314 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004032:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004036:	e1e3      	b.n	8004400 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004038:	4bb4      	ldr	r3, [pc, #720]	@ (800430c <HAL_RCC_GetSysClockFreq+0x354>)
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004040:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004044:	4bb1      	ldr	r3, [pc, #708]	@ (800430c <HAL_RCC_GetSysClockFreq+0x354>)
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d071      	beq.n	8004134 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004050:	4bae      	ldr	r3, [pc, #696]	@ (800430c <HAL_RCC_GetSysClockFreq+0x354>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	099b      	lsrs	r3, r3, #6
 8004056:	2200      	movs	r2, #0
 8004058:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800405c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004060:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004064:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004068:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800406c:	2300      	movs	r3, #0
 800406e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004072:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004076:	4622      	mov	r2, r4
 8004078:	462b      	mov	r3, r5
 800407a:	f04f 0000 	mov.w	r0, #0
 800407e:	f04f 0100 	mov.w	r1, #0
 8004082:	0159      	lsls	r1, r3, #5
 8004084:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004088:	0150      	lsls	r0, r2, #5
 800408a:	4602      	mov	r2, r0
 800408c:	460b      	mov	r3, r1
 800408e:	4621      	mov	r1, r4
 8004090:	1a51      	subs	r1, r2, r1
 8004092:	6439      	str	r1, [r7, #64]	@ 0x40
 8004094:	4629      	mov	r1, r5
 8004096:	eb63 0301 	sbc.w	r3, r3, r1
 800409a:	647b      	str	r3, [r7, #68]	@ 0x44
 800409c:	f04f 0200 	mov.w	r2, #0
 80040a0:	f04f 0300 	mov.w	r3, #0
 80040a4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80040a8:	4649      	mov	r1, r9
 80040aa:	018b      	lsls	r3, r1, #6
 80040ac:	4641      	mov	r1, r8
 80040ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040b2:	4641      	mov	r1, r8
 80040b4:	018a      	lsls	r2, r1, #6
 80040b6:	4641      	mov	r1, r8
 80040b8:	1a51      	subs	r1, r2, r1
 80040ba:	63b9      	str	r1, [r7, #56]	@ 0x38
 80040bc:	4649      	mov	r1, r9
 80040be:	eb63 0301 	sbc.w	r3, r3, r1
 80040c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040c4:	f04f 0200 	mov.w	r2, #0
 80040c8:	f04f 0300 	mov.w	r3, #0
 80040cc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80040d0:	4649      	mov	r1, r9
 80040d2:	00cb      	lsls	r3, r1, #3
 80040d4:	4641      	mov	r1, r8
 80040d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040da:	4641      	mov	r1, r8
 80040dc:	00ca      	lsls	r2, r1, #3
 80040de:	4610      	mov	r0, r2
 80040e0:	4619      	mov	r1, r3
 80040e2:	4603      	mov	r3, r0
 80040e4:	4622      	mov	r2, r4
 80040e6:	189b      	adds	r3, r3, r2
 80040e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80040ea:	462b      	mov	r3, r5
 80040ec:	460a      	mov	r2, r1
 80040ee:	eb42 0303 	adc.w	r3, r2, r3
 80040f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80040f4:	f04f 0200 	mov.w	r2, #0
 80040f8:	f04f 0300 	mov.w	r3, #0
 80040fc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004100:	4629      	mov	r1, r5
 8004102:	024b      	lsls	r3, r1, #9
 8004104:	4621      	mov	r1, r4
 8004106:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800410a:	4621      	mov	r1, r4
 800410c:	024a      	lsls	r2, r1, #9
 800410e:	4610      	mov	r0, r2
 8004110:	4619      	mov	r1, r3
 8004112:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004116:	2200      	movs	r2, #0
 8004118:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800411c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004120:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004124:	f7fc fd72 	bl	8000c0c <__aeabi_uldivmod>
 8004128:	4602      	mov	r2, r0
 800412a:	460b      	mov	r3, r1
 800412c:	4613      	mov	r3, r2
 800412e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004132:	e067      	b.n	8004204 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004134:	4b75      	ldr	r3, [pc, #468]	@ (800430c <HAL_RCC_GetSysClockFreq+0x354>)
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	099b      	lsrs	r3, r3, #6
 800413a:	2200      	movs	r2, #0
 800413c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004140:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004144:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800414c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800414e:	2300      	movs	r3, #0
 8004150:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004152:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004156:	4622      	mov	r2, r4
 8004158:	462b      	mov	r3, r5
 800415a:	f04f 0000 	mov.w	r0, #0
 800415e:	f04f 0100 	mov.w	r1, #0
 8004162:	0159      	lsls	r1, r3, #5
 8004164:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004168:	0150      	lsls	r0, r2, #5
 800416a:	4602      	mov	r2, r0
 800416c:	460b      	mov	r3, r1
 800416e:	4621      	mov	r1, r4
 8004170:	1a51      	subs	r1, r2, r1
 8004172:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004174:	4629      	mov	r1, r5
 8004176:	eb63 0301 	sbc.w	r3, r3, r1
 800417a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800417c:	f04f 0200 	mov.w	r2, #0
 8004180:	f04f 0300 	mov.w	r3, #0
 8004184:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004188:	4649      	mov	r1, r9
 800418a:	018b      	lsls	r3, r1, #6
 800418c:	4641      	mov	r1, r8
 800418e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004192:	4641      	mov	r1, r8
 8004194:	018a      	lsls	r2, r1, #6
 8004196:	4641      	mov	r1, r8
 8004198:	ebb2 0a01 	subs.w	sl, r2, r1
 800419c:	4649      	mov	r1, r9
 800419e:	eb63 0b01 	sbc.w	fp, r3, r1
 80041a2:	f04f 0200 	mov.w	r2, #0
 80041a6:	f04f 0300 	mov.w	r3, #0
 80041aa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041ae:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041b6:	4692      	mov	sl, r2
 80041b8:	469b      	mov	fp, r3
 80041ba:	4623      	mov	r3, r4
 80041bc:	eb1a 0303 	adds.w	r3, sl, r3
 80041c0:	623b      	str	r3, [r7, #32]
 80041c2:	462b      	mov	r3, r5
 80041c4:	eb4b 0303 	adc.w	r3, fp, r3
 80041c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80041ca:	f04f 0200 	mov.w	r2, #0
 80041ce:	f04f 0300 	mov.w	r3, #0
 80041d2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80041d6:	4629      	mov	r1, r5
 80041d8:	028b      	lsls	r3, r1, #10
 80041da:	4621      	mov	r1, r4
 80041dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041e0:	4621      	mov	r1, r4
 80041e2:	028a      	lsls	r2, r1, #10
 80041e4:	4610      	mov	r0, r2
 80041e6:	4619      	mov	r1, r3
 80041e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80041ec:	2200      	movs	r2, #0
 80041ee:	673b      	str	r3, [r7, #112]	@ 0x70
 80041f0:	677a      	str	r2, [r7, #116]	@ 0x74
 80041f2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80041f6:	f7fc fd09 	bl	8000c0c <__aeabi_uldivmod>
 80041fa:	4602      	mov	r2, r0
 80041fc:	460b      	mov	r3, r1
 80041fe:	4613      	mov	r3, r2
 8004200:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004204:	4b41      	ldr	r3, [pc, #260]	@ (800430c <HAL_RCC_GetSysClockFreq+0x354>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	0c1b      	lsrs	r3, r3, #16
 800420a:	f003 0303 	and.w	r3, r3, #3
 800420e:	3301      	adds	r3, #1
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8004216:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800421a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800421e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004222:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004226:	e0eb      	b.n	8004400 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004228:	4b38      	ldr	r3, [pc, #224]	@ (800430c <HAL_RCC_GetSysClockFreq+0x354>)
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004230:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004234:	4b35      	ldr	r3, [pc, #212]	@ (800430c <HAL_RCC_GetSysClockFreq+0x354>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d06b      	beq.n	8004318 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004240:	4b32      	ldr	r3, [pc, #200]	@ (800430c <HAL_RCC_GetSysClockFreq+0x354>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	099b      	lsrs	r3, r3, #6
 8004246:	2200      	movs	r2, #0
 8004248:	66bb      	str	r3, [r7, #104]	@ 0x68
 800424a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800424c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800424e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004252:	663b      	str	r3, [r7, #96]	@ 0x60
 8004254:	2300      	movs	r3, #0
 8004256:	667b      	str	r3, [r7, #100]	@ 0x64
 8004258:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800425c:	4622      	mov	r2, r4
 800425e:	462b      	mov	r3, r5
 8004260:	f04f 0000 	mov.w	r0, #0
 8004264:	f04f 0100 	mov.w	r1, #0
 8004268:	0159      	lsls	r1, r3, #5
 800426a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800426e:	0150      	lsls	r0, r2, #5
 8004270:	4602      	mov	r2, r0
 8004272:	460b      	mov	r3, r1
 8004274:	4621      	mov	r1, r4
 8004276:	1a51      	subs	r1, r2, r1
 8004278:	61b9      	str	r1, [r7, #24]
 800427a:	4629      	mov	r1, r5
 800427c:	eb63 0301 	sbc.w	r3, r3, r1
 8004280:	61fb      	str	r3, [r7, #28]
 8004282:	f04f 0200 	mov.w	r2, #0
 8004286:	f04f 0300 	mov.w	r3, #0
 800428a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800428e:	4659      	mov	r1, fp
 8004290:	018b      	lsls	r3, r1, #6
 8004292:	4651      	mov	r1, sl
 8004294:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004298:	4651      	mov	r1, sl
 800429a:	018a      	lsls	r2, r1, #6
 800429c:	4651      	mov	r1, sl
 800429e:	ebb2 0801 	subs.w	r8, r2, r1
 80042a2:	4659      	mov	r1, fp
 80042a4:	eb63 0901 	sbc.w	r9, r3, r1
 80042a8:	f04f 0200 	mov.w	r2, #0
 80042ac:	f04f 0300 	mov.w	r3, #0
 80042b0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042b4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042b8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042bc:	4690      	mov	r8, r2
 80042be:	4699      	mov	r9, r3
 80042c0:	4623      	mov	r3, r4
 80042c2:	eb18 0303 	adds.w	r3, r8, r3
 80042c6:	613b      	str	r3, [r7, #16]
 80042c8:	462b      	mov	r3, r5
 80042ca:	eb49 0303 	adc.w	r3, r9, r3
 80042ce:	617b      	str	r3, [r7, #20]
 80042d0:	f04f 0200 	mov.w	r2, #0
 80042d4:	f04f 0300 	mov.w	r3, #0
 80042d8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80042dc:	4629      	mov	r1, r5
 80042de:	024b      	lsls	r3, r1, #9
 80042e0:	4621      	mov	r1, r4
 80042e2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042e6:	4621      	mov	r1, r4
 80042e8:	024a      	lsls	r2, r1, #9
 80042ea:	4610      	mov	r0, r2
 80042ec:	4619      	mov	r1, r3
 80042ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80042f2:	2200      	movs	r2, #0
 80042f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80042f6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80042f8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80042fc:	f7fc fc86 	bl	8000c0c <__aeabi_uldivmod>
 8004300:	4602      	mov	r2, r0
 8004302:	460b      	mov	r3, r1
 8004304:	4613      	mov	r3, r2
 8004306:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800430a:	e065      	b.n	80043d8 <HAL_RCC_GetSysClockFreq+0x420>
 800430c:	40023800 	.word	0x40023800
 8004310:	00f42400 	.word	0x00f42400
 8004314:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004318:	4b3d      	ldr	r3, [pc, #244]	@ (8004410 <HAL_RCC_GetSysClockFreq+0x458>)
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	099b      	lsrs	r3, r3, #6
 800431e:	2200      	movs	r2, #0
 8004320:	4618      	mov	r0, r3
 8004322:	4611      	mov	r1, r2
 8004324:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004328:	653b      	str	r3, [r7, #80]	@ 0x50
 800432a:	2300      	movs	r3, #0
 800432c:	657b      	str	r3, [r7, #84]	@ 0x54
 800432e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004332:	4642      	mov	r2, r8
 8004334:	464b      	mov	r3, r9
 8004336:	f04f 0000 	mov.w	r0, #0
 800433a:	f04f 0100 	mov.w	r1, #0
 800433e:	0159      	lsls	r1, r3, #5
 8004340:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004344:	0150      	lsls	r0, r2, #5
 8004346:	4602      	mov	r2, r0
 8004348:	460b      	mov	r3, r1
 800434a:	4641      	mov	r1, r8
 800434c:	1a51      	subs	r1, r2, r1
 800434e:	60b9      	str	r1, [r7, #8]
 8004350:	4649      	mov	r1, r9
 8004352:	eb63 0301 	sbc.w	r3, r3, r1
 8004356:	60fb      	str	r3, [r7, #12]
 8004358:	f04f 0200 	mov.w	r2, #0
 800435c:	f04f 0300 	mov.w	r3, #0
 8004360:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004364:	4659      	mov	r1, fp
 8004366:	018b      	lsls	r3, r1, #6
 8004368:	4651      	mov	r1, sl
 800436a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800436e:	4651      	mov	r1, sl
 8004370:	018a      	lsls	r2, r1, #6
 8004372:	4651      	mov	r1, sl
 8004374:	1a54      	subs	r4, r2, r1
 8004376:	4659      	mov	r1, fp
 8004378:	eb63 0501 	sbc.w	r5, r3, r1
 800437c:	f04f 0200 	mov.w	r2, #0
 8004380:	f04f 0300 	mov.w	r3, #0
 8004384:	00eb      	lsls	r3, r5, #3
 8004386:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800438a:	00e2      	lsls	r2, r4, #3
 800438c:	4614      	mov	r4, r2
 800438e:	461d      	mov	r5, r3
 8004390:	4643      	mov	r3, r8
 8004392:	18e3      	adds	r3, r4, r3
 8004394:	603b      	str	r3, [r7, #0]
 8004396:	464b      	mov	r3, r9
 8004398:	eb45 0303 	adc.w	r3, r5, r3
 800439c:	607b      	str	r3, [r7, #4]
 800439e:	f04f 0200 	mov.w	r2, #0
 80043a2:	f04f 0300 	mov.w	r3, #0
 80043a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043aa:	4629      	mov	r1, r5
 80043ac:	028b      	lsls	r3, r1, #10
 80043ae:	4621      	mov	r1, r4
 80043b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043b4:	4621      	mov	r1, r4
 80043b6:	028a      	lsls	r2, r1, #10
 80043b8:	4610      	mov	r0, r2
 80043ba:	4619      	mov	r1, r3
 80043bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80043c0:	2200      	movs	r2, #0
 80043c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043c4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80043c6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80043ca:	f7fc fc1f 	bl	8000c0c <__aeabi_uldivmod>
 80043ce:	4602      	mov	r2, r0
 80043d0:	460b      	mov	r3, r1
 80043d2:	4613      	mov	r3, r2
 80043d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80043d8:	4b0d      	ldr	r3, [pc, #52]	@ (8004410 <HAL_RCC_GetSysClockFreq+0x458>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	0f1b      	lsrs	r3, r3, #28
 80043de:	f003 0307 	and.w	r3, r3, #7
 80043e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80043e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80043ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80043ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80043f6:	e003      	b.n	8004400 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043f8:	4b06      	ldr	r3, [pc, #24]	@ (8004414 <HAL_RCC_GetSysClockFreq+0x45c>)
 80043fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80043fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004400:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004404:	4618      	mov	r0, r3
 8004406:	37b8      	adds	r7, #184	@ 0xb8
 8004408:	46bd      	mov	sp, r7
 800440a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800440e:	bf00      	nop
 8004410:	40023800 	.word	0x40023800
 8004414:	00f42400 	.word	0x00f42400

08004418 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e28d      	b.n	8004946 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	2b00      	cmp	r3, #0
 8004434:	f000 8083 	beq.w	800453e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004438:	4b94      	ldr	r3, [pc, #592]	@ (800468c <HAL_RCC_OscConfig+0x274>)
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f003 030c 	and.w	r3, r3, #12
 8004440:	2b04      	cmp	r3, #4
 8004442:	d019      	beq.n	8004478 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004444:	4b91      	ldr	r3, [pc, #580]	@ (800468c <HAL_RCC_OscConfig+0x274>)
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f003 030c 	and.w	r3, r3, #12
        || \
 800444c:	2b08      	cmp	r3, #8
 800444e:	d106      	bne.n	800445e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004450:	4b8e      	ldr	r3, [pc, #568]	@ (800468c <HAL_RCC_OscConfig+0x274>)
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004458:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800445c:	d00c      	beq.n	8004478 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800445e:	4b8b      	ldr	r3, [pc, #556]	@ (800468c <HAL_RCC_OscConfig+0x274>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004466:	2b0c      	cmp	r3, #12
 8004468:	d112      	bne.n	8004490 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800446a:	4b88      	ldr	r3, [pc, #544]	@ (800468c <HAL_RCC_OscConfig+0x274>)
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004472:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004476:	d10b      	bne.n	8004490 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004478:	4b84      	ldr	r3, [pc, #528]	@ (800468c <HAL_RCC_OscConfig+0x274>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d05b      	beq.n	800453c <HAL_RCC_OscConfig+0x124>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d157      	bne.n	800453c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e25a      	b.n	8004946 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004498:	d106      	bne.n	80044a8 <HAL_RCC_OscConfig+0x90>
 800449a:	4b7c      	ldr	r3, [pc, #496]	@ (800468c <HAL_RCC_OscConfig+0x274>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a7b      	ldr	r2, [pc, #492]	@ (800468c <HAL_RCC_OscConfig+0x274>)
 80044a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044a4:	6013      	str	r3, [r2, #0]
 80044a6:	e01d      	b.n	80044e4 <HAL_RCC_OscConfig+0xcc>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044b0:	d10c      	bne.n	80044cc <HAL_RCC_OscConfig+0xb4>
 80044b2:	4b76      	ldr	r3, [pc, #472]	@ (800468c <HAL_RCC_OscConfig+0x274>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a75      	ldr	r2, [pc, #468]	@ (800468c <HAL_RCC_OscConfig+0x274>)
 80044b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044bc:	6013      	str	r3, [r2, #0]
 80044be:	4b73      	ldr	r3, [pc, #460]	@ (800468c <HAL_RCC_OscConfig+0x274>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a72      	ldr	r2, [pc, #456]	@ (800468c <HAL_RCC_OscConfig+0x274>)
 80044c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044c8:	6013      	str	r3, [r2, #0]
 80044ca:	e00b      	b.n	80044e4 <HAL_RCC_OscConfig+0xcc>
 80044cc:	4b6f      	ldr	r3, [pc, #444]	@ (800468c <HAL_RCC_OscConfig+0x274>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a6e      	ldr	r2, [pc, #440]	@ (800468c <HAL_RCC_OscConfig+0x274>)
 80044d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044d6:	6013      	str	r3, [r2, #0]
 80044d8:	4b6c      	ldr	r3, [pc, #432]	@ (800468c <HAL_RCC_OscConfig+0x274>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a6b      	ldr	r2, [pc, #428]	@ (800468c <HAL_RCC_OscConfig+0x274>)
 80044de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d013      	beq.n	8004514 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ec:	f7fe f806 	bl	80024fc <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044f4:	f7fe f802 	bl	80024fc <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b64      	cmp	r3, #100	@ 0x64
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e21f      	b.n	8004946 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004506:	4b61      	ldr	r3, [pc, #388]	@ (800468c <HAL_RCC_OscConfig+0x274>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d0f0      	beq.n	80044f4 <HAL_RCC_OscConfig+0xdc>
 8004512:	e014      	b.n	800453e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004514:	f7fd fff2 	bl	80024fc <HAL_GetTick>
 8004518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800451a:	e008      	b.n	800452e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800451c:	f7fd ffee 	bl	80024fc <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b64      	cmp	r3, #100	@ 0x64
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e20b      	b.n	8004946 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800452e:	4b57      	ldr	r3, [pc, #348]	@ (800468c <HAL_RCC_OscConfig+0x274>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1f0      	bne.n	800451c <HAL_RCC_OscConfig+0x104>
 800453a:	e000      	b.n	800453e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800453c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b00      	cmp	r3, #0
 8004548:	d06f      	beq.n	800462a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800454a:	4b50      	ldr	r3, [pc, #320]	@ (800468c <HAL_RCC_OscConfig+0x274>)
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f003 030c 	and.w	r3, r3, #12
 8004552:	2b00      	cmp	r3, #0
 8004554:	d017      	beq.n	8004586 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004556:	4b4d      	ldr	r3, [pc, #308]	@ (800468c <HAL_RCC_OscConfig+0x274>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f003 030c 	and.w	r3, r3, #12
        || \
 800455e:	2b08      	cmp	r3, #8
 8004560:	d105      	bne.n	800456e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004562:	4b4a      	ldr	r3, [pc, #296]	@ (800468c <HAL_RCC_OscConfig+0x274>)
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00b      	beq.n	8004586 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800456e:	4b47      	ldr	r3, [pc, #284]	@ (800468c <HAL_RCC_OscConfig+0x274>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004576:	2b0c      	cmp	r3, #12
 8004578:	d11c      	bne.n	80045b4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800457a:	4b44      	ldr	r3, [pc, #272]	@ (800468c <HAL_RCC_OscConfig+0x274>)
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d116      	bne.n	80045b4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004586:	4b41      	ldr	r3, [pc, #260]	@ (800468c <HAL_RCC_OscConfig+0x274>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d005      	beq.n	800459e <HAL_RCC_OscConfig+0x186>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d001      	beq.n	800459e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e1d3      	b.n	8004946 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800459e:	4b3b      	ldr	r3, [pc, #236]	@ (800468c <HAL_RCC_OscConfig+0x274>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	00db      	lsls	r3, r3, #3
 80045ac:	4937      	ldr	r1, [pc, #220]	@ (800468c <HAL_RCC_OscConfig+0x274>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045b2:	e03a      	b.n	800462a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d020      	beq.n	80045fe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045bc:	4b34      	ldr	r3, [pc, #208]	@ (8004690 <HAL_RCC_OscConfig+0x278>)
 80045be:	2201      	movs	r2, #1
 80045c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c2:	f7fd ff9b 	bl	80024fc <HAL_GetTick>
 80045c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045c8:	e008      	b.n	80045dc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045ca:	f7fd ff97 	bl	80024fc <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d901      	bls.n	80045dc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e1b4      	b.n	8004946 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045dc:	4b2b      	ldr	r3, [pc, #172]	@ (800468c <HAL_RCC_OscConfig+0x274>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0302 	and.w	r3, r3, #2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d0f0      	beq.n	80045ca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045e8:	4b28      	ldr	r3, [pc, #160]	@ (800468c <HAL_RCC_OscConfig+0x274>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	00db      	lsls	r3, r3, #3
 80045f6:	4925      	ldr	r1, [pc, #148]	@ (800468c <HAL_RCC_OscConfig+0x274>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	600b      	str	r3, [r1, #0]
 80045fc:	e015      	b.n	800462a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045fe:	4b24      	ldr	r3, [pc, #144]	@ (8004690 <HAL_RCC_OscConfig+0x278>)
 8004600:	2200      	movs	r2, #0
 8004602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004604:	f7fd ff7a 	bl	80024fc <HAL_GetTick>
 8004608:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800460a:	e008      	b.n	800461e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800460c:	f7fd ff76 	bl	80024fc <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	2b02      	cmp	r3, #2
 8004618:	d901      	bls.n	800461e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e193      	b.n	8004946 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800461e:	4b1b      	ldr	r3, [pc, #108]	@ (800468c <HAL_RCC_OscConfig+0x274>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1f0      	bne.n	800460c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0308 	and.w	r3, r3, #8
 8004632:	2b00      	cmp	r3, #0
 8004634:	d036      	beq.n	80046a4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d016      	beq.n	800466c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800463e:	4b15      	ldr	r3, [pc, #84]	@ (8004694 <HAL_RCC_OscConfig+0x27c>)
 8004640:	2201      	movs	r2, #1
 8004642:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004644:	f7fd ff5a 	bl	80024fc <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800464c:	f7fd ff56 	bl	80024fc <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e173      	b.n	8004946 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800465e:	4b0b      	ldr	r3, [pc, #44]	@ (800468c <HAL_RCC_OscConfig+0x274>)
 8004660:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d0f0      	beq.n	800464c <HAL_RCC_OscConfig+0x234>
 800466a:	e01b      	b.n	80046a4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800466c:	4b09      	ldr	r3, [pc, #36]	@ (8004694 <HAL_RCC_OscConfig+0x27c>)
 800466e:	2200      	movs	r2, #0
 8004670:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004672:	f7fd ff43 	bl	80024fc <HAL_GetTick>
 8004676:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004678:	e00e      	b.n	8004698 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800467a:	f7fd ff3f 	bl	80024fc <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b02      	cmp	r3, #2
 8004686:	d907      	bls.n	8004698 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e15c      	b.n	8004946 <HAL_RCC_OscConfig+0x52e>
 800468c:	40023800 	.word	0x40023800
 8004690:	42470000 	.word	0x42470000
 8004694:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004698:	4b8a      	ldr	r3, [pc, #552]	@ (80048c4 <HAL_RCC_OscConfig+0x4ac>)
 800469a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1ea      	bne.n	800467a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0304 	and.w	r3, r3, #4
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f000 8097 	beq.w	80047e0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046b2:	2300      	movs	r3, #0
 80046b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046b6:	4b83      	ldr	r3, [pc, #524]	@ (80048c4 <HAL_RCC_OscConfig+0x4ac>)
 80046b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d10f      	bne.n	80046e2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046c2:	2300      	movs	r3, #0
 80046c4:	60bb      	str	r3, [r7, #8]
 80046c6:	4b7f      	ldr	r3, [pc, #508]	@ (80048c4 <HAL_RCC_OscConfig+0x4ac>)
 80046c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ca:	4a7e      	ldr	r2, [pc, #504]	@ (80048c4 <HAL_RCC_OscConfig+0x4ac>)
 80046cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80046d2:	4b7c      	ldr	r3, [pc, #496]	@ (80048c4 <HAL_RCC_OscConfig+0x4ac>)
 80046d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046da:	60bb      	str	r3, [r7, #8]
 80046dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046de:	2301      	movs	r3, #1
 80046e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046e2:	4b79      	ldr	r3, [pc, #484]	@ (80048c8 <HAL_RCC_OscConfig+0x4b0>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d118      	bne.n	8004720 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046ee:	4b76      	ldr	r3, [pc, #472]	@ (80048c8 <HAL_RCC_OscConfig+0x4b0>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a75      	ldr	r2, [pc, #468]	@ (80048c8 <HAL_RCC_OscConfig+0x4b0>)
 80046f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046fa:	f7fd feff 	bl	80024fc <HAL_GetTick>
 80046fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004700:	e008      	b.n	8004714 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004702:	f7fd fefb 	bl	80024fc <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	2b02      	cmp	r3, #2
 800470e:	d901      	bls.n	8004714 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e118      	b.n	8004946 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004714:	4b6c      	ldr	r3, [pc, #432]	@ (80048c8 <HAL_RCC_OscConfig+0x4b0>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800471c:	2b00      	cmp	r3, #0
 800471e:	d0f0      	beq.n	8004702 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d106      	bne.n	8004736 <HAL_RCC_OscConfig+0x31e>
 8004728:	4b66      	ldr	r3, [pc, #408]	@ (80048c4 <HAL_RCC_OscConfig+0x4ac>)
 800472a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800472c:	4a65      	ldr	r2, [pc, #404]	@ (80048c4 <HAL_RCC_OscConfig+0x4ac>)
 800472e:	f043 0301 	orr.w	r3, r3, #1
 8004732:	6713      	str	r3, [r2, #112]	@ 0x70
 8004734:	e01c      	b.n	8004770 <HAL_RCC_OscConfig+0x358>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	2b05      	cmp	r3, #5
 800473c:	d10c      	bne.n	8004758 <HAL_RCC_OscConfig+0x340>
 800473e:	4b61      	ldr	r3, [pc, #388]	@ (80048c4 <HAL_RCC_OscConfig+0x4ac>)
 8004740:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004742:	4a60      	ldr	r2, [pc, #384]	@ (80048c4 <HAL_RCC_OscConfig+0x4ac>)
 8004744:	f043 0304 	orr.w	r3, r3, #4
 8004748:	6713      	str	r3, [r2, #112]	@ 0x70
 800474a:	4b5e      	ldr	r3, [pc, #376]	@ (80048c4 <HAL_RCC_OscConfig+0x4ac>)
 800474c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800474e:	4a5d      	ldr	r2, [pc, #372]	@ (80048c4 <HAL_RCC_OscConfig+0x4ac>)
 8004750:	f043 0301 	orr.w	r3, r3, #1
 8004754:	6713      	str	r3, [r2, #112]	@ 0x70
 8004756:	e00b      	b.n	8004770 <HAL_RCC_OscConfig+0x358>
 8004758:	4b5a      	ldr	r3, [pc, #360]	@ (80048c4 <HAL_RCC_OscConfig+0x4ac>)
 800475a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800475c:	4a59      	ldr	r2, [pc, #356]	@ (80048c4 <HAL_RCC_OscConfig+0x4ac>)
 800475e:	f023 0301 	bic.w	r3, r3, #1
 8004762:	6713      	str	r3, [r2, #112]	@ 0x70
 8004764:	4b57      	ldr	r3, [pc, #348]	@ (80048c4 <HAL_RCC_OscConfig+0x4ac>)
 8004766:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004768:	4a56      	ldr	r2, [pc, #344]	@ (80048c4 <HAL_RCC_OscConfig+0x4ac>)
 800476a:	f023 0304 	bic.w	r3, r3, #4
 800476e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d015      	beq.n	80047a4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004778:	f7fd fec0 	bl	80024fc <HAL_GetTick>
 800477c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800477e:	e00a      	b.n	8004796 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004780:	f7fd febc 	bl	80024fc <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800478e:	4293      	cmp	r3, r2
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e0d7      	b.n	8004946 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004796:	4b4b      	ldr	r3, [pc, #300]	@ (80048c4 <HAL_RCC_OscConfig+0x4ac>)
 8004798:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d0ee      	beq.n	8004780 <HAL_RCC_OscConfig+0x368>
 80047a2:	e014      	b.n	80047ce <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a4:	f7fd feaa 	bl	80024fc <HAL_GetTick>
 80047a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047aa:	e00a      	b.n	80047c2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ac:	f7fd fea6 	bl	80024fc <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e0c1      	b.n	8004946 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047c2:	4b40      	ldr	r3, [pc, #256]	@ (80048c4 <HAL_RCC_OscConfig+0x4ac>)
 80047c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1ee      	bne.n	80047ac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80047ce:	7dfb      	ldrb	r3, [r7, #23]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d105      	bne.n	80047e0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047d4:	4b3b      	ldr	r3, [pc, #236]	@ (80048c4 <HAL_RCC_OscConfig+0x4ac>)
 80047d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d8:	4a3a      	ldr	r2, [pc, #232]	@ (80048c4 <HAL_RCC_OscConfig+0x4ac>)
 80047da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047de:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f000 80ad 	beq.w	8004944 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047ea:	4b36      	ldr	r3, [pc, #216]	@ (80048c4 <HAL_RCC_OscConfig+0x4ac>)
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f003 030c 	and.w	r3, r3, #12
 80047f2:	2b08      	cmp	r3, #8
 80047f4:	d060      	beq.n	80048b8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d145      	bne.n	800488a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047fe:	4b33      	ldr	r3, [pc, #204]	@ (80048cc <HAL_RCC_OscConfig+0x4b4>)
 8004800:	2200      	movs	r2, #0
 8004802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004804:	f7fd fe7a 	bl	80024fc <HAL_GetTick>
 8004808:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800480a:	e008      	b.n	800481e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800480c:	f7fd fe76 	bl	80024fc <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b02      	cmp	r3, #2
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e093      	b.n	8004946 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800481e:	4b29      	ldr	r3, [pc, #164]	@ (80048c4 <HAL_RCC_OscConfig+0x4ac>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1f0      	bne.n	800480c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	69da      	ldr	r2, [r3, #28]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	431a      	orrs	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004838:	019b      	lsls	r3, r3, #6
 800483a:	431a      	orrs	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004840:	085b      	lsrs	r3, r3, #1
 8004842:	3b01      	subs	r3, #1
 8004844:	041b      	lsls	r3, r3, #16
 8004846:	431a      	orrs	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800484c:	061b      	lsls	r3, r3, #24
 800484e:	431a      	orrs	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004854:	071b      	lsls	r3, r3, #28
 8004856:	491b      	ldr	r1, [pc, #108]	@ (80048c4 <HAL_RCC_OscConfig+0x4ac>)
 8004858:	4313      	orrs	r3, r2
 800485a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800485c:	4b1b      	ldr	r3, [pc, #108]	@ (80048cc <HAL_RCC_OscConfig+0x4b4>)
 800485e:	2201      	movs	r2, #1
 8004860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004862:	f7fd fe4b 	bl	80024fc <HAL_GetTick>
 8004866:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004868:	e008      	b.n	800487c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800486a:	f7fd fe47 	bl	80024fc <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	2b02      	cmp	r3, #2
 8004876:	d901      	bls.n	800487c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e064      	b.n	8004946 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800487c:	4b11      	ldr	r3, [pc, #68]	@ (80048c4 <HAL_RCC_OscConfig+0x4ac>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d0f0      	beq.n	800486a <HAL_RCC_OscConfig+0x452>
 8004888:	e05c      	b.n	8004944 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800488a:	4b10      	ldr	r3, [pc, #64]	@ (80048cc <HAL_RCC_OscConfig+0x4b4>)
 800488c:	2200      	movs	r2, #0
 800488e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004890:	f7fd fe34 	bl	80024fc <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004896:	e008      	b.n	80048aa <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004898:	f7fd fe30 	bl	80024fc <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e04d      	b.n	8004946 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048aa:	4b06      	ldr	r3, [pc, #24]	@ (80048c4 <HAL_RCC_OscConfig+0x4ac>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1f0      	bne.n	8004898 <HAL_RCC_OscConfig+0x480>
 80048b6:	e045      	b.n	8004944 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d107      	bne.n	80048d0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e040      	b.n	8004946 <HAL_RCC_OscConfig+0x52e>
 80048c4:	40023800 	.word	0x40023800
 80048c8:	40007000 	.word	0x40007000
 80048cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048d0:	4b1f      	ldr	r3, [pc, #124]	@ (8004950 <HAL_RCC_OscConfig+0x538>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d030      	beq.n	8004940 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d129      	bne.n	8004940 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d122      	bne.n	8004940 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004900:	4013      	ands	r3, r2
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004906:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004908:	4293      	cmp	r3, r2
 800490a:	d119      	bne.n	8004940 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004916:	085b      	lsrs	r3, r3, #1
 8004918:	3b01      	subs	r3, #1
 800491a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800491c:	429a      	cmp	r2, r3
 800491e:	d10f      	bne.n	8004940 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800492a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800492c:	429a      	cmp	r2, r3
 800492e:	d107      	bne.n	8004940 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800493a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800493c:	429a      	cmp	r2, r3
 800493e:	d001      	beq.n	8004944 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e000      	b.n	8004946 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3718      	adds	r7, #24
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	40023800 	.word	0x40023800

08004954 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d101      	bne.n	8004966 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e041      	b.n	80049ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d106      	bne.n	8004980 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f839 	bl	80049f2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2202      	movs	r2, #2
 8004984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	3304      	adds	r3, #4
 8004990:	4619      	mov	r1, r3
 8004992:	4610      	mov	r0, r2
 8004994:	f000 fb9a 	bl	80050cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3708      	adds	r7, #8
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80049f2:	b480      	push	{r7}
 80049f4:	b083      	sub	sp, #12
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80049fa:	bf00      	nop
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
	...

08004a08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d001      	beq.n	8004a20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e04e      	b.n	8004abe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2202      	movs	r2, #2
 8004a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68da      	ldr	r2, [r3, #12]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f042 0201 	orr.w	r2, r2, #1
 8004a36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a23      	ldr	r2, [pc, #140]	@ (8004acc <HAL_TIM_Base_Start_IT+0xc4>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d022      	beq.n	8004a88 <HAL_TIM_Base_Start_IT+0x80>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a4a:	d01d      	beq.n	8004a88 <HAL_TIM_Base_Start_IT+0x80>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a1f      	ldr	r2, [pc, #124]	@ (8004ad0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d018      	beq.n	8004a88 <HAL_TIM_Base_Start_IT+0x80>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a1e      	ldr	r2, [pc, #120]	@ (8004ad4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d013      	beq.n	8004a88 <HAL_TIM_Base_Start_IT+0x80>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a1c      	ldr	r2, [pc, #112]	@ (8004ad8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d00e      	beq.n	8004a88 <HAL_TIM_Base_Start_IT+0x80>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a1b      	ldr	r2, [pc, #108]	@ (8004adc <HAL_TIM_Base_Start_IT+0xd4>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d009      	beq.n	8004a88 <HAL_TIM_Base_Start_IT+0x80>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a19      	ldr	r2, [pc, #100]	@ (8004ae0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d004      	beq.n	8004a88 <HAL_TIM_Base_Start_IT+0x80>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a18      	ldr	r2, [pc, #96]	@ (8004ae4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d111      	bne.n	8004aac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f003 0307 	and.w	r3, r3, #7
 8004a92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2b06      	cmp	r3, #6
 8004a98:	d010      	beq.n	8004abc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f042 0201 	orr.w	r2, r2, #1
 8004aa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aaa:	e007      	b.n	8004abc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f042 0201 	orr.w	r2, r2, #1
 8004aba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3714      	adds	r7, #20
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	40010000 	.word	0x40010000
 8004ad0:	40000400 	.word	0x40000400
 8004ad4:	40000800 	.word	0x40000800
 8004ad8:	40000c00 	.word	0x40000c00
 8004adc:	40010400 	.word	0x40010400
 8004ae0:	40014000 	.word	0x40014000
 8004ae4:	40001800 	.word	0x40001800

08004ae8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e041      	b.n	8004b7e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d106      	bne.n	8004b14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7fd fae6 	bl	80020e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2202      	movs	r2, #2
 8004b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	3304      	adds	r3, #4
 8004b24:	4619      	mov	r1, r3
 8004b26:	4610      	mov	r0, r2
 8004b28:	f000 fad0 	bl	80050cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3708      	adds	r7, #8
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
	...

08004b88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d109      	bne.n	8004bac <HAL_TIM_PWM_Start+0x24>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	bf14      	ite	ne
 8004ba4:	2301      	movne	r3, #1
 8004ba6:	2300      	moveq	r3, #0
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	e022      	b.n	8004bf2 <HAL_TIM_PWM_Start+0x6a>
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	2b04      	cmp	r3, #4
 8004bb0:	d109      	bne.n	8004bc6 <HAL_TIM_PWM_Start+0x3e>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	bf14      	ite	ne
 8004bbe:	2301      	movne	r3, #1
 8004bc0:	2300      	moveq	r3, #0
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	e015      	b.n	8004bf2 <HAL_TIM_PWM_Start+0x6a>
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	2b08      	cmp	r3, #8
 8004bca:	d109      	bne.n	8004be0 <HAL_TIM_PWM_Start+0x58>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	bf14      	ite	ne
 8004bd8:	2301      	movne	r3, #1
 8004bda:	2300      	moveq	r3, #0
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	e008      	b.n	8004bf2 <HAL_TIM_PWM_Start+0x6a>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	bf14      	ite	ne
 8004bec:	2301      	movne	r3, #1
 8004bee:	2300      	moveq	r3, #0
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d001      	beq.n	8004bfa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e07c      	b.n	8004cf4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d104      	bne.n	8004c0a <HAL_TIM_PWM_Start+0x82>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2202      	movs	r2, #2
 8004c04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c08:	e013      	b.n	8004c32 <HAL_TIM_PWM_Start+0xaa>
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	2b04      	cmp	r3, #4
 8004c0e:	d104      	bne.n	8004c1a <HAL_TIM_PWM_Start+0x92>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2202      	movs	r2, #2
 8004c14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c18:	e00b      	b.n	8004c32 <HAL_TIM_PWM_Start+0xaa>
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	2b08      	cmp	r3, #8
 8004c1e:	d104      	bne.n	8004c2a <HAL_TIM_PWM_Start+0xa2>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2202      	movs	r2, #2
 8004c24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c28:	e003      	b.n	8004c32 <HAL_TIM_PWM_Start+0xaa>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2202      	movs	r2, #2
 8004c2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2201      	movs	r2, #1
 8004c38:	6839      	ldr	r1, [r7, #0]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f000 fca2 	bl	8005584 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a2d      	ldr	r2, [pc, #180]	@ (8004cfc <HAL_TIM_PWM_Start+0x174>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d004      	beq.n	8004c54 <HAL_TIM_PWM_Start+0xcc>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a2c      	ldr	r2, [pc, #176]	@ (8004d00 <HAL_TIM_PWM_Start+0x178>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d101      	bne.n	8004c58 <HAL_TIM_PWM_Start+0xd0>
 8004c54:	2301      	movs	r3, #1
 8004c56:	e000      	b.n	8004c5a <HAL_TIM_PWM_Start+0xd2>
 8004c58:	2300      	movs	r3, #0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d007      	beq.n	8004c6e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c6c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a22      	ldr	r2, [pc, #136]	@ (8004cfc <HAL_TIM_PWM_Start+0x174>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d022      	beq.n	8004cbe <HAL_TIM_PWM_Start+0x136>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c80:	d01d      	beq.n	8004cbe <HAL_TIM_PWM_Start+0x136>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a1f      	ldr	r2, [pc, #124]	@ (8004d04 <HAL_TIM_PWM_Start+0x17c>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d018      	beq.n	8004cbe <HAL_TIM_PWM_Start+0x136>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a1d      	ldr	r2, [pc, #116]	@ (8004d08 <HAL_TIM_PWM_Start+0x180>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d013      	beq.n	8004cbe <HAL_TIM_PWM_Start+0x136>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a1c      	ldr	r2, [pc, #112]	@ (8004d0c <HAL_TIM_PWM_Start+0x184>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d00e      	beq.n	8004cbe <HAL_TIM_PWM_Start+0x136>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a16      	ldr	r2, [pc, #88]	@ (8004d00 <HAL_TIM_PWM_Start+0x178>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d009      	beq.n	8004cbe <HAL_TIM_PWM_Start+0x136>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a18      	ldr	r2, [pc, #96]	@ (8004d10 <HAL_TIM_PWM_Start+0x188>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d004      	beq.n	8004cbe <HAL_TIM_PWM_Start+0x136>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a16      	ldr	r2, [pc, #88]	@ (8004d14 <HAL_TIM_PWM_Start+0x18c>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d111      	bne.n	8004ce2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f003 0307 	and.w	r3, r3, #7
 8004cc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2b06      	cmp	r3, #6
 8004cce:	d010      	beq.n	8004cf2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f042 0201 	orr.w	r2, r2, #1
 8004cde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ce0:	e007      	b.n	8004cf2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f042 0201 	orr.w	r2, r2, #1
 8004cf0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	40010000 	.word	0x40010000
 8004d00:	40010400 	.word	0x40010400
 8004d04:	40000400 	.word	0x40000400
 8004d08:	40000800 	.word	0x40000800
 8004d0c:	40000c00 	.word	0x40000c00
 8004d10:	40014000 	.word	0x40014000
 8004d14:	40001800 	.word	0x40001800

08004d18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d020      	beq.n	8004d7c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f003 0302 	and.w	r3, r3, #2
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d01b      	beq.n	8004d7c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f06f 0202 	mvn.w	r2, #2
 8004d4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	f003 0303 	and.w	r3, r3, #3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d003      	beq.n	8004d6a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f994 	bl	8005090 <HAL_TIM_IC_CaptureCallback>
 8004d68:	e005      	b.n	8004d76 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 f986 	bl	800507c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 f997 	bl	80050a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	f003 0304 	and.w	r3, r3, #4
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d020      	beq.n	8004dc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f003 0304 	and.w	r3, r3, #4
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d01b      	beq.n	8004dc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f06f 0204 	mvn.w	r2, #4
 8004d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2202      	movs	r2, #2
 8004d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d003      	beq.n	8004db6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f96e 	bl	8005090 <HAL_TIM_IC_CaptureCallback>
 8004db4:	e005      	b.n	8004dc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f960 	bl	800507c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 f971 	bl	80050a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	f003 0308 	and.w	r3, r3, #8
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d020      	beq.n	8004e14 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f003 0308 	and.w	r3, r3, #8
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d01b      	beq.n	8004e14 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f06f 0208 	mvn.w	r2, #8
 8004de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2204      	movs	r2, #4
 8004dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	69db      	ldr	r3, [r3, #28]
 8004df2:	f003 0303 	and.w	r3, r3, #3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f948 	bl	8005090 <HAL_TIM_IC_CaptureCallback>
 8004e00:	e005      	b.n	8004e0e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 f93a 	bl	800507c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 f94b 	bl	80050a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	f003 0310 	and.w	r3, r3, #16
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d020      	beq.n	8004e60 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f003 0310 	and.w	r3, r3, #16
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d01b      	beq.n	8004e60 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f06f 0210 	mvn.w	r2, #16
 8004e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2208      	movs	r2, #8
 8004e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	69db      	ldr	r3, [r3, #28]
 8004e3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d003      	beq.n	8004e4e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f922 	bl	8005090 <HAL_TIM_IC_CaptureCallback>
 8004e4c:	e005      	b.n	8004e5a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 f914 	bl	800507c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 f925 	bl	80050a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00c      	beq.n	8004e84 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f003 0301 	and.w	r3, r3, #1
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d007      	beq.n	8004e84 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f06f 0201 	mvn.w	r2, #1
 8004e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f7fc fe7a 	bl	8001b78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00c      	beq.n	8004ea8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d007      	beq.n	8004ea8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 fc1a 	bl	80056dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00c      	beq.n	8004ecc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d007      	beq.n	8004ecc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 f8f6 	bl	80050b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	f003 0320 	and.w	r3, r3, #32
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00c      	beq.n	8004ef0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f003 0320 	and.w	r3, r3, #32
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d007      	beq.n	8004ef0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f06f 0220 	mvn.w	r2, #32
 8004ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 fbec 	bl	80056c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ef0:	bf00      	nop
 8004ef2:	3710      	adds	r7, #16
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b086      	sub	sp, #24
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f04:	2300      	movs	r3, #0
 8004f06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d101      	bne.n	8004f16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f12:	2302      	movs	r3, #2
 8004f14:	e0ae      	b.n	8005074 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2b0c      	cmp	r3, #12
 8004f22:	f200 809f 	bhi.w	8005064 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004f26:	a201      	add	r2, pc, #4	@ (adr r2, 8004f2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2c:	08004f61 	.word	0x08004f61
 8004f30:	08005065 	.word	0x08005065
 8004f34:	08005065 	.word	0x08005065
 8004f38:	08005065 	.word	0x08005065
 8004f3c:	08004fa1 	.word	0x08004fa1
 8004f40:	08005065 	.word	0x08005065
 8004f44:	08005065 	.word	0x08005065
 8004f48:	08005065 	.word	0x08005065
 8004f4c:	08004fe3 	.word	0x08004fe3
 8004f50:	08005065 	.word	0x08005065
 8004f54:	08005065 	.word	0x08005065
 8004f58:	08005065 	.word	0x08005065
 8004f5c:	08005023 	.word	0x08005023
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68b9      	ldr	r1, [r7, #8]
 8004f66:	4618      	mov	r0, r3
 8004f68:	f000 f95c 	bl	8005224 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	699a      	ldr	r2, [r3, #24]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f042 0208 	orr.w	r2, r2, #8
 8004f7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	699a      	ldr	r2, [r3, #24]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f022 0204 	bic.w	r2, r2, #4
 8004f8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	6999      	ldr	r1, [r3, #24]
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	691a      	ldr	r2, [r3, #16]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	619a      	str	r2, [r3, #24]
      break;
 8004f9e:	e064      	b.n	800506a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68b9      	ldr	r1, [r7, #8]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f000 f9ac 	bl	8005304 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	699a      	ldr	r2, [r3, #24]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	699a      	ldr	r2, [r3, #24]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	6999      	ldr	r1, [r3, #24]
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	021a      	lsls	r2, r3, #8
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	619a      	str	r2, [r3, #24]
      break;
 8004fe0:	e043      	b.n	800506a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68b9      	ldr	r1, [r7, #8]
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f000 fa01 	bl	80053f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	69da      	ldr	r2, [r3, #28]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f042 0208 	orr.w	r2, r2, #8
 8004ffc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	69da      	ldr	r2, [r3, #28]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f022 0204 	bic.w	r2, r2, #4
 800500c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	69d9      	ldr	r1, [r3, #28]
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	691a      	ldr	r2, [r3, #16]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	430a      	orrs	r2, r1
 800501e:	61da      	str	r2, [r3, #28]
      break;
 8005020:	e023      	b.n	800506a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68b9      	ldr	r1, [r7, #8]
 8005028:	4618      	mov	r0, r3
 800502a:	f000 fa55 	bl	80054d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	69da      	ldr	r2, [r3, #28]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800503c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	69da      	ldr	r2, [r3, #28]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800504c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	69d9      	ldr	r1, [r3, #28]
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	021a      	lsls	r2, r3, #8
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	430a      	orrs	r2, r1
 8005060:	61da      	str	r2, [r3, #28]
      break;
 8005062:	e002      	b.n	800506a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	75fb      	strb	r3, [r7, #23]
      break;
 8005068:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005072:	7dfb      	ldrb	r3, [r7, #23]
}
 8005074:	4618      	mov	r0, r3
 8005076:	3718      	adds	r7, #24
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050ac:	bf00      	nop
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a46      	ldr	r2, [pc, #280]	@ (80051f8 <TIM_Base_SetConfig+0x12c>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d013      	beq.n	800510c <TIM_Base_SetConfig+0x40>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050ea:	d00f      	beq.n	800510c <TIM_Base_SetConfig+0x40>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a43      	ldr	r2, [pc, #268]	@ (80051fc <TIM_Base_SetConfig+0x130>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d00b      	beq.n	800510c <TIM_Base_SetConfig+0x40>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a42      	ldr	r2, [pc, #264]	@ (8005200 <TIM_Base_SetConfig+0x134>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d007      	beq.n	800510c <TIM_Base_SetConfig+0x40>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a41      	ldr	r2, [pc, #260]	@ (8005204 <TIM_Base_SetConfig+0x138>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d003      	beq.n	800510c <TIM_Base_SetConfig+0x40>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a40      	ldr	r2, [pc, #256]	@ (8005208 <TIM_Base_SetConfig+0x13c>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d108      	bne.n	800511e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005112:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	4313      	orrs	r3, r2
 800511c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a35      	ldr	r2, [pc, #212]	@ (80051f8 <TIM_Base_SetConfig+0x12c>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d02b      	beq.n	800517e <TIM_Base_SetConfig+0xb2>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800512c:	d027      	beq.n	800517e <TIM_Base_SetConfig+0xb2>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a32      	ldr	r2, [pc, #200]	@ (80051fc <TIM_Base_SetConfig+0x130>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d023      	beq.n	800517e <TIM_Base_SetConfig+0xb2>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a31      	ldr	r2, [pc, #196]	@ (8005200 <TIM_Base_SetConfig+0x134>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d01f      	beq.n	800517e <TIM_Base_SetConfig+0xb2>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a30      	ldr	r2, [pc, #192]	@ (8005204 <TIM_Base_SetConfig+0x138>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d01b      	beq.n	800517e <TIM_Base_SetConfig+0xb2>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a2f      	ldr	r2, [pc, #188]	@ (8005208 <TIM_Base_SetConfig+0x13c>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d017      	beq.n	800517e <TIM_Base_SetConfig+0xb2>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a2e      	ldr	r2, [pc, #184]	@ (800520c <TIM_Base_SetConfig+0x140>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d013      	beq.n	800517e <TIM_Base_SetConfig+0xb2>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a2d      	ldr	r2, [pc, #180]	@ (8005210 <TIM_Base_SetConfig+0x144>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d00f      	beq.n	800517e <TIM_Base_SetConfig+0xb2>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a2c      	ldr	r2, [pc, #176]	@ (8005214 <TIM_Base_SetConfig+0x148>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d00b      	beq.n	800517e <TIM_Base_SetConfig+0xb2>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a2b      	ldr	r2, [pc, #172]	@ (8005218 <TIM_Base_SetConfig+0x14c>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d007      	beq.n	800517e <TIM_Base_SetConfig+0xb2>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a2a      	ldr	r2, [pc, #168]	@ (800521c <TIM_Base_SetConfig+0x150>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d003      	beq.n	800517e <TIM_Base_SetConfig+0xb2>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a29      	ldr	r2, [pc, #164]	@ (8005220 <TIM_Base_SetConfig+0x154>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d108      	bne.n	8005190 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005184:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	4313      	orrs	r3, r2
 800518e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	4313      	orrs	r3, r2
 800519c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	689a      	ldr	r2, [r3, #8]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a10      	ldr	r2, [pc, #64]	@ (80051f8 <TIM_Base_SetConfig+0x12c>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d003      	beq.n	80051c4 <TIM_Base_SetConfig+0xf8>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a12      	ldr	r2, [pc, #72]	@ (8005208 <TIM_Base_SetConfig+0x13c>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d103      	bne.n	80051cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	691a      	ldr	r2, [r3, #16]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	f003 0301 	and.w	r3, r3, #1
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d105      	bne.n	80051ea <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	f023 0201 	bic.w	r2, r3, #1
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	611a      	str	r2, [r3, #16]
  }
}
 80051ea:	bf00      	nop
 80051ec:	3714      	adds	r7, #20
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	40010000 	.word	0x40010000
 80051fc:	40000400 	.word	0x40000400
 8005200:	40000800 	.word	0x40000800
 8005204:	40000c00 	.word	0x40000c00
 8005208:	40010400 	.word	0x40010400
 800520c:	40014000 	.word	0x40014000
 8005210:	40014400 	.word	0x40014400
 8005214:	40014800 	.word	0x40014800
 8005218:	40001800 	.word	0x40001800
 800521c:	40001c00 	.word	0x40001c00
 8005220:	40002000 	.word	0x40002000

08005224 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005224:	b480      	push	{r7}
 8005226:	b087      	sub	sp, #28
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a1b      	ldr	r3, [r3, #32]
 8005238:	f023 0201 	bic.w	r2, r3, #1
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f023 0303 	bic.w	r3, r3, #3
 800525a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	4313      	orrs	r3, r2
 8005264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	f023 0302 	bic.w	r3, r3, #2
 800526c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	4313      	orrs	r3, r2
 8005276:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a20      	ldr	r2, [pc, #128]	@ (80052fc <TIM_OC1_SetConfig+0xd8>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d003      	beq.n	8005288 <TIM_OC1_SetConfig+0x64>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a1f      	ldr	r2, [pc, #124]	@ (8005300 <TIM_OC1_SetConfig+0xdc>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d10c      	bne.n	80052a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	f023 0308 	bic.w	r3, r3, #8
 800528e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	697a      	ldr	r2, [r7, #20]
 8005296:	4313      	orrs	r3, r2
 8005298:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	f023 0304 	bic.w	r3, r3, #4
 80052a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a15      	ldr	r2, [pc, #84]	@ (80052fc <TIM_OC1_SetConfig+0xd8>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d003      	beq.n	80052b2 <TIM_OC1_SetConfig+0x8e>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a14      	ldr	r2, [pc, #80]	@ (8005300 <TIM_OC1_SetConfig+0xdc>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d111      	bne.n	80052d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80052c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	699b      	ldr	r3, [r3, #24]
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	685a      	ldr	r2, [r3, #4]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	697a      	ldr	r2, [r7, #20]
 80052ee:	621a      	str	r2, [r3, #32]
}
 80052f0:	bf00      	nop
 80052f2:	371c      	adds	r7, #28
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr
 80052fc:	40010000 	.word	0x40010000
 8005300:	40010400 	.word	0x40010400

08005304 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005304:	b480      	push	{r7}
 8005306:	b087      	sub	sp, #28
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a1b      	ldr	r3, [r3, #32]
 8005318:	f023 0210 	bic.w	r2, r3, #16
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800533a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	021b      	lsls	r3, r3, #8
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	4313      	orrs	r3, r2
 8005346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	f023 0320 	bic.w	r3, r3, #32
 800534e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	011b      	lsls	r3, r3, #4
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	4313      	orrs	r3, r2
 800535a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a22      	ldr	r2, [pc, #136]	@ (80053e8 <TIM_OC2_SetConfig+0xe4>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d003      	beq.n	800536c <TIM_OC2_SetConfig+0x68>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a21      	ldr	r2, [pc, #132]	@ (80053ec <TIM_OC2_SetConfig+0xe8>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d10d      	bne.n	8005388 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005372:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	011b      	lsls	r3, r3, #4
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	4313      	orrs	r3, r2
 800537e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005386:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a17      	ldr	r2, [pc, #92]	@ (80053e8 <TIM_OC2_SetConfig+0xe4>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d003      	beq.n	8005398 <TIM_OC2_SetConfig+0x94>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a16      	ldr	r2, [pc, #88]	@ (80053ec <TIM_OC2_SetConfig+0xe8>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d113      	bne.n	80053c0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800539e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80053a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	695b      	ldr	r3, [r3, #20]
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	693a      	ldr	r2, [r7, #16]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	4313      	orrs	r3, r2
 80053be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	693a      	ldr	r2, [r7, #16]
 80053c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	685a      	ldr	r2, [r3, #4]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	621a      	str	r2, [r3, #32]
}
 80053da:	bf00      	nop
 80053dc:	371c      	adds	r7, #28
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	40010000 	.word	0x40010000
 80053ec:	40010400 	.word	0x40010400

080053f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b087      	sub	sp, #28
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6a1b      	ldr	r3, [r3, #32]
 8005404:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	69db      	ldr	r3, [r3, #28]
 8005416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800541e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f023 0303 	bic.w	r3, r3, #3
 8005426:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	4313      	orrs	r3, r2
 8005430:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005438:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	021b      	lsls	r3, r3, #8
 8005440:	697a      	ldr	r2, [r7, #20]
 8005442:	4313      	orrs	r3, r2
 8005444:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a21      	ldr	r2, [pc, #132]	@ (80054d0 <TIM_OC3_SetConfig+0xe0>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d003      	beq.n	8005456 <TIM_OC3_SetConfig+0x66>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a20      	ldr	r2, [pc, #128]	@ (80054d4 <TIM_OC3_SetConfig+0xe4>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d10d      	bne.n	8005472 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800545c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	021b      	lsls	r3, r3, #8
 8005464:	697a      	ldr	r2, [r7, #20]
 8005466:	4313      	orrs	r3, r2
 8005468:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005470:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a16      	ldr	r2, [pc, #88]	@ (80054d0 <TIM_OC3_SetConfig+0xe0>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d003      	beq.n	8005482 <TIM_OC3_SetConfig+0x92>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a15      	ldr	r2, [pc, #84]	@ (80054d4 <TIM_OC3_SetConfig+0xe4>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d113      	bne.n	80054aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005488:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005490:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	011b      	lsls	r3, r3, #4
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	4313      	orrs	r3, r2
 800549c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	011b      	lsls	r3, r3, #4
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	685a      	ldr	r2, [r3, #4]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	621a      	str	r2, [r3, #32]
}
 80054c4:	bf00      	nop
 80054c6:	371c      	adds	r7, #28
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr
 80054d0:	40010000 	.word	0x40010000
 80054d4:	40010400 	.word	0x40010400

080054d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054d8:	b480      	push	{r7}
 80054da:	b087      	sub	sp, #28
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a1b      	ldr	r3, [r3, #32]
 80054ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	69db      	ldr	r3, [r3, #28]
 80054fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800550e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	021b      	lsls	r3, r3, #8
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	4313      	orrs	r3, r2
 800551a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005522:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	031b      	lsls	r3, r3, #12
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	4313      	orrs	r3, r2
 800552e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a12      	ldr	r2, [pc, #72]	@ (800557c <TIM_OC4_SetConfig+0xa4>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d003      	beq.n	8005540 <TIM_OC4_SetConfig+0x68>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a11      	ldr	r2, [pc, #68]	@ (8005580 <TIM_OC4_SetConfig+0xa8>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d109      	bne.n	8005554 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005546:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	695b      	ldr	r3, [r3, #20]
 800554c:	019b      	lsls	r3, r3, #6
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	4313      	orrs	r3, r2
 8005552:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	685a      	ldr	r2, [r3, #4]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	621a      	str	r2, [r3, #32]
}
 800556e:	bf00      	nop
 8005570:	371c      	adds	r7, #28
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	40010000 	.word	0x40010000
 8005580:	40010400 	.word	0x40010400

08005584 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005584:	b480      	push	{r7}
 8005586:	b087      	sub	sp, #28
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	f003 031f 	and.w	r3, r3, #31
 8005596:	2201      	movs	r2, #1
 8005598:	fa02 f303 	lsl.w	r3, r2, r3
 800559c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6a1a      	ldr	r2, [r3, #32]
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	43db      	mvns	r3, r3
 80055a6:	401a      	ands	r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6a1a      	ldr	r2, [r3, #32]
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	f003 031f 	and.w	r3, r3, #31
 80055b6:	6879      	ldr	r1, [r7, #4]
 80055b8:	fa01 f303 	lsl.w	r3, r1, r3
 80055bc:	431a      	orrs	r2, r3
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	621a      	str	r2, [r3, #32]
}
 80055c2:	bf00      	nop
 80055c4:	371c      	adds	r7, #28
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
	...

080055d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d101      	bne.n	80055e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055e4:	2302      	movs	r3, #2
 80055e6:	e05a      	b.n	800569e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2202      	movs	r2, #2
 80055f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800560e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	4313      	orrs	r3, r2
 8005618:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a21      	ldr	r2, [pc, #132]	@ (80056ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d022      	beq.n	8005672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005634:	d01d      	beq.n	8005672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a1d      	ldr	r2, [pc, #116]	@ (80056b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d018      	beq.n	8005672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a1b      	ldr	r2, [pc, #108]	@ (80056b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d013      	beq.n	8005672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a1a      	ldr	r2, [pc, #104]	@ (80056b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d00e      	beq.n	8005672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a18      	ldr	r2, [pc, #96]	@ (80056bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d009      	beq.n	8005672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a17      	ldr	r2, [pc, #92]	@ (80056c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d004      	beq.n	8005672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a15      	ldr	r2, [pc, #84]	@ (80056c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d10c      	bne.n	800568c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005678:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	68ba      	ldr	r2, [r7, #8]
 8005680:	4313      	orrs	r3, r2
 8005682:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68ba      	ldr	r2, [r7, #8]
 800568a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3714      	adds	r7, #20
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	40010000 	.word	0x40010000
 80056b0:	40000400 	.word	0x40000400
 80056b4:	40000800 	.word	0x40000800
 80056b8:	40000c00 	.word	0x40000c00
 80056bc:	40010400 	.word	0x40010400
 80056c0:	40014000 	.word	0x40014000
 80056c4:	40001800 	.word	0x40001800

080056c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056e4:	bf00      	nop
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b082      	sub	sp, #8
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d101      	bne.n	8005702 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e042      	b.n	8005788 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b00      	cmp	r3, #0
 800570c:	d106      	bne.n	800571c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f7fc fd5e 	bl	80021d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2224      	movs	r2, #36	@ 0x24
 8005720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68da      	ldr	r2, [r3, #12]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005732:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 f973 	bl	8005a20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	691a      	ldr	r2, [r3, #16]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005748:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	695a      	ldr	r2, [r3, #20]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005758:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68da      	ldr	r2, [r3, #12]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005768:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2220      	movs	r2, #32
 8005774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2220      	movs	r2, #32
 800577c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3708      	adds	r7, #8
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b08a      	sub	sp, #40	@ 0x28
 8005794:	af02      	add	r7, sp, #8
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	603b      	str	r3, [r7, #0]
 800579c:	4613      	mov	r3, r2
 800579e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80057a0:	2300      	movs	r3, #0
 80057a2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	2b20      	cmp	r3, #32
 80057ae:	d175      	bne.n	800589c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d002      	beq.n	80057bc <HAL_UART_Transmit+0x2c>
 80057b6:	88fb      	ldrh	r3, [r7, #6]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d101      	bne.n	80057c0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e06e      	b.n	800589e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2221      	movs	r2, #33	@ 0x21
 80057ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057ce:	f7fc fe95 	bl	80024fc <HAL_GetTick>
 80057d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	88fa      	ldrh	r2, [r7, #6]
 80057d8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	88fa      	ldrh	r2, [r7, #6]
 80057de:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057e8:	d108      	bne.n	80057fc <HAL_UART_Transmit+0x6c>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d104      	bne.n	80057fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80057f2:	2300      	movs	r3, #0
 80057f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	61bb      	str	r3, [r7, #24]
 80057fa:	e003      	b.n	8005804 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005800:	2300      	movs	r3, #0
 8005802:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005804:	e02e      	b.n	8005864 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	9300      	str	r3, [sp, #0]
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	2200      	movs	r2, #0
 800580e:	2180      	movs	r1, #128	@ 0x80
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	f000 f848 	bl	80058a6 <UART_WaitOnFlagUntilTimeout>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d005      	beq.n	8005828 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2220      	movs	r2, #32
 8005820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	e03a      	b.n	800589e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d10b      	bne.n	8005846 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	881b      	ldrh	r3, [r3, #0]
 8005832:	461a      	mov	r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800583c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	3302      	adds	r3, #2
 8005842:	61bb      	str	r3, [r7, #24]
 8005844:	e007      	b.n	8005856 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	781a      	ldrb	r2, [r3, #0]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	3301      	adds	r3, #1
 8005854:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800585a:	b29b      	uxth	r3, r3
 800585c:	3b01      	subs	r3, #1
 800585e:	b29a      	uxth	r2, r3
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005868:	b29b      	uxth	r3, r3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1cb      	bne.n	8005806 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	9300      	str	r3, [sp, #0]
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	2200      	movs	r2, #0
 8005876:	2140      	movs	r1, #64	@ 0x40
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	f000 f814 	bl	80058a6 <UART_WaitOnFlagUntilTimeout>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d005      	beq.n	8005890 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2220      	movs	r2, #32
 8005888:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e006      	b.n	800589e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2220      	movs	r2, #32
 8005894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005898:	2300      	movs	r3, #0
 800589a:	e000      	b.n	800589e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800589c:	2302      	movs	r3, #2
  }
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3720      	adds	r7, #32
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b086      	sub	sp, #24
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	60f8      	str	r0, [r7, #12]
 80058ae:	60b9      	str	r1, [r7, #8]
 80058b0:	603b      	str	r3, [r7, #0]
 80058b2:	4613      	mov	r3, r2
 80058b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058b6:	e03b      	b.n	8005930 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058b8:	6a3b      	ldr	r3, [r7, #32]
 80058ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80058be:	d037      	beq.n	8005930 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058c0:	f7fc fe1c 	bl	80024fc <HAL_GetTick>
 80058c4:	4602      	mov	r2, r0
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	6a3a      	ldr	r2, [r7, #32]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d302      	bcc.n	80058d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80058d0:	6a3b      	ldr	r3, [r7, #32]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d101      	bne.n	80058da <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e03a      	b.n	8005950 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	f003 0304 	and.w	r3, r3, #4
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d023      	beq.n	8005930 <UART_WaitOnFlagUntilTimeout+0x8a>
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	2b80      	cmp	r3, #128	@ 0x80
 80058ec:	d020      	beq.n	8005930 <UART_WaitOnFlagUntilTimeout+0x8a>
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	2b40      	cmp	r3, #64	@ 0x40
 80058f2:	d01d      	beq.n	8005930 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0308 	and.w	r3, r3, #8
 80058fe:	2b08      	cmp	r3, #8
 8005900:	d116      	bne.n	8005930 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005902:	2300      	movs	r3, #0
 8005904:	617b      	str	r3, [r7, #20]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	617b      	str	r3, [r7, #20]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	617b      	str	r3, [r7, #20]
 8005916:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005918:	68f8      	ldr	r0, [r7, #12]
 800591a:	f000 f81d 	bl	8005958 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2208      	movs	r2, #8
 8005922:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e00f      	b.n	8005950 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	4013      	ands	r3, r2
 800593a:	68ba      	ldr	r2, [r7, #8]
 800593c:	429a      	cmp	r2, r3
 800593e:	bf0c      	ite	eq
 8005940:	2301      	moveq	r3, #1
 8005942:	2300      	movne	r3, #0
 8005944:	b2db      	uxtb	r3, r3
 8005946:	461a      	mov	r2, r3
 8005948:	79fb      	ldrb	r3, [r7, #7]
 800594a:	429a      	cmp	r2, r3
 800594c:	d0b4      	beq.n	80058b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3718      	adds	r7, #24
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005958:	b480      	push	{r7}
 800595a:	b095      	sub	sp, #84	@ 0x54
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	330c      	adds	r3, #12
 8005966:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800596a:	e853 3f00 	ldrex	r3, [r3]
 800596e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005972:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005976:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	330c      	adds	r3, #12
 800597e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005980:	643a      	str	r2, [r7, #64]	@ 0x40
 8005982:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005984:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005986:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005988:	e841 2300 	strex	r3, r2, [r1]
 800598c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800598e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005990:	2b00      	cmp	r3, #0
 8005992:	d1e5      	bne.n	8005960 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	3314      	adds	r3, #20
 800599a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599c:	6a3b      	ldr	r3, [r7, #32]
 800599e:	e853 3f00 	ldrex	r3, [r3]
 80059a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	f023 0301 	bic.w	r3, r3, #1
 80059aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	3314      	adds	r3, #20
 80059b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80059ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059bc:	e841 2300 	strex	r3, r2, [r1]
 80059c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80059c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d1e5      	bne.n	8005994 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d119      	bne.n	8005a04 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	330c      	adds	r3, #12
 80059d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	e853 3f00 	ldrex	r3, [r3]
 80059de:	60bb      	str	r3, [r7, #8]
   return(result);
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	f023 0310 	bic.w	r3, r3, #16
 80059e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	330c      	adds	r3, #12
 80059ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80059f0:	61ba      	str	r2, [r7, #24]
 80059f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f4:	6979      	ldr	r1, [r7, #20]
 80059f6:	69ba      	ldr	r2, [r7, #24]
 80059f8:	e841 2300 	strex	r3, r2, [r1]
 80059fc:	613b      	str	r3, [r7, #16]
   return(result);
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d1e5      	bne.n	80059d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2220      	movs	r2, #32
 8005a08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005a12:	bf00      	nop
 8005a14:	3754      	adds	r7, #84	@ 0x54
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
	...

08005a20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a24:	b0c0      	sub	sp, #256	@ 0x100
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a3c:	68d9      	ldr	r1, [r3, #12]
 8005a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	ea40 0301 	orr.w	r3, r0, r1
 8005a48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a4e:	689a      	ldr	r2, [r3, #8]
 8005a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	431a      	orrs	r2, r3
 8005a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a5c:	695b      	ldr	r3, [r3, #20]
 8005a5e:	431a      	orrs	r2, r3
 8005a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a64:	69db      	ldr	r3, [r3, #28]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005a78:	f021 010c 	bic.w	r1, r1, #12
 8005a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005a86:	430b      	orrs	r3, r1
 8005a88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a9a:	6999      	ldr	r1, [r3, #24]
 8005a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	ea40 0301 	orr.w	r3, r0, r1
 8005aa6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	4b8f      	ldr	r3, [pc, #572]	@ (8005cec <UART_SetConfig+0x2cc>)
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d005      	beq.n	8005ac0 <UART_SetConfig+0xa0>
 8005ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	4b8d      	ldr	r3, [pc, #564]	@ (8005cf0 <UART_SetConfig+0x2d0>)
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d104      	bne.n	8005aca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ac0:	f7fe fa34 	bl	8003f2c <HAL_RCC_GetPCLK2Freq>
 8005ac4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005ac8:	e003      	b.n	8005ad2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005aca:	f7fe fa1b 	bl	8003f04 <HAL_RCC_GetPCLK1Freq>
 8005ace:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ad6:	69db      	ldr	r3, [r3, #28]
 8005ad8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005adc:	f040 810c 	bne.w	8005cf8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ae0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005aea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005aee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005af2:	4622      	mov	r2, r4
 8005af4:	462b      	mov	r3, r5
 8005af6:	1891      	adds	r1, r2, r2
 8005af8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005afa:	415b      	adcs	r3, r3
 8005afc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005afe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005b02:	4621      	mov	r1, r4
 8005b04:	eb12 0801 	adds.w	r8, r2, r1
 8005b08:	4629      	mov	r1, r5
 8005b0a:	eb43 0901 	adc.w	r9, r3, r1
 8005b0e:	f04f 0200 	mov.w	r2, #0
 8005b12:	f04f 0300 	mov.w	r3, #0
 8005b16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b22:	4690      	mov	r8, r2
 8005b24:	4699      	mov	r9, r3
 8005b26:	4623      	mov	r3, r4
 8005b28:	eb18 0303 	adds.w	r3, r8, r3
 8005b2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005b30:	462b      	mov	r3, r5
 8005b32:	eb49 0303 	adc.w	r3, r9, r3
 8005b36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005b46:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005b4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005b4e:	460b      	mov	r3, r1
 8005b50:	18db      	adds	r3, r3, r3
 8005b52:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b54:	4613      	mov	r3, r2
 8005b56:	eb42 0303 	adc.w	r3, r2, r3
 8005b5a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005b60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005b64:	f7fb f852 	bl	8000c0c <__aeabi_uldivmod>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	4b61      	ldr	r3, [pc, #388]	@ (8005cf4 <UART_SetConfig+0x2d4>)
 8005b6e:	fba3 2302 	umull	r2, r3, r3, r2
 8005b72:	095b      	lsrs	r3, r3, #5
 8005b74:	011c      	lsls	r4, r3, #4
 8005b76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b80:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005b84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005b88:	4642      	mov	r2, r8
 8005b8a:	464b      	mov	r3, r9
 8005b8c:	1891      	adds	r1, r2, r2
 8005b8e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005b90:	415b      	adcs	r3, r3
 8005b92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005b98:	4641      	mov	r1, r8
 8005b9a:	eb12 0a01 	adds.w	sl, r2, r1
 8005b9e:	4649      	mov	r1, r9
 8005ba0:	eb43 0b01 	adc.w	fp, r3, r1
 8005ba4:	f04f 0200 	mov.w	r2, #0
 8005ba8:	f04f 0300 	mov.w	r3, #0
 8005bac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005bb0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005bb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bb8:	4692      	mov	sl, r2
 8005bba:	469b      	mov	fp, r3
 8005bbc:	4643      	mov	r3, r8
 8005bbe:	eb1a 0303 	adds.w	r3, sl, r3
 8005bc2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005bc6:	464b      	mov	r3, r9
 8005bc8:	eb4b 0303 	adc.w	r3, fp, r3
 8005bcc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005bdc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005be0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005be4:	460b      	mov	r3, r1
 8005be6:	18db      	adds	r3, r3, r3
 8005be8:	643b      	str	r3, [r7, #64]	@ 0x40
 8005bea:	4613      	mov	r3, r2
 8005bec:	eb42 0303 	adc.w	r3, r2, r3
 8005bf0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bf2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005bf6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005bfa:	f7fb f807 	bl	8000c0c <__aeabi_uldivmod>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	460b      	mov	r3, r1
 8005c02:	4611      	mov	r1, r2
 8005c04:	4b3b      	ldr	r3, [pc, #236]	@ (8005cf4 <UART_SetConfig+0x2d4>)
 8005c06:	fba3 2301 	umull	r2, r3, r3, r1
 8005c0a:	095b      	lsrs	r3, r3, #5
 8005c0c:	2264      	movs	r2, #100	@ 0x64
 8005c0e:	fb02 f303 	mul.w	r3, r2, r3
 8005c12:	1acb      	subs	r3, r1, r3
 8005c14:	00db      	lsls	r3, r3, #3
 8005c16:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005c1a:	4b36      	ldr	r3, [pc, #216]	@ (8005cf4 <UART_SetConfig+0x2d4>)
 8005c1c:	fba3 2302 	umull	r2, r3, r3, r2
 8005c20:	095b      	lsrs	r3, r3, #5
 8005c22:	005b      	lsls	r3, r3, #1
 8005c24:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005c28:	441c      	add	r4, r3
 8005c2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c34:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005c38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005c3c:	4642      	mov	r2, r8
 8005c3e:	464b      	mov	r3, r9
 8005c40:	1891      	adds	r1, r2, r2
 8005c42:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005c44:	415b      	adcs	r3, r3
 8005c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005c4c:	4641      	mov	r1, r8
 8005c4e:	1851      	adds	r1, r2, r1
 8005c50:	6339      	str	r1, [r7, #48]	@ 0x30
 8005c52:	4649      	mov	r1, r9
 8005c54:	414b      	adcs	r3, r1
 8005c56:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c58:	f04f 0200 	mov.w	r2, #0
 8005c5c:	f04f 0300 	mov.w	r3, #0
 8005c60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005c64:	4659      	mov	r1, fp
 8005c66:	00cb      	lsls	r3, r1, #3
 8005c68:	4651      	mov	r1, sl
 8005c6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c6e:	4651      	mov	r1, sl
 8005c70:	00ca      	lsls	r2, r1, #3
 8005c72:	4610      	mov	r0, r2
 8005c74:	4619      	mov	r1, r3
 8005c76:	4603      	mov	r3, r0
 8005c78:	4642      	mov	r2, r8
 8005c7a:	189b      	adds	r3, r3, r2
 8005c7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005c80:	464b      	mov	r3, r9
 8005c82:	460a      	mov	r2, r1
 8005c84:	eb42 0303 	adc.w	r3, r2, r3
 8005c88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005c98:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005c9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	18db      	adds	r3, r3, r3
 8005ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	eb42 0303 	adc.w	r3, r2, r3
 8005cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005cb2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005cb6:	f7fa ffa9 	bl	8000c0c <__aeabi_uldivmod>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8005cf4 <UART_SetConfig+0x2d4>)
 8005cc0:	fba3 1302 	umull	r1, r3, r3, r2
 8005cc4:	095b      	lsrs	r3, r3, #5
 8005cc6:	2164      	movs	r1, #100	@ 0x64
 8005cc8:	fb01 f303 	mul.w	r3, r1, r3
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	00db      	lsls	r3, r3, #3
 8005cd0:	3332      	adds	r3, #50	@ 0x32
 8005cd2:	4a08      	ldr	r2, [pc, #32]	@ (8005cf4 <UART_SetConfig+0x2d4>)
 8005cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd8:	095b      	lsrs	r3, r3, #5
 8005cda:	f003 0207 	and.w	r2, r3, #7
 8005cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4422      	add	r2, r4
 8005ce6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ce8:	e106      	b.n	8005ef8 <UART_SetConfig+0x4d8>
 8005cea:	bf00      	nop
 8005cec:	40011000 	.word	0x40011000
 8005cf0:	40011400 	.word	0x40011400
 8005cf4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005d02:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005d06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005d0a:	4642      	mov	r2, r8
 8005d0c:	464b      	mov	r3, r9
 8005d0e:	1891      	adds	r1, r2, r2
 8005d10:	6239      	str	r1, [r7, #32]
 8005d12:	415b      	adcs	r3, r3
 8005d14:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d1a:	4641      	mov	r1, r8
 8005d1c:	1854      	adds	r4, r2, r1
 8005d1e:	4649      	mov	r1, r9
 8005d20:	eb43 0501 	adc.w	r5, r3, r1
 8005d24:	f04f 0200 	mov.w	r2, #0
 8005d28:	f04f 0300 	mov.w	r3, #0
 8005d2c:	00eb      	lsls	r3, r5, #3
 8005d2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d32:	00e2      	lsls	r2, r4, #3
 8005d34:	4614      	mov	r4, r2
 8005d36:	461d      	mov	r5, r3
 8005d38:	4643      	mov	r3, r8
 8005d3a:	18e3      	adds	r3, r4, r3
 8005d3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005d40:	464b      	mov	r3, r9
 8005d42:	eb45 0303 	adc.w	r3, r5, r3
 8005d46:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005d56:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005d5a:	f04f 0200 	mov.w	r2, #0
 8005d5e:	f04f 0300 	mov.w	r3, #0
 8005d62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005d66:	4629      	mov	r1, r5
 8005d68:	008b      	lsls	r3, r1, #2
 8005d6a:	4621      	mov	r1, r4
 8005d6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d70:	4621      	mov	r1, r4
 8005d72:	008a      	lsls	r2, r1, #2
 8005d74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005d78:	f7fa ff48 	bl	8000c0c <__aeabi_uldivmod>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	460b      	mov	r3, r1
 8005d80:	4b60      	ldr	r3, [pc, #384]	@ (8005f04 <UART_SetConfig+0x4e4>)
 8005d82:	fba3 2302 	umull	r2, r3, r3, r2
 8005d86:	095b      	lsrs	r3, r3, #5
 8005d88:	011c      	lsls	r4, r3, #4
 8005d8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005d94:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005d98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005d9c:	4642      	mov	r2, r8
 8005d9e:	464b      	mov	r3, r9
 8005da0:	1891      	adds	r1, r2, r2
 8005da2:	61b9      	str	r1, [r7, #24]
 8005da4:	415b      	adcs	r3, r3
 8005da6:	61fb      	str	r3, [r7, #28]
 8005da8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005dac:	4641      	mov	r1, r8
 8005dae:	1851      	adds	r1, r2, r1
 8005db0:	6139      	str	r1, [r7, #16]
 8005db2:	4649      	mov	r1, r9
 8005db4:	414b      	adcs	r3, r1
 8005db6:	617b      	str	r3, [r7, #20]
 8005db8:	f04f 0200 	mov.w	r2, #0
 8005dbc:	f04f 0300 	mov.w	r3, #0
 8005dc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005dc4:	4659      	mov	r1, fp
 8005dc6:	00cb      	lsls	r3, r1, #3
 8005dc8:	4651      	mov	r1, sl
 8005dca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005dce:	4651      	mov	r1, sl
 8005dd0:	00ca      	lsls	r2, r1, #3
 8005dd2:	4610      	mov	r0, r2
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	4642      	mov	r2, r8
 8005dda:	189b      	adds	r3, r3, r2
 8005ddc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005de0:	464b      	mov	r3, r9
 8005de2:	460a      	mov	r2, r1
 8005de4:	eb42 0303 	adc.w	r3, r2, r3
 8005de8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005df6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005df8:	f04f 0200 	mov.w	r2, #0
 8005dfc:	f04f 0300 	mov.w	r3, #0
 8005e00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005e04:	4649      	mov	r1, r9
 8005e06:	008b      	lsls	r3, r1, #2
 8005e08:	4641      	mov	r1, r8
 8005e0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e0e:	4641      	mov	r1, r8
 8005e10:	008a      	lsls	r2, r1, #2
 8005e12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005e16:	f7fa fef9 	bl	8000c0c <__aeabi_uldivmod>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	4611      	mov	r1, r2
 8005e20:	4b38      	ldr	r3, [pc, #224]	@ (8005f04 <UART_SetConfig+0x4e4>)
 8005e22:	fba3 2301 	umull	r2, r3, r3, r1
 8005e26:	095b      	lsrs	r3, r3, #5
 8005e28:	2264      	movs	r2, #100	@ 0x64
 8005e2a:	fb02 f303 	mul.w	r3, r2, r3
 8005e2e:	1acb      	subs	r3, r1, r3
 8005e30:	011b      	lsls	r3, r3, #4
 8005e32:	3332      	adds	r3, #50	@ 0x32
 8005e34:	4a33      	ldr	r2, [pc, #204]	@ (8005f04 <UART_SetConfig+0x4e4>)
 8005e36:	fba2 2303 	umull	r2, r3, r2, r3
 8005e3a:	095b      	lsrs	r3, r3, #5
 8005e3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e40:	441c      	add	r4, r3
 8005e42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e46:	2200      	movs	r2, #0
 8005e48:	673b      	str	r3, [r7, #112]	@ 0x70
 8005e4a:	677a      	str	r2, [r7, #116]	@ 0x74
 8005e4c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005e50:	4642      	mov	r2, r8
 8005e52:	464b      	mov	r3, r9
 8005e54:	1891      	adds	r1, r2, r2
 8005e56:	60b9      	str	r1, [r7, #8]
 8005e58:	415b      	adcs	r3, r3
 8005e5a:	60fb      	str	r3, [r7, #12]
 8005e5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e60:	4641      	mov	r1, r8
 8005e62:	1851      	adds	r1, r2, r1
 8005e64:	6039      	str	r1, [r7, #0]
 8005e66:	4649      	mov	r1, r9
 8005e68:	414b      	adcs	r3, r1
 8005e6a:	607b      	str	r3, [r7, #4]
 8005e6c:	f04f 0200 	mov.w	r2, #0
 8005e70:	f04f 0300 	mov.w	r3, #0
 8005e74:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005e78:	4659      	mov	r1, fp
 8005e7a:	00cb      	lsls	r3, r1, #3
 8005e7c:	4651      	mov	r1, sl
 8005e7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e82:	4651      	mov	r1, sl
 8005e84:	00ca      	lsls	r2, r1, #3
 8005e86:	4610      	mov	r0, r2
 8005e88:	4619      	mov	r1, r3
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	4642      	mov	r2, r8
 8005e8e:	189b      	adds	r3, r3, r2
 8005e90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e92:	464b      	mov	r3, r9
 8005e94:	460a      	mov	r2, r1
 8005e96:	eb42 0303 	adc.w	r3, r2, r3
 8005e9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ea6:	667a      	str	r2, [r7, #100]	@ 0x64
 8005ea8:	f04f 0200 	mov.w	r2, #0
 8005eac:	f04f 0300 	mov.w	r3, #0
 8005eb0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005eb4:	4649      	mov	r1, r9
 8005eb6:	008b      	lsls	r3, r1, #2
 8005eb8:	4641      	mov	r1, r8
 8005eba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ebe:	4641      	mov	r1, r8
 8005ec0:	008a      	lsls	r2, r1, #2
 8005ec2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005ec6:	f7fa fea1 	bl	8000c0c <__aeabi_uldivmod>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	460b      	mov	r3, r1
 8005ece:	4b0d      	ldr	r3, [pc, #52]	@ (8005f04 <UART_SetConfig+0x4e4>)
 8005ed0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ed4:	095b      	lsrs	r3, r3, #5
 8005ed6:	2164      	movs	r1, #100	@ 0x64
 8005ed8:	fb01 f303 	mul.w	r3, r1, r3
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	011b      	lsls	r3, r3, #4
 8005ee0:	3332      	adds	r3, #50	@ 0x32
 8005ee2:	4a08      	ldr	r2, [pc, #32]	@ (8005f04 <UART_SetConfig+0x4e4>)
 8005ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee8:	095b      	lsrs	r3, r3, #5
 8005eea:	f003 020f 	and.w	r2, r3, #15
 8005eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4422      	add	r2, r4
 8005ef6:	609a      	str	r2, [r3, #8]
}
 8005ef8:	bf00      	nop
 8005efa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005efe:	46bd      	mov	sp, r7
 8005f00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f04:	51eb851f 	.word	0x51eb851f

08005f08 <__NVIC_SetPriority>:
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	4603      	mov	r3, r0
 8005f10:	6039      	str	r1, [r7, #0]
 8005f12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	db0a      	blt.n	8005f32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	b2da      	uxtb	r2, r3
 8005f20:	490c      	ldr	r1, [pc, #48]	@ (8005f54 <__NVIC_SetPriority+0x4c>)
 8005f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f26:	0112      	lsls	r2, r2, #4
 8005f28:	b2d2      	uxtb	r2, r2
 8005f2a:	440b      	add	r3, r1
 8005f2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005f30:	e00a      	b.n	8005f48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	b2da      	uxtb	r2, r3
 8005f36:	4908      	ldr	r1, [pc, #32]	@ (8005f58 <__NVIC_SetPriority+0x50>)
 8005f38:	79fb      	ldrb	r3, [r7, #7]
 8005f3a:	f003 030f 	and.w	r3, r3, #15
 8005f3e:	3b04      	subs	r3, #4
 8005f40:	0112      	lsls	r2, r2, #4
 8005f42:	b2d2      	uxtb	r2, r2
 8005f44:	440b      	add	r3, r1
 8005f46:	761a      	strb	r2, [r3, #24]
}
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr
 8005f54:	e000e100 	.word	0xe000e100
 8005f58:	e000ed00 	.word	0xe000ed00

08005f5c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005f60:	4b05      	ldr	r3, [pc, #20]	@ (8005f78 <SysTick_Handler+0x1c>)
 8005f62:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005f64:	f001 ffcc 	bl	8007f00 <xTaskGetSchedulerState>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d001      	beq.n	8005f72 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005f6e:	f002 fdc3 	bl	8008af8 <xPortSysTickHandler>
  }
}
 8005f72:	bf00      	nop
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	e000e010 	.word	0xe000e010

08005f7c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005f80:	2100      	movs	r1, #0
 8005f82:	f06f 0004 	mvn.w	r0, #4
 8005f86:	f7ff ffbf 	bl	8005f08 <__NVIC_SetPriority>
#endif
}
 8005f8a:	bf00      	nop
 8005f8c:	bd80      	pop	{r7, pc}
	...

08005f90 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f96:	f3ef 8305 	mrs	r3, IPSR
 8005f9a:	603b      	str	r3, [r7, #0]
  return(result);
 8005f9c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d003      	beq.n	8005faa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005fa2:	f06f 0305 	mvn.w	r3, #5
 8005fa6:	607b      	str	r3, [r7, #4]
 8005fa8:	e00c      	b.n	8005fc4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005faa:	4b0a      	ldr	r3, [pc, #40]	@ (8005fd4 <osKernelInitialize+0x44>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d105      	bne.n	8005fbe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005fb2:	4b08      	ldr	r3, [pc, #32]	@ (8005fd4 <osKernelInitialize+0x44>)
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	607b      	str	r3, [r7, #4]
 8005fbc:	e002      	b.n	8005fc4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005fbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005fc2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005fc4:	687b      	ldr	r3, [r7, #4]
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	370c      	adds	r7, #12
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop
 8005fd4:	200009c8 	.word	0x200009c8

08005fd8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fde:	f3ef 8305 	mrs	r3, IPSR
 8005fe2:	603b      	str	r3, [r7, #0]
  return(result);
 8005fe4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d003      	beq.n	8005ff2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005fea:	f06f 0305 	mvn.w	r3, #5
 8005fee:	607b      	str	r3, [r7, #4]
 8005ff0:	e010      	b.n	8006014 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8006020 <osKernelStart+0x48>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d109      	bne.n	800600e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005ffa:	f7ff ffbf 	bl	8005f7c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005ffe:	4b08      	ldr	r3, [pc, #32]	@ (8006020 <osKernelStart+0x48>)
 8006000:	2202      	movs	r2, #2
 8006002:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006004:	f001 fb06 	bl	8007614 <vTaskStartScheduler>
      stat = osOK;
 8006008:	2300      	movs	r3, #0
 800600a:	607b      	str	r3, [r7, #4]
 800600c:	e002      	b.n	8006014 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800600e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006012:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006014:	687b      	ldr	r3, [r7, #4]
}
 8006016:	4618      	mov	r0, r3
 8006018:	3708      	adds	r7, #8
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	200009c8 	.word	0x200009c8

08006024 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800602a:	f3ef 8305 	mrs	r3, IPSR
 800602e:	603b      	str	r3, [r7, #0]
  return(result);
 8006030:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8006032:	2b00      	cmp	r3, #0
 8006034:	d003      	beq.n	800603e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8006036:	f001 fc19 	bl	800786c <xTaskGetTickCountFromISR>
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	e002      	b.n	8006044 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800603e:	f001 fc05 	bl	800784c <xTaskGetTickCount>
 8006042:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8006044:	687b      	ldr	r3, [r7, #4]
}
 8006046:	4618      	mov	r0, r3
 8006048:	3708      	adds	r7, #8
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}

0800604e <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 800604e:	b480      	push	{r7}
 8006050:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 8006052:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
}
 8006056:	4618      	mov	r0, r3
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006060:	b580      	push	{r7, lr}
 8006062:	b08e      	sub	sp, #56	@ 0x38
 8006064:	af04      	add	r7, sp, #16
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800606c:	2300      	movs	r3, #0
 800606e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006070:	f3ef 8305 	mrs	r3, IPSR
 8006074:	617b      	str	r3, [r7, #20]
  return(result);
 8006076:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006078:	2b00      	cmp	r3, #0
 800607a:	d17e      	bne.n	800617a <osThreadNew+0x11a>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d07b      	beq.n	800617a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006082:	2380      	movs	r3, #128	@ 0x80
 8006084:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006086:	2318      	movs	r3, #24
 8006088:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800608a:	2300      	movs	r3, #0
 800608c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800608e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006092:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d045      	beq.n	8006126 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d002      	beq.n	80060a8 <osThreadNew+0x48>
        name = attr->name;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	699b      	ldr	r3, [r3, #24]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d002      	beq.n	80060b6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d008      	beq.n	80060ce <osThreadNew+0x6e>
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	2b38      	cmp	r3, #56	@ 0x38
 80060c0:	d805      	bhi.n	80060ce <osThreadNew+0x6e>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	f003 0301 	and.w	r3, r3, #1
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d001      	beq.n	80060d2 <osThreadNew+0x72>
        return (NULL);
 80060ce:	2300      	movs	r3, #0
 80060d0:	e054      	b.n	800617c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d003      	beq.n	80060e2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	089b      	lsrs	r3, r3, #2
 80060e0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00e      	beq.n	8006108 <osThreadNew+0xa8>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	2ba7      	cmp	r3, #167	@ 0xa7
 80060f0:	d90a      	bls.n	8006108 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d006      	beq.n	8006108 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	695b      	ldr	r3, [r3, #20]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d002      	beq.n	8006108 <osThreadNew+0xa8>
        mem = 1;
 8006102:	2301      	movs	r3, #1
 8006104:	61bb      	str	r3, [r7, #24]
 8006106:	e010      	b.n	800612a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d10c      	bne.n	800612a <osThreadNew+0xca>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d108      	bne.n	800612a <osThreadNew+0xca>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	691b      	ldr	r3, [r3, #16]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d104      	bne.n	800612a <osThreadNew+0xca>
          mem = 0;
 8006120:	2300      	movs	r3, #0
 8006122:	61bb      	str	r3, [r7, #24]
 8006124:	e001      	b.n	800612a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006126:	2300      	movs	r3, #0
 8006128:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	2b01      	cmp	r3, #1
 800612e:	d110      	bne.n	8006152 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006138:	9202      	str	r2, [sp, #8]
 800613a:	9301      	str	r3, [sp, #4]
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	9300      	str	r3, [sp, #0]
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	6a3a      	ldr	r2, [r7, #32]
 8006144:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f001 f8a6 	bl	8007298 <xTaskCreateStatic>
 800614c:	4603      	mov	r3, r0
 800614e:	613b      	str	r3, [r7, #16]
 8006150:	e013      	b.n	800617a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d110      	bne.n	800617a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006158:	6a3b      	ldr	r3, [r7, #32]
 800615a:	b29a      	uxth	r2, r3
 800615c:	f107 0310 	add.w	r3, r7, #16
 8006160:	9301      	str	r3, [sp, #4]
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	9300      	str	r3, [sp, #0]
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	f001 f8f4 	bl	8007358 <xTaskCreate>
 8006170:	4603      	mov	r3, r0
 8006172:	2b01      	cmp	r3, #1
 8006174:	d001      	beq.n	800617a <osThreadNew+0x11a>
            hTask = NULL;
 8006176:	2300      	movs	r3, #0
 8006178:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800617a:	693b      	ldr	r3, [r7, #16]
}
 800617c:	4618      	mov	r0, r3
 800617e:	3728      	adds	r7, #40	@ 0x28
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006184:	b580      	push	{r7, lr}
 8006186:	b08a      	sub	sp, #40	@ 0x28
 8006188:	af02      	add	r7, sp, #8
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006190:	2300      	movs	r3, #0
 8006192:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006194:	f3ef 8305 	mrs	r3, IPSR
 8006198:	613b      	str	r3, [r7, #16]
  return(result);
 800619a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800619c:	2b00      	cmp	r3, #0
 800619e:	d15f      	bne.n	8006260 <osMessageQueueNew+0xdc>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d05c      	beq.n	8006260 <osMessageQueueNew+0xdc>
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d059      	beq.n	8006260 <osMessageQueueNew+0xdc>
    mem = -1;
 80061ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80061b0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d029      	beq.n	800620c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d012      	beq.n	80061e6 <osMessageQueueNew+0x62>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	2b4f      	cmp	r3, #79	@ 0x4f
 80061c6:	d90e      	bls.n	80061e6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00a      	beq.n	80061e6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	695a      	ldr	r2, [r3, #20]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	68b9      	ldr	r1, [r7, #8]
 80061d8:	fb01 f303 	mul.w	r3, r1, r3
 80061dc:	429a      	cmp	r2, r3
 80061de:	d302      	bcc.n	80061e6 <osMessageQueueNew+0x62>
        mem = 1;
 80061e0:	2301      	movs	r3, #1
 80061e2:	61bb      	str	r3, [r7, #24]
 80061e4:	e014      	b.n	8006210 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d110      	bne.n	8006210 <osMessageQueueNew+0x8c>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10c      	bne.n	8006210 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d108      	bne.n	8006210 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	695b      	ldr	r3, [r3, #20]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d104      	bne.n	8006210 <osMessageQueueNew+0x8c>
          mem = 0;
 8006206:	2300      	movs	r3, #0
 8006208:	61bb      	str	r3, [r7, #24]
 800620a:	e001      	b.n	8006210 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800620c:	2300      	movs	r3, #0
 800620e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	2b01      	cmp	r3, #1
 8006214:	d10b      	bne.n	800622e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	691a      	ldr	r2, [r3, #16]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	2100      	movs	r1, #0
 8006220:	9100      	str	r1, [sp, #0]
 8006222:	68b9      	ldr	r1, [r7, #8]
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f000 fa87 	bl	8006738 <xQueueGenericCreateStatic>
 800622a:	61f8      	str	r0, [r7, #28]
 800622c:	e008      	b.n	8006240 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d105      	bne.n	8006240 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006234:	2200      	movs	r2, #0
 8006236:	68b9      	ldr	r1, [r7, #8]
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f000 fafa 	bl	8006832 <xQueueGenericCreate>
 800623e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00c      	beq.n	8006260 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d003      	beq.n	8006254 <osMessageQueueNew+0xd0>
        name = attr->name;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	617b      	str	r3, [r7, #20]
 8006252:	e001      	b.n	8006258 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006254:	2300      	movs	r3, #0
 8006256:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006258:	6979      	ldr	r1, [r7, #20]
 800625a:	69f8      	ldr	r0, [r7, #28]
 800625c:	f000 ffbe 	bl	80071dc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006260:	69fb      	ldr	r3, [r7, #28]
}
 8006262:	4618      	mov	r0, r3
 8006264:	3720      	adds	r7, #32
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
	...

0800626c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800626c:	b580      	push	{r7, lr}
 800626e:	b088      	sub	sp, #32
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	603b      	str	r3, [r7, #0]
 8006278:	4613      	mov	r3, r2
 800627a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006280:	2300      	movs	r3, #0
 8006282:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006284:	f3ef 8305 	mrs	r3, IPSR
 8006288:	617b      	str	r3, [r7, #20]
  return(result);
 800628a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800628c:	2b00      	cmp	r3, #0
 800628e:	d028      	beq.n	80062e2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d005      	beq.n	80062a2 <osMessageQueuePut+0x36>
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d002      	beq.n	80062a2 <osMessageQueuePut+0x36>
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d003      	beq.n	80062aa <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80062a2:	f06f 0303 	mvn.w	r3, #3
 80062a6:	61fb      	str	r3, [r7, #28]
 80062a8:	e038      	b.n	800631c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80062aa:	2300      	movs	r3, #0
 80062ac:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80062ae:	f107 0210 	add.w	r2, r7, #16
 80062b2:	2300      	movs	r3, #0
 80062b4:	68b9      	ldr	r1, [r7, #8]
 80062b6:	69b8      	ldr	r0, [r7, #24]
 80062b8:	f000 fc1c 	bl	8006af4 <xQueueGenericSendFromISR>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d003      	beq.n	80062ca <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80062c2:	f06f 0302 	mvn.w	r3, #2
 80062c6:	61fb      	str	r3, [r7, #28]
 80062c8:	e028      	b.n	800631c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d025      	beq.n	800631c <osMessageQueuePut+0xb0>
 80062d0:	4b15      	ldr	r3, [pc, #84]	@ (8006328 <osMessageQueuePut+0xbc>)
 80062d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062d6:	601a      	str	r2, [r3, #0]
 80062d8:	f3bf 8f4f 	dsb	sy
 80062dc:	f3bf 8f6f 	isb	sy
 80062e0:	e01c      	b.n	800631c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d002      	beq.n	80062ee <osMessageQueuePut+0x82>
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d103      	bne.n	80062f6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80062ee:	f06f 0303 	mvn.w	r3, #3
 80062f2:	61fb      	str	r3, [r7, #28]
 80062f4:	e012      	b.n	800631c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80062f6:	2300      	movs	r3, #0
 80062f8:	683a      	ldr	r2, [r7, #0]
 80062fa:	68b9      	ldr	r1, [r7, #8]
 80062fc:	69b8      	ldr	r0, [r7, #24]
 80062fe:	f000 faf7 	bl	80068f0 <xQueueGenericSend>
 8006302:	4603      	mov	r3, r0
 8006304:	2b01      	cmp	r3, #1
 8006306:	d009      	beq.n	800631c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d003      	beq.n	8006316 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800630e:	f06f 0301 	mvn.w	r3, #1
 8006312:	61fb      	str	r3, [r7, #28]
 8006314:	e002      	b.n	800631c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006316:	f06f 0302 	mvn.w	r3, #2
 800631a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800631c:	69fb      	ldr	r3, [r7, #28]
}
 800631e:	4618      	mov	r0, r3
 8006320:	3720      	adds	r7, #32
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	e000ed04 	.word	0xe000ed04

0800632c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800632c:	b580      	push	{r7, lr}
 800632e:	b088      	sub	sp, #32
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	607a      	str	r2, [r7, #4]
 8006338:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800633e:	2300      	movs	r3, #0
 8006340:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006342:	f3ef 8305 	mrs	r3, IPSR
 8006346:	617b      	str	r3, [r7, #20]
  return(result);
 8006348:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800634a:	2b00      	cmp	r3, #0
 800634c:	d028      	beq.n	80063a0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d005      	beq.n	8006360 <osMessageQueueGet+0x34>
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d002      	beq.n	8006360 <osMessageQueueGet+0x34>
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d003      	beq.n	8006368 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006360:	f06f 0303 	mvn.w	r3, #3
 8006364:	61fb      	str	r3, [r7, #28]
 8006366:	e037      	b.n	80063d8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006368:	2300      	movs	r3, #0
 800636a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800636c:	f107 0310 	add.w	r3, r7, #16
 8006370:	461a      	mov	r2, r3
 8006372:	68b9      	ldr	r1, [r7, #8]
 8006374:	69b8      	ldr	r0, [r7, #24]
 8006376:	f000 fd3d 	bl	8006df4 <xQueueReceiveFromISR>
 800637a:	4603      	mov	r3, r0
 800637c:	2b01      	cmp	r3, #1
 800637e:	d003      	beq.n	8006388 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006380:	f06f 0302 	mvn.w	r3, #2
 8006384:	61fb      	str	r3, [r7, #28]
 8006386:	e027      	b.n	80063d8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d024      	beq.n	80063d8 <osMessageQueueGet+0xac>
 800638e:	4b15      	ldr	r3, [pc, #84]	@ (80063e4 <osMessageQueueGet+0xb8>)
 8006390:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006394:	601a      	str	r2, [r3, #0]
 8006396:	f3bf 8f4f 	dsb	sy
 800639a:	f3bf 8f6f 	isb	sy
 800639e:	e01b      	b.n	80063d8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d002      	beq.n	80063ac <osMessageQueueGet+0x80>
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d103      	bne.n	80063b4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80063ac:	f06f 0303 	mvn.w	r3, #3
 80063b0:	61fb      	str	r3, [r7, #28]
 80063b2:	e011      	b.n	80063d8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80063b4:	683a      	ldr	r2, [r7, #0]
 80063b6:	68b9      	ldr	r1, [r7, #8]
 80063b8:	69b8      	ldr	r0, [r7, #24]
 80063ba:	f000 fc39 	bl	8006c30 <xQueueReceive>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d009      	beq.n	80063d8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d003      	beq.n	80063d2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80063ca:	f06f 0301 	mvn.w	r3, #1
 80063ce:	61fb      	str	r3, [r7, #28]
 80063d0:	e002      	b.n	80063d8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80063d2:	f06f 0302 	mvn.w	r3, #2
 80063d6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80063d8:	69fb      	ldr	r3, [r7, #28]
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3720      	adds	r7, #32
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	e000ed04 	.word	0xe000ed04

080063e8 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b086      	sub	sp, #24
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d102      	bne.n	8006400 <osMessageQueueGetCount+0x18>
    count = 0U;
 80063fa:	2300      	movs	r3, #0
 80063fc:	617b      	str	r3, [r7, #20]
 80063fe:	e00e      	b.n	800641e <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006400:	f3ef 8305 	mrs	r3, IPSR
 8006404:	60fb      	str	r3, [r7, #12]
  return(result);
 8006406:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006408:	2b00      	cmp	r3, #0
 800640a:	d004      	beq.n	8006416 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800640c:	6938      	ldr	r0, [r7, #16]
 800640e:	f000 fdb6 	bl	8006f7e <uxQueueMessagesWaitingFromISR>
 8006412:	6178      	str	r0, [r7, #20]
 8006414:	e003      	b.n	800641e <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8006416:	6938      	ldr	r0, [r7, #16]
 8006418:	f000 fd6e 	bl	8006ef8 <uxQueueMessagesWaiting>
 800641c:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800641e:	697b      	ldr	r3, [r7, #20]
}
 8006420:	4618      	mov	r0, r3
 8006422:	3718      	adds	r7, #24
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <osMessageQueueGetSpace>:

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 8006428:	b580      	push	{r7, lr}
 800642a:	b08a      	sub	sp, #40	@ 0x28
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	623b      	str	r3, [r7, #32]
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 8006434:	6a3b      	ldr	r3, [r7, #32]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d102      	bne.n	8006440 <osMessageQueueGetSpace+0x18>
    space = 0U;
 800643a:	2300      	movs	r3, #0
 800643c:	627b      	str	r3, [r7, #36]	@ 0x24
 800643e:	e023      	b.n	8006488 <osMessageQueueGetSpace+0x60>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006440:	f3ef 8305 	mrs	r3, IPSR
 8006444:	61bb      	str	r3, [r7, #24]
  return(result);
 8006446:	69bb      	ldr	r3, [r7, #24]
  }
  else if (IS_IRQ()) {
 8006448:	2b00      	cmp	r3, #0
 800644a:	d019      	beq.n	8006480 <osMessageQueueGetSpace+0x58>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800644c:	f3ef 8211 	mrs	r2, BASEPRI
 8006450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006454:	f383 8811 	msr	BASEPRI, r3
 8006458:	f3bf 8f6f 	isb	sy
 800645c:	f3bf 8f4f 	dsb	sy
 8006460:	613a      	str	r2, [r7, #16]
 8006462:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006464:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 8006466:	61fb      	str	r3, [r7, #28]

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 8006468:	6a3b      	ldr	r3, [r7, #32]
 800646a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800646c:	6a3b      	ldr	r3, [r7, #32]
 800646e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006470:	1ad3      	subs	r3, r2, r3
 8006472:	627b      	str	r3, [r7, #36]	@ 0x24
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800647e:	e003      	b.n	8006488 <osMessageQueueGetSpace+0x60>

    taskEXIT_CRITICAL_FROM_ISR(isrm);
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 8006480:	6a38      	ldr	r0, [r7, #32]
 8006482:	f000 fd58 	bl	8006f36 <uxQueueSpacesAvailable>
 8006486:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  return (space);
 8006488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800648a:	4618      	mov	r0, r3
 800648c:	3728      	adds	r7, #40	@ 0x28
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
	...

08006494 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006494:	b480      	push	{r7}
 8006496:	b085      	sub	sp, #20
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	4a07      	ldr	r2, [pc, #28]	@ (80064c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80064a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	4a06      	ldr	r2, [pc, #24]	@ (80064c4 <vApplicationGetIdleTaskMemory+0x30>)
 80064aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2280      	movs	r2, #128	@ 0x80
 80064b0:	601a      	str	r2, [r3, #0]
}
 80064b2:	bf00      	nop
 80064b4:	3714      	adds	r7, #20
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	200009cc 	.word	0x200009cc
 80064c4:	20000a74 	.word	0x20000a74

080064c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80064c8:	b480      	push	{r7}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	4a07      	ldr	r2, [pc, #28]	@ (80064f4 <vApplicationGetTimerTaskMemory+0x2c>)
 80064d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	4a06      	ldr	r2, [pc, #24]	@ (80064f8 <vApplicationGetTimerTaskMemory+0x30>)
 80064de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80064e6:	601a      	str	r2, [r3, #0]
}
 80064e8:	bf00      	nop
 80064ea:	3714      	adds	r7, #20
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr
 80064f4:	20000c74 	.word	0x20000c74
 80064f8:	20000d1c 	.word	0x20000d1c

080064fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f103 0208 	add.w	r2, r3, #8
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006514:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f103 0208 	add.w	r2, r3, #8
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f103 0208 	add.w	r2, r3, #8
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006530:	bf00      	nop
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800654a:	bf00      	nop
 800654c:	370c      	adds	r7, #12
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr

08006556 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006556:	b480      	push	{r7}
 8006558:	b085      	sub	sp, #20
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
 800655e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	689a      	ldr	r2, [r3, #8]
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	683a      	ldr	r2, [r7, #0]
 800657a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	683a      	ldr	r2, [r7, #0]
 8006580:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	1c5a      	adds	r2, r3, #1
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	601a      	str	r2, [r3, #0]
}
 8006592:	bf00      	nop
 8006594:	3714      	adds	r7, #20
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr

0800659e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800659e:	b480      	push	{r7}
 80065a0:	b085      	sub	sp, #20
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
 80065a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80065b4:	d103      	bne.n	80065be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	60fb      	str	r3, [r7, #12]
 80065bc:	e00c      	b.n	80065d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	3308      	adds	r3, #8
 80065c2:	60fb      	str	r3, [r7, #12]
 80065c4:	e002      	b.n	80065cc <vListInsert+0x2e>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	60fb      	str	r3, [r7, #12]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68ba      	ldr	r2, [r7, #8]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d2f6      	bcs.n	80065c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	685a      	ldr	r2, [r3, #4]
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	683a      	ldr	r2, [r7, #0]
 80065e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	68fa      	ldr	r2, [r7, #12]
 80065ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	683a      	ldr	r2, [r7, #0]
 80065f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	1c5a      	adds	r2, r3, #1
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	601a      	str	r2, [r3, #0]
}
 8006604:	bf00      	nop
 8006606:	3714      	adds	r7, #20
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006610:	b480      	push	{r7}
 8006612:	b085      	sub	sp, #20
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	6892      	ldr	r2, [r2, #8]
 8006626:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	6852      	ldr	r2, [r2, #4]
 8006630:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	429a      	cmp	r2, r3
 800663a:	d103      	bne.n	8006644 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	689a      	ldr	r2, [r3, #8]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	1e5a      	subs	r2, r3, #1
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
}
 8006658:	4618      	mov	r0, r3
 800665a:	3714      	adds	r7, #20
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d10b      	bne.n	8006690 <xQueueGenericReset+0x2c>
	__asm volatile
 8006678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800667c:	f383 8811 	msr	BASEPRI, r3
 8006680:	f3bf 8f6f 	isb	sy
 8006684:	f3bf 8f4f 	dsb	sy
 8006688:	60bb      	str	r3, [r7, #8]
}
 800668a:	bf00      	nop
 800668c:	bf00      	nop
 800668e:	e7fd      	b.n	800668c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006690:	f002 f9a2 	bl	80089d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800669c:	68f9      	ldr	r1, [r7, #12]
 800669e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80066a0:	fb01 f303 	mul.w	r3, r1, r3
 80066a4:	441a      	add	r2, r3
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066c0:	3b01      	subs	r3, #1
 80066c2:	68f9      	ldr	r1, [r7, #12]
 80066c4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80066c6:	fb01 f303 	mul.w	r3, r1, r3
 80066ca:	441a      	add	r2, r3
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	22ff      	movs	r2, #255	@ 0xff
 80066d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	22ff      	movs	r2, #255	@ 0xff
 80066dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d114      	bne.n	8006710 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d01a      	beq.n	8006724 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	3310      	adds	r3, #16
 80066f2:	4618      	mov	r0, r3
 80066f4:	f001 fa3e 	bl	8007b74 <xTaskRemoveFromEventList>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d012      	beq.n	8006724 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80066fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006734 <xQueueGenericReset+0xd0>)
 8006700:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006704:	601a      	str	r2, [r3, #0]
 8006706:	f3bf 8f4f 	dsb	sy
 800670a:	f3bf 8f6f 	isb	sy
 800670e:	e009      	b.n	8006724 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	3310      	adds	r3, #16
 8006714:	4618      	mov	r0, r3
 8006716:	f7ff fef1 	bl	80064fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	3324      	adds	r3, #36	@ 0x24
 800671e:	4618      	mov	r0, r3
 8006720:	f7ff feec 	bl	80064fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006724:	f002 f98a 	bl	8008a3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006728:	2301      	movs	r3, #1
}
 800672a:	4618      	mov	r0, r3
 800672c:	3710      	adds	r7, #16
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop
 8006734:	e000ed04 	.word	0xe000ed04

08006738 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006738:	b580      	push	{r7, lr}
 800673a:	b08e      	sub	sp, #56	@ 0x38
 800673c:	af02      	add	r7, sp, #8
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	607a      	str	r2, [r7, #4]
 8006744:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d10b      	bne.n	8006764 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800674c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006750:	f383 8811 	msr	BASEPRI, r3
 8006754:	f3bf 8f6f 	isb	sy
 8006758:	f3bf 8f4f 	dsb	sy
 800675c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800675e:	bf00      	nop
 8006760:	bf00      	nop
 8006762:	e7fd      	b.n	8006760 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d10b      	bne.n	8006782 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800676a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800676e:	f383 8811 	msr	BASEPRI, r3
 8006772:	f3bf 8f6f 	isb	sy
 8006776:	f3bf 8f4f 	dsb	sy
 800677a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800677c:	bf00      	nop
 800677e:	bf00      	nop
 8006780:	e7fd      	b.n	800677e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d002      	beq.n	800678e <xQueueGenericCreateStatic+0x56>
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d001      	beq.n	8006792 <xQueueGenericCreateStatic+0x5a>
 800678e:	2301      	movs	r3, #1
 8006790:	e000      	b.n	8006794 <xQueueGenericCreateStatic+0x5c>
 8006792:	2300      	movs	r3, #0
 8006794:	2b00      	cmp	r3, #0
 8006796:	d10b      	bne.n	80067b0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800679c:	f383 8811 	msr	BASEPRI, r3
 80067a0:	f3bf 8f6f 	isb	sy
 80067a4:	f3bf 8f4f 	dsb	sy
 80067a8:	623b      	str	r3, [r7, #32]
}
 80067aa:	bf00      	nop
 80067ac:	bf00      	nop
 80067ae:	e7fd      	b.n	80067ac <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d102      	bne.n	80067bc <xQueueGenericCreateStatic+0x84>
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d101      	bne.n	80067c0 <xQueueGenericCreateStatic+0x88>
 80067bc:	2301      	movs	r3, #1
 80067be:	e000      	b.n	80067c2 <xQueueGenericCreateStatic+0x8a>
 80067c0:	2300      	movs	r3, #0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d10b      	bne.n	80067de <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80067c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ca:	f383 8811 	msr	BASEPRI, r3
 80067ce:	f3bf 8f6f 	isb	sy
 80067d2:	f3bf 8f4f 	dsb	sy
 80067d6:	61fb      	str	r3, [r7, #28]
}
 80067d8:	bf00      	nop
 80067da:	bf00      	nop
 80067dc:	e7fd      	b.n	80067da <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80067de:	2350      	movs	r3, #80	@ 0x50
 80067e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	2b50      	cmp	r3, #80	@ 0x50
 80067e6:	d00b      	beq.n	8006800 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80067e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ec:	f383 8811 	msr	BASEPRI, r3
 80067f0:	f3bf 8f6f 	isb	sy
 80067f4:	f3bf 8f4f 	dsb	sy
 80067f8:	61bb      	str	r3, [r7, #24]
}
 80067fa:	bf00      	nop
 80067fc:	bf00      	nop
 80067fe:	e7fd      	b.n	80067fc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006800:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006808:	2b00      	cmp	r3, #0
 800680a:	d00d      	beq.n	8006828 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800680c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800680e:	2201      	movs	r2, #1
 8006810:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006814:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800681a:	9300      	str	r3, [sp, #0]
 800681c:	4613      	mov	r3, r2
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	68b9      	ldr	r1, [r7, #8]
 8006822:	68f8      	ldr	r0, [r7, #12]
 8006824:	f000 f840 	bl	80068a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800682a:	4618      	mov	r0, r3
 800682c:	3730      	adds	r7, #48	@ 0x30
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}

08006832 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006832:	b580      	push	{r7, lr}
 8006834:	b08a      	sub	sp, #40	@ 0x28
 8006836:	af02      	add	r7, sp, #8
 8006838:	60f8      	str	r0, [r7, #12]
 800683a:	60b9      	str	r1, [r7, #8]
 800683c:	4613      	mov	r3, r2
 800683e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d10b      	bne.n	800685e <xQueueGenericCreate+0x2c>
	__asm volatile
 8006846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800684a:	f383 8811 	msr	BASEPRI, r3
 800684e:	f3bf 8f6f 	isb	sy
 8006852:	f3bf 8f4f 	dsb	sy
 8006856:	613b      	str	r3, [r7, #16]
}
 8006858:	bf00      	nop
 800685a:	bf00      	nop
 800685c:	e7fd      	b.n	800685a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	68ba      	ldr	r2, [r7, #8]
 8006862:	fb02 f303 	mul.w	r3, r2, r3
 8006866:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	3350      	adds	r3, #80	@ 0x50
 800686c:	4618      	mov	r0, r3
 800686e:	f002 f9d5 	bl	8008c1c <pvPortMalloc>
 8006872:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d011      	beq.n	800689e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	3350      	adds	r3, #80	@ 0x50
 8006882:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	2200      	movs	r2, #0
 8006888:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800688c:	79fa      	ldrb	r2, [r7, #7]
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	9300      	str	r3, [sp, #0]
 8006892:	4613      	mov	r3, r2
 8006894:	697a      	ldr	r2, [r7, #20]
 8006896:	68b9      	ldr	r1, [r7, #8]
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f000 f805 	bl	80068a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800689e:	69bb      	ldr	r3, [r7, #24]
	}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3720      	adds	r7, #32
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	607a      	str	r2, [r7, #4]
 80068b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d103      	bne.n	80068c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80068bc:	69bb      	ldr	r3, [r7, #24]
 80068be:	69ba      	ldr	r2, [r7, #24]
 80068c0:	601a      	str	r2, [r3, #0]
 80068c2:	e002      	b.n	80068ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80068c4:	69bb      	ldr	r3, [r7, #24]
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80068ca:	69bb      	ldr	r3, [r7, #24]
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	68ba      	ldr	r2, [r7, #8]
 80068d4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80068d6:	2101      	movs	r1, #1
 80068d8:	69b8      	ldr	r0, [r7, #24]
 80068da:	f7ff fec3 	bl	8006664 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	78fa      	ldrb	r2, [r7, #3]
 80068e2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80068e6:	bf00      	nop
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
	...

080068f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b08e      	sub	sp, #56	@ 0x38
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	607a      	str	r2, [r7, #4]
 80068fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80068fe:	2300      	movs	r3, #0
 8006900:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006908:	2b00      	cmp	r3, #0
 800690a:	d10b      	bne.n	8006924 <xQueueGenericSend+0x34>
	__asm volatile
 800690c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006910:	f383 8811 	msr	BASEPRI, r3
 8006914:	f3bf 8f6f 	isb	sy
 8006918:	f3bf 8f4f 	dsb	sy
 800691c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800691e:	bf00      	nop
 8006920:	bf00      	nop
 8006922:	e7fd      	b.n	8006920 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d103      	bne.n	8006932 <xQueueGenericSend+0x42>
 800692a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800692c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800692e:	2b00      	cmp	r3, #0
 8006930:	d101      	bne.n	8006936 <xQueueGenericSend+0x46>
 8006932:	2301      	movs	r3, #1
 8006934:	e000      	b.n	8006938 <xQueueGenericSend+0x48>
 8006936:	2300      	movs	r3, #0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d10b      	bne.n	8006954 <xQueueGenericSend+0x64>
	__asm volatile
 800693c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006940:	f383 8811 	msr	BASEPRI, r3
 8006944:	f3bf 8f6f 	isb	sy
 8006948:	f3bf 8f4f 	dsb	sy
 800694c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800694e:	bf00      	nop
 8006950:	bf00      	nop
 8006952:	e7fd      	b.n	8006950 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	2b02      	cmp	r3, #2
 8006958:	d103      	bne.n	8006962 <xQueueGenericSend+0x72>
 800695a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800695c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800695e:	2b01      	cmp	r3, #1
 8006960:	d101      	bne.n	8006966 <xQueueGenericSend+0x76>
 8006962:	2301      	movs	r3, #1
 8006964:	e000      	b.n	8006968 <xQueueGenericSend+0x78>
 8006966:	2300      	movs	r3, #0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d10b      	bne.n	8006984 <xQueueGenericSend+0x94>
	__asm volatile
 800696c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006970:	f383 8811 	msr	BASEPRI, r3
 8006974:	f3bf 8f6f 	isb	sy
 8006978:	f3bf 8f4f 	dsb	sy
 800697c:	623b      	str	r3, [r7, #32]
}
 800697e:	bf00      	nop
 8006980:	bf00      	nop
 8006982:	e7fd      	b.n	8006980 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006984:	f001 fabc 	bl	8007f00 <xTaskGetSchedulerState>
 8006988:	4603      	mov	r3, r0
 800698a:	2b00      	cmp	r3, #0
 800698c:	d102      	bne.n	8006994 <xQueueGenericSend+0xa4>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d101      	bne.n	8006998 <xQueueGenericSend+0xa8>
 8006994:	2301      	movs	r3, #1
 8006996:	e000      	b.n	800699a <xQueueGenericSend+0xaa>
 8006998:	2300      	movs	r3, #0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d10b      	bne.n	80069b6 <xQueueGenericSend+0xc6>
	__asm volatile
 800699e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069a2:	f383 8811 	msr	BASEPRI, r3
 80069a6:	f3bf 8f6f 	isb	sy
 80069aa:	f3bf 8f4f 	dsb	sy
 80069ae:	61fb      	str	r3, [r7, #28]
}
 80069b0:	bf00      	nop
 80069b2:	bf00      	nop
 80069b4:	e7fd      	b.n	80069b2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80069b6:	f002 f80f 	bl	80089d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80069ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d302      	bcc.n	80069cc <xQueueGenericSend+0xdc>
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	2b02      	cmp	r3, #2
 80069ca:	d129      	bne.n	8006a20 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80069cc:	683a      	ldr	r2, [r7, #0]
 80069ce:	68b9      	ldr	r1, [r7, #8]
 80069d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80069d2:	f000 faf3 	bl	8006fbc <prvCopyDataToQueue>
 80069d6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d010      	beq.n	8006a02 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e2:	3324      	adds	r3, #36	@ 0x24
 80069e4:	4618      	mov	r0, r3
 80069e6:	f001 f8c5 	bl	8007b74 <xTaskRemoveFromEventList>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d013      	beq.n	8006a18 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80069f0:	4b3f      	ldr	r3, [pc, #252]	@ (8006af0 <xQueueGenericSend+0x200>)
 80069f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069f6:	601a      	str	r2, [r3, #0]
 80069f8:	f3bf 8f4f 	dsb	sy
 80069fc:	f3bf 8f6f 	isb	sy
 8006a00:	e00a      	b.n	8006a18 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d007      	beq.n	8006a18 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006a08:	4b39      	ldr	r3, [pc, #228]	@ (8006af0 <xQueueGenericSend+0x200>)
 8006a0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a0e:	601a      	str	r2, [r3, #0]
 8006a10:	f3bf 8f4f 	dsb	sy
 8006a14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006a18:	f002 f810 	bl	8008a3c <vPortExitCritical>
				return pdPASS;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e063      	b.n	8006ae8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d103      	bne.n	8006a2e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a26:	f002 f809 	bl	8008a3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	e05c      	b.n	8006ae8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d106      	bne.n	8006a42 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a34:	f107 0314 	add.w	r3, r7, #20
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f001 f8ff 	bl	8007c3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a42:	f001 fffb 	bl	8008a3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a46:	f000 fe55 	bl	80076f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a4a:	f001 ffc5 	bl	80089d8 <vPortEnterCritical>
 8006a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006a54:	b25b      	sxtb	r3, r3
 8006a56:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a5a:	d103      	bne.n	8006a64 <xQueueGenericSend+0x174>
 8006a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a66:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a6a:	b25b      	sxtb	r3, r3
 8006a6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a70:	d103      	bne.n	8006a7a <xQueueGenericSend+0x18a>
 8006a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a7a:	f001 ffdf 	bl	8008a3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a7e:	1d3a      	adds	r2, r7, #4
 8006a80:	f107 0314 	add.w	r3, r7, #20
 8006a84:	4611      	mov	r1, r2
 8006a86:	4618      	mov	r0, r3
 8006a88:	f001 f8ee 	bl	8007c68 <xTaskCheckForTimeOut>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d124      	bne.n	8006adc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006a92:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a94:	f000 fb8a 	bl	80071ac <prvIsQueueFull>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d018      	beq.n	8006ad0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa0:	3310      	adds	r3, #16
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	4611      	mov	r1, r2
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f001 f812 	bl	8007ad0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006aac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006aae:	f000 fb15 	bl	80070dc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006ab2:	f000 fe2d 	bl	8007710 <xTaskResumeAll>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f47f af7c 	bne.w	80069b6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006abe:	4b0c      	ldr	r3, [pc, #48]	@ (8006af0 <xQueueGenericSend+0x200>)
 8006ac0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ac4:	601a      	str	r2, [r3, #0]
 8006ac6:	f3bf 8f4f 	dsb	sy
 8006aca:	f3bf 8f6f 	isb	sy
 8006ace:	e772      	b.n	80069b6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006ad0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006ad2:	f000 fb03 	bl	80070dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ad6:	f000 fe1b 	bl	8007710 <xTaskResumeAll>
 8006ada:	e76c      	b.n	80069b6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006adc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006ade:	f000 fafd 	bl	80070dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ae2:	f000 fe15 	bl	8007710 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006ae6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3738      	adds	r7, #56	@ 0x38
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	e000ed04 	.word	0xe000ed04

08006af4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b090      	sub	sp, #64	@ 0x40
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	607a      	str	r2, [r7, #4]
 8006b00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d10b      	bne.n	8006b24 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b10:	f383 8811 	msr	BASEPRI, r3
 8006b14:	f3bf 8f6f 	isb	sy
 8006b18:	f3bf 8f4f 	dsb	sy
 8006b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006b1e:	bf00      	nop
 8006b20:	bf00      	nop
 8006b22:	e7fd      	b.n	8006b20 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d103      	bne.n	8006b32 <xQueueGenericSendFromISR+0x3e>
 8006b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d101      	bne.n	8006b36 <xQueueGenericSendFromISR+0x42>
 8006b32:	2301      	movs	r3, #1
 8006b34:	e000      	b.n	8006b38 <xQueueGenericSendFromISR+0x44>
 8006b36:	2300      	movs	r3, #0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d10b      	bne.n	8006b54 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b40:	f383 8811 	msr	BASEPRI, r3
 8006b44:	f3bf 8f6f 	isb	sy
 8006b48:	f3bf 8f4f 	dsb	sy
 8006b4c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006b4e:	bf00      	nop
 8006b50:	bf00      	nop
 8006b52:	e7fd      	b.n	8006b50 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	d103      	bne.n	8006b62 <xQueueGenericSendFromISR+0x6e>
 8006b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d101      	bne.n	8006b66 <xQueueGenericSendFromISR+0x72>
 8006b62:	2301      	movs	r3, #1
 8006b64:	e000      	b.n	8006b68 <xQueueGenericSendFromISR+0x74>
 8006b66:	2300      	movs	r3, #0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d10b      	bne.n	8006b84 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b70:	f383 8811 	msr	BASEPRI, r3
 8006b74:	f3bf 8f6f 	isb	sy
 8006b78:	f3bf 8f4f 	dsb	sy
 8006b7c:	623b      	str	r3, [r7, #32]
}
 8006b7e:	bf00      	nop
 8006b80:	bf00      	nop
 8006b82:	e7fd      	b.n	8006b80 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b84:	f002 f808 	bl	8008b98 <vPortValidateInterruptPriority>
	__asm volatile
 8006b88:	f3ef 8211 	mrs	r2, BASEPRI
 8006b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b90:	f383 8811 	msr	BASEPRI, r3
 8006b94:	f3bf 8f6f 	isb	sy
 8006b98:	f3bf 8f4f 	dsb	sy
 8006b9c:	61fa      	str	r2, [r7, #28]
 8006b9e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8006ba0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ba2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006baa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d302      	bcc.n	8006bb6 <xQueueGenericSendFromISR+0xc2>
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d12f      	bne.n	8006c16 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bb8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006bbc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006bc6:	683a      	ldr	r2, [r7, #0]
 8006bc8:	68b9      	ldr	r1, [r7, #8]
 8006bca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006bcc:	f000 f9f6 	bl	8006fbc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006bd0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006bd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006bd8:	d112      	bne.n	8006c00 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d016      	beq.n	8006c10 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006be4:	3324      	adds	r3, #36	@ 0x24
 8006be6:	4618      	mov	r0, r3
 8006be8:	f000 ffc4 	bl	8007b74 <xTaskRemoveFromEventList>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00e      	beq.n	8006c10 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d00b      	beq.n	8006c10 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	601a      	str	r2, [r3, #0]
 8006bfe:	e007      	b.n	8006c10 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006c00:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006c04:	3301      	adds	r3, #1
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	b25a      	sxtb	r2, r3
 8006c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006c10:	2301      	movs	r3, #1
 8006c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006c14:	e001      	b.n	8006c1a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006c16:	2300      	movs	r3, #0
 8006c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c1c:	617b      	str	r3, [r7, #20]
	__asm volatile
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	f383 8811 	msr	BASEPRI, r3
}
 8006c24:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3740      	adds	r7, #64	@ 0x40
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b08c      	sub	sp, #48	@ 0x30
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	60b9      	str	r1, [r7, #8]
 8006c3a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d10b      	bne.n	8006c62 <xQueueReceive+0x32>
	__asm volatile
 8006c4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c4e:	f383 8811 	msr	BASEPRI, r3
 8006c52:	f3bf 8f6f 	isb	sy
 8006c56:	f3bf 8f4f 	dsb	sy
 8006c5a:	623b      	str	r3, [r7, #32]
}
 8006c5c:	bf00      	nop
 8006c5e:	bf00      	nop
 8006c60:	e7fd      	b.n	8006c5e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d103      	bne.n	8006c70 <xQueueReceive+0x40>
 8006c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d101      	bne.n	8006c74 <xQueueReceive+0x44>
 8006c70:	2301      	movs	r3, #1
 8006c72:	e000      	b.n	8006c76 <xQueueReceive+0x46>
 8006c74:	2300      	movs	r3, #0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d10b      	bne.n	8006c92 <xQueueReceive+0x62>
	__asm volatile
 8006c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c7e:	f383 8811 	msr	BASEPRI, r3
 8006c82:	f3bf 8f6f 	isb	sy
 8006c86:	f3bf 8f4f 	dsb	sy
 8006c8a:	61fb      	str	r3, [r7, #28]
}
 8006c8c:	bf00      	nop
 8006c8e:	bf00      	nop
 8006c90:	e7fd      	b.n	8006c8e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c92:	f001 f935 	bl	8007f00 <xTaskGetSchedulerState>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d102      	bne.n	8006ca2 <xQueueReceive+0x72>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d101      	bne.n	8006ca6 <xQueueReceive+0x76>
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e000      	b.n	8006ca8 <xQueueReceive+0x78>
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d10b      	bne.n	8006cc4 <xQueueReceive+0x94>
	__asm volatile
 8006cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cb0:	f383 8811 	msr	BASEPRI, r3
 8006cb4:	f3bf 8f6f 	isb	sy
 8006cb8:	f3bf 8f4f 	dsb	sy
 8006cbc:	61bb      	str	r3, [r7, #24]
}
 8006cbe:	bf00      	nop
 8006cc0:	bf00      	nop
 8006cc2:	e7fd      	b.n	8006cc0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006cc4:	f001 fe88 	bl	80089d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ccc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d01f      	beq.n	8006d14 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006cd4:	68b9      	ldr	r1, [r7, #8]
 8006cd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006cd8:	f000 f9da 	bl	8007090 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cde:	1e5a      	subs	r2, r3, #1
 8006ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ce2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00f      	beq.n	8006d0c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cee:	3310      	adds	r3, #16
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f000 ff3f 	bl	8007b74 <xTaskRemoveFromEventList>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d007      	beq.n	8006d0c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006cfc:	4b3c      	ldr	r3, [pc, #240]	@ (8006df0 <xQueueReceive+0x1c0>)
 8006cfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d02:	601a      	str	r2, [r3, #0]
 8006d04:	f3bf 8f4f 	dsb	sy
 8006d08:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006d0c:	f001 fe96 	bl	8008a3c <vPortExitCritical>
				return pdPASS;
 8006d10:	2301      	movs	r3, #1
 8006d12:	e069      	b.n	8006de8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d103      	bne.n	8006d22 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d1a:	f001 fe8f 	bl	8008a3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	e062      	b.n	8006de8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d106      	bne.n	8006d36 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d28:	f107 0310 	add.w	r3, r7, #16
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f000 ff85 	bl	8007c3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d32:	2301      	movs	r3, #1
 8006d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d36:	f001 fe81 	bl	8008a3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d3a:	f000 fcdb 	bl	80076f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d3e:	f001 fe4b 	bl	80089d8 <vPortEnterCritical>
 8006d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006d48:	b25b      	sxtb	r3, r3
 8006d4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006d4e:	d103      	bne.n	8006d58 <xQueueReceive+0x128>
 8006d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d52:	2200      	movs	r2, #0
 8006d54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d5a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006d5e:	b25b      	sxtb	r3, r3
 8006d60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006d64:	d103      	bne.n	8006d6e <xQueueReceive+0x13e>
 8006d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006d6e:	f001 fe65 	bl	8008a3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d72:	1d3a      	adds	r2, r7, #4
 8006d74:	f107 0310 	add.w	r3, r7, #16
 8006d78:	4611      	mov	r1, r2
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f000 ff74 	bl	8007c68 <xTaskCheckForTimeOut>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d123      	bne.n	8006dce <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d88:	f000 f9fa 	bl	8007180 <prvIsQueueEmpty>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d017      	beq.n	8006dc2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d94:	3324      	adds	r3, #36	@ 0x24
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	4611      	mov	r1, r2
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f000 fe98 	bl	8007ad0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006da0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006da2:	f000 f99b 	bl	80070dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006da6:	f000 fcb3 	bl	8007710 <xTaskResumeAll>
 8006daa:	4603      	mov	r3, r0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d189      	bne.n	8006cc4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006db0:	4b0f      	ldr	r3, [pc, #60]	@ (8006df0 <xQueueReceive+0x1c0>)
 8006db2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006db6:	601a      	str	r2, [r3, #0]
 8006db8:	f3bf 8f4f 	dsb	sy
 8006dbc:	f3bf 8f6f 	isb	sy
 8006dc0:	e780      	b.n	8006cc4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006dc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006dc4:	f000 f98a 	bl	80070dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006dc8:	f000 fca2 	bl	8007710 <xTaskResumeAll>
 8006dcc:	e77a      	b.n	8006cc4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006dce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006dd0:	f000 f984 	bl	80070dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006dd4:	f000 fc9c 	bl	8007710 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006dd8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006dda:	f000 f9d1 	bl	8007180 <prvIsQueueEmpty>
 8006dde:	4603      	mov	r3, r0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f43f af6f 	beq.w	8006cc4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006de6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3730      	adds	r7, #48	@ 0x30
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	e000ed04 	.word	0xe000ed04

08006df4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b08e      	sub	sp, #56	@ 0x38
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	60b9      	str	r1, [r7, #8]
 8006dfe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d10b      	bne.n	8006e22 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006e0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e0e:	f383 8811 	msr	BASEPRI, r3
 8006e12:	f3bf 8f6f 	isb	sy
 8006e16:	f3bf 8f4f 	dsb	sy
 8006e1a:	623b      	str	r3, [r7, #32]
}
 8006e1c:	bf00      	nop
 8006e1e:	bf00      	nop
 8006e20:	e7fd      	b.n	8006e1e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d103      	bne.n	8006e30 <xQueueReceiveFromISR+0x3c>
 8006e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d101      	bne.n	8006e34 <xQueueReceiveFromISR+0x40>
 8006e30:	2301      	movs	r3, #1
 8006e32:	e000      	b.n	8006e36 <xQueueReceiveFromISR+0x42>
 8006e34:	2300      	movs	r3, #0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d10b      	bne.n	8006e52 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8006e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e3e:	f383 8811 	msr	BASEPRI, r3
 8006e42:	f3bf 8f6f 	isb	sy
 8006e46:	f3bf 8f4f 	dsb	sy
 8006e4a:	61fb      	str	r3, [r7, #28]
}
 8006e4c:	bf00      	nop
 8006e4e:	bf00      	nop
 8006e50:	e7fd      	b.n	8006e4e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e52:	f001 fea1 	bl	8008b98 <vPortValidateInterruptPriority>
	__asm volatile
 8006e56:	f3ef 8211 	mrs	r2, BASEPRI
 8006e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e5e:	f383 8811 	msr	BASEPRI, r3
 8006e62:	f3bf 8f6f 	isb	sy
 8006e66:	f3bf 8f4f 	dsb	sy
 8006e6a:	61ba      	str	r2, [r7, #24]
 8006e6c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006e6e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e76:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d02f      	beq.n	8006ede <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006e84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006e88:	68b9      	ldr	r1, [r7, #8]
 8006e8a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e8c:	f000 f900 	bl	8007090 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e92:	1e5a      	subs	r2, r3, #1
 8006e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e96:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006e98:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006e9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006ea0:	d112      	bne.n	8006ec8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d016      	beq.n	8006ed8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eac:	3310      	adds	r3, #16
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f000 fe60 	bl	8007b74 <xTaskRemoveFromEventList>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d00e      	beq.n	8006ed8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00b      	beq.n	8006ed8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	601a      	str	r2, [r3, #0]
 8006ec6:	e007      	b.n	8006ed8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006ec8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ecc:	3301      	adds	r3, #1
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	b25a      	sxtb	r2, r3
 8006ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	637b      	str	r3, [r7, #52]	@ 0x34
 8006edc:	e001      	b.n	8006ee2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ee4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	f383 8811 	msr	BASEPRI, r3
}
 8006eec:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3738      	adds	r7, #56	@ 0x38
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d10b      	bne.n	8006f1e <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8006f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f0a:	f383 8811 	msr	BASEPRI, r3
 8006f0e:	f3bf 8f6f 	isb	sy
 8006f12:	f3bf 8f4f 	dsb	sy
 8006f16:	60bb      	str	r3, [r7, #8]
}
 8006f18:	bf00      	nop
 8006f1a:	bf00      	nop
 8006f1c:	e7fd      	b.n	8006f1a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8006f1e:	f001 fd5b 	bl	80089d8 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f26:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006f28:	f001 fd88 	bl	8008a3c <vPortExitCritical>

	return uxReturn;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3710      	adds	r7, #16
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}

08006f36 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8006f36:	b580      	push	{r7, lr}
 8006f38:	b086      	sub	sp, #24
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d10b      	bne.n	8006f60 <uxQueueSpacesAvailable+0x2a>
	__asm volatile
 8006f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f4c:	f383 8811 	msr	BASEPRI, r3
 8006f50:	f3bf 8f6f 	isb	sy
 8006f54:	f3bf 8f4f 	dsb	sy
 8006f58:	60fb      	str	r3, [r7, #12]
}
 8006f5a:	bf00      	nop
 8006f5c:	bf00      	nop
 8006f5e:	e7fd      	b.n	8006f5c <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 8006f60:	f001 fd3a 	bl	80089d8 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f6c:	1ad3      	subs	r3, r2, r3
 8006f6e:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8006f70:	f001 fd64 	bl	8008a3c <vPortExitCritical>

	return uxReturn;
 8006f74:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006f76:	4618      	mov	r0, r3
 8006f78:	3718      	adds	r7, #24
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8006f7e:	b480      	push	{r7}
 8006f80:	b087      	sub	sp, #28
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d10b      	bne.n	8006fa8 <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 8006f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f94:	f383 8811 	msr	BASEPRI, r3
 8006f98:	f3bf 8f6f 	isb	sy
 8006f9c:	f3bf 8f4f 	dsb	sy
 8006fa0:	60fb      	str	r3, [r7, #12]
}
 8006fa2:	bf00      	nop
 8006fa4:	bf00      	nop
 8006fa6:	e7fd      	b.n	8006fa4 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fac:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8006fae:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	371c      	adds	r7, #28
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b086      	sub	sp, #24
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fd0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d10d      	bne.n	8006ff6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d14d      	bne.n	800707e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f000 ffa8 	bl	8007f3c <xTaskPriorityDisinherit>
 8006fec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	609a      	str	r2, [r3, #8]
 8006ff4:	e043      	b.n	800707e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d119      	bne.n	8007030 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6858      	ldr	r0, [r3, #4]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007004:	461a      	mov	r2, r3
 8007006:	68b9      	ldr	r1, [r7, #8]
 8007008:	f002 f8b4 	bl	8009174 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	685a      	ldr	r2, [r3, #4]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007014:	441a      	add	r2, r3
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	685a      	ldr	r2, [r3, #4]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	429a      	cmp	r2, r3
 8007024:	d32b      	bcc.n	800707e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	605a      	str	r2, [r3, #4]
 800702e:	e026      	b.n	800707e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	68d8      	ldr	r0, [r3, #12]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007038:	461a      	mov	r2, r3
 800703a:	68b9      	ldr	r1, [r7, #8]
 800703c:	f002 f89a 	bl	8009174 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	68da      	ldr	r2, [r3, #12]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007048:	425b      	negs	r3, r3
 800704a:	441a      	add	r2, r3
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	68da      	ldr	r2, [r3, #12]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	429a      	cmp	r2, r3
 800705a:	d207      	bcs.n	800706c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	689a      	ldr	r2, [r3, #8]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007064:	425b      	negs	r3, r3
 8007066:	441a      	add	r2, r3
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2b02      	cmp	r3, #2
 8007070:	d105      	bne.n	800707e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d002      	beq.n	800707e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	3b01      	subs	r3, #1
 800707c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	1c5a      	adds	r2, r3, #1
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007086:	697b      	ldr	r3, [r7, #20]
}
 8007088:	4618      	mov	r0, r3
 800708a:	3718      	adds	r7, #24
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d018      	beq.n	80070d4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	68da      	ldr	r2, [r3, #12]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070aa:	441a      	add	r2, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	68da      	ldr	r2, [r3, #12]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d303      	bcc.n	80070c4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	68d9      	ldr	r1, [r3, #12]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070cc:	461a      	mov	r2, r3
 80070ce:	6838      	ldr	r0, [r7, #0]
 80070d0:	f002 f850 	bl	8009174 <memcpy>
	}
}
 80070d4:	bf00      	nop
 80070d6:	3708      	adds	r7, #8
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80070e4:	f001 fc78 	bl	80089d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80070ee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80070f0:	e011      	b.n	8007116 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d012      	beq.n	8007120 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	3324      	adds	r3, #36	@ 0x24
 80070fe:	4618      	mov	r0, r3
 8007100:	f000 fd38 	bl	8007b74 <xTaskRemoveFromEventList>
 8007104:	4603      	mov	r3, r0
 8007106:	2b00      	cmp	r3, #0
 8007108:	d001      	beq.n	800710e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800710a:	f000 fe11 	bl	8007d30 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800710e:	7bfb      	ldrb	r3, [r7, #15]
 8007110:	3b01      	subs	r3, #1
 8007112:	b2db      	uxtb	r3, r3
 8007114:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800711a:	2b00      	cmp	r3, #0
 800711c:	dce9      	bgt.n	80070f2 <prvUnlockQueue+0x16>
 800711e:	e000      	b.n	8007122 <prvUnlockQueue+0x46>
					break;
 8007120:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	22ff      	movs	r2, #255	@ 0xff
 8007126:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800712a:	f001 fc87 	bl	8008a3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800712e:	f001 fc53 	bl	80089d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007138:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800713a:	e011      	b.n	8007160 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	691b      	ldr	r3, [r3, #16]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d012      	beq.n	800716a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	3310      	adds	r3, #16
 8007148:	4618      	mov	r0, r3
 800714a:	f000 fd13 	bl	8007b74 <xTaskRemoveFromEventList>
 800714e:	4603      	mov	r3, r0
 8007150:	2b00      	cmp	r3, #0
 8007152:	d001      	beq.n	8007158 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007154:	f000 fdec 	bl	8007d30 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007158:	7bbb      	ldrb	r3, [r7, #14]
 800715a:	3b01      	subs	r3, #1
 800715c:	b2db      	uxtb	r3, r3
 800715e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007160:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007164:	2b00      	cmp	r3, #0
 8007166:	dce9      	bgt.n	800713c <prvUnlockQueue+0x60>
 8007168:	e000      	b.n	800716c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800716a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	22ff      	movs	r2, #255	@ 0xff
 8007170:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007174:	f001 fc62 	bl	8008a3c <vPortExitCritical>
}
 8007178:	bf00      	nop
 800717a:	3710      	adds	r7, #16
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007188:	f001 fc26 	bl	80089d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007190:	2b00      	cmp	r3, #0
 8007192:	d102      	bne.n	800719a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007194:	2301      	movs	r3, #1
 8007196:	60fb      	str	r3, [r7, #12]
 8007198:	e001      	b.n	800719e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800719a:	2300      	movs	r3, #0
 800719c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800719e:	f001 fc4d 	bl	8008a3c <vPortExitCritical>

	return xReturn;
 80071a2:	68fb      	ldr	r3, [r7, #12]
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3710      	adds	r7, #16
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80071b4:	f001 fc10 	bl	80089d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d102      	bne.n	80071ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80071c4:	2301      	movs	r3, #1
 80071c6:	60fb      	str	r3, [r7, #12]
 80071c8:	e001      	b.n	80071ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80071ca:	2300      	movs	r3, #0
 80071cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80071ce:	f001 fc35 	bl	8008a3c <vPortExitCritical>

	return xReturn;
 80071d2:	68fb      	ldr	r3, [r7, #12]
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3710      	adds	r7, #16
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80071dc:	b480      	push	{r7}
 80071de:	b085      	sub	sp, #20
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80071e6:	2300      	movs	r3, #0
 80071e8:	60fb      	str	r3, [r7, #12]
 80071ea:	e014      	b.n	8007216 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80071ec:	4a0f      	ldr	r2, [pc, #60]	@ (800722c <vQueueAddToRegistry+0x50>)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d10b      	bne.n	8007210 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80071f8:	490c      	ldr	r1, [pc, #48]	@ (800722c <vQueueAddToRegistry+0x50>)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	683a      	ldr	r2, [r7, #0]
 80071fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007202:	4a0a      	ldr	r2, [pc, #40]	@ (800722c <vQueueAddToRegistry+0x50>)
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	00db      	lsls	r3, r3, #3
 8007208:	4413      	add	r3, r2
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800720e:	e006      	b.n	800721e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	3301      	adds	r3, #1
 8007214:	60fb      	str	r3, [r7, #12]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2b07      	cmp	r3, #7
 800721a:	d9e7      	bls.n	80071ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800721c:	bf00      	nop
 800721e:	bf00      	nop
 8007220:	3714      	adds	r7, #20
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr
 800722a:	bf00      	nop
 800722c:	2000111c 	.word	0x2000111c

08007230 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007230:	b580      	push	{r7, lr}
 8007232:	b086      	sub	sp, #24
 8007234:	af00      	add	r7, sp, #0
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007240:	f001 fbca 	bl	80089d8 <vPortEnterCritical>
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800724a:	b25b      	sxtb	r3, r3
 800724c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007250:	d103      	bne.n	800725a <vQueueWaitForMessageRestricted+0x2a>
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	2200      	movs	r2, #0
 8007256:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007260:	b25b      	sxtb	r3, r3
 8007262:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007266:	d103      	bne.n	8007270 <vQueueWaitForMessageRestricted+0x40>
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	2200      	movs	r2, #0
 800726c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007270:	f001 fbe4 	bl	8008a3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007278:	2b00      	cmp	r3, #0
 800727a:	d106      	bne.n	800728a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	3324      	adds	r3, #36	@ 0x24
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	68b9      	ldr	r1, [r7, #8]
 8007284:	4618      	mov	r0, r3
 8007286:	f000 fc49 	bl	8007b1c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800728a:	6978      	ldr	r0, [r7, #20]
 800728c:	f7ff ff26 	bl	80070dc <prvUnlockQueue>
	}
 8007290:	bf00      	nop
 8007292:	3718      	adds	r7, #24
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007298:	b580      	push	{r7, lr}
 800729a:	b08e      	sub	sp, #56	@ 0x38
 800729c:	af04      	add	r7, sp, #16
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	607a      	str	r2, [r7, #4]
 80072a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80072a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d10b      	bne.n	80072c4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80072ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072b0:	f383 8811 	msr	BASEPRI, r3
 80072b4:	f3bf 8f6f 	isb	sy
 80072b8:	f3bf 8f4f 	dsb	sy
 80072bc:	623b      	str	r3, [r7, #32]
}
 80072be:	bf00      	nop
 80072c0:	bf00      	nop
 80072c2:	e7fd      	b.n	80072c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80072c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d10b      	bne.n	80072e2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80072ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ce:	f383 8811 	msr	BASEPRI, r3
 80072d2:	f3bf 8f6f 	isb	sy
 80072d6:	f3bf 8f4f 	dsb	sy
 80072da:	61fb      	str	r3, [r7, #28]
}
 80072dc:	bf00      	nop
 80072de:	bf00      	nop
 80072e0:	e7fd      	b.n	80072de <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80072e2:	23a8      	movs	r3, #168	@ 0xa8
 80072e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	2ba8      	cmp	r3, #168	@ 0xa8
 80072ea:	d00b      	beq.n	8007304 <xTaskCreateStatic+0x6c>
	__asm volatile
 80072ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072f0:	f383 8811 	msr	BASEPRI, r3
 80072f4:	f3bf 8f6f 	isb	sy
 80072f8:	f3bf 8f4f 	dsb	sy
 80072fc:	61bb      	str	r3, [r7, #24]
}
 80072fe:	bf00      	nop
 8007300:	bf00      	nop
 8007302:	e7fd      	b.n	8007300 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007304:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007308:	2b00      	cmp	r3, #0
 800730a:	d01e      	beq.n	800734a <xTaskCreateStatic+0xb2>
 800730c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800730e:	2b00      	cmp	r3, #0
 8007310:	d01b      	beq.n	800734a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007314:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007318:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800731a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800731c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800731e:	2202      	movs	r2, #2
 8007320:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007324:	2300      	movs	r3, #0
 8007326:	9303      	str	r3, [sp, #12]
 8007328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800732a:	9302      	str	r3, [sp, #8]
 800732c:	f107 0314 	add.w	r3, r7, #20
 8007330:	9301      	str	r3, [sp, #4]
 8007332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007334:	9300      	str	r3, [sp, #0]
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	68b9      	ldr	r1, [r7, #8]
 800733c:	68f8      	ldr	r0, [r7, #12]
 800733e:	f000 f851 	bl	80073e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007342:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007344:	f000 f8f6 	bl	8007534 <prvAddNewTaskToReadyList>
 8007348:	e001      	b.n	800734e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800734a:	2300      	movs	r3, #0
 800734c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800734e:	697b      	ldr	r3, [r7, #20]
	}
 8007350:	4618      	mov	r0, r3
 8007352:	3728      	adds	r7, #40	@ 0x28
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007358:	b580      	push	{r7, lr}
 800735a:	b08c      	sub	sp, #48	@ 0x30
 800735c:	af04      	add	r7, sp, #16
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	603b      	str	r3, [r7, #0]
 8007364:	4613      	mov	r3, r2
 8007366:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007368:	88fb      	ldrh	r3, [r7, #6]
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	4618      	mov	r0, r3
 800736e:	f001 fc55 	bl	8008c1c <pvPortMalloc>
 8007372:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00e      	beq.n	8007398 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800737a:	20a8      	movs	r0, #168	@ 0xa8
 800737c:	f001 fc4e 	bl	8008c1c <pvPortMalloc>
 8007380:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d003      	beq.n	8007390 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	697a      	ldr	r2, [r7, #20]
 800738c:	631a      	str	r2, [r3, #48]	@ 0x30
 800738e:	e005      	b.n	800739c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007390:	6978      	ldr	r0, [r7, #20]
 8007392:	f001 fd11 	bl	8008db8 <vPortFree>
 8007396:	e001      	b.n	800739c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007398:	2300      	movs	r3, #0
 800739a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d017      	beq.n	80073d2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80073aa:	88fa      	ldrh	r2, [r7, #6]
 80073ac:	2300      	movs	r3, #0
 80073ae:	9303      	str	r3, [sp, #12]
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	9302      	str	r3, [sp, #8]
 80073b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073b6:	9301      	str	r3, [sp, #4]
 80073b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ba:	9300      	str	r3, [sp, #0]
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	68b9      	ldr	r1, [r7, #8]
 80073c0:	68f8      	ldr	r0, [r7, #12]
 80073c2:	f000 f80f 	bl	80073e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80073c6:	69f8      	ldr	r0, [r7, #28]
 80073c8:	f000 f8b4 	bl	8007534 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80073cc:	2301      	movs	r3, #1
 80073ce:	61bb      	str	r3, [r7, #24]
 80073d0:	e002      	b.n	80073d8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80073d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80073d6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80073d8:	69bb      	ldr	r3, [r7, #24]
	}
 80073da:	4618      	mov	r0, r3
 80073dc:	3720      	adds	r7, #32
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
	...

080073e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b088      	sub	sp, #32
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	607a      	str	r2, [r7, #4]
 80073f0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80073f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073f4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	461a      	mov	r2, r3
 80073fc:	21a5      	movs	r1, #165	@ 0xa5
 80073fe:	f001 fe1b 	bl	8009038 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007404:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800740c:	3b01      	subs	r3, #1
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	4413      	add	r3, r2
 8007412:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007414:	69bb      	ldr	r3, [r7, #24]
 8007416:	f023 0307 	bic.w	r3, r3, #7
 800741a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800741c:	69bb      	ldr	r3, [r7, #24]
 800741e:	f003 0307 	and.w	r3, r3, #7
 8007422:	2b00      	cmp	r3, #0
 8007424:	d00b      	beq.n	800743e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800742a:	f383 8811 	msr	BASEPRI, r3
 800742e:	f3bf 8f6f 	isb	sy
 8007432:	f3bf 8f4f 	dsb	sy
 8007436:	617b      	str	r3, [r7, #20]
}
 8007438:	bf00      	nop
 800743a:	bf00      	nop
 800743c:	e7fd      	b.n	800743a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d01f      	beq.n	8007484 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007444:	2300      	movs	r3, #0
 8007446:	61fb      	str	r3, [r7, #28]
 8007448:	e012      	b.n	8007470 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800744a:	68ba      	ldr	r2, [r7, #8]
 800744c:	69fb      	ldr	r3, [r7, #28]
 800744e:	4413      	add	r3, r2
 8007450:	7819      	ldrb	r1, [r3, #0]
 8007452:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	4413      	add	r3, r2
 8007458:	3334      	adds	r3, #52	@ 0x34
 800745a:	460a      	mov	r2, r1
 800745c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800745e:	68ba      	ldr	r2, [r7, #8]
 8007460:	69fb      	ldr	r3, [r7, #28]
 8007462:	4413      	add	r3, r2
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d006      	beq.n	8007478 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	3301      	adds	r3, #1
 800746e:	61fb      	str	r3, [r7, #28]
 8007470:	69fb      	ldr	r3, [r7, #28]
 8007472:	2b0f      	cmp	r3, #15
 8007474:	d9e9      	bls.n	800744a <prvInitialiseNewTask+0x66>
 8007476:	e000      	b.n	800747a <prvInitialiseNewTask+0x96>
			{
				break;
 8007478:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800747a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800747c:	2200      	movs	r2, #0
 800747e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007482:	e003      	b.n	800748c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007486:	2200      	movs	r2, #0
 8007488:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800748c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800748e:	2b37      	cmp	r3, #55	@ 0x37
 8007490:	d901      	bls.n	8007496 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007492:	2337      	movs	r3, #55	@ 0x37
 8007494:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007498:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800749a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800749c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800749e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074a0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80074a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a4:	2200      	movs	r2, #0
 80074a6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80074a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074aa:	3304      	adds	r3, #4
 80074ac:	4618      	mov	r0, r3
 80074ae:	f7ff f845 	bl	800653c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80074b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074b4:	3318      	adds	r3, #24
 80074b6:	4618      	mov	r0, r3
 80074b8:	f7ff f840 	bl	800653c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80074bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074c0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074c4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80074c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80074cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074d0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80074d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d4:	2200      	movs	r2, #0
 80074d6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80074da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074dc:	2200      	movs	r2, #0
 80074de:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80074e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e4:	3354      	adds	r3, #84	@ 0x54
 80074e6:	224c      	movs	r2, #76	@ 0x4c
 80074e8:	2100      	movs	r1, #0
 80074ea:	4618      	mov	r0, r3
 80074ec:	f001 fda4 	bl	8009038 <memset>
 80074f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f2:	4a0d      	ldr	r2, [pc, #52]	@ (8007528 <prvInitialiseNewTask+0x144>)
 80074f4:	659a      	str	r2, [r3, #88]	@ 0x58
 80074f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f8:	4a0c      	ldr	r2, [pc, #48]	@ (800752c <prvInitialiseNewTask+0x148>)
 80074fa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80074fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074fe:	4a0c      	ldr	r2, [pc, #48]	@ (8007530 <prvInitialiseNewTask+0x14c>)
 8007500:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007502:	683a      	ldr	r2, [r7, #0]
 8007504:	68f9      	ldr	r1, [r7, #12]
 8007506:	69b8      	ldr	r0, [r7, #24]
 8007508:	f001 f936 	bl	8008778 <pxPortInitialiseStack>
 800750c:	4602      	mov	r2, r0
 800750e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007510:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007514:	2b00      	cmp	r3, #0
 8007516:	d002      	beq.n	800751e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800751a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800751c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800751e:	bf00      	nop
 8007520:	3720      	adds	r7, #32
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	200053b0 	.word	0x200053b0
 800752c:	20005418 	.word	0x20005418
 8007530:	20005480 	.word	0x20005480

08007534 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b082      	sub	sp, #8
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800753c:	f001 fa4c 	bl	80089d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007540:	4b2d      	ldr	r3, [pc, #180]	@ (80075f8 <prvAddNewTaskToReadyList+0xc4>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	3301      	adds	r3, #1
 8007546:	4a2c      	ldr	r2, [pc, #176]	@ (80075f8 <prvAddNewTaskToReadyList+0xc4>)
 8007548:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800754a:	4b2c      	ldr	r3, [pc, #176]	@ (80075fc <prvAddNewTaskToReadyList+0xc8>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d109      	bne.n	8007566 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007552:	4a2a      	ldr	r2, [pc, #168]	@ (80075fc <prvAddNewTaskToReadyList+0xc8>)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007558:	4b27      	ldr	r3, [pc, #156]	@ (80075f8 <prvAddNewTaskToReadyList+0xc4>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	2b01      	cmp	r3, #1
 800755e:	d110      	bne.n	8007582 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007560:	f000 fc0a 	bl	8007d78 <prvInitialiseTaskLists>
 8007564:	e00d      	b.n	8007582 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007566:	4b26      	ldr	r3, [pc, #152]	@ (8007600 <prvAddNewTaskToReadyList+0xcc>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d109      	bne.n	8007582 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800756e:	4b23      	ldr	r3, [pc, #140]	@ (80075fc <prvAddNewTaskToReadyList+0xc8>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007578:	429a      	cmp	r2, r3
 800757a:	d802      	bhi.n	8007582 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800757c:	4a1f      	ldr	r2, [pc, #124]	@ (80075fc <prvAddNewTaskToReadyList+0xc8>)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007582:	4b20      	ldr	r3, [pc, #128]	@ (8007604 <prvAddNewTaskToReadyList+0xd0>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	3301      	adds	r3, #1
 8007588:	4a1e      	ldr	r2, [pc, #120]	@ (8007604 <prvAddNewTaskToReadyList+0xd0>)
 800758a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800758c:	4b1d      	ldr	r3, [pc, #116]	@ (8007604 <prvAddNewTaskToReadyList+0xd0>)
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007598:	4b1b      	ldr	r3, [pc, #108]	@ (8007608 <prvAddNewTaskToReadyList+0xd4>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	429a      	cmp	r2, r3
 800759e:	d903      	bls.n	80075a8 <prvAddNewTaskToReadyList+0x74>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075a4:	4a18      	ldr	r2, [pc, #96]	@ (8007608 <prvAddNewTaskToReadyList+0xd4>)
 80075a6:	6013      	str	r3, [r2, #0]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075ac:	4613      	mov	r3, r2
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	4413      	add	r3, r2
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	4a15      	ldr	r2, [pc, #84]	@ (800760c <prvAddNewTaskToReadyList+0xd8>)
 80075b6:	441a      	add	r2, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	3304      	adds	r3, #4
 80075bc:	4619      	mov	r1, r3
 80075be:	4610      	mov	r0, r2
 80075c0:	f7fe ffc9 	bl	8006556 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80075c4:	f001 fa3a 	bl	8008a3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80075c8:	4b0d      	ldr	r3, [pc, #52]	@ (8007600 <prvAddNewTaskToReadyList+0xcc>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d00e      	beq.n	80075ee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80075d0:	4b0a      	ldr	r3, [pc, #40]	@ (80075fc <prvAddNewTaskToReadyList+0xc8>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075da:	429a      	cmp	r2, r3
 80075dc:	d207      	bcs.n	80075ee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80075de:	4b0c      	ldr	r3, [pc, #48]	@ (8007610 <prvAddNewTaskToReadyList+0xdc>)
 80075e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075e4:	601a      	str	r2, [r3, #0]
 80075e6:	f3bf 8f4f 	dsb	sy
 80075ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075ee:	bf00      	nop
 80075f0:	3708      	adds	r7, #8
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	20001630 	.word	0x20001630
 80075fc:	2000115c 	.word	0x2000115c
 8007600:	2000163c 	.word	0x2000163c
 8007604:	2000164c 	.word	0x2000164c
 8007608:	20001638 	.word	0x20001638
 800760c:	20001160 	.word	0x20001160
 8007610:	e000ed04 	.word	0xe000ed04

08007614 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b08a      	sub	sp, #40	@ 0x28
 8007618:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800761a:	2300      	movs	r3, #0
 800761c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800761e:	2300      	movs	r3, #0
 8007620:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007622:	463a      	mov	r2, r7
 8007624:	1d39      	adds	r1, r7, #4
 8007626:	f107 0308 	add.w	r3, r7, #8
 800762a:	4618      	mov	r0, r3
 800762c:	f7fe ff32 	bl	8006494 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007630:	6839      	ldr	r1, [r7, #0]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	68ba      	ldr	r2, [r7, #8]
 8007636:	9202      	str	r2, [sp, #8]
 8007638:	9301      	str	r3, [sp, #4]
 800763a:	2300      	movs	r3, #0
 800763c:	9300      	str	r3, [sp, #0]
 800763e:	2300      	movs	r3, #0
 8007640:	460a      	mov	r2, r1
 8007642:	4924      	ldr	r1, [pc, #144]	@ (80076d4 <vTaskStartScheduler+0xc0>)
 8007644:	4824      	ldr	r0, [pc, #144]	@ (80076d8 <vTaskStartScheduler+0xc4>)
 8007646:	f7ff fe27 	bl	8007298 <xTaskCreateStatic>
 800764a:	4603      	mov	r3, r0
 800764c:	4a23      	ldr	r2, [pc, #140]	@ (80076dc <vTaskStartScheduler+0xc8>)
 800764e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007650:	4b22      	ldr	r3, [pc, #136]	@ (80076dc <vTaskStartScheduler+0xc8>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d002      	beq.n	800765e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007658:	2301      	movs	r3, #1
 800765a:	617b      	str	r3, [r7, #20]
 800765c:	e001      	b.n	8007662 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800765e:	2300      	movs	r3, #0
 8007660:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	2b01      	cmp	r3, #1
 8007666:	d102      	bne.n	800766e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007668:	f000 fd2c 	bl	80080c4 <xTimerCreateTimerTask>
 800766c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	2b01      	cmp	r3, #1
 8007672:	d11b      	bne.n	80076ac <vTaskStartScheduler+0x98>
	__asm volatile
 8007674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007678:	f383 8811 	msr	BASEPRI, r3
 800767c:	f3bf 8f6f 	isb	sy
 8007680:	f3bf 8f4f 	dsb	sy
 8007684:	613b      	str	r3, [r7, #16]
}
 8007686:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007688:	4b15      	ldr	r3, [pc, #84]	@ (80076e0 <vTaskStartScheduler+0xcc>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	3354      	adds	r3, #84	@ 0x54
 800768e:	4a15      	ldr	r2, [pc, #84]	@ (80076e4 <vTaskStartScheduler+0xd0>)
 8007690:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007692:	4b15      	ldr	r3, [pc, #84]	@ (80076e8 <vTaskStartScheduler+0xd4>)
 8007694:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007698:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800769a:	4b14      	ldr	r3, [pc, #80]	@ (80076ec <vTaskStartScheduler+0xd8>)
 800769c:	2201      	movs	r2, #1
 800769e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80076a0:	4b13      	ldr	r3, [pc, #76]	@ (80076f0 <vTaskStartScheduler+0xdc>)
 80076a2:	2200      	movs	r2, #0
 80076a4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80076a6:	f001 f8f3 	bl	8008890 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80076aa:	e00f      	b.n	80076cc <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80076b2:	d10b      	bne.n	80076cc <vTaskStartScheduler+0xb8>
	__asm volatile
 80076b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076b8:	f383 8811 	msr	BASEPRI, r3
 80076bc:	f3bf 8f6f 	isb	sy
 80076c0:	f3bf 8f4f 	dsb	sy
 80076c4:	60fb      	str	r3, [r7, #12]
}
 80076c6:	bf00      	nop
 80076c8:	bf00      	nop
 80076ca:	e7fd      	b.n	80076c8 <vTaskStartScheduler+0xb4>
}
 80076cc:	bf00      	nop
 80076ce:	3718      	adds	r7, #24
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}
 80076d4:	0800a12c 	.word	0x0800a12c
 80076d8:	08007d49 	.word	0x08007d49
 80076dc:	20001654 	.word	0x20001654
 80076e0:	2000115c 	.word	0x2000115c
 80076e4:	20000010 	.word	0x20000010
 80076e8:	20001650 	.word	0x20001650
 80076ec:	2000163c 	.word	0x2000163c
 80076f0:	20001634 	.word	0x20001634

080076f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80076f4:	b480      	push	{r7}
 80076f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80076f8:	4b04      	ldr	r3, [pc, #16]	@ (800770c <vTaskSuspendAll+0x18>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	3301      	adds	r3, #1
 80076fe:	4a03      	ldr	r2, [pc, #12]	@ (800770c <vTaskSuspendAll+0x18>)
 8007700:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007702:	bf00      	nop
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr
 800770c:	20001658 	.word	0x20001658

08007710 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007716:	2300      	movs	r3, #0
 8007718:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800771a:	2300      	movs	r3, #0
 800771c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800771e:	4b42      	ldr	r3, [pc, #264]	@ (8007828 <xTaskResumeAll+0x118>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d10b      	bne.n	800773e <xTaskResumeAll+0x2e>
	__asm volatile
 8007726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800772a:	f383 8811 	msr	BASEPRI, r3
 800772e:	f3bf 8f6f 	isb	sy
 8007732:	f3bf 8f4f 	dsb	sy
 8007736:	603b      	str	r3, [r7, #0]
}
 8007738:	bf00      	nop
 800773a:	bf00      	nop
 800773c:	e7fd      	b.n	800773a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800773e:	f001 f94b 	bl	80089d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007742:	4b39      	ldr	r3, [pc, #228]	@ (8007828 <xTaskResumeAll+0x118>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	3b01      	subs	r3, #1
 8007748:	4a37      	ldr	r2, [pc, #220]	@ (8007828 <xTaskResumeAll+0x118>)
 800774a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800774c:	4b36      	ldr	r3, [pc, #216]	@ (8007828 <xTaskResumeAll+0x118>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d162      	bne.n	800781a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007754:	4b35      	ldr	r3, [pc, #212]	@ (800782c <xTaskResumeAll+0x11c>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d05e      	beq.n	800781a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800775c:	e02f      	b.n	80077be <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800775e:	4b34      	ldr	r3, [pc, #208]	@ (8007830 <xTaskResumeAll+0x120>)
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	3318      	adds	r3, #24
 800776a:	4618      	mov	r0, r3
 800776c:	f7fe ff50 	bl	8006610 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	3304      	adds	r3, #4
 8007774:	4618      	mov	r0, r3
 8007776:	f7fe ff4b 	bl	8006610 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800777e:	4b2d      	ldr	r3, [pc, #180]	@ (8007834 <xTaskResumeAll+0x124>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	429a      	cmp	r2, r3
 8007784:	d903      	bls.n	800778e <xTaskResumeAll+0x7e>
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800778a:	4a2a      	ldr	r2, [pc, #168]	@ (8007834 <xTaskResumeAll+0x124>)
 800778c:	6013      	str	r3, [r2, #0]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007792:	4613      	mov	r3, r2
 8007794:	009b      	lsls	r3, r3, #2
 8007796:	4413      	add	r3, r2
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	4a27      	ldr	r2, [pc, #156]	@ (8007838 <xTaskResumeAll+0x128>)
 800779c:	441a      	add	r2, r3
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	3304      	adds	r3, #4
 80077a2:	4619      	mov	r1, r3
 80077a4:	4610      	mov	r0, r2
 80077a6:	f7fe fed6 	bl	8006556 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077ae:	4b23      	ldr	r3, [pc, #140]	@ (800783c <xTaskResumeAll+0x12c>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d302      	bcc.n	80077be <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80077b8:	4b21      	ldr	r3, [pc, #132]	@ (8007840 <xTaskResumeAll+0x130>)
 80077ba:	2201      	movs	r2, #1
 80077bc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077be:	4b1c      	ldr	r3, [pc, #112]	@ (8007830 <xTaskResumeAll+0x120>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d1cb      	bne.n	800775e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d001      	beq.n	80077d0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80077cc:	f000 fb78 	bl	8007ec0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80077d0:	4b1c      	ldr	r3, [pc, #112]	@ (8007844 <xTaskResumeAll+0x134>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d010      	beq.n	80077fe <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80077dc:	f000 f858 	bl	8007890 <xTaskIncrementTick>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d002      	beq.n	80077ec <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80077e6:	4b16      	ldr	r3, [pc, #88]	@ (8007840 <xTaskResumeAll+0x130>)
 80077e8:	2201      	movs	r2, #1
 80077ea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	3b01      	subs	r3, #1
 80077f0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d1f1      	bne.n	80077dc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80077f8:	4b12      	ldr	r3, [pc, #72]	@ (8007844 <xTaskResumeAll+0x134>)
 80077fa:	2200      	movs	r2, #0
 80077fc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80077fe:	4b10      	ldr	r3, [pc, #64]	@ (8007840 <xTaskResumeAll+0x130>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d009      	beq.n	800781a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007806:	2301      	movs	r3, #1
 8007808:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800780a:	4b0f      	ldr	r3, [pc, #60]	@ (8007848 <xTaskResumeAll+0x138>)
 800780c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007810:	601a      	str	r2, [r3, #0]
 8007812:	f3bf 8f4f 	dsb	sy
 8007816:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800781a:	f001 f90f 	bl	8008a3c <vPortExitCritical>

	return xAlreadyYielded;
 800781e:	68bb      	ldr	r3, [r7, #8]
}
 8007820:	4618      	mov	r0, r3
 8007822:	3710      	adds	r7, #16
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}
 8007828:	20001658 	.word	0x20001658
 800782c:	20001630 	.word	0x20001630
 8007830:	200015f0 	.word	0x200015f0
 8007834:	20001638 	.word	0x20001638
 8007838:	20001160 	.word	0x20001160
 800783c:	2000115c 	.word	0x2000115c
 8007840:	20001644 	.word	0x20001644
 8007844:	20001640 	.word	0x20001640
 8007848:	e000ed04 	.word	0xe000ed04

0800784c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007852:	4b05      	ldr	r3, [pc, #20]	@ (8007868 <xTaskGetTickCount+0x1c>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007858:	687b      	ldr	r3, [r7, #4]
}
 800785a:	4618      	mov	r0, r3
 800785c:	370c      	adds	r7, #12
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr
 8007866:	bf00      	nop
 8007868:	20001634 	.word	0x20001634

0800786c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007872:	f001 f991 	bl	8008b98 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007876:	2300      	movs	r3, #0
 8007878:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800787a:	4b04      	ldr	r3, [pc, #16]	@ (800788c <xTaskGetTickCountFromISR+0x20>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007880:	683b      	ldr	r3, [r7, #0]
}
 8007882:	4618      	mov	r0, r3
 8007884:	3708      	adds	r7, #8
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	20001634 	.word	0x20001634

08007890 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b086      	sub	sp, #24
 8007894:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007896:	2300      	movs	r3, #0
 8007898:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800789a:	4b4f      	ldr	r3, [pc, #316]	@ (80079d8 <xTaskIncrementTick+0x148>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	f040 8090 	bne.w	80079c4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80078a4:	4b4d      	ldr	r3, [pc, #308]	@ (80079dc <xTaskIncrementTick+0x14c>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	3301      	adds	r3, #1
 80078aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80078ac:	4a4b      	ldr	r2, [pc, #300]	@ (80079dc <xTaskIncrementTick+0x14c>)
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d121      	bne.n	80078fc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80078b8:	4b49      	ldr	r3, [pc, #292]	@ (80079e0 <xTaskIncrementTick+0x150>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00b      	beq.n	80078da <xTaskIncrementTick+0x4a>
	__asm volatile
 80078c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078c6:	f383 8811 	msr	BASEPRI, r3
 80078ca:	f3bf 8f6f 	isb	sy
 80078ce:	f3bf 8f4f 	dsb	sy
 80078d2:	603b      	str	r3, [r7, #0]
}
 80078d4:	bf00      	nop
 80078d6:	bf00      	nop
 80078d8:	e7fd      	b.n	80078d6 <xTaskIncrementTick+0x46>
 80078da:	4b41      	ldr	r3, [pc, #260]	@ (80079e0 <xTaskIncrementTick+0x150>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	60fb      	str	r3, [r7, #12]
 80078e0:	4b40      	ldr	r3, [pc, #256]	@ (80079e4 <xTaskIncrementTick+0x154>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a3e      	ldr	r2, [pc, #248]	@ (80079e0 <xTaskIncrementTick+0x150>)
 80078e6:	6013      	str	r3, [r2, #0]
 80078e8:	4a3e      	ldr	r2, [pc, #248]	@ (80079e4 <xTaskIncrementTick+0x154>)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6013      	str	r3, [r2, #0]
 80078ee:	4b3e      	ldr	r3, [pc, #248]	@ (80079e8 <xTaskIncrementTick+0x158>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	3301      	adds	r3, #1
 80078f4:	4a3c      	ldr	r2, [pc, #240]	@ (80079e8 <xTaskIncrementTick+0x158>)
 80078f6:	6013      	str	r3, [r2, #0]
 80078f8:	f000 fae2 	bl	8007ec0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80078fc:	4b3b      	ldr	r3, [pc, #236]	@ (80079ec <xTaskIncrementTick+0x15c>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	693a      	ldr	r2, [r7, #16]
 8007902:	429a      	cmp	r2, r3
 8007904:	d349      	bcc.n	800799a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007906:	4b36      	ldr	r3, [pc, #216]	@ (80079e0 <xTaskIncrementTick+0x150>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d104      	bne.n	800791a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007910:	4b36      	ldr	r3, [pc, #216]	@ (80079ec <xTaskIncrementTick+0x15c>)
 8007912:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007916:	601a      	str	r2, [r3, #0]
					break;
 8007918:	e03f      	b.n	800799a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800791a:	4b31      	ldr	r3, [pc, #196]	@ (80079e0 <xTaskIncrementTick+0x150>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800792a:	693a      	ldr	r2, [r7, #16]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	429a      	cmp	r2, r3
 8007930:	d203      	bcs.n	800793a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007932:	4a2e      	ldr	r2, [pc, #184]	@ (80079ec <xTaskIncrementTick+0x15c>)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007938:	e02f      	b.n	800799a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	3304      	adds	r3, #4
 800793e:	4618      	mov	r0, r3
 8007940:	f7fe fe66 	bl	8006610 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007948:	2b00      	cmp	r3, #0
 800794a:	d004      	beq.n	8007956 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	3318      	adds	r3, #24
 8007950:	4618      	mov	r0, r3
 8007952:	f7fe fe5d 	bl	8006610 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800795a:	4b25      	ldr	r3, [pc, #148]	@ (80079f0 <xTaskIncrementTick+0x160>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	429a      	cmp	r2, r3
 8007960:	d903      	bls.n	800796a <xTaskIncrementTick+0xda>
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007966:	4a22      	ldr	r2, [pc, #136]	@ (80079f0 <xTaskIncrementTick+0x160>)
 8007968:	6013      	str	r3, [r2, #0]
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800796e:	4613      	mov	r3, r2
 8007970:	009b      	lsls	r3, r3, #2
 8007972:	4413      	add	r3, r2
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	4a1f      	ldr	r2, [pc, #124]	@ (80079f4 <xTaskIncrementTick+0x164>)
 8007978:	441a      	add	r2, r3
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	3304      	adds	r3, #4
 800797e:	4619      	mov	r1, r3
 8007980:	4610      	mov	r0, r2
 8007982:	f7fe fde8 	bl	8006556 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800798a:	4b1b      	ldr	r3, [pc, #108]	@ (80079f8 <xTaskIncrementTick+0x168>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007990:	429a      	cmp	r2, r3
 8007992:	d3b8      	bcc.n	8007906 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007994:	2301      	movs	r3, #1
 8007996:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007998:	e7b5      	b.n	8007906 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800799a:	4b17      	ldr	r3, [pc, #92]	@ (80079f8 <xTaskIncrementTick+0x168>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079a0:	4914      	ldr	r1, [pc, #80]	@ (80079f4 <xTaskIncrementTick+0x164>)
 80079a2:	4613      	mov	r3, r2
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	4413      	add	r3, r2
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	440b      	add	r3, r1
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d901      	bls.n	80079b6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80079b2:	2301      	movs	r3, #1
 80079b4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80079b6:	4b11      	ldr	r3, [pc, #68]	@ (80079fc <xTaskIncrementTick+0x16c>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d007      	beq.n	80079ce <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80079be:	2301      	movs	r3, #1
 80079c0:	617b      	str	r3, [r7, #20]
 80079c2:	e004      	b.n	80079ce <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80079c4:	4b0e      	ldr	r3, [pc, #56]	@ (8007a00 <xTaskIncrementTick+0x170>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	3301      	adds	r3, #1
 80079ca:	4a0d      	ldr	r2, [pc, #52]	@ (8007a00 <xTaskIncrementTick+0x170>)
 80079cc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80079ce:	697b      	ldr	r3, [r7, #20]
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3718      	adds	r7, #24
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}
 80079d8:	20001658 	.word	0x20001658
 80079dc:	20001634 	.word	0x20001634
 80079e0:	200015e8 	.word	0x200015e8
 80079e4:	200015ec 	.word	0x200015ec
 80079e8:	20001648 	.word	0x20001648
 80079ec:	20001650 	.word	0x20001650
 80079f0:	20001638 	.word	0x20001638
 80079f4:	20001160 	.word	0x20001160
 80079f8:	2000115c 	.word	0x2000115c
 80079fc:	20001644 	.word	0x20001644
 8007a00:	20001640 	.word	0x20001640

08007a04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007a04:	b480      	push	{r7}
 8007a06:	b085      	sub	sp, #20
 8007a08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007a0a:	4b2b      	ldr	r3, [pc, #172]	@ (8007ab8 <vTaskSwitchContext+0xb4>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d003      	beq.n	8007a1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007a12:	4b2a      	ldr	r3, [pc, #168]	@ (8007abc <vTaskSwitchContext+0xb8>)
 8007a14:	2201      	movs	r2, #1
 8007a16:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007a18:	e047      	b.n	8007aaa <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8007a1a:	4b28      	ldr	r3, [pc, #160]	@ (8007abc <vTaskSwitchContext+0xb8>)
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a20:	4b27      	ldr	r3, [pc, #156]	@ (8007ac0 <vTaskSwitchContext+0xbc>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	60fb      	str	r3, [r7, #12]
 8007a26:	e011      	b.n	8007a4c <vTaskSwitchContext+0x48>
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d10b      	bne.n	8007a46 <vTaskSwitchContext+0x42>
	__asm volatile
 8007a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a32:	f383 8811 	msr	BASEPRI, r3
 8007a36:	f3bf 8f6f 	isb	sy
 8007a3a:	f3bf 8f4f 	dsb	sy
 8007a3e:	607b      	str	r3, [r7, #4]
}
 8007a40:	bf00      	nop
 8007a42:	bf00      	nop
 8007a44:	e7fd      	b.n	8007a42 <vTaskSwitchContext+0x3e>
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	3b01      	subs	r3, #1
 8007a4a:	60fb      	str	r3, [r7, #12]
 8007a4c:	491d      	ldr	r1, [pc, #116]	@ (8007ac4 <vTaskSwitchContext+0xc0>)
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	4613      	mov	r3, r2
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	4413      	add	r3, r2
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	440b      	add	r3, r1
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d0e3      	beq.n	8007a28 <vTaskSwitchContext+0x24>
 8007a60:	68fa      	ldr	r2, [r7, #12]
 8007a62:	4613      	mov	r3, r2
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	4413      	add	r3, r2
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	4a16      	ldr	r2, [pc, #88]	@ (8007ac4 <vTaskSwitchContext+0xc0>)
 8007a6c:	4413      	add	r3, r2
 8007a6e:	60bb      	str	r3, [r7, #8]
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	685a      	ldr	r2, [r3, #4]
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	605a      	str	r2, [r3, #4]
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	685a      	ldr	r2, [r3, #4]
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	3308      	adds	r3, #8
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d104      	bne.n	8007a90 <vTaskSwitchContext+0x8c>
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	685a      	ldr	r2, [r3, #4]
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	605a      	str	r2, [r3, #4]
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	68db      	ldr	r3, [r3, #12]
 8007a96:	4a0c      	ldr	r2, [pc, #48]	@ (8007ac8 <vTaskSwitchContext+0xc4>)
 8007a98:	6013      	str	r3, [r2, #0]
 8007a9a:	4a09      	ldr	r2, [pc, #36]	@ (8007ac0 <vTaskSwitchContext+0xbc>)
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007aa0:	4b09      	ldr	r3, [pc, #36]	@ (8007ac8 <vTaskSwitchContext+0xc4>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	3354      	adds	r3, #84	@ 0x54
 8007aa6:	4a09      	ldr	r2, [pc, #36]	@ (8007acc <vTaskSwitchContext+0xc8>)
 8007aa8:	6013      	str	r3, [r2, #0]
}
 8007aaa:	bf00      	nop
 8007aac:	3714      	adds	r7, #20
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr
 8007ab6:	bf00      	nop
 8007ab8:	20001658 	.word	0x20001658
 8007abc:	20001644 	.word	0x20001644
 8007ac0:	20001638 	.word	0x20001638
 8007ac4:	20001160 	.word	0x20001160
 8007ac8:	2000115c 	.word	0x2000115c
 8007acc:	20000010 	.word	0x20000010

08007ad0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b084      	sub	sp, #16
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d10b      	bne.n	8007af8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ae4:	f383 8811 	msr	BASEPRI, r3
 8007ae8:	f3bf 8f6f 	isb	sy
 8007aec:	f3bf 8f4f 	dsb	sy
 8007af0:	60fb      	str	r3, [r7, #12]
}
 8007af2:	bf00      	nop
 8007af4:	bf00      	nop
 8007af6:	e7fd      	b.n	8007af4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007af8:	4b07      	ldr	r3, [pc, #28]	@ (8007b18 <vTaskPlaceOnEventList+0x48>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	3318      	adds	r3, #24
 8007afe:	4619      	mov	r1, r3
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f7fe fd4c 	bl	800659e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b06:	2101      	movs	r1, #1
 8007b08:	6838      	ldr	r0, [r7, #0]
 8007b0a:	f000 fa87 	bl	800801c <prvAddCurrentTaskToDelayedList>
}
 8007b0e:	bf00      	nop
 8007b10:	3710      	adds	r7, #16
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	2000115c 	.word	0x2000115c

08007b1c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b086      	sub	sp, #24
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d10b      	bne.n	8007b46 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b32:	f383 8811 	msr	BASEPRI, r3
 8007b36:	f3bf 8f6f 	isb	sy
 8007b3a:	f3bf 8f4f 	dsb	sy
 8007b3e:	617b      	str	r3, [r7, #20]
}
 8007b40:	bf00      	nop
 8007b42:	bf00      	nop
 8007b44:	e7fd      	b.n	8007b42 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b46:	4b0a      	ldr	r3, [pc, #40]	@ (8007b70 <vTaskPlaceOnEventListRestricted+0x54>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	3318      	adds	r3, #24
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	68f8      	ldr	r0, [r7, #12]
 8007b50:	f7fe fd01 	bl	8006556 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d002      	beq.n	8007b60 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007b5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007b5e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007b60:	6879      	ldr	r1, [r7, #4]
 8007b62:	68b8      	ldr	r0, [r7, #8]
 8007b64:	f000 fa5a 	bl	800801c <prvAddCurrentTaskToDelayedList>
	}
 8007b68:	bf00      	nop
 8007b6a:	3718      	adds	r7, #24
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	2000115c 	.word	0x2000115c

08007b74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b086      	sub	sp, #24
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	68db      	ldr	r3, [r3, #12]
 8007b82:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d10b      	bne.n	8007ba2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b8e:	f383 8811 	msr	BASEPRI, r3
 8007b92:	f3bf 8f6f 	isb	sy
 8007b96:	f3bf 8f4f 	dsb	sy
 8007b9a:	60fb      	str	r3, [r7, #12]
}
 8007b9c:	bf00      	nop
 8007b9e:	bf00      	nop
 8007ba0:	e7fd      	b.n	8007b9e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	3318      	adds	r3, #24
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f7fe fd32 	bl	8006610 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bac:	4b1d      	ldr	r3, [pc, #116]	@ (8007c24 <xTaskRemoveFromEventList+0xb0>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d11d      	bne.n	8007bf0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	3304      	adds	r3, #4
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f7fe fd29 	bl	8006610 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bc2:	4b19      	ldr	r3, [pc, #100]	@ (8007c28 <xTaskRemoveFromEventList+0xb4>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d903      	bls.n	8007bd2 <xTaskRemoveFromEventList+0x5e>
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bce:	4a16      	ldr	r2, [pc, #88]	@ (8007c28 <xTaskRemoveFromEventList+0xb4>)
 8007bd0:	6013      	str	r3, [r2, #0]
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bd6:	4613      	mov	r3, r2
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	4413      	add	r3, r2
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	4a13      	ldr	r2, [pc, #76]	@ (8007c2c <xTaskRemoveFromEventList+0xb8>)
 8007be0:	441a      	add	r2, r3
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	3304      	adds	r3, #4
 8007be6:	4619      	mov	r1, r3
 8007be8:	4610      	mov	r0, r2
 8007bea:	f7fe fcb4 	bl	8006556 <vListInsertEnd>
 8007bee:	e005      	b.n	8007bfc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	3318      	adds	r3, #24
 8007bf4:	4619      	mov	r1, r3
 8007bf6:	480e      	ldr	r0, [pc, #56]	@ (8007c30 <xTaskRemoveFromEventList+0xbc>)
 8007bf8:	f7fe fcad 	bl	8006556 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c00:	4b0c      	ldr	r3, [pc, #48]	@ (8007c34 <xTaskRemoveFromEventList+0xc0>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d905      	bls.n	8007c16 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8007c38 <xTaskRemoveFromEventList+0xc4>)
 8007c10:	2201      	movs	r2, #1
 8007c12:	601a      	str	r2, [r3, #0]
 8007c14:	e001      	b.n	8007c1a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007c16:	2300      	movs	r3, #0
 8007c18:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007c1a:	697b      	ldr	r3, [r7, #20]
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3718      	adds	r7, #24
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}
 8007c24:	20001658 	.word	0x20001658
 8007c28:	20001638 	.word	0x20001638
 8007c2c:	20001160 	.word	0x20001160
 8007c30:	200015f0 	.word	0x200015f0
 8007c34:	2000115c 	.word	0x2000115c
 8007c38:	20001644 	.word	0x20001644

08007c3c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007c44:	4b06      	ldr	r3, [pc, #24]	@ (8007c60 <vTaskInternalSetTimeOutState+0x24>)
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007c4c:	4b05      	ldr	r3, [pc, #20]	@ (8007c64 <vTaskInternalSetTimeOutState+0x28>)
 8007c4e:	681a      	ldr	r2, [r3, #0]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	605a      	str	r2, [r3, #4]
}
 8007c54:	bf00      	nop
 8007c56:	370c      	adds	r7, #12
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr
 8007c60:	20001648 	.word	0x20001648
 8007c64:	20001634 	.word	0x20001634

08007c68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b088      	sub	sp, #32
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d10b      	bne.n	8007c90 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007c78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c7c:	f383 8811 	msr	BASEPRI, r3
 8007c80:	f3bf 8f6f 	isb	sy
 8007c84:	f3bf 8f4f 	dsb	sy
 8007c88:	613b      	str	r3, [r7, #16]
}
 8007c8a:	bf00      	nop
 8007c8c:	bf00      	nop
 8007c8e:	e7fd      	b.n	8007c8c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d10b      	bne.n	8007cae <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c9a:	f383 8811 	msr	BASEPRI, r3
 8007c9e:	f3bf 8f6f 	isb	sy
 8007ca2:	f3bf 8f4f 	dsb	sy
 8007ca6:	60fb      	str	r3, [r7, #12]
}
 8007ca8:	bf00      	nop
 8007caa:	bf00      	nop
 8007cac:	e7fd      	b.n	8007caa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007cae:	f000 fe93 	bl	80089d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007cb2:	4b1d      	ldr	r3, [pc, #116]	@ (8007d28 <xTaskCheckForTimeOut+0xc0>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	69ba      	ldr	r2, [r7, #24]
 8007cbe:	1ad3      	subs	r3, r2, r3
 8007cc0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007cca:	d102      	bne.n	8007cd2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	61fb      	str	r3, [r7, #28]
 8007cd0:	e023      	b.n	8007d1a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	4b15      	ldr	r3, [pc, #84]	@ (8007d2c <xTaskCheckForTimeOut+0xc4>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d007      	beq.n	8007cee <xTaskCheckForTimeOut+0x86>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	69ba      	ldr	r2, [r7, #24]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d302      	bcc.n	8007cee <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	61fb      	str	r3, [r7, #28]
 8007cec:	e015      	b.n	8007d1a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	697a      	ldr	r2, [r7, #20]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d20b      	bcs.n	8007d10 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	1ad2      	subs	r2, r2, r3
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f7ff ff99 	bl	8007c3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	61fb      	str	r3, [r7, #28]
 8007d0e:	e004      	b.n	8007d1a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	2200      	movs	r2, #0
 8007d14:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007d16:	2301      	movs	r3, #1
 8007d18:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007d1a:	f000 fe8f 	bl	8008a3c <vPortExitCritical>

	return xReturn;
 8007d1e:	69fb      	ldr	r3, [r7, #28]
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3720      	adds	r7, #32
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	20001634 	.word	0x20001634
 8007d2c:	20001648 	.word	0x20001648

08007d30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007d30:	b480      	push	{r7}
 8007d32:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007d34:	4b03      	ldr	r3, [pc, #12]	@ (8007d44 <vTaskMissedYield+0x14>)
 8007d36:	2201      	movs	r2, #1
 8007d38:	601a      	str	r2, [r3, #0]
}
 8007d3a:	bf00      	nop
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr
 8007d44:	20001644 	.word	0x20001644

08007d48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b082      	sub	sp, #8
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007d50:	f000 f852 	bl	8007df8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007d54:	4b06      	ldr	r3, [pc, #24]	@ (8007d70 <prvIdleTask+0x28>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d9f9      	bls.n	8007d50 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007d5c:	4b05      	ldr	r3, [pc, #20]	@ (8007d74 <prvIdleTask+0x2c>)
 8007d5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d62:	601a      	str	r2, [r3, #0]
 8007d64:	f3bf 8f4f 	dsb	sy
 8007d68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007d6c:	e7f0      	b.n	8007d50 <prvIdleTask+0x8>
 8007d6e:	bf00      	nop
 8007d70:	20001160 	.word	0x20001160
 8007d74:	e000ed04 	.word	0xe000ed04

08007d78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d7e:	2300      	movs	r3, #0
 8007d80:	607b      	str	r3, [r7, #4]
 8007d82:	e00c      	b.n	8007d9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	4613      	mov	r3, r2
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	4413      	add	r3, r2
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	4a12      	ldr	r2, [pc, #72]	@ (8007dd8 <prvInitialiseTaskLists+0x60>)
 8007d90:	4413      	add	r3, r2
 8007d92:	4618      	mov	r0, r3
 8007d94:	f7fe fbb2 	bl	80064fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	607b      	str	r3, [r7, #4]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2b37      	cmp	r3, #55	@ 0x37
 8007da2:	d9ef      	bls.n	8007d84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007da4:	480d      	ldr	r0, [pc, #52]	@ (8007ddc <prvInitialiseTaskLists+0x64>)
 8007da6:	f7fe fba9 	bl	80064fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007daa:	480d      	ldr	r0, [pc, #52]	@ (8007de0 <prvInitialiseTaskLists+0x68>)
 8007dac:	f7fe fba6 	bl	80064fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007db0:	480c      	ldr	r0, [pc, #48]	@ (8007de4 <prvInitialiseTaskLists+0x6c>)
 8007db2:	f7fe fba3 	bl	80064fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007db6:	480c      	ldr	r0, [pc, #48]	@ (8007de8 <prvInitialiseTaskLists+0x70>)
 8007db8:	f7fe fba0 	bl	80064fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007dbc:	480b      	ldr	r0, [pc, #44]	@ (8007dec <prvInitialiseTaskLists+0x74>)
 8007dbe:	f7fe fb9d 	bl	80064fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8007df0 <prvInitialiseTaskLists+0x78>)
 8007dc4:	4a05      	ldr	r2, [pc, #20]	@ (8007ddc <prvInitialiseTaskLists+0x64>)
 8007dc6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007dc8:	4b0a      	ldr	r3, [pc, #40]	@ (8007df4 <prvInitialiseTaskLists+0x7c>)
 8007dca:	4a05      	ldr	r2, [pc, #20]	@ (8007de0 <prvInitialiseTaskLists+0x68>)
 8007dcc:	601a      	str	r2, [r3, #0]
}
 8007dce:	bf00      	nop
 8007dd0:	3708      	adds	r7, #8
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	20001160 	.word	0x20001160
 8007ddc:	200015c0 	.word	0x200015c0
 8007de0:	200015d4 	.word	0x200015d4
 8007de4:	200015f0 	.word	0x200015f0
 8007de8:	20001604 	.word	0x20001604
 8007dec:	2000161c 	.word	0x2000161c
 8007df0:	200015e8 	.word	0x200015e8
 8007df4:	200015ec 	.word	0x200015ec

08007df8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007dfe:	e019      	b.n	8007e34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007e00:	f000 fdea 	bl	80089d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e04:	4b10      	ldr	r3, [pc, #64]	@ (8007e48 <prvCheckTasksWaitingTermination+0x50>)
 8007e06:	68db      	ldr	r3, [r3, #12]
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	3304      	adds	r3, #4
 8007e10:	4618      	mov	r0, r3
 8007e12:	f7fe fbfd 	bl	8006610 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007e16:	4b0d      	ldr	r3, [pc, #52]	@ (8007e4c <prvCheckTasksWaitingTermination+0x54>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	3b01      	subs	r3, #1
 8007e1c:	4a0b      	ldr	r2, [pc, #44]	@ (8007e4c <prvCheckTasksWaitingTermination+0x54>)
 8007e1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007e20:	4b0b      	ldr	r3, [pc, #44]	@ (8007e50 <prvCheckTasksWaitingTermination+0x58>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	3b01      	subs	r3, #1
 8007e26:	4a0a      	ldr	r2, [pc, #40]	@ (8007e50 <prvCheckTasksWaitingTermination+0x58>)
 8007e28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007e2a:	f000 fe07 	bl	8008a3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 f810 	bl	8007e54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e34:	4b06      	ldr	r3, [pc, #24]	@ (8007e50 <prvCheckTasksWaitingTermination+0x58>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d1e1      	bne.n	8007e00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007e3c:	bf00      	nop
 8007e3e:	bf00      	nop
 8007e40:	3708      	adds	r7, #8
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	20001604 	.word	0x20001604
 8007e4c:	20001630 	.word	0x20001630
 8007e50:	20001618 	.word	0x20001618

08007e54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b084      	sub	sp, #16
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	3354      	adds	r3, #84	@ 0x54
 8007e60:	4618      	mov	r0, r3
 8007e62:	f001 f905 	bl	8009070 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d108      	bne.n	8007e82 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e74:	4618      	mov	r0, r3
 8007e76:	f000 ff9f 	bl	8008db8 <vPortFree>
				vPortFree( pxTCB );
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 ff9c 	bl	8008db8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007e80:	e019      	b.n	8007eb6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d103      	bne.n	8007e94 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 ff93 	bl	8008db8 <vPortFree>
	}
 8007e92:	e010      	b.n	8007eb6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007e9a:	2b02      	cmp	r3, #2
 8007e9c:	d00b      	beq.n	8007eb6 <prvDeleteTCB+0x62>
	__asm volatile
 8007e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ea2:	f383 8811 	msr	BASEPRI, r3
 8007ea6:	f3bf 8f6f 	isb	sy
 8007eaa:	f3bf 8f4f 	dsb	sy
 8007eae:	60fb      	str	r3, [r7, #12]
}
 8007eb0:	bf00      	nop
 8007eb2:	bf00      	nop
 8007eb4:	e7fd      	b.n	8007eb2 <prvDeleteTCB+0x5e>
	}
 8007eb6:	bf00      	nop
 8007eb8:	3710      	adds	r7, #16
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
	...

08007ec0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b083      	sub	sp, #12
 8007ec4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8007ef8 <prvResetNextTaskUnblockTime+0x38>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d104      	bne.n	8007eda <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8007efc <prvResetNextTaskUnblockTime+0x3c>)
 8007ed2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007ed6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007ed8:	e008      	b.n	8007eec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007eda:	4b07      	ldr	r3, [pc, #28]	@ (8007ef8 <prvResetNextTaskUnblockTime+0x38>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	68db      	ldr	r3, [r3, #12]
 8007ee0:	68db      	ldr	r3, [r3, #12]
 8007ee2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	4a04      	ldr	r2, [pc, #16]	@ (8007efc <prvResetNextTaskUnblockTime+0x3c>)
 8007eea:	6013      	str	r3, [r2, #0]
}
 8007eec:	bf00      	nop
 8007eee:	370c      	adds	r7, #12
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr
 8007ef8:	200015e8 	.word	0x200015e8
 8007efc:	20001650 	.word	0x20001650

08007f00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007f00:	b480      	push	{r7}
 8007f02:	b083      	sub	sp, #12
 8007f04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007f06:	4b0b      	ldr	r3, [pc, #44]	@ (8007f34 <xTaskGetSchedulerState+0x34>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d102      	bne.n	8007f14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	607b      	str	r3, [r7, #4]
 8007f12:	e008      	b.n	8007f26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f14:	4b08      	ldr	r3, [pc, #32]	@ (8007f38 <xTaskGetSchedulerState+0x38>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d102      	bne.n	8007f22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007f1c:	2302      	movs	r3, #2
 8007f1e:	607b      	str	r3, [r7, #4]
 8007f20:	e001      	b.n	8007f26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007f22:	2300      	movs	r3, #0
 8007f24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007f26:	687b      	ldr	r3, [r7, #4]
	}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr
 8007f34:	2000163c 	.word	0x2000163c
 8007f38:	20001658 	.word	0x20001658

08007f3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b086      	sub	sp, #24
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d058      	beq.n	8008004 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007f52:	4b2f      	ldr	r3, [pc, #188]	@ (8008010 <xTaskPriorityDisinherit+0xd4>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	693a      	ldr	r2, [r7, #16]
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d00b      	beq.n	8007f74 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007f5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f60:	f383 8811 	msr	BASEPRI, r3
 8007f64:	f3bf 8f6f 	isb	sy
 8007f68:	f3bf 8f4f 	dsb	sy
 8007f6c:	60fb      	str	r3, [r7, #12]
}
 8007f6e:	bf00      	nop
 8007f70:	bf00      	nop
 8007f72:	e7fd      	b.n	8007f70 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d10b      	bne.n	8007f94 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f80:	f383 8811 	msr	BASEPRI, r3
 8007f84:	f3bf 8f6f 	isb	sy
 8007f88:	f3bf 8f4f 	dsb	sy
 8007f8c:	60bb      	str	r3, [r7, #8]
}
 8007f8e:	bf00      	nop
 8007f90:	bf00      	nop
 8007f92:	e7fd      	b.n	8007f90 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f98:	1e5a      	subs	r2, r3, #1
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d02c      	beq.n	8008004 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d128      	bne.n	8008004 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	3304      	adds	r3, #4
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f7fe fb2a 	bl	8006610 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fc8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8008014 <xTaskPriorityDisinherit+0xd8>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	d903      	bls.n	8007fe4 <xTaskPriorityDisinherit+0xa8>
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fe0:	4a0c      	ldr	r2, [pc, #48]	@ (8008014 <xTaskPriorityDisinherit+0xd8>)
 8007fe2:	6013      	str	r3, [r2, #0]
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fe8:	4613      	mov	r3, r2
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	4413      	add	r3, r2
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	4a09      	ldr	r2, [pc, #36]	@ (8008018 <xTaskPriorityDisinherit+0xdc>)
 8007ff2:	441a      	add	r2, r3
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	3304      	adds	r3, #4
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	4610      	mov	r0, r2
 8007ffc:	f7fe faab 	bl	8006556 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008000:	2301      	movs	r3, #1
 8008002:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008004:	697b      	ldr	r3, [r7, #20]
	}
 8008006:	4618      	mov	r0, r3
 8008008:	3718      	adds	r7, #24
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
 800800e:	bf00      	nop
 8008010:	2000115c 	.word	0x2000115c
 8008014:	20001638 	.word	0x20001638
 8008018:	20001160 	.word	0x20001160

0800801c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008026:	4b21      	ldr	r3, [pc, #132]	@ (80080ac <prvAddCurrentTaskToDelayedList+0x90>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800802c:	4b20      	ldr	r3, [pc, #128]	@ (80080b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	3304      	adds	r3, #4
 8008032:	4618      	mov	r0, r3
 8008034:	f7fe faec 	bl	8006610 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800803e:	d10a      	bne.n	8008056 <prvAddCurrentTaskToDelayedList+0x3a>
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d007      	beq.n	8008056 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008046:	4b1a      	ldr	r3, [pc, #104]	@ (80080b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	3304      	adds	r3, #4
 800804c:	4619      	mov	r1, r3
 800804e:	4819      	ldr	r0, [pc, #100]	@ (80080b4 <prvAddCurrentTaskToDelayedList+0x98>)
 8008050:	f7fe fa81 	bl	8006556 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008054:	e026      	b.n	80080a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008056:	68fa      	ldr	r2, [r7, #12]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	4413      	add	r3, r2
 800805c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800805e:	4b14      	ldr	r3, [pc, #80]	@ (80080b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	68ba      	ldr	r2, [r7, #8]
 8008064:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008066:	68ba      	ldr	r2, [r7, #8]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	429a      	cmp	r2, r3
 800806c:	d209      	bcs.n	8008082 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800806e:	4b12      	ldr	r3, [pc, #72]	@ (80080b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	4b0f      	ldr	r3, [pc, #60]	@ (80080b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	3304      	adds	r3, #4
 8008078:	4619      	mov	r1, r3
 800807a:	4610      	mov	r0, r2
 800807c:	f7fe fa8f 	bl	800659e <vListInsert>
}
 8008080:	e010      	b.n	80080a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008082:	4b0e      	ldr	r3, [pc, #56]	@ (80080bc <prvAddCurrentTaskToDelayedList+0xa0>)
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	4b0a      	ldr	r3, [pc, #40]	@ (80080b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	3304      	adds	r3, #4
 800808c:	4619      	mov	r1, r3
 800808e:	4610      	mov	r0, r2
 8008090:	f7fe fa85 	bl	800659e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008094:	4b0a      	ldr	r3, [pc, #40]	@ (80080c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	68ba      	ldr	r2, [r7, #8]
 800809a:	429a      	cmp	r2, r3
 800809c:	d202      	bcs.n	80080a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800809e:	4a08      	ldr	r2, [pc, #32]	@ (80080c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	6013      	str	r3, [r2, #0]
}
 80080a4:	bf00      	nop
 80080a6:	3710      	adds	r7, #16
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}
 80080ac:	20001634 	.word	0x20001634
 80080b0:	2000115c 	.word	0x2000115c
 80080b4:	2000161c 	.word	0x2000161c
 80080b8:	200015ec 	.word	0x200015ec
 80080bc:	200015e8 	.word	0x200015e8
 80080c0:	20001650 	.word	0x20001650

080080c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b08a      	sub	sp, #40	@ 0x28
 80080c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80080ca:	2300      	movs	r3, #0
 80080cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80080ce:	f000 fb13 	bl	80086f8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80080d2:	4b1d      	ldr	r3, [pc, #116]	@ (8008148 <xTimerCreateTimerTask+0x84>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d021      	beq.n	800811e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80080da:	2300      	movs	r3, #0
 80080dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80080de:	2300      	movs	r3, #0
 80080e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80080e2:	1d3a      	adds	r2, r7, #4
 80080e4:	f107 0108 	add.w	r1, r7, #8
 80080e8:	f107 030c 	add.w	r3, r7, #12
 80080ec:	4618      	mov	r0, r3
 80080ee:	f7fe f9eb 	bl	80064c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80080f2:	6879      	ldr	r1, [r7, #4]
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	68fa      	ldr	r2, [r7, #12]
 80080f8:	9202      	str	r2, [sp, #8]
 80080fa:	9301      	str	r3, [sp, #4]
 80080fc:	2302      	movs	r3, #2
 80080fe:	9300      	str	r3, [sp, #0]
 8008100:	2300      	movs	r3, #0
 8008102:	460a      	mov	r2, r1
 8008104:	4911      	ldr	r1, [pc, #68]	@ (800814c <xTimerCreateTimerTask+0x88>)
 8008106:	4812      	ldr	r0, [pc, #72]	@ (8008150 <xTimerCreateTimerTask+0x8c>)
 8008108:	f7ff f8c6 	bl	8007298 <xTaskCreateStatic>
 800810c:	4603      	mov	r3, r0
 800810e:	4a11      	ldr	r2, [pc, #68]	@ (8008154 <xTimerCreateTimerTask+0x90>)
 8008110:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008112:	4b10      	ldr	r3, [pc, #64]	@ (8008154 <xTimerCreateTimerTask+0x90>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d001      	beq.n	800811e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800811a:	2301      	movs	r3, #1
 800811c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d10b      	bne.n	800813c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008128:	f383 8811 	msr	BASEPRI, r3
 800812c:	f3bf 8f6f 	isb	sy
 8008130:	f3bf 8f4f 	dsb	sy
 8008134:	613b      	str	r3, [r7, #16]
}
 8008136:	bf00      	nop
 8008138:	bf00      	nop
 800813a:	e7fd      	b.n	8008138 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800813c:	697b      	ldr	r3, [r7, #20]
}
 800813e:	4618      	mov	r0, r3
 8008140:	3718      	adds	r7, #24
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
 8008146:	bf00      	nop
 8008148:	2000168c 	.word	0x2000168c
 800814c:	0800a134 	.word	0x0800a134
 8008150:	08008291 	.word	0x08008291
 8008154:	20001690 	.word	0x20001690

08008158 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b08a      	sub	sp, #40	@ 0x28
 800815c:	af00      	add	r7, sp, #0
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	60b9      	str	r1, [r7, #8]
 8008162:	607a      	str	r2, [r7, #4]
 8008164:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008166:	2300      	movs	r3, #0
 8008168:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d10b      	bne.n	8008188 <xTimerGenericCommand+0x30>
	__asm volatile
 8008170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008174:	f383 8811 	msr	BASEPRI, r3
 8008178:	f3bf 8f6f 	isb	sy
 800817c:	f3bf 8f4f 	dsb	sy
 8008180:	623b      	str	r3, [r7, #32]
}
 8008182:	bf00      	nop
 8008184:	bf00      	nop
 8008186:	e7fd      	b.n	8008184 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008188:	4b19      	ldr	r3, [pc, #100]	@ (80081f0 <xTimerGenericCommand+0x98>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d02a      	beq.n	80081e6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	2b05      	cmp	r3, #5
 80081a0:	dc18      	bgt.n	80081d4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80081a2:	f7ff fead 	bl	8007f00 <xTaskGetSchedulerState>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b02      	cmp	r3, #2
 80081aa:	d109      	bne.n	80081c0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80081ac:	4b10      	ldr	r3, [pc, #64]	@ (80081f0 <xTimerGenericCommand+0x98>)
 80081ae:	6818      	ldr	r0, [r3, #0]
 80081b0:	f107 0110 	add.w	r1, r7, #16
 80081b4:	2300      	movs	r3, #0
 80081b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081b8:	f7fe fb9a 	bl	80068f0 <xQueueGenericSend>
 80081bc:	6278      	str	r0, [r7, #36]	@ 0x24
 80081be:	e012      	b.n	80081e6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80081c0:	4b0b      	ldr	r3, [pc, #44]	@ (80081f0 <xTimerGenericCommand+0x98>)
 80081c2:	6818      	ldr	r0, [r3, #0]
 80081c4:	f107 0110 	add.w	r1, r7, #16
 80081c8:	2300      	movs	r3, #0
 80081ca:	2200      	movs	r2, #0
 80081cc:	f7fe fb90 	bl	80068f0 <xQueueGenericSend>
 80081d0:	6278      	str	r0, [r7, #36]	@ 0x24
 80081d2:	e008      	b.n	80081e6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80081d4:	4b06      	ldr	r3, [pc, #24]	@ (80081f0 <xTimerGenericCommand+0x98>)
 80081d6:	6818      	ldr	r0, [r3, #0]
 80081d8:	f107 0110 	add.w	r1, r7, #16
 80081dc:	2300      	movs	r3, #0
 80081de:	683a      	ldr	r2, [r7, #0]
 80081e0:	f7fe fc88 	bl	8006af4 <xQueueGenericSendFromISR>
 80081e4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80081e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3728      	adds	r7, #40	@ 0x28
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}
 80081f0:	2000168c 	.word	0x2000168c

080081f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b088      	sub	sp, #32
 80081f8:	af02      	add	r7, sp, #8
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081fe:	4b23      	ldr	r3, [pc, #140]	@ (800828c <prvProcessExpiredTimer+0x98>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	68db      	ldr	r3, [r3, #12]
 8008204:	68db      	ldr	r3, [r3, #12]
 8008206:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	3304      	adds	r3, #4
 800820c:	4618      	mov	r0, r3
 800820e:	f7fe f9ff 	bl	8006610 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008218:	f003 0304 	and.w	r3, r3, #4
 800821c:	2b00      	cmp	r3, #0
 800821e:	d023      	beq.n	8008268 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	699a      	ldr	r2, [r3, #24]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	18d1      	adds	r1, r2, r3
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	683a      	ldr	r2, [r7, #0]
 800822c:	6978      	ldr	r0, [r7, #20]
 800822e:	f000 f8d5 	bl	80083dc <prvInsertTimerInActiveList>
 8008232:	4603      	mov	r3, r0
 8008234:	2b00      	cmp	r3, #0
 8008236:	d020      	beq.n	800827a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008238:	2300      	movs	r3, #0
 800823a:	9300      	str	r3, [sp, #0]
 800823c:	2300      	movs	r3, #0
 800823e:	687a      	ldr	r2, [r7, #4]
 8008240:	2100      	movs	r1, #0
 8008242:	6978      	ldr	r0, [r7, #20]
 8008244:	f7ff ff88 	bl	8008158 <xTimerGenericCommand>
 8008248:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d114      	bne.n	800827a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008254:	f383 8811 	msr	BASEPRI, r3
 8008258:	f3bf 8f6f 	isb	sy
 800825c:	f3bf 8f4f 	dsb	sy
 8008260:	60fb      	str	r3, [r7, #12]
}
 8008262:	bf00      	nop
 8008264:	bf00      	nop
 8008266:	e7fd      	b.n	8008264 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800826e:	f023 0301 	bic.w	r3, r3, #1
 8008272:	b2da      	uxtb	r2, r3
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	6a1b      	ldr	r3, [r3, #32]
 800827e:	6978      	ldr	r0, [r7, #20]
 8008280:	4798      	blx	r3
}
 8008282:	bf00      	nop
 8008284:	3718      	adds	r7, #24
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	20001684 	.word	0x20001684

08008290 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008298:	f107 0308 	add.w	r3, r7, #8
 800829c:	4618      	mov	r0, r3
 800829e:	f000 f859 	bl	8008354 <prvGetNextExpireTime>
 80082a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	4619      	mov	r1, r3
 80082a8:	68f8      	ldr	r0, [r7, #12]
 80082aa:	f000 f805 	bl	80082b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80082ae:	f000 f8d7 	bl	8008460 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80082b2:	bf00      	nop
 80082b4:	e7f0      	b.n	8008298 <prvTimerTask+0x8>
	...

080082b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80082c2:	f7ff fa17 	bl	80076f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80082c6:	f107 0308 	add.w	r3, r7, #8
 80082ca:	4618      	mov	r0, r3
 80082cc:	f000 f866 	bl	800839c <prvSampleTimeNow>
 80082d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d130      	bne.n	800833a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d10a      	bne.n	80082f4 <prvProcessTimerOrBlockTask+0x3c>
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d806      	bhi.n	80082f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80082e6:	f7ff fa13 	bl	8007710 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80082ea:	68f9      	ldr	r1, [r7, #12]
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f7ff ff81 	bl	80081f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80082f2:	e024      	b.n	800833e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d008      	beq.n	800830c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80082fa:	4b13      	ldr	r3, [pc, #76]	@ (8008348 <prvProcessTimerOrBlockTask+0x90>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d101      	bne.n	8008308 <prvProcessTimerOrBlockTask+0x50>
 8008304:	2301      	movs	r3, #1
 8008306:	e000      	b.n	800830a <prvProcessTimerOrBlockTask+0x52>
 8008308:	2300      	movs	r3, #0
 800830a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800830c:	4b0f      	ldr	r3, [pc, #60]	@ (800834c <prvProcessTimerOrBlockTask+0x94>)
 800830e:	6818      	ldr	r0, [r3, #0]
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	1ad3      	subs	r3, r2, r3
 8008316:	683a      	ldr	r2, [r7, #0]
 8008318:	4619      	mov	r1, r3
 800831a:	f7fe ff89 	bl	8007230 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800831e:	f7ff f9f7 	bl	8007710 <xTaskResumeAll>
 8008322:	4603      	mov	r3, r0
 8008324:	2b00      	cmp	r3, #0
 8008326:	d10a      	bne.n	800833e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008328:	4b09      	ldr	r3, [pc, #36]	@ (8008350 <prvProcessTimerOrBlockTask+0x98>)
 800832a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800832e:	601a      	str	r2, [r3, #0]
 8008330:	f3bf 8f4f 	dsb	sy
 8008334:	f3bf 8f6f 	isb	sy
}
 8008338:	e001      	b.n	800833e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800833a:	f7ff f9e9 	bl	8007710 <xTaskResumeAll>
}
 800833e:	bf00      	nop
 8008340:	3710      	adds	r7, #16
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop
 8008348:	20001688 	.word	0x20001688
 800834c:	2000168c 	.word	0x2000168c
 8008350:	e000ed04 	.word	0xe000ed04

08008354 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008354:	b480      	push	{r7}
 8008356:	b085      	sub	sp, #20
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800835c:	4b0e      	ldr	r3, [pc, #56]	@ (8008398 <prvGetNextExpireTime+0x44>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d101      	bne.n	800836a <prvGetNextExpireTime+0x16>
 8008366:	2201      	movs	r2, #1
 8008368:	e000      	b.n	800836c <prvGetNextExpireTime+0x18>
 800836a:	2200      	movs	r2, #0
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d105      	bne.n	8008384 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008378:	4b07      	ldr	r3, [pc, #28]	@ (8008398 <prvGetNextExpireTime+0x44>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	68db      	ldr	r3, [r3, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	60fb      	str	r3, [r7, #12]
 8008382:	e001      	b.n	8008388 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008384:	2300      	movs	r3, #0
 8008386:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008388:	68fb      	ldr	r3, [r7, #12]
}
 800838a:	4618      	mov	r0, r3
 800838c:	3714      	adds	r7, #20
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr
 8008396:	bf00      	nop
 8008398:	20001684 	.word	0x20001684

0800839c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80083a4:	f7ff fa52 	bl	800784c <xTaskGetTickCount>
 80083a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80083aa:	4b0b      	ldr	r3, [pc, #44]	@ (80083d8 <prvSampleTimeNow+0x3c>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	68fa      	ldr	r2, [r7, #12]
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d205      	bcs.n	80083c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80083b4:	f000 f93a 	bl	800862c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2201      	movs	r2, #1
 80083bc:	601a      	str	r2, [r3, #0]
 80083be:	e002      	b.n	80083c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80083c6:	4a04      	ldr	r2, [pc, #16]	@ (80083d8 <prvSampleTimeNow+0x3c>)
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80083cc:	68fb      	ldr	r3, [r7, #12]
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3710      	adds	r7, #16
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	20001694 	.word	0x20001694

080083dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b086      	sub	sp, #24
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	60f8      	str	r0, [r7, #12]
 80083e4:	60b9      	str	r1, [r7, #8]
 80083e6:	607a      	str	r2, [r7, #4]
 80083e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80083ea:	2300      	movs	r3, #0
 80083ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	68ba      	ldr	r2, [r7, #8]
 80083f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	68fa      	ldr	r2, [r7, #12]
 80083f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80083fa:	68ba      	ldr	r2, [r7, #8]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	429a      	cmp	r2, r3
 8008400:	d812      	bhi.n	8008428 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	1ad2      	subs	r2, r2, r3
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	699b      	ldr	r3, [r3, #24]
 800840c:	429a      	cmp	r2, r3
 800840e:	d302      	bcc.n	8008416 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008410:	2301      	movs	r3, #1
 8008412:	617b      	str	r3, [r7, #20]
 8008414:	e01b      	b.n	800844e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008416:	4b10      	ldr	r3, [pc, #64]	@ (8008458 <prvInsertTimerInActiveList+0x7c>)
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	3304      	adds	r3, #4
 800841e:	4619      	mov	r1, r3
 8008420:	4610      	mov	r0, r2
 8008422:	f7fe f8bc 	bl	800659e <vListInsert>
 8008426:	e012      	b.n	800844e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008428:	687a      	ldr	r2, [r7, #4]
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	429a      	cmp	r2, r3
 800842e:	d206      	bcs.n	800843e <prvInsertTimerInActiveList+0x62>
 8008430:	68ba      	ldr	r2, [r7, #8]
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	429a      	cmp	r2, r3
 8008436:	d302      	bcc.n	800843e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008438:	2301      	movs	r3, #1
 800843a:	617b      	str	r3, [r7, #20]
 800843c:	e007      	b.n	800844e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800843e:	4b07      	ldr	r3, [pc, #28]	@ (800845c <prvInsertTimerInActiveList+0x80>)
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	3304      	adds	r3, #4
 8008446:	4619      	mov	r1, r3
 8008448:	4610      	mov	r0, r2
 800844a:	f7fe f8a8 	bl	800659e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800844e:	697b      	ldr	r3, [r7, #20]
}
 8008450:	4618      	mov	r0, r3
 8008452:	3718      	adds	r7, #24
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}
 8008458:	20001688 	.word	0x20001688
 800845c:	20001684 	.word	0x20001684

08008460 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b08e      	sub	sp, #56	@ 0x38
 8008464:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008466:	e0ce      	b.n	8008606 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2b00      	cmp	r3, #0
 800846c:	da19      	bge.n	80084a2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800846e:	1d3b      	adds	r3, r7, #4
 8008470:	3304      	adds	r3, #4
 8008472:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008476:	2b00      	cmp	r3, #0
 8008478:	d10b      	bne.n	8008492 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800847a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800847e:	f383 8811 	msr	BASEPRI, r3
 8008482:	f3bf 8f6f 	isb	sy
 8008486:	f3bf 8f4f 	dsb	sy
 800848a:	61fb      	str	r3, [r7, #28]
}
 800848c:	bf00      	nop
 800848e:	bf00      	nop
 8008490:	e7fd      	b.n	800848e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008498:	6850      	ldr	r0, [r2, #4]
 800849a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800849c:	6892      	ldr	r2, [r2, #8]
 800849e:	4611      	mov	r1, r2
 80084a0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	f2c0 80ae 	blt.w	8008606 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80084ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084b0:	695b      	ldr	r3, [r3, #20]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d004      	beq.n	80084c0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80084b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084b8:	3304      	adds	r3, #4
 80084ba:	4618      	mov	r0, r3
 80084bc:	f7fe f8a8 	bl	8006610 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80084c0:	463b      	mov	r3, r7
 80084c2:	4618      	mov	r0, r3
 80084c4:	f7ff ff6a 	bl	800839c <prvSampleTimeNow>
 80084c8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2b09      	cmp	r3, #9
 80084ce:	f200 8097 	bhi.w	8008600 <prvProcessReceivedCommands+0x1a0>
 80084d2:	a201      	add	r2, pc, #4	@ (adr r2, 80084d8 <prvProcessReceivedCommands+0x78>)
 80084d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084d8:	08008501 	.word	0x08008501
 80084dc:	08008501 	.word	0x08008501
 80084e0:	08008501 	.word	0x08008501
 80084e4:	08008577 	.word	0x08008577
 80084e8:	0800858b 	.word	0x0800858b
 80084ec:	080085d7 	.word	0x080085d7
 80084f0:	08008501 	.word	0x08008501
 80084f4:	08008501 	.word	0x08008501
 80084f8:	08008577 	.word	0x08008577
 80084fc:	0800858b 	.word	0x0800858b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008502:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008506:	f043 0301 	orr.w	r3, r3, #1
 800850a:	b2da      	uxtb	r2, r3
 800850c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800850e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008512:	68ba      	ldr	r2, [r7, #8]
 8008514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008516:	699b      	ldr	r3, [r3, #24]
 8008518:	18d1      	adds	r1, r2, r3
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800851e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008520:	f7ff ff5c 	bl	80083dc <prvInsertTimerInActiveList>
 8008524:	4603      	mov	r3, r0
 8008526:	2b00      	cmp	r3, #0
 8008528:	d06c      	beq.n	8008604 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800852a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800852c:	6a1b      	ldr	r3, [r3, #32]
 800852e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008530:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008534:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008538:	f003 0304 	and.w	r3, r3, #4
 800853c:	2b00      	cmp	r3, #0
 800853e:	d061      	beq.n	8008604 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008540:	68ba      	ldr	r2, [r7, #8]
 8008542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008544:	699b      	ldr	r3, [r3, #24]
 8008546:	441a      	add	r2, r3
 8008548:	2300      	movs	r3, #0
 800854a:	9300      	str	r3, [sp, #0]
 800854c:	2300      	movs	r3, #0
 800854e:	2100      	movs	r1, #0
 8008550:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008552:	f7ff fe01 	bl	8008158 <xTimerGenericCommand>
 8008556:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008558:	6a3b      	ldr	r3, [r7, #32]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d152      	bne.n	8008604 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800855e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008562:	f383 8811 	msr	BASEPRI, r3
 8008566:	f3bf 8f6f 	isb	sy
 800856a:	f3bf 8f4f 	dsb	sy
 800856e:	61bb      	str	r3, [r7, #24]
}
 8008570:	bf00      	nop
 8008572:	bf00      	nop
 8008574:	e7fd      	b.n	8008572 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008578:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800857c:	f023 0301 	bic.w	r3, r3, #1
 8008580:	b2da      	uxtb	r2, r3
 8008582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008584:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008588:	e03d      	b.n	8008606 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800858a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800858c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008590:	f043 0301 	orr.w	r3, r3, #1
 8008594:	b2da      	uxtb	r2, r3
 8008596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008598:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800859c:	68ba      	ldr	r2, [r7, #8]
 800859e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085a0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80085a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085a4:	699b      	ldr	r3, [r3, #24]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d10b      	bne.n	80085c2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80085aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ae:	f383 8811 	msr	BASEPRI, r3
 80085b2:	f3bf 8f6f 	isb	sy
 80085b6:	f3bf 8f4f 	dsb	sy
 80085ba:	617b      	str	r3, [r7, #20]
}
 80085bc:	bf00      	nop
 80085be:	bf00      	nop
 80085c0:	e7fd      	b.n	80085be <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80085c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085c4:	699a      	ldr	r2, [r3, #24]
 80085c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085c8:	18d1      	adds	r1, r2, r3
 80085ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085d0:	f7ff ff04 	bl	80083dc <prvInsertTimerInActiveList>
					break;
 80085d4:	e017      	b.n	8008606 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80085d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80085dc:	f003 0302 	and.w	r3, r3, #2
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d103      	bne.n	80085ec <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80085e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085e6:	f000 fbe7 	bl	8008db8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80085ea:	e00c      	b.n	8008606 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80085ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80085f2:	f023 0301 	bic.w	r3, r3, #1
 80085f6:	b2da      	uxtb	r2, r3
 80085f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80085fe:	e002      	b.n	8008606 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008600:	bf00      	nop
 8008602:	e000      	b.n	8008606 <prvProcessReceivedCommands+0x1a6>
					break;
 8008604:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008606:	4b08      	ldr	r3, [pc, #32]	@ (8008628 <prvProcessReceivedCommands+0x1c8>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	1d39      	adds	r1, r7, #4
 800860c:	2200      	movs	r2, #0
 800860e:	4618      	mov	r0, r3
 8008610:	f7fe fb0e 	bl	8006c30 <xQueueReceive>
 8008614:	4603      	mov	r3, r0
 8008616:	2b00      	cmp	r3, #0
 8008618:	f47f af26 	bne.w	8008468 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800861c:	bf00      	nop
 800861e:	bf00      	nop
 8008620:	3730      	adds	r7, #48	@ 0x30
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
 8008626:	bf00      	nop
 8008628:	2000168c 	.word	0x2000168c

0800862c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b088      	sub	sp, #32
 8008630:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008632:	e049      	b.n	80086c8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008634:	4b2e      	ldr	r3, [pc, #184]	@ (80086f0 <prvSwitchTimerLists+0xc4>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	68db      	ldr	r3, [r3, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800863e:	4b2c      	ldr	r3, [pc, #176]	@ (80086f0 <prvSwitchTimerLists+0xc4>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	68db      	ldr	r3, [r3, #12]
 8008644:	68db      	ldr	r3, [r3, #12]
 8008646:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	3304      	adds	r3, #4
 800864c:	4618      	mov	r0, r3
 800864e:	f7fd ffdf 	bl	8006610 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	6a1b      	ldr	r3, [r3, #32]
 8008656:	68f8      	ldr	r0, [r7, #12]
 8008658:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008660:	f003 0304 	and.w	r3, r3, #4
 8008664:	2b00      	cmp	r3, #0
 8008666:	d02f      	beq.n	80086c8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	699b      	ldr	r3, [r3, #24]
 800866c:	693a      	ldr	r2, [r7, #16]
 800866e:	4413      	add	r3, r2
 8008670:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008672:	68ba      	ldr	r2, [r7, #8]
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	429a      	cmp	r2, r3
 8008678:	d90e      	bls.n	8008698 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	68ba      	ldr	r2, [r7, #8]
 800867e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	68fa      	ldr	r2, [r7, #12]
 8008684:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008686:	4b1a      	ldr	r3, [pc, #104]	@ (80086f0 <prvSwitchTimerLists+0xc4>)
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	3304      	adds	r3, #4
 800868e:	4619      	mov	r1, r3
 8008690:	4610      	mov	r0, r2
 8008692:	f7fd ff84 	bl	800659e <vListInsert>
 8008696:	e017      	b.n	80086c8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008698:	2300      	movs	r3, #0
 800869a:	9300      	str	r3, [sp, #0]
 800869c:	2300      	movs	r3, #0
 800869e:	693a      	ldr	r2, [r7, #16]
 80086a0:	2100      	movs	r1, #0
 80086a2:	68f8      	ldr	r0, [r7, #12]
 80086a4:	f7ff fd58 	bl	8008158 <xTimerGenericCommand>
 80086a8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d10b      	bne.n	80086c8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80086b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086b4:	f383 8811 	msr	BASEPRI, r3
 80086b8:	f3bf 8f6f 	isb	sy
 80086bc:	f3bf 8f4f 	dsb	sy
 80086c0:	603b      	str	r3, [r7, #0]
}
 80086c2:	bf00      	nop
 80086c4:	bf00      	nop
 80086c6:	e7fd      	b.n	80086c4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80086c8:	4b09      	ldr	r3, [pc, #36]	@ (80086f0 <prvSwitchTimerLists+0xc4>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d1b0      	bne.n	8008634 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80086d2:	4b07      	ldr	r3, [pc, #28]	@ (80086f0 <prvSwitchTimerLists+0xc4>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80086d8:	4b06      	ldr	r3, [pc, #24]	@ (80086f4 <prvSwitchTimerLists+0xc8>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a04      	ldr	r2, [pc, #16]	@ (80086f0 <prvSwitchTimerLists+0xc4>)
 80086de:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80086e0:	4a04      	ldr	r2, [pc, #16]	@ (80086f4 <prvSwitchTimerLists+0xc8>)
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	6013      	str	r3, [r2, #0]
}
 80086e6:	bf00      	nop
 80086e8:	3718      	adds	r7, #24
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	20001684 	.word	0x20001684
 80086f4:	20001688 	.word	0x20001688

080086f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80086fe:	f000 f96b 	bl	80089d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008702:	4b15      	ldr	r3, [pc, #84]	@ (8008758 <prvCheckForValidListAndQueue+0x60>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d120      	bne.n	800874c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800870a:	4814      	ldr	r0, [pc, #80]	@ (800875c <prvCheckForValidListAndQueue+0x64>)
 800870c:	f7fd fef6 	bl	80064fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008710:	4813      	ldr	r0, [pc, #76]	@ (8008760 <prvCheckForValidListAndQueue+0x68>)
 8008712:	f7fd fef3 	bl	80064fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008716:	4b13      	ldr	r3, [pc, #76]	@ (8008764 <prvCheckForValidListAndQueue+0x6c>)
 8008718:	4a10      	ldr	r2, [pc, #64]	@ (800875c <prvCheckForValidListAndQueue+0x64>)
 800871a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800871c:	4b12      	ldr	r3, [pc, #72]	@ (8008768 <prvCheckForValidListAndQueue+0x70>)
 800871e:	4a10      	ldr	r2, [pc, #64]	@ (8008760 <prvCheckForValidListAndQueue+0x68>)
 8008720:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008722:	2300      	movs	r3, #0
 8008724:	9300      	str	r3, [sp, #0]
 8008726:	4b11      	ldr	r3, [pc, #68]	@ (800876c <prvCheckForValidListAndQueue+0x74>)
 8008728:	4a11      	ldr	r2, [pc, #68]	@ (8008770 <prvCheckForValidListAndQueue+0x78>)
 800872a:	2110      	movs	r1, #16
 800872c:	200a      	movs	r0, #10
 800872e:	f7fe f803 	bl	8006738 <xQueueGenericCreateStatic>
 8008732:	4603      	mov	r3, r0
 8008734:	4a08      	ldr	r2, [pc, #32]	@ (8008758 <prvCheckForValidListAndQueue+0x60>)
 8008736:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008738:	4b07      	ldr	r3, [pc, #28]	@ (8008758 <prvCheckForValidListAndQueue+0x60>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d005      	beq.n	800874c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008740:	4b05      	ldr	r3, [pc, #20]	@ (8008758 <prvCheckForValidListAndQueue+0x60>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	490b      	ldr	r1, [pc, #44]	@ (8008774 <prvCheckForValidListAndQueue+0x7c>)
 8008746:	4618      	mov	r0, r3
 8008748:	f7fe fd48 	bl	80071dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800874c:	f000 f976 	bl	8008a3c <vPortExitCritical>
}
 8008750:	bf00      	nop
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	2000168c 	.word	0x2000168c
 800875c:	2000165c 	.word	0x2000165c
 8008760:	20001670 	.word	0x20001670
 8008764:	20001684 	.word	0x20001684
 8008768:	20001688 	.word	0x20001688
 800876c:	20001738 	.word	0x20001738
 8008770:	20001698 	.word	0x20001698
 8008774:	0800a13c 	.word	0x0800a13c

08008778 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008778:	b480      	push	{r7}
 800877a:	b085      	sub	sp, #20
 800877c:	af00      	add	r7, sp, #0
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	60b9      	str	r1, [r7, #8]
 8008782:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	3b04      	subs	r3, #4
 8008788:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008790:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	3b04      	subs	r3, #4
 8008796:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	f023 0201 	bic.w	r2, r3, #1
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	3b04      	subs	r3, #4
 80087a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80087a8:	4a0c      	ldr	r2, [pc, #48]	@ (80087dc <pxPortInitialiseStack+0x64>)
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	3b14      	subs	r3, #20
 80087b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	3b04      	subs	r3, #4
 80087be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f06f 0202 	mvn.w	r2, #2
 80087c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	3b20      	subs	r3, #32
 80087cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80087ce:	68fb      	ldr	r3, [r7, #12]
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3714      	adds	r7, #20
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr
 80087dc:	080087e1 	.word	0x080087e1

080087e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80087e0:	b480      	push	{r7}
 80087e2:	b085      	sub	sp, #20
 80087e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80087e6:	2300      	movs	r3, #0
 80087e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80087ea:	4b13      	ldr	r3, [pc, #76]	@ (8008838 <prvTaskExitError+0x58>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80087f2:	d00b      	beq.n	800880c <prvTaskExitError+0x2c>
	__asm volatile
 80087f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087f8:	f383 8811 	msr	BASEPRI, r3
 80087fc:	f3bf 8f6f 	isb	sy
 8008800:	f3bf 8f4f 	dsb	sy
 8008804:	60fb      	str	r3, [r7, #12]
}
 8008806:	bf00      	nop
 8008808:	bf00      	nop
 800880a:	e7fd      	b.n	8008808 <prvTaskExitError+0x28>
	__asm volatile
 800880c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008810:	f383 8811 	msr	BASEPRI, r3
 8008814:	f3bf 8f6f 	isb	sy
 8008818:	f3bf 8f4f 	dsb	sy
 800881c:	60bb      	str	r3, [r7, #8]
}
 800881e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008820:	bf00      	nop
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d0fc      	beq.n	8008822 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008828:	bf00      	nop
 800882a:	bf00      	nop
 800882c:	3714      	adds	r7, #20
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr
 8008836:	bf00      	nop
 8008838:	2000000c 	.word	0x2000000c
 800883c:	00000000 	.word	0x00000000

08008840 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008840:	4b07      	ldr	r3, [pc, #28]	@ (8008860 <pxCurrentTCBConst2>)
 8008842:	6819      	ldr	r1, [r3, #0]
 8008844:	6808      	ldr	r0, [r1, #0]
 8008846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800884a:	f380 8809 	msr	PSP, r0
 800884e:	f3bf 8f6f 	isb	sy
 8008852:	f04f 0000 	mov.w	r0, #0
 8008856:	f380 8811 	msr	BASEPRI, r0
 800885a:	4770      	bx	lr
 800885c:	f3af 8000 	nop.w

08008860 <pxCurrentTCBConst2>:
 8008860:	2000115c 	.word	0x2000115c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008864:	bf00      	nop
 8008866:	bf00      	nop

08008868 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008868:	4808      	ldr	r0, [pc, #32]	@ (800888c <prvPortStartFirstTask+0x24>)
 800886a:	6800      	ldr	r0, [r0, #0]
 800886c:	6800      	ldr	r0, [r0, #0]
 800886e:	f380 8808 	msr	MSP, r0
 8008872:	f04f 0000 	mov.w	r0, #0
 8008876:	f380 8814 	msr	CONTROL, r0
 800887a:	b662      	cpsie	i
 800887c:	b661      	cpsie	f
 800887e:	f3bf 8f4f 	dsb	sy
 8008882:	f3bf 8f6f 	isb	sy
 8008886:	df00      	svc	0
 8008888:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800888a:	bf00      	nop
 800888c:	e000ed08 	.word	0xe000ed08

08008890 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b086      	sub	sp, #24
 8008894:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008896:	4b47      	ldr	r3, [pc, #284]	@ (80089b4 <xPortStartScheduler+0x124>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a47      	ldr	r2, [pc, #284]	@ (80089b8 <xPortStartScheduler+0x128>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d10b      	bne.n	80088b8 <xPortStartScheduler+0x28>
	__asm volatile
 80088a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088a4:	f383 8811 	msr	BASEPRI, r3
 80088a8:	f3bf 8f6f 	isb	sy
 80088ac:	f3bf 8f4f 	dsb	sy
 80088b0:	613b      	str	r3, [r7, #16]
}
 80088b2:	bf00      	nop
 80088b4:	bf00      	nop
 80088b6:	e7fd      	b.n	80088b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80088b8:	4b3e      	ldr	r3, [pc, #248]	@ (80089b4 <xPortStartScheduler+0x124>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a3f      	ldr	r2, [pc, #252]	@ (80089bc <xPortStartScheduler+0x12c>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d10b      	bne.n	80088da <xPortStartScheduler+0x4a>
	__asm volatile
 80088c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088c6:	f383 8811 	msr	BASEPRI, r3
 80088ca:	f3bf 8f6f 	isb	sy
 80088ce:	f3bf 8f4f 	dsb	sy
 80088d2:	60fb      	str	r3, [r7, #12]
}
 80088d4:	bf00      	nop
 80088d6:	bf00      	nop
 80088d8:	e7fd      	b.n	80088d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80088da:	4b39      	ldr	r3, [pc, #228]	@ (80089c0 <xPortStartScheduler+0x130>)
 80088dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	22ff      	movs	r2, #255	@ 0xff
 80088ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80088f4:	78fb      	ldrb	r3, [r7, #3]
 80088f6:	b2db      	uxtb	r3, r3
 80088f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80088fc:	b2da      	uxtb	r2, r3
 80088fe:	4b31      	ldr	r3, [pc, #196]	@ (80089c4 <xPortStartScheduler+0x134>)
 8008900:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008902:	4b31      	ldr	r3, [pc, #196]	@ (80089c8 <xPortStartScheduler+0x138>)
 8008904:	2207      	movs	r2, #7
 8008906:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008908:	e009      	b.n	800891e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800890a:	4b2f      	ldr	r3, [pc, #188]	@ (80089c8 <xPortStartScheduler+0x138>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	3b01      	subs	r3, #1
 8008910:	4a2d      	ldr	r2, [pc, #180]	@ (80089c8 <xPortStartScheduler+0x138>)
 8008912:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008914:	78fb      	ldrb	r3, [r7, #3]
 8008916:	b2db      	uxtb	r3, r3
 8008918:	005b      	lsls	r3, r3, #1
 800891a:	b2db      	uxtb	r3, r3
 800891c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800891e:	78fb      	ldrb	r3, [r7, #3]
 8008920:	b2db      	uxtb	r3, r3
 8008922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008926:	2b80      	cmp	r3, #128	@ 0x80
 8008928:	d0ef      	beq.n	800890a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800892a:	4b27      	ldr	r3, [pc, #156]	@ (80089c8 <xPortStartScheduler+0x138>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f1c3 0307 	rsb	r3, r3, #7
 8008932:	2b04      	cmp	r3, #4
 8008934:	d00b      	beq.n	800894e <xPortStartScheduler+0xbe>
	__asm volatile
 8008936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800893a:	f383 8811 	msr	BASEPRI, r3
 800893e:	f3bf 8f6f 	isb	sy
 8008942:	f3bf 8f4f 	dsb	sy
 8008946:	60bb      	str	r3, [r7, #8]
}
 8008948:	bf00      	nop
 800894a:	bf00      	nop
 800894c:	e7fd      	b.n	800894a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800894e:	4b1e      	ldr	r3, [pc, #120]	@ (80089c8 <xPortStartScheduler+0x138>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	021b      	lsls	r3, r3, #8
 8008954:	4a1c      	ldr	r2, [pc, #112]	@ (80089c8 <xPortStartScheduler+0x138>)
 8008956:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008958:	4b1b      	ldr	r3, [pc, #108]	@ (80089c8 <xPortStartScheduler+0x138>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008960:	4a19      	ldr	r2, [pc, #100]	@ (80089c8 <xPortStartScheduler+0x138>)
 8008962:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	b2da      	uxtb	r2, r3
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800896c:	4b17      	ldr	r3, [pc, #92]	@ (80089cc <xPortStartScheduler+0x13c>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a16      	ldr	r2, [pc, #88]	@ (80089cc <xPortStartScheduler+0x13c>)
 8008972:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008976:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008978:	4b14      	ldr	r3, [pc, #80]	@ (80089cc <xPortStartScheduler+0x13c>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a13      	ldr	r2, [pc, #76]	@ (80089cc <xPortStartScheduler+0x13c>)
 800897e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008982:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008984:	f000 f8da 	bl	8008b3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008988:	4b11      	ldr	r3, [pc, #68]	@ (80089d0 <xPortStartScheduler+0x140>)
 800898a:	2200      	movs	r2, #0
 800898c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800898e:	f000 f8f9 	bl	8008b84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008992:	4b10      	ldr	r3, [pc, #64]	@ (80089d4 <xPortStartScheduler+0x144>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4a0f      	ldr	r2, [pc, #60]	@ (80089d4 <xPortStartScheduler+0x144>)
 8008998:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800899c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800899e:	f7ff ff63 	bl	8008868 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80089a2:	f7ff f82f 	bl	8007a04 <vTaskSwitchContext>
	prvTaskExitError();
 80089a6:	f7ff ff1b 	bl	80087e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3718      	adds	r7, #24
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}
 80089b4:	e000ed00 	.word	0xe000ed00
 80089b8:	410fc271 	.word	0x410fc271
 80089bc:	410fc270 	.word	0x410fc270
 80089c0:	e000e400 	.word	0xe000e400
 80089c4:	20001788 	.word	0x20001788
 80089c8:	2000178c 	.word	0x2000178c
 80089cc:	e000ed20 	.word	0xe000ed20
 80089d0:	2000000c 	.word	0x2000000c
 80089d4:	e000ef34 	.word	0xe000ef34

080089d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80089d8:	b480      	push	{r7}
 80089da:	b083      	sub	sp, #12
 80089dc:	af00      	add	r7, sp, #0
	__asm volatile
 80089de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089e2:	f383 8811 	msr	BASEPRI, r3
 80089e6:	f3bf 8f6f 	isb	sy
 80089ea:	f3bf 8f4f 	dsb	sy
 80089ee:	607b      	str	r3, [r7, #4]
}
 80089f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80089f2:	4b10      	ldr	r3, [pc, #64]	@ (8008a34 <vPortEnterCritical+0x5c>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	3301      	adds	r3, #1
 80089f8:	4a0e      	ldr	r2, [pc, #56]	@ (8008a34 <vPortEnterCritical+0x5c>)
 80089fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80089fc:	4b0d      	ldr	r3, [pc, #52]	@ (8008a34 <vPortEnterCritical+0x5c>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	d110      	bne.n	8008a26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008a04:	4b0c      	ldr	r3, [pc, #48]	@ (8008a38 <vPortEnterCritical+0x60>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	b2db      	uxtb	r3, r3
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d00b      	beq.n	8008a26 <vPortEnterCritical+0x4e>
	__asm volatile
 8008a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a12:	f383 8811 	msr	BASEPRI, r3
 8008a16:	f3bf 8f6f 	isb	sy
 8008a1a:	f3bf 8f4f 	dsb	sy
 8008a1e:	603b      	str	r3, [r7, #0]
}
 8008a20:	bf00      	nop
 8008a22:	bf00      	nop
 8008a24:	e7fd      	b.n	8008a22 <vPortEnterCritical+0x4a>
	}
}
 8008a26:	bf00      	nop
 8008a28:	370c      	adds	r7, #12
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a30:	4770      	bx	lr
 8008a32:	bf00      	nop
 8008a34:	2000000c 	.word	0x2000000c
 8008a38:	e000ed04 	.word	0xe000ed04

08008a3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b083      	sub	sp, #12
 8008a40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008a42:	4b12      	ldr	r3, [pc, #72]	@ (8008a8c <vPortExitCritical+0x50>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d10b      	bne.n	8008a62 <vPortExitCritical+0x26>
	__asm volatile
 8008a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a4e:	f383 8811 	msr	BASEPRI, r3
 8008a52:	f3bf 8f6f 	isb	sy
 8008a56:	f3bf 8f4f 	dsb	sy
 8008a5a:	607b      	str	r3, [r7, #4]
}
 8008a5c:	bf00      	nop
 8008a5e:	bf00      	nop
 8008a60:	e7fd      	b.n	8008a5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008a62:	4b0a      	ldr	r3, [pc, #40]	@ (8008a8c <vPortExitCritical+0x50>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	3b01      	subs	r3, #1
 8008a68:	4a08      	ldr	r2, [pc, #32]	@ (8008a8c <vPortExitCritical+0x50>)
 8008a6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008a6c:	4b07      	ldr	r3, [pc, #28]	@ (8008a8c <vPortExitCritical+0x50>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d105      	bne.n	8008a80 <vPortExitCritical+0x44>
 8008a74:	2300      	movs	r3, #0
 8008a76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	f383 8811 	msr	BASEPRI, r3
}
 8008a7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008a80:	bf00      	nop
 8008a82:	370c      	adds	r7, #12
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr
 8008a8c:	2000000c 	.word	0x2000000c

08008a90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008a90:	f3ef 8009 	mrs	r0, PSP
 8008a94:	f3bf 8f6f 	isb	sy
 8008a98:	4b15      	ldr	r3, [pc, #84]	@ (8008af0 <pxCurrentTCBConst>)
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	f01e 0f10 	tst.w	lr, #16
 8008aa0:	bf08      	it	eq
 8008aa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008aa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aaa:	6010      	str	r0, [r2, #0]
 8008aac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008ab0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008ab4:	f380 8811 	msr	BASEPRI, r0
 8008ab8:	f3bf 8f4f 	dsb	sy
 8008abc:	f3bf 8f6f 	isb	sy
 8008ac0:	f7fe ffa0 	bl	8007a04 <vTaskSwitchContext>
 8008ac4:	f04f 0000 	mov.w	r0, #0
 8008ac8:	f380 8811 	msr	BASEPRI, r0
 8008acc:	bc09      	pop	{r0, r3}
 8008ace:	6819      	ldr	r1, [r3, #0]
 8008ad0:	6808      	ldr	r0, [r1, #0]
 8008ad2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ad6:	f01e 0f10 	tst.w	lr, #16
 8008ada:	bf08      	it	eq
 8008adc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008ae0:	f380 8809 	msr	PSP, r0
 8008ae4:	f3bf 8f6f 	isb	sy
 8008ae8:	4770      	bx	lr
 8008aea:	bf00      	nop
 8008aec:	f3af 8000 	nop.w

08008af0 <pxCurrentTCBConst>:
 8008af0:	2000115c 	.word	0x2000115c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008af4:	bf00      	nop
 8008af6:	bf00      	nop

08008af8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b082      	sub	sp, #8
 8008afc:	af00      	add	r7, sp, #0
	__asm volatile
 8008afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b02:	f383 8811 	msr	BASEPRI, r3
 8008b06:	f3bf 8f6f 	isb	sy
 8008b0a:	f3bf 8f4f 	dsb	sy
 8008b0e:	607b      	str	r3, [r7, #4]
}
 8008b10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008b12:	f7fe febd 	bl	8007890 <xTaskIncrementTick>
 8008b16:	4603      	mov	r3, r0
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d003      	beq.n	8008b24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008b1c:	4b06      	ldr	r3, [pc, #24]	@ (8008b38 <xPortSysTickHandler+0x40>)
 8008b1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b22:	601a      	str	r2, [r3, #0]
 8008b24:	2300      	movs	r3, #0
 8008b26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	f383 8811 	msr	BASEPRI, r3
}
 8008b2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008b30:	bf00      	nop
 8008b32:	3708      	adds	r7, #8
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}
 8008b38:	e000ed04 	.word	0xe000ed04

08008b3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008b40:	4b0b      	ldr	r3, [pc, #44]	@ (8008b70 <vPortSetupTimerInterrupt+0x34>)
 8008b42:	2200      	movs	r2, #0
 8008b44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008b46:	4b0b      	ldr	r3, [pc, #44]	@ (8008b74 <vPortSetupTimerInterrupt+0x38>)
 8008b48:	2200      	movs	r2, #0
 8008b4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8008b78 <vPortSetupTimerInterrupt+0x3c>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a0a      	ldr	r2, [pc, #40]	@ (8008b7c <vPortSetupTimerInterrupt+0x40>)
 8008b52:	fba2 2303 	umull	r2, r3, r2, r3
 8008b56:	099b      	lsrs	r3, r3, #6
 8008b58:	4a09      	ldr	r2, [pc, #36]	@ (8008b80 <vPortSetupTimerInterrupt+0x44>)
 8008b5a:	3b01      	subs	r3, #1
 8008b5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008b5e:	4b04      	ldr	r3, [pc, #16]	@ (8008b70 <vPortSetupTimerInterrupt+0x34>)
 8008b60:	2207      	movs	r2, #7
 8008b62:	601a      	str	r2, [r3, #0]
}
 8008b64:	bf00      	nop
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr
 8008b6e:	bf00      	nop
 8008b70:	e000e010 	.word	0xe000e010
 8008b74:	e000e018 	.word	0xe000e018
 8008b78:	20000000 	.word	0x20000000
 8008b7c:	10624dd3 	.word	0x10624dd3
 8008b80:	e000e014 	.word	0xe000e014

08008b84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008b84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008b94 <vPortEnableVFP+0x10>
 8008b88:	6801      	ldr	r1, [r0, #0]
 8008b8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008b8e:	6001      	str	r1, [r0, #0]
 8008b90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008b92:	bf00      	nop
 8008b94:	e000ed88 	.word	0xe000ed88

08008b98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008b98:	b480      	push	{r7}
 8008b9a:	b085      	sub	sp, #20
 8008b9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008b9e:	f3ef 8305 	mrs	r3, IPSR
 8008ba2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2b0f      	cmp	r3, #15
 8008ba8:	d915      	bls.n	8008bd6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008baa:	4a18      	ldr	r2, [pc, #96]	@ (8008c0c <vPortValidateInterruptPriority+0x74>)
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	4413      	add	r3, r2
 8008bb0:	781b      	ldrb	r3, [r3, #0]
 8008bb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008bb4:	4b16      	ldr	r3, [pc, #88]	@ (8008c10 <vPortValidateInterruptPriority+0x78>)
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	7afa      	ldrb	r2, [r7, #11]
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d20b      	bcs.n	8008bd6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bc2:	f383 8811 	msr	BASEPRI, r3
 8008bc6:	f3bf 8f6f 	isb	sy
 8008bca:	f3bf 8f4f 	dsb	sy
 8008bce:	607b      	str	r3, [r7, #4]
}
 8008bd0:	bf00      	nop
 8008bd2:	bf00      	nop
 8008bd4:	e7fd      	b.n	8008bd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8008c14 <vPortValidateInterruptPriority+0x7c>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008bde:	4b0e      	ldr	r3, [pc, #56]	@ (8008c18 <vPortValidateInterruptPriority+0x80>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d90b      	bls.n	8008bfe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bea:	f383 8811 	msr	BASEPRI, r3
 8008bee:	f3bf 8f6f 	isb	sy
 8008bf2:	f3bf 8f4f 	dsb	sy
 8008bf6:	603b      	str	r3, [r7, #0]
}
 8008bf8:	bf00      	nop
 8008bfa:	bf00      	nop
 8008bfc:	e7fd      	b.n	8008bfa <vPortValidateInterruptPriority+0x62>
	}
 8008bfe:	bf00      	nop
 8008c00:	3714      	adds	r7, #20
 8008c02:	46bd      	mov	sp, r7
 8008c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c08:	4770      	bx	lr
 8008c0a:	bf00      	nop
 8008c0c:	e000e3f0 	.word	0xe000e3f0
 8008c10:	20001788 	.word	0x20001788
 8008c14:	e000ed0c 	.word	0xe000ed0c
 8008c18:	2000178c 	.word	0x2000178c

08008c1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b08a      	sub	sp, #40	@ 0x28
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008c24:	2300      	movs	r3, #0
 8008c26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008c28:	f7fe fd64 	bl	80076f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008c2c:	4b5c      	ldr	r3, [pc, #368]	@ (8008da0 <pvPortMalloc+0x184>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d101      	bne.n	8008c38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008c34:	f000 f924 	bl	8008e80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008c38:	4b5a      	ldr	r3, [pc, #360]	@ (8008da4 <pvPortMalloc+0x188>)
 8008c3a:	681a      	ldr	r2, [r3, #0]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	4013      	ands	r3, r2
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	f040 8095 	bne.w	8008d70 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d01e      	beq.n	8008c8a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008c4c:	2208      	movs	r2, #8
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	4413      	add	r3, r2
 8008c52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f003 0307 	and.w	r3, r3, #7
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d015      	beq.n	8008c8a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f023 0307 	bic.w	r3, r3, #7
 8008c64:	3308      	adds	r3, #8
 8008c66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f003 0307 	and.w	r3, r3, #7
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d00b      	beq.n	8008c8a <pvPortMalloc+0x6e>
	__asm volatile
 8008c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c76:	f383 8811 	msr	BASEPRI, r3
 8008c7a:	f3bf 8f6f 	isb	sy
 8008c7e:	f3bf 8f4f 	dsb	sy
 8008c82:	617b      	str	r3, [r7, #20]
}
 8008c84:	bf00      	nop
 8008c86:	bf00      	nop
 8008c88:	e7fd      	b.n	8008c86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d06f      	beq.n	8008d70 <pvPortMalloc+0x154>
 8008c90:	4b45      	ldr	r3, [pc, #276]	@ (8008da8 <pvPortMalloc+0x18c>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d86a      	bhi.n	8008d70 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008c9a:	4b44      	ldr	r3, [pc, #272]	@ (8008dac <pvPortMalloc+0x190>)
 8008c9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008c9e:	4b43      	ldr	r3, [pc, #268]	@ (8008dac <pvPortMalloc+0x190>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ca4:	e004      	b.n	8008cb0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ca8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d903      	bls.n	8008cc2 <pvPortMalloc+0xa6>
 8008cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d1f1      	bne.n	8008ca6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008cc2:	4b37      	ldr	r3, [pc, #220]	@ (8008da0 <pvPortMalloc+0x184>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d051      	beq.n	8008d70 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008ccc:	6a3b      	ldr	r3, [r7, #32]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	2208      	movs	r2, #8
 8008cd2:	4413      	add	r3, r2
 8008cd4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	6a3b      	ldr	r3, [r7, #32]
 8008cdc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ce0:	685a      	ldr	r2, [r3, #4]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	1ad2      	subs	r2, r2, r3
 8008ce6:	2308      	movs	r3, #8
 8008ce8:	005b      	lsls	r3, r3, #1
 8008cea:	429a      	cmp	r2, r3
 8008cec:	d920      	bls.n	8008d30 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008cee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4413      	add	r3, r2
 8008cf4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008cf6:	69bb      	ldr	r3, [r7, #24]
 8008cf8:	f003 0307 	and.w	r3, r3, #7
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d00b      	beq.n	8008d18 <pvPortMalloc+0xfc>
	__asm volatile
 8008d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d04:	f383 8811 	msr	BASEPRI, r3
 8008d08:	f3bf 8f6f 	isb	sy
 8008d0c:	f3bf 8f4f 	dsb	sy
 8008d10:	613b      	str	r3, [r7, #16]
}
 8008d12:	bf00      	nop
 8008d14:	bf00      	nop
 8008d16:	e7fd      	b.n	8008d14 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d1a:	685a      	ldr	r2, [r3, #4]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	1ad2      	subs	r2, r2, r3
 8008d20:	69bb      	ldr	r3, [r7, #24]
 8008d22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008d2a:	69b8      	ldr	r0, [r7, #24]
 8008d2c:	f000 f90a 	bl	8008f44 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008d30:	4b1d      	ldr	r3, [pc, #116]	@ (8008da8 <pvPortMalloc+0x18c>)
 8008d32:	681a      	ldr	r2, [r3, #0]
 8008d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	1ad3      	subs	r3, r2, r3
 8008d3a:	4a1b      	ldr	r2, [pc, #108]	@ (8008da8 <pvPortMalloc+0x18c>)
 8008d3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008d3e:	4b1a      	ldr	r3, [pc, #104]	@ (8008da8 <pvPortMalloc+0x18c>)
 8008d40:	681a      	ldr	r2, [r3, #0]
 8008d42:	4b1b      	ldr	r3, [pc, #108]	@ (8008db0 <pvPortMalloc+0x194>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d203      	bcs.n	8008d52 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008d4a:	4b17      	ldr	r3, [pc, #92]	@ (8008da8 <pvPortMalloc+0x18c>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a18      	ldr	r2, [pc, #96]	@ (8008db0 <pvPortMalloc+0x194>)
 8008d50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d54:	685a      	ldr	r2, [r3, #4]
 8008d56:	4b13      	ldr	r3, [pc, #76]	@ (8008da4 <pvPortMalloc+0x188>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	431a      	orrs	r2, r3
 8008d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d62:	2200      	movs	r2, #0
 8008d64:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008d66:	4b13      	ldr	r3, [pc, #76]	@ (8008db4 <pvPortMalloc+0x198>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	4a11      	ldr	r2, [pc, #68]	@ (8008db4 <pvPortMalloc+0x198>)
 8008d6e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008d70:	f7fe fcce 	bl	8007710 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d74:	69fb      	ldr	r3, [r7, #28]
 8008d76:	f003 0307 	and.w	r3, r3, #7
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d00b      	beq.n	8008d96 <pvPortMalloc+0x17a>
	__asm volatile
 8008d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d82:	f383 8811 	msr	BASEPRI, r3
 8008d86:	f3bf 8f6f 	isb	sy
 8008d8a:	f3bf 8f4f 	dsb	sy
 8008d8e:	60fb      	str	r3, [r7, #12]
}
 8008d90:	bf00      	nop
 8008d92:	bf00      	nop
 8008d94:	e7fd      	b.n	8008d92 <pvPortMalloc+0x176>
	return pvReturn;
 8008d96:	69fb      	ldr	r3, [r7, #28]
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3728      	adds	r7, #40	@ 0x28
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}
 8008da0:	20005398 	.word	0x20005398
 8008da4:	200053ac 	.word	0x200053ac
 8008da8:	2000539c 	.word	0x2000539c
 8008dac:	20005390 	.word	0x20005390
 8008db0:	200053a0 	.word	0x200053a0
 8008db4:	200053a4 	.word	0x200053a4

08008db8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b086      	sub	sp, #24
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d04f      	beq.n	8008e6a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008dca:	2308      	movs	r3, #8
 8008dcc:	425b      	negs	r3, r3
 8008dce:	697a      	ldr	r2, [r7, #20]
 8008dd0:	4413      	add	r3, r2
 8008dd2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	685a      	ldr	r2, [r3, #4]
 8008ddc:	4b25      	ldr	r3, [pc, #148]	@ (8008e74 <vPortFree+0xbc>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4013      	ands	r3, r2
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d10b      	bne.n	8008dfe <vPortFree+0x46>
	__asm volatile
 8008de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dea:	f383 8811 	msr	BASEPRI, r3
 8008dee:	f3bf 8f6f 	isb	sy
 8008df2:	f3bf 8f4f 	dsb	sy
 8008df6:	60fb      	str	r3, [r7, #12]
}
 8008df8:	bf00      	nop
 8008dfa:	bf00      	nop
 8008dfc:	e7fd      	b.n	8008dfa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d00b      	beq.n	8008e1e <vPortFree+0x66>
	__asm volatile
 8008e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e0a:	f383 8811 	msr	BASEPRI, r3
 8008e0e:	f3bf 8f6f 	isb	sy
 8008e12:	f3bf 8f4f 	dsb	sy
 8008e16:	60bb      	str	r3, [r7, #8]
}
 8008e18:	bf00      	nop
 8008e1a:	bf00      	nop
 8008e1c:	e7fd      	b.n	8008e1a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	685a      	ldr	r2, [r3, #4]
 8008e22:	4b14      	ldr	r3, [pc, #80]	@ (8008e74 <vPortFree+0xbc>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4013      	ands	r3, r2
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d01e      	beq.n	8008e6a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d11a      	bne.n	8008e6a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	685a      	ldr	r2, [r3, #4]
 8008e38:	4b0e      	ldr	r3, [pc, #56]	@ (8008e74 <vPortFree+0xbc>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	43db      	mvns	r3, r3
 8008e3e:	401a      	ands	r2, r3
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008e44:	f7fe fc56 	bl	80076f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	685a      	ldr	r2, [r3, #4]
 8008e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8008e78 <vPortFree+0xc0>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4413      	add	r3, r2
 8008e52:	4a09      	ldr	r2, [pc, #36]	@ (8008e78 <vPortFree+0xc0>)
 8008e54:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008e56:	6938      	ldr	r0, [r7, #16]
 8008e58:	f000 f874 	bl	8008f44 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008e5c:	4b07      	ldr	r3, [pc, #28]	@ (8008e7c <vPortFree+0xc4>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	3301      	adds	r3, #1
 8008e62:	4a06      	ldr	r2, [pc, #24]	@ (8008e7c <vPortFree+0xc4>)
 8008e64:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008e66:	f7fe fc53 	bl	8007710 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008e6a:	bf00      	nop
 8008e6c:	3718      	adds	r7, #24
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	200053ac 	.word	0x200053ac
 8008e78:	2000539c 	.word	0x2000539c
 8008e7c:	200053a8 	.word	0x200053a8

08008e80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008e80:	b480      	push	{r7}
 8008e82:	b085      	sub	sp, #20
 8008e84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008e86:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008e8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008e8c:	4b27      	ldr	r3, [pc, #156]	@ (8008f2c <prvHeapInit+0xac>)
 8008e8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f003 0307 	and.w	r3, r3, #7
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d00c      	beq.n	8008eb4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	3307      	adds	r3, #7
 8008e9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f023 0307 	bic.w	r3, r3, #7
 8008ea6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008ea8:	68ba      	ldr	r2, [r7, #8]
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	1ad3      	subs	r3, r2, r3
 8008eae:	4a1f      	ldr	r2, [pc, #124]	@ (8008f2c <prvHeapInit+0xac>)
 8008eb0:	4413      	add	r3, r2
 8008eb2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008eb8:	4a1d      	ldr	r2, [pc, #116]	@ (8008f30 <prvHeapInit+0xb0>)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008ebe:	4b1c      	ldr	r3, [pc, #112]	@ (8008f30 <prvHeapInit+0xb0>)
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	68ba      	ldr	r2, [r7, #8]
 8008ec8:	4413      	add	r3, r2
 8008eca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008ecc:	2208      	movs	r2, #8
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	1a9b      	subs	r3, r3, r2
 8008ed2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f023 0307 	bic.w	r3, r3, #7
 8008eda:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	4a15      	ldr	r2, [pc, #84]	@ (8008f34 <prvHeapInit+0xb4>)
 8008ee0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008ee2:	4b14      	ldr	r3, [pc, #80]	@ (8008f34 <prvHeapInit+0xb4>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008eea:	4b12      	ldr	r3, [pc, #72]	@ (8008f34 <prvHeapInit+0xb4>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	68fa      	ldr	r2, [r7, #12]
 8008efa:	1ad2      	subs	r2, r2, r3
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008f00:	4b0c      	ldr	r3, [pc, #48]	@ (8008f34 <prvHeapInit+0xb4>)
 8008f02:	681a      	ldr	r2, [r3, #0]
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	4a0a      	ldr	r2, [pc, #40]	@ (8008f38 <prvHeapInit+0xb8>)
 8008f0e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	4a09      	ldr	r2, [pc, #36]	@ (8008f3c <prvHeapInit+0xbc>)
 8008f16:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008f18:	4b09      	ldr	r3, [pc, #36]	@ (8008f40 <prvHeapInit+0xc0>)
 8008f1a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008f1e:	601a      	str	r2, [r3, #0]
}
 8008f20:	bf00      	nop
 8008f22:	3714      	adds	r7, #20
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr
 8008f2c:	20001790 	.word	0x20001790
 8008f30:	20005390 	.word	0x20005390
 8008f34:	20005398 	.word	0x20005398
 8008f38:	200053a0 	.word	0x200053a0
 8008f3c:	2000539c 	.word	0x2000539c
 8008f40:	200053ac 	.word	0x200053ac

08008f44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008f44:	b480      	push	{r7}
 8008f46:	b085      	sub	sp, #20
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008f4c:	4b28      	ldr	r3, [pc, #160]	@ (8008ff0 <prvInsertBlockIntoFreeList+0xac>)
 8008f4e:	60fb      	str	r3, [r7, #12]
 8008f50:	e002      	b.n	8008f58 <prvInsertBlockIntoFreeList+0x14>
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	60fb      	str	r3, [r7, #12]
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	687a      	ldr	r2, [r7, #4]
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d8f7      	bhi.n	8008f52 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	68ba      	ldr	r2, [r7, #8]
 8008f6c:	4413      	add	r3, r2
 8008f6e:	687a      	ldr	r2, [r7, #4]
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d108      	bne.n	8008f86 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	685a      	ldr	r2, [r3, #4]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	441a      	add	r2, r3
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	68ba      	ldr	r2, [r7, #8]
 8008f90:	441a      	add	r2, r3
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d118      	bne.n	8008fcc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681a      	ldr	r2, [r3, #0]
 8008f9e:	4b15      	ldr	r3, [pc, #84]	@ (8008ff4 <prvInsertBlockIntoFreeList+0xb0>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	d00d      	beq.n	8008fc2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	685a      	ldr	r2, [r3, #4]
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	441a      	add	r2, r3
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	681a      	ldr	r2, [r3, #0]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	601a      	str	r2, [r3, #0]
 8008fc0:	e008      	b.n	8008fd4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8008ff4 <prvInsertBlockIntoFreeList+0xb0>)
 8008fc4:	681a      	ldr	r2, [r3, #0]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	601a      	str	r2, [r3, #0]
 8008fca:	e003      	b.n	8008fd4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681a      	ldr	r2, [r3, #0]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008fd4:	68fa      	ldr	r2, [r7, #12]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d002      	beq.n	8008fe2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	687a      	ldr	r2, [r7, #4]
 8008fe0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008fe2:	bf00      	nop
 8008fe4:	3714      	adds	r7, #20
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr
 8008fee:	bf00      	nop
 8008ff0:	20005390 	.word	0x20005390
 8008ff4:	20005398 	.word	0x20005398

08008ff8 <siprintf>:
 8008ff8:	b40e      	push	{r1, r2, r3}
 8008ffa:	b500      	push	{lr}
 8008ffc:	b09c      	sub	sp, #112	@ 0x70
 8008ffe:	ab1d      	add	r3, sp, #116	@ 0x74
 8009000:	9002      	str	r0, [sp, #8]
 8009002:	9006      	str	r0, [sp, #24]
 8009004:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009008:	4809      	ldr	r0, [pc, #36]	@ (8009030 <siprintf+0x38>)
 800900a:	9107      	str	r1, [sp, #28]
 800900c:	9104      	str	r1, [sp, #16]
 800900e:	4909      	ldr	r1, [pc, #36]	@ (8009034 <siprintf+0x3c>)
 8009010:	f853 2b04 	ldr.w	r2, [r3], #4
 8009014:	9105      	str	r1, [sp, #20]
 8009016:	6800      	ldr	r0, [r0, #0]
 8009018:	9301      	str	r3, [sp, #4]
 800901a:	a902      	add	r1, sp, #8
 800901c:	f000 fa0c 	bl	8009438 <_svfiprintf_r>
 8009020:	9b02      	ldr	r3, [sp, #8]
 8009022:	2200      	movs	r2, #0
 8009024:	701a      	strb	r2, [r3, #0]
 8009026:	b01c      	add	sp, #112	@ 0x70
 8009028:	f85d eb04 	ldr.w	lr, [sp], #4
 800902c:	b003      	add	sp, #12
 800902e:	4770      	bx	lr
 8009030:	20000010 	.word	0x20000010
 8009034:	ffff0208 	.word	0xffff0208

08009038 <memset>:
 8009038:	4402      	add	r2, r0
 800903a:	4603      	mov	r3, r0
 800903c:	4293      	cmp	r3, r2
 800903e:	d100      	bne.n	8009042 <memset+0xa>
 8009040:	4770      	bx	lr
 8009042:	f803 1b01 	strb.w	r1, [r3], #1
 8009046:	e7f9      	b.n	800903c <memset+0x4>

08009048 <strncpy>:
 8009048:	b510      	push	{r4, lr}
 800904a:	3901      	subs	r1, #1
 800904c:	4603      	mov	r3, r0
 800904e:	b132      	cbz	r2, 800905e <strncpy+0x16>
 8009050:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009054:	f803 4b01 	strb.w	r4, [r3], #1
 8009058:	3a01      	subs	r2, #1
 800905a:	2c00      	cmp	r4, #0
 800905c:	d1f7      	bne.n	800904e <strncpy+0x6>
 800905e:	441a      	add	r2, r3
 8009060:	2100      	movs	r1, #0
 8009062:	4293      	cmp	r3, r2
 8009064:	d100      	bne.n	8009068 <strncpy+0x20>
 8009066:	bd10      	pop	{r4, pc}
 8009068:	f803 1b01 	strb.w	r1, [r3], #1
 800906c:	e7f9      	b.n	8009062 <strncpy+0x1a>
	...

08009070 <_reclaim_reent>:
 8009070:	4b29      	ldr	r3, [pc, #164]	@ (8009118 <_reclaim_reent+0xa8>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4283      	cmp	r3, r0
 8009076:	b570      	push	{r4, r5, r6, lr}
 8009078:	4604      	mov	r4, r0
 800907a:	d04b      	beq.n	8009114 <_reclaim_reent+0xa4>
 800907c:	69c3      	ldr	r3, [r0, #28]
 800907e:	b1ab      	cbz	r3, 80090ac <_reclaim_reent+0x3c>
 8009080:	68db      	ldr	r3, [r3, #12]
 8009082:	b16b      	cbz	r3, 80090a0 <_reclaim_reent+0x30>
 8009084:	2500      	movs	r5, #0
 8009086:	69e3      	ldr	r3, [r4, #28]
 8009088:	68db      	ldr	r3, [r3, #12]
 800908a:	5959      	ldr	r1, [r3, r5]
 800908c:	2900      	cmp	r1, #0
 800908e:	d13b      	bne.n	8009108 <_reclaim_reent+0x98>
 8009090:	3504      	adds	r5, #4
 8009092:	2d80      	cmp	r5, #128	@ 0x80
 8009094:	d1f7      	bne.n	8009086 <_reclaim_reent+0x16>
 8009096:	69e3      	ldr	r3, [r4, #28]
 8009098:	4620      	mov	r0, r4
 800909a:	68d9      	ldr	r1, [r3, #12]
 800909c:	f000 f878 	bl	8009190 <_free_r>
 80090a0:	69e3      	ldr	r3, [r4, #28]
 80090a2:	6819      	ldr	r1, [r3, #0]
 80090a4:	b111      	cbz	r1, 80090ac <_reclaim_reent+0x3c>
 80090a6:	4620      	mov	r0, r4
 80090a8:	f000 f872 	bl	8009190 <_free_r>
 80090ac:	6961      	ldr	r1, [r4, #20]
 80090ae:	b111      	cbz	r1, 80090b6 <_reclaim_reent+0x46>
 80090b0:	4620      	mov	r0, r4
 80090b2:	f000 f86d 	bl	8009190 <_free_r>
 80090b6:	69e1      	ldr	r1, [r4, #28]
 80090b8:	b111      	cbz	r1, 80090c0 <_reclaim_reent+0x50>
 80090ba:	4620      	mov	r0, r4
 80090bc:	f000 f868 	bl	8009190 <_free_r>
 80090c0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80090c2:	b111      	cbz	r1, 80090ca <_reclaim_reent+0x5a>
 80090c4:	4620      	mov	r0, r4
 80090c6:	f000 f863 	bl	8009190 <_free_r>
 80090ca:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80090cc:	b111      	cbz	r1, 80090d4 <_reclaim_reent+0x64>
 80090ce:	4620      	mov	r0, r4
 80090d0:	f000 f85e 	bl	8009190 <_free_r>
 80090d4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80090d6:	b111      	cbz	r1, 80090de <_reclaim_reent+0x6e>
 80090d8:	4620      	mov	r0, r4
 80090da:	f000 f859 	bl	8009190 <_free_r>
 80090de:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80090e0:	b111      	cbz	r1, 80090e8 <_reclaim_reent+0x78>
 80090e2:	4620      	mov	r0, r4
 80090e4:	f000 f854 	bl	8009190 <_free_r>
 80090e8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80090ea:	b111      	cbz	r1, 80090f2 <_reclaim_reent+0x82>
 80090ec:	4620      	mov	r0, r4
 80090ee:	f000 f84f 	bl	8009190 <_free_r>
 80090f2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80090f4:	b111      	cbz	r1, 80090fc <_reclaim_reent+0x8c>
 80090f6:	4620      	mov	r0, r4
 80090f8:	f000 f84a 	bl	8009190 <_free_r>
 80090fc:	6a23      	ldr	r3, [r4, #32]
 80090fe:	b14b      	cbz	r3, 8009114 <_reclaim_reent+0xa4>
 8009100:	4620      	mov	r0, r4
 8009102:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009106:	4718      	bx	r3
 8009108:	680e      	ldr	r6, [r1, #0]
 800910a:	4620      	mov	r0, r4
 800910c:	f000 f840 	bl	8009190 <_free_r>
 8009110:	4631      	mov	r1, r6
 8009112:	e7bb      	b.n	800908c <_reclaim_reent+0x1c>
 8009114:	bd70      	pop	{r4, r5, r6, pc}
 8009116:	bf00      	nop
 8009118:	20000010 	.word	0x20000010

0800911c <__errno>:
 800911c:	4b01      	ldr	r3, [pc, #4]	@ (8009124 <__errno+0x8>)
 800911e:	6818      	ldr	r0, [r3, #0]
 8009120:	4770      	bx	lr
 8009122:	bf00      	nop
 8009124:	20000010 	.word	0x20000010

08009128 <__libc_init_array>:
 8009128:	b570      	push	{r4, r5, r6, lr}
 800912a:	4d0d      	ldr	r5, [pc, #52]	@ (8009160 <__libc_init_array+0x38>)
 800912c:	4c0d      	ldr	r4, [pc, #52]	@ (8009164 <__libc_init_array+0x3c>)
 800912e:	1b64      	subs	r4, r4, r5
 8009130:	10a4      	asrs	r4, r4, #2
 8009132:	2600      	movs	r6, #0
 8009134:	42a6      	cmp	r6, r4
 8009136:	d109      	bne.n	800914c <__libc_init_array+0x24>
 8009138:	4d0b      	ldr	r5, [pc, #44]	@ (8009168 <__libc_init_array+0x40>)
 800913a:	4c0c      	ldr	r4, [pc, #48]	@ (800916c <__libc_init_array+0x44>)
 800913c:	f000 fed0 	bl	8009ee0 <_init>
 8009140:	1b64      	subs	r4, r4, r5
 8009142:	10a4      	asrs	r4, r4, #2
 8009144:	2600      	movs	r6, #0
 8009146:	42a6      	cmp	r6, r4
 8009148:	d105      	bne.n	8009156 <__libc_init_array+0x2e>
 800914a:	bd70      	pop	{r4, r5, r6, pc}
 800914c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009150:	4798      	blx	r3
 8009152:	3601      	adds	r6, #1
 8009154:	e7ee      	b.n	8009134 <__libc_init_array+0xc>
 8009156:	f855 3b04 	ldr.w	r3, [r5], #4
 800915a:	4798      	blx	r3
 800915c:	3601      	adds	r6, #1
 800915e:	e7f2      	b.n	8009146 <__libc_init_array+0x1e>
 8009160:	0800a2a8 	.word	0x0800a2a8
 8009164:	0800a2a8 	.word	0x0800a2a8
 8009168:	0800a2a8 	.word	0x0800a2a8
 800916c:	0800a2ac 	.word	0x0800a2ac

08009170 <__retarget_lock_acquire_recursive>:
 8009170:	4770      	bx	lr

08009172 <__retarget_lock_release_recursive>:
 8009172:	4770      	bx	lr

08009174 <memcpy>:
 8009174:	440a      	add	r2, r1
 8009176:	4291      	cmp	r1, r2
 8009178:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800917c:	d100      	bne.n	8009180 <memcpy+0xc>
 800917e:	4770      	bx	lr
 8009180:	b510      	push	{r4, lr}
 8009182:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009186:	f803 4f01 	strb.w	r4, [r3, #1]!
 800918a:	4291      	cmp	r1, r2
 800918c:	d1f9      	bne.n	8009182 <memcpy+0xe>
 800918e:	bd10      	pop	{r4, pc}

08009190 <_free_r>:
 8009190:	b538      	push	{r3, r4, r5, lr}
 8009192:	4605      	mov	r5, r0
 8009194:	2900      	cmp	r1, #0
 8009196:	d041      	beq.n	800921c <_free_r+0x8c>
 8009198:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800919c:	1f0c      	subs	r4, r1, #4
 800919e:	2b00      	cmp	r3, #0
 80091a0:	bfb8      	it	lt
 80091a2:	18e4      	addlt	r4, r4, r3
 80091a4:	f000 f8e0 	bl	8009368 <__malloc_lock>
 80091a8:	4a1d      	ldr	r2, [pc, #116]	@ (8009220 <_free_r+0x90>)
 80091aa:	6813      	ldr	r3, [r2, #0]
 80091ac:	b933      	cbnz	r3, 80091bc <_free_r+0x2c>
 80091ae:	6063      	str	r3, [r4, #4]
 80091b0:	6014      	str	r4, [r2, #0]
 80091b2:	4628      	mov	r0, r5
 80091b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091b8:	f000 b8dc 	b.w	8009374 <__malloc_unlock>
 80091bc:	42a3      	cmp	r3, r4
 80091be:	d908      	bls.n	80091d2 <_free_r+0x42>
 80091c0:	6820      	ldr	r0, [r4, #0]
 80091c2:	1821      	adds	r1, r4, r0
 80091c4:	428b      	cmp	r3, r1
 80091c6:	bf01      	itttt	eq
 80091c8:	6819      	ldreq	r1, [r3, #0]
 80091ca:	685b      	ldreq	r3, [r3, #4]
 80091cc:	1809      	addeq	r1, r1, r0
 80091ce:	6021      	streq	r1, [r4, #0]
 80091d0:	e7ed      	b.n	80091ae <_free_r+0x1e>
 80091d2:	461a      	mov	r2, r3
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	b10b      	cbz	r3, 80091dc <_free_r+0x4c>
 80091d8:	42a3      	cmp	r3, r4
 80091da:	d9fa      	bls.n	80091d2 <_free_r+0x42>
 80091dc:	6811      	ldr	r1, [r2, #0]
 80091de:	1850      	adds	r0, r2, r1
 80091e0:	42a0      	cmp	r0, r4
 80091e2:	d10b      	bne.n	80091fc <_free_r+0x6c>
 80091e4:	6820      	ldr	r0, [r4, #0]
 80091e6:	4401      	add	r1, r0
 80091e8:	1850      	adds	r0, r2, r1
 80091ea:	4283      	cmp	r3, r0
 80091ec:	6011      	str	r1, [r2, #0]
 80091ee:	d1e0      	bne.n	80091b2 <_free_r+0x22>
 80091f0:	6818      	ldr	r0, [r3, #0]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	6053      	str	r3, [r2, #4]
 80091f6:	4408      	add	r0, r1
 80091f8:	6010      	str	r0, [r2, #0]
 80091fa:	e7da      	b.n	80091b2 <_free_r+0x22>
 80091fc:	d902      	bls.n	8009204 <_free_r+0x74>
 80091fe:	230c      	movs	r3, #12
 8009200:	602b      	str	r3, [r5, #0]
 8009202:	e7d6      	b.n	80091b2 <_free_r+0x22>
 8009204:	6820      	ldr	r0, [r4, #0]
 8009206:	1821      	adds	r1, r4, r0
 8009208:	428b      	cmp	r3, r1
 800920a:	bf04      	itt	eq
 800920c:	6819      	ldreq	r1, [r3, #0]
 800920e:	685b      	ldreq	r3, [r3, #4]
 8009210:	6063      	str	r3, [r4, #4]
 8009212:	bf04      	itt	eq
 8009214:	1809      	addeq	r1, r1, r0
 8009216:	6021      	streq	r1, [r4, #0]
 8009218:	6054      	str	r4, [r2, #4]
 800921a:	e7ca      	b.n	80091b2 <_free_r+0x22>
 800921c:	bd38      	pop	{r3, r4, r5, pc}
 800921e:	bf00      	nop
 8009220:	200054f4 	.word	0x200054f4

08009224 <sbrk_aligned>:
 8009224:	b570      	push	{r4, r5, r6, lr}
 8009226:	4e0f      	ldr	r6, [pc, #60]	@ (8009264 <sbrk_aligned+0x40>)
 8009228:	460c      	mov	r4, r1
 800922a:	6831      	ldr	r1, [r6, #0]
 800922c:	4605      	mov	r5, r0
 800922e:	b911      	cbnz	r1, 8009236 <sbrk_aligned+0x12>
 8009230:	f000 fba6 	bl	8009980 <_sbrk_r>
 8009234:	6030      	str	r0, [r6, #0]
 8009236:	4621      	mov	r1, r4
 8009238:	4628      	mov	r0, r5
 800923a:	f000 fba1 	bl	8009980 <_sbrk_r>
 800923e:	1c43      	adds	r3, r0, #1
 8009240:	d103      	bne.n	800924a <sbrk_aligned+0x26>
 8009242:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009246:	4620      	mov	r0, r4
 8009248:	bd70      	pop	{r4, r5, r6, pc}
 800924a:	1cc4      	adds	r4, r0, #3
 800924c:	f024 0403 	bic.w	r4, r4, #3
 8009250:	42a0      	cmp	r0, r4
 8009252:	d0f8      	beq.n	8009246 <sbrk_aligned+0x22>
 8009254:	1a21      	subs	r1, r4, r0
 8009256:	4628      	mov	r0, r5
 8009258:	f000 fb92 	bl	8009980 <_sbrk_r>
 800925c:	3001      	adds	r0, #1
 800925e:	d1f2      	bne.n	8009246 <sbrk_aligned+0x22>
 8009260:	e7ef      	b.n	8009242 <sbrk_aligned+0x1e>
 8009262:	bf00      	nop
 8009264:	200054f0 	.word	0x200054f0

08009268 <_malloc_r>:
 8009268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800926c:	1ccd      	adds	r5, r1, #3
 800926e:	f025 0503 	bic.w	r5, r5, #3
 8009272:	3508      	adds	r5, #8
 8009274:	2d0c      	cmp	r5, #12
 8009276:	bf38      	it	cc
 8009278:	250c      	movcc	r5, #12
 800927a:	2d00      	cmp	r5, #0
 800927c:	4606      	mov	r6, r0
 800927e:	db01      	blt.n	8009284 <_malloc_r+0x1c>
 8009280:	42a9      	cmp	r1, r5
 8009282:	d904      	bls.n	800928e <_malloc_r+0x26>
 8009284:	230c      	movs	r3, #12
 8009286:	6033      	str	r3, [r6, #0]
 8009288:	2000      	movs	r0, #0
 800928a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800928e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009364 <_malloc_r+0xfc>
 8009292:	f000 f869 	bl	8009368 <__malloc_lock>
 8009296:	f8d8 3000 	ldr.w	r3, [r8]
 800929a:	461c      	mov	r4, r3
 800929c:	bb44      	cbnz	r4, 80092f0 <_malloc_r+0x88>
 800929e:	4629      	mov	r1, r5
 80092a0:	4630      	mov	r0, r6
 80092a2:	f7ff ffbf 	bl	8009224 <sbrk_aligned>
 80092a6:	1c43      	adds	r3, r0, #1
 80092a8:	4604      	mov	r4, r0
 80092aa:	d158      	bne.n	800935e <_malloc_r+0xf6>
 80092ac:	f8d8 4000 	ldr.w	r4, [r8]
 80092b0:	4627      	mov	r7, r4
 80092b2:	2f00      	cmp	r7, #0
 80092b4:	d143      	bne.n	800933e <_malloc_r+0xd6>
 80092b6:	2c00      	cmp	r4, #0
 80092b8:	d04b      	beq.n	8009352 <_malloc_r+0xea>
 80092ba:	6823      	ldr	r3, [r4, #0]
 80092bc:	4639      	mov	r1, r7
 80092be:	4630      	mov	r0, r6
 80092c0:	eb04 0903 	add.w	r9, r4, r3
 80092c4:	f000 fb5c 	bl	8009980 <_sbrk_r>
 80092c8:	4581      	cmp	r9, r0
 80092ca:	d142      	bne.n	8009352 <_malloc_r+0xea>
 80092cc:	6821      	ldr	r1, [r4, #0]
 80092ce:	1a6d      	subs	r5, r5, r1
 80092d0:	4629      	mov	r1, r5
 80092d2:	4630      	mov	r0, r6
 80092d4:	f7ff ffa6 	bl	8009224 <sbrk_aligned>
 80092d8:	3001      	adds	r0, #1
 80092da:	d03a      	beq.n	8009352 <_malloc_r+0xea>
 80092dc:	6823      	ldr	r3, [r4, #0]
 80092de:	442b      	add	r3, r5
 80092e0:	6023      	str	r3, [r4, #0]
 80092e2:	f8d8 3000 	ldr.w	r3, [r8]
 80092e6:	685a      	ldr	r2, [r3, #4]
 80092e8:	bb62      	cbnz	r2, 8009344 <_malloc_r+0xdc>
 80092ea:	f8c8 7000 	str.w	r7, [r8]
 80092ee:	e00f      	b.n	8009310 <_malloc_r+0xa8>
 80092f0:	6822      	ldr	r2, [r4, #0]
 80092f2:	1b52      	subs	r2, r2, r5
 80092f4:	d420      	bmi.n	8009338 <_malloc_r+0xd0>
 80092f6:	2a0b      	cmp	r2, #11
 80092f8:	d917      	bls.n	800932a <_malloc_r+0xc2>
 80092fa:	1961      	adds	r1, r4, r5
 80092fc:	42a3      	cmp	r3, r4
 80092fe:	6025      	str	r5, [r4, #0]
 8009300:	bf18      	it	ne
 8009302:	6059      	strne	r1, [r3, #4]
 8009304:	6863      	ldr	r3, [r4, #4]
 8009306:	bf08      	it	eq
 8009308:	f8c8 1000 	streq.w	r1, [r8]
 800930c:	5162      	str	r2, [r4, r5]
 800930e:	604b      	str	r3, [r1, #4]
 8009310:	4630      	mov	r0, r6
 8009312:	f000 f82f 	bl	8009374 <__malloc_unlock>
 8009316:	f104 000b 	add.w	r0, r4, #11
 800931a:	1d23      	adds	r3, r4, #4
 800931c:	f020 0007 	bic.w	r0, r0, #7
 8009320:	1ac2      	subs	r2, r0, r3
 8009322:	bf1c      	itt	ne
 8009324:	1a1b      	subne	r3, r3, r0
 8009326:	50a3      	strne	r3, [r4, r2]
 8009328:	e7af      	b.n	800928a <_malloc_r+0x22>
 800932a:	6862      	ldr	r2, [r4, #4]
 800932c:	42a3      	cmp	r3, r4
 800932e:	bf0c      	ite	eq
 8009330:	f8c8 2000 	streq.w	r2, [r8]
 8009334:	605a      	strne	r2, [r3, #4]
 8009336:	e7eb      	b.n	8009310 <_malloc_r+0xa8>
 8009338:	4623      	mov	r3, r4
 800933a:	6864      	ldr	r4, [r4, #4]
 800933c:	e7ae      	b.n	800929c <_malloc_r+0x34>
 800933e:	463c      	mov	r4, r7
 8009340:	687f      	ldr	r7, [r7, #4]
 8009342:	e7b6      	b.n	80092b2 <_malloc_r+0x4a>
 8009344:	461a      	mov	r2, r3
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	42a3      	cmp	r3, r4
 800934a:	d1fb      	bne.n	8009344 <_malloc_r+0xdc>
 800934c:	2300      	movs	r3, #0
 800934e:	6053      	str	r3, [r2, #4]
 8009350:	e7de      	b.n	8009310 <_malloc_r+0xa8>
 8009352:	230c      	movs	r3, #12
 8009354:	6033      	str	r3, [r6, #0]
 8009356:	4630      	mov	r0, r6
 8009358:	f000 f80c 	bl	8009374 <__malloc_unlock>
 800935c:	e794      	b.n	8009288 <_malloc_r+0x20>
 800935e:	6005      	str	r5, [r0, #0]
 8009360:	e7d6      	b.n	8009310 <_malloc_r+0xa8>
 8009362:	bf00      	nop
 8009364:	200054f4 	.word	0x200054f4

08009368 <__malloc_lock>:
 8009368:	4801      	ldr	r0, [pc, #4]	@ (8009370 <__malloc_lock+0x8>)
 800936a:	f7ff bf01 	b.w	8009170 <__retarget_lock_acquire_recursive>
 800936e:	bf00      	nop
 8009370:	200054ec 	.word	0x200054ec

08009374 <__malloc_unlock>:
 8009374:	4801      	ldr	r0, [pc, #4]	@ (800937c <__malloc_unlock+0x8>)
 8009376:	f7ff befc 	b.w	8009172 <__retarget_lock_release_recursive>
 800937a:	bf00      	nop
 800937c:	200054ec 	.word	0x200054ec

08009380 <__ssputs_r>:
 8009380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009384:	688e      	ldr	r6, [r1, #8]
 8009386:	461f      	mov	r7, r3
 8009388:	42be      	cmp	r6, r7
 800938a:	680b      	ldr	r3, [r1, #0]
 800938c:	4682      	mov	sl, r0
 800938e:	460c      	mov	r4, r1
 8009390:	4690      	mov	r8, r2
 8009392:	d82d      	bhi.n	80093f0 <__ssputs_r+0x70>
 8009394:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009398:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800939c:	d026      	beq.n	80093ec <__ssputs_r+0x6c>
 800939e:	6965      	ldr	r5, [r4, #20]
 80093a0:	6909      	ldr	r1, [r1, #16]
 80093a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80093a6:	eba3 0901 	sub.w	r9, r3, r1
 80093aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80093ae:	1c7b      	adds	r3, r7, #1
 80093b0:	444b      	add	r3, r9
 80093b2:	106d      	asrs	r5, r5, #1
 80093b4:	429d      	cmp	r5, r3
 80093b6:	bf38      	it	cc
 80093b8:	461d      	movcc	r5, r3
 80093ba:	0553      	lsls	r3, r2, #21
 80093bc:	d527      	bpl.n	800940e <__ssputs_r+0x8e>
 80093be:	4629      	mov	r1, r5
 80093c0:	f7ff ff52 	bl	8009268 <_malloc_r>
 80093c4:	4606      	mov	r6, r0
 80093c6:	b360      	cbz	r0, 8009422 <__ssputs_r+0xa2>
 80093c8:	6921      	ldr	r1, [r4, #16]
 80093ca:	464a      	mov	r2, r9
 80093cc:	f7ff fed2 	bl	8009174 <memcpy>
 80093d0:	89a3      	ldrh	r3, [r4, #12]
 80093d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80093d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093da:	81a3      	strh	r3, [r4, #12]
 80093dc:	6126      	str	r6, [r4, #16]
 80093de:	6165      	str	r5, [r4, #20]
 80093e0:	444e      	add	r6, r9
 80093e2:	eba5 0509 	sub.w	r5, r5, r9
 80093e6:	6026      	str	r6, [r4, #0]
 80093e8:	60a5      	str	r5, [r4, #8]
 80093ea:	463e      	mov	r6, r7
 80093ec:	42be      	cmp	r6, r7
 80093ee:	d900      	bls.n	80093f2 <__ssputs_r+0x72>
 80093f0:	463e      	mov	r6, r7
 80093f2:	6820      	ldr	r0, [r4, #0]
 80093f4:	4632      	mov	r2, r6
 80093f6:	4641      	mov	r1, r8
 80093f8:	f000 faa8 	bl	800994c <memmove>
 80093fc:	68a3      	ldr	r3, [r4, #8]
 80093fe:	1b9b      	subs	r3, r3, r6
 8009400:	60a3      	str	r3, [r4, #8]
 8009402:	6823      	ldr	r3, [r4, #0]
 8009404:	4433      	add	r3, r6
 8009406:	6023      	str	r3, [r4, #0]
 8009408:	2000      	movs	r0, #0
 800940a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800940e:	462a      	mov	r2, r5
 8009410:	f000 fac6 	bl	80099a0 <_realloc_r>
 8009414:	4606      	mov	r6, r0
 8009416:	2800      	cmp	r0, #0
 8009418:	d1e0      	bne.n	80093dc <__ssputs_r+0x5c>
 800941a:	6921      	ldr	r1, [r4, #16]
 800941c:	4650      	mov	r0, sl
 800941e:	f7ff feb7 	bl	8009190 <_free_r>
 8009422:	230c      	movs	r3, #12
 8009424:	f8ca 3000 	str.w	r3, [sl]
 8009428:	89a3      	ldrh	r3, [r4, #12]
 800942a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800942e:	81a3      	strh	r3, [r4, #12]
 8009430:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009434:	e7e9      	b.n	800940a <__ssputs_r+0x8a>
	...

08009438 <_svfiprintf_r>:
 8009438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800943c:	4698      	mov	r8, r3
 800943e:	898b      	ldrh	r3, [r1, #12]
 8009440:	061b      	lsls	r3, r3, #24
 8009442:	b09d      	sub	sp, #116	@ 0x74
 8009444:	4607      	mov	r7, r0
 8009446:	460d      	mov	r5, r1
 8009448:	4614      	mov	r4, r2
 800944a:	d510      	bpl.n	800946e <_svfiprintf_r+0x36>
 800944c:	690b      	ldr	r3, [r1, #16]
 800944e:	b973      	cbnz	r3, 800946e <_svfiprintf_r+0x36>
 8009450:	2140      	movs	r1, #64	@ 0x40
 8009452:	f7ff ff09 	bl	8009268 <_malloc_r>
 8009456:	6028      	str	r0, [r5, #0]
 8009458:	6128      	str	r0, [r5, #16]
 800945a:	b930      	cbnz	r0, 800946a <_svfiprintf_r+0x32>
 800945c:	230c      	movs	r3, #12
 800945e:	603b      	str	r3, [r7, #0]
 8009460:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009464:	b01d      	add	sp, #116	@ 0x74
 8009466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800946a:	2340      	movs	r3, #64	@ 0x40
 800946c:	616b      	str	r3, [r5, #20]
 800946e:	2300      	movs	r3, #0
 8009470:	9309      	str	r3, [sp, #36]	@ 0x24
 8009472:	2320      	movs	r3, #32
 8009474:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009478:	f8cd 800c 	str.w	r8, [sp, #12]
 800947c:	2330      	movs	r3, #48	@ 0x30
 800947e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800961c <_svfiprintf_r+0x1e4>
 8009482:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009486:	f04f 0901 	mov.w	r9, #1
 800948a:	4623      	mov	r3, r4
 800948c:	469a      	mov	sl, r3
 800948e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009492:	b10a      	cbz	r2, 8009498 <_svfiprintf_r+0x60>
 8009494:	2a25      	cmp	r2, #37	@ 0x25
 8009496:	d1f9      	bne.n	800948c <_svfiprintf_r+0x54>
 8009498:	ebba 0b04 	subs.w	fp, sl, r4
 800949c:	d00b      	beq.n	80094b6 <_svfiprintf_r+0x7e>
 800949e:	465b      	mov	r3, fp
 80094a0:	4622      	mov	r2, r4
 80094a2:	4629      	mov	r1, r5
 80094a4:	4638      	mov	r0, r7
 80094a6:	f7ff ff6b 	bl	8009380 <__ssputs_r>
 80094aa:	3001      	adds	r0, #1
 80094ac:	f000 80a7 	beq.w	80095fe <_svfiprintf_r+0x1c6>
 80094b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80094b2:	445a      	add	r2, fp
 80094b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80094b6:	f89a 3000 	ldrb.w	r3, [sl]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	f000 809f 	beq.w	80095fe <_svfiprintf_r+0x1c6>
 80094c0:	2300      	movs	r3, #0
 80094c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80094c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094ca:	f10a 0a01 	add.w	sl, sl, #1
 80094ce:	9304      	str	r3, [sp, #16]
 80094d0:	9307      	str	r3, [sp, #28]
 80094d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80094d6:	931a      	str	r3, [sp, #104]	@ 0x68
 80094d8:	4654      	mov	r4, sl
 80094da:	2205      	movs	r2, #5
 80094dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094e0:	484e      	ldr	r0, [pc, #312]	@ (800961c <_svfiprintf_r+0x1e4>)
 80094e2:	f7f6 fe9d 	bl	8000220 <memchr>
 80094e6:	9a04      	ldr	r2, [sp, #16]
 80094e8:	b9d8      	cbnz	r0, 8009522 <_svfiprintf_r+0xea>
 80094ea:	06d0      	lsls	r0, r2, #27
 80094ec:	bf44      	itt	mi
 80094ee:	2320      	movmi	r3, #32
 80094f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80094f4:	0711      	lsls	r1, r2, #28
 80094f6:	bf44      	itt	mi
 80094f8:	232b      	movmi	r3, #43	@ 0x2b
 80094fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80094fe:	f89a 3000 	ldrb.w	r3, [sl]
 8009502:	2b2a      	cmp	r3, #42	@ 0x2a
 8009504:	d015      	beq.n	8009532 <_svfiprintf_r+0xfa>
 8009506:	9a07      	ldr	r2, [sp, #28]
 8009508:	4654      	mov	r4, sl
 800950a:	2000      	movs	r0, #0
 800950c:	f04f 0c0a 	mov.w	ip, #10
 8009510:	4621      	mov	r1, r4
 8009512:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009516:	3b30      	subs	r3, #48	@ 0x30
 8009518:	2b09      	cmp	r3, #9
 800951a:	d94b      	bls.n	80095b4 <_svfiprintf_r+0x17c>
 800951c:	b1b0      	cbz	r0, 800954c <_svfiprintf_r+0x114>
 800951e:	9207      	str	r2, [sp, #28]
 8009520:	e014      	b.n	800954c <_svfiprintf_r+0x114>
 8009522:	eba0 0308 	sub.w	r3, r0, r8
 8009526:	fa09 f303 	lsl.w	r3, r9, r3
 800952a:	4313      	orrs	r3, r2
 800952c:	9304      	str	r3, [sp, #16]
 800952e:	46a2      	mov	sl, r4
 8009530:	e7d2      	b.n	80094d8 <_svfiprintf_r+0xa0>
 8009532:	9b03      	ldr	r3, [sp, #12]
 8009534:	1d19      	adds	r1, r3, #4
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	9103      	str	r1, [sp, #12]
 800953a:	2b00      	cmp	r3, #0
 800953c:	bfbb      	ittet	lt
 800953e:	425b      	neglt	r3, r3
 8009540:	f042 0202 	orrlt.w	r2, r2, #2
 8009544:	9307      	strge	r3, [sp, #28]
 8009546:	9307      	strlt	r3, [sp, #28]
 8009548:	bfb8      	it	lt
 800954a:	9204      	strlt	r2, [sp, #16]
 800954c:	7823      	ldrb	r3, [r4, #0]
 800954e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009550:	d10a      	bne.n	8009568 <_svfiprintf_r+0x130>
 8009552:	7863      	ldrb	r3, [r4, #1]
 8009554:	2b2a      	cmp	r3, #42	@ 0x2a
 8009556:	d132      	bne.n	80095be <_svfiprintf_r+0x186>
 8009558:	9b03      	ldr	r3, [sp, #12]
 800955a:	1d1a      	adds	r2, r3, #4
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	9203      	str	r2, [sp, #12]
 8009560:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009564:	3402      	adds	r4, #2
 8009566:	9305      	str	r3, [sp, #20]
 8009568:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800962c <_svfiprintf_r+0x1f4>
 800956c:	7821      	ldrb	r1, [r4, #0]
 800956e:	2203      	movs	r2, #3
 8009570:	4650      	mov	r0, sl
 8009572:	f7f6 fe55 	bl	8000220 <memchr>
 8009576:	b138      	cbz	r0, 8009588 <_svfiprintf_r+0x150>
 8009578:	9b04      	ldr	r3, [sp, #16]
 800957a:	eba0 000a 	sub.w	r0, r0, sl
 800957e:	2240      	movs	r2, #64	@ 0x40
 8009580:	4082      	lsls	r2, r0
 8009582:	4313      	orrs	r3, r2
 8009584:	3401      	adds	r4, #1
 8009586:	9304      	str	r3, [sp, #16]
 8009588:	f814 1b01 	ldrb.w	r1, [r4], #1
 800958c:	4824      	ldr	r0, [pc, #144]	@ (8009620 <_svfiprintf_r+0x1e8>)
 800958e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009592:	2206      	movs	r2, #6
 8009594:	f7f6 fe44 	bl	8000220 <memchr>
 8009598:	2800      	cmp	r0, #0
 800959a:	d036      	beq.n	800960a <_svfiprintf_r+0x1d2>
 800959c:	4b21      	ldr	r3, [pc, #132]	@ (8009624 <_svfiprintf_r+0x1ec>)
 800959e:	bb1b      	cbnz	r3, 80095e8 <_svfiprintf_r+0x1b0>
 80095a0:	9b03      	ldr	r3, [sp, #12]
 80095a2:	3307      	adds	r3, #7
 80095a4:	f023 0307 	bic.w	r3, r3, #7
 80095a8:	3308      	adds	r3, #8
 80095aa:	9303      	str	r3, [sp, #12]
 80095ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095ae:	4433      	add	r3, r6
 80095b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80095b2:	e76a      	b.n	800948a <_svfiprintf_r+0x52>
 80095b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80095b8:	460c      	mov	r4, r1
 80095ba:	2001      	movs	r0, #1
 80095bc:	e7a8      	b.n	8009510 <_svfiprintf_r+0xd8>
 80095be:	2300      	movs	r3, #0
 80095c0:	3401      	adds	r4, #1
 80095c2:	9305      	str	r3, [sp, #20]
 80095c4:	4619      	mov	r1, r3
 80095c6:	f04f 0c0a 	mov.w	ip, #10
 80095ca:	4620      	mov	r0, r4
 80095cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095d0:	3a30      	subs	r2, #48	@ 0x30
 80095d2:	2a09      	cmp	r2, #9
 80095d4:	d903      	bls.n	80095de <_svfiprintf_r+0x1a6>
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d0c6      	beq.n	8009568 <_svfiprintf_r+0x130>
 80095da:	9105      	str	r1, [sp, #20]
 80095dc:	e7c4      	b.n	8009568 <_svfiprintf_r+0x130>
 80095de:	fb0c 2101 	mla	r1, ip, r1, r2
 80095e2:	4604      	mov	r4, r0
 80095e4:	2301      	movs	r3, #1
 80095e6:	e7f0      	b.n	80095ca <_svfiprintf_r+0x192>
 80095e8:	ab03      	add	r3, sp, #12
 80095ea:	9300      	str	r3, [sp, #0]
 80095ec:	462a      	mov	r2, r5
 80095ee:	4b0e      	ldr	r3, [pc, #56]	@ (8009628 <_svfiprintf_r+0x1f0>)
 80095f0:	a904      	add	r1, sp, #16
 80095f2:	4638      	mov	r0, r7
 80095f4:	f3af 8000 	nop.w
 80095f8:	1c42      	adds	r2, r0, #1
 80095fa:	4606      	mov	r6, r0
 80095fc:	d1d6      	bne.n	80095ac <_svfiprintf_r+0x174>
 80095fe:	89ab      	ldrh	r3, [r5, #12]
 8009600:	065b      	lsls	r3, r3, #25
 8009602:	f53f af2d 	bmi.w	8009460 <_svfiprintf_r+0x28>
 8009606:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009608:	e72c      	b.n	8009464 <_svfiprintf_r+0x2c>
 800960a:	ab03      	add	r3, sp, #12
 800960c:	9300      	str	r3, [sp, #0]
 800960e:	462a      	mov	r2, r5
 8009610:	4b05      	ldr	r3, [pc, #20]	@ (8009628 <_svfiprintf_r+0x1f0>)
 8009612:	a904      	add	r1, sp, #16
 8009614:	4638      	mov	r0, r7
 8009616:	f000 f879 	bl	800970c <_printf_i>
 800961a:	e7ed      	b.n	80095f8 <_svfiprintf_r+0x1c0>
 800961c:	0800a1f8 	.word	0x0800a1f8
 8009620:	0800a202 	.word	0x0800a202
 8009624:	00000000 	.word	0x00000000
 8009628:	08009381 	.word	0x08009381
 800962c:	0800a1fe 	.word	0x0800a1fe

08009630 <_printf_common>:
 8009630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009634:	4616      	mov	r6, r2
 8009636:	4698      	mov	r8, r3
 8009638:	688a      	ldr	r2, [r1, #8]
 800963a:	690b      	ldr	r3, [r1, #16]
 800963c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009640:	4293      	cmp	r3, r2
 8009642:	bfb8      	it	lt
 8009644:	4613      	movlt	r3, r2
 8009646:	6033      	str	r3, [r6, #0]
 8009648:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800964c:	4607      	mov	r7, r0
 800964e:	460c      	mov	r4, r1
 8009650:	b10a      	cbz	r2, 8009656 <_printf_common+0x26>
 8009652:	3301      	adds	r3, #1
 8009654:	6033      	str	r3, [r6, #0]
 8009656:	6823      	ldr	r3, [r4, #0]
 8009658:	0699      	lsls	r1, r3, #26
 800965a:	bf42      	ittt	mi
 800965c:	6833      	ldrmi	r3, [r6, #0]
 800965e:	3302      	addmi	r3, #2
 8009660:	6033      	strmi	r3, [r6, #0]
 8009662:	6825      	ldr	r5, [r4, #0]
 8009664:	f015 0506 	ands.w	r5, r5, #6
 8009668:	d106      	bne.n	8009678 <_printf_common+0x48>
 800966a:	f104 0a19 	add.w	sl, r4, #25
 800966e:	68e3      	ldr	r3, [r4, #12]
 8009670:	6832      	ldr	r2, [r6, #0]
 8009672:	1a9b      	subs	r3, r3, r2
 8009674:	42ab      	cmp	r3, r5
 8009676:	dc26      	bgt.n	80096c6 <_printf_common+0x96>
 8009678:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800967c:	6822      	ldr	r2, [r4, #0]
 800967e:	3b00      	subs	r3, #0
 8009680:	bf18      	it	ne
 8009682:	2301      	movne	r3, #1
 8009684:	0692      	lsls	r2, r2, #26
 8009686:	d42b      	bmi.n	80096e0 <_printf_common+0xb0>
 8009688:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800968c:	4641      	mov	r1, r8
 800968e:	4638      	mov	r0, r7
 8009690:	47c8      	blx	r9
 8009692:	3001      	adds	r0, #1
 8009694:	d01e      	beq.n	80096d4 <_printf_common+0xa4>
 8009696:	6823      	ldr	r3, [r4, #0]
 8009698:	6922      	ldr	r2, [r4, #16]
 800969a:	f003 0306 	and.w	r3, r3, #6
 800969e:	2b04      	cmp	r3, #4
 80096a0:	bf02      	ittt	eq
 80096a2:	68e5      	ldreq	r5, [r4, #12]
 80096a4:	6833      	ldreq	r3, [r6, #0]
 80096a6:	1aed      	subeq	r5, r5, r3
 80096a8:	68a3      	ldr	r3, [r4, #8]
 80096aa:	bf0c      	ite	eq
 80096ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80096b0:	2500      	movne	r5, #0
 80096b2:	4293      	cmp	r3, r2
 80096b4:	bfc4      	itt	gt
 80096b6:	1a9b      	subgt	r3, r3, r2
 80096b8:	18ed      	addgt	r5, r5, r3
 80096ba:	2600      	movs	r6, #0
 80096bc:	341a      	adds	r4, #26
 80096be:	42b5      	cmp	r5, r6
 80096c0:	d11a      	bne.n	80096f8 <_printf_common+0xc8>
 80096c2:	2000      	movs	r0, #0
 80096c4:	e008      	b.n	80096d8 <_printf_common+0xa8>
 80096c6:	2301      	movs	r3, #1
 80096c8:	4652      	mov	r2, sl
 80096ca:	4641      	mov	r1, r8
 80096cc:	4638      	mov	r0, r7
 80096ce:	47c8      	blx	r9
 80096d0:	3001      	adds	r0, #1
 80096d2:	d103      	bne.n	80096dc <_printf_common+0xac>
 80096d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80096d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096dc:	3501      	adds	r5, #1
 80096de:	e7c6      	b.n	800966e <_printf_common+0x3e>
 80096e0:	18e1      	adds	r1, r4, r3
 80096e2:	1c5a      	adds	r2, r3, #1
 80096e4:	2030      	movs	r0, #48	@ 0x30
 80096e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80096ea:	4422      	add	r2, r4
 80096ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80096f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80096f4:	3302      	adds	r3, #2
 80096f6:	e7c7      	b.n	8009688 <_printf_common+0x58>
 80096f8:	2301      	movs	r3, #1
 80096fa:	4622      	mov	r2, r4
 80096fc:	4641      	mov	r1, r8
 80096fe:	4638      	mov	r0, r7
 8009700:	47c8      	blx	r9
 8009702:	3001      	adds	r0, #1
 8009704:	d0e6      	beq.n	80096d4 <_printf_common+0xa4>
 8009706:	3601      	adds	r6, #1
 8009708:	e7d9      	b.n	80096be <_printf_common+0x8e>
	...

0800970c <_printf_i>:
 800970c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009710:	7e0f      	ldrb	r7, [r1, #24]
 8009712:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009714:	2f78      	cmp	r7, #120	@ 0x78
 8009716:	4691      	mov	r9, r2
 8009718:	4680      	mov	r8, r0
 800971a:	460c      	mov	r4, r1
 800971c:	469a      	mov	sl, r3
 800971e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009722:	d807      	bhi.n	8009734 <_printf_i+0x28>
 8009724:	2f62      	cmp	r7, #98	@ 0x62
 8009726:	d80a      	bhi.n	800973e <_printf_i+0x32>
 8009728:	2f00      	cmp	r7, #0
 800972a:	f000 80d2 	beq.w	80098d2 <_printf_i+0x1c6>
 800972e:	2f58      	cmp	r7, #88	@ 0x58
 8009730:	f000 80b9 	beq.w	80098a6 <_printf_i+0x19a>
 8009734:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009738:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800973c:	e03a      	b.n	80097b4 <_printf_i+0xa8>
 800973e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009742:	2b15      	cmp	r3, #21
 8009744:	d8f6      	bhi.n	8009734 <_printf_i+0x28>
 8009746:	a101      	add	r1, pc, #4	@ (adr r1, 800974c <_printf_i+0x40>)
 8009748:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800974c:	080097a5 	.word	0x080097a5
 8009750:	080097b9 	.word	0x080097b9
 8009754:	08009735 	.word	0x08009735
 8009758:	08009735 	.word	0x08009735
 800975c:	08009735 	.word	0x08009735
 8009760:	08009735 	.word	0x08009735
 8009764:	080097b9 	.word	0x080097b9
 8009768:	08009735 	.word	0x08009735
 800976c:	08009735 	.word	0x08009735
 8009770:	08009735 	.word	0x08009735
 8009774:	08009735 	.word	0x08009735
 8009778:	080098b9 	.word	0x080098b9
 800977c:	080097e3 	.word	0x080097e3
 8009780:	08009873 	.word	0x08009873
 8009784:	08009735 	.word	0x08009735
 8009788:	08009735 	.word	0x08009735
 800978c:	080098db 	.word	0x080098db
 8009790:	08009735 	.word	0x08009735
 8009794:	080097e3 	.word	0x080097e3
 8009798:	08009735 	.word	0x08009735
 800979c:	08009735 	.word	0x08009735
 80097a0:	0800987b 	.word	0x0800987b
 80097a4:	6833      	ldr	r3, [r6, #0]
 80097a6:	1d1a      	adds	r2, r3, #4
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	6032      	str	r2, [r6, #0]
 80097ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80097b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80097b4:	2301      	movs	r3, #1
 80097b6:	e09d      	b.n	80098f4 <_printf_i+0x1e8>
 80097b8:	6833      	ldr	r3, [r6, #0]
 80097ba:	6820      	ldr	r0, [r4, #0]
 80097bc:	1d19      	adds	r1, r3, #4
 80097be:	6031      	str	r1, [r6, #0]
 80097c0:	0606      	lsls	r6, r0, #24
 80097c2:	d501      	bpl.n	80097c8 <_printf_i+0xbc>
 80097c4:	681d      	ldr	r5, [r3, #0]
 80097c6:	e003      	b.n	80097d0 <_printf_i+0xc4>
 80097c8:	0645      	lsls	r5, r0, #25
 80097ca:	d5fb      	bpl.n	80097c4 <_printf_i+0xb8>
 80097cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80097d0:	2d00      	cmp	r5, #0
 80097d2:	da03      	bge.n	80097dc <_printf_i+0xd0>
 80097d4:	232d      	movs	r3, #45	@ 0x2d
 80097d6:	426d      	negs	r5, r5
 80097d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80097dc:	4859      	ldr	r0, [pc, #356]	@ (8009944 <_printf_i+0x238>)
 80097de:	230a      	movs	r3, #10
 80097e0:	e011      	b.n	8009806 <_printf_i+0xfa>
 80097e2:	6821      	ldr	r1, [r4, #0]
 80097e4:	6833      	ldr	r3, [r6, #0]
 80097e6:	0608      	lsls	r0, r1, #24
 80097e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80097ec:	d402      	bmi.n	80097f4 <_printf_i+0xe8>
 80097ee:	0649      	lsls	r1, r1, #25
 80097f0:	bf48      	it	mi
 80097f2:	b2ad      	uxthmi	r5, r5
 80097f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80097f6:	4853      	ldr	r0, [pc, #332]	@ (8009944 <_printf_i+0x238>)
 80097f8:	6033      	str	r3, [r6, #0]
 80097fa:	bf14      	ite	ne
 80097fc:	230a      	movne	r3, #10
 80097fe:	2308      	moveq	r3, #8
 8009800:	2100      	movs	r1, #0
 8009802:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009806:	6866      	ldr	r6, [r4, #4]
 8009808:	60a6      	str	r6, [r4, #8]
 800980a:	2e00      	cmp	r6, #0
 800980c:	bfa2      	ittt	ge
 800980e:	6821      	ldrge	r1, [r4, #0]
 8009810:	f021 0104 	bicge.w	r1, r1, #4
 8009814:	6021      	strge	r1, [r4, #0]
 8009816:	b90d      	cbnz	r5, 800981c <_printf_i+0x110>
 8009818:	2e00      	cmp	r6, #0
 800981a:	d04b      	beq.n	80098b4 <_printf_i+0x1a8>
 800981c:	4616      	mov	r6, r2
 800981e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009822:	fb03 5711 	mls	r7, r3, r1, r5
 8009826:	5dc7      	ldrb	r7, [r0, r7]
 8009828:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800982c:	462f      	mov	r7, r5
 800982e:	42bb      	cmp	r3, r7
 8009830:	460d      	mov	r5, r1
 8009832:	d9f4      	bls.n	800981e <_printf_i+0x112>
 8009834:	2b08      	cmp	r3, #8
 8009836:	d10b      	bne.n	8009850 <_printf_i+0x144>
 8009838:	6823      	ldr	r3, [r4, #0]
 800983a:	07df      	lsls	r7, r3, #31
 800983c:	d508      	bpl.n	8009850 <_printf_i+0x144>
 800983e:	6923      	ldr	r3, [r4, #16]
 8009840:	6861      	ldr	r1, [r4, #4]
 8009842:	4299      	cmp	r1, r3
 8009844:	bfde      	ittt	le
 8009846:	2330      	movle	r3, #48	@ 0x30
 8009848:	f806 3c01 	strble.w	r3, [r6, #-1]
 800984c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009850:	1b92      	subs	r2, r2, r6
 8009852:	6122      	str	r2, [r4, #16]
 8009854:	f8cd a000 	str.w	sl, [sp]
 8009858:	464b      	mov	r3, r9
 800985a:	aa03      	add	r2, sp, #12
 800985c:	4621      	mov	r1, r4
 800985e:	4640      	mov	r0, r8
 8009860:	f7ff fee6 	bl	8009630 <_printf_common>
 8009864:	3001      	adds	r0, #1
 8009866:	d14a      	bne.n	80098fe <_printf_i+0x1f2>
 8009868:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800986c:	b004      	add	sp, #16
 800986e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009872:	6823      	ldr	r3, [r4, #0]
 8009874:	f043 0320 	orr.w	r3, r3, #32
 8009878:	6023      	str	r3, [r4, #0]
 800987a:	4833      	ldr	r0, [pc, #204]	@ (8009948 <_printf_i+0x23c>)
 800987c:	2778      	movs	r7, #120	@ 0x78
 800987e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009882:	6823      	ldr	r3, [r4, #0]
 8009884:	6831      	ldr	r1, [r6, #0]
 8009886:	061f      	lsls	r7, r3, #24
 8009888:	f851 5b04 	ldr.w	r5, [r1], #4
 800988c:	d402      	bmi.n	8009894 <_printf_i+0x188>
 800988e:	065f      	lsls	r7, r3, #25
 8009890:	bf48      	it	mi
 8009892:	b2ad      	uxthmi	r5, r5
 8009894:	6031      	str	r1, [r6, #0]
 8009896:	07d9      	lsls	r1, r3, #31
 8009898:	bf44      	itt	mi
 800989a:	f043 0320 	orrmi.w	r3, r3, #32
 800989e:	6023      	strmi	r3, [r4, #0]
 80098a0:	b11d      	cbz	r5, 80098aa <_printf_i+0x19e>
 80098a2:	2310      	movs	r3, #16
 80098a4:	e7ac      	b.n	8009800 <_printf_i+0xf4>
 80098a6:	4827      	ldr	r0, [pc, #156]	@ (8009944 <_printf_i+0x238>)
 80098a8:	e7e9      	b.n	800987e <_printf_i+0x172>
 80098aa:	6823      	ldr	r3, [r4, #0]
 80098ac:	f023 0320 	bic.w	r3, r3, #32
 80098b0:	6023      	str	r3, [r4, #0]
 80098b2:	e7f6      	b.n	80098a2 <_printf_i+0x196>
 80098b4:	4616      	mov	r6, r2
 80098b6:	e7bd      	b.n	8009834 <_printf_i+0x128>
 80098b8:	6833      	ldr	r3, [r6, #0]
 80098ba:	6825      	ldr	r5, [r4, #0]
 80098bc:	6961      	ldr	r1, [r4, #20]
 80098be:	1d18      	adds	r0, r3, #4
 80098c0:	6030      	str	r0, [r6, #0]
 80098c2:	062e      	lsls	r6, r5, #24
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	d501      	bpl.n	80098cc <_printf_i+0x1c0>
 80098c8:	6019      	str	r1, [r3, #0]
 80098ca:	e002      	b.n	80098d2 <_printf_i+0x1c6>
 80098cc:	0668      	lsls	r0, r5, #25
 80098ce:	d5fb      	bpl.n	80098c8 <_printf_i+0x1bc>
 80098d0:	8019      	strh	r1, [r3, #0]
 80098d2:	2300      	movs	r3, #0
 80098d4:	6123      	str	r3, [r4, #16]
 80098d6:	4616      	mov	r6, r2
 80098d8:	e7bc      	b.n	8009854 <_printf_i+0x148>
 80098da:	6833      	ldr	r3, [r6, #0]
 80098dc:	1d1a      	adds	r2, r3, #4
 80098de:	6032      	str	r2, [r6, #0]
 80098e0:	681e      	ldr	r6, [r3, #0]
 80098e2:	6862      	ldr	r2, [r4, #4]
 80098e4:	2100      	movs	r1, #0
 80098e6:	4630      	mov	r0, r6
 80098e8:	f7f6 fc9a 	bl	8000220 <memchr>
 80098ec:	b108      	cbz	r0, 80098f2 <_printf_i+0x1e6>
 80098ee:	1b80      	subs	r0, r0, r6
 80098f0:	6060      	str	r0, [r4, #4]
 80098f2:	6863      	ldr	r3, [r4, #4]
 80098f4:	6123      	str	r3, [r4, #16]
 80098f6:	2300      	movs	r3, #0
 80098f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80098fc:	e7aa      	b.n	8009854 <_printf_i+0x148>
 80098fe:	6923      	ldr	r3, [r4, #16]
 8009900:	4632      	mov	r2, r6
 8009902:	4649      	mov	r1, r9
 8009904:	4640      	mov	r0, r8
 8009906:	47d0      	blx	sl
 8009908:	3001      	adds	r0, #1
 800990a:	d0ad      	beq.n	8009868 <_printf_i+0x15c>
 800990c:	6823      	ldr	r3, [r4, #0]
 800990e:	079b      	lsls	r3, r3, #30
 8009910:	d413      	bmi.n	800993a <_printf_i+0x22e>
 8009912:	68e0      	ldr	r0, [r4, #12]
 8009914:	9b03      	ldr	r3, [sp, #12]
 8009916:	4298      	cmp	r0, r3
 8009918:	bfb8      	it	lt
 800991a:	4618      	movlt	r0, r3
 800991c:	e7a6      	b.n	800986c <_printf_i+0x160>
 800991e:	2301      	movs	r3, #1
 8009920:	4632      	mov	r2, r6
 8009922:	4649      	mov	r1, r9
 8009924:	4640      	mov	r0, r8
 8009926:	47d0      	blx	sl
 8009928:	3001      	adds	r0, #1
 800992a:	d09d      	beq.n	8009868 <_printf_i+0x15c>
 800992c:	3501      	adds	r5, #1
 800992e:	68e3      	ldr	r3, [r4, #12]
 8009930:	9903      	ldr	r1, [sp, #12]
 8009932:	1a5b      	subs	r3, r3, r1
 8009934:	42ab      	cmp	r3, r5
 8009936:	dcf2      	bgt.n	800991e <_printf_i+0x212>
 8009938:	e7eb      	b.n	8009912 <_printf_i+0x206>
 800993a:	2500      	movs	r5, #0
 800993c:	f104 0619 	add.w	r6, r4, #25
 8009940:	e7f5      	b.n	800992e <_printf_i+0x222>
 8009942:	bf00      	nop
 8009944:	0800a209 	.word	0x0800a209
 8009948:	0800a21a 	.word	0x0800a21a

0800994c <memmove>:
 800994c:	4288      	cmp	r0, r1
 800994e:	b510      	push	{r4, lr}
 8009950:	eb01 0402 	add.w	r4, r1, r2
 8009954:	d902      	bls.n	800995c <memmove+0x10>
 8009956:	4284      	cmp	r4, r0
 8009958:	4623      	mov	r3, r4
 800995a:	d807      	bhi.n	800996c <memmove+0x20>
 800995c:	1e43      	subs	r3, r0, #1
 800995e:	42a1      	cmp	r1, r4
 8009960:	d008      	beq.n	8009974 <memmove+0x28>
 8009962:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009966:	f803 2f01 	strb.w	r2, [r3, #1]!
 800996a:	e7f8      	b.n	800995e <memmove+0x12>
 800996c:	4402      	add	r2, r0
 800996e:	4601      	mov	r1, r0
 8009970:	428a      	cmp	r2, r1
 8009972:	d100      	bne.n	8009976 <memmove+0x2a>
 8009974:	bd10      	pop	{r4, pc}
 8009976:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800997a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800997e:	e7f7      	b.n	8009970 <memmove+0x24>

08009980 <_sbrk_r>:
 8009980:	b538      	push	{r3, r4, r5, lr}
 8009982:	4d06      	ldr	r5, [pc, #24]	@ (800999c <_sbrk_r+0x1c>)
 8009984:	2300      	movs	r3, #0
 8009986:	4604      	mov	r4, r0
 8009988:	4608      	mov	r0, r1
 800998a:	602b      	str	r3, [r5, #0]
 800998c:	f7f8 fd0e 	bl	80023ac <_sbrk>
 8009990:	1c43      	adds	r3, r0, #1
 8009992:	d102      	bne.n	800999a <_sbrk_r+0x1a>
 8009994:	682b      	ldr	r3, [r5, #0]
 8009996:	b103      	cbz	r3, 800999a <_sbrk_r+0x1a>
 8009998:	6023      	str	r3, [r4, #0]
 800999a:	bd38      	pop	{r3, r4, r5, pc}
 800999c:	200054e8 	.word	0x200054e8

080099a0 <_realloc_r>:
 80099a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099a4:	4680      	mov	r8, r0
 80099a6:	4615      	mov	r5, r2
 80099a8:	460c      	mov	r4, r1
 80099aa:	b921      	cbnz	r1, 80099b6 <_realloc_r+0x16>
 80099ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099b0:	4611      	mov	r1, r2
 80099b2:	f7ff bc59 	b.w	8009268 <_malloc_r>
 80099b6:	b92a      	cbnz	r2, 80099c4 <_realloc_r+0x24>
 80099b8:	f7ff fbea 	bl	8009190 <_free_r>
 80099bc:	2400      	movs	r4, #0
 80099be:	4620      	mov	r0, r4
 80099c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099c4:	f000 f81a 	bl	80099fc <_malloc_usable_size_r>
 80099c8:	4285      	cmp	r5, r0
 80099ca:	4606      	mov	r6, r0
 80099cc:	d802      	bhi.n	80099d4 <_realloc_r+0x34>
 80099ce:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80099d2:	d8f4      	bhi.n	80099be <_realloc_r+0x1e>
 80099d4:	4629      	mov	r1, r5
 80099d6:	4640      	mov	r0, r8
 80099d8:	f7ff fc46 	bl	8009268 <_malloc_r>
 80099dc:	4607      	mov	r7, r0
 80099de:	2800      	cmp	r0, #0
 80099e0:	d0ec      	beq.n	80099bc <_realloc_r+0x1c>
 80099e2:	42b5      	cmp	r5, r6
 80099e4:	462a      	mov	r2, r5
 80099e6:	4621      	mov	r1, r4
 80099e8:	bf28      	it	cs
 80099ea:	4632      	movcs	r2, r6
 80099ec:	f7ff fbc2 	bl	8009174 <memcpy>
 80099f0:	4621      	mov	r1, r4
 80099f2:	4640      	mov	r0, r8
 80099f4:	f7ff fbcc 	bl	8009190 <_free_r>
 80099f8:	463c      	mov	r4, r7
 80099fa:	e7e0      	b.n	80099be <_realloc_r+0x1e>

080099fc <_malloc_usable_size_r>:
 80099fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a00:	1f18      	subs	r0, r3, #4
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	bfbc      	itt	lt
 8009a06:	580b      	ldrlt	r3, [r1, r0]
 8009a08:	18c0      	addlt	r0, r0, r3
 8009a0a:	4770      	bx	lr

08009a0c <atan2>:
 8009a0c:	f000 b800 	b.w	8009a10 <__ieee754_atan2>

08009a10 <__ieee754_atan2>:
 8009a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a14:	ec57 6b11 	vmov	r6, r7, d1
 8009a18:	4273      	negs	r3, r6
 8009a1a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8009b98 <__ieee754_atan2+0x188>
 8009a1e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8009a22:	4333      	orrs	r3, r6
 8009a24:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009a28:	4543      	cmp	r3, r8
 8009a2a:	ec51 0b10 	vmov	r0, r1, d0
 8009a2e:	4635      	mov	r5, r6
 8009a30:	d809      	bhi.n	8009a46 <__ieee754_atan2+0x36>
 8009a32:	4244      	negs	r4, r0
 8009a34:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009a38:	4304      	orrs	r4, r0
 8009a3a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8009a3e:	4544      	cmp	r4, r8
 8009a40:	468e      	mov	lr, r1
 8009a42:	4681      	mov	r9, r0
 8009a44:	d907      	bls.n	8009a56 <__ieee754_atan2+0x46>
 8009a46:	4632      	mov	r2, r6
 8009a48:	463b      	mov	r3, r7
 8009a4a:	f7f6 fc3f 	bl	80002cc <__adddf3>
 8009a4e:	ec41 0b10 	vmov	d0, r0, r1
 8009a52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a56:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8009a5a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8009a5e:	4334      	orrs	r4, r6
 8009a60:	d103      	bne.n	8009a6a <__ieee754_atan2+0x5a>
 8009a62:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a66:	f000 b89b 	b.w	8009ba0 <atan>
 8009a6a:	17bc      	asrs	r4, r7, #30
 8009a6c:	f004 0402 	and.w	r4, r4, #2
 8009a70:	ea53 0909 	orrs.w	r9, r3, r9
 8009a74:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8009a78:	d107      	bne.n	8009a8a <__ieee754_atan2+0x7a>
 8009a7a:	2c02      	cmp	r4, #2
 8009a7c:	d05f      	beq.n	8009b3e <__ieee754_atan2+0x12e>
 8009a7e:	2c03      	cmp	r4, #3
 8009a80:	d1e5      	bne.n	8009a4e <__ieee754_atan2+0x3e>
 8009a82:	a141      	add	r1, pc, #260	@ (adr r1, 8009b88 <__ieee754_atan2+0x178>)
 8009a84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a88:	e7e1      	b.n	8009a4e <__ieee754_atan2+0x3e>
 8009a8a:	4315      	orrs	r5, r2
 8009a8c:	d106      	bne.n	8009a9c <__ieee754_atan2+0x8c>
 8009a8e:	f1be 0f00 	cmp.w	lr, #0
 8009a92:	da5f      	bge.n	8009b54 <__ieee754_atan2+0x144>
 8009a94:	a13e      	add	r1, pc, #248	@ (adr r1, 8009b90 <__ieee754_atan2+0x180>)
 8009a96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a9a:	e7d8      	b.n	8009a4e <__ieee754_atan2+0x3e>
 8009a9c:	4542      	cmp	r2, r8
 8009a9e:	d10f      	bne.n	8009ac0 <__ieee754_atan2+0xb0>
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 8009aa6:	d107      	bne.n	8009ab8 <__ieee754_atan2+0xa8>
 8009aa8:	2c02      	cmp	r4, #2
 8009aaa:	d84c      	bhi.n	8009b46 <__ieee754_atan2+0x136>
 8009aac:	4b34      	ldr	r3, [pc, #208]	@ (8009b80 <__ieee754_atan2+0x170>)
 8009aae:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009ab2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009ab6:	e7ca      	b.n	8009a4e <__ieee754_atan2+0x3e>
 8009ab8:	2c02      	cmp	r4, #2
 8009aba:	d848      	bhi.n	8009b4e <__ieee754_atan2+0x13e>
 8009abc:	4b31      	ldr	r3, [pc, #196]	@ (8009b84 <__ieee754_atan2+0x174>)
 8009abe:	e7f6      	b.n	8009aae <__ieee754_atan2+0x9e>
 8009ac0:	4543      	cmp	r3, r8
 8009ac2:	d0e4      	beq.n	8009a8e <__ieee754_atan2+0x7e>
 8009ac4:	1a9b      	subs	r3, r3, r2
 8009ac6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8009aca:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009ace:	da1e      	bge.n	8009b0e <__ieee754_atan2+0xfe>
 8009ad0:	2f00      	cmp	r7, #0
 8009ad2:	da01      	bge.n	8009ad8 <__ieee754_atan2+0xc8>
 8009ad4:	323c      	adds	r2, #60	@ 0x3c
 8009ad6:	db1e      	blt.n	8009b16 <__ieee754_atan2+0x106>
 8009ad8:	4632      	mov	r2, r6
 8009ada:	463b      	mov	r3, r7
 8009adc:	f7f6 fed6 	bl	800088c <__aeabi_ddiv>
 8009ae0:	ec41 0b10 	vmov	d0, r0, r1
 8009ae4:	f000 f9f4 	bl	8009ed0 <fabs>
 8009ae8:	f000 f85a 	bl	8009ba0 <atan>
 8009aec:	ec51 0b10 	vmov	r0, r1, d0
 8009af0:	2c01      	cmp	r4, #1
 8009af2:	d013      	beq.n	8009b1c <__ieee754_atan2+0x10c>
 8009af4:	2c02      	cmp	r4, #2
 8009af6:	d015      	beq.n	8009b24 <__ieee754_atan2+0x114>
 8009af8:	2c00      	cmp	r4, #0
 8009afa:	d0a8      	beq.n	8009a4e <__ieee754_atan2+0x3e>
 8009afc:	a318      	add	r3, pc, #96	@ (adr r3, 8009b60 <__ieee754_atan2+0x150>)
 8009afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b02:	f7f6 fbe1 	bl	80002c8 <__aeabi_dsub>
 8009b06:	a318      	add	r3, pc, #96	@ (adr r3, 8009b68 <__ieee754_atan2+0x158>)
 8009b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b0c:	e014      	b.n	8009b38 <__ieee754_atan2+0x128>
 8009b0e:	a118      	add	r1, pc, #96	@ (adr r1, 8009b70 <__ieee754_atan2+0x160>)
 8009b10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b14:	e7ec      	b.n	8009af0 <__ieee754_atan2+0xe0>
 8009b16:	2000      	movs	r0, #0
 8009b18:	2100      	movs	r1, #0
 8009b1a:	e7e9      	b.n	8009af0 <__ieee754_atan2+0xe0>
 8009b1c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009b20:	4619      	mov	r1, r3
 8009b22:	e794      	b.n	8009a4e <__ieee754_atan2+0x3e>
 8009b24:	a30e      	add	r3, pc, #56	@ (adr r3, 8009b60 <__ieee754_atan2+0x150>)
 8009b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b2a:	f7f6 fbcd 	bl	80002c8 <__aeabi_dsub>
 8009b2e:	4602      	mov	r2, r0
 8009b30:	460b      	mov	r3, r1
 8009b32:	a10d      	add	r1, pc, #52	@ (adr r1, 8009b68 <__ieee754_atan2+0x158>)
 8009b34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b38:	f7f6 fbc6 	bl	80002c8 <__aeabi_dsub>
 8009b3c:	e787      	b.n	8009a4e <__ieee754_atan2+0x3e>
 8009b3e:	a10a      	add	r1, pc, #40	@ (adr r1, 8009b68 <__ieee754_atan2+0x158>)
 8009b40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b44:	e783      	b.n	8009a4e <__ieee754_atan2+0x3e>
 8009b46:	a10c      	add	r1, pc, #48	@ (adr r1, 8009b78 <__ieee754_atan2+0x168>)
 8009b48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b4c:	e77f      	b.n	8009a4e <__ieee754_atan2+0x3e>
 8009b4e:	2000      	movs	r0, #0
 8009b50:	2100      	movs	r1, #0
 8009b52:	e77c      	b.n	8009a4e <__ieee754_atan2+0x3e>
 8009b54:	a106      	add	r1, pc, #24	@ (adr r1, 8009b70 <__ieee754_atan2+0x160>)
 8009b56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b5a:	e778      	b.n	8009a4e <__ieee754_atan2+0x3e>
 8009b5c:	f3af 8000 	nop.w
 8009b60:	33145c07 	.word	0x33145c07
 8009b64:	3ca1a626 	.word	0x3ca1a626
 8009b68:	54442d18 	.word	0x54442d18
 8009b6c:	400921fb 	.word	0x400921fb
 8009b70:	54442d18 	.word	0x54442d18
 8009b74:	3ff921fb 	.word	0x3ff921fb
 8009b78:	54442d18 	.word	0x54442d18
 8009b7c:	3fe921fb 	.word	0x3fe921fb
 8009b80:	0800a248 	.word	0x0800a248
 8009b84:	0800a230 	.word	0x0800a230
 8009b88:	54442d18 	.word	0x54442d18
 8009b8c:	c00921fb 	.word	0xc00921fb
 8009b90:	54442d18 	.word	0x54442d18
 8009b94:	bff921fb 	.word	0xbff921fb
 8009b98:	7ff00000 	.word	0x7ff00000
 8009b9c:	00000000 	.word	0x00000000

08009ba0 <atan>:
 8009ba0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ba4:	ec55 4b10 	vmov	r4, r5, d0
 8009ba8:	4bbf      	ldr	r3, [pc, #764]	@ (8009ea8 <atan+0x308>)
 8009baa:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8009bae:	429e      	cmp	r6, r3
 8009bb0:	46ab      	mov	fp, r5
 8009bb2:	d918      	bls.n	8009be6 <atan+0x46>
 8009bb4:	4bbd      	ldr	r3, [pc, #756]	@ (8009eac <atan+0x30c>)
 8009bb6:	429e      	cmp	r6, r3
 8009bb8:	d801      	bhi.n	8009bbe <atan+0x1e>
 8009bba:	d109      	bne.n	8009bd0 <atan+0x30>
 8009bbc:	b144      	cbz	r4, 8009bd0 <atan+0x30>
 8009bbe:	4622      	mov	r2, r4
 8009bc0:	462b      	mov	r3, r5
 8009bc2:	4620      	mov	r0, r4
 8009bc4:	4629      	mov	r1, r5
 8009bc6:	f7f6 fb81 	bl	80002cc <__adddf3>
 8009bca:	4604      	mov	r4, r0
 8009bcc:	460d      	mov	r5, r1
 8009bce:	e006      	b.n	8009bde <atan+0x3e>
 8009bd0:	f1bb 0f00 	cmp.w	fp, #0
 8009bd4:	f340 812b 	ble.w	8009e2e <atan+0x28e>
 8009bd8:	a597      	add	r5, pc, #604	@ (adr r5, 8009e38 <atan+0x298>)
 8009bda:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009bde:	ec45 4b10 	vmov	d0, r4, r5
 8009be2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009be6:	4bb2      	ldr	r3, [pc, #712]	@ (8009eb0 <atan+0x310>)
 8009be8:	429e      	cmp	r6, r3
 8009bea:	d813      	bhi.n	8009c14 <atan+0x74>
 8009bec:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8009bf0:	429e      	cmp	r6, r3
 8009bf2:	d80c      	bhi.n	8009c0e <atan+0x6e>
 8009bf4:	a392      	add	r3, pc, #584	@ (adr r3, 8009e40 <atan+0x2a0>)
 8009bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfa:	4620      	mov	r0, r4
 8009bfc:	4629      	mov	r1, r5
 8009bfe:	f7f6 fb65 	bl	80002cc <__adddf3>
 8009c02:	4bac      	ldr	r3, [pc, #688]	@ (8009eb4 <atan+0x314>)
 8009c04:	2200      	movs	r2, #0
 8009c06:	f7f6 ffa7 	bl	8000b58 <__aeabi_dcmpgt>
 8009c0a:	2800      	cmp	r0, #0
 8009c0c:	d1e7      	bne.n	8009bde <atan+0x3e>
 8009c0e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009c12:	e029      	b.n	8009c68 <atan+0xc8>
 8009c14:	f000 f95c 	bl	8009ed0 <fabs>
 8009c18:	4ba7      	ldr	r3, [pc, #668]	@ (8009eb8 <atan+0x318>)
 8009c1a:	429e      	cmp	r6, r3
 8009c1c:	ec55 4b10 	vmov	r4, r5, d0
 8009c20:	f200 80bc 	bhi.w	8009d9c <atan+0x1fc>
 8009c24:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8009c28:	429e      	cmp	r6, r3
 8009c2a:	f200 809e 	bhi.w	8009d6a <atan+0x1ca>
 8009c2e:	4622      	mov	r2, r4
 8009c30:	462b      	mov	r3, r5
 8009c32:	4620      	mov	r0, r4
 8009c34:	4629      	mov	r1, r5
 8009c36:	f7f6 fb49 	bl	80002cc <__adddf3>
 8009c3a:	4b9e      	ldr	r3, [pc, #632]	@ (8009eb4 <atan+0x314>)
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	f7f6 fb43 	bl	80002c8 <__aeabi_dsub>
 8009c42:	2200      	movs	r2, #0
 8009c44:	4606      	mov	r6, r0
 8009c46:	460f      	mov	r7, r1
 8009c48:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009c4c:	4620      	mov	r0, r4
 8009c4e:	4629      	mov	r1, r5
 8009c50:	f7f6 fb3c 	bl	80002cc <__adddf3>
 8009c54:	4602      	mov	r2, r0
 8009c56:	460b      	mov	r3, r1
 8009c58:	4630      	mov	r0, r6
 8009c5a:	4639      	mov	r1, r7
 8009c5c:	f7f6 fe16 	bl	800088c <__aeabi_ddiv>
 8009c60:	f04f 0a00 	mov.w	sl, #0
 8009c64:	4604      	mov	r4, r0
 8009c66:	460d      	mov	r5, r1
 8009c68:	4622      	mov	r2, r4
 8009c6a:	462b      	mov	r3, r5
 8009c6c:	4620      	mov	r0, r4
 8009c6e:	4629      	mov	r1, r5
 8009c70:	f7f6 fce2 	bl	8000638 <__aeabi_dmul>
 8009c74:	4602      	mov	r2, r0
 8009c76:	460b      	mov	r3, r1
 8009c78:	4680      	mov	r8, r0
 8009c7a:	4689      	mov	r9, r1
 8009c7c:	f7f6 fcdc 	bl	8000638 <__aeabi_dmul>
 8009c80:	a371      	add	r3, pc, #452	@ (adr r3, 8009e48 <atan+0x2a8>)
 8009c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c86:	4606      	mov	r6, r0
 8009c88:	460f      	mov	r7, r1
 8009c8a:	f7f6 fcd5 	bl	8000638 <__aeabi_dmul>
 8009c8e:	a370      	add	r3, pc, #448	@ (adr r3, 8009e50 <atan+0x2b0>)
 8009c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c94:	f7f6 fb1a 	bl	80002cc <__adddf3>
 8009c98:	4632      	mov	r2, r6
 8009c9a:	463b      	mov	r3, r7
 8009c9c:	f7f6 fccc 	bl	8000638 <__aeabi_dmul>
 8009ca0:	a36d      	add	r3, pc, #436	@ (adr r3, 8009e58 <atan+0x2b8>)
 8009ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca6:	f7f6 fb11 	bl	80002cc <__adddf3>
 8009caa:	4632      	mov	r2, r6
 8009cac:	463b      	mov	r3, r7
 8009cae:	f7f6 fcc3 	bl	8000638 <__aeabi_dmul>
 8009cb2:	a36b      	add	r3, pc, #428	@ (adr r3, 8009e60 <atan+0x2c0>)
 8009cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb8:	f7f6 fb08 	bl	80002cc <__adddf3>
 8009cbc:	4632      	mov	r2, r6
 8009cbe:	463b      	mov	r3, r7
 8009cc0:	f7f6 fcba 	bl	8000638 <__aeabi_dmul>
 8009cc4:	a368      	add	r3, pc, #416	@ (adr r3, 8009e68 <atan+0x2c8>)
 8009cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cca:	f7f6 faff 	bl	80002cc <__adddf3>
 8009cce:	4632      	mov	r2, r6
 8009cd0:	463b      	mov	r3, r7
 8009cd2:	f7f6 fcb1 	bl	8000638 <__aeabi_dmul>
 8009cd6:	a366      	add	r3, pc, #408	@ (adr r3, 8009e70 <atan+0x2d0>)
 8009cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cdc:	f7f6 faf6 	bl	80002cc <__adddf3>
 8009ce0:	4642      	mov	r2, r8
 8009ce2:	464b      	mov	r3, r9
 8009ce4:	f7f6 fca8 	bl	8000638 <__aeabi_dmul>
 8009ce8:	a363      	add	r3, pc, #396	@ (adr r3, 8009e78 <atan+0x2d8>)
 8009cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cee:	4680      	mov	r8, r0
 8009cf0:	4689      	mov	r9, r1
 8009cf2:	4630      	mov	r0, r6
 8009cf4:	4639      	mov	r1, r7
 8009cf6:	f7f6 fc9f 	bl	8000638 <__aeabi_dmul>
 8009cfa:	a361      	add	r3, pc, #388	@ (adr r3, 8009e80 <atan+0x2e0>)
 8009cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d00:	f7f6 fae2 	bl	80002c8 <__aeabi_dsub>
 8009d04:	4632      	mov	r2, r6
 8009d06:	463b      	mov	r3, r7
 8009d08:	f7f6 fc96 	bl	8000638 <__aeabi_dmul>
 8009d0c:	a35e      	add	r3, pc, #376	@ (adr r3, 8009e88 <atan+0x2e8>)
 8009d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d12:	f7f6 fad9 	bl	80002c8 <__aeabi_dsub>
 8009d16:	4632      	mov	r2, r6
 8009d18:	463b      	mov	r3, r7
 8009d1a:	f7f6 fc8d 	bl	8000638 <__aeabi_dmul>
 8009d1e:	a35c      	add	r3, pc, #368	@ (adr r3, 8009e90 <atan+0x2f0>)
 8009d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d24:	f7f6 fad0 	bl	80002c8 <__aeabi_dsub>
 8009d28:	4632      	mov	r2, r6
 8009d2a:	463b      	mov	r3, r7
 8009d2c:	f7f6 fc84 	bl	8000638 <__aeabi_dmul>
 8009d30:	a359      	add	r3, pc, #356	@ (adr r3, 8009e98 <atan+0x2f8>)
 8009d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d36:	f7f6 fac7 	bl	80002c8 <__aeabi_dsub>
 8009d3a:	4632      	mov	r2, r6
 8009d3c:	463b      	mov	r3, r7
 8009d3e:	f7f6 fc7b 	bl	8000638 <__aeabi_dmul>
 8009d42:	4602      	mov	r2, r0
 8009d44:	460b      	mov	r3, r1
 8009d46:	4640      	mov	r0, r8
 8009d48:	4649      	mov	r1, r9
 8009d4a:	f7f6 fabf 	bl	80002cc <__adddf3>
 8009d4e:	4622      	mov	r2, r4
 8009d50:	462b      	mov	r3, r5
 8009d52:	f7f6 fc71 	bl	8000638 <__aeabi_dmul>
 8009d56:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 8009d5a:	4602      	mov	r2, r0
 8009d5c:	460b      	mov	r3, r1
 8009d5e:	d148      	bne.n	8009df2 <atan+0x252>
 8009d60:	4620      	mov	r0, r4
 8009d62:	4629      	mov	r1, r5
 8009d64:	f7f6 fab0 	bl	80002c8 <__aeabi_dsub>
 8009d68:	e72f      	b.n	8009bca <atan+0x2a>
 8009d6a:	4b52      	ldr	r3, [pc, #328]	@ (8009eb4 <atan+0x314>)
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	4620      	mov	r0, r4
 8009d70:	4629      	mov	r1, r5
 8009d72:	f7f6 faa9 	bl	80002c8 <__aeabi_dsub>
 8009d76:	4b4f      	ldr	r3, [pc, #316]	@ (8009eb4 <atan+0x314>)
 8009d78:	4606      	mov	r6, r0
 8009d7a:	460f      	mov	r7, r1
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	4620      	mov	r0, r4
 8009d80:	4629      	mov	r1, r5
 8009d82:	f7f6 faa3 	bl	80002cc <__adddf3>
 8009d86:	4602      	mov	r2, r0
 8009d88:	460b      	mov	r3, r1
 8009d8a:	4630      	mov	r0, r6
 8009d8c:	4639      	mov	r1, r7
 8009d8e:	f7f6 fd7d 	bl	800088c <__aeabi_ddiv>
 8009d92:	f04f 0a01 	mov.w	sl, #1
 8009d96:	4604      	mov	r4, r0
 8009d98:	460d      	mov	r5, r1
 8009d9a:	e765      	b.n	8009c68 <atan+0xc8>
 8009d9c:	4b47      	ldr	r3, [pc, #284]	@ (8009ebc <atan+0x31c>)
 8009d9e:	429e      	cmp	r6, r3
 8009da0:	d21c      	bcs.n	8009ddc <atan+0x23c>
 8009da2:	4b47      	ldr	r3, [pc, #284]	@ (8009ec0 <atan+0x320>)
 8009da4:	2200      	movs	r2, #0
 8009da6:	4620      	mov	r0, r4
 8009da8:	4629      	mov	r1, r5
 8009daa:	f7f6 fa8d 	bl	80002c8 <__aeabi_dsub>
 8009dae:	4b44      	ldr	r3, [pc, #272]	@ (8009ec0 <atan+0x320>)
 8009db0:	4606      	mov	r6, r0
 8009db2:	460f      	mov	r7, r1
 8009db4:	2200      	movs	r2, #0
 8009db6:	4620      	mov	r0, r4
 8009db8:	4629      	mov	r1, r5
 8009dba:	f7f6 fc3d 	bl	8000638 <__aeabi_dmul>
 8009dbe:	4b3d      	ldr	r3, [pc, #244]	@ (8009eb4 <atan+0x314>)
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	f7f6 fa83 	bl	80002cc <__adddf3>
 8009dc6:	4602      	mov	r2, r0
 8009dc8:	460b      	mov	r3, r1
 8009dca:	4630      	mov	r0, r6
 8009dcc:	4639      	mov	r1, r7
 8009dce:	f7f6 fd5d 	bl	800088c <__aeabi_ddiv>
 8009dd2:	f04f 0a02 	mov.w	sl, #2
 8009dd6:	4604      	mov	r4, r0
 8009dd8:	460d      	mov	r5, r1
 8009dda:	e745      	b.n	8009c68 <atan+0xc8>
 8009ddc:	4622      	mov	r2, r4
 8009dde:	462b      	mov	r3, r5
 8009de0:	4938      	ldr	r1, [pc, #224]	@ (8009ec4 <atan+0x324>)
 8009de2:	2000      	movs	r0, #0
 8009de4:	f7f6 fd52 	bl	800088c <__aeabi_ddiv>
 8009de8:	f04f 0a03 	mov.w	sl, #3
 8009dec:	4604      	mov	r4, r0
 8009dee:	460d      	mov	r5, r1
 8009df0:	e73a      	b.n	8009c68 <atan+0xc8>
 8009df2:	4b35      	ldr	r3, [pc, #212]	@ (8009ec8 <atan+0x328>)
 8009df4:	4e35      	ldr	r6, [pc, #212]	@ (8009ecc <atan+0x32c>)
 8009df6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dfe:	f7f6 fa63 	bl	80002c8 <__aeabi_dsub>
 8009e02:	4622      	mov	r2, r4
 8009e04:	462b      	mov	r3, r5
 8009e06:	f7f6 fa5f 	bl	80002c8 <__aeabi_dsub>
 8009e0a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009e0e:	4602      	mov	r2, r0
 8009e10:	460b      	mov	r3, r1
 8009e12:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009e16:	f7f6 fa57 	bl	80002c8 <__aeabi_dsub>
 8009e1a:	f1bb 0f00 	cmp.w	fp, #0
 8009e1e:	4604      	mov	r4, r0
 8009e20:	460d      	mov	r5, r1
 8009e22:	f6bf aedc 	bge.w	8009bde <atan+0x3e>
 8009e26:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009e2a:	461d      	mov	r5, r3
 8009e2c:	e6d7      	b.n	8009bde <atan+0x3e>
 8009e2e:	a51c      	add	r5, pc, #112	@ (adr r5, 8009ea0 <atan+0x300>)
 8009e30:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009e34:	e6d3      	b.n	8009bde <atan+0x3e>
 8009e36:	bf00      	nop
 8009e38:	54442d18 	.word	0x54442d18
 8009e3c:	3ff921fb 	.word	0x3ff921fb
 8009e40:	8800759c 	.word	0x8800759c
 8009e44:	7e37e43c 	.word	0x7e37e43c
 8009e48:	e322da11 	.word	0xe322da11
 8009e4c:	3f90ad3a 	.word	0x3f90ad3a
 8009e50:	24760deb 	.word	0x24760deb
 8009e54:	3fa97b4b 	.word	0x3fa97b4b
 8009e58:	a0d03d51 	.word	0xa0d03d51
 8009e5c:	3fb10d66 	.word	0x3fb10d66
 8009e60:	c54c206e 	.word	0xc54c206e
 8009e64:	3fb745cd 	.word	0x3fb745cd
 8009e68:	920083ff 	.word	0x920083ff
 8009e6c:	3fc24924 	.word	0x3fc24924
 8009e70:	5555550d 	.word	0x5555550d
 8009e74:	3fd55555 	.word	0x3fd55555
 8009e78:	2c6a6c2f 	.word	0x2c6a6c2f
 8009e7c:	bfa2b444 	.word	0xbfa2b444
 8009e80:	52defd9a 	.word	0x52defd9a
 8009e84:	3fadde2d 	.word	0x3fadde2d
 8009e88:	af749a6d 	.word	0xaf749a6d
 8009e8c:	3fb3b0f2 	.word	0x3fb3b0f2
 8009e90:	fe231671 	.word	0xfe231671
 8009e94:	3fbc71c6 	.word	0x3fbc71c6
 8009e98:	9998ebc4 	.word	0x9998ebc4
 8009e9c:	3fc99999 	.word	0x3fc99999
 8009ea0:	54442d18 	.word	0x54442d18
 8009ea4:	bff921fb 	.word	0xbff921fb
 8009ea8:	440fffff 	.word	0x440fffff
 8009eac:	7ff00000 	.word	0x7ff00000
 8009eb0:	3fdbffff 	.word	0x3fdbffff
 8009eb4:	3ff00000 	.word	0x3ff00000
 8009eb8:	3ff2ffff 	.word	0x3ff2ffff
 8009ebc:	40038000 	.word	0x40038000
 8009ec0:	3ff80000 	.word	0x3ff80000
 8009ec4:	bff00000 	.word	0xbff00000
 8009ec8:	0800a260 	.word	0x0800a260
 8009ecc:	0800a280 	.word	0x0800a280

08009ed0 <fabs>:
 8009ed0:	ec51 0b10 	vmov	r0, r1, d0
 8009ed4:	4602      	mov	r2, r0
 8009ed6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009eda:	ec43 2b10 	vmov	d0, r2, r3
 8009ede:	4770      	bx	lr

08009ee0 <_init>:
 8009ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ee2:	bf00      	nop
 8009ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ee6:	bc08      	pop	{r3}
 8009ee8:	469e      	mov	lr, r3
 8009eea:	4770      	bx	lr

08009eec <_fini>:
 8009eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eee:	bf00      	nop
 8009ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ef2:	bc08      	pop	{r3}
 8009ef4:	469e      	mov	lr, r3
 8009ef6:	4770      	bx	lr
