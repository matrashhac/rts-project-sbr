
mpuTest1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a428  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000440  0800a5f8  0800a5f8  0000b5f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa38  0800aa38  0000c064  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa38  0800aa38  0000ba38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa40  0800aa40  0000c064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa40  0800aa40  0000ba40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aa44  0800aa44  0000ba44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  0800aa48  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000055bc  20000064  0800aaac  0000c064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005620  0800aaac  0000c620  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cf92  00000000  00000000  0000c094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ac6  00000000  00000000  00029026  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001798  00000000  00000000  0002caf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000127e  00000000  00000000  0002e288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004644  00000000  00000000  0002f506  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b89a  00000000  00000000  00033b4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ded73  00000000  00000000  0004f3e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012e157  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c44  00000000  00000000  0012e19c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00134de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a5e0 	.word	0x0800a5e0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	0800a5e0 	.word	0x0800a5e0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__aeabi_uldivmod>:
 8000c4c:	b953      	cbnz	r3, 8000c64 <__aeabi_uldivmod+0x18>
 8000c4e:	b94a      	cbnz	r2, 8000c64 <__aeabi_uldivmod+0x18>
 8000c50:	2900      	cmp	r1, #0
 8000c52:	bf08      	it	eq
 8000c54:	2800      	cmpeq	r0, #0
 8000c56:	bf1c      	itt	ne
 8000c58:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c5c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c60:	f000 b96a 	b.w	8000f38 <__aeabi_idiv0>
 8000c64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c6c:	f000 f806 	bl	8000c7c <__udivmoddi4>
 8000c70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c78:	b004      	add	sp, #16
 8000c7a:	4770      	bx	lr

08000c7c <__udivmoddi4>:
 8000c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c80:	9d08      	ldr	r5, [sp, #32]
 8000c82:	460c      	mov	r4, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14e      	bne.n	8000d26 <__udivmoddi4+0xaa>
 8000c88:	4694      	mov	ip, r2
 8000c8a:	458c      	cmp	ip, r1
 8000c8c:	4686      	mov	lr, r0
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	d962      	bls.n	8000d5a <__udivmoddi4+0xde>
 8000c94:	b14a      	cbz	r2, 8000caa <__udivmoddi4+0x2e>
 8000c96:	f1c2 0320 	rsb	r3, r2, #32
 8000c9a:	4091      	lsls	r1, r2
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca4:	4319      	orrs	r1, r3
 8000ca6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000caa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cae:	fa1f f68c 	uxth.w	r6, ip
 8000cb2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cba:	fb07 1114 	mls	r1, r7, r4, r1
 8000cbe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cc2:	fb04 f106 	mul.w	r1, r4, r6
 8000cc6:	4299      	cmp	r1, r3
 8000cc8:	d90a      	bls.n	8000ce0 <__udivmoddi4+0x64>
 8000cca:	eb1c 0303 	adds.w	r3, ip, r3
 8000cce:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000cd2:	f080 8112 	bcs.w	8000efa <__udivmoddi4+0x27e>
 8000cd6:	4299      	cmp	r1, r3
 8000cd8:	f240 810f 	bls.w	8000efa <__udivmoddi4+0x27e>
 8000cdc:	3c02      	subs	r4, #2
 8000cde:	4463      	add	r3, ip
 8000ce0:	1a59      	subs	r1, r3, r1
 8000ce2:	fa1f f38e 	uxth.w	r3, lr
 8000ce6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cea:	fb07 1110 	mls	r1, r7, r0, r1
 8000cee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf2:	fb00 f606 	mul.w	r6, r0, r6
 8000cf6:	429e      	cmp	r6, r3
 8000cf8:	d90a      	bls.n	8000d10 <__udivmoddi4+0x94>
 8000cfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfe:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d02:	f080 80fc 	bcs.w	8000efe <__udivmoddi4+0x282>
 8000d06:	429e      	cmp	r6, r3
 8000d08:	f240 80f9 	bls.w	8000efe <__udivmoddi4+0x282>
 8000d0c:	4463      	add	r3, ip
 8000d0e:	3802      	subs	r0, #2
 8000d10:	1b9b      	subs	r3, r3, r6
 8000d12:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d16:	2100      	movs	r1, #0
 8000d18:	b11d      	cbz	r5, 8000d22 <__udivmoddi4+0xa6>
 8000d1a:	40d3      	lsrs	r3, r2
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	e9c5 3200 	strd	r3, r2, [r5]
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	428b      	cmp	r3, r1
 8000d28:	d905      	bls.n	8000d36 <__udivmoddi4+0xba>
 8000d2a:	b10d      	cbz	r5, 8000d30 <__udivmoddi4+0xb4>
 8000d2c:	e9c5 0100 	strd	r0, r1, [r5]
 8000d30:	2100      	movs	r1, #0
 8000d32:	4608      	mov	r0, r1
 8000d34:	e7f5      	b.n	8000d22 <__udivmoddi4+0xa6>
 8000d36:	fab3 f183 	clz	r1, r3
 8000d3a:	2900      	cmp	r1, #0
 8000d3c:	d146      	bne.n	8000dcc <__udivmoddi4+0x150>
 8000d3e:	42a3      	cmp	r3, r4
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xcc>
 8000d42:	4290      	cmp	r0, r2
 8000d44:	f0c0 80f0 	bcc.w	8000f28 <__udivmoddi4+0x2ac>
 8000d48:	1a86      	subs	r6, r0, r2
 8000d4a:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	2d00      	cmp	r5, #0
 8000d52:	d0e6      	beq.n	8000d22 <__udivmoddi4+0xa6>
 8000d54:	e9c5 6300 	strd	r6, r3, [r5]
 8000d58:	e7e3      	b.n	8000d22 <__udivmoddi4+0xa6>
 8000d5a:	2a00      	cmp	r2, #0
 8000d5c:	f040 8090 	bne.w	8000e80 <__udivmoddi4+0x204>
 8000d60:	eba1 040c 	sub.w	r4, r1, ip
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	fa1f f78c 	uxth.w	r7, ip
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d76:	fb08 4416 	mls	r4, r8, r6, r4
 8000d7a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7e:	fb07 f006 	mul.w	r0, r7, r6
 8000d82:	4298      	cmp	r0, r3
 8000d84:	d908      	bls.n	8000d98 <__udivmoddi4+0x11c>
 8000d86:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d8e:	d202      	bcs.n	8000d96 <__udivmoddi4+0x11a>
 8000d90:	4298      	cmp	r0, r3
 8000d92:	f200 80cd 	bhi.w	8000f30 <__udivmoddi4+0x2b4>
 8000d96:	4626      	mov	r6, r4
 8000d98:	1a1c      	subs	r4, r3, r0
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000da2:	fb08 4410 	mls	r4, r8, r0, r4
 8000da6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000daa:	fb00 f707 	mul.w	r7, r0, r7
 8000dae:	429f      	cmp	r7, r3
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x148>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x146>
 8000dbc:	429f      	cmp	r7, r3
 8000dbe:	f200 80b0 	bhi.w	8000f22 <__udivmoddi4+0x2a6>
 8000dc2:	4620      	mov	r0, r4
 8000dc4:	1bdb      	subs	r3, r3, r7
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0x9c>
 8000dcc:	f1c1 0620 	rsb	r6, r1, #32
 8000dd0:	408b      	lsls	r3, r1
 8000dd2:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd6:	431f      	orrs	r7, r3
 8000dd8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ddc:	fa04 f301 	lsl.w	r3, r4, r1
 8000de0:	ea43 030c 	orr.w	r3, r3, ip
 8000de4:	40f4      	lsrs	r4, r6
 8000de6:	fa00 f801 	lsl.w	r8, r0, r1
 8000dea:	0c38      	lsrs	r0, r7, #16
 8000dec:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000df0:	fbb4 fef0 	udiv	lr, r4, r0
 8000df4:	fa1f fc87 	uxth.w	ip, r7
 8000df8:	fb00 441e 	mls	r4, r0, lr, r4
 8000dfc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e00:	fb0e f90c 	mul.w	r9, lr, ip
 8000e04:	45a1      	cmp	r9, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	d90a      	bls.n	8000e22 <__udivmoddi4+0x1a6>
 8000e0c:	193c      	adds	r4, r7, r4
 8000e0e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e12:	f080 8084 	bcs.w	8000f1e <__udivmoddi4+0x2a2>
 8000e16:	45a1      	cmp	r9, r4
 8000e18:	f240 8081 	bls.w	8000f1e <__udivmoddi4+0x2a2>
 8000e1c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e20:	443c      	add	r4, r7
 8000e22:	eba4 0409 	sub.w	r4, r4, r9
 8000e26:	fa1f f983 	uxth.w	r9, r3
 8000e2a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2e:	fb00 4413 	mls	r4, r0, r3, r4
 8000e32:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e36:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e3a:	45a4      	cmp	ip, r4
 8000e3c:	d907      	bls.n	8000e4e <__udivmoddi4+0x1d2>
 8000e3e:	193c      	adds	r4, r7, r4
 8000e40:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e44:	d267      	bcs.n	8000f16 <__udivmoddi4+0x29a>
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d965      	bls.n	8000f16 <__udivmoddi4+0x29a>
 8000e4a:	3b02      	subs	r3, #2
 8000e4c:	443c      	add	r4, r7
 8000e4e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e52:	fba0 9302 	umull	r9, r3, r0, r2
 8000e56:	eba4 040c 	sub.w	r4, r4, ip
 8000e5a:	429c      	cmp	r4, r3
 8000e5c:	46ce      	mov	lr, r9
 8000e5e:	469c      	mov	ip, r3
 8000e60:	d351      	bcc.n	8000f06 <__udivmoddi4+0x28a>
 8000e62:	d04e      	beq.n	8000f02 <__udivmoddi4+0x286>
 8000e64:	b155      	cbz	r5, 8000e7c <__udivmoddi4+0x200>
 8000e66:	ebb8 030e 	subs.w	r3, r8, lr
 8000e6a:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6e:	fa04 f606 	lsl.w	r6, r4, r6
 8000e72:	40cb      	lsrs	r3, r1
 8000e74:	431e      	orrs	r6, r3
 8000e76:	40cc      	lsrs	r4, r1
 8000e78:	e9c5 6400 	strd	r6, r4, [r5]
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	e750      	b.n	8000d22 <__udivmoddi4+0xa6>
 8000e80:	f1c2 0320 	rsb	r3, r2, #32
 8000e84:	fa20 f103 	lsr.w	r1, r0, r3
 8000e88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e8c:	fa24 f303 	lsr.w	r3, r4, r3
 8000e90:	4094      	lsls	r4, r2
 8000e92:	430c      	orrs	r4, r1
 8000e94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e98:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e9c:	fa1f f78c 	uxth.w	r7, ip
 8000ea0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea8:	0c23      	lsrs	r3, r4, #16
 8000eaa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eae:	fb00 f107 	mul.w	r1, r0, r7
 8000eb2:	4299      	cmp	r1, r3
 8000eb4:	d908      	bls.n	8000ec8 <__udivmoddi4+0x24c>
 8000eb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eba:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000ebe:	d22c      	bcs.n	8000f1a <__udivmoddi4+0x29e>
 8000ec0:	4299      	cmp	r1, r3
 8000ec2:	d92a      	bls.n	8000f1a <__udivmoddi4+0x29e>
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	4463      	add	r3, ip
 8000ec8:	1a5b      	subs	r3, r3, r1
 8000eca:	b2a4      	uxth	r4, r4
 8000ecc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ed0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed8:	fb01 f307 	mul.w	r3, r1, r7
 8000edc:	42a3      	cmp	r3, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x276>
 8000ee0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee4:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ee8:	d213      	bcs.n	8000f12 <__udivmoddi4+0x296>
 8000eea:	42a3      	cmp	r3, r4
 8000eec:	d911      	bls.n	8000f12 <__udivmoddi4+0x296>
 8000eee:	3902      	subs	r1, #2
 8000ef0:	4464      	add	r4, ip
 8000ef2:	1ae4      	subs	r4, r4, r3
 8000ef4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef8:	e739      	b.n	8000d6e <__udivmoddi4+0xf2>
 8000efa:	4604      	mov	r4, r0
 8000efc:	e6f0      	b.n	8000ce0 <__udivmoddi4+0x64>
 8000efe:	4608      	mov	r0, r1
 8000f00:	e706      	b.n	8000d10 <__udivmoddi4+0x94>
 8000f02:	45c8      	cmp	r8, r9
 8000f04:	d2ae      	bcs.n	8000e64 <__udivmoddi4+0x1e8>
 8000f06:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f0a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0e:	3801      	subs	r0, #1
 8000f10:	e7a8      	b.n	8000e64 <__udivmoddi4+0x1e8>
 8000f12:	4631      	mov	r1, r6
 8000f14:	e7ed      	b.n	8000ef2 <__udivmoddi4+0x276>
 8000f16:	4603      	mov	r3, r0
 8000f18:	e799      	b.n	8000e4e <__udivmoddi4+0x1d2>
 8000f1a:	4630      	mov	r0, r6
 8000f1c:	e7d4      	b.n	8000ec8 <__udivmoddi4+0x24c>
 8000f1e:	46d6      	mov	lr, sl
 8000f20:	e77f      	b.n	8000e22 <__udivmoddi4+0x1a6>
 8000f22:	4463      	add	r3, ip
 8000f24:	3802      	subs	r0, #2
 8000f26:	e74d      	b.n	8000dc4 <__udivmoddi4+0x148>
 8000f28:	4606      	mov	r6, r0
 8000f2a:	4623      	mov	r3, r4
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	e70f      	b.n	8000d50 <__udivmoddi4+0xd4>
 8000f30:	3e02      	subs	r6, #2
 8000f32:	4463      	add	r3, ip
 8000f34:	e730      	b.n	8000d98 <__udivmoddi4+0x11c>
 8000f36:	bf00      	nop

08000f38 <__aeabi_idiv0>:
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop

08000f3c <myComfyPrint>:

extern UART_HandleTypeDef huart2;

uint8_t buff[2048] = { 0 };

void myComfyPrint(const char* string){
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	strncpy((char*) buff, string, sizeof(buff));
 8000f44:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f48:	6879      	ldr	r1, [r7, #4]
 8000f4a:	4809      	ldr	r0, [pc, #36]	@ (8000f70 <myComfyPrint+0x34>)
 8000f4c:	f008 fbfc 	bl	8009748 <strncpy>
	HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8000f50:	4807      	ldr	r0, [pc, #28]	@ (8000f70 <myComfyPrint+0x34>)
 8000f52:	f7ff f95d 	bl	8000210 <strlen>
 8000f56:	4603      	mov	r3, r0
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f5e:	4904      	ldr	r1, [pc, #16]	@ (8000f70 <myComfyPrint+0x34>)
 8000f60:	4804      	ldr	r0, [pc, #16]	@ (8000f74 <myComfyPrint+0x38>)
 8000f62:	f004 fe05 	bl	8005b70 <HAL_UART_Transmit>
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000080 	.word	0x20000080
 8000f74:	2000091c 	.word	0x2000091c

08000f78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f78:	b5b0      	push	{r4, r5, r7, lr}
 8000f7a:	f5ad 6d15 	sub.w	sp, sp, #2384	@ 0x950
 8000f7e:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f80:	f001 fc82 	bl	8002888 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f84:	f000 fc26 	bl	80017d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f88:	f000 fd4e 	bl	8001a28 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f8c:	f000 fd22 	bl	80019d4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000f90:	f000 fc8e 	bl	80018b0 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000f94:	f000 fcba 	bl	800190c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  //initialize mpu6050
  mpu6050_init();
 8000f98:	f001 f84c 	bl	8002034 <mpu6050_init>

  //initialize motors
  motor_init();
 8000f9c:	f000 fffe 	bl	8001f9c <motor_init>



  //while loop to wait until robot is in upright position
  //calculate angle from acceleration values
  float acc_angle_temp=1;
 8000fa0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000fa4:	f607 1244 	addw	r2, r7, #2372	@ 0x944
 8000fa8:	6013      	str	r3, [r2, #0]
  static uint8_t done_already = 0;
  char myString[256] = { 0 };
 8000faa:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 8000fae:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	3304      	adds	r3, #4
 8000fb8:	22fc      	movs	r2, #252	@ 0xfc
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f008 fbbb 	bl	8009738 <memset>

  mpu6050_read(&mpu_values);
 8000fc2:	489f      	ldr	r0, [pc, #636]	@ (8001240 <main+0x2c8>)
 8000fc4:	f001 f9a6 	bl	8002314 <mpu6050_read>

  if(done_already == 0){
 8000fc8:	4b9e      	ldr	r3, [pc, #632]	@ (8001244 <main+0x2cc>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d172      	bne.n	80010b6 <main+0x13e>
	  while(acc_angle_temp != 0){
 8000fd0:	e062      	b.n	8001098 <main+0x120>
		  acc_angle_temp = atan2(mpu_values.acc_x, mpu_values.acc_z)*RAD_TO_DEG;	//*(180/M_PI) to convert from radian to degree
 8000fd2:	4b9b      	ldr	r3, [pc, #620]	@ (8001240 <main+0x2c8>)
 8000fd4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff fac3 	bl	8000564 <__aeabi_i2d>
 8000fde:	4604      	mov	r4, r0
 8000fe0:	460d      	mov	r5, r1
 8000fe2:	4b97      	ldr	r3, [pc, #604]	@ (8001240 <main+0x2c8>)
 8000fe4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fabb 	bl	8000564 <__aeabi_i2d>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	ec43 2b11 	vmov	d1, r2, r3
 8000ff6:	ec45 4b10 	vmov	d0, r4, r5
 8000ffa:	f009 f887 	bl	800a10c <atan2>
 8000ffe:	ec51 0b10 	vmov	r0, r1, d0
 8001002:	f04f 0200 	mov.w	r2, #0
 8001006:	4b90      	ldr	r3, [pc, #576]	@ (8001248 <main+0x2d0>)
 8001008:	f7ff fb16 	bl	8000638 <__aeabi_dmul>
 800100c:	4602      	mov	r2, r0
 800100e:	460b      	mov	r3, r1
 8001010:	4610      	mov	r0, r2
 8001012:	4619      	mov	r1, r3
 8001014:	a388      	add	r3, pc, #544	@ (adr r3, 8001238 <main+0x2c0>)
 8001016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101a:	f7ff fc37 	bl	800088c <__aeabi_ddiv>
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	4610      	mov	r0, r2
 8001024:	4619      	mov	r1, r3
 8001026:	f7ff fdc1 	bl	8000bac <__aeabi_d2f>
 800102a:	4603      	mov	r3, r0
 800102c:	f607 1244 	addw	r2, r7, #2372	@ 0x944
 8001030:	6013      	str	r3, [r2, #0]
		  if(isnan(acc_angle_temp)){
 8001032:	f607 1344 	addw	r3, r7, #2372	@ 0x944
 8001036:	ed93 7a00 	vldr	s14, [r3]
 800103a:	f607 1344 	addw	r3, r7, #2372	@ 0x944
 800103e:	edd3 7a00 	vldr	s15, [r3]
 8001042:	eeb4 7a67 	vcmp.f32	s14, s15
 8001046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800104a:	d70b      	bvc.n	8001064 <main+0xec>
			  sprintf((char*) myString, "acc_angle_temp is NaN\r\n");
 800104c:	f607 030c 	addw	r3, r7, #2060	@ 0x80c
 8001050:	497e      	ldr	r1, [pc, #504]	@ (800124c <main+0x2d4>)
 8001052:	4618      	mov	r0, r3
 8001054:	f008 fb50 	bl	80096f8 <siprintf>
			  myComfyPrint(myString);
 8001058:	f607 030c 	addw	r3, r7, #2060	@ 0x80c
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff6d 	bl	8000f3c <myComfyPrint>
 8001062:	e016      	b.n	8001092 <main+0x11a>
		  }
		  else{
			  sprintf((char*) myString, "acc_angle_temp*100 = %d\r\n", (int) (acc_angle_temp*100));	//apparently floating numbers are disabled in print funcitons by defautl if using newlib
 8001064:	f607 1344 	addw	r3, r7, #2372	@ 0x944
 8001068:	edd3 7a00 	vldr	s15, [r3]
 800106c:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8001250 <main+0x2d8>
 8001070:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001074:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001078:	f607 030c 	addw	r3, r7, #2060	@ 0x80c
 800107c:	ee17 2a90 	vmov	r2, s15
 8001080:	4974      	ldr	r1, [pc, #464]	@ (8001254 <main+0x2dc>)
 8001082:	4618      	mov	r0, r3
 8001084:	f008 fb38 	bl	80096f8 <siprintf>
			  myComfyPrint(myString);
 8001088:	f607 030c 	addw	r3, r7, #2060	@ 0x80c
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ff55 	bl	8000f3c <myComfyPrint>
		  }

		  mpu6050_read(&mpu_values);
 8001092:	486b      	ldr	r0, [pc, #428]	@ (8001240 <main+0x2c8>)
 8001094:	f001 f93e 	bl	8002314 <mpu6050_read>
	  while(acc_angle_temp != 0){
 8001098:	f607 1344 	addw	r3, r7, #2372	@ 0x944
 800109c:	edd3 7a00 	vldr	s15, [r3]
 80010a0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80010a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010a8:	d193      	bne.n	8000fd2 <main+0x5a>
	  }
	  done_already = 1;
 80010aa:	4b66      	ldr	r3, [pc, #408]	@ (8001244 <main+0x2cc>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	701a      	strb	r2, [r3, #0]
	  mpu6050_read(&mpu_values);
 80010b0:	4863      	ldr	r0, [pc, #396]	@ (8001240 <main+0x2c8>)
 80010b2:	f001 f92f 	bl	8002314 <mpu6050_read>
  }
  sprintf((char*) myString, "Acceleration X = %d\r\nAcceleration Y = %d\r\nAcceleration Z = %d\r\n", mpu_values.acc_x, mpu_values.acc_y, mpu_values.acc_z);
 80010b6:	4b62      	ldr	r3, [pc, #392]	@ (8001240 <main+0x2c8>)
 80010b8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80010bc:	461a      	mov	r2, r3
 80010be:	4b60      	ldr	r3, [pc, #384]	@ (8001240 <main+0x2c8>)
 80010c0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80010c4:	4619      	mov	r1, r3
 80010c6:	4b5e      	ldr	r3, [pc, #376]	@ (8001240 <main+0x2c8>)
 80010c8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80010cc:	f607 000c 	addw	r0, r7, #2060	@ 0x80c
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	460b      	mov	r3, r1
 80010d4:	4960      	ldr	r1, [pc, #384]	@ (8001258 <main+0x2e0>)
 80010d6:	f008 fb0f 	bl	80096f8 <siprintf>
  myComfyPrint(myString);
 80010da:	f607 030c 	addw	r3, r7, #2060	@ 0x80c
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff ff2c 	bl	8000f3c <myComfyPrint>
  sprintf((char*) myString, "Gyroscope X = %d\r\nGyroscope Y = %d\r\nGyroscope Z = %d\r\n", mpu_values.gyro_x, mpu_values.gyro_y, mpu_values.gyro_z);
 80010e4:	4b56      	ldr	r3, [pc, #344]	@ (8001240 <main+0x2c8>)
 80010e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ea:	461a      	mov	r2, r3
 80010ec:	4b54      	ldr	r3, [pc, #336]	@ (8001240 <main+0x2c8>)
 80010ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010f2:	4619      	mov	r1, r3
 80010f4:	4b52      	ldr	r3, [pc, #328]	@ (8001240 <main+0x2c8>)
 80010f6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010fa:	f607 000c 	addw	r0, r7, #2060	@ 0x80c
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	460b      	mov	r3, r1
 8001102:	4956      	ldr	r1, [pc, #344]	@ (800125c <main+0x2e4>)
 8001104:	f008 faf8 	bl	80096f8 <siprintf>
  myComfyPrint(myString);
 8001108:	f607 030c 	addw	r3, r7, #2060	@ 0x80c
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ff15 	bl	8000f3c <myComfyPrint>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001112:	f005 f92d 	bl	8006370 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of mpu_values_mutex */
  mpu_values_mutexHandle = osMutexNew(&mpu_values_mutex_attributes);
 8001116:	4852      	ldr	r0, [pc, #328]	@ (8001260 <main+0x2e8>)
 8001118:	f005 fa24 	bl	8006564 <osMutexNew>
 800111c:	4603      	mov	r3, r0
 800111e:	4a51      	ldr	r2, [pc, #324]	@ (8001264 <main+0x2ec>)
 8001120:	6013      	str	r3, [r2, #0]

  /* creation of motor_value_mutex */
  motor_value_mutexHandle = osMutexNew(&motor_value_mutex_attributes);
 8001122:	4851      	ldr	r0, [pc, #324]	@ (8001268 <main+0x2f0>)
 8001124:	f005 fa1e 	bl	8006564 <osMutexNew>
 8001128:	4603      	mov	r3, r0
 800112a:	4a50      	ldr	r2, [pc, #320]	@ (800126c <main+0x2f4>)
 800112c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task_ReadMPU605 */
  Task_ReadMPU605Handle = osThreadNew(task_read_mpu6050, NULL, &Task_ReadMPU605_attributes);
 800112e:	4a50      	ldr	r2, [pc, #320]	@ (8001270 <main+0x2f8>)
 8001130:	2100      	movs	r1, #0
 8001132:	4850      	ldr	r0, [pc, #320]	@ (8001274 <main+0x2fc>)
 8001134:	f005 f984 	bl	8006440 <osThreadNew>
 8001138:	4603      	mov	r3, r0
 800113a:	4a4f      	ldr	r2, [pc, #316]	@ (8001278 <main+0x300>)
 800113c:	6013      	str	r3, [r2, #0]

  /* creation of Task_CalcValues */
  Task_CalcValuesHandle = osThreadNew(task_calculate_motor_values, NULL, &Task_CalcValues_attributes);
 800113e:	4a4f      	ldr	r2, [pc, #316]	@ (800127c <main+0x304>)
 8001140:	2100      	movs	r1, #0
 8001142:	484f      	ldr	r0, [pc, #316]	@ (8001280 <main+0x308>)
 8001144:	f005 f97c 	bl	8006440 <osThreadNew>
 8001148:	4603      	mov	r3, r0
 800114a:	4a4e      	ldr	r2, [pc, #312]	@ (8001284 <main+0x30c>)
 800114c:	6013      	str	r3, [r2, #0]

  /* creation of Task_CtrlMotor */
  Task_CtrlMotorHandle = osThreadNew(task_control_motors, NULL, &Task_CtrlMotor_attributes);
 800114e:	4a4e      	ldr	r2, [pc, #312]	@ (8001288 <main+0x310>)
 8001150:	2100      	movs	r1, #0
 8001152:	484e      	ldr	r0, [pc, #312]	@ (800128c <main+0x314>)
 8001154:	f005 f974 	bl	8006440 <osThreadNew>
 8001158:	4603      	mov	r3, r0
 800115a:	4a4d      	ldr	r2, [pc, #308]	@ (8001290 <main+0x318>)
 800115c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800115e:	f005 f92b 	bl	80063b8 <osKernelStart>
	  //////////////////////////////////
	  //read values from mpu6050 BEGIN//
	  //////////////////////////////////

	  mpu6050_values_t mpu_values;
	  mpu6050_read(&mpu_values);
 8001162:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8001166:	4618      	mov	r0, r3
 8001168:	f001 f8d4 	bl	8002314 <mpu6050_read>
	  sprintf((char*) myString, /*sizeof(buff),*/ "Acceleration X = %d\r\nAcceleration Y = %d\r\nAcceleration Z = %d\r\n", mpu_values.acc_x, mpu_values.acc_y, mpu_values.acc_z);
 800116c:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 8001170:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001174:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001178:	461a      	mov	r2, r3
 800117a:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 800117e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001182:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001186:	4619      	mov	r1, r3
 8001188:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 800118c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001190:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001194:	4638      	mov	r0, r7
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	460b      	mov	r3, r1
 800119a:	492f      	ldr	r1, [pc, #188]	@ (8001258 <main+0x2e0>)
 800119c:	f008 faac 	bl	80096f8 <siprintf>
	  myComfyPrint(myString);
 80011a0:	463b      	mov	r3, r7
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff feca 	bl	8000f3c <myComfyPrint>
	  sprintf((char*) myString, /*sizeof(buff),*/ "Gyroscope X = %d\r\nGyroscope Y = %d\r\nGyroscope Z = %d\r\n", mpu_values.gyro_x, mpu_values.gyro_y, mpu_values.gyro_z);
 80011a8:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 80011ac:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80011b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011b4:	461a      	mov	r2, r3
 80011b6:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 80011ba:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80011be:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011c2:	4619      	mov	r1, r3
 80011c4:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 80011c8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80011cc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80011d0:	4638      	mov	r0, r7
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	460b      	mov	r3, r1
 80011d6:	4921      	ldr	r1, [pc, #132]	@ (800125c <main+0x2e4>)
 80011d8:	f008 fa8e 	bl	80096f8 <siprintf>
	  myComfyPrint(myString);
 80011dc:	463b      	mov	r3, r7
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff feac 	bl	8000f3c <myComfyPrint>
	  //some debug stuff 1 BEGIN//
	  ////////////////////////////

	  static int16_t counter = 0;
	  static int16_t myArr[25] = { 0 };
	  myArr[counter] = mpu_values.gyro_y;
 80011e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001294 <main+0x31c>)
 80011e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ea:	461a      	mov	r2, r3
 80011ec:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 80011f0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80011f4:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 80011f8:	4b27      	ldr	r3, [pc, #156]	@ (8001298 <main+0x320>)
 80011fa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  counter = (counter+1) % 25;
 80011fe:	4b25      	ldr	r3, [pc, #148]	@ (8001294 <main+0x31c>)
 8001200:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001204:	1c5a      	adds	r2, r3, #1
 8001206:	4b25      	ldr	r3, [pc, #148]	@ (800129c <main+0x324>)
 8001208:	fb83 1302 	smull	r1, r3, r3, r2
 800120c:	10d9      	asrs	r1, r3, #3
 800120e:	17d3      	asrs	r3, r2, #31
 8001210:	1ac9      	subs	r1, r1, r3
 8001212:	460b      	mov	r3, r1
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	440b      	add	r3, r1
 8001218:	0099      	lsls	r1, r3, #2
 800121a:	440b      	add	r3, r1
 800121c:	1ad1      	subs	r1, r2, r3
 800121e:	b20a      	sxth	r2, r1
 8001220:	4b1c      	ldr	r3, [pc, #112]	@ (8001294 <main+0x31c>)
 8001222:	801a      	strh	r2, [r3, #0]
	  int32_t sum = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	f8c7 3940 	str.w	r3, [r7, #2368]	@ 0x940
	  for(int i = 0; i<25; i++){
 800122a:	2300      	movs	r3, #0
 800122c:	f8c7 393c 	str.w	r3, [r7, #2364]	@ 0x93c
 8001230:	e046      	b.n	80012c0 <main+0x348>
 8001232:	bf00      	nop
 8001234:	f3af 8000 	nop.w
 8001238:	54442d18 	.word	0x54442d18
 800123c:	400921fb 	.word	0x400921fb
 8001240:	20000978 	.word	0x20000978
 8001244:	20000988 	.word	0x20000988
 8001248:	40668000 	.word	0x40668000
 800124c:	0800a650 	.word	0x0800a650
 8001250:	42c80000 	.word	0x42c80000
 8001254:	0800a668 	.word	0x0800a668
 8001258:	0800a684 	.word	0x0800a684
 800125c:	0800a6c4 	.word	0x0800a6c4
 8001260:	0800a95c 	.word	0x0800a95c
 8001264:	20000970 	.word	0x20000970
 8001268:	0800a96c 	.word	0x0800a96c
 800126c:	20000974 	.word	0x20000974
 8001270:	0800a8f0 	.word	0x0800a8f0
 8001274:	08001b51 	.word	0x08001b51
 8001278:	20000964 	.word	0x20000964
 800127c:	0800a914 	.word	0x0800a914
 8001280:	08001c61 	.word	0x08001c61
 8001284:	20000968 	.word	0x20000968
 8001288:	0800a938 	.word	0x0800a938
 800128c:	08001f01 	.word	0x08001f01
 8001290:	2000096c 	.word	0x2000096c
 8001294:	2000098a 	.word	0x2000098a
 8001298:	2000098c 	.word	0x2000098c
 800129c:	51eb851f 	.word	0x51eb851f
		  sum += myArr[i];
 80012a0:	4a9b      	ldr	r2, [pc, #620]	@ (8001510 <main+0x598>)
 80012a2:	f8d7 393c 	ldr.w	r3, [r7, #2364]	@ 0x93c
 80012a6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80012aa:	461a      	mov	r2, r3
 80012ac:	f8d7 3940 	ldr.w	r3, [r7, #2368]	@ 0x940
 80012b0:	4413      	add	r3, r2
 80012b2:	f8c7 3940 	str.w	r3, [r7, #2368]	@ 0x940
	  for(int i = 0; i<25; i++){
 80012b6:	f8d7 393c 	ldr.w	r3, [r7, #2364]	@ 0x93c
 80012ba:	3301      	adds	r3, #1
 80012bc:	f8c7 393c 	str.w	r3, [r7, #2364]	@ 0x93c
 80012c0:	f8d7 393c 	ldr.w	r3, [r7, #2364]	@ 0x93c
 80012c4:	2b18      	cmp	r3, #24
 80012c6:	ddeb      	ble.n	80012a0 <main+0x328>
	  }
	  sprintf((char*) myString, "average gyro_y = %d\r\n", sum/25);
 80012c8:	f8d7 3940 	ldr.w	r3, [r7, #2368]	@ 0x940
 80012cc:	4a91      	ldr	r2, [pc, #580]	@ (8001514 <main+0x59c>)
 80012ce:	fb82 1203 	smull	r1, r2, r2, r3
 80012d2:	10d2      	asrs	r2, r2, #3
 80012d4:	17db      	asrs	r3, r3, #31
 80012d6:	1ad2      	subs	r2, r2, r3
 80012d8:	463b      	mov	r3, r7
 80012da:	498f      	ldr	r1, [pc, #572]	@ (8001518 <main+0x5a0>)
 80012dc:	4618      	mov	r0, r3
 80012de:	f008 fa0b 	bl	80096f8 <siprintf>
	  myComfyPrint(myString);
 80012e2:	463b      	mov	r3, r7
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff fe29 	bl	8000f3c <myComfyPrint>



	  static int16_t max_acc_x = INT16_MIN;
	  static int16_t min_acc_x = INT16_MAX;
	  if(mpu_values.acc_x > max_acc_x) max_acc_x = mpu_values.acc_x;
 80012ea:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 80012ee:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80012f2:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80012f6:	4b89      	ldr	r3, [pc, #548]	@ (800151c <main+0x5a4>)
 80012f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	dd07      	ble.n	8001310 <main+0x398>
 8001300:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 8001304:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001308:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800130c:	4b83      	ldr	r3, [pc, #524]	@ (800151c <main+0x5a4>)
 800130e:	801a      	strh	r2, [r3, #0]
	  if(mpu_values.acc_x < min_acc_x) min_acc_x = mpu_values.acc_x;
 8001310:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 8001314:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001318:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800131c:	4b80      	ldr	r3, [pc, #512]	@ (8001520 <main+0x5a8>)
 800131e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001322:	429a      	cmp	r2, r3
 8001324:	da07      	bge.n	8001336 <main+0x3be>
 8001326:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 800132a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800132e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8001332:	4b7b      	ldr	r3, [pc, #492]	@ (8001520 <main+0x5a8>)
 8001334:	801a      	strh	r2, [r3, #0]
	  sprintf((char*) myString, "max diff = %d\r\n", max_acc_x - min_acc_x);
 8001336:	4b79      	ldr	r3, [pc, #484]	@ (800151c <main+0x5a4>)
 8001338:	f9b3 3000 	ldrsh.w	r3, [r3]
 800133c:	461a      	mov	r2, r3
 800133e:	4b78      	ldr	r3, [pc, #480]	@ (8001520 <main+0x5a8>)
 8001340:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001344:	1ad2      	subs	r2, r2, r3
 8001346:	463b      	mov	r3, r7
 8001348:	4976      	ldr	r1, [pc, #472]	@ (8001524 <main+0x5ac>)
 800134a:	4618      	mov	r0, r3
 800134c:	f008 f9d4 	bl	80096f8 <siprintf>
	  myComfyPrint(myString);
 8001350:	463b      	mov	r3, r7
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff fdf2 	bl	8000f3c <myComfyPrint>
	  //calculate motor values BEGIN//
	  ////////////////////////////////

	  //calculate angle from acceleration values
	  float acc_angle;
	  acc_angle = atan2(mpu_values.acc_x, mpu_values.acc_z)*RAD_TO_DEG;	//*(180/M_PI) to convert from radian to degree
 8001358:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 800135c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001360:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff f8fd 	bl	8000564 <__aeabi_i2d>
 800136a:	4604      	mov	r4, r0
 800136c:	460d      	mov	r5, r1
 800136e:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 8001372:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001376:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff f8f2 	bl	8000564 <__aeabi_i2d>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	ec43 2b11 	vmov	d1, r2, r3
 8001388:	ec45 4b10 	vmov	d0, r4, r5
 800138c:	f008 febe 	bl	800a10c <atan2>
 8001390:	ec51 0b10 	vmov	r0, r1, d0
 8001394:	f04f 0200 	mov.w	r2, #0
 8001398:	4b63      	ldr	r3, [pc, #396]	@ (8001528 <main+0x5b0>)
 800139a:	f7ff f94d 	bl	8000638 <__aeabi_dmul>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	4610      	mov	r0, r2
 80013a4:	4619      	mov	r1, r3
 80013a6:	a356      	add	r3, pc, #344	@ (adr r3, 8001500 <main+0x588>)
 80013a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ac:	f7ff fa6e 	bl	800088c <__aeabi_ddiv>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4610      	mov	r0, r2
 80013b6:	4619      	mov	r1, r3
 80013b8:	f7ff fbf8 	bl	8000bac <__aeabi_d2f>
 80013bc:	4603      	mov	r3, r0
 80013be:	f507 6213 	add.w	r2, r7, #2352	@ 0x930
 80013c2:	6013      	str	r3, [r2, #0]

	  //debug prints
	  if(isnan(acc_angle)){
 80013c4:	f507 6313 	add.w	r3, r7, #2352	@ 0x930
 80013c8:	ed93 7a00 	vldr	s14, [r3]
 80013cc:	f507 6313 	add.w	r3, r7, #2352	@ 0x930
 80013d0:	edd3 7a00 	vldr	s15, [r3]
 80013d4:	eeb4 7a67 	vcmp.f32	s14, s15
 80013d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013dc:	d709      	bvc.n	80013f2 <main+0x47a>
		  sprintf((char*) myString, "acc_angle is NaN\r\n");
 80013de:	463b      	mov	r3, r7
 80013e0:	4952      	ldr	r1, [pc, #328]	@ (800152c <main+0x5b4>)
 80013e2:	4618      	mov	r0, r3
 80013e4:	f008 f988 	bl	80096f8 <siprintf>
		  myComfyPrint(myString);
 80013e8:	463b      	mov	r3, r7
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff fda6 	bl	8000f3c <myComfyPrint>
 80013f0:	e014      	b.n	800141c <main+0x4a4>
	  }
	  else{
		  sprintf((char*) myString, "acc_angle*100 = %d\r\n", (int) (acc_angle*100));	//apparently floating numbers are disabled in print funcitons by defautl if using newlib
 80013f2:	f507 6313 	add.w	r3, r7, #2352	@ 0x930
 80013f6:	edd3 7a00 	vldr	s15, [r3]
 80013fa:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8001530 <main+0x5b8>
 80013fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001402:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001406:	463b      	mov	r3, r7
 8001408:	ee17 2a90 	vmov	r2, s15
 800140c:	4949      	ldr	r1, [pc, #292]	@ (8001534 <main+0x5bc>)
 800140e:	4618      	mov	r0, r3
 8001410:	f008 f972 	bl	80096f8 <siprintf>
		  myComfyPrint(myString);
 8001414:	463b      	mov	r3, r7
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff fd90 	bl	8000f3c <myComfyPrint>


	  //debug prints
	  static int16_t counter2 = 0;
	  static int16_t myArr2[100] = { 0 };
	  myArr2[counter2] = acc_angle;
 800141c:	4b46      	ldr	r3, [pc, #280]	@ (8001538 <main+0x5c0>)
 800141e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001422:	461a      	mov	r2, r3
 8001424:	f507 6313 	add.w	r3, r7, #2352	@ 0x930
 8001428:	edd3 7a00 	vldr	s15, [r3]
 800142c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001430:	ee17 3a90 	vmov	r3, s15
 8001434:	b219      	sxth	r1, r3
 8001436:	4b41      	ldr	r3, [pc, #260]	@ (800153c <main+0x5c4>)
 8001438:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  counter2 = (counter2+1) % 100;
 800143c:	4b3e      	ldr	r3, [pc, #248]	@ (8001538 <main+0x5c0>)
 800143e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001442:	3301      	adds	r3, #1
 8001444:	4a33      	ldr	r2, [pc, #204]	@ (8001514 <main+0x59c>)
 8001446:	fb82 1203 	smull	r1, r2, r2, r3
 800144a:	1151      	asrs	r1, r2, #5
 800144c:	17da      	asrs	r2, r3, #31
 800144e:	1a8a      	subs	r2, r1, r2
 8001450:	2164      	movs	r1, #100	@ 0x64
 8001452:	fb01 f202 	mul.w	r2, r1, r2
 8001456:	1a9a      	subs	r2, r3, r2
 8001458:	b212      	sxth	r2, r2
 800145a:	4b37      	ldr	r3, [pc, #220]	@ (8001538 <main+0x5c0>)
 800145c:	801a      	strh	r2, [r3, #0]
	  int32_t sum2 = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	f8c7 3938 	str.w	r3, [r7, #2360]	@ 0x938
	  for(int i = 0; i<100; i++){
 8001464:	2300      	movs	r3, #0
 8001466:	f8c7 3934 	str.w	r3, [r7, #2356]	@ 0x934
 800146a:	e00f      	b.n	800148c <main+0x514>
		  sum2 += myArr2[i];
 800146c:	4a33      	ldr	r2, [pc, #204]	@ (800153c <main+0x5c4>)
 800146e:	f8d7 3934 	ldr.w	r3, [r7, #2356]	@ 0x934
 8001472:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001476:	461a      	mov	r2, r3
 8001478:	f8d7 3938 	ldr.w	r3, [r7, #2360]	@ 0x938
 800147c:	4413      	add	r3, r2
 800147e:	f8c7 3938 	str.w	r3, [r7, #2360]	@ 0x938
	  for(int i = 0; i<100; i++){
 8001482:	f8d7 3934 	ldr.w	r3, [r7, #2356]	@ 0x934
 8001486:	3301      	adds	r3, #1
 8001488:	f8c7 3934 	str.w	r3, [r7, #2356]	@ 0x934
 800148c:	f8d7 3934 	ldr.w	r3, [r7, #2356]	@ 0x934
 8001490:	2b63      	cmp	r3, #99	@ 0x63
 8001492:	ddeb      	ble.n	800146c <main+0x4f4>
	  }
	  sprintf((char*) myString, "average acc_angle*100000 = %d\r\n", (sum2*100000)/100);
 8001494:	f8d7 3938 	ldr.w	r3, [r7, #2360]	@ 0x938
 8001498:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800149c:	fb03 f202 	mul.w	r2, r3, r2
 80014a0:	463b      	mov	r3, r7
 80014a2:	4927      	ldr	r1, [pc, #156]	@ (8001540 <main+0x5c8>)
 80014a4:	4618      	mov	r0, r3
 80014a6:	f008 f927 	bl	80096f8 <siprintf>
	  myComfyPrint(myString);
 80014aa:	463b      	mov	r3, r7
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff fd45 	bl	8000f3c <myComfyPrint>
	  //debug prints


	  ////////////////////////////////
	  //calculate angle from gyroscope
	  float gyro_rate = mpu_values.gyro_y * (1000.0/INT16_MAX);	//500, because that is the range that the mpu6050 is set to currently
 80014b2:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 80014b6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80014ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff f850 	bl	8000564 <__aeabi_i2d>
 80014c4:	a310      	add	r3, pc, #64	@ (adr r3, 8001508 <main+0x590>)
 80014c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ca:	f7ff f8b5 	bl	8000638 <__aeabi_dmul>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	4610      	mov	r0, r2
 80014d4:	4619      	mov	r1, r3
 80014d6:	f7ff fb69 	bl	8000bac <__aeabi_d2f>
 80014da:	4603      	mov	r3, r0
 80014dc:	f607 122c 	addw	r2, r7, #2348	@ 0x92c
 80014e0:	6013      	str	r3, [r2, #0]
	  static float gyro_angle;
	  static uint32_t current_time=0;
	  static uint32_t last_time;
	  if(done_already == 1){	//this awkward if-else is just temporary, so the last_time  and current_time are not too far apart from eachother, as this would lead to very high motor values there
 80014e2:	4b18      	ldr	r3, [pc, #96]	@ (8001544 <main+0x5cc>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d130      	bne.n	800154c <main+0x5d4>
		  last_time = HAL_GetTick();
 80014ea:	f001 fa03 	bl	80028f4 <HAL_GetTick>
 80014ee:	4603      	mov	r3, r0
 80014f0:	4a15      	ldr	r2, [pc, #84]	@ (8001548 <main+0x5d0>)
 80014f2:	6013      	str	r3, [r2, #0]
		  done_already = 2;
 80014f4:	4b13      	ldr	r3, [pc, #76]	@ (8001544 <main+0x5cc>)
 80014f6:	2202      	movs	r2, #2
 80014f8:	701a      	strb	r2, [r3, #0]
 80014fa:	e02b      	b.n	8001554 <main+0x5dc>
 80014fc:	f3af 8000 	nop.w
 8001500:	54442d18 	.word	0x54442d18
 8001504:	400921fb 	.word	0x400921fb
 8001508:	807d00fa 	.word	0x807d00fa
 800150c:	3f9f403e 	.word	0x3f9f403e
 8001510:	2000098c 	.word	0x2000098c
 8001514:	51eb851f 	.word	0x51eb851f
 8001518:	0800a6fc 	.word	0x0800a6fc
 800151c:	20000000 	.word	0x20000000
 8001520:	20000002 	.word	0x20000002
 8001524:	0800a714 	.word	0x0800a714
 8001528:	40668000 	.word	0x40668000
 800152c:	0800a724 	.word	0x0800a724
 8001530:	42c80000 	.word	0x42c80000
 8001534:	0800a738 	.word	0x0800a738
 8001538:	200009be 	.word	0x200009be
 800153c:	200009c0 	.word	0x200009c0
 8001540:	0800a750 	.word	0x0800a750
 8001544:	20000988 	.word	0x20000988
 8001548:	20000a88 	.word	0x20000a88
	  }
	  else{
		  last_time = current_time;
 800154c:	4b92      	ldr	r3, [pc, #584]	@ (8001798 <main+0x820>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a92      	ldr	r2, [pc, #584]	@ (800179c <main+0x824>)
 8001552:	6013      	str	r3, [r2, #0]
	  }
	  current_time = HAL_GetTick();
 8001554:	f001 f9ce 	bl	80028f4 <HAL_GetTick>
 8001558:	4603      	mov	r3, r0
 800155a:	4a8f      	ldr	r2, [pc, #572]	@ (8001798 <main+0x820>)
 800155c:	6013      	str	r3, [r2, #0]

	  gyro_angle = gyro_angle + gyro_rate*((float)(current_time-last_time)/1000);
 800155e:	4b8e      	ldr	r3, [pc, #568]	@ (8001798 <main+0x820>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	4b8e      	ldr	r3, [pc, #568]	@ (800179c <main+0x824>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	ee07 3a90 	vmov	s15, r3
 800156c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001570:	eddf 6a8b 	vldr	s13, [pc, #556]	@ 80017a0 <main+0x828>
 8001574:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001578:	f607 132c 	addw	r3, r7, #2348	@ 0x92c
 800157c:	edd3 7a00 	vldr	s15, [r3]
 8001580:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001584:	4b87      	ldr	r3, [pc, #540]	@ (80017a4 <main+0x82c>)
 8001586:	edd3 7a00 	vldr	s15, [r3]
 800158a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800158e:	4b85      	ldr	r3, [pc, #532]	@ (80017a4 <main+0x82c>)
 8001590:	edc3 7a00 	vstr	s15, [r3]
	  sprintf((char*) myString, "gyro_angle*100 = %d\r\n", (int) (gyro_angle*100));	//apparently floating numbers are disabled in print funcitons by defautl if using newlib
 8001594:	4b83      	ldr	r3, [pc, #524]	@ (80017a4 <main+0x82c>)
 8001596:	edd3 7a00 	vldr	s15, [r3]
 800159a:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 80017a8 <main+0x830>
 800159e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015a6:	463b      	mov	r3, r7
 80015a8:	ee17 2a90 	vmov	r2, s15
 80015ac:	497f      	ldr	r1, [pc, #508]	@ (80017ac <main+0x834>)
 80015ae:	4618      	mov	r0, r3
 80015b0:	f008 f8a2 	bl	80096f8 <siprintf>
	  myComfyPrint(myString);
 80015b4:	463b      	mov	r3, r7
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff fcc0 	bl	8000f3c <myComfyPrint>

	  //////////////////////////////
	  //combine both values into one
	  static float current_angle=0;
	  static float last_angle=0;
	  float alpha = 0.9934;
 80015bc:	4b7c      	ldr	r3, [pc, #496]	@ (80017b0 <main+0x838>)
 80015be:	f607 1228 	addw	r2, r7, #2344	@ 0x928
 80015c2:	6013      	str	r3, [r2, #0]
	  last_angle = current_angle;
 80015c4:	4b7b      	ldr	r3, [pc, #492]	@ (80017b4 <main+0x83c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a7b      	ldr	r2, [pc, #492]	@ (80017b8 <main+0x840>)
 80015ca:	6013      	str	r3, [r2, #0]
	  current_angle = alpha * (gyro_angle) + (float) (1-alpha) * acc_angle;
 80015cc:	4b75      	ldr	r3, [pc, #468]	@ (80017a4 <main+0x82c>)
 80015ce:	ed93 7a00 	vldr	s14, [r3]
 80015d2:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 80015d6:	edd3 7a00 	vldr	s15, [r3]
 80015da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80015e2:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 80015e6:	edd3 7a00 	vldr	s15, [r3]
 80015ea:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80015ee:	f507 6313 	add.w	r3, r7, #2352	@ 0x930
 80015f2:	edd3 7a00 	vldr	s15, [r3]
 80015f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015fe:	4b6d      	ldr	r3, [pc, #436]	@ (80017b4 <main+0x83c>)
 8001600:	edc3 7a00 	vstr	s15, [r3]

	  if(done_already == 2){	//awkward if, so last_angle is not extremely different from current_angle on the first iteration as this would possibly lead to very high motor values there
 8001604:	4b6d      	ldr	r3, [pc, #436]	@ (80017bc <main+0x844>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b02      	cmp	r3, #2
 800160a:	d106      	bne.n	800161a <main+0x6a2>
		last_angle = current_angle;
 800160c:	4b69      	ldr	r3, [pc, #420]	@ (80017b4 <main+0x83c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a69      	ldr	r2, [pc, #420]	@ (80017b8 <main+0x840>)
 8001612:	6013      	str	r3, [r2, #0]
		done_already = 3;
 8001614:	4b69      	ldr	r3, [pc, #420]	@ (80017bc <main+0x844>)
 8001616:	2203      	movs	r2, #3
 8001618:	701a      	strb	r2, [r3, #0]
	  }

	  //debug print
	  sprintf((char*) myString, "combined_angle*100 = %d\r\n", (int) current_angle);
 800161a:	4b66      	ldr	r3, [pc, #408]	@ (80017b4 <main+0x83c>)
 800161c:	edd3 7a00 	vldr	s15, [r3]
 8001620:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001624:	463b      	mov	r3, r7
 8001626:	ee17 2a90 	vmov	r2, s15
 800162a:	4965      	ldr	r1, [pc, #404]	@ (80017c0 <main+0x848>)
 800162c:	4618      	mov	r0, r3
 800162e:	f008 f863 	bl	80096f8 <siprintf>
	  myComfyPrint(myString);
 8001632:	463b      	mov	r3, r7
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff fc81 	bl	8000f3c <myComfyPrint>
	  //debug print

	  /////
	  //PID
	  float target_angle = 0;
 800163a:	f04f 0300 	mov.w	r3, #0
 800163e:	f607 1224 	addw	r2, r7, #2340	@ 0x924
 8001642:	6013      	str	r3, [r2, #0]
	  float deviation = current_angle - target_angle;
 8001644:	4b5b      	ldr	r3, [pc, #364]	@ (80017b4 <main+0x83c>)
 8001646:	ed93 7a00 	vldr	s14, [r3]
 800164a:	f607 1324 	addw	r3, r7, #2340	@ 0x924
 800164e:	edd3 7a00 	vldr	s15, [r3]
 8001652:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001656:	f507 6312 	add.w	r3, r7, #2336	@ 0x920
 800165a:	edc3 7a00 	vstr	s15, [r3]
	  static float deviation_sum;
	  deviation_sum = deviation_sum + deviation;
 800165e:	4b59      	ldr	r3, [pc, #356]	@ (80017c4 <main+0x84c>)
 8001660:	ed93 7a00 	vldr	s14, [r3]
 8001664:	f507 6312 	add.w	r3, r7, #2336	@ 0x920
 8001668:	edd3 7a00 	vldr	s15, [r3]
 800166c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001670:	4b54      	ldr	r3, [pc, #336]	@ (80017c4 <main+0x84c>)
 8001672:	edc3 7a00 	vstr	s15, [r3]
	  //add constraining of max value of deviation_sum here

	  float Kp=12, Ki=0, Kd=0;
 8001676:	4b54      	ldr	r3, [pc, #336]	@ (80017c8 <main+0x850>)
 8001678:	f607 121c 	addw	r2, r7, #2332	@ 0x91c
 800167c:	6013      	str	r3, [r2, #0]
 800167e:	f04f 0300 	mov.w	r3, #0
 8001682:	f607 1218 	addw	r2, r7, #2328	@ 0x918
 8001686:	6013      	str	r3, [r2, #0]
 8001688:	f04f 0300 	mov.w	r3, #0
 800168c:	f607 1214 	addw	r2, r7, #2324	@ 0x914
 8001690:	6013      	str	r3, [r2, #0]
	  float motor_value_in_percent = Kp*deviation + Ki*deviation_sum*((float)(current_time-last_time)/1000) - Kd*(current_angle-last_angle)/((float)(current_time-last_time)/1000);
 8001692:	f607 131c 	addw	r3, r7, #2332	@ 0x91c
 8001696:	ed93 7a00 	vldr	s14, [r3]
 800169a:	f507 6312 	add.w	r3, r7, #2336	@ 0x920
 800169e:	edd3 7a00 	vldr	s15, [r3]
 80016a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016a6:	4b47      	ldr	r3, [pc, #284]	@ (80017c4 <main+0x84c>)
 80016a8:	edd3 6a00 	vldr	s13, [r3]
 80016ac:	f607 1318 	addw	r3, r7, #2328	@ 0x918
 80016b0:	edd3 7a00 	vldr	s15, [r3]
 80016b4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016b8:	4b37      	ldr	r3, [pc, #220]	@ (8001798 <main+0x820>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4b37      	ldr	r3, [pc, #220]	@ (800179c <main+0x824>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	ee07 3a90 	vmov	s15, r3
 80016c6:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 80016ca:	eddf 5a35 	vldr	s11, [pc, #212]	@ 80017a0 <main+0x828>
 80016ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80016d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016da:	4b36      	ldr	r3, [pc, #216]	@ (80017b4 <main+0x83c>)
 80016dc:	edd3 6a00 	vldr	s13, [r3]
 80016e0:	4b35      	ldr	r3, [pc, #212]	@ (80017b8 <main+0x840>)
 80016e2:	edd3 7a00 	vldr	s15, [r3]
 80016e6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80016ea:	f607 1314 	addw	r3, r7, #2324	@ 0x914
 80016ee:	edd3 7a00 	vldr	s15, [r3]
 80016f2:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80016f6:	4b28      	ldr	r3, [pc, #160]	@ (8001798 <main+0x820>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	4b28      	ldr	r3, [pc, #160]	@ (800179c <main+0x824>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	ee07 3a90 	vmov	s15, r3
 8001704:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001708:	eddf 5a25 	vldr	s11, [pc, #148]	@ 80017a0 <main+0x828>
 800170c:	eec7 6aa5 	vdiv.f32	s13, s15, s11
 8001710:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001714:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001718:	f507 6311 	add.w	r3, r7, #2320	@ 0x910
 800171c:	edc3 7a00 	vstr	s15, [r3]
	  int32_t motor_value = (motor_value_in_percent * MOTOR_MAX_SPEED) /100;
 8001720:	f507 6311 	add.w	r3, r7, #2320	@ 0x910
 8001724:	edd3 7a00 	vldr	s15, [r3]
 8001728:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 80017cc <main+0x854>
 800172c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001730:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 80017a8 <main+0x830>
 8001734:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001738:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800173c:	ee17 3a90 	vmov	r3, s15
 8001740:	f8c7 390c 	str.w	r3, [r7, #2316]	@ 0x90c

	  ///////////////////////
	  //control motor BEGIN//
	  ///////////////////////

	  if(motor_value >= 0){
 8001744:	f8d7 390c 	ldr.w	r3, [r7, #2316]	@ 0x90c
 8001748:	2b00      	cmp	r3, #0
 800174a:	db0a      	blt.n	8001762 <main+0x7ea>
		  motor_control(MOTOR_DIR_FORWARDS, (uint16_t) abs(motor_value));
 800174c:	f8d7 390c 	ldr.w	r3, [r7, #2316]	@ 0x90c
 8001750:	2b00      	cmp	r3, #0
 8001752:	bfb8      	it	lt
 8001754:	425b      	neglt	r3, r3
 8001756:	b29b      	uxth	r3, r3
 8001758:	4619      	mov	r1, r3
 800175a:	2000      	movs	r0, #0
 800175c:	f000 fc2c 	bl	8001fb8 <motor_control>
 8001760:	e00d      	b.n	800177e <main+0x806>
	  }
	  else if(motor_value < 0){
 8001762:	f8d7 390c 	ldr.w	r3, [r7, #2316]	@ 0x90c
 8001766:	2b00      	cmp	r3, #0
 8001768:	da09      	bge.n	800177e <main+0x806>
		  motor_control(MOTOR_DIR_BACKWARDS, (uint16_t) abs(motor_value));
 800176a:	f8d7 390c 	ldr.w	r3, [r7, #2316]	@ 0x90c
 800176e:	2b00      	cmp	r3, #0
 8001770:	bfb8      	it	lt
 8001772:	425b      	neglt	r3, r3
 8001774:	b29b      	uxth	r3, r3
 8001776:	4619      	mov	r1, r3
 8001778:	2001      	movs	r0, #1
 800177a:	f000 fc1d 	bl	8001fb8 <motor_control>
	  }

	  sprintf((char*) myString, "calculated motorValue = %d\r\n", motor_value);
 800177e:	463b      	mov	r3, r7
 8001780:	f8d7 290c 	ldr.w	r2, [r7, #2316]	@ 0x90c
 8001784:	4912      	ldr	r1, [pc, #72]	@ (80017d0 <main+0x858>)
 8001786:	4618      	mov	r0, r3
 8001788:	f007 ffb6 	bl	80096f8 <siprintf>
	  myComfyPrint(myString);
 800178c:	463b      	mov	r3, r7
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff fbd4 	bl	8000f3c <myComfyPrint>
  {
 8001794:	e4e5      	b.n	8001162 <main+0x1ea>
 8001796:	bf00      	nop
 8001798:	20000a8c 	.word	0x20000a8c
 800179c:	20000a88 	.word	0x20000a88
 80017a0:	447a0000 	.word	0x447a0000
 80017a4:	20000a90 	.word	0x20000a90
 80017a8:	42c80000 	.word	0x42c80000
 80017ac:	0800a770 	.word	0x0800a770
 80017b0:	3f7e4f76 	.word	0x3f7e4f76
 80017b4:	20000a94 	.word	0x20000a94
 80017b8:	20000a98 	.word	0x20000a98
 80017bc:	20000988 	.word	0x20000988
 80017c0:	0800a788 	.word	0x0800a788
 80017c4:	20000a9c 	.word	0x20000a9c
 80017c8:	41400000 	.word	0x41400000
 80017cc:	46033c00 	.word	0x46033c00
 80017d0:	0800a7a4 	.word	0x0800a7a4

080017d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b094      	sub	sp, #80	@ 0x50
 80017d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017da:	f107 031c 	add.w	r3, r7, #28
 80017de:	2234      	movs	r2, #52	@ 0x34
 80017e0:	2100      	movs	r1, #0
 80017e2:	4618      	mov	r0, r3
 80017e4:	f007 ffa8 	bl	8009738 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017e8:	f107 0308 	add.w	r3, r7, #8
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017f8:	2300      	movs	r3, #0
 80017fa:	607b      	str	r3, [r7, #4]
 80017fc:	4b2a      	ldr	r3, [pc, #168]	@ (80018a8 <SystemClock_Config+0xd4>)
 80017fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001800:	4a29      	ldr	r2, [pc, #164]	@ (80018a8 <SystemClock_Config+0xd4>)
 8001802:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001806:	6413      	str	r3, [r2, #64]	@ 0x40
 8001808:	4b27      	ldr	r3, [pc, #156]	@ (80018a8 <SystemClock_Config+0xd4>)
 800180a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001810:	607b      	str	r3, [r7, #4]
 8001812:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001814:	2300      	movs	r3, #0
 8001816:	603b      	str	r3, [r7, #0]
 8001818:	4b24      	ldr	r3, [pc, #144]	@ (80018ac <SystemClock_Config+0xd8>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001820:	4a22      	ldr	r2, [pc, #136]	@ (80018ac <SystemClock_Config+0xd8>)
 8001822:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001826:	6013      	str	r3, [r2, #0]
 8001828:	4b20      	ldr	r3, [pc, #128]	@ (80018ac <SystemClock_Config+0xd8>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001830:	603b      	str	r3, [r7, #0]
 8001832:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001834:	2302      	movs	r3, #2
 8001836:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001838:	2301      	movs	r3, #1
 800183a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800183c:	2310      	movs	r3, #16
 800183e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001840:	2302      	movs	r3, #2
 8001842:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001844:	2300      	movs	r3, #0
 8001846:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001848:	2310      	movs	r3, #16
 800184a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800184c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001850:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001852:	2304      	movs	r3, #4
 8001854:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001856:	2302      	movs	r3, #2
 8001858:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800185a:	2302      	movs	r3, #2
 800185c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800185e:	f107 031c 	add.w	r3, r7, #28
 8001862:	4618      	mov	r0, r3
 8001864:	f002 ffc8 	bl	80047f8 <HAL_RCC_OscConfig>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800186e:	f000 fb8f 	bl	8001f90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001872:	230f      	movs	r3, #15
 8001874:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001876:	2302      	movs	r3, #2
 8001878:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800187a:	2300      	movs	r3, #0
 800187c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800187e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001882:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001884:	2300      	movs	r3, #0
 8001886:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001888:	f107 0308 	add.w	r3, r7, #8
 800188c:	2102      	movs	r1, #2
 800188e:	4618      	mov	r0, r3
 8001890:	f002 fc36 	bl	8004100 <HAL_RCC_ClockConfig>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800189a:	f000 fb79 	bl	8001f90 <Error_Handler>
  }
}
 800189e:	bf00      	nop
 80018a0:	3750      	adds	r7, #80	@ 0x50
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40023800 	.word	0x40023800
 80018ac:	40007000 	.word	0x40007000

080018b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018b4:	4b12      	ldr	r3, [pc, #72]	@ (8001900 <MX_I2C1_Init+0x50>)
 80018b6:	4a13      	ldr	r2, [pc, #76]	@ (8001904 <MX_I2C1_Init+0x54>)
 80018b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80018ba:	4b11      	ldr	r3, [pc, #68]	@ (8001900 <MX_I2C1_Init+0x50>)
 80018bc:	4a12      	ldr	r2, [pc, #72]	@ (8001908 <MX_I2C1_Init+0x58>)
 80018be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001900 <MX_I2C1_Init+0x50>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001900 <MX_I2C1_Init+0x50>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001900 <MX_I2C1_Init+0x50>)
 80018ce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80018d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001900 <MX_I2C1_Init+0x50>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018da:	4b09      	ldr	r3, [pc, #36]	@ (8001900 <MX_I2C1_Init+0x50>)
 80018dc:	2200      	movs	r2, #0
 80018de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018e0:	4b07      	ldr	r3, [pc, #28]	@ (8001900 <MX_I2C1_Init+0x50>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018e6:	4b06      	ldr	r3, [pc, #24]	@ (8001900 <MX_I2C1_Init+0x50>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018ec:	4804      	ldr	r0, [pc, #16]	@ (8001900 <MX_I2C1_Init+0x50>)
 80018ee:	f001 fab5 	bl	8002e5c <HAL_I2C_Init>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018f8:	f000 fb4a 	bl	8001f90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018fc:	bf00      	nop
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20000880 	.word	0x20000880
 8001904:	40005400 	.word	0x40005400
 8001908:	000186a0 	.word	0x000186a0

0800190c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08a      	sub	sp, #40	@ 0x28
 8001910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001912:	f107 0320 	add.w	r3, r7, #32
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800191c:	1d3b      	adds	r3, r7, #4
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]
 8001926:	60da      	str	r2, [r3, #12]
 8001928:	611a      	str	r2, [r3, #16]
 800192a:	615a      	str	r2, [r3, #20]
 800192c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800192e:	4b27      	ldr	r3, [pc, #156]	@ (80019cc <MX_TIM3_Init+0xc0>)
 8001930:	4a27      	ldr	r2, [pc, #156]	@ (80019d0 <MX_TIM3_Init+0xc4>)
 8001932:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001934:	4b25      	ldr	r3, [pc, #148]	@ (80019cc <MX_TIM3_Init+0xc0>)
 8001936:	2200      	movs	r2, #0
 8001938:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800193a:	4b24      	ldr	r3, [pc, #144]	@ (80019cc <MX_TIM3_Init+0xc0>)
 800193c:	2200      	movs	r2, #0
 800193e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8400-1;
 8001940:	4b22      	ldr	r3, [pc, #136]	@ (80019cc <MX_TIM3_Init+0xc0>)
 8001942:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001946:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001948:	4b20      	ldr	r3, [pc, #128]	@ (80019cc <MX_TIM3_Init+0xc0>)
 800194a:	2200      	movs	r2, #0
 800194c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800194e:	4b1f      	ldr	r3, [pc, #124]	@ (80019cc <MX_TIM3_Init+0xc0>)
 8001950:	2200      	movs	r2, #0
 8001952:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001954:	481d      	ldr	r0, [pc, #116]	@ (80019cc <MX_TIM3_Init+0xc0>)
 8001956:	f003 fab7 	bl	8004ec8 <HAL_TIM_PWM_Init>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001960:	f000 fb16 	bl	8001f90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001964:	2300      	movs	r3, #0
 8001966:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001968:	2300      	movs	r3, #0
 800196a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800196c:	f107 0320 	add.w	r3, r7, #32
 8001970:	4619      	mov	r1, r3
 8001972:	4816      	ldr	r0, [pc, #88]	@ (80019cc <MX_TIM3_Init+0xc0>)
 8001974:	f004 f81c 	bl	80059b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800197e:	f000 fb07 	bl	8001f90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001982:	2360      	movs	r3, #96	@ 0x60
 8001984:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001986:	2300      	movs	r3, #0
 8001988:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800198e:	2300      	movs	r3, #0
 8001990:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001992:	1d3b      	adds	r3, r7, #4
 8001994:	2200      	movs	r2, #0
 8001996:	4619      	mov	r1, r3
 8001998:	480c      	ldr	r0, [pc, #48]	@ (80019cc <MX_TIM3_Init+0xc0>)
 800199a:	f003 fc9d 	bl	80052d8 <HAL_TIM_PWM_ConfigChannel>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80019a4:	f000 faf4 	bl	8001f90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019a8:	1d3b      	adds	r3, r7, #4
 80019aa:	2204      	movs	r2, #4
 80019ac:	4619      	mov	r1, r3
 80019ae:	4807      	ldr	r0, [pc, #28]	@ (80019cc <MX_TIM3_Init+0xc0>)
 80019b0:	f003 fc92 	bl	80052d8 <HAL_TIM_PWM_ConfigChannel>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80019ba:	f000 fae9 	bl	8001f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80019be:	4803      	ldr	r0, [pc, #12]	@ (80019cc <MX_TIM3_Init+0xc0>)
 80019c0:	f000 fda6 	bl	8002510 <HAL_TIM_MspPostInit>

}
 80019c4:	bf00      	nop
 80019c6:	3728      	adds	r7, #40	@ 0x28
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	200008d4 	.word	0x200008d4
 80019d0:	40000400 	.word	0x40000400

080019d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019d8:	4b11      	ldr	r3, [pc, #68]	@ (8001a20 <MX_USART2_UART_Init+0x4c>)
 80019da:	4a12      	ldr	r2, [pc, #72]	@ (8001a24 <MX_USART2_UART_Init+0x50>)
 80019dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019de:	4b10      	ldr	r3, [pc, #64]	@ (8001a20 <MX_USART2_UART_Init+0x4c>)
 80019e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001a20 <MX_USART2_UART_Init+0x4c>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001a20 <MX_USART2_UART_Init+0x4c>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001a20 <MX_USART2_UART_Init+0x4c>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019f8:	4b09      	ldr	r3, [pc, #36]	@ (8001a20 <MX_USART2_UART_Init+0x4c>)
 80019fa:	220c      	movs	r2, #12
 80019fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019fe:	4b08      	ldr	r3, [pc, #32]	@ (8001a20 <MX_USART2_UART_Init+0x4c>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a04:	4b06      	ldr	r3, [pc, #24]	@ (8001a20 <MX_USART2_UART_Init+0x4c>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a0a:	4805      	ldr	r0, [pc, #20]	@ (8001a20 <MX_USART2_UART_Init+0x4c>)
 8001a0c:	f004 f860 	bl	8005ad0 <HAL_UART_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a16:	f000 fabb 	bl	8001f90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	2000091c 	.word	0x2000091c
 8001a24:	40004400 	.word	0x40004400

08001a28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08a      	sub	sp, #40	@ 0x28
 8001a2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2e:	f107 0314 	add.w	r3, r7, #20
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	605a      	str	r2, [r3, #4]
 8001a38:	609a      	str	r2, [r3, #8]
 8001a3a:	60da      	str	r2, [r3, #12]
 8001a3c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	613b      	str	r3, [r7, #16]
 8001a42:	4b39      	ldr	r3, [pc, #228]	@ (8001b28 <MX_GPIO_Init+0x100>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a46:	4a38      	ldr	r2, [pc, #224]	@ (8001b28 <MX_GPIO_Init+0x100>)
 8001a48:	f043 0304 	orr.w	r3, r3, #4
 8001a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a4e:	4b36      	ldr	r3, [pc, #216]	@ (8001b28 <MX_GPIO_Init+0x100>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a52:	f003 0304 	and.w	r3, r3, #4
 8001a56:	613b      	str	r3, [r7, #16]
 8001a58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	4b32      	ldr	r3, [pc, #200]	@ (8001b28 <MX_GPIO_Init+0x100>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a62:	4a31      	ldr	r2, [pc, #196]	@ (8001b28 <MX_GPIO_Init+0x100>)
 8001a64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a6a:	4b2f      	ldr	r3, [pc, #188]	@ (8001b28 <MX_GPIO_Init+0x100>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	60bb      	str	r3, [r7, #8]
 8001a7a:	4b2b      	ldr	r3, [pc, #172]	@ (8001b28 <MX_GPIO_Init+0x100>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7e:	4a2a      	ldr	r2, [pc, #168]	@ (8001b28 <MX_GPIO_Init+0x100>)
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a86:	4b28      	ldr	r3, [pc, #160]	@ (8001b28 <MX_GPIO_Init+0x100>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	60bb      	str	r3, [r7, #8]
 8001a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	607b      	str	r3, [r7, #4]
 8001a96:	4b24      	ldr	r3, [pc, #144]	@ (8001b28 <MX_GPIO_Init+0x100>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9a:	4a23      	ldr	r2, [pc, #140]	@ (8001b28 <MX_GPIO_Init+0x100>)
 8001a9c:	f043 0302 	orr.w	r3, r3, #2
 8001aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aa2:	4b21      	ldr	r3, [pc, #132]	@ (8001b28 <MX_GPIO_Init+0x100>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	607b      	str	r3, [r7, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|MOTOR2_DIR_Pin|MOTOR3_DIR_Pin, GPIO_PIN_RESET);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8001ab4:	481d      	ldr	r0, [pc, #116]	@ (8001b2c <MX_GPIO_Init+0x104>)
 8001ab6:	f001 f99f 	bl	8002df8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001aba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ac0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001ac4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aca:	f107 0314 	add.w	r3, r7, #20
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4817      	ldr	r0, [pc, #92]	@ (8001b30 <MX_GPIO_Init+0x108>)
 8001ad2:	f000 fffd 	bl	8002ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin MOTOR2_DIR_Pin MOTOR3_DIR_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|MOTOR2_DIR_Pin|MOTOR3_DIR_Pin;
 8001ad6:	f44f 7318 	mov.w	r3, #608	@ 0x260
 8001ada:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001adc:	2301      	movs	r3, #1
 8001ade:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae8:	f107 0314 	add.w	r3, r7, #20
 8001aec:	4619      	mov	r1, r3
 8001aee:	480f      	ldr	r0, [pc, #60]	@ (8001b2c <MX_GPIO_Init+0x104>)
 8001af0:	f000 ffee 	bl	8002ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MPU6050_INT_Pin */
  GPIO_InitStruct.Pin = MPU6050_INT_Pin;
 8001af4:	2320      	movs	r3, #32
 8001af6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001af8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001afc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001afe:	2302      	movs	r3, #2
 8001b00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MPU6050_INT_GPIO_Port, &GPIO_InitStruct);
 8001b02:	f107 0314 	add.w	r3, r7, #20
 8001b06:	4619      	mov	r1, r3
 8001b08:	480a      	ldr	r0, [pc, #40]	@ (8001b34 <MX_GPIO_Init+0x10c>)
 8001b0a:	f000 ffe1 	bl	8002ad0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2105      	movs	r1, #5
 8001b12:	2017      	movs	r0, #23
 8001b14:	f000 ffb2 	bl	8002a7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b18:	2017      	movs	r0, #23
 8001b1a:	f000 ffcb 	bl	8002ab4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b1e:	bf00      	nop
 8001b20:	3728      	adds	r7, #40	@ 0x28
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	40020000 	.word	0x40020000
 8001b30:	40020800 	.word	0x40020800
 8001b34:	40020400 	.word	0x40020400

08001b38 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == MPU6050_INT_Pin){
	  //do stuff when mpu6050 says data is ready for reading
  }
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <task_read_mpu6050>:

/* USER CODE BEGIN Header_task_read_mpu6050 */

/* USER CODE END Header_task_read_mpu6050 */
void task_read_mpu6050(void *argument)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08c      	sub	sp, #48	@ 0x30
 8001b54:	af04      	add	r7, sp, #16
 8001b56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	uint8_t read_mpu_buff[6] = { 0 };
 8001b58:	2300      	movs	r3, #0
 8001b5a:	61bb      	str	r3, [r7, #24]
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	83bb      	strh	r3, [r7, #28]

	for(;;)
	{

		//read accelerometer data
		HAL_I2C_Mem_Read(&hi2c1, (DEVICE_ADDRESS<<1) +1, REG_ACC_DATA, 1, read_mpu_buff, sizeof(read_mpu_buff), 100);
 8001b60:	2364      	movs	r3, #100	@ 0x64
 8001b62:	9302      	str	r3, [sp, #8]
 8001b64:	2306      	movs	r3, #6
 8001b66:	9301      	str	r3, [sp, #4]
 8001b68:	f107 0318 	add.w	r3, r7, #24
 8001b6c:	9300      	str	r3, [sp, #0]
 8001b6e:	2301      	movs	r3, #1
 8001b70:	223b      	movs	r2, #59	@ 0x3b
 8001b72:	21d1      	movs	r1, #209	@ 0xd1
 8001b74:	4836      	ldr	r0, [pc, #216]	@ (8001c50 <task_read_mpu6050+0x100>)
 8001b76:	f001 fbaf 	bl	80032d8 <HAL_I2C_Mem_Read>
		mpu_values_temp.acc_x = (uint16_t) (read_mpu_buff[0]<<8) + read_mpu_buff[1];
 8001b7a:	7e3b      	ldrb	r3, [r7, #24]
 8001b7c:	021b      	lsls	r3, r3, #8
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	7e7a      	ldrb	r2, [r7, #25]
 8001b82:	4413      	add	r3, r2
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	b21b      	sxth	r3, r3
 8001b88:	827b      	strh	r3, [r7, #18]
		mpu_values_temp.acc_y = (uint16_t) (read_mpu_buff[2]<<8) + read_mpu_buff[3];
 8001b8a:	7ebb      	ldrb	r3, [r7, #26]
 8001b8c:	021b      	lsls	r3, r3, #8
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	7efa      	ldrb	r2, [r7, #27]
 8001b92:	4413      	add	r3, r2
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	b21b      	sxth	r3, r3
 8001b98:	82bb      	strh	r3, [r7, #20]
		mpu_values_temp.acc_z = (uint16_t) (read_mpu_buff[4]<<8) + read_mpu_buff[5];
 8001b9a:	7f3b      	ldrb	r3, [r7, #28]
 8001b9c:	021b      	lsls	r3, r3, #8
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	7f7a      	ldrb	r2, [r7, #29]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	b21b      	sxth	r3, r3
 8001ba8:	82fb      	strh	r3, [r7, #22]

		//read gyroscope data
		HAL_I2C_Mem_Read(&hi2c1, (DEVICE_ADDRESS<<1) +1, REG_GYRO_DATA, 1, read_mpu_buff, sizeof(read_mpu_buff), 100);
 8001baa:	2364      	movs	r3, #100	@ 0x64
 8001bac:	9302      	str	r3, [sp, #8]
 8001bae:	2306      	movs	r3, #6
 8001bb0:	9301      	str	r3, [sp, #4]
 8001bb2:	f107 0318 	add.w	r3, r7, #24
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	2301      	movs	r3, #1
 8001bba:	2243      	movs	r2, #67	@ 0x43
 8001bbc:	21d1      	movs	r1, #209	@ 0xd1
 8001bbe:	4824      	ldr	r0, [pc, #144]	@ (8001c50 <task_read_mpu6050+0x100>)
 8001bc0:	f001 fb8a 	bl	80032d8 <HAL_I2C_Mem_Read>
		mpu_values_temp.gyro_x = (uint16_t) (read_mpu_buff[0]<<8) + read_mpu_buff[1];
 8001bc4:	7e3b      	ldrb	r3, [r7, #24]
 8001bc6:	021b      	lsls	r3, r3, #8
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	7e7a      	ldrb	r2, [r7, #25]
 8001bcc:	4413      	add	r3, r2
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	b21b      	sxth	r3, r3
 8001bd2:	81bb      	strh	r3, [r7, #12]
		mpu_values_temp.gyro_y = (uint16_t) (read_mpu_buff[2]<<8) + read_mpu_buff[3];
 8001bd4:	7ebb      	ldrb	r3, [r7, #26]
 8001bd6:	021b      	lsls	r3, r3, #8
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	7efa      	ldrb	r2, [r7, #27]
 8001bdc:	4413      	add	r3, r2
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	b21b      	sxth	r3, r3
 8001be2:	81fb      	strh	r3, [r7, #14]
		mpu_values_temp.gyro_z = (uint16_t) (read_mpu_buff[4]<<8) + read_mpu_buff[5];
 8001be4:	7f3b      	ldrb	r3, [r7, #28]
 8001be6:	021b      	lsls	r3, r3, #8
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	7f7a      	ldrb	r2, [r7, #29]
 8001bec:	4413      	add	r3, r2
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	b21b      	sxth	r3, r3
 8001bf2:	823b      	strh	r3, [r7, #16]

		//apply offsets
		mpu_values_temp.gyro_y += GYRO_Y_OFFSET_1000;
 8001bf4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	330c      	adds	r3, #12
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	b21b      	sxth	r3, r3
 8001c00:	81fb      	strh	r3, [r7, #14]

		//copy values to global variable
		osMutexAcquire(mpu_values_mutexHandle, osWaitForever);
 8001c02:	4b14      	ldr	r3, [pc, #80]	@ (8001c54 <task_read_mpu6050+0x104>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f004 fd30 	bl	8006670 <osMutexAcquire>
		mpu_values.acc_x = mpu_values_temp.acc_x;
 8001c10:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001c14:	4b10      	ldr	r3, [pc, #64]	@ (8001c58 <task_read_mpu6050+0x108>)
 8001c16:	80da      	strh	r2, [r3, #6]
		mpu_values.acc_y = mpu_values_temp.acc_y;
 8001c18:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c58 <task_read_mpu6050+0x108>)
 8001c1e:	811a      	strh	r2, [r3, #8]
		mpu_values.acc_z = mpu_values_temp.acc_z;
 8001c20:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001c24:	4b0c      	ldr	r3, [pc, #48]	@ (8001c58 <task_read_mpu6050+0x108>)
 8001c26:	815a      	strh	r2, [r3, #10]
		mpu_values.gyro_x = mpu_values_temp.gyro_x;
 8001c28:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c58 <task_read_mpu6050+0x108>)
 8001c2e:	801a      	strh	r2, [r3, #0]
		mpu_values.gyro_y = mpu_values_temp.gyro_y;
 8001c30:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001c34:	4b08      	ldr	r3, [pc, #32]	@ (8001c58 <task_read_mpu6050+0x108>)
 8001c36:	805a      	strh	r2, [r3, #2]
		mpu_values.gyro_z = mpu_values_temp.gyro_z;
 8001c38:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001c3c:	4b06      	ldr	r3, [pc, #24]	@ (8001c58 <task_read_mpu6050+0x108>)
 8001c3e:	809a      	strh	r2, [r3, #4]
		osMutexRelease(mpu_values_mutexHandle);
 8001c40:	4b04      	ldr	r3, [pc, #16]	@ (8001c54 <task_read_mpu6050+0x104>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f004 fd5e 	bl	8006706 <osMutexRelease>
		HAL_I2C_Mem_Read(&hi2c1, (DEVICE_ADDRESS<<1) +1, REG_ACC_DATA, 1, read_mpu_buff, sizeof(read_mpu_buff), 100);
 8001c4a:	bf00      	nop
 8001c4c:	e788      	b.n	8001b60 <task_read_mpu6050+0x10>
 8001c4e:	bf00      	nop
 8001c50:	20000880 	.word	0x20000880
 8001c54:	20000970 	.word	0x20000970
 8001c58:	20000978 	.word	0x20000978
 8001c5c:	00000000 	.word	0x00000000

08001c60 <task_calculate_motor_values>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_calculate_motor_values */
void task_calculate_motor_values(void *argument)
{
 8001c60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c64:	b092      	sub	sp, #72	@ 0x48
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_calculate_motor_values */

	  float acc_angle;
	  float gyro_rate, gyro_angle;
	  uint32_t current_time=(osKernelGetTickCount() / (1000.0/osKernelGetTickFreq())), last_time = current_time;
 8001c6a:	f004 fbcb 	bl	8006404 <osKernelGetTickCount>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7fe fc67 	bl	8000544 <__aeabi_ui2d>
 8001c76:	4604      	mov	r4, r0
 8001c78:	460d      	mov	r5, r1
 8001c7a:	f004 fbd8 	bl	800642e <osKernelGetTickFreq>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7fe fc5f 	bl	8000544 <__aeabi_ui2d>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	f04f 0000 	mov.w	r0, #0
 8001c8e:	4994      	ldr	r1, [pc, #592]	@ (8001ee0 <task_calculate_motor_values+0x280>)
 8001c90:	f7fe fdfc 	bl	800088c <__aeabi_ddiv>
 8001c94:	4602      	mov	r2, r0
 8001c96:	460b      	mov	r3, r1
 8001c98:	4620      	mov	r0, r4
 8001c9a:	4629      	mov	r1, r5
 8001c9c:	f7fe fdf6 	bl	800088c <__aeabi_ddiv>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	f7fe ff60 	bl	8000b6c <__aeabi_d2uiz>
 8001cac:	4603      	mov	r3, r0
 8001cae:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cb2:	637b      	str	r3, [r7, #52]	@ 0x34
	  float current_angle=0, last_angle=0;
 8001cb4:	f04f 0300 	mov.w	r3, #0
 8001cb8:	643b      	str	r3, [r7, #64]	@ 0x40
 8001cba:	f04f 0300 	mov.w	r3, #0
 8001cbe:	633b      	str	r3, [r7, #48]	@ 0x30
	  float alpha = 0.9934;
 8001cc0:	4b88      	ldr	r3, [pc, #544]	@ (8001ee4 <task_calculate_motor_values+0x284>)
 8001cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  float target_angle=0;
 8001cc4:	f04f 0300 	mov.w	r3, #0
 8001cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
	  float deviation, deviation_sum=0;
 8001cca:	f04f 0300 	mov.w	r3, #0
 8001cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  float Kp=12, Ki=0, Kd=0;
 8001cd0:	4b85      	ldr	r3, [pc, #532]	@ (8001ee8 <task_calculate_motor_values+0x288>)
 8001cd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cd4:	f04f 0300 	mov.w	r3, #0
 8001cd8:	623b      	str	r3, [r7, #32]
 8001cda:	f04f 0300 	mov.w	r3, #0
 8001cde:	61fb      	str	r3, [r7, #28]
  /* Infinite loop */
  for(;;)
  {

	  //calculate angle from acceleration values
	  acc_angle = atan2(mpu_values.acc_x, mpu_values.acc_z)*RAD_TO_DEG;	//*(180/M_PI) to convert from radian to degree
 8001ce0:	4b82      	ldr	r3, [pc, #520]	@ (8001eec <task_calculate_motor_values+0x28c>)
 8001ce2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7fe fc3c 	bl	8000564 <__aeabi_i2d>
 8001cec:	4604      	mov	r4, r0
 8001cee:	460d      	mov	r5, r1
 8001cf0:	4b7e      	ldr	r3, [pc, #504]	@ (8001eec <task_calculate_motor_values+0x28c>)
 8001cf2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7fe fc34 	bl	8000564 <__aeabi_i2d>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	ec43 2b11 	vmov	d1, r2, r3
 8001d04:	ec45 4b10 	vmov	d0, r4, r5
 8001d08:	f008 fa00 	bl	800a10c <atan2>
 8001d0c:	ec51 0b10 	vmov	r0, r1, d0
 8001d10:	f04f 0200 	mov.w	r2, #0
 8001d14:	4b76      	ldr	r3, [pc, #472]	@ (8001ef0 <task_calculate_motor_values+0x290>)
 8001d16:	f7fe fc8f 	bl	8000638 <__aeabi_dmul>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	4610      	mov	r0, r2
 8001d20:	4619      	mov	r1, r3
 8001d22:	a36b      	add	r3, pc, #428	@ (adr r3, 8001ed0 <task_calculate_motor_values+0x270>)
 8001d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d28:	f7fe fdb0 	bl	800088c <__aeabi_ddiv>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	4610      	mov	r0, r2
 8001d32:	4619      	mov	r1, r3
 8001d34:	f7fe ff3a 	bl	8000bac <__aeabi_d2f>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	61bb      	str	r3, [r7, #24]

	  //calculate angle from gyroscope
	  gyro_rate = mpu_values.gyro_y * (1000.0/INT16_MAX);	//500, because that is the range that the mpu6050 is set to currently
 8001d3c:	4b6b      	ldr	r3, [pc, #428]	@ (8001eec <task_calculate_motor_values+0x28c>)
 8001d3e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7fe fc0e 	bl	8000564 <__aeabi_i2d>
 8001d48:	a363      	add	r3, pc, #396	@ (adr r3, 8001ed8 <task_calculate_motor_values+0x278>)
 8001d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4e:	f7fe fc73 	bl	8000638 <__aeabi_dmul>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	4610      	mov	r0, r2
 8001d58:	4619      	mov	r1, r3
 8001d5a:	f7fe ff27 	bl	8000bac <__aeabi_d2f>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	617b      	str	r3, [r7, #20]
	  current_time = (osKernelGetTickCount() / (1000.0/osKernelGetTickFreq()));
 8001d62:	f004 fb4f 	bl	8006404 <osKernelGetTickCount>
 8001d66:	4603      	mov	r3, r0
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe fbeb 	bl	8000544 <__aeabi_ui2d>
 8001d6e:	4604      	mov	r4, r0
 8001d70:	460d      	mov	r5, r1
 8001d72:	f004 fb5c 	bl	800642e <osKernelGetTickFreq>
 8001d76:	4603      	mov	r3, r0
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7fe fbe3 	bl	8000544 <__aeabi_ui2d>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	f04f 0000 	mov.w	r0, #0
 8001d86:	4956      	ldr	r1, [pc, #344]	@ (8001ee0 <task_calculate_motor_values+0x280>)
 8001d88:	f7fe fd80 	bl	800088c <__aeabi_ddiv>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	4620      	mov	r0, r4
 8001d92:	4629      	mov	r1, r5
 8001d94:	f7fe fd7a 	bl	800088c <__aeabi_ddiv>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	4610      	mov	r0, r2
 8001d9e:	4619      	mov	r1, r3
 8001da0:	f7fe fee4 	bl	8000b6c <__aeabi_d2uiz>
 8001da4:	4603      	mov	r3, r0
 8001da6:	63bb      	str	r3, [r7, #56]	@ 0x38
	  gyro_angle = gyro_angle + gyro_rate*((float)(current_time-last_time)/1000.0);
 8001da8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001daa:	f7fe fbed 	bl	8000588 <__aeabi_f2d>
 8001dae:	4604      	mov	r4, r0
 8001db0:	460d      	mov	r5, r1
 8001db2:	6978      	ldr	r0, [r7, #20]
 8001db4:	f7fe fbe8 	bl	8000588 <__aeabi_f2d>
 8001db8:	4680      	mov	r8, r0
 8001dba:	4689      	mov	r9, r1
 8001dbc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001dbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	ee07 3a90 	vmov	s15, r3
 8001dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dca:	ee17 0a90 	vmov	r0, s15
 8001dce:	f7fe fbdb 	bl	8000588 <__aeabi_f2d>
 8001dd2:	f04f 0200 	mov.w	r2, #0
 8001dd6:	4b42      	ldr	r3, [pc, #264]	@ (8001ee0 <task_calculate_motor_values+0x280>)
 8001dd8:	f7fe fd58 	bl	800088c <__aeabi_ddiv>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	4640      	mov	r0, r8
 8001de2:	4649      	mov	r1, r9
 8001de4:	f7fe fc28 	bl	8000638 <__aeabi_dmul>
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	4620      	mov	r0, r4
 8001dee:	4629      	mov	r1, r5
 8001df0:	f7fe fa6c 	bl	80002cc <__adddf3>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4610      	mov	r0, r2
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	f7fe fed6 	bl	8000bac <__aeabi_d2f>
 8001e00:	4603      	mov	r3, r0
 8001e02:	647b      	str	r3, [r7, #68]	@ 0x44

	  //combine both values into one
	  last_angle = current_angle;
 8001e04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e06:	633b      	str	r3, [r7, #48]	@ 0x30
	  current_angle = alpha * (gyro_angle) + (float) (1-alpha) * acc_angle;
 8001e08:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001e0c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001e10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e14:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001e18:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001e1c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001e20:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e2c:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

	  //PID
	  deviation_sum = deviation_sum + deviation;
 8001e30:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001e34:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e3c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
	  //add constraining of max value of deviation_sum here

	  motor_value_in_percent = Kp*deviation + Ki*deviation_sum*((float)(current_time-last_time)/1000) - Kd*(current_angle-last_angle)/((float)(current_time-last_time)/1000);
 8001e40:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001e44:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e4c:	edd7 6a08 	vldr	s13, [r7, #32]
 8001e50:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001e54:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e58:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	ee07 3a90 	vmov	s15, r3
 8001e62:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8001e66:	eddf 5a23 	vldr	s11, [pc, #140]	@ 8001ef4 <task_calculate_motor_values+0x294>
 8001e6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e72:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e76:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8001e7a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001e7e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001e82:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e86:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001e8a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	ee07 3a90 	vmov	s15, r3
 8001e94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e98:	eddf 5a16 	vldr	s11, [pc, #88]	@ 8001ef4 <task_calculate_motor_values+0x294>
 8001e9c:	eec7 6aa5 	vdiv.f32	s13, s15, s11
 8001ea0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001ea4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ea8:	edc7 7a03 	vstr	s15, [r7, #12]
	  motor_value = (motor_value_in_percent * MOTOR_MAX_SPEED) /100;
 8001eac:	edd7 7a03 	vldr	s15, [r7, #12]
 8001eb0:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001ef8 <task_calculate_motor_values+0x298>
 8001eb4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001eb8:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8001efc <task_calculate_motor_values+0x29c>
 8001ebc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ec0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ec4:	ee17 3a90 	vmov	r3, s15
 8001ec8:	60bb      	str	r3, [r7, #8]
	  acc_angle = atan2(mpu_values.acc_x, mpu_values.acc_z)*RAD_TO_DEG;	//*(180/M_PI) to convert from radian to degree
 8001eca:	bf00      	nop
 8001ecc:	e708      	b.n	8001ce0 <task_calculate_motor_values+0x80>
 8001ece:	bf00      	nop
 8001ed0:	54442d18 	.word	0x54442d18
 8001ed4:	400921fb 	.word	0x400921fb
 8001ed8:	807d00fa 	.word	0x807d00fa
 8001edc:	3f9f403e 	.word	0x3f9f403e
 8001ee0:	408f4000 	.word	0x408f4000
 8001ee4:	3f7e4f76 	.word	0x3f7e4f76
 8001ee8:	41400000 	.word	0x41400000
 8001eec:	20000978 	.word	0x20000978
 8001ef0:	40668000 	.word	0x40668000
 8001ef4:	447a0000 	.word	0x447a0000
 8001ef8:	46033c00 	.word	0x46033c00
 8001efc:	42c80000 	.word	0x42c80000

08001f00 <task_control_motors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_control_motors */
void task_control_motors(void *argument)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {

	  //copy motor value
	  osMutexAcquire(motor_value_mutexHandle, osWaitForever);
 8001f08:	4b16      	ldr	r3, [pc, #88]	@ (8001f64 <task_control_motors+0x64>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f10:	4618      	mov	r0, r3
 8001f12:	f004 fbad 	bl	8006670 <osMutexAcquire>
	  motor_value_copy = motor_value;
 8001f16:	4b14      	ldr	r3, [pc, #80]	@ (8001f68 <task_control_motors+0x68>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	60fb      	str	r3, [r7, #12]
	  osMutexRelease(motor_value_mutexHandle);
 8001f1c:	4b11      	ldr	r3, [pc, #68]	@ (8001f64 <task_control_motors+0x64>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f004 fbf0 	bl	8006706 <osMutexRelease>

	  if(motor_value >= 0){
 8001f26:	4b10      	ldr	r3, [pc, #64]	@ (8001f68 <task_control_motors+0x68>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	db0a      	blt.n	8001f44 <task_control_motors+0x44>
		  motor_control(MOTOR_DIR_FORWARDS, (uint16_t) abs(motor_value));
 8001f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f68 <task_control_motors+0x68>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	bfb8      	it	lt
 8001f36:	425b      	neglt	r3, r3
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	f000 f83b 	bl	8001fb8 <motor_control>
 8001f42:	e7e1      	b.n	8001f08 <task_control_motors+0x8>
	  }
	  else if(motor_value < 0){
 8001f44:	4b08      	ldr	r3, [pc, #32]	@ (8001f68 <task_control_motors+0x68>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	dadd      	bge.n	8001f08 <task_control_motors+0x8>
		  motor_control(MOTOR_DIR_BACKWARDS, (uint16_t) abs(motor_value));
 8001f4c:	4b06      	ldr	r3, [pc, #24]	@ (8001f68 <task_control_motors+0x68>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	bfb8      	it	lt
 8001f54:	425b      	neglt	r3, r3
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	4619      	mov	r1, r3
 8001f5a:	2001      	movs	r0, #1
 8001f5c:	f000 f82c 	bl	8001fb8 <motor_control>
	  osMutexAcquire(motor_value_mutexHandle, osWaitForever);
 8001f60:	e7d2      	b.n	8001f08 <task_control_motors+0x8>
 8001f62:	bf00      	nop
 8001f64:	20000974 	.word	0x20000974
 8001f68:	20000984 	.word	0x20000984

08001f6c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a04      	ldr	r2, [pc, #16]	@ (8001f8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d101      	bne.n	8001f82 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f7e:	f000 fca5 	bl	80028cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f82:	bf00      	nop
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40001000 	.word	0x40001000

08001f90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f94:	b672      	cpsid	i
}
 8001f96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f98:	bf00      	nop
 8001f9a:	e7fd      	b.n	8001f98 <Error_Handler+0x8>

08001f9c <motor_init>:


extern TIM_HandleTypeDef htim3;


void motor_init(){
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
	//initialize PWM
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	4804      	ldr	r0, [pc, #16]	@ (8001fb4 <motor_init+0x18>)
 8001fa4:	f002 ffe0 	bl	8004f68 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001fa8:	2104      	movs	r1, #4
 8001faa:	4802      	ldr	r0, [pc, #8]	@ (8001fb4 <motor_init+0x18>)
 8001fac:	f002 ffdc 	bl	8004f68 <HAL_TIM_PWM_Start>
}
 8001fb0:	bf00      	nop
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	200008d4 	.word	0x200008d4

08001fb8 <motor_control>:

void motor_control(uint8_t direction, uint16_t speed){
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	460a      	mov	r2, r1
 8001fc2:	71fb      	strb	r3, [r7, #7]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	80bb      	strh	r3, [r7, #4]
  //direction 0=forward, 1=backward, everything else leaves the current direction
  //speed 0=off, 255=max

  //Error Handling
  if(speed<0) speed=0;
  if(speed>MOTOR_MAX_SPEED) speed=MOTOR_MAX_SPEED;
 8001fc8:	88bb      	ldrh	r3, [r7, #4]
 8001fca:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d902      	bls.n	8001fd8 <motor_control+0x20>
 8001fd2:	f242 03cf 	movw	r3, #8399	@ 0x20cf
 8001fd6:	80bb      	strh	r3, [r7, #4]

  //set motor direction
  switch(direction){
 8001fd8:	79fb      	ldrb	r3, [r7, #7]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d002      	beq.n	8001fe4 <motor_control+0x2c>
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d00c      	beq.n	8001ffc <motor_control+0x44>
	  HAL_GPIO_WritePin(MOTOR2_DIR_GPIO_Port, MOTOR2_DIR_Pin, GPIO_PIN_SET);
	  HAL_GPIO_WritePin(MOTOR3_DIR_GPIO_Port, MOTOR3_DIR_Pin, GPIO_PIN_SET);
	  break;
  default:
	  //do nothing
	  break;
 8001fe2:	e017      	b.n	8002014 <motor_control+0x5c>
	  HAL_GPIO_WritePin(MOTOR2_DIR_GPIO_Port, MOTOR2_DIR_Pin, GPIO_PIN_RESET);
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	2140      	movs	r1, #64	@ 0x40
 8001fe8:	4810      	ldr	r0, [pc, #64]	@ (800202c <motor_control+0x74>)
 8001fea:	f000 ff05 	bl	8002df8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(MOTOR3_DIR_GPIO_Port, MOTOR3_DIR_Pin, GPIO_PIN_RESET);
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ff4:	480d      	ldr	r0, [pc, #52]	@ (800202c <motor_control+0x74>)
 8001ff6:	f000 feff 	bl	8002df8 <HAL_GPIO_WritePin>
	  break;
 8001ffa:	e00b      	b.n	8002014 <motor_control+0x5c>
	  HAL_GPIO_WritePin(MOTOR2_DIR_GPIO_Port, MOTOR2_DIR_Pin, GPIO_PIN_SET);
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	2140      	movs	r1, #64	@ 0x40
 8002000:	480a      	ldr	r0, [pc, #40]	@ (800202c <motor_control+0x74>)
 8002002:	f000 fef9 	bl	8002df8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(MOTOR3_DIR_GPIO_Port, MOTOR3_DIR_Pin, GPIO_PIN_SET);
 8002006:	2201      	movs	r2, #1
 8002008:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800200c:	4807      	ldr	r0, [pc, #28]	@ (800202c <motor_control+0x74>)
 800200e:	f000 fef3 	bl	8002df8 <HAL_GPIO_WritePin>
	  break;
 8002012:	bf00      	nop
  }

  //set motor speed
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, speed);
 8002014:	4b06      	ldr	r3, [pc, #24]	@ (8002030 <motor_control+0x78>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	88ba      	ldrh	r2, [r7, #4]
 800201a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, speed);
 800201c:	4b04      	ldr	r3, [pc, #16]	@ (8002030 <motor_control+0x78>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	88ba      	ldrh	r2, [r7, #4]
 8002022:	639a      	str	r2, [r3, #56]	@ 0x38

}
 8002024:	bf00      	nop
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40020000 	.word	0x40020000
 8002030:	200008d4 	.word	0x200008d4

08002034 <mpu6050_init>:
#include <string.h>

extern I2C_HandleTypeDef hi2c1;
extern UART_HandleTypeDef huart2;

void mpu6050_init(){
 8002034:	b5b0      	push	{r4, r5, r7, lr}
 8002036:	b0c6      	sub	sp, #280	@ 0x118
 8002038:	af04      	add	r7, sp, #16

	uint8_t buff[256] = { 0 };
 800203a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800203e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002042:	2200      	movs	r2, #0
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	3304      	adds	r3, #4
 8002048:	22fc      	movs	r2, #252	@ 0xfc
 800204a:	2100      	movs	r1, #0
 800204c:	4618      	mov	r0, r3
 800204e:	f007 fb73 	bl	8009738 <memset>

	//check if MPU is ready
	  if(HAL_I2C_IsDeviceReady(&hi2c1, (DEVICE_ADDRESS<<1) +0, 1, 100) == HAL_OK){
 8002052:	2364      	movs	r3, #100	@ 0x64
 8002054:	2201      	movs	r2, #1
 8002056:	21d0      	movs	r1, #208	@ 0xd0
 8002058:	48a4      	ldr	r0, [pc, #656]	@ (80022ec <mpu6050_init+0x2b8>)
 800205a:	f001 fb6f 	bl	800373c <HAL_I2C_IsDeviceReady>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d11a      	bne.n	800209a <mpu6050_init+0x66>
		  strcpy((char*) buff, "The device is ready\r\n");
 8002064:	f107 0308 	add.w	r3, r7, #8
 8002068:	4aa1      	ldr	r2, [pc, #644]	@ (80022f0 <mpu6050_init+0x2bc>)
 800206a:	461c      	mov	r4, r3
 800206c:	4615      	mov	r5, r2
 800206e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002070:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002072:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002076:	6020      	str	r0, [r4, #0]
 8002078:	3404      	adds	r4, #4
 800207a:	8021      	strh	r1, [r4, #0]
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 800207c:	f107 0308 	add.w	r3, r7, #8
 8002080:	4618      	mov	r0, r3
 8002082:	f7fe f8c5 	bl	8000210 <strlen>
 8002086:	4603      	mov	r3, r0
 8002088:	b29a      	uxth	r2, r3
 800208a:	f107 0108 	add.w	r1, r7, #8
 800208e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002092:	4898      	ldr	r0, [pc, #608]	@ (80022f4 <mpu6050_init+0x2c0>)
 8002094:	f003 fd6c 	bl	8005b70 <HAL_UART_Transmit>
 8002098:	e01a      	b.n	80020d0 <mpu6050_init+0x9c>
	  }
	  else{
		  strcpy((char*) buff, "The device is not ready. Check the cables\r\n");
 800209a:	f107 0308 	add.w	r3, r7, #8
 800209e:	4a96      	ldr	r2, [pc, #600]	@ (80022f8 <mpu6050_init+0x2c4>)
 80020a0:	461c      	mov	r4, r3
 80020a2:	4615      	mov	r5, r2
 80020a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80020b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 80020b4:	f107 0308 	add.w	r3, r7, #8
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7fe f8a9 	bl	8000210 <strlen>
 80020be:	4603      	mov	r3, r0
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	f107 0108 	add.w	r1, r7, #8
 80020c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020ca:	488a      	ldr	r0, [pc, #552]	@ (80022f4 <mpu6050_init+0x2c0>)
 80020cc:	f003 fd50 	bl	8005b70 <HAL_UART_Transmit>
	  }

	  //configure gyroscope
	  uint8_t gyroscope_range = FS_GYRO_1000;	//set gyroscope range to 500 °/s
 80020d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80020d4:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 80020d8:	2210      	movs	r2, #16
 80020da:	701a      	strb	r2, [r3, #0]
	  if(HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS<<1) +0, REG_CONFIG_GYRO, 1, &gyroscope_range, sizeof(gyroscope_range), 100) == HAL_OK){
 80020dc:	2364      	movs	r3, #100	@ 0x64
 80020de:	9302      	str	r3, [sp, #8]
 80020e0:	2301      	movs	r3, #1
 80020e2:	9301      	str	r3, [sp, #4]
 80020e4:	1dfb      	adds	r3, r7, #7
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	2301      	movs	r3, #1
 80020ea:	221b      	movs	r2, #27
 80020ec:	21d0      	movs	r1, #208	@ 0xd0
 80020ee:	487f      	ldr	r0, [pc, #508]	@ (80022ec <mpu6050_init+0x2b8>)
 80020f0:	f000 fff8 	bl	80030e4 <HAL_I2C_Mem_Write>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d11d      	bne.n	8002136 <mpu6050_init+0x102>
		  strcpy((char*) buff, "gyroscope range successfully set\r\n");
 80020fa:	f107 0308 	add.w	r3, r7, #8
 80020fe:	4a7f      	ldr	r2, [pc, #508]	@ (80022fc <mpu6050_init+0x2c8>)
 8002100:	461c      	mov	r4, r3
 8002102:	4615      	mov	r5, r2
 8002104:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002108:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800210a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800210c:	682b      	ldr	r3, [r5, #0]
 800210e:	461a      	mov	r2, r3
 8002110:	8022      	strh	r2, [r4, #0]
 8002112:	3402      	adds	r4, #2
 8002114:	0c1b      	lsrs	r3, r3, #16
 8002116:	7023      	strb	r3, [r4, #0]
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8002118:	f107 0308 	add.w	r3, r7, #8
 800211c:	4618      	mov	r0, r3
 800211e:	f7fe f877 	bl	8000210 <strlen>
 8002122:	4603      	mov	r3, r0
 8002124:	b29a      	uxth	r2, r3
 8002126:	f107 0108 	add.w	r1, r7, #8
 800212a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800212e:	4871      	ldr	r0, [pc, #452]	@ (80022f4 <mpu6050_init+0x2c0>)
 8002130:	f003 fd1e 	bl	8005b70 <HAL_UART_Transmit>
 8002134:	e018      	b.n	8002168 <mpu6050_init+0x134>
	  }
	  else{
		  strcpy((char*) buff, "failed setting gyroscope range\r\n");
 8002136:	f107 0308 	add.w	r3, r7, #8
 800213a:	4a71      	ldr	r2, [pc, #452]	@ (8002300 <mpu6050_init+0x2cc>)
 800213c:	461c      	mov	r4, r3
 800213e:	4615      	mov	r5, r2
 8002140:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002142:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002144:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002146:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002148:	682b      	ldr	r3, [r5, #0]
 800214a:	7023      	strb	r3, [r4, #0]
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 800214c:	f107 0308 	add.w	r3, r7, #8
 8002150:	4618      	mov	r0, r3
 8002152:	f7fe f85d 	bl	8000210 <strlen>
 8002156:	4603      	mov	r3, r0
 8002158:	b29a      	uxth	r2, r3
 800215a:	f107 0108 	add.w	r1, r7, #8
 800215e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002162:	4864      	ldr	r0, [pc, #400]	@ (80022f4 <mpu6050_init+0x2c0>)
 8002164:	f003 fd04 	bl	8005b70 <HAL_UART_Transmit>
	  }

	  //configure accelerometer
	  uint8_t accelerometer_range = FS_ACC_2G;	//set gyroscope range to 500 °/s
 8002168:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800216c:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 8002170:	2200      	movs	r2, #0
 8002172:	701a      	strb	r2, [r3, #0]
	  if(HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS<<1) +0, REG_CONFIG_ACC, 1, &accelerometer_range, sizeof(accelerometer_range), 100) == HAL_OK){
 8002174:	2364      	movs	r3, #100	@ 0x64
 8002176:	9302      	str	r3, [sp, #8]
 8002178:	2301      	movs	r3, #1
 800217a:	9301      	str	r3, [sp, #4]
 800217c:	1dbb      	adds	r3, r7, #6
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	2301      	movs	r3, #1
 8002182:	221c      	movs	r2, #28
 8002184:	21d0      	movs	r1, #208	@ 0xd0
 8002186:	4859      	ldr	r0, [pc, #356]	@ (80022ec <mpu6050_init+0x2b8>)
 8002188:	f000 ffac 	bl	80030e4 <HAL_I2C_Mem_Write>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d11f      	bne.n	80021d2 <mpu6050_init+0x19e>
		  strcpy((char*) buff, "accelerometer range successfully set\r\n");
 8002192:	f107 0308 	add.w	r3, r7, #8
 8002196:	4a5b      	ldr	r2, [pc, #364]	@ (8002304 <mpu6050_init+0x2d0>)
 8002198:	461c      	mov	r4, r3
 800219a:	4615      	mov	r5, r2
 800219c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800219e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021a4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80021a8:	6020      	str	r0, [r4, #0]
 80021aa:	3404      	adds	r4, #4
 80021ac:	8021      	strh	r1, [r4, #0]
 80021ae:	3402      	adds	r4, #2
 80021b0:	0c0b      	lsrs	r3, r1, #16
 80021b2:	7023      	strb	r3, [r4, #0]
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 80021b4:	f107 0308 	add.w	r3, r7, #8
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7fe f829 	bl	8000210 <strlen>
 80021be:	4603      	mov	r3, r0
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	f107 0108 	add.w	r1, r7, #8
 80021c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021ca:	484a      	ldr	r0, [pc, #296]	@ (80022f4 <mpu6050_init+0x2c0>)
 80021cc:	f003 fcd0 	bl	8005b70 <HAL_UART_Transmit>
 80021d0:	e01b      	b.n	800220a <mpu6050_init+0x1d6>
	  }
	  else{
		  strcpy((char*) buff, "failed setting accelerometer range\r\n");
 80021d2:	f107 0308 	add.w	r3, r7, #8
 80021d6:	4a4c      	ldr	r2, [pc, #304]	@ (8002308 <mpu6050_init+0x2d4>)
 80021d8:	461c      	mov	r4, r3
 80021da:	4615      	mov	r5, r2
 80021dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021e4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80021e8:	6020      	str	r0, [r4, #0]
 80021ea:	3404      	adds	r4, #4
 80021ec:	7021      	strb	r1, [r4, #0]
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 80021ee:	f107 0308 	add.w	r3, r7, #8
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fe f80c 	bl	8000210 <strlen>
 80021f8:	4603      	mov	r3, r0
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	f107 0108 	add.w	r1, r7, #8
 8002200:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002204:	483b      	ldr	r0, [pc, #236]	@ (80022f4 <mpu6050_init+0x2c0>)
 8002206:	f003 fcb3 	bl	8005b70 <HAL_UART_Transmit>
	  }

	  //set low pass filter
	  uint8_t lpf_setting = LPF_44;
 800220a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800220e:	f2a3 1303 	subw	r3, r3, #259	@ 0x103
 8002212:	2203      	movs	r2, #3
 8002214:	701a      	strb	r2, [r3, #0]
	  HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS<<1) +0, REG_LOW_PASS_FILTER, 1, &lpf_setting, sizeof(lpf_setting), 100);
 8002216:	2364      	movs	r3, #100	@ 0x64
 8002218:	9302      	str	r3, [sp, #8]
 800221a:	2301      	movs	r3, #1
 800221c:	9301      	str	r3, [sp, #4]
 800221e:	1d7b      	adds	r3, r7, #5
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	2301      	movs	r3, #1
 8002224:	221a      	movs	r2, #26
 8002226:	21d0      	movs	r1, #208	@ 0xd0
 8002228:	4830      	ldr	r0, [pc, #192]	@ (80022ec <mpu6050_init+0x2b8>)
 800222a:	f000 ff5b 	bl	80030e4 <HAL_I2C_Mem_Write>

	  //enable interrupt to signal that data is ready to be read
	  uint8_t interrupt_signal = INT_DATA_READY;
 800222e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002232:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002236:	2201      	movs	r2, #1
 8002238:	701a      	strb	r2, [r3, #0]
	  HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS<<1) +0, REG_INTERRUPT, 1, &interrupt_signal, sizeof(interrupt_signal), 100);
 800223a:	2364      	movs	r3, #100	@ 0x64
 800223c:	9302      	str	r3, [sp, #8]
 800223e:	2301      	movs	r3, #1
 8002240:	9301      	str	r3, [sp, #4]
 8002242:	1d3b      	adds	r3, r7, #4
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	2301      	movs	r3, #1
 8002248:	2238      	movs	r2, #56	@ 0x38
 800224a:	21d0      	movs	r1, #208	@ 0xd0
 800224c:	4827      	ldr	r0, [pc, #156]	@ (80022ec <mpu6050_init+0x2b8>)
 800224e:	f000 ff49 	bl	80030e4 <HAL_I2C_Mem_Write>

	  //deactivate sleep
	  uint8_t asdf_flags = 0b00001000;	//set the '1' also to '0' if you want the temperature sensor to be enabled
 8002252:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002256:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 800225a:	2208      	movs	r2, #8
 800225c:	701a      	strb	r2, [r3, #0]
	  if(HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS<<1) +0, REG_USR_CTRL, 1, &asdf_flags, sizeof(asdf_flags), 100) == HAL_OK){
 800225e:	2364      	movs	r3, #100	@ 0x64
 8002260:	9302      	str	r3, [sp, #8]
 8002262:	2301      	movs	r3, #1
 8002264:	9301      	str	r3, [sp, #4]
 8002266:	1cfb      	adds	r3, r7, #3
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	2301      	movs	r3, #1
 800226c:	226b      	movs	r2, #107	@ 0x6b
 800226e:	21d0      	movs	r1, #208	@ 0xd0
 8002270:	481e      	ldr	r0, [pc, #120]	@ (80022ec <mpu6050_init+0x2b8>)
 8002272:	f000 ff37 	bl	80030e4 <HAL_I2C_Mem_Write>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d119      	bne.n	80022b0 <mpu6050_init+0x27c>
		  strcpy((char*) buff, "disablin sleep successfully\r\n");
 800227c:	f107 0308 	add.w	r3, r7, #8
 8002280:	4a22      	ldr	r2, [pc, #136]	@ (800230c <mpu6050_init+0x2d8>)
 8002282:	461c      	mov	r4, r3
 8002284:	4615      	mov	r5, r2
 8002286:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002288:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800228a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800228e:	c407      	stmia	r4!, {r0, r1, r2}
 8002290:	8023      	strh	r3, [r4, #0]
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8002292:	f107 0308 	add.w	r3, r7, #8
 8002296:	4618      	mov	r0, r3
 8002298:	f7fd ffba 	bl	8000210 <strlen>
 800229c:	4603      	mov	r3, r0
 800229e:	b29a      	uxth	r2, r3
 80022a0:	f107 0108 	add.w	r1, r7, #8
 80022a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80022a8:	4812      	ldr	r0, [pc, #72]	@ (80022f4 <mpu6050_init+0x2c0>)
 80022aa:	f003 fc61 	bl	8005b70 <HAL_UART_Transmit>
	  else{
		  strcpy((char*) buff, "error disabling sleep\r\n");
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
	  }

}
 80022ae:	e018      	b.n	80022e2 <mpu6050_init+0x2ae>
		  strcpy((char*) buff, "error disabling sleep\r\n");
 80022b0:	f107 0308 	add.w	r3, r7, #8
 80022b4:	4a16      	ldr	r2, [pc, #88]	@ (8002310 <mpu6050_init+0x2dc>)
 80022b6:	461c      	mov	r4, r3
 80022b8:	4615      	mov	r5, r2
 80022ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022be:	e895 0003 	ldmia.w	r5, {r0, r1}
 80022c2:	e884 0003 	stmia.w	r4, {r0, r1}
		  HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 80022c6:	f107 0308 	add.w	r3, r7, #8
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7fd ffa0 	bl	8000210 <strlen>
 80022d0:	4603      	mov	r3, r0
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	f107 0108 	add.w	r1, r7, #8
 80022d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80022dc:	4805      	ldr	r0, [pc, #20]	@ (80022f4 <mpu6050_init+0x2c0>)
 80022de:	f003 fc47 	bl	8005b70 <HAL_UART_Transmit>
}
 80022e2:	bf00      	nop
 80022e4:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bdb0      	pop	{r4, r5, r7, pc}
 80022ec:	20000880 	.word	0x20000880
 80022f0:	0800a7c4 	.word	0x0800a7c4
 80022f4:	2000091c 	.word	0x2000091c
 80022f8:	0800a7dc 	.word	0x0800a7dc
 80022fc:	0800a808 	.word	0x0800a808
 8002300:	0800a82c 	.word	0x0800a82c
 8002304:	0800a850 	.word	0x0800a850
 8002308:	0800a878 	.word	0x0800a878
 800230c:	0800a8a0 	.word	0x0800a8a0
 8002310:	0800a8c0 	.word	0x0800a8c0

08002314 <mpu6050_read>:



void mpu6050_read(mpu6050_values_t* values){
 8002314:	b580      	push	{r7, lr}
 8002316:	b088      	sub	sp, #32
 8002318:	af04      	add	r7, sp, #16
 800231a:	6078      	str	r0, [r7, #4]

	  uint8_t buff[6] = { 0 };
 800231c:	2300      	movs	r3, #0
 800231e:	60bb      	str	r3, [r7, #8]
 8002320:	2300      	movs	r3, #0
 8002322:	81bb      	strh	r3, [r7, #12]
	  HAL_I2C_Mem_Read(&hi2c1, (DEVICE_ADDRESS<<1) +1, REG_ACC_DATA, 1, buff, sizeof(buff), 100);
 8002324:	2364      	movs	r3, #100	@ 0x64
 8002326:	9302      	str	r3, [sp, #8]
 8002328:	2306      	movs	r3, #6
 800232a:	9301      	str	r3, [sp, #4]
 800232c:	f107 0308 	add.w	r3, r7, #8
 8002330:	9300      	str	r3, [sp, #0]
 8002332:	2301      	movs	r3, #1
 8002334:	223b      	movs	r2, #59	@ 0x3b
 8002336:	21d1      	movs	r1, #209	@ 0xd1
 8002338:	4829      	ldr	r0, [pc, #164]	@ (80023e0 <mpu6050_read+0xcc>)
 800233a:	f000 ffcd 	bl	80032d8 <HAL_I2C_Mem_Read>
	  values->acc_x = (uint16_t) (buff[0]<<8) + buff[1];
 800233e:	7a3b      	ldrb	r3, [r7, #8]
 8002340:	021b      	lsls	r3, r3, #8
 8002342:	b29b      	uxth	r3, r3
 8002344:	7a7a      	ldrb	r2, [r7, #9]
 8002346:	4413      	add	r3, r2
 8002348:	b29b      	uxth	r3, r3
 800234a:	b21a      	sxth	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	80da      	strh	r2, [r3, #6]
	  values->acc_y = (uint16_t) (buff[2]<<8) + buff[3];
 8002350:	7abb      	ldrb	r3, [r7, #10]
 8002352:	021b      	lsls	r3, r3, #8
 8002354:	b29b      	uxth	r3, r3
 8002356:	7afa      	ldrb	r2, [r7, #11]
 8002358:	4413      	add	r3, r2
 800235a:	b29b      	uxth	r3, r3
 800235c:	b21a      	sxth	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	811a      	strh	r2, [r3, #8]
	  values->acc_z = (uint16_t) (buff[4]<<8) + buff[5];
 8002362:	7b3b      	ldrb	r3, [r7, #12]
 8002364:	021b      	lsls	r3, r3, #8
 8002366:	b29b      	uxth	r3, r3
 8002368:	7b7a      	ldrb	r2, [r7, #13]
 800236a:	4413      	add	r3, r2
 800236c:	b29b      	uxth	r3, r3
 800236e:	b21a      	sxth	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	815a      	strh	r2, [r3, #10]

	  HAL_I2C_Mem_Read(&hi2c1, (DEVICE_ADDRESS<<1) +1, REG_GYRO_DATA, 1, buff, sizeof(buff), 100);
 8002374:	2364      	movs	r3, #100	@ 0x64
 8002376:	9302      	str	r3, [sp, #8]
 8002378:	2306      	movs	r3, #6
 800237a:	9301      	str	r3, [sp, #4]
 800237c:	f107 0308 	add.w	r3, r7, #8
 8002380:	9300      	str	r3, [sp, #0]
 8002382:	2301      	movs	r3, #1
 8002384:	2243      	movs	r2, #67	@ 0x43
 8002386:	21d1      	movs	r1, #209	@ 0xd1
 8002388:	4815      	ldr	r0, [pc, #84]	@ (80023e0 <mpu6050_read+0xcc>)
 800238a:	f000 ffa5 	bl	80032d8 <HAL_I2C_Mem_Read>
	  values->gyro_x = (uint16_t) (buff[0]<<8) + buff[1];
 800238e:	7a3b      	ldrb	r3, [r7, #8]
 8002390:	021b      	lsls	r3, r3, #8
 8002392:	b29b      	uxth	r3, r3
 8002394:	7a7a      	ldrb	r2, [r7, #9]
 8002396:	4413      	add	r3, r2
 8002398:	b29b      	uxth	r3, r3
 800239a:	b21a      	sxth	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	801a      	strh	r2, [r3, #0]
	  values->gyro_y = (uint16_t) (buff[2]<<8) + buff[3];
 80023a0:	7abb      	ldrb	r3, [r7, #10]
 80023a2:	021b      	lsls	r3, r3, #8
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	7afa      	ldrb	r2, [r7, #11]
 80023a8:	4413      	add	r3, r2
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	b21a      	sxth	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	805a      	strh	r2, [r3, #2]
	  values->gyro_z = (uint16_t) (buff[4]<<8) + buff[5];
 80023b2:	7b3b      	ldrb	r3, [r7, #12]
 80023b4:	021b      	lsls	r3, r3, #8
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	7b7a      	ldrb	r2, [r7, #13]
 80023ba:	4413      	add	r3, r2
 80023bc:	b29b      	uxth	r3, r3
 80023be:	b21a      	sxth	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	809a      	strh	r2, [r3, #4]

	  //apply offsets
	  values->gyro_y += GYRO_Y_OFFSET_1000;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	330c      	adds	r3, #12
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	b21a      	sxth	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	805a      	strh	r2, [r3, #2]

}
 80023d6:	bf00      	nop
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	20000880 	.word	0x20000880

080023e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	607b      	str	r3, [r7, #4]
 80023ee:	4b12      	ldr	r3, [pc, #72]	@ (8002438 <HAL_MspInit+0x54>)
 80023f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f2:	4a11      	ldr	r2, [pc, #68]	@ (8002438 <HAL_MspInit+0x54>)
 80023f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80023fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002438 <HAL_MspInit+0x54>)
 80023fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002402:	607b      	str	r3, [r7, #4]
 8002404:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	603b      	str	r3, [r7, #0]
 800240a:	4b0b      	ldr	r3, [pc, #44]	@ (8002438 <HAL_MspInit+0x54>)
 800240c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240e:	4a0a      	ldr	r2, [pc, #40]	@ (8002438 <HAL_MspInit+0x54>)
 8002410:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002414:	6413      	str	r3, [r2, #64]	@ 0x40
 8002416:	4b08      	ldr	r3, [pc, #32]	@ (8002438 <HAL_MspInit+0x54>)
 8002418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800241e:	603b      	str	r3, [r7, #0]
 8002420:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002422:	2200      	movs	r2, #0
 8002424:	210f      	movs	r1, #15
 8002426:	f06f 0001 	mvn.w	r0, #1
 800242a:	f000 fb27 	bl	8002a7c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800242e:	bf00      	nop
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40023800 	.word	0x40023800

0800243c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b08a      	sub	sp, #40	@ 0x28
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002444:	f107 0314 	add.w	r3, r7, #20
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	605a      	str	r2, [r3, #4]
 800244e:	609a      	str	r2, [r3, #8]
 8002450:	60da      	str	r2, [r3, #12]
 8002452:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a19      	ldr	r2, [pc, #100]	@ (80024c0 <HAL_I2C_MspInit+0x84>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d12c      	bne.n	80024b8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800245e:	2300      	movs	r3, #0
 8002460:	613b      	str	r3, [r7, #16]
 8002462:	4b18      	ldr	r3, [pc, #96]	@ (80024c4 <HAL_I2C_MspInit+0x88>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002466:	4a17      	ldr	r2, [pc, #92]	@ (80024c4 <HAL_I2C_MspInit+0x88>)
 8002468:	f043 0302 	orr.w	r3, r3, #2
 800246c:	6313      	str	r3, [r2, #48]	@ 0x30
 800246e:	4b15      	ldr	r3, [pc, #84]	@ (80024c4 <HAL_I2C_MspInit+0x88>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	613b      	str	r3, [r7, #16]
 8002478:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800247a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800247e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002480:	2312      	movs	r3, #18
 8002482:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002484:	2301      	movs	r3, #1
 8002486:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002488:	2303      	movs	r3, #3
 800248a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800248c:	2304      	movs	r3, #4
 800248e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002490:	f107 0314 	add.w	r3, r7, #20
 8002494:	4619      	mov	r1, r3
 8002496:	480c      	ldr	r0, [pc, #48]	@ (80024c8 <HAL_I2C_MspInit+0x8c>)
 8002498:	f000 fb1a 	bl	8002ad0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800249c:	2300      	movs	r3, #0
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	4b08      	ldr	r3, [pc, #32]	@ (80024c4 <HAL_I2C_MspInit+0x88>)
 80024a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a4:	4a07      	ldr	r2, [pc, #28]	@ (80024c4 <HAL_I2C_MspInit+0x88>)
 80024a6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80024aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80024ac:	4b05      	ldr	r3, [pc, #20]	@ (80024c4 <HAL_I2C_MspInit+0x88>)
 80024ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024b4:	60fb      	str	r3, [r7, #12]
 80024b6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80024b8:	bf00      	nop
 80024ba:	3728      	adds	r7, #40	@ 0x28
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40005400 	.word	0x40005400
 80024c4:	40023800 	.word	0x40023800
 80024c8:	40020400 	.word	0x40020400

080024cc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a0b      	ldr	r2, [pc, #44]	@ (8002508 <HAL_TIM_PWM_MspInit+0x3c>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d10d      	bne.n	80024fa <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024de:	2300      	movs	r3, #0
 80024e0:	60fb      	str	r3, [r7, #12]
 80024e2:	4b0a      	ldr	r3, [pc, #40]	@ (800250c <HAL_TIM_PWM_MspInit+0x40>)
 80024e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e6:	4a09      	ldr	r2, [pc, #36]	@ (800250c <HAL_TIM_PWM_MspInit+0x40>)
 80024e8:	f043 0302 	orr.w	r3, r3, #2
 80024ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80024ee:	4b07      	ldr	r3, [pc, #28]	@ (800250c <HAL_TIM_PWM_MspInit+0x40>)
 80024f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	60fb      	str	r3, [r7, #12]
 80024f8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80024fa:	bf00      	nop
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	40000400 	.word	0x40000400
 800250c:	40023800 	.word	0x40023800

08002510 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b08a      	sub	sp, #40	@ 0x28
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002518:	f107 0314 	add.w	r3, r7, #20
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	605a      	str	r2, [r3, #4]
 8002522:	609a      	str	r2, [r3, #8]
 8002524:	60da      	str	r2, [r3, #12]
 8002526:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a21      	ldr	r2, [pc, #132]	@ (80025b4 <HAL_TIM_MspPostInit+0xa4>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d13b      	bne.n	80025aa <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	613b      	str	r3, [r7, #16]
 8002536:	4b20      	ldr	r3, [pc, #128]	@ (80025b8 <HAL_TIM_MspPostInit+0xa8>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253a:	4a1f      	ldr	r2, [pc, #124]	@ (80025b8 <HAL_TIM_MspPostInit+0xa8>)
 800253c:	f043 0301 	orr.w	r3, r3, #1
 8002540:	6313      	str	r3, [r2, #48]	@ 0x30
 8002542:	4b1d      	ldr	r3, [pc, #116]	@ (80025b8 <HAL_TIM_MspPostInit+0xa8>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	613b      	str	r3, [r7, #16]
 800254c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	4b19      	ldr	r3, [pc, #100]	@ (80025b8 <HAL_TIM_MspPostInit+0xa8>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002556:	4a18      	ldr	r2, [pc, #96]	@ (80025b8 <HAL_TIM_MspPostInit+0xa8>)
 8002558:	f043 0302 	orr.w	r3, r3, #2
 800255c:	6313      	str	r3, [r2, #48]	@ 0x30
 800255e:	4b16      	ldr	r3, [pc, #88]	@ (80025b8 <HAL_TIM_MspPostInit+0xa8>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800256a:	2380      	movs	r3, #128	@ 0x80
 800256c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256e:	2302      	movs	r3, #2
 8002570:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002572:	2300      	movs	r3, #0
 8002574:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002576:	2300      	movs	r3, #0
 8002578:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800257a:	2302      	movs	r3, #2
 800257c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800257e:	f107 0314 	add.w	r3, r7, #20
 8002582:	4619      	mov	r1, r3
 8002584:	480d      	ldr	r0, [pc, #52]	@ (80025bc <HAL_TIM_MspPostInit+0xac>)
 8002586:	f000 faa3 	bl	8002ad0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800258a:	2310      	movs	r3, #16
 800258c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258e:	2302      	movs	r3, #2
 8002590:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002592:	2300      	movs	r3, #0
 8002594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002596:	2300      	movs	r3, #0
 8002598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800259a:	2302      	movs	r3, #2
 800259c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800259e:	f107 0314 	add.w	r3, r7, #20
 80025a2:	4619      	mov	r1, r3
 80025a4:	4806      	ldr	r0, [pc, #24]	@ (80025c0 <HAL_TIM_MspPostInit+0xb0>)
 80025a6:	f000 fa93 	bl	8002ad0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80025aa:	bf00      	nop
 80025ac:	3728      	adds	r7, #40	@ 0x28
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40000400 	.word	0x40000400
 80025b8:	40023800 	.word	0x40023800
 80025bc:	40020000 	.word	0x40020000
 80025c0:	40020400 	.word	0x40020400

080025c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b08a      	sub	sp, #40	@ 0x28
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025cc:	f107 0314 	add.w	r3, r7, #20
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	605a      	str	r2, [r3, #4]
 80025d6:	609a      	str	r2, [r3, #8]
 80025d8:	60da      	str	r2, [r3, #12]
 80025da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a19      	ldr	r2, [pc, #100]	@ (8002648 <HAL_UART_MspInit+0x84>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d12b      	bne.n	800263e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	613b      	str	r3, [r7, #16]
 80025ea:	4b18      	ldr	r3, [pc, #96]	@ (800264c <HAL_UART_MspInit+0x88>)
 80025ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ee:	4a17      	ldr	r2, [pc, #92]	@ (800264c <HAL_UART_MspInit+0x88>)
 80025f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80025f6:	4b15      	ldr	r3, [pc, #84]	@ (800264c <HAL_UART_MspInit+0x88>)
 80025f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025fe:	613b      	str	r3, [r7, #16]
 8002600:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	4b11      	ldr	r3, [pc, #68]	@ (800264c <HAL_UART_MspInit+0x88>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260a:	4a10      	ldr	r2, [pc, #64]	@ (800264c <HAL_UART_MspInit+0x88>)
 800260c:	f043 0301 	orr.w	r3, r3, #1
 8002610:	6313      	str	r3, [r2, #48]	@ 0x30
 8002612:	4b0e      	ldr	r3, [pc, #56]	@ (800264c <HAL_UART_MspInit+0x88>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800261e:	230c      	movs	r3, #12
 8002620:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002622:	2302      	movs	r3, #2
 8002624:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002626:	2300      	movs	r3, #0
 8002628:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800262a:	2303      	movs	r3, #3
 800262c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800262e:	2307      	movs	r3, #7
 8002630:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002632:	f107 0314 	add.w	r3, r7, #20
 8002636:	4619      	mov	r1, r3
 8002638:	4805      	ldr	r0, [pc, #20]	@ (8002650 <HAL_UART_MspInit+0x8c>)
 800263a:	f000 fa49 	bl	8002ad0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800263e:	bf00      	nop
 8002640:	3728      	adds	r7, #40	@ 0x28
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40004400 	.word	0x40004400
 800264c:	40023800 	.word	0x40023800
 8002650:	40020000 	.word	0x40020000

08002654 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b08e      	sub	sp, #56	@ 0x38
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800265c:	2300      	movs	r3, #0
 800265e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002660:	2300      	movs	r3, #0
 8002662:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002664:	2300      	movs	r3, #0
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	4b33      	ldr	r3, [pc, #204]	@ (8002738 <HAL_InitTick+0xe4>)
 800266a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266c:	4a32      	ldr	r2, [pc, #200]	@ (8002738 <HAL_InitTick+0xe4>)
 800266e:	f043 0310 	orr.w	r3, r3, #16
 8002672:	6413      	str	r3, [r2, #64]	@ 0x40
 8002674:	4b30      	ldr	r3, [pc, #192]	@ (8002738 <HAL_InitTick+0xe4>)
 8002676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002678:	f003 0310 	and.w	r3, r3, #16
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002680:	f107 0210 	add.w	r2, r7, #16
 8002684:	f107 0314 	add.w	r3, r7, #20
 8002688:	4611      	mov	r1, r2
 800268a:	4618      	mov	r0, r3
 800268c:	f001 fe52 	bl	8004334 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002690:	6a3b      	ldr	r3, [r7, #32]
 8002692:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002696:	2b00      	cmp	r3, #0
 8002698:	d103      	bne.n	80026a2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800269a:	f001 fe23 	bl	80042e4 <HAL_RCC_GetPCLK1Freq>
 800269e:	6378      	str	r0, [r7, #52]	@ 0x34
 80026a0:	e004      	b.n	80026ac <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80026a2:	f001 fe1f 	bl	80042e4 <HAL_RCC_GetPCLK1Freq>
 80026a6:	4603      	mov	r3, r0
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80026ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026ae:	4a23      	ldr	r2, [pc, #140]	@ (800273c <HAL_InitTick+0xe8>)
 80026b0:	fba2 2303 	umull	r2, r3, r2, r3
 80026b4:	0c9b      	lsrs	r3, r3, #18
 80026b6:	3b01      	subs	r3, #1
 80026b8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80026ba:	4b21      	ldr	r3, [pc, #132]	@ (8002740 <HAL_InitTick+0xec>)
 80026bc:	4a21      	ldr	r2, [pc, #132]	@ (8002744 <HAL_InitTick+0xf0>)
 80026be:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80026c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002740 <HAL_InitTick+0xec>)
 80026c2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80026c6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80026c8:	4a1d      	ldr	r2, [pc, #116]	@ (8002740 <HAL_InitTick+0xec>)
 80026ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026cc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80026ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002740 <HAL_InitTick+0xec>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002740 <HAL_InitTick+0xec>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026da:	4b19      	ldr	r3, [pc, #100]	@ (8002740 <HAL_InitTick+0xec>)
 80026dc:	2200      	movs	r2, #0
 80026de:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80026e0:	4817      	ldr	r0, [pc, #92]	@ (8002740 <HAL_InitTick+0xec>)
 80026e2:	f002 fb27 	bl	8004d34 <HAL_TIM_Base_Init>
 80026e6:	4603      	mov	r3, r0
 80026e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80026ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d11b      	bne.n	800272c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80026f4:	4812      	ldr	r0, [pc, #72]	@ (8002740 <HAL_InitTick+0xec>)
 80026f6:	f002 fb77 	bl	8004de8 <HAL_TIM_Base_Start_IT>
 80026fa:	4603      	mov	r3, r0
 80026fc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002700:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002704:	2b00      	cmp	r3, #0
 8002706:	d111      	bne.n	800272c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002708:	2036      	movs	r0, #54	@ 0x36
 800270a:	f000 f9d3 	bl	8002ab4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2b0f      	cmp	r3, #15
 8002712:	d808      	bhi.n	8002726 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002714:	2200      	movs	r2, #0
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	2036      	movs	r0, #54	@ 0x36
 800271a:	f000 f9af 	bl	8002a7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800271e:	4a0a      	ldr	r2, [pc, #40]	@ (8002748 <HAL_InitTick+0xf4>)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6013      	str	r3, [r2, #0]
 8002724:	e002      	b.n	800272c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800272c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002730:	4618      	mov	r0, r3
 8002732:	3738      	adds	r7, #56	@ 0x38
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40023800 	.word	0x40023800
 800273c:	431bde83 	.word	0x431bde83
 8002740:	20000aa0 	.word	0x20000aa0
 8002744:	40001000 	.word	0x40001000
 8002748:	20000008 	.word	0x20000008

0800274c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002750:	bf00      	nop
 8002752:	e7fd      	b.n	8002750 <NMI_Handler+0x4>

08002754 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002758:	bf00      	nop
 800275a:	e7fd      	b.n	8002758 <HardFault_Handler+0x4>

0800275c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002760:	bf00      	nop
 8002762:	e7fd      	b.n	8002760 <MemManage_Handler+0x4>

08002764 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002768:	bf00      	nop
 800276a:	e7fd      	b.n	8002768 <BusFault_Handler+0x4>

0800276c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002770:	bf00      	nop
 8002772:	e7fd      	b.n	8002770 <UsageFault_Handler+0x4>

08002774 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002778:	bf00      	nop
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MPU6050_INT_Pin);
 8002786:	2020      	movs	r0, #32
 8002788:	f000 fb50 	bl	8002e2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800278c:	bf00      	nop
 800278e:	bd80      	pop	{r7, pc}

08002790 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002794:	4802      	ldr	r0, [pc, #8]	@ (80027a0 <TIM6_DAC_IRQHandler+0x10>)
 8002796:	f002 fcaf 	bl	80050f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20000aa0 	.word	0x20000aa0

080027a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027ac:	4a14      	ldr	r2, [pc, #80]	@ (8002800 <_sbrk+0x5c>)
 80027ae:	4b15      	ldr	r3, [pc, #84]	@ (8002804 <_sbrk+0x60>)
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027b8:	4b13      	ldr	r3, [pc, #76]	@ (8002808 <_sbrk+0x64>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d102      	bne.n	80027c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027c0:	4b11      	ldr	r3, [pc, #68]	@ (8002808 <_sbrk+0x64>)
 80027c2:	4a12      	ldr	r2, [pc, #72]	@ (800280c <_sbrk+0x68>)
 80027c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027c6:	4b10      	ldr	r3, [pc, #64]	@ (8002808 <_sbrk+0x64>)
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4413      	add	r3, r2
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d207      	bcs.n	80027e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027d4:	f007 f822 	bl	800981c <__errno>
 80027d8:	4603      	mov	r3, r0
 80027da:	220c      	movs	r2, #12
 80027dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80027e2:	e009      	b.n	80027f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027e4:	4b08      	ldr	r3, [pc, #32]	@ (8002808 <_sbrk+0x64>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027ea:	4b07      	ldr	r3, [pc, #28]	@ (8002808 <_sbrk+0x64>)
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4413      	add	r3, r2
 80027f2:	4a05      	ldr	r2, [pc, #20]	@ (8002808 <_sbrk+0x64>)
 80027f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027f6:	68fb      	ldr	r3, [r7, #12]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3718      	adds	r7, #24
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	20020000 	.word	0x20020000
 8002804:	00000400 	.word	0x00000400
 8002808:	20000ae8 	.word	0x20000ae8
 800280c:	20005620 	.word	0x20005620

08002810 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002814:	4b06      	ldr	r3, [pc, #24]	@ (8002830 <SystemInit+0x20>)
 8002816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800281a:	4a05      	ldr	r2, [pc, #20]	@ (8002830 <SystemInit+0x20>)
 800281c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002820:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002824:	bf00      	nop
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	e000ed00 	.word	0xe000ed00

08002834 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002834:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800286c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002838:	f7ff ffea 	bl	8002810 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800283c:	480c      	ldr	r0, [pc, #48]	@ (8002870 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800283e:	490d      	ldr	r1, [pc, #52]	@ (8002874 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002840:	4a0d      	ldr	r2, [pc, #52]	@ (8002878 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002842:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002844:	e002      	b.n	800284c <LoopCopyDataInit>

08002846 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002846:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002848:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800284a:	3304      	adds	r3, #4

0800284c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800284c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800284e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002850:	d3f9      	bcc.n	8002846 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002852:	4a0a      	ldr	r2, [pc, #40]	@ (800287c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002854:	4c0a      	ldr	r4, [pc, #40]	@ (8002880 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002856:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002858:	e001      	b.n	800285e <LoopFillZerobss>

0800285a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800285a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800285c:	3204      	adds	r2, #4

0800285e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800285e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002860:	d3fb      	bcc.n	800285a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002862:	f006 ffe1 	bl	8009828 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002866:	f7fe fb87 	bl	8000f78 <main>
  bx  lr    
 800286a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800286c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002874:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8002878:	0800aa48 	.word	0x0800aa48
  ldr r2, =_sbss
 800287c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8002880:	20005620 	.word	0x20005620

08002884 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002884:	e7fe      	b.n	8002884 <ADC_IRQHandler>
	...

08002888 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800288c:	4b0e      	ldr	r3, [pc, #56]	@ (80028c8 <HAL_Init+0x40>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a0d      	ldr	r2, [pc, #52]	@ (80028c8 <HAL_Init+0x40>)
 8002892:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002896:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002898:	4b0b      	ldr	r3, [pc, #44]	@ (80028c8 <HAL_Init+0x40>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a0a      	ldr	r2, [pc, #40]	@ (80028c8 <HAL_Init+0x40>)
 800289e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80028a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028a4:	4b08      	ldr	r3, [pc, #32]	@ (80028c8 <HAL_Init+0x40>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a07      	ldr	r2, [pc, #28]	@ (80028c8 <HAL_Init+0x40>)
 80028aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028b0:	2003      	movs	r0, #3
 80028b2:	f000 f8d8 	bl	8002a66 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028b6:	200f      	movs	r0, #15
 80028b8:	f7ff fecc 	bl	8002654 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028bc:	f7ff fd92 	bl	80023e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40023c00 	.word	0x40023c00

080028cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028d0:	4b06      	ldr	r3, [pc, #24]	@ (80028ec <HAL_IncTick+0x20>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	461a      	mov	r2, r3
 80028d6:	4b06      	ldr	r3, [pc, #24]	@ (80028f0 <HAL_IncTick+0x24>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4413      	add	r3, r2
 80028dc:	4a04      	ldr	r2, [pc, #16]	@ (80028f0 <HAL_IncTick+0x24>)
 80028de:	6013      	str	r3, [r2, #0]
}
 80028e0:	bf00      	nop
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	2000000c 	.word	0x2000000c
 80028f0:	20000aec 	.word	0x20000aec

080028f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  return uwTick;
 80028f8:	4b03      	ldr	r3, [pc, #12]	@ (8002908 <HAL_GetTick+0x14>)
 80028fa:	681b      	ldr	r3, [r3, #0]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	20000aec 	.word	0x20000aec

0800290c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800291c:	4b0c      	ldr	r3, [pc, #48]	@ (8002950 <__NVIC_SetPriorityGrouping+0x44>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002928:	4013      	ands	r3, r2
 800292a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002934:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002938:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800293c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800293e:	4a04      	ldr	r2, [pc, #16]	@ (8002950 <__NVIC_SetPriorityGrouping+0x44>)
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	60d3      	str	r3, [r2, #12]
}
 8002944:	bf00      	nop
 8002946:	3714      	adds	r7, #20
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	e000ed00 	.word	0xe000ed00

08002954 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002958:	4b04      	ldr	r3, [pc, #16]	@ (800296c <__NVIC_GetPriorityGrouping+0x18>)
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	0a1b      	lsrs	r3, r3, #8
 800295e:	f003 0307 	and.w	r3, r3, #7
}
 8002962:	4618      	mov	r0, r3
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	e000ed00 	.word	0xe000ed00

08002970 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	4603      	mov	r3, r0
 8002978:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800297a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297e:	2b00      	cmp	r3, #0
 8002980:	db0b      	blt.n	800299a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002982:	79fb      	ldrb	r3, [r7, #7]
 8002984:	f003 021f 	and.w	r2, r3, #31
 8002988:	4907      	ldr	r1, [pc, #28]	@ (80029a8 <__NVIC_EnableIRQ+0x38>)
 800298a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298e:	095b      	lsrs	r3, r3, #5
 8002990:	2001      	movs	r0, #1
 8002992:	fa00 f202 	lsl.w	r2, r0, r2
 8002996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	e000e100 	.word	0xe000e100

080029ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4603      	mov	r3, r0
 80029b4:	6039      	str	r1, [r7, #0]
 80029b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	db0a      	blt.n	80029d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	b2da      	uxtb	r2, r3
 80029c4:	490c      	ldr	r1, [pc, #48]	@ (80029f8 <__NVIC_SetPriority+0x4c>)
 80029c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ca:	0112      	lsls	r2, r2, #4
 80029cc:	b2d2      	uxtb	r2, r2
 80029ce:	440b      	add	r3, r1
 80029d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029d4:	e00a      	b.n	80029ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	b2da      	uxtb	r2, r3
 80029da:	4908      	ldr	r1, [pc, #32]	@ (80029fc <__NVIC_SetPriority+0x50>)
 80029dc:	79fb      	ldrb	r3, [r7, #7]
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	3b04      	subs	r3, #4
 80029e4:	0112      	lsls	r2, r2, #4
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	440b      	add	r3, r1
 80029ea:	761a      	strb	r2, [r3, #24]
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	e000e100 	.word	0xe000e100
 80029fc:	e000ed00 	.word	0xe000ed00

08002a00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b089      	sub	sp, #36	@ 0x24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	f1c3 0307 	rsb	r3, r3, #7
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	bf28      	it	cs
 8002a1e:	2304      	movcs	r3, #4
 8002a20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	3304      	adds	r3, #4
 8002a26:	2b06      	cmp	r3, #6
 8002a28:	d902      	bls.n	8002a30 <NVIC_EncodePriority+0x30>
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	3b03      	subs	r3, #3
 8002a2e:	e000      	b.n	8002a32 <NVIC_EncodePriority+0x32>
 8002a30:	2300      	movs	r3, #0
 8002a32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	43da      	mvns	r2, r3
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	401a      	ands	r2, r3
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a48:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a52:	43d9      	mvns	r1, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a58:	4313      	orrs	r3, r2
         );
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3724      	adds	r7, #36	@ 0x24
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr

08002a66 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b082      	sub	sp, #8
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7ff ff4c 	bl	800290c <__NVIC_SetPriorityGrouping>
}
 8002a74:	bf00      	nop
 8002a76:	3708      	adds	r7, #8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	4603      	mov	r3, r0
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
 8002a88:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a8e:	f7ff ff61 	bl	8002954 <__NVIC_GetPriorityGrouping>
 8002a92:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	68b9      	ldr	r1, [r7, #8]
 8002a98:	6978      	ldr	r0, [r7, #20]
 8002a9a:	f7ff ffb1 	bl	8002a00 <NVIC_EncodePriority>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aa4:	4611      	mov	r1, r2
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7ff ff80 	bl	80029ac <__NVIC_SetPriority>
}
 8002aac:	bf00      	nop
 8002aae:	3718      	adds	r7, #24
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	4603      	mov	r3, r0
 8002abc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff ff54 	bl	8002970 <__NVIC_EnableIRQ>
}
 8002ac8:	bf00      	nop
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b089      	sub	sp, #36	@ 0x24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ada:	2300      	movs	r3, #0
 8002adc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61fb      	str	r3, [r7, #28]
 8002aea:	e165      	b.n	8002db8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002aec:	2201      	movs	r2, #1
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	4013      	ands	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	f040 8154 	bne.w	8002db2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d005      	beq.n	8002b22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d130      	bne.n	8002b84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	2203      	movs	r2, #3
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	43db      	mvns	r3, r3
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	4013      	ands	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	68da      	ldr	r2, [r3, #12]
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	fa02 f303 	lsl.w	r3, r2, r3
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b58:	2201      	movs	r2, #1
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	43db      	mvns	r3, r3
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	4013      	ands	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	091b      	lsrs	r3, r3, #4
 8002b6e:	f003 0201 	and.w	r2, r3, #1
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f003 0303 	and.w	r3, r3, #3
 8002b8c:	2b03      	cmp	r3, #3
 8002b8e:	d017      	beq.n	8002bc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	2203      	movs	r2, #3
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f003 0303 	and.w	r3, r3, #3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d123      	bne.n	8002c14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	08da      	lsrs	r2, r3, #3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3208      	adds	r2, #8
 8002bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	220f      	movs	r2, #15
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	43db      	mvns	r3, r3
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	4013      	ands	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	691a      	ldr	r2, [r3, #16]
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	08da      	lsrs	r2, r3, #3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	3208      	adds	r2, #8
 8002c0e:	69b9      	ldr	r1, [r7, #24]
 8002c10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	2203      	movs	r2, #3
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	43db      	mvns	r3, r3
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f003 0203 	and.w	r2, r3, #3
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 80ae 	beq.w	8002db2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c56:	2300      	movs	r3, #0
 8002c58:	60fb      	str	r3, [r7, #12]
 8002c5a:	4b5d      	ldr	r3, [pc, #372]	@ (8002dd0 <HAL_GPIO_Init+0x300>)
 8002c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c5e:	4a5c      	ldr	r2, [pc, #368]	@ (8002dd0 <HAL_GPIO_Init+0x300>)
 8002c60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c64:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c66:	4b5a      	ldr	r3, [pc, #360]	@ (8002dd0 <HAL_GPIO_Init+0x300>)
 8002c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c72:	4a58      	ldr	r2, [pc, #352]	@ (8002dd4 <HAL_GPIO_Init+0x304>)
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	089b      	lsrs	r3, r3, #2
 8002c78:	3302      	adds	r3, #2
 8002c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	f003 0303 	and.w	r3, r3, #3
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	220f      	movs	r2, #15
 8002c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8e:	43db      	mvns	r3, r3
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	4013      	ands	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a4f      	ldr	r2, [pc, #316]	@ (8002dd8 <HAL_GPIO_Init+0x308>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d025      	beq.n	8002cea <HAL_GPIO_Init+0x21a>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a4e      	ldr	r2, [pc, #312]	@ (8002ddc <HAL_GPIO_Init+0x30c>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d01f      	beq.n	8002ce6 <HAL_GPIO_Init+0x216>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a4d      	ldr	r2, [pc, #308]	@ (8002de0 <HAL_GPIO_Init+0x310>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d019      	beq.n	8002ce2 <HAL_GPIO_Init+0x212>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a4c      	ldr	r2, [pc, #304]	@ (8002de4 <HAL_GPIO_Init+0x314>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d013      	beq.n	8002cde <HAL_GPIO_Init+0x20e>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a4b      	ldr	r2, [pc, #300]	@ (8002de8 <HAL_GPIO_Init+0x318>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d00d      	beq.n	8002cda <HAL_GPIO_Init+0x20a>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a4a      	ldr	r2, [pc, #296]	@ (8002dec <HAL_GPIO_Init+0x31c>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d007      	beq.n	8002cd6 <HAL_GPIO_Init+0x206>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a49      	ldr	r2, [pc, #292]	@ (8002df0 <HAL_GPIO_Init+0x320>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d101      	bne.n	8002cd2 <HAL_GPIO_Init+0x202>
 8002cce:	2306      	movs	r3, #6
 8002cd0:	e00c      	b.n	8002cec <HAL_GPIO_Init+0x21c>
 8002cd2:	2307      	movs	r3, #7
 8002cd4:	e00a      	b.n	8002cec <HAL_GPIO_Init+0x21c>
 8002cd6:	2305      	movs	r3, #5
 8002cd8:	e008      	b.n	8002cec <HAL_GPIO_Init+0x21c>
 8002cda:	2304      	movs	r3, #4
 8002cdc:	e006      	b.n	8002cec <HAL_GPIO_Init+0x21c>
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e004      	b.n	8002cec <HAL_GPIO_Init+0x21c>
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	e002      	b.n	8002cec <HAL_GPIO_Init+0x21c>
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e000      	b.n	8002cec <HAL_GPIO_Init+0x21c>
 8002cea:	2300      	movs	r3, #0
 8002cec:	69fa      	ldr	r2, [r7, #28]
 8002cee:	f002 0203 	and.w	r2, r2, #3
 8002cf2:	0092      	lsls	r2, r2, #2
 8002cf4:	4093      	lsls	r3, r2
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cfc:	4935      	ldr	r1, [pc, #212]	@ (8002dd4 <HAL_GPIO_Init+0x304>)
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	089b      	lsrs	r3, r3, #2
 8002d02:	3302      	adds	r3, #2
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d0a:	4b3a      	ldr	r3, [pc, #232]	@ (8002df4 <HAL_GPIO_Init+0x324>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	43db      	mvns	r3, r3
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	4013      	ands	r3, r2
 8002d18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d2e:	4a31      	ldr	r2, [pc, #196]	@ (8002df4 <HAL_GPIO_Init+0x324>)
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d34:	4b2f      	ldr	r3, [pc, #188]	@ (8002df4 <HAL_GPIO_Init+0x324>)
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	4013      	ands	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d003      	beq.n	8002d58 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d58:	4a26      	ldr	r2, [pc, #152]	@ (8002df4 <HAL_GPIO_Init+0x324>)
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d5e:	4b25      	ldr	r3, [pc, #148]	@ (8002df4 <HAL_GPIO_Init+0x324>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	43db      	mvns	r3, r3
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d82:	4a1c      	ldr	r2, [pc, #112]	@ (8002df4 <HAL_GPIO_Init+0x324>)
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d88:	4b1a      	ldr	r3, [pc, #104]	@ (8002df4 <HAL_GPIO_Init+0x324>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	43db      	mvns	r3, r3
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	4013      	ands	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d003      	beq.n	8002dac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dac:	4a11      	ldr	r2, [pc, #68]	@ (8002df4 <HAL_GPIO_Init+0x324>)
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	3301      	adds	r3, #1
 8002db6:	61fb      	str	r3, [r7, #28]
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	2b0f      	cmp	r3, #15
 8002dbc:	f67f ae96 	bls.w	8002aec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dc0:	bf00      	nop
 8002dc2:	bf00      	nop
 8002dc4:	3724      	adds	r7, #36	@ 0x24
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	40023800 	.word	0x40023800
 8002dd4:	40013800 	.word	0x40013800
 8002dd8:	40020000 	.word	0x40020000
 8002ddc:	40020400 	.word	0x40020400
 8002de0:	40020800 	.word	0x40020800
 8002de4:	40020c00 	.word	0x40020c00
 8002de8:	40021000 	.word	0x40021000
 8002dec:	40021400 	.word	0x40021400
 8002df0:	40021800 	.word	0x40021800
 8002df4:	40013c00 	.word	0x40013c00

08002df8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	460b      	mov	r3, r1
 8002e02:	807b      	strh	r3, [r7, #2]
 8002e04:	4613      	mov	r3, r2
 8002e06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e08:	787b      	ldrb	r3, [r7, #1]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e0e:	887a      	ldrh	r2, [r7, #2]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e14:	e003      	b.n	8002e1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e16:	887b      	ldrh	r3, [r7, #2]
 8002e18:	041a      	lsls	r2, r3, #16
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	619a      	str	r2, [r3, #24]
}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
	...

08002e2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002e36:	4b08      	ldr	r3, [pc, #32]	@ (8002e58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e38:	695a      	ldr	r2, [r3, #20]
 8002e3a:	88fb      	ldrh	r3, [r7, #6]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d006      	beq.n	8002e50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e42:	4a05      	ldr	r2, [pc, #20]	@ (8002e58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e44:	88fb      	ldrh	r3, [r7, #6]
 8002e46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e48:	88fb      	ldrh	r3, [r7, #6]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7fe fe74 	bl	8001b38 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e50:	bf00      	nop
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40013c00 	.word	0x40013c00

08002e5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e12b      	b.n	80030c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d106      	bne.n	8002e88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f7ff fada 	bl	800243c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2224      	movs	r2, #36	@ 0x24
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0201 	bic.w	r2, r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002eae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ebe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ec0:	f001 fa10 	bl	80042e4 <HAL_RCC_GetPCLK1Freq>
 8002ec4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	4a81      	ldr	r2, [pc, #516]	@ (80030d0 <HAL_I2C_Init+0x274>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d807      	bhi.n	8002ee0 <HAL_I2C_Init+0x84>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	4a80      	ldr	r2, [pc, #512]	@ (80030d4 <HAL_I2C_Init+0x278>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	bf94      	ite	ls
 8002ed8:	2301      	movls	r3, #1
 8002eda:	2300      	movhi	r3, #0
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	e006      	b.n	8002eee <HAL_I2C_Init+0x92>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	4a7d      	ldr	r2, [pc, #500]	@ (80030d8 <HAL_I2C_Init+0x27c>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	bf94      	ite	ls
 8002ee8:	2301      	movls	r3, #1
 8002eea:	2300      	movhi	r3, #0
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e0e7      	b.n	80030c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	4a78      	ldr	r2, [pc, #480]	@ (80030dc <HAL_I2C_Init+0x280>)
 8002efa:	fba2 2303 	umull	r2, r3, r2, r3
 8002efe:	0c9b      	lsrs	r3, r3, #18
 8002f00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	4a6a      	ldr	r2, [pc, #424]	@ (80030d0 <HAL_I2C_Init+0x274>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d802      	bhi.n	8002f30 <HAL_I2C_Init+0xd4>
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	e009      	b.n	8002f44 <HAL_I2C_Init+0xe8>
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002f36:	fb02 f303 	mul.w	r3, r2, r3
 8002f3a:	4a69      	ldr	r2, [pc, #420]	@ (80030e0 <HAL_I2C_Init+0x284>)
 8002f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f40:	099b      	lsrs	r3, r3, #6
 8002f42:	3301      	adds	r3, #1
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6812      	ldr	r2, [r2, #0]
 8002f48:	430b      	orrs	r3, r1
 8002f4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002f56:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	495c      	ldr	r1, [pc, #368]	@ (80030d0 <HAL_I2C_Init+0x274>)
 8002f60:	428b      	cmp	r3, r1
 8002f62:	d819      	bhi.n	8002f98 <HAL_I2C_Init+0x13c>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	1e59      	subs	r1, r3, #1
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f72:	1c59      	adds	r1, r3, #1
 8002f74:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002f78:	400b      	ands	r3, r1
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00a      	beq.n	8002f94 <HAL_I2C_Init+0x138>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	1e59      	subs	r1, r3, #1
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f92:	e051      	b.n	8003038 <HAL_I2C_Init+0x1dc>
 8002f94:	2304      	movs	r3, #4
 8002f96:	e04f      	b.n	8003038 <HAL_I2C_Init+0x1dc>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d111      	bne.n	8002fc4 <HAL_I2C_Init+0x168>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	1e58      	subs	r0, r3, #1
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6859      	ldr	r1, [r3, #4]
 8002fa8:	460b      	mov	r3, r1
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	440b      	add	r3, r1
 8002fae:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	bf0c      	ite	eq
 8002fbc:	2301      	moveq	r3, #1
 8002fbe:	2300      	movne	r3, #0
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	e012      	b.n	8002fea <HAL_I2C_Init+0x18e>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	1e58      	subs	r0, r3, #1
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6859      	ldr	r1, [r3, #4]
 8002fcc:	460b      	mov	r3, r1
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	440b      	add	r3, r1
 8002fd2:	0099      	lsls	r1, r3, #2
 8002fd4:	440b      	add	r3, r1
 8002fd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fda:	3301      	adds	r3, #1
 8002fdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	bf0c      	ite	eq
 8002fe4:	2301      	moveq	r3, #1
 8002fe6:	2300      	movne	r3, #0
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <HAL_I2C_Init+0x196>
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e022      	b.n	8003038 <HAL_I2C_Init+0x1dc>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10e      	bne.n	8003018 <HAL_I2C_Init+0x1bc>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	1e58      	subs	r0, r3, #1
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6859      	ldr	r1, [r3, #4]
 8003002:	460b      	mov	r3, r1
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	440b      	add	r3, r1
 8003008:	fbb0 f3f3 	udiv	r3, r0, r3
 800300c:	3301      	adds	r3, #1
 800300e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003012:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003016:	e00f      	b.n	8003038 <HAL_I2C_Init+0x1dc>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	1e58      	subs	r0, r3, #1
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6859      	ldr	r1, [r3, #4]
 8003020:	460b      	mov	r3, r1
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	0099      	lsls	r1, r3, #2
 8003028:	440b      	add	r3, r1
 800302a:	fbb0 f3f3 	udiv	r3, r0, r3
 800302e:	3301      	adds	r3, #1
 8003030:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003034:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003038:	6879      	ldr	r1, [r7, #4]
 800303a:	6809      	ldr	r1, [r1, #0]
 800303c:	4313      	orrs	r3, r2
 800303e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	69da      	ldr	r2, [r3, #28]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	431a      	orrs	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	430a      	orrs	r2, r1
 800305a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003066:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6911      	ldr	r1, [r2, #16]
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	68d2      	ldr	r2, [r2, #12]
 8003072:	4311      	orrs	r1, r2
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	6812      	ldr	r2, [r2, #0]
 8003078:	430b      	orrs	r3, r1
 800307a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	695a      	ldr	r2, [r3, #20]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	430a      	orrs	r2, r1
 8003096:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 0201 	orr.w	r2, r2, #1
 80030a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2220      	movs	r2, #32
 80030b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	000186a0 	.word	0x000186a0
 80030d4:	001e847f 	.word	0x001e847f
 80030d8:	003d08ff 	.word	0x003d08ff
 80030dc:	431bde83 	.word	0x431bde83
 80030e0:	10624dd3 	.word	0x10624dd3

080030e4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b088      	sub	sp, #32
 80030e8:	af02      	add	r7, sp, #8
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	4608      	mov	r0, r1
 80030ee:	4611      	mov	r1, r2
 80030f0:	461a      	mov	r2, r3
 80030f2:	4603      	mov	r3, r0
 80030f4:	817b      	strh	r3, [r7, #10]
 80030f6:	460b      	mov	r3, r1
 80030f8:	813b      	strh	r3, [r7, #8]
 80030fa:	4613      	mov	r3, r2
 80030fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030fe:	f7ff fbf9 	bl	80028f4 <HAL_GetTick>
 8003102:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b20      	cmp	r3, #32
 800310e:	f040 80d9 	bne.w	80032c4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	2319      	movs	r3, #25
 8003118:	2201      	movs	r2, #1
 800311a:	496d      	ldr	r1, [pc, #436]	@ (80032d0 <HAL_I2C_Mem_Write+0x1ec>)
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f000 fdb9 	bl	8003c94 <I2C_WaitOnFlagUntilTimeout>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003128:	2302      	movs	r3, #2
 800312a:	e0cc      	b.n	80032c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003132:	2b01      	cmp	r3, #1
 8003134:	d101      	bne.n	800313a <HAL_I2C_Mem_Write+0x56>
 8003136:	2302      	movs	r3, #2
 8003138:	e0c5      	b.n	80032c6 <HAL_I2C_Mem_Write+0x1e2>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	2b01      	cmp	r3, #1
 800314e:	d007      	beq.n	8003160 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f042 0201 	orr.w	r2, r2, #1
 800315e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800316e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2221      	movs	r2, #33	@ 0x21
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2240      	movs	r2, #64	@ 0x40
 800317c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6a3a      	ldr	r2, [r7, #32]
 800318a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003190:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003196:	b29a      	uxth	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	4a4d      	ldr	r2, [pc, #308]	@ (80032d4 <HAL_I2C_Mem_Write+0x1f0>)
 80031a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031a2:	88f8      	ldrh	r0, [r7, #6]
 80031a4:	893a      	ldrh	r2, [r7, #8]
 80031a6:	8979      	ldrh	r1, [r7, #10]
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	9301      	str	r3, [sp, #4]
 80031ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	4603      	mov	r3, r0
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f000 fbf0 	bl	8003998 <I2C_RequestMemoryWrite>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d052      	beq.n	8003264 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e081      	b.n	80032c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031c2:	697a      	ldr	r2, [r7, #20]
 80031c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f000 fe7e 	bl	8003ec8 <I2C_WaitOnTXEFlagUntilTimeout>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00d      	beq.n	80031ee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	d107      	bne.n	80031ea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e06b      	b.n	80032c6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f2:	781a      	ldrb	r2, [r3, #0]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fe:	1c5a      	adds	r2, r3, #1
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003208:	3b01      	subs	r3, #1
 800320a:	b29a      	uxth	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003214:	b29b      	uxth	r3, r3
 8003216:	3b01      	subs	r3, #1
 8003218:	b29a      	uxth	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	695b      	ldr	r3, [r3, #20]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b04      	cmp	r3, #4
 800322a:	d11b      	bne.n	8003264 <HAL_I2C_Mem_Write+0x180>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003230:	2b00      	cmp	r3, #0
 8003232:	d017      	beq.n	8003264 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003238:	781a      	ldrb	r2, [r3, #0]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003244:	1c5a      	adds	r2, r3, #1
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800324e:	3b01      	subs	r3, #1
 8003250:	b29a      	uxth	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800325a:	b29b      	uxth	r3, r3
 800325c:	3b01      	subs	r3, #1
 800325e:	b29a      	uxth	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1aa      	bne.n	80031c2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 fe71 	bl	8003f58 <I2C_WaitOnBTFFlagUntilTimeout>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00d      	beq.n	8003298 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003280:	2b04      	cmp	r3, #4
 8003282:	d107      	bne.n	8003294 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003292:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e016      	b.n	80032c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2220      	movs	r2, #32
 80032ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80032c0:	2300      	movs	r3, #0
 80032c2:	e000      	b.n	80032c6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80032c4:	2302      	movs	r3, #2
  }
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3718      	adds	r7, #24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	00100002 	.word	0x00100002
 80032d4:	ffff0000 	.word	0xffff0000

080032d8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b08c      	sub	sp, #48	@ 0x30
 80032dc:	af02      	add	r7, sp, #8
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	4608      	mov	r0, r1
 80032e2:	4611      	mov	r1, r2
 80032e4:	461a      	mov	r2, r3
 80032e6:	4603      	mov	r3, r0
 80032e8:	817b      	strh	r3, [r7, #10]
 80032ea:	460b      	mov	r3, r1
 80032ec:	813b      	strh	r3, [r7, #8]
 80032ee:	4613      	mov	r3, r2
 80032f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032f2:	f7ff faff 	bl	80028f4 <HAL_GetTick>
 80032f6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b20      	cmp	r3, #32
 8003302:	f040 8214 	bne.w	800372e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003308:	9300      	str	r3, [sp, #0]
 800330a:	2319      	movs	r3, #25
 800330c:	2201      	movs	r2, #1
 800330e:	497b      	ldr	r1, [pc, #492]	@ (80034fc <HAL_I2C_Mem_Read+0x224>)
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f000 fcbf 	bl	8003c94 <I2C_WaitOnFlagUntilTimeout>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800331c:	2302      	movs	r3, #2
 800331e:	e207      	b.n	8003730 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003326:	2b01      	cmp	r3, #1
 8003328:	d101      	bne.n	800332e <HAL_I2C_Mem_Read+0x56>
 800332a:	2302      	movs	r3, #2
 800332c:	e200      	b.n	8003730 <HAL_I2C_Mem_Read+0x458>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2201      	movs	r2, #1
 8003332:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	2b01      	cmp	r3, #1
 8003342:	d007      	beq.n	8003354 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f042 0201 	orr.w	r2, r2, #1
 8003352:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003362:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2222      	movs	r2, #34	@ 0x22
 8003368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2240      	movs	r2, #64	@ 0x40
 8003370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800337e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003384:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800338a:	b29a      	uxth	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	4a5b      	ldr	r2, [pc, #364]	@ (8003500 <HAL_I2C_Mem_Read+0x228>)
 8003394:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003396:	88f8      	ldrh	r0, [r7, #6]
 8003398:	893a      	ldrh	r2, [r7, #8]
 800339a:	8979      	ldrh	r1, [r7, #10]
 800339c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800339e:	9301      	str	r3, [sp, #4]
 80033a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	4603      	mov	r3, r0
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 fb8c 	bl	8003ac4 <I2C_RequestMemoryRead>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e1bc      	b.n	8003730 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d113      	bne.n	80033e6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033be:	2300      	movs	r3, #0
 80033c0:	623b      	str	r3, [r7, #32]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	623b      	str	r3, [r7, #32]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	623b      	str	r3, [r7, #32]
 80033d2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	e190      	b.n	8003708 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d11b      	bne.n	8003426 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033fe:	2300      	movs	r3, #0
 8003400:	61fb      	str	r3, [r7, #28]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	61fb      	str	r3, [r7, #28]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	61fb      	str	r3, [r7, #28]
 8003412:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	e170      	b.n	8003708 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800342a:	2b02      	cmp	r3, #2
 800342c:	d11b      	bne.n	8003466 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800343c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800344c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800344e:	2300      	movs	r3, #0
 8003450:	61bb      	str	r3, [r7, #24]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	61bb      	str	r3, [r7, #24]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	61bb      	str	r3, [r7, #24]
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	e150      	b.n	8003708 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003466:	2300      	movs	r3, #0
 8003468:	617b      	str	r3, [r7, #20]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	695b      	ldr	r3, [r3, #20]
 8003470:	617b      	str	r3, [r7, #20]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	617b      	str	r3, [r7, #20]
 800347a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800347c:	e144      	b.n	8003708 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003482:	2b03      	cmp	r3, #3
 8003484:	f200 80f1 	bhi.w	800366a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800348c:	2b01      	cmp	r3, #1
 800348e:	d123      	bne.n	80034d8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003490:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003492:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f000 fda7 	bl	8003fe8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d001      	beq.n	80034a4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e145      	b.n	8003730 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	691a      	ldr	r2, [r3, #16]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ae:	b2d2      	uxtb	r2, r2
 80034b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b6:	1c5a      	adds	r2, r3, #1
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034c0:	3b01      	subs	r3, #1
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	3b01      	subs	r3, #1
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80034d6:	e117      	b.n	8003708 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d14e      	bne.n	800357e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034e6:	2200      	movs	r2, #0
 80034e8:	4906      	ldr	r1, [pc, #24]	@ (8003504 <HAL_I2C_Mem_Read+0x22c>)
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f000 fbd2 	bl	8003c94 <I2C_WaitOnFlagUntilTimeout>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d008      	beq.n	8003508 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e11a      	b.n	8003730 <HAL_I2C_Mem_Read+0x458>
 80034fa:	bf00      	nop
 80034fc:	00100002 	.word	0x00100002
 8003500:	ffff0000 	.word	0xffff0000
 8003504:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003516:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	691a      	ldr	r2, [r3, #16]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003522:	b2d2      	uxtb	r2, r2
 8003524:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352a:	1c5a      	adds	r2, r3, #1
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003534:	3b01      	subs	r3, #1
 8003536:	b29a      	uxth	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003540:	b29b      	uxth	r3, r3
 8003542:	3b01      	subs	r3, #1
 8003544:	b29a      	uxth	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	691a      	ldr	r2, [r3, #16]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003554:	b2d2      	uxtb	r2, r2
 8003556:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355c:	1c5a      	adds	r2, r3, #1
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003566:	3b01      	subs	r3, #1
 8003568:	b29a      	uxth	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003572:	b29b      	uxth	r3, r3
 8003574:	3b01      	subs	r3, #1
 8003576:	b29a      	uxth	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800357c:	e0c4      	b.n	8003708 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800357e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003584:	2200      	movs	r2, #0
 8003586:	496c      	ldr	r1, [pc, #432]	@ (8003738 <HAL_I2C_Mem_Read+0x460>)
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 fb83 	bl	8003c94 <I2C_WaitOnFlagUntilTimeout>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d001      	beq.n	8003598 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e0cb      	b.n	8003730 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	691a      	ldr	r2, [r3, #16]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b2:	b2d2      	uxtb	r2, r2
 80035b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ba:	1c5a      	adds	r2, r3, #1
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035c4:	3b01      	subs	r3, #1
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	3b01      	subs	r3, #1
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035dc:	9300      	str	r3, [sp, #0]
 80035de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035e0:	2200      	movs	r2, #0
 80035e2:	4955      	ldr	r1, [pc, #340]	@ (8003738 <HAL_I2C_Mem_Read+0x460>)
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 fb55 	bl	8003c94 <I2C_WaitOnFlagUntilTimeout>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e09d      	b.n	8003730 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003602:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	691a      	ldr	r2, [r3, #16]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360e:	b2d2      	uxtb	r2, r2
 8003610:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003616:	1c5a      	adds	r2, r3, #1
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003620:	3b01      	subs	r3, #1
 8003622:	b29a      	uxth	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800362c:	b29b      	uxth	r3, r3
 800362e:	3b01      	subs	r3, #1
 8003630:	b29a      	uxth	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	691a      	ldr	r2, [r3, #16]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003640:	b2d2      	uxtb	r2, r2
 8003642:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003648:	1c5a      	adds	r2, r3, #1
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003652:	3b01      	subs	r3, #1
 8003654:	b29a      	uxth	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800365e:	b29b      	uxth	r3, r3
 8003660:	3b01      	subs	r3, #1
 8003662:	b29a      	uxth	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003668:	e04e      	b.n	8003708 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800366a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800366c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f000 fcba 	bl	8003fe8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e058      	b.n	8003730 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	691a      	ldr	r2, [r3, #16]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003688:	b2d2      	uxtb	r2, r2
 800368a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003690:	1c5a      	adds	r2, r3, #1
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800369a:	3b01      	subs	r3, #1
 800369c:	b29a      	uxth	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	3b01      	subs	r3, #1
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	f003 0304 	and.w	r3, r3, #4
 80036ba:	2b04      	cmp	r3, #4
 80036bc:	d124      	bne.n	8003708 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036c2:	2b03      	cmp	r3, #3
 80036c4:	d107      	bne.n	80036d6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036d4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	691a      	ldr	r2, [r3, #16]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e0:	b2d2      	uxtb	r2, r2
 80036e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e8:	1c5a      	adds	r2, r3, #1
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036f2:	3b01      	subs	r3, #1
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036fe:	b29b      	uxth	r3, r3
 8003700:	3b01      	subs	r3, #1
 8003702:	b29a      	uxth	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800370c:	2b00      	cmp	r3, #0
 800370e:	f47f aeb6 	bne.w	800347e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2220      	movs	r2, #32
 8003716:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800372a:	2300      	movs	r3, #0
 800372c:	e000      	b.n	8003730 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800372e:	2302      	movs	r3, #2
  }
}
 8003730:	4618      	mov	r0, r3
 8003732:	3728      	adds	r7, #40	@ 0x28
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	00010004 	.word	0x00010004

0800373c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b08a      	sub	sp, #40	@ 0x28
 8003740:	af02      	add	r7, sp, #8
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	607a      	str	r2, [r7, #4]
 8003746:	603b      	str	r3, [r7, #0]
 8003748:	460b      	mov	r3, r1
 800374a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800374c:	f7ff f8d2 	bl	80028f4 <HAL_GetTick>
 8003750:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003752:	2300      	movs	r3, #0
 8003754:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b20      	cmp	r3, #32
 8003760:	f040 8111 	bne.w	8003986 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	2319      	movs	r3, #25
 800376a:	2201      	movs	r2, #1
 800376c:	4988      	ldr	r1, [pc, #544]	@ (8003990 <HAL_I2C_IsDeviceReady+0x254>)
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	f000 fa90 	bl	8003c94 <I2C_WaitOnFlagUntilTimeout>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800377a:	2302      	movs	r3, #2
 800377c:	e104      	b.n	8003988 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003784:	2b01      	cmp	r3, #1
 8003786:	d101      	bne.n	800378c <HAL_I2C_IsDeviceReady+0x50>
 8003788:	2302      	movs	r3, #2
 800378a:	e0fd      	b.n	8003988 <HAL_I2C_IsDeviceReady+0x24c>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d007      	beq.n	80037b2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f042 0201 	orr.w	r2, r2, #1
 80037b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2224      	movs	r2, #36	@ 0x24
 80037c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4a70      	ldr	r2, [pc, #448]	@ (8003994 <HAL_I2C_IsDeviceReady+0x258>)
 80037d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037e4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	9300      	str	r3, [sp, #0]
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f000 fa4e 	bl	8003c94 <I2C_WaitOnFlagUntilTimeout>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00d      	beq.n	800381a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003808:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800380c:	d103      	bne.n	8003816 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003814:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e0b6      	b.n	8003988 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800381a:	897b      	ldrh	r3, [r7, #10]
 800381c:	b2db      	uxtb	r3, r3
 800381e:	461a      	mov	r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003828:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800382a:	f7ff f863 	bl	80028f4 <HAL_GetTick>
 800382e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b02      	cmp	r3, #2
 800383c:	bf0c      	ite	eq
 800383e:	2301      	moveq	r3, #1
 8003840:	2300      	movne	r3, #0
 8003842:	b2db      	uxtb	r3, r3
 8003844:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003850:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003854:	bf0c      	ite	eq
 8003856:	2301      	moveq	r3, #1
 8003858:	2300      	movne	r3, #0
 800385a:	b2db      	uxtb	r3, r3
 800385c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800385e:	e025      	b.n	80038ac <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003860:	f7ff f848 	bl	80028f4 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	429a      	cmp	r2, r3
 800386e:	d302      	bcc.n	8003876 <HAL_I2C_IsDeviceReady+0x13a>
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d103      	bne.n	800387e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	22a0      	movs	r2, #160	@ 0xa0
 800387a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	f003 0302 	and.w	r3, r3, #2
 8003888:	2b02      	cmp	r3, #2
 800388a:	bf0c      	ite	eq
 800388c:	2301      	moveq	r3, #1
 800388e:	2300      	movne	r3, #0
 8003890:	b2db      	uxtb	r3, r3
 8003892:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800389e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038a2:	bf0c      	ite	eq
 80038a4:	2301      	moveq	r3, #1
 80038a6:	2300      	movne	r3, #0
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2ba0      	cmp	r3, #160	@ 0xa0
 80038b6:	d005      	beq.n	80038c4 <HAL_I2C_IsDeviceReady+0x188>
 80038b8:	7dfb      	ldrb	r3, [r7, #23]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d102      	bne.n	80038c4 <HAL_I2C_IsDeviceReady+0x188>
 80038be:	7dbb      	ldrb	r3, [r7, #22]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0cd      	beq.n	8003860 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2220      	movs	r2, #32
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d129      	bne.n	800392e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038e8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ea:	2300      	movs	r3, #0
 80038ec:	613b      	str	r3, [r7, #16]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	613b      	str	r3, [r7, #16]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	613b      	str	r3, [r7, #16]
 80038fe:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	9300      	str	r3, [sp, #0]
 8003904:	2319      	movs	r3, #25
 8003906:	2201      	movs	r2, #1
 8003908:	4921      	ldr	r1, [pc, #132]	@ (8003990 <HAL_I2C_IsDeviceReady+0x254>)
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f000 f9c2 	bl	8003c94 <I2C_WaitOnFlagUntilTimeout>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e036      	b.n	8003988 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2220      	movs	r2, #32
 800391e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800392a:	2300      	movs	r3, #0
 800392c:	e02c      	b.n	8003988 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800393c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003946:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	2319      	movs	r3, #25
 800394e:	2201      	movs	r2, #1
 8003950:	490f      	ldr	r1, [pc, #60]	@ (8003990 <HAL_I2C_IsDeviceReady+0x254>)
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f000 f99e 	bl	8003c94 <I2C_WaitOnFlagUntilTimeout>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e012      	b.n	8003988 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	3301      	adds	r3, #1
 8003966:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	429a      	cmp	r2, r3
 800396e:	f4ff af32 	bcc.w	80037d6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2220      	movs	r2, #32
 8003976:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e000      	b.n	8003988 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003986:	2302      	movs	r3, #2
  }
}
 8003988:	4618      	mov	r0, r3
 800398a:	3720      	adds	r7, #32
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	00100002 	.word	0x00100002
 8003994:	ffff0000 	.word	0xffff0000

08003998 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b088      	sub	sp, #32
 800399c:	af02      	add	r7, sp, #8
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	4608      	mov	r0, r1
 80039a2:	4611      	mov	r1, r2
 80039a4:	461a      	mov	r2, r3
 80039a6:	4603      	mov	r3, r0
 80039a8:	817b      	strh	r3, [r7, #10]
 80039aa:	460b      	mov	r3, r1
 80039ac:	813b      	strh	r3, [r7, #8]
 80039ae:	4613      	mov	r3, r2
 80039b0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c4:	9300      	str	r3, [sp, #0]
 80039c6:	6a3b      	ldr	r3, [r7, #32]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	f000 f960 	bl	8003c94 <I2C_WaitOnFlagUntilTimeout>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00d      	beq.n	80039f6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039e8:	d103      	bne.n	80039f2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039f0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e05f      	b.n	8003ab6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039f6:	897b      	ldrh	r3, [r7, #10]
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	461a      	mov	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a04:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a08:	6a3a      	ldr	r2, [r7, #32]
 8003a0a:	492d      	ldr	r1, [pc, #180]	@ (8003ac0 <I2C_RequestMemoryWrite+0x128>)
 8003a0c:	68f8      	ldr	r0, [r7, #12]
 8003a0e:	f000 f9bb 	bl	8003d88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e04c      	b.n	8003ab6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	617b      	str	r3, [r7, #20]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	617b      	str	r3, [r7, #20]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	617b      	str	r3, [r7, #20]
 8003a30:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a34:	6a39      	ldr	r1, [r7, #32]
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f000 fa46 	bl	8003ec8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00d      	beq.n	8003a5e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a46:	2b04      	cmp	r3, #4
 8003a48:	d107      	bne.n	8003a5a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a58:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e02b      	b.n	8003ab6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a5e:	88fb      	ldrh	r3, [r7, #6]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d105      	bne.n	8003a70 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a64:	893b      	ldrh	r3, [r7, #8]
 8003a66:	b2da      	uxtb	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	611a      	str	r2, [r3, #16]
 8003a6e:	e021      	b.n	8003ab4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a70:	893b      	ldrh	r3, [r7, #8]
 8003a72:	0a1b      	lsrs	r3, r3, #8
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	b2da      	uxtb	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a80:	6a39      	ldr	r1, [r7, #32]
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f000 fa20 	bl	8003ec8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00d      	beq.n	8003aaa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a92:	2b04      	cmp	r3, #4
 8003a94:	d107      	bne.n	8003aa6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003aa4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e005      	b.n	8003ab6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003aaa:	893b      	ldrh	r3, [r7, #8]
 8003aac:	b2da      	uxtb	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3718      	adds	r7, #24
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	00010002 	.word	0x00010002

08003ac4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b088      	sub	sp, #32
 8003ac8:	af02      	add	r7, sp, #8
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	4608      	mov	r0, r1
 8003ace:	4611      	mov	r1, r2
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	817b      	strh	r3, [r7, #10]
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	813b      	strh	r3, [r7, #8]
 8003ada:	4613      	mov	r3, r2
 8003adc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003aec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003afc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	6a3b      	ldr	r3, [r7, #32]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	f000 f8c2 	bl	8003c94 <I2C_WaitOnFlagUntilTimeout>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00d      	beq.n	8003b32 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b24:	d103      	bne.n	8003b2e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b2c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e0aa      	b.n	8003c88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b32:	897b      	ldrh	r3, [r7, #10]
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	461a      	mov	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003b40:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b44:	6a3a      	ldr	r2, [r7, #32]
 8003b46:	4952      	ldr	r1, [pc, #328]	@ (8003c90 <I2C_RequestMemoryRead+0x1cc>)
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	f000 f91d 	bl	8003d88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d001      	beq.n	8003b58 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e097      	b.n	8003c88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b58:	2300      	movs	r3, #0
 8003b5a:	617b      	str	r3, [r7, #20]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	617b      	str	r3, [r7, #20]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	617b      	str	r3, [r7, #20]
 8003b6c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b70:	6a39      	ldr	r1, [r7, #32]
 8003b72:	68f8      	ldr	r0, [r7, #12]
 8003b74:	f000 f9a8 	bl	8003ec8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00d      	beq.n	8003b9a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b82:	2b04      	cmp	r3, #4
 8003b84:	d107      	bne.n	8003b96 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b94:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e076      	b.n	8003c88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b9a:	88fb      	ldrh	r3, [r7, #6]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d105      	bne.n	8003bac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ba0:	893b      	ldrh	r3, [r7, #8]
 8003ba2:	b2da      	uxtb	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	611a      	str	r2, [r3, #16]
 8003baa:	e021      	b.n	8003bf0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003bac:	893b      	ldrh	r3, [r7, #8]
 8003bae:	0a1b      	lsrs	r3, r3, #8
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	b2da      	uxtb	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bbc:	6a39      	ldr	r1, [r7, #32]
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f000 f982 	bl	8003ec8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00d      	beq.n	8003be6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	d107      	bne.n	8003be2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003be0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e050      	b.n	8003c88 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003be6:	893b      	ldrh	r3, [r7, #8]
 8003be8:	b2da      	uxtb	r2, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bf2:	6a39      	ldr	r1, [r7, #32]
 8003bf4:	68f8      	ldr	r0, [r7, #12]
 8003bf6:	f000 f967 	bl	8003ec8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00d      	beq.n	8003c1c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c04:	2b04      	cmp	r3, #4
 8003c06:	d107      	bne.n	8003c18 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c16:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e035      	b.n	8003c88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c2a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2e:	9300      	str	r3, [sp, #0]
 8003c30:	6a3b      	ldr	r3, [r7, #32]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f000 f82b 	bl	8003c94 <I2C_WaitOnFlagUntilTimeout>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00d      	beq.n	8003c60 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c52:	d103      	bne.n	8003c5c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c5a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e013      	b.n	8003c88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003c60:	897b      	ldrh	r3, [r7, #10]
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	f043 0301 	orr.w	r3, r3, #1
 8003c68:	b2da      	uxtb	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c72:	6a3a      	ldr	r2, [r7, #32]
 8003c74:	4906      	ldr	r1, [pc, #24]	@ (8003c90 <I2C_RequestMemoryRead+0x1cc>)
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f000 f886 	bl	8003d88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e000      	b.n	8003c88 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3718      	adds	r7, #24
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	00010002 	.word	0x00010002

08003c94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	603b      	str	r3, [r7, #0]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ca4:	e048      	b.n	8003d38 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003cac:	d044      	beq.n	8003d38 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cae:	f7fe fe21 	bl	80028f4 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d302      	bcc.n	8003cc4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d139      	bne.n	8003d38 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	0c1b      	lsrs	r3, r3, #16
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d10d      	bne.n	8003cea <I2C_WaitOnFlagUntilTimeout+0x56>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	43da      	mvns	r2, r3
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	4013      	ands	r3, r2
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	bf0c      	ite	eq
 8003ce0:	2301      	moveq	r3, #1
 8003ce2:	2300      	movne	r3, #0
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	e00c      	b.n	8003d04 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	43da      	mvns	r2, r3
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	bf0c      	ite	eq
 8003cfc:	2301      	moveq	r3, #1
 8003cfe:	2300      	movne	r3, #0
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	461a      	mov	r2, r3
 8003d04:	79fb      	ldrb	r3, [r7, #7]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d116      	bne.n	8003d38 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2220      	movs	r2, #32
 8003d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d24:	f043 0220 	orr.w	r2, r3, #32
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e023      	b.n	8003d80 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	0c1b      	lsrs	r3, r3, #16
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d10d      	bne.n	8003d5e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	43da      	mvns	r2, r3
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	bf0c      	ite	eq
 8003d54:	2301      	moveq	r3, #1
 8003d56:	2300      	movne	r3, #0
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	e00c      	b.n	8003d78 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	43da      	mvns	r2, r3
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	bf0c      	ite	eq
 8003d70:	2301      	moveq	r3, #1
 8003d72:	2300      	movne	r3, #0
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	461a      	mov	r2, r3
 8003d78:	79fb      	ldrb	r3, [r7, #7]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d093      	beq.n	8003ca6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
 8003d94:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d96:	e071      	b.n	8003e7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003da2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003da6:	d123      	bne.n	8003df0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003db6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003dc0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2220      	movs	r2, #32
 8003dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ddc:	f043 0204 	orr.w	r2, r3, #4
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e067      	b.n	8003ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003df6:	d041      	beq.n	8003e7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003df8:	f7fe fd7c 	bl	80028f4 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d302      	bcc.n	8003e0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d136      	bne.n	8003e7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	0c1b      	lsrs	r3, r3, #16
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d10c      	bne.n	8003e32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	43da      	mvns	r2, r3
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	4013      	ands	r3, r2
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	bf14      	ite	ne
 8003e2a:	2301      	movne	r3, #1
 8003e2c:	2300      	moveq	r3, #0
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	e00b      	b.n	8003e4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	43da      	mvns	r2, r3
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	bf14      	ite	ne
 8003e44:	2301      	movne	r3, #1
 8003e46:	2300      	moveq	r3, #0
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d016      	beq.n	8003e7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2220      	movs	r2, #32
 8003e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e68:	f043 0220 	orr.w	r2, r3, #32
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e021      	b.n	8003ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	0c1b      	lsrs	r3, r3, #16
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d10c      	bne.n	8003ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	43da      	mvns	r2, r3
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	4013      	ands	r3, r2
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	bf14      	ite	ne
 8003e98:	2301      	movne	r3, #1
 8003e9a:	2300      	moveq	r3, #0
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	e00b      	b.n	8003eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	43da      	mvns	r2, r3
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	bf14      	ite	ne
 8003eb2:	2301      	movne	r3, #1
 8003eb4:	2300      	moveq	r3, #0
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f47f af6d 	bne.w	8003d98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3710      	adds	r7, #16
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ed4:	e034      	b.n	8003f40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 f8e3 	bl	80040a2 <I2C_IsAcknowledgeFailed>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e034      	b.n	8003f50 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003eec:	d028      	beq.n	8003f40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eee:	f7fe fd01 	bl	80028f4 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	68ba      	ldr	r2, [r7, #8]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d302      	bcc.n	8003f04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d11d      	bne.n	8003f40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f0e:	2b80      	cmp	r3, #128	@ 0x80
 8003f10:	d016      	beq.n	8003f40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2c:	f043 0220 	orr.w	r2, r3, #32
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e007      	b.n	8003f50 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f4a:	2b80      	cmp	r3, #128	@ 0x80
 8003f4c:	d1c3      	bne.n	8003ed6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f64:	e034      	b.n	8003fd0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f000 f89b 	bl	80040a2 <I2C_IsAcknowledgeFailed>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e034      	b.n	8003fe0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f7c:	d028      	beq.n	8003fd0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f7e:	f7fe fcb9 	bl	80028f4 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	68ba      	ldr	r2, [r7, #8]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d302      	bcc.n	8003f94 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d11d      	bne.n	8003fd0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	f003 0304 	and.w	r3, r3, #4
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	d016      	beq.n	8003fd0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2220      	movs	r2, #32
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fbc:	f043 0220 	orr.w	r2, r3, #32
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e007      	b.n	8003fe0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	f003 0304 	and.w	r3, r3, #4
 8003fda:	2b04      	cmp	r3, #4
 8003fdc:	d1c3      	bne.n	8003f66 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ff4:	e049      	b.n	800408a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	f003 0310 	and.w	r3, r3, #16
 8004000:	2b10      	cmp	r3, #16
 8004002:	d119      	bne.n	8004038 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f06f 0210 	mvn.w	r2, #16
 800400c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2220      	movs	r2, #32
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e030      	b.n	800409a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004038:	f7fe fc5c 	bl	80028f4 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	68ba      	ldr	r2, [r7, #8]
 8004044:	429a      	cmp	r2, r3
 8004046:	d302      	bcc.n	800404e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d11d      	bne.n	800408a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	695b      	ldr	r3, [r3, #20]
 8004054:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004058:	2b40      	cmp	r3, #64	@ 0x40
 800405a:	d016      	beq.n	800408a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2220      	movs	r2, #32
 8004066:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004076:	f043 0220 	orr.w	r2, r3, #32
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e007      	b.n	800409a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004094:	2b40      	cmp	r3, #64	@ 0x40
 8004096:	d1ae      	bne.n	8003ff6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80040a2:	b480      	push	{r7}
 80040a4:	b083      	sub	sp, #12
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040b8:	d11b      	bne.n	80040f2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80040c2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2220      	movs	r2, #32
 80040ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040de:	f043 0204 	orr.w	r2, r3, #4
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e000      	b.n	80040f4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d101      	bne.n	8004114 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e0cc      	b.n	80042ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004114:	4b68      	ldr	r3, [pc, #416]	@ (80042b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 030f 	and.w	r3, r3, #15
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	429a      	cmp	r2, r3
 8004120:	d90c      	bls.n	800413c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004122:	4b65      	ldr	r3, [pc, #404]	@ (80042b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	b2d2      	uxtb	r2, r2
 8004128:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800412a:	4b63      	ldr	r3, [pc, #396]	@ (80042b8 <HAL_RCC_ClockConfig+0x1b8>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 030f 	and.w	r3, r3, #15
 8004132:	683a      	ldr	r2, [r7, #0]
 8004134:	429a      	cmp	r2, r3
 8004136:	d001      	beq.n	800413c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e0b8      	b.n	80042ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d020      	beq.n	800418a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0304 	and.w	r3, r3, #4
 8004150:	2b00      	cmp	r3, #0
 8004152:	d005      	beq.n	8004160 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004154:	4b59      	ldr	r3, [pc, #356]	@ (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	4a58      	ldr	r2, [pc, #352]	@ (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 800415a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800415e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0308 	and.w	r3, r3, #8
 8004168:	2b00      	cmp	r3, #0
 800416a:	d005      	beq.n	8004178 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800416c:	4b53      	ldr	r3, [pc, #332]	@ (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	4a52      	ldr	r2, [pc, #328]	@ (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 8004172:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004176:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004178:	4b50      	ldr	r3, [pc, #320]	@ (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	494d      	ldr	r1, [pc, #308]	@ (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 8004186:	4313      	orrs	r3, r2
 8004188:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	d044      	beq.n	8004220 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d107      	bne.n	80041ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800419e:	4b47      	ldr	r3, [pc, #284]	@ (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d119      	bne.n	80041de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e07f      	b.n	80042ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d003      	beq.n	80041be <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041ba:	2b03      	cmp	r3, #3
 80041bc:	d107      	bne.n	80041ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041be:	4b3f      	ldr	r3, [pc, #252]	@ (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d109      	bne.n	80041de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e06f      	b.n	80042ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ce:	4b3b      	ldr	r3, [pc, #236]	@ (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e067      	b.n	80042ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041de:	4b37      	ldr	r3, [pc, #220]	@ (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f023 0203 	bic.w	r2, r3, #3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	4934      	ldr	r1, [pc, #208]	@ (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041f0:	f7fe fb80 	bl	80028f4 <HAL_GetTick>
 80041f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041f6:	e00a      	b.n	800420e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041f8:	f7fe fb7c 	bl	80028f4 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004206:	4293      	cmp	r3, r2
 8004208:	d901      	bls.n	800420e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e04f      	b.n	80042ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800420e:	4b2b      	ldr	r3, [pc, #172]	@ (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f003 020c 	and.w	r2, r3, #12
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	429a      	cmp	r2, r3
 800421e:	d1eb      	bne.n	80041f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004220:	4b25      	ldr	r3, [pc, #148]	@ (80042b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 030f 	and.w	r3, r3, #15
 8004228:	683a      	ldr	r2, [r7, #0]
 800422a:	429a      	cmp	r2, r3
 800422c:	d20c      	bcs.n	8004248 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800422e:	4b22      	ldr	r3, [pc, #136]	@ (80042b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	b2d2      	uxtb	r2, r2
 8004234:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004236:	4b20      	ldr	r3, [pc, #128]	@ (80042b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 030f 	and.w	r3, r3, #15
 800423e:	683a      	ldr	r2, [r7, #0]
 8004240:	429a      	cmp	r2, r3
 8004242:	d001      	beq.n	8004248 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e032      	b.n	80042ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0304 	and.w	r3, r3, #4
 8004250:	2b00      	cmp	r3, #0
 8004252:	d008      	beq.n	8004266 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004254:	4b19      	ldr	r3, [pc, #100]	@ (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	4916      	ldr	r1, [pc, #88]	@ (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 8004262:	4313      	orrs	r3, r2
 8004264:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0308 	and.w	r3, r3, #8
 800426e:	2b00      	cmp	r3, #0
 8004270:	d009      	beq.n	8004286 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004272:	4b12      	ldr	r3, [pc, #72]	@ (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	490e      	ldr	r1, [pc, #56]	@ (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 8004282:	4313      	orrs	r3, r2
 8004284:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004286:	f000 f887 	bl	8004398 <HAL_RCC_GetSysClockFreq>
 800428a:	4602      	mov	r2, r0
 800428c:	4b0b      	ldr	r3, [pc, #44]	@ (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	091b      	lsrs	r3, r3, #4
 8004292:	f003 030f 	and.w	r3, r3, #15
 8004296:	490a      	ldr	r1, [pc, #40]	@ (80042c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004298:	5ccb      	ldrb	r3, [r1, r3]
 800429a:	fa22 f303 	lsr.w	r3, r2, r3
 800429e:	4a09      	ldr	r2, [pc, #36]	@ (80042c4 <HAL_RCC_ClockConfig+0x1c4>)
 80042a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80042a2:	4b09      	ldr	r3, [pc, #36]	@ (80042c8 <HAL_RCC_ClockConfig+0x1c8>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7fe f9d4 	bl	8002654 <HAL_InitTick>

  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	40023c00 	.word	0x40023c00
 80042bc:	40023800 	.word	0x40023800
 80042c0:	0800a97c 	.word	0x0800a97c
 80042c4:	20000004 	.word	0x20000004
 80042c8:	20000008 	.word	0x20000008

080042cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042cc:	b480      	push	{r7}
 80042ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042d0:	4b03      	ldr	r3, [pc, #12]	@ (80042e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80042d2:	681b      	ldr	r3, [r3, #0]
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	20000004 	.word	0x20000004

080042e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042e8:	f7ff fff0 	bl	80042cc <HAL_RCC_GetHCLKFreq>
 80042ec:	4602      	mov	r2, r0
 80042ee:	4b05      	ldr	r3, [pc, #20]	@ (8004304 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	0a9b      	lsrs	r3, r3, #10
 80042f4:	f003 0307 	and.w	r3, r3, #7
 80042f8:	4903      	ldr	r1, [pc, #12]	@ (8004308 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042fa:	5ccb      	ldrb	r3, [r1, r3]
 80042fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004300:	4618      	mov	r0, r3
 8004302:	bd80      	pop	{r7, pc}
 8004304:	40023800 	.word	0x40023800
 8004308:	0800a98c 	.word	0x0800a98c

0800430c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004310:	f7ff ffdc 	bl	80042cc <HAL_RCC_GetHCLKFreq>
 8004314:	4602      	mov	r2, r0
 8004316:	4b05      	ldr	r3, [pc, #20]	@ (800432c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	0b5b      	lsrs	r3, r3, #13
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	4903      	ldr	r1, [pc, #12]	@ (8004330 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004322:	5ccb      	ldrb	r3, [r1, r3]
 8004324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004328:	4618      	mov	r0, r3
 800432a:	bd80      	pop	{r7, pc}
 800432c:	40023800 	.word	0x40023800
 8004330:	0800a98c 	.word	0x0800a98c

08004334 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	220f      	movs	r2, #15
 8004342:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004344:	4b12      	ldr	r3, [pc, #72]	@ (8004390 <HAL_RCC_GetClockConfig+0x5c>)
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f003 0203 	and.w	r2, r3, #3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004350:	4b0f      	ldr	r3, [pc, #60]	@ (8004390 <HAL_RCC_GetClockConfig+0x5c>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800435c:	4b0c      	ldr	r3, [pc, #48]	@ (8004390 <HAL_RCC_GetClockConfig+0x5c>)
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004368:	4b09      	ldr	r3, [pc, #36]	@ (8004390 <HAL_RCC_GetClockConfig+0x5c>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	08db      	lsrs	r3, r3, #3
 800436e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004376:	4b07      	ldr	r3, [pc, #28]	@ (8004394 <HAL_RCC_GetClockConfig+0x60>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 020f 	and.w	r2, r3, #15
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	601a      	str	r2, [r3, #0]
}
 8004382:	bf00      	nop
 8004384:	370c      	adds	r7, #12
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	40023800 	.word	0x40023800
 8004394:	40023c00 	.word	0x40023c00

08004398 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004398:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800439c:	b0ae      	sub	sp, #184	@ 0xb8
 800439e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80043a0:	2300      	movs	r3, #0
 80043a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80043a6:	2300      	movs	r3, #0
 80043a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80043ac:	2300      	movs	r3, #0
 80043ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80043b2:	2300      	movs	r3, #0
 80043b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80043b8:	2300      	movs	r3, #0
 80043ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043be:	4bcb      	ldr	r3, [pc, #812]	@ (80046ec <HAL_RCC_GetSysClockFreq+0x354>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 030c 	and.w	r3, r3, #12
 80043c6:	2b0c      	cmp	r3, #12
 80043c8:	f200 8206 	bhi.w	80047d8 <HAL_RCC_GetSysClockFreq+0x440>
 80043cc:	a201      	add	r2, pc, #4	@ (adr r2, 80043d4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80043ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d2:	bf00      	nop
 80043d4:	08004409 	.word	0x08004409
 80043d8:	080047d9 	.word	0x080047d9
 80043dc:	080047d9 	.word	0x080047d9
 80043e0:	080047d9 	.word	0x080047d9
 80043e4:	08004411 	.word	0x08004411
 80043e8:	080047d9 	.word	0x080047d9
 80043ec:	080047d9 	.word	0x080047d9
 80043f0:	080047d9 	.word	0x080047d9
 80043f4:	08004419 	.word	0x08004419
 80043f8:	080047d9 	.word	0x080047d9
 80043fc:	080047d9 	.word	0x080047d9
 8004400:	080047d9 	.word	0x080047d9
 8004404:	08004609 	.word	0x08004609
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004408:	4bb9      	ldr	r3, [pc, #740]	@ (80046f0 <HAL_RCC_GetSysClockFreq+0x358>)
 800440a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800440e:	e1e7      	b.n	80047e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004410:	4bb8      	ldr	r3, [pc, #736]	@ (80046f4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004412:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004416:	e1e3      	b.n	80047e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004418:	4bb4      	ldr	r3, [pc, #720]	@ (80046ec <HAL_RCC_GetSysClockFreq+0x354>)
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004420:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004424:	4bb1      	ldr	r3, [pc, #708]	@ (80046ec <HAL_RCC_GetSysClockFreq+0x354>)
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d071      	beq.n	8004514 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004430:	4bae      	ldr	r3, [pc, #696]	@ (80046ec <HAL_RCC_GetSysClockFreq+0x354>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	099b      	lsrs	r3, r3, #6
 8004436:	2200      	movs	r2, #0
 8004438:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800443c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004440:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004444:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004448:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800444c:	2300      	movs	r3, #0
 800444e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004452:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004456:	4622      	mov	r2, r4
 8004458:	462b      	mov	r3, r5
 800445a:	f04f 0000 	mov.w	r0, #0
 800445e:	f04f 0100 	mov.w	r1, #0
 8004462:	0159      	lsls	r1, r3, #5
 8004464:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004468:	0150      	lsls	r0, r2, #5
 800446a:	4602      	mov	r2, r0
 800446c:	460b      	mov	r3, r1
 800446e:	4621      	mov	r1, r4
 8004470:	1a51      	subs	r1, r2, r1
 8004472:	6439      	str	r1, [r7, #64]	@ 0x40
 8004474:	4629      	mov	r1, r5
 8004476:	eb63 0301 	sbc.w	r3, r3, r1
 800447a:	647b      	str	r3, [r7, #68]	@ 0x44
 800447c:	f04f 0200 	mov.w	r2, #0
 8004480:	f04f 0300 	mov.w	r3, #0
 8004484:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004488:	4649      	mov	r1, r9
 800448a:	018b      	lsls	r3, r1, #6
 800448c:	4641      	mov	r1, r8
 800448e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004492:	4641      	mov	r1, r8
 8004494:	018a      	lsls	r2, r1, #6
 8004496:	4641      	mov	r1, r8
 8004498:	1a51      	subs	r1, r2, r1
 800449a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800449c:	4649      	mov	r1, r9
 800449e:	eb63 0301 	sbc.w	r3, r3, r1
 80044a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044a4:	f04f 0200 	mov.w	r2, #0
 80044a8:	f04f 0300 	mov.w	r3, #0
 80044ac:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80044b0:	4649      	mov	r1, r9
 80044b2:	00cb      	lsls	r3, r1, #3
 80044b4:	4641      	mov	r1, r8
 80044b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044ba:	4641      	mov	r1, r8
 80044bc:	00ca      	lsls	r2, r1, #3
 80044be:	4610      	mov	r0, r2
 80044c0:	4619      	mov	r1, r3
 80044c2:	4603      	mov	r3, r0
 80044c4:	4622      	mov	r2, r4
 80044c6:	189b      	adds	r3, r3, r2
 80044c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80044ca:	462b      	mov	r3, r5
 80044cc:	460a      	mov	r2, r1
 80044ce:	eb42 0303 	adc.w	r3, r2, r3
 80044d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80044d4:	f04f 0200 	mov.w	r2, #0
 80044d8:	f04f 0300 	mov.w	r3, #0
 80044dc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80044e0:	4629      	mov	r1, r5
 80044e2:	024b      	lsls	r3, r1, #9
 80044e4:	4621      	mov	r1, r4
 80044e6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80044ea:	4621      	mov	r1, r4
 80044ec:	024a      	lsls	r2, r1, #9
 80044ee:	4610      	mov	r0, r2
 80044f0:	4619      	mov	r1, r3
 80044f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80044f6:	2200      	movs	r2, #0
 80044f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80044fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004500:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004504:	f7fc fba2 	bl	8000c4c <__aeabi_uldivmod>
 8004508:	4602      	mov	r2, r0
 800450a:	460b      	mov	r3, r1
 800450c:	4613      	mov	r3, r2
 800450e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004512:	e067      	b.n	80045e4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004514:	4b75      	ldr	r3, [pc, #468]	@ (80046ec <HAL_RCC_GetSysClockFreq+0x354>)
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	099b      	lsrs	r3, r3, #6
 800451a:	2200      	movs	r2, #0
 800451c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004520:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004524:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004528:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800452c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800452e:	2300      	movs	r3, #0
 8004530:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004532:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004536:	4622      	mov	r2, r4
 8004538:	462b      	mov	r3, r5
 800453a:	f04f 0000 	mov.w	r0, #0
 800453e:	f04f 0100 	mov.w	r1, #0
 8004542:	0159      	lsls	r1, r3, #5
 8004544:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004548:	0150      	lsls	r0, r2, #5
 800454a:	4602      	mov	r2, r0
 800454c:	460b      	mov	r3, r1
 800454e:	4621      	mov	r1, r4
 8004550:	1a51      	subs	r1, r2, r1
 8004552:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004554:	4629      	mov	r1, r5
 8004556:	eb63 0301 	sbc.w	r3, r3, r1
 800455a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800455c:	f04f 0200 	mov.w	r2, #0
 8004560:	f04f 0300 	mov.w	r3, #0
 8004564:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004568:	4649      	mov	r1, r9
 800456a:	018b      	lsls	r3, r1, #6
 800456c:	4641      	mov	r1, r8
 800456e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004572:	4641      	mov	r1, r8
 8004574:	018a      	lsls	r2, r1, #6
 8004576:	4641      	mov	r1, r8
 8004578:	ebb2 0a01 	subs.w	sl, r2, r1
 800457c:	4649      	mov	r1, r9
 800457e:	eb63 0b01 	sbc.w	fp, r3, r1
 8004582:	f04f 0200 	mov.w	r2, #0
 8004586:	f04f 0300 	mov.w	r3, #0
 800458a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800458e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004592:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004596:	4692      	mov	sl, r2
 8004598:	469b      	mov	fp, r3
 800459a:	4623      	mov	r3, r4
 800459c:	eb1a 0303 	adds.w	r3, sl, r3
 80045a0:	623b      	str	r3, [r7, #32]
 80045a2:	462b      	mov	r3, r5
 80045a4:	eb4b 0303 	adc.w	r3, fp, r3
 80045a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80045aa:	f04f 0200 	mov.w	r2, #0
 80045ae:	f04f 0300 	mov.w	r3, #0
 80045b2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80045b6:	4629      	mov	r1, r5
 80045b8:	028b      	lsls	r3, r1, #10
 80045ba:	4621      	mov	r1, r4
 80045bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045c0:	4621      	mov	r1, r4
 80045c2:	028a      	lsls	r2, r1, #10
 80045c4:	4610      	mov	r0, r2
 80045c6:	4619      	mov	r1, r3
 80045c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80045cc:	2200      	movs	r2, #0
 80045ce:	673b      	str	r3, [r7, #112]	@ 0x70
 80045d0:	677a      	str	r2, [r7, #116]	@ 0x74
 80045d2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80045d6:	f7fc fb39 	bl	8000c4c <__aeabi_uldivmod>
 80045da:	4602      	mov	r2, r0
 80045dc:	460b      	mov	r3, r1
 80045de:	4613      	mov	r3, r2
 80045e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80045e4:	4b41      	ldr	r3, [pc, #260]	@ (80046ec <HAL_RCC_GetSysClockFreq+0x354>)
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	0c1b      	lsrs	r3, r3, #16
 80045ea:	f003 0303 	and.w	r3, r3, #3
 80045ee:	3301      	adds	r3, #1
 80045f0:	005b      	lsls	r3, r3, #1
 80045f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80045f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80045fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80045fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004602:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004606:	e0eb      	b.n	80047e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004608:	4b38      	ldr	r3, [pc, #224]	@ (80046ec <HAL_RCC_GetSysClockFreq+0x354>)
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004610:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004614:	4b35      	ldr	r3, [pc, #212]	@ (80046ec <HAL_RCC_GetSysClockFreq+0x354>)
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d06b      	beq.n	80046f8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004620:	4b32      	ldr	r3, [pc, #200]	@ (80046ec <HAL_RCC_GetSysClockFreq+0x354>)
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	099b      	lsrs	r3, r3, #6
 8004626:	2200      	movs	r2, #0
 8004628:	66bb      	str	r3, [r7, #104]	@ 0x68
 800462a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800462c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800462e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004632:	663b      	str	r3, [r7, #96]	@ 0x60
 8004634:	2300      	movs	r3, #0
 8004636:	667b      	str	r3, [r7, #100]	@ 0x64
 8004638:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800463c:	4622      	mov	r2, r4
 800463e:	462b      	mov	r3, r5
 8004640:	f04f 0000 	mov.w	r0, #0
 8004644:	f04f 0100 	mov.w	r1, #0
 8004648:	0159      	lsls	r1, r3, #5
 800464a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800464e:	0150      	lsls	r0, r2, #5
 8004650:	4602      	mov	r2, r0
 8004652:	460b      	mov	r3, r1
 8004654:	4621      	mov	r1, r4
 8004656:	1a51      	subs	r1, r2, r1
 8004658:	61b9      	str	r1, [r7, #24]
 800465a:	4629      	mov	r1, r5
 800465c:	eb63 0301 	sbc.w	r3, r3, r1
 8004660:	61fb      	str	r3, [r7, #28]
 8004662:	f04f 0200 	mov.w	r2, #0
 8004666:	f04f 0300 	mov.w	r3, #0
 800466a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800466e:	4659      	mov	r1, fp
 8004670:	018b      	lsls	r3, r1, #6
 8004672:	4651      	mov	r1, sl
 8004674:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004678:	4651      	mov	r1, sl
 800467a:	018a      	lsls	r2, r1, #6
 800467c:	4651      	mov	r1, sl
 800467e:	ebb2 0801 	subs.w	r8, r2, r1
 8004682:	4659      	mov	r1, fp
 8004684:	eb63 0901 	sbc.w	r9, r3, r1
 8004688:	f04f 0200 	mov.w	r2, #0
 800468c:	f04f 0300 	mov.w	r3, #0
 8004690:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004694:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004698:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800469c:	4690      	mov	r8, r2
 800469e:	4699      	mov	r9, r3
 80046a0:	4623      	mov	r3, r4
 80046a2:	eb18 0303 	adds.w	r3, r8, r3
 80046a6:	613b      	str	r3, [r7, #16]
 80046a8:	462b      	mov	r3, r5
 80046aa:	eb49 0303 	adc.w	r3, r9, r3
 80046ae:	617b      	str	r3, [r7, #20]
 80046b0:	f04f 0200 	mov.w	r2, #0
 80046b4:	f04f 0300 	mov.w	r3, #0
 80046b8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80046bc:	4629      	mov	r1, r5
 80046be:	024b      	lsls	r3, r1, #9
 80046c0:	4621      	mov	r1, r4
 80046c2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80046c6:	4621      	mov	r1, r4
 80046c8:	024a      	lsls	r2, r1, #9
 80046ca:	4610      	mov	r0, r2
 80046cc:	4619      	mov	r1, r3
 80046ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80046d2:	2200      	movs	r2, #0
 80046d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80046d6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80046d8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80046dc:	f7fc fab6 	bl	8000c4c <__aeabi_uldivmod>
 80046e0:	4602      	mov	r2, r0
 80046e2:	460b      	mov	r3, r1
 80046e4:	4613      	mov	r3, r2
 80046e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80046ea:	e065      	b.n	80047b8 <HAL_RCC_GetSysClockFreq+0x420>
 80046ec:	40023800 	.word	0x40023800
 80046f0:	00f42400 	.word	0x00f42400
 80046f4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046f8:	4b3d      	ldr	r3, [pc, #244]	@ (80047f0 <HAL_RCC_GetSysClockFreq+0x458>)
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	099b      	lsrs	r3, r3, #6
 80046fe:	2200      	movs	r2, #0
 8004700:	4618      	mov	r0, r3
 8004702:	4611      	mov	r1, r2
 8004704:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004708:	653b      	str	r3, [r7, #80]	@ 0x50
 800470a:	2300      	movs	r3, #0
 800470c:	657b      	str	r3, [r7, #84]	@ 0x54
 800470e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004712:	4642      	mov	r2, r8
 8004714:	464b      	mov	r3, r9
 8004716:	f04f 0000 	mov.w	r0, #0
 800471a:	f04f 0100 	mov.w	r1, #0
 800471e:	0159      	lsls	r1, r3, #5
 8004720:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004724:	0150      	lsls	r0, r2, #5
 8004726:	4602      	mov	r2, r0
 8004728:	460b      	mov	r3, r1
 800472a:	4641      	mov	r1, r8
 800472c:	1a51      	subs	r1, r2, r1
 800472e:	60b9      	str	r1, [r7, #8]
 8004730:	4649      	mov	r1, r9
 8004732:	eb63 0301 	sbc.w	r3, r3, r1
 8004736:	60fb      	str	r3, [r7, #12]
 8004738:	f04f 0200 	mov.w	r2, #0
 800473c:	f04f 0300 	mov.w	r3, #0
 8004740:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004744:	4659      	mov	r1, fp
 8004746:	018b      	lsls	r3, r1, #6
 8004748:	4651      	mov	r1, sl
 800474a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800474e:	4651      	mov	r1, sl
 8004750:	018a      	lsls	r2, r1, #6
 8004752:	4651      	mov	r1, sl
 8004754:	1a54      	subs	r4, r2, r1
 8004756:	4659      	mov	r1, fp
 8004758:	eb63 0501 	sbc.w	r5, r3, r1
 800475c:	f04f 0200 	mov.w	r2, #0
 8004760:	f04f 0300 	mov.w	r3, #0
 8004764:	00eb      	lsls	r3, r5, #3
 8004766:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800476a:	00e2      	lsls	r2, r4, #3
 800476c:	4614      	mov	r4, r2
 800476e:	461d      	mov	r5, r3
 8004770:	4643      	mov	r3, r8
 8004772:	18e3      	adds	r3, r4, r3
 8004774:	603b      	str	r3, [r7, #0]
 8004776:	464b      	mov	r3, r9
 8004778:	eb45 0303 	adc.w	r3, r5, r3
 800477c:	607b      	str	r3, [r7, #4]
 800477e:	f04f 0200 	mov.w	r2, #0
 8004782:	f04f 0300 	mov.w	r3, #0
 8004786:	e9d7 4500 	ldrd	r4, r5, [r7]
 800478a:	4629      	mov	r1, r5
 800478c:	028b      	lsls	r3, r1, #10
 800478e:	4621      	mov	r1, r4
 8004790:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004794:	4621      	mov	r1, r4
 8004796:	028a      	lsls	r2, r1, #10
 8004798:	4610      	mov	r0, r2
 800479a:	4619      	mov	r1, r3
 800479c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80047a0:	2200      	movs	r2, #0
 80047a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047a4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80047a6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80047aa:	f7fc fa4f 	bl	8000c4c <__aeabi_uldivmod>
 80047ae:	4602      	mov	r2, r0
 80047b0:	460b      	mov	r3, r1
 80047b2:	4613      	mov	r3, r2
 80047b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80047b8:	4b0d      	ldr	r3, [pc, #52]	@ (80047f0 <HAL_RCC_GetSysClockFreq+0x458>)
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	0f1b      	lsrs	r3, r3, #28
 80047be:	f003 0307 	and.w	r3, r3, #7
 80047c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80047c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80047ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80047ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80047d6:	e003      	b.n	80047e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047d8:	4b06      	ldr	r3, [pc, #24]	@ (80047f4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80047da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80047de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	37b8      	adds	r7, #184	@ 0xb8
 80047e8:	46bd      	mov	sp, r7
 80047ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047ee:	bf00      	nop
 80047f0:	40023800 	.word	0x40023800
 80047f4:	00f42400 	.word	0x00f42400

080047f8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d101      	bne.n	800480a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e28d      	b.n	8004d26 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	2b00      	cmp	r3, #0
 8004814:	f000 8083 	beq.w	800491e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004818:	4b94      	ldr	r3, [pc, #592]	@ (8004a6c <HAL_RCC_OscConfig+0x274>)
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f003 030c 	and.w	r3, r3, #12
 8004820:	2b04      	cmp	r3, #4
 8004822:	d019      	beq.n	8004858 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004824:	4b91      	ldr	r3, [pc, #580]	@ (8004a6c <HAL_RCC_OscConfig+0x274>)
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f003 030c 	and.w	r3, r3, #12
        || \
 800482c:	2b08      	cmp	r3, #8
 800482e:	d106      	bne.n	800483e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004830:	4b8e      	ldr	r3, [pc, #568]	@ (8004a6c <HAL_RCC_OscConfig+0x274>)
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004838:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800483c:	d00c      	beq.n	8004858 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800483e:	4b8b      	ldr	r3, [pc, #556]	@ (8004a6c <HAL_RCC_OscConfig+0x274>)
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004846:	2b0c      	cmp	r3, #12
 8004848:	d112      	bne.n	8004870 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800484a:	4b88      	ldr	r3, [pc, #544]	@ (8004a6c <HAL_RCC_OscConfig+0x274>)
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004852:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004856:	d10b      	bne.n	8004870 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004858:	4b84      	ldr	r3, [pc, #528]	@ (8004a6c <HAL_RCC_OscConfig+0x274>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d05b      	beq.n	800491c <HAL_RCC_OscConfig+0x124>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d157      	bne.n	800491c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e25a      	b.n	8004d26 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004878:	d106      	bne.n	8004888 <HAL_RCC_OscConfig+0x90>
 800487a:	4b7c      	ldr	r3, [pc, #496]	@ (8004a6c <HAL_RCC_OscConfig+0x274>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a7b      	ldr	r2, [pc, #492]	@ (8004a6c <HAL_RCC_OscConfig+0x274>)
 8004880:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004884:	6013      	str	r3, [r2, #0]
 8004886:	e01d      	b.n	80048c4 <HAL_RCC_OscConfig+0xcc>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004890:	d10c      	bne.n	80048ac <HAL_RCC_OscConfig+0xb4>
 8004892:	4b76      	ldr	r3, [pc, #472]	@ (8004a6c <HAL_RCC_OscConfig+0x274>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a75      	ldr	r2, [pc, #468]	@ (8004a6c <HAL_RCC_OscConfig+0x274>)
 8004898:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800489c:	6013      	str	r3, [r2, #0]
 800489e:	4b73      	ldr	r3, [pc, #460]	@ (8004a6c <HAL_RCC_OscConfig+0x274>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a72      	ldr	r2, [pc, #456]	@ (8004a6c <HAL_RCC_OscConfig+0x274>)
 80048a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048a8:	6013      	str	r3, [r2, #0]
 80048aa:	e00b      	b.n	80048c4 <HAL_RCC_OscConfig+0xcc>
 80048ac:	4b6f      	ldr	r3, [pc, #444]	@ (8004a6c <HAL_RCC_OscConfig+0x274>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a6e      	ldr	r2, [pc, #440]	@ (8004a6c <HAL_RCC_OscConfig+0x274>)
 80048b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048b6:	6013      	str	r3, [r2, #0]
 80048b8:	4b6c      	ldr	r3, [pc, #432]	@ (8004a6c <HAL_RCC_OscConfig+0x274>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a6b      	ldr	r2, [pc, #428]	@ (8004a6c <HAL_RCC_OscConfig+0x274>)
 80048be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d013      	beq.n	80048f4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048cc:	f7fe f812 	bl	80028f4 <HAL_GetTick>
 80048d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048d2:	e008      	b.n	80048e6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048d4:	f7fe f80e 	bl	80028f4 <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b64      	cmp	r3, #100	@ 0x64
 80048e0:	d901      	bls.n	80048e6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e21f      	b.n	8004d26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048e6:	4b61      	ldr	r3, [pc, #388]	@ (8004a6c <HAL_RCC_OscConfig+0x274>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d0f0      	beq.n	80048d4 <HAL_RCC_OscConfig+0xdc>
 80048f2:	e014      	b.n	800491e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f4:	f7fd fffe 	bl	80028f4 <HAL_GetTick>
 80048f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048fa:	e008      	b.n	800490e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048fc:	f7fd fffa 	bl	80028f4 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	2b64      	cmp	r3, #100	@ 0x64
 8004908:	d901      	bls.n	800490e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e20b      	b.n	8004d26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800490e:	4b57      	ldr	r3, [pc, #348]	@ (8004a6c <HAL_RCC_OscConfig+0x274>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1f0      	bne.n	80048fc <HAL_RCC_OscConfig+0x104>
 800491a:	e000      	b.n	800491e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800491c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	2b00      	cmp	r3, #0
 8004928:	d06f      	beq.n	8004a0a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800492a:	4b50      	ldr	r3, [pc, #320]	@ (8004a6c <HAL_RCC_OscConfig+0x274>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f003 030c 	and.w	r3, r3, #12
 8004932:	2b00      	cmp	r3, #0
 8004934:	d017      	beq.n	8004966 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004936:	4b4d      	ldr	r3, [pc, #308]	@ (8004a6c <HAL_RCC_OscConfig+0x274>)
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f003 030c 	and.w	r3, r3, #12
        || \
 800493e:	2b08      	cmp	r3, #8
 8004940:	d105      	bne.n	800494e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004942:	4b4a      	ldr	r3, [pc, #296]	@ (8004a6c <HAL_RCC_OscConfig+0x274>)
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00b      	beq.n	8004966 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800494e:	4b47      	ldr	r3, [pc, #284]	@ (8004a6c <HAL_RCC_OscConfig+0x274>)
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004956:	2b0c      	cmp	r3, #12
 8004958:	d11c      	bne.n	8004994 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800495a:	4b44      	ldr	r3, [pc, #272]	@ (8004a6c <HAL_RCC_OscConfig+0x274>)
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d116      	bne.n	8004994 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004966:	4b41      	ldr	r3, [pc, #260]	@ (8004a6c <HAL_RCC_OscConfig+0x274>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d005      	beq.n	800497e <HAL_RCC_OscConfig+0x186>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d001      	beq.n	800497e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e1d3      	b.n	8004d26 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800497e:	4b3b      	ldr	r3, [pc, #236]	@ (8004a6c <HAL_RCC_OscConfig+0x274>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	00db      	lsls	r3, r3, #3
 800498c:	4937      	ldr	r1, [pc, #220]	@ (8004a6c <HAL_RCC_OscConfig+0x274>)
 800498e:	4313      	orrs	r3, r2
 8004990:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004992:	e03a      	b.n	8004a0a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d020      	beq.n	80049de <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800499c:	4b34      	ldr	r3, [pc, #208]	@ (8004a70 <HAL_RCC_OscConfig+0x278>)
 800499e:	2201      	movs	r2, #1
 80049a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a2:	f7fd ffa7 	bl	80028f4 <HAL_GetTick>
 80049a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049a8:	e008      	b.n	80049bc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049aa:	f7fd ffa3 	bl	80028f4 <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d901      	bls.n	80049bc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e1b4      	b.n	8004d26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049bc:	4b2b      	ldr	r3, [pc, #172]	@ (8004a6c <HAL_RCC_OscConfig+0x274>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0302 	and.w	r3, r3, #2
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d0f0      	beq.n	80049aa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049c8:	4b28      	ldr	r3, [pc, #160]	@ (8004a6c <HAL_RCC_OscConfig+0x274>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	00db      	lsls	r3, r3, #3
 80049d6:	4925      	ldr	r1, [pc, #148]	@ (8004a6c <HAL_RCC_OscConfig+0x274>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	600b      	str	r3, [r1, #0]
 80049dc:	e015      	b.n	8004a0a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049de:	4b24      	ldr	r3, [pc, #144]	@ (8004a70 <HAL_RCC_OscConfig+0x278>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e4:	f7fd ff86 	bl	80028f4 <HAL_GetTick>
 80049e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049ea:	e008      	b.n	80049fe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049ec:	f7fd ff82 	bl	80028f4 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e193      	b.n	8004d26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049fe:	4b1b      	ldr	r3, [pc, #108]	@ (8004a6c <HAL_RCC_OscConfig+0x274>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1f0      	bne.n	80049ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0308 	and.w	r3, r3, #8
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d036      	beq.n	8004a84 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d016      	beq.n	8004a4c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a1e:	4b15      	ldr	r3, [pc, #84]	@ (8004a74 <HAL_RCC_OscConfig+0x27c>)
 8004a20:	2201      	movs	r2, #1
 8004a22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a24:	f7fd ff66 	bl	80028f4 <HAL_GetTick>
 8004a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a2a:	e008      	b.n	8004a3e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a2c:	f7fd ff62 	bl	80028f4 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e173      	b.n	8004d26 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8004a6c <HAL_RCC_OscConfig+0x274>)
 8004a40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a42:	f003 0302 	and.w	r3, r3, #2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d0f0      	beq.n	8004a2c <HAL_RCC_OscConfig+0x234>
 8004a4a:	e01b      	b.n	8004a84 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a4c:	4b09      	ldr	r3, [pc, #36]	@ (8004a74 <HAL_RCC_OscConfig+0x27c>)
 8004a4e:	2200      	movs	r2, #0
 8004a50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a52:	f7fd ff4f 	bl	80028f4 <HAL_GetTick>
 8004a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a58:	e00e      	b.n	8004a78 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a5a:	f7fd ff4b 	bl	80028f4 <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d907      	bls.n	8004a78 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e15c      	b.n	8004d26 <HAL_RCC_OscConfig+0x52e>
 8004a6c:	40023800 	.word	0x40023800
 8004a70:	42470000 	.word	0x42470000
 8004a74:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a78:	4b8a      	ldr	r3, [pc, #552]	@ (8004ca4 <HAL_RCC_OscConfig+0x4ac>)
 8004a7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a7c:	f003 0302 	and.w	r3, r3, #2
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d1ea      	bne.n	8004a5a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0304 	and.w	r3, r3, #4
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f000 8097 	beq.w	8004bc0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a92:	2300      	movs	r3, #0
 8004a94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a96:	4b83      	ldr	r3, [pc, #524]	@ (8004ca4 <HAL_RCC_OscConfig+0x4ac>)
 8004a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d10f      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	60bb      	str	r3, [r7, #8]
 8004aa6:	4b7f      	ldr	r3, [pc, #508]	@ (8004ca4 <HAL_RCC_OscConfig+0x4ac>)
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aaa:	4a7e      	ldr	r2, [pc, #504]	@ (8004ca4 <HAL_RCC_OscConfig+0x4ac>)
 8004aac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ab0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ab2:	4b7c      	ldr	r3, [pc, #496]	@ (8004ca4 <HAL_RCC_OscConfig+0x4ac>)
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004aba:	60bb      	str	r3, [r7, #8]
 8004abc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ac2:	4b79      	ldr	r3, [pc, #484]	@ (8004ca8 <HAL_RCC_OscConfig+0x4b0>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d118      	bne.n	8004b00 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ace:	4b76      	ldr	r3, [pc, #472]	@ (8004ca8 <HAL_RCC_OscConfig+0x4b0>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a75      	ldr	r2, [pc, #468]	@ (8004ca8 <HAL_RCC_OscConfig+0x4b0>)
 8004ad4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ad8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ada:	f7fd ff0b 	bl	80028f4 <HAL_GetTick>
 8004ade:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ae0:	e008      	b.n	8004af4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ae2:	f7fd ff07 	bl	80028f4 <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d901      	bls.n	8004af4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e118      	b.n	8004d26 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004af4:	4b6c      	ldr	r3, [pc, #432]	@ (8004ca8 <HAL_RCC_OscConfig+0x4b0>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d0f0      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d106      	bne.n	8004b16 <HAL_RCC_OscConfig+0x31e>
 8004b08:	4b66      	ldr	r3, [pc, #408]	@ (8004ca4 <HAL_RCC_OscConfig+0x4ac>)
 8004b0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b0c:	4a65      	ldr	r2, [pc, #404]	@ (8004ca4 <HAL_RCC_OscConfig+0x4ac>)
 8004b0e:	f043 0301 	orr.w	r3, r3, #1
 8004b12:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b14:	e01c      	b.n	8004b50 <HAL_RCC_OscConfig+0x358>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	2b05      	cmp	r3, #5
 8004b1c:	d10c      	bne.n	8004b38 <HAL_RCC_OscConfig+0x340>
 8004b1e:	4b61      	ldr	r3, [pc, #388]	@ (8004ca4 <HAL_RCC_OscConfig+0x4ac>)
 8004b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b22:	4a60      	ldr	r2, [pc, #384]	@ (8004ca4 <HAL_RCC_OscConfig+0x4ac>)
 8004b24:	f043 0304 	orr.w	r3, r3, #4
 8004b28:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b2a:	4b5e      	ldr	r3, [pc, #376]	@ (8004ca4 <HAL_RCC_OscConfig+0x4ac>)
 8004b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b2e:	4a5d      	ldr	r2, [pc, #372]	@ (8004ca4 <HAL_RCC_OscConfig+0x4ac>)
 8004b30:	f043 0301 	orr.w	r3, r3, #1
 8004b34:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b36:	e00b      	b.n	8004b50 <HAL_RCC_OscConfig+0x358>
 8004b38:	4b5a      	ldr	r3, [pc, #360]	@ (8004ca4 <HAL_RCC_OscConfig+0x4ac>)
 8004b3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b3c:	4a59      	ldr	r2, [pc, #356]	@ (8004ca4 <HAL_RCC_OscConfig+0x4ac>)
 8004b3e:	f023 0301 	bic.w	r3, r3, #1
 8004b42:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b44:	4b57      	ldr	r3, [pc, #348]	@ (8004ca4 <HAL_RCC_OscConfig+0x4ac>)
 8004b46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b48:	4a56      	ldr	r2, [pc, #344]	@ (8004ca4 <HAL_RCC_OscConfig+0x4ac>)
 8004b4a:	f023 0304 	bic.w	r3, r3, #4
 8004b4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d015      	beq.n	8004b84 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b58:	f7fd fecc 	bl	80028f4 <HAL_GetTick>
 8004b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b5e:	e00a      	b.n	8004b76 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b60:	f7fd fec8 	bl	80028f4 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d901      	bls.n	8004b76 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e0d7      	b.n	8004d26 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b76:	4b4b      	ldr	r3, [pc, #300]	@ (8004ca4 <HAL_RCC_OscConfig+0x4ac>)
 8004b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d0ee      	beq.n	8004b60 <HAL_RCC_OscConfig+0x368>
 8004b82:	e014      	b.n	8004bae <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b84:	f7fd feb6 	bl	80028f4 <HAL_GetTick>
 8004b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b8a:	e00a      	b.n	8004ba2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b8c:	f7fd feb2 	bl	80028f4 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e0c1      	b.n	8004d26 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ba2:	4b40      	ldr	r3, [pc, #256]	@ (8004ca4 <HAL_RCC_OscConfig+0x4ac>)
 8004ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1ee      	bne.n	8004b8c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004bae:	7dfb      	ldrb	r3, [r7, #23]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d105      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bb4:	4b3b      	ldr	r3, [pc, #236]	@ (8004ca4 <HAL_RCC_OscConfig+0x4ac>)
 8004bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb8:	4a3a      	ldr	r2, [pc, #232]	@ (8004ca4 <HAL_RCC_OscConfig+0x4ac>)
 8004bba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bbe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f000 80ad 	beq.w	8004d24 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bca:	4b36      	ldr	r3, [pc, #216]	@ (8004ca4 <HAL_RCC_OscConfig+0x4ac>)
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f003 030c 	and.w	r3, r3, #12
 8004bd2:	2b08      	cmp	r3, #8
 8004bd4:	d060      	beq.n	8004c98 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d145      	bne.n	8004c6a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bde:	4b33      	ldr	r3, [pc, #204]	@ (8004cac <HAL_RCC_OscConfig+0x4b4>)
 8004be0:	2200      	movs	r2, #0
 8004be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be4:	f7fd fe86 	bl	80028f4 <HAL_GetTick>
 8004be8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bea:	e008      	b.n	8004bfe <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bec:	f7fd fe82 	bl	80028f4 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e093      	b.n	8004d26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bfe:	4b29      	ldr	r3, [pc, #164]	@ (8004ca4 <HAL_RCC_OscConfig+0x4ac>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1f0      	bne.n	8004bec <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	69da      	ldr	r2, [r3, #28]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	431a      	orrs	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c18:	019b      	lsls	r3, r3, #6
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c20:	085b      	lsrs	r3, r3, #1
 8004c22:	3b01      	subs	r3, #1
 8004c24:	041b      	lsls	r3, r3, #16
 8004c26:	431a      	orrs	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c2c:	061b      	lsls	r3, r3, #24
 8004c2e:	431a      	orrs	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c34:	071b      	lsls	r3, r3, #28
 8004c36:	491b      	ldr	r1, [pc, #108]	@ (8004ca4 <HAL_RCC_OscConfig+0x4ac>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8004cac <HAL_RCC_OscConfig+0x4b4>)
 8004c3e:	2201      	movs	r2, #1
 8004c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c42:	f7fd fe57 	bl	80028f4 <HAL_GetTick>
 8004c46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c48:	e008      	b.n	8004c5c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c4a:	f7fd fe53 	bl	80028f4 <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d901      	bls.n	8004c5c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e064      	b.n	8004d26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c5c:	4b11      	ldr	r3, [pc, #68]	@ (8004ca4 <HAL_RCC_OscConfig+0x4ac>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d0f0      	beq.n	8004c4a <HAL_RCC_OscConfig+0x452>
 8004c68:	e05c      	b.n	8004d24 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c6a:	4b10      	ldr	r3, [pc, #64]	@ (8004cac <HAL_RCC_OscConfig+0x4b4>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c70:	f7fd fe40 	bl	80028f4 <HAL_GetTick>
 8004c74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c76:	e008      	b.n	8004c8a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c78:	f7fd fe3c 	bl	80028f4 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d901      	bls.n	8004c8a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e04d      	b.n	8004d26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c8a:	4b06      	ldr	r3, [pc, #24]	@ (8004ca4 <HAL_RCC_OscConfig+0x4ac>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1f0      	bne.n	8004c78 <HAL_RCC_OscConfig+0x480>
 8004c96:	e045      	b.n	8004d24 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d107      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e040      	b.n	8004d26 <HAL_RCC_OscConfig+0x52e>
 8004ca4:	40023800 	.word	0x40023800
 8004ca8:	40007000 	.word	0x40007000
 8004cac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004cb0:	4b1f      	ldr	r3, [pc, #124]	@ (8004d30 <HAL_RCC_OscConfig+0x538>)
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d030      	beq.n	8004d20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d129      	bne.n	8004d20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d122      	bne.n	8004d20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004ce6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d119      	bne.n	8004d20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cf6:	085b      	lsrs	r3, r3, #1
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d10f      	bne.n	8004d20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d107      	bne.n	8004d20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d1a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d001      	beq.n	8004d24 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e000      	b.n	8004d26 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3718      	adds	r7, #24
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	40023800 	.word	0x40023800

08004d34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e041      	b.n	8004dca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d106      	bne.n	8004d60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f839 	bl	8004dd2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2202      	movs	r2, #2
 8004d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	3304      	adds	r3, #4
 8004d70:	4619      	mov	r1, r3
 8004d72:	4610      	mov	r0, r2
 8004d74:	f000 fb9a 	bl	80054ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3708      	adds	r7, #8
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	b083      	sub	sp, #12
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004dda:	bf00      	nop
 8004ddc:	370c      	adds	r7, #12
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
	...

08004de8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d001      	beq.n	8004e00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e04e      	b.n	8004e9e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2202      	movs	r2, #2
 8004e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68da      	ldr	r2, [r3, #12]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f042 0201 	orr.w	r2, r2, #1
 8004e16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a23      	ldr	r2, [pc, #140]	@ (8004eac <HAL_TIM_Base_Start_IT+0xc4>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d022      	beq.n	8004e68 <HAL_TIM_Base_Start_IT+0x80>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e2a:	d01d      	beq.n	8004e68 <HAL_TIM_Base_Start_IT+0x80>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a1f      	ldr	r2, [pc, #124]	@ (8004eb0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d018      	beq.n	8004e68 <HAL_TIM_Base_Start_IT+0x80>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a1e      	ldr	r2, [pc, #120]	@ (8004eb4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d013      	beq.n	8004e68 <HAL_TIM_Base_Start_IT+0x80>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a1c      	ldr	r2, [pc, #112]	@ (8004eb8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d00e      	beq.n	8004e68 <HAL_TIM_Base_Start_IT+0x80>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a1b      	ldr	r2, [pc, #108]	@ (8004ebc <HAL_TIM_Base_Start_IT+0xd4>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d009      	beq.n	8004e68 <HAL_TIM_Base_Start_IT+0x80>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a19      	ldr	r2, [pc, #100]	@ (8004ec0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d004      	beq.n	8004e68 <HAL_TIM_Base_Start_IT+0x80>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a18      	ldr	r2, [pc, #96]	@ (8004ec4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d111      	bne.n	8004e8c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f003 0307 	and.w	r3, r3, #7
 8004e72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2b06      	cmp	r3, #6
 8004e78:	d010      	beq.n	8004e9c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f042 0201 	orr.w	r2, r2, #1
 8004e88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e8a:	e007      	b.n	8004e9c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f042 0201 	orr.w	r2, r2, #1
 8004e9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3714      	adds	r7, #20
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	40010000 	.word	0x40010000
 8004eb0:	40000400 	.word	0x40000400
 8004eb4:	40000800 	.word	0x40000800
 8004eb8:	40000c00 	.word	0x40000c00
 8004ebc:	40010400 	.word	0x40010400
 8004ec0:	40014000 	.word	0x40014000
 8004ec4:	40001800 	.word	0x40001800

08004ec8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d101      	bne.n	8004eda <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e041      	b.n	8004f5e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d106      	bne.n	8004ef4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f7fd faec 	bl	80024cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2202      	movs	r2, #2
 8004ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	3304      	adds	r3, #4
 8004f04:	4619      	mov	r1, r3
 8004f06:	4610      	mov	r0, r2
 8004f08:	f000 fad0 	bl	80054ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3708      	adds	r7, #8
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
	...

08004f68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d109      	bne.n	8004f8c <HAL_TIM_PWM_Start+0x24>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	bf14      	ite	ne
 8004f84:	2301      	movne	r3, #1
 8004f86:	2300      	moveq	r3, #0
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	e022      	b.n	8004fd2 <HAL_TIM_PWM_Start+0x6a>
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	2b04      	cmp	r3, #4
 8004f90:	d109      	bne.n	8004fa6 <HAL_TIM_PWM_Start+0x3e>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	bf14      	ite	ne
 8004f9e:	2301      	movne	r3, #1
 8004fa0:	2300      	moveq	r3, #0
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	e015      	b.n	8004fd2 <HAL_TIM_PWM_Start+0x6a>
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	2b08      	cmp	r3, #8
 8004faa:	d109      	bne.n	8004fc0 <HAL_TIM_PWM_Start+0x58>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	bf14      	ite	ne
 8004fb8:	2301      	movne	r3, #1
 8004fba:	2300      	moveq	r3, #0
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	e008      	b.n	8004fd2 <HAL_TIM_PWM_Start+0x6a>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	bf14      	ite	ne
 8004fcc:	2301      	movne	r3, #1
 8004fce:	2300      	moveq	r3, #0
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d001      	beq.n	8004fda <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e07c      	b.n	80050d4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d104      	bne.n	8004fea <HAL_TIM_PWM_Start+0x82>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fe8:	e013      	b.n	8005012 <HAL_TIM_PWM_Start+0xaa>
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	2b04      	cmp	r3, #4
 8004fee:	d104      	bne.n	8004ffa <HAL_TIM_PWM_Start+0x92>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ff8:	e00b      	b.n	8005012 <HAL_TIM_PWM_Start+0xaa>
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	2b08      	cmp	r3, #8
 8004ffe:	d104      	bne.n	800500a <HAL_TIM_PWM_Start+0xa2>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2202      	movs	r2, #2
 8005004:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005008:	e003      	b.n	8005012 <HAL_TIM_PWM_Start+0xaa>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2202      	movs	r2, #2
 800500e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2201      	movs	r2, #1
 8005018:	6839      	ldr	r1, [r7, #0]
 800501a:	4618      	mov	r0, r3
 800501c:	f000 fca2 	bl	8005964 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a2d      	ldr	r2, [pc, #180]	@ (80050dc <HAL_TIM_PWM_Start+0x174>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d004      	beq.n	8005034 <HAL_TIM_PWM_Start+0xcc>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a2c      	ldr	r2, [pc, #176]	@ (80050e0 <HAL_TIM_PWM_Start+0x178>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d101      	bne.n	8005038 <HAL_TIM_PWM_Start+0xd0>
 8005034:	2301      	movs	r3, #1
 8005036:	e000      	b.n	800503a <HAL_TIM_PWM_Start+0xd2>
 8005038:	2300      	movs	r3, #0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d007      	beq.n	800504e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800504c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a22      	ldr	r2, [pc, #136]	@ (80050dc <HAL_TIM_PWM_Start+0x174>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d022      	beq.n	800509e <HAL_TIM_PWM_Start+0x136>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005060:	d01d      	beq.n	800509e <HAL_TIM_PWM_Start+0x136>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a1f      	ldr	r2, [pc, #124]	@ (80050e4 <HAL_TIM_PWM_Start+0x17c>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d018      	beq.n	800509e <HAL_TIM_PWM_Start+0x136>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a1d      	ldr	r2, [pc, #116]	@ (80050e8 <HAL_TIM_PWM_Start+0x180>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d013      	beq.n	800509e <HAL_TIM_PWM_Start+0x136>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a1c      	ldr	r2, [pc, #112]	@ (80050ec <HAL_TIM_PWM_Start+0x184>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d00e      	beq.n	800509e <HAL_TIM_PWM_Start+0x136>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a16      	ldr	r2, [pc, #88]	@ (80050e0 <HAL_TIM_PWM_Start+0x178>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d009      	beq.n	800509e <HAL_TIM_PWM_Start+0x136>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a18      	ldr	r2, [pc, #96]	@ (80050f0 <HAL_TIM_PWM_Start+0x188>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d004      	beq.n	800509e <HAL_TIM_PWM_Start+0x136>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a16      	ldr	r2, [pc, #88]	@ (80050f4 <HAL_TIM_PWM_Start+0x18c>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d111      	bne.n	80050c2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f003 0307 	and.w	r3, r3, #7
 80050a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2b06      	cmp	r3, #6
 80050ae:	d010      	beq.n	80050d2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f042 0201 	orr.w	r2, r2, #1
 80050be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050c0:	e007      	b.n	80050d2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f042 0201 	orr.w	r2, r2, #1
 80050d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3710      	adds	r7, #16
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	40010000 	.word	0x40010000
 80050e0:	40010400 	.word	0x40010400
 80050e4:	40000400 	.word	0x40000400
 80050e8:	40000800 	.word	0x40000800
 80050ec:	40000c00 	.word	0x40000c00
 80050f0:	40014000 	.word	0x40014000
 80050f4:	40001800 	.word	0x40001800

080050f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	f003 0302 	and.w	r3, r3, #2
 8005116:	2b00      	cmp	r3, #0
 8005118:	d020      	beq.n	800515c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f003 0302 	and.w	r3, r3, #2
 8005120:	2b00      	cmp	r3, #0
 8005122:	d01b      	beq.n	800515c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f06f 0202 	mvn.w	r2, #2
 800512c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	f003 0303 	and.w	r3, r3, #3
 800513e:	2b00      	cmp	r3, #0
 8005140:	d003      	beq.n	800514a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f994 	bl	8005470 <HAL_TIM_IC_CaptureCallback>
 8005148:	e005      	b.n	8005156 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 f986 	bl	800545c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 f997 	bl	8005484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	f003 0304 	and.w	r3, r3, #4
 8005162:	2b00      	cmp	r3, #0
 8005164:	d020      	beq.n	80051a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f003 0304 	and.w	r3, r3, #4
 800516c:	2b00      	cmp	r3, #0
 800516e:	d01b      	beq.n	80051a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f06f 0204 	mvn.w	r2, #4
 8005178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2202      	movs	r2, #2
 800517e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800518a:	2b00      	cmp	r3, #0
 800518c:	d003      	beq.n	8005196 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 f96e 	bl	8005470 <HAL_TIM_IC_CaptureCallback>
 8005194:	e005      	b.n	80051a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 f960 	bl	800545c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 f971 	bl	8005484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	f003 0308 	and.w	r3, r3, #8
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d020      	beq.n	80051f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f003 0308 	and.w	r3, r3, #8
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d01b      	beq.n	80051f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f06f 0208 	mvn.w	r2, #8
 80051c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2204      	movs	r2, #4
 80051ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	69db      	ldr	r3, [r3, #28]
 80051d2:	f003 0303 	and.w	r3, r3, #3
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 f948 	bl	8005470 <HAL_TIM_IC_CaptureCallback>
 80051e0:	e005      	b.n	80051ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f93a 	bl	800545c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 f94b 	bl	8005484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	f003 0310 	and.w	r3, r3, #16
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d020      	beq.n	8005240 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f003 0310 	and.w	r3, r3, #16
 8005204:	2b00      	cmp	r3, #0
 8005206:	d01b      	beq.n	8005240 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f06f 0210 	mvn.w	r2, #16
 8005210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2208      	movs	r2, #8
 8005216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	69db      	ldr	r3, [r3, #28]
 800521e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005222:	2b00      	cmp	r3, #0
 8005224:	d003      	beq.n	800522e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f922 	bl	8005470 <HAL_TIM_IC_CaptureCallback>
 800522c:	e005      	b.n	800523a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f914 	bl	800545c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 f925 	bl	8005484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	f003 0301 	and.w	r3, r3, #1
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00c      	beq.n	8005264 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f003 0301 	and.w	r3, r3, #1
 8005250:	2b00      	cmp	r3, #0
 8005252:	d007      	beq.n	8005264 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f06f 0201 	mvn.w	r2, #1
 800525c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f7fc fe84 	bl	8001f6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00c      	beq.n	8005288 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005274:	2b00      	cmp	r3, #0
 8005276:	d007      	beq.n	8005288 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 fc1a 	bl	8005abc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00c      	beq.n	80052ac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005298:	2b00      	cmp	r3, #0
 800529a:	d007      	beq.n	80052ac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80052a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f8f6 	bl	8005498 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	f003 0320 	and.w	r3, r3, #32
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00c      	beq.n	80052d0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f003 0320 	and.w	r3, r3, #32
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d007      	beq.n	80052d0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f06f 0220 	mvn.w	r2, #32
 80052c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 fbec 	bl	8005aa8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052d0:	bf00      	nop
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b086      	sub	sp, #24
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052e4:	2300      	movs	r3, #0
 80052e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d101      	bne.n	80052f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80052f2:	2302      	movs	r3, #2
 80052f4:	e0ae      	b.n	8005454 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2b0c      	cmp	r3, #12
 8005302:	f200 809f 	bhi.w	8005444 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005306:	a201      	add	r2, pc, #4	@ (adr r2, 800530c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800530c:	08005341 	.word	0x08005341
 8005310:	08005445 	.word	0x08005445
 8005314:	08005445 	.word	0x08005445
 8005318:	08005445 	.word	0x08005445
 800531c:	08005381 	.word	0x08005381
 8005320:	08005445 	.word	0x08005445
 8005324:	08005445 	.word	0x08005445
 8005328:	08005445 	.word	0x08005445
 800532c:	080053c3 	.word	0x080053c3
 8005330:	08005445 	.word	0x08005445
 8005334:	08005445 	.word	0x08005445
 8005338:	08005445 	.word	0x08005445
 800533c:	08005403 	.word	0x08005403
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68b9      	ldr	r1, [r7, #8]
 8005346:	4618      	mov	r0, r3
 8005348:	f000 f95c 	bl	8005604 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	699a      	ldr	r2, [r3, #24]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f042 0208 	orr.w	r2, r2, #8
 800535a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	699a      	ldr	r2, [r3, #24]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f022 0204 	bic.w	r2, r2, #4
 800536a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	6999      	ldr	r1, [r3, #24]
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	691a      	ldr	r2, [r3, #16]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	430a      	orrs	r2, r1
 800537c:	619a      	str	r2, [r3, #24]
      break;
 800537e:	e064      	b.n	800544a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68b9      	ldr	r1, [r7, #8]
 8005386:	4618      	mov	r0, r3
 8005388:	f000 f9ac 	bl	80056e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	699a      	ldr	r2, [r3, #24]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800539a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	699a      	ldr	r2, [r3, #24]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	6999      	ldr	r1, [r3, #24]
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	021a      	lsls	r2, r3, #8
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	430a      	orrs	r2, r1
 80053be:	619a      	str	r2, [r3, #24]
      break;
 80053c0:	e043      	b.n	800544a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68b9      	ldr	r1, [r7, #8]
 80053c8:	4618      	mov	r0, r3
 80053ca:	f000 fa01 	bl	80057d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	69da      	ldr	r2, [r3, #28]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f042 0208 	orr.w	r2, r2, #8
 80053dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	69da      	ldr	r2, [r3, #28]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f022 0204 	bic.w	r2, r2, #4
 80053ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	69d9      	ldr	r1, [r3, #28]
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	691a      	ldr	r2, [r3, #16]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	430a      	orrs	r2, r1
 80053fe:	61da      	str	r2, [r3, #28]
      break;
 8005400:	e023      	b.n	800544a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68b9      	ldr	r1, [r7, #8]
 8005408:	4618      	mov	r0, r3
 800540a:	f000 fa55 	bl	80058b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	69da      	ldr	r2, [r3, #28]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800541c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	69da      	ldr	r2, [r3, #28]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800542c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	69d9      	ldr	r1, [r3, #28]
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	021a      	lsls	r2, r3, #8
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	430a      	orrs	r2, r1
 8005440:	61da      	str	r2, [r3, #28]
      break;
 8005442:	e002      	b.n	800544a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	75fb      	strb	r3, [r7, #23]
      break;
 8005448:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005452:	7dfb      	ldrb	r3, [r7, #23]
}
 8005454:	4618      	mov	r0, r3
 8005456:	3718      	adds	r7, #24
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005464:	bf00      	nop
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005478:	bf00      	nop
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800548c:	bf00      	nop
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054a0:	bf00      	nop
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a46      	ldr	r2, [pc, #280]	@ (80055d8 <TIM_Base_SetConfig+0x12c>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d013      	beq.n	80054ec <TIM_Base_SetConfig+0x40>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054ca:	d00f      	beq.n	80054ec <TIM_Base_SetConfig+0x40>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a43      	ldr	r2, [pc, #268]	@ (80055dc <TIM_Base_SetConfig+0x130>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d00b      	beq.n	80054ec <TIM_Base_SetConfig+0x40>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a42      	ldr	r2, [pc, #264]	@ (80055e0 <TIM_Base_SetConfig+0x134>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d007      	beq.n	80054ec <TIM_Base_SetConfig+0x40>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a41      	ldr	r2, [pc, #260]	@ (80055e4 <TIM_Base_SetConfig+0x138>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d003      	beq.n	80054ec <TIM_Base_SetConfig+0x40>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a40      	ldr	r2, [pc, #256]	@ (80055e8 <TIM_Base_SetConfig+0x13c>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d108      	bne.n	80054fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a35      	ldr	r2, [pc, #212]	@ (80055d8 <TIM_Base_SetConfig+0x12c>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d02b      	beq.n	800555e <TIM_Base_SetConfig+0xb2>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800550c:	d027      	beq.n	800555e <TIM_Base_SetConfig+0xb2>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a32      	ldr	r2, [pc, #200]	@ (80055dc <TIM_Base_SetConfig+0x130>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d023      	beq.n	800555e <TIM_Base_SetConfig+0xb2>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a31      	ldr	r2, [pc, #196]	@ (80055e0 <TIM_Base_SetConfig+0x134>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d01f      	beq.n	800555e <TIM_Base_SetConfig+0xb2>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a30      	ldr	r2, [pc, #192]	@ (80055e4 <TIM_Base_SetConfig+0x138>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d01b      	beq.n	800555e <TIM_Base_SetConfig+0xb2>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a2f      	ldr	r2, [pc, #188]	@ (80055e8 <TIM_Base_SetConfig+0x13c>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d017      	beq.n	800555e <TIM_Base_SetConfig+0xb2>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a2e      	ldr	r2, [pc, #184]	@ (80055ec <TIM_Base_SetConfig+0x140>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d013      	beq.n	800555e <TIM_Base_SetConfig+0xb2>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a2d      	ldr	r2, [pc, #180]	@ (80055f0 <TIM_Base_SetConfig+0x144>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d00f      	beq.n	800555e <TIM_Base_SetConfig+0xb2>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a2c      	ldr	r2, [pc, #176]	@ (80055f4 <TIM_Base_SetConfig+0x148>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d00b      	beq.n	800555e <TIM_Base_SetConfig+0xb2>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a2b      	ldr	r2, [pc, #172]	@ (80055f8 <TIM_Base_SetConfig+0x14c>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d007      	beq.n	800555e <TIM_Base_SetConfig+0xb2>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a2a      	ldr	r2, [pc, #168]	@ (80055fc <TIM_Base_SetConfig+0x150>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d003      	beq.n	800555e <TIM_Base_SetConfig+0xb2>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a29      	ldr	r2, [pc, #164]	@ (8005600 <TIM_Base_SetConfig+0x154>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d108      	bne.n	8005570 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005564:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	4313      	orrs	r3, r2
 800556e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	4313      	orrs	r3, r2
 800557c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	689a      	ldr	r2, [r3, #8]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a10      	ldr	r2, [pc, #64]	@ (80055d8 <TIM_Base_SetConfig+0x12c>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d003      	beq.n	80055a4 <TIM_Base_SetConfig+0xf8>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a12      	ldr	r2, [pc, #72]	@ (80055e8 <TIM_Base_SetConfig+0x13c>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d103      	bne.n	80055ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	691a      	ldr	r2, [r3, #16]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d105      	bne.n	80055ca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	f023 0201 	bic.w	r2, r3, #1
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	611a      	str	r2, [r3, #16]
  }
}
 80055ca:	bf00      	nop
 80055cc:	3714      	adds	r7, #20
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr
 80055d6:	bf00      	nop
 80055d8:	40010000 	.word	0x40010000
 80055dc:	40000400 	.word	0x40000400
 80055e0:	40000800 	.word	0x40000800
 80055e4:	40000c00 	.word	0x40000c00
 80055e8:	40010400 	.word	0x40010400
 80055ec:	40014000 	.word	0x40014000
 80055f0:	40014400 	.word	0x40014400
 80055f4:	40014800 	.word	0x40014800
 80055f8:	40001800 	.word	0x40001800
 80055fc:	40001c00 	.word	0x40001c00
 8005600:	40002000 	.word	0x40002000

08005604 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005604:	b480      	push	{r7}
 8005606:	b087      	sub	sp, #28
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a1b      	ldr	r3, [r3, #32]
 8005612:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a1b      	ldr	r3, [r3, #32]
 8005618:	f023 0201 	bic.w	r2, r3, #1
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f023 0303 	bic.w	r3, r3, #3
 800563a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	4313      	orrs	r3, r2
 8005644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	f023 0302 	bic.w	r3, r3, #2
 800564c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	697a      	ldr	r2, [r7, #20]
 8005654:	4313      	orrs	r3, r2
 8005656:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a20      	ldr	r2, [pc, #128]	@ (80056dc <TIM_OC1_SetConfig+0xd8>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d003      	beq.n	8005668 <TIM_OC1_SetConfig+0x64>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a1f      	ldr	r2, [pc, #124]	@ (80056e0 <TIM_OC1_SetConfig+0xdc>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d10c      	bne.n	8005682 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	f023 0308 	bic.w	r3, r3, #8
 800566e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	697a      	ldr	r2, [r7, #20]
 8005676:	4313      	orrs	r3, r2
 8005678:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f023 0304 	bic.w	r3, r3, #4
 8005680:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a15      	ldr	r2, [pc, #84]	@ (80056dc <TIM_OC1_SetConfig+0xd8>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d003      	beq.n	8005692 <TIM_OC1_SetConfig+0x8e>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a14      	ldr	r2, [pc, #80]	@ (80056e0 <TIM_OC1_SetConfig+0xdc>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d111      	bne.n	80056b6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005698:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80056a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	685a      	ldr	r2, [r3, #4]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	697a      	ldr	r2, [r7, #20]
 80056ce:	621a      	str	r2, [r3, #32]
}
 80056d0:	bf00      	nop
 80056d2:	371c      	adds	r7, #28
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr
 80056dc:	40010000 	.word	0x40010000
 80056e0:	40010400 	.word	0x40010400

080056e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b087      	sub	sp, #28
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a1b      	ldr	r3, [r3, #32]
 80056f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6a1b      	ldr	r3, [r3, #32]
 80056f8:	f023 0210 	bic.w	r2, r3, #16
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800571a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	021b      	lsls	r3, r3, #8
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	4313      	orrs	r3, r2
 8005726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	f023 0320 	bic.w	r3, r3, #32
 800572e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	011b      	lsls	r3, r3, #4
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	4313      	orrs	r3, r2
 800573a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a22      	ldr	r2, [pc, #136]	@ (80057c8 <TIM_OC2_SetConfig+0xe4>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d003      	beq.n	800574c <TIM_OC2_SetConfig+0x68>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a21      	ldr	r2, [pc, #132]	@ (80057cc <TIM_OC2_SetConfig+0xe8>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d10d      	bne.n	8005768 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005752:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	011b      	lsls	r3, r3, #4
 800575a:	697a      	ldr	r2, [r7, #20]
 800575c:	4313      	orrs	r3, r2
 800575e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005766:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a17      	ldr	r2, [pc, #92]	@ (80057c8 <TIM_OC2_SetConfig+0xe4>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d003      	beq.n	8005778 <TIM_OC2_SetConfig+0x94>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a16      	ldr	r2, [pc, #88]	@ (80057cc <TIM_OC2_SetConfig+0xe8>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d113      	bne.n	80057a0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800577e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005786:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	695b      	ldr	r3, [r3, #20]
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	693a      	ldr	r2, [r7, #16]
 8005790:	4313      	orrs	r3, r2
 8005792:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	699b      	ldr	r3, [r3, #24]
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	693a      	ldr	r2, [r7, #16]
 800579c:	4313      	orrs	r3, r2
 800579e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	685a      	ldr	r2, [r3, #4]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	697a      	ldr	r2, [r7, #20]
 80057b8:	621a      	str	r2, [r3, #32]
}
 80057ba:	bf00      	nop
 80057bc:	371c      	adds	r7, #28
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop
 80057c8:	40010000 	.word	0x40010000
 80057cc:	40010400 	.word	0x40010400

080057d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b087      	sub	sp, #28
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a1b      	ldr	r3, [r3, #32]
 80057de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a1b      	ldr	r3, [r3, #32]
 80057e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	69db      	ldr	r3, [r3, #28]
 80057f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f023 0303 	bic.w	r3, r3, #3
 8005806:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	4313      	orrs	r3, r2
 8005810:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005818:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	021b      	lsls	r3, r3, #8
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	4313      	orrs	r3, r2
 8005824:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a21      	ldr	r2, [pc, #132]	@ (80058b0 <TIM_OC3_SetConfig+0xe0>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d003      	beq.n	8005836 <TIM_OC3_SetConfig+0x66>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a20      	ldr	r2, [pc, #128]	@ (80058b4 <TIM_OC3_SetConfig+0xe4>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d10d      	bne.n	8005852 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800583c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	021b      	lsls	r3, r3, #8
 8005844:	697a      	ldr	r2, [r7, #20]
 8005846:	4313      	orrs	r3, r2
 8005848:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005850:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a16      	ldr	r2, [pc, #88]	@ (80058b0 <TIM_OC3_SetConfig+0xe0>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d003      	beq.n	8005862 <TIM_OC3_SetConfig+0x92>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a15      	ldr	r2, [pc, #84]	@ (80058b4 <TIM_OC3_SetConfig+0xe4>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d113      	bne.n	800588a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005868:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005870:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	011b      	lsls	r3, r3, #4
 8005878:	693a      	ldr	r2, [r7, #16]
 800587a:	4313      	orrs	r3, r2
 800587c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	011b      	lsls	r3, r3, #4
 8005884:	693a      	ldr	r2, [r7, #16]
 8005886:	4313      	orrs	r3, r2
 8005888:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	693a      	ldr	r2, [r7, #16]
 800588e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	685a      	ldr	r2, [r3, #4]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	697a      	ldr	r2, [r7, #20]
 80058a2:	621a      	str	r2, [r3, #32]
}
 80058a4:	bf00      	nop
 80058a6:	371c      	adds	r7, #28
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr
 80058b0:	40010000 	.word	0x40010000
 80058b4:	40010400 	.word	0x40010400

080058b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b087      	sub	sp, #28
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a1b      	ldr	r3, [r3, #32]
 80058c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a1b      	ldr	r3, [r3, #32]
 80058cc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	69db      	ldr	r3, [r3, #28]
 80058de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	021b      	lsls	r3, r3, #8
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005902:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	031b      	lsls	r3, r3, #12
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	4313      	orrs	r3, r2
 800590e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a12      	ldr	r2, [pc, #72]	@ (800595c <TIM_OC4_SetConfig+0xa4>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d003      	beq.n	8005920 <TIM_OC4_SetConfig+0x68>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a11      	ldr	r2, [pc, #68]	@ (8005960 <TIM_OC4_SetConfig+0xa8>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d109      	bne.n	8005934 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005926:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	695b      	ldr	r3, [r3, #20]
 800592c:	019b      	lsls	r3, r3, #6
 800592e:	697a      	ldr	r2, [r7, #20]
 8005930:	4313      	orrs	r3, r2
 8005932:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	697a      	ldr	r2, [r7, #20]
 8005938:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	685a      	ldr	r2, [r3, #4]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	693a      	ldr	r2, [r7, #16]
 800594c:	621a      	str	r2, [r3, #32]
}
 800594e:	bf00      	nop
 8005950:	371c      	adds	r7, #28
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop
 800595c:	40010000 	.word	0x40010000
 8005960:	40010400 	.word	0x40010400

08005964 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005964:	b480      	push	{r7}
 8005966:	b087      	sub	sp, #28
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	f003 031f 	and.w	r3, r3, #31
 8005976:	2201      	movs	r2, #1
 8005978:	fa02 f303 	lsl.w	r3, r2, r3
 800597c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6a1a      	ldr	r2, [r3, #32]
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	43db      	mvns	r3, r3
 8005986:	401a      	ands	r2, r3
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6a1a      	ldr	r2, [r3, #32]
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	f003 031f 	and.w	r3, r3, #31
 8005996:	6879      	ldr	r1, [r7, #4]
 8005998:	fa01 f303 	lsl.w	r3, r1, r3
 800599c:	431a      	orrs	r2, r3
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	621a      	str	r2, [r3, #32]
}
 80059a2:	bf00      	nop
 80059a4:	371c      	adds	r7, #28
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
	...

080059b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b085      	sub	sp, #20
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d101      	bne.n	80059c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059c4:	2302      	movs	r3, #2
 80059c6:	e05a      	b.n	8005a7e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2202      	movs	r2, #2
 80059d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a21      	ldr	r2, [pc, #132]	@ (8005a8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d022      	beq.n	8005a52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a14:	d01d      	beq.n	8005a52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a1d      	ldr	r2, [pc, #116]	@ (8005a90 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d018      	beq.n	8005a52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a1b      	ldr	r2, [pc, #108]	@ (8005a94 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d013      	beq.n	8005a52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a1a      	ldr	r2, [pc, #104]	@ (8005a98 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d00e      	beq.n	8005a52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a18      	ldr	r2, [pc, #96]	@ (8005a9c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d009      	beq.n	8005a52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a17      	ldr	r2, [pc, #92]	@ (8005aa0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d004      	beq.n	8005a52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a15      	ldr	r2, [pc, #84]	@ (8005aa4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d10c      	bne.n	8005a6c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	68ba      	ldr	r2, [r7, #8]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68ba      	ldr	r2, [r7, #8]
 8005a6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3714      	adds	r7, #20
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	40010000 	.word	0x40010000
 8005a90:	40000400 	.word	0x40000400
 8005a94:	40000800 	.word	0x40000800
 8005a98:	40000c00 	.word	0x40000c00
 8005a9c:	40010400 	.word	0x40010400
 8005aa0:	40014000 	.word	0x40014000
 8005aa4:	40001800 	.word	0x40001800

08005aa8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ab0:	bf00      	nop
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ac4:	bf00      	nop
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b082      	sub	sp, #8
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d101      	bne.n	8005ae2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e042      	b.n	8005b68 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d106      	bne.n	8005afc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f7fc fd64 	bl	80025c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2224      	movs	r2, #36	@ 0x24
 8005b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68da      	ldr	r2, [r3, #12]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 f973 	bl	8005e00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	691a      	ldr	r2, [r3, #16]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	695a      	ldr	r2, [r3, #20]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68da      	ldr	r2, [r3, #12]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2220      	movs	r2, #32
 8005b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2220      	movs	r2, #32
 8005b5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3708      	adds	r7, #8
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b08a      	sub	sp, #40	@ 0x28
 8005b74:	af02      	add	r7, sp, #8
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	603b      	str	r3, [r7, #0]
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005b80:	2300      	movs	r3, #0
 8005b82:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	2b20      	cmp	r3, #32
 8005b8e:	d175      	bne.n	8005c7c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d002      	beq.n	8005b9c <HAL_UART_Transmit+0x2c>
 8005b96:	88fb      	ldrh	r3, [r7, #6]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d101      	bne.n	8005ba0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e06e      	b.n	8005c7e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2221      	movs	r2, #33	@ 0x21
 8005baa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bae:	f7fc fea1 	bl	80028f4 <HAL_GetTick>
 8005bb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	88fa      	ldrh	r2, [r7, #6]
 8005bb8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	88fa      	ldrh	r2, [r7, #6]
 8005bbe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bc8:	d108      	bne.n	8005bdc <HAL_UART_Transmit+0x6c>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d104      	bne.n	8005bdc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	61bb      	str	r3, [r7, #24]
 8005bda:	e003      	b.n	8005be4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005be0:	2300      	movs	r3, #0
 8005be2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005be4:	e02e      	b.n	8005c44 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	9300      	str	r3, [sp, #0]
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	2200      	movs	r2, #0
 8005bee:	2180      	movs	r1, #128	@ 0x80
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f000 f848 	bl	8005c86 <UART_WaitOnFlagUntilTimeout>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d005      	beq.n	8005c08 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2220      	movs	r2, #32
 8005c00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e03a      	b.n	8005c7e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d10b      	bne.n	8005c26 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	881b      	ldrh	r3, [r3, #0]
 8005c12:	461a      	mov	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	3302      	adds	r3, #2
 8005c22:	61bb      	str	r3, [r7, #24]
 8005c24:	e007      	b.n	8005c36 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	781a      	ldrb	r2, [r3, #0]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	3301      	adds	r3, #1
 8005c34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	3b01      	subs	r3, #1
 8005c3e:	b29a      	uxth	r2, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d1cb      	bne.n	8005be6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	9300      	str	r3, [sp, #0]
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	2200      	movs	r2, #0
 8005c56:	2140      	movs	r1, #64	@ 0x40
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	f000 f814 	bl	8005c86 <UART_WaitOnFlagUntilTimeout>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d005      	beq.n	8005c70 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2220      	movs	r2, #32
 8005c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e006      	b.n	8005c7e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2220      	movs	r2, #32
 8005c74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	e000      	b.n	8005c7e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005c7c:	2302      	movs	r3, #2
  }
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3720      	adds	r7, #32
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b086      	sub	sp, #24
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	60f8      	str	r0, [r7, #12]
 8005c8e:	60b9      	str	r1, [r7, #8]
 8005c90:	603b      	str	r3, [r7, #0]
 8005c92:	4613      	mov	r3, r2
 8005c94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c96:	e03b      	b.n	8005d10 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c98:	6a3b      	ldr	r3, [r7, #32]
 8005c9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c9e:	d037      	beq.n	8005d10 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ca0:	f7fc fe28 	bl	80028f4 <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	6a3a      	ldr	r2, [r7, #32]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d302      	bcc.n	8005cb6 <UART_WaitOnFlagUntilTimeout+0x30>
 8005cb0:	6a3b      	ldr	r3, [r7, #32]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d101      	bne.n	8005cba <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e03a      	b.n	8005d30 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	f003 0304 	and.w	r3, r3, #4
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d023      	beq.n	8005d10 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	2b80      	cmp	r3, #128	@ 0x80
 8005ccc:	d020      	beq.n	8005d10 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	2b40      	cmp	r3, #64	@ 0x40
 8005cd2:	d01d      	beq.n	8005d10 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 0308 	and.w	r3, r3, #8
 8005cde:	2b08      	cmp	r3, #8
 8005ce0:	d116      	bne.n	8005d10 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	617b      	str	r3, [r7, #20]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	617b      	str	r3, [r7, #20]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	617b      	str	r3, [r7, #20]
 8005cf6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005cf8:	68f8      	ldr	r0, [r7, #12]
 8005cfa:	f000 f81d 	bl	8005d38 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2208      	movs	r2, #8
 8005d02:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e00f      	b.n	8005d30 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	4013      	ands	r3, r2
 8005d1a:	68ba      	ldr	r2, [r7, #8]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	bf0c      	ite	eq
 8005d20:	2301      	moveq	r3, #1
 8005d22:	2300      	movne	r3, #0
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	461a      	mov	r2, r3
 8005d28:	79fb      	ldrb	r3, [r7, #7]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d0b4      	beq.n	8005c98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3718      	adds	r7, #24
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b095      	sub	sp, #84	@ 0x54
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	330c      	adds	r3, #12
 8005d46:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d4a:	e853 3f00 	ldrex	r3, [r3]
 8005d4e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	330c      	adds	r3, #12
 8005d5e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d60:	643a      	str	r2, [r7, #64]	@ 0x40
 8005d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d64:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d68:	e841 2300 	strex	r3, r2, [r1]
 8005d6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1e5      	bne.n	8005d40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	3314      	adds	r3, #20
 8005d7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7c:	6a3b      	ldr	r3, [r7, #32]
 8005d7e:	e853 3f00 	ldrex	r3, [r3]
 8005d82:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	f023 0301 	bic.w	r3, r3, #1
 8005d8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	3314      	adds	r3, #20
 8005d92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d94:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d96:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d9c:	e841 2300 	strex	r3, r2, [r1]
 8005da0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d1e5      	bne.n	8005d74 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d119      	bne.n	8005de4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	330c      	adds	r3, #12
 8005db6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	e853 3f00 	ldrex	r3, [r3]
 8005dbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	f023 0310 	bic.w	r3, r3, #16
 8005dc6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	330c      	adds	r3, #12
 8005dce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005dd0:	61ba      	str	r2, [r7, #24]
 8005dd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd4:	6979      	ldr	r1, [r7, #20]
 8005dd6:	69ba      	ldr	r2, [r7, #24]
 8005dd8:	e841 2300 	strex	r3, r2, [r1]
 8005ddc:	613b      	str	r3, [r7, #16]
   return(result);
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d1e5      	bne.n	8005db0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2220      	movs	r2, #32
 8005de8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005df2:	bf00      	nop
 8005df4:	3754      	adds	r7, #84	@ 0x54
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
	...

08005e00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e04:	b0c0      	sub	sp, #256	@ 0x100
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e1c:	68d9      	ldr	r1, [r3, #12]
 8005e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	ea40 0301 	orr.w	r3, r0, r1
 8005e28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e2e:	689a      	ldr	r2, [r3, #8]
 8005e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	431a      	orrs	r2, r3
 8005e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	431a      	orrs	r2, r3
 8005e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e44:	69db      	ldr	r3, [r3, #28]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005e58:	f021 010c 	bic.w	r1, r1, #12
 8005e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005e66:	430b      	orrs	r3, r1
 8005e68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	695b      	ldr	r3, [r3, #20]
 8005e72:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e7a:	6999      	ldr	r1, [r3, #24]
 8005e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	ea40 0301 	orr.w	r3, r0, r1
 8005e86:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	4b8f      	ldr	r3, [pc, #572]	@ (80060cc <UART_SetConfig+0x2cc>)
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d005      	beq.n	8005ea0 <UART_SetConfig+0xa0>
 8005e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	4b8d      	ldr	r3, [pc, #564]	@ (80060d0 <UART_SetConfig+0x2d0>)
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d104      	bne.n	8005eaa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ea0:	f7fe fa34 	bl	800430c <HAL_RCC_GetPCLK2Freq>
 8005ea4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005ea8:	e003      	b.n	8005eb2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005eaa:	f7fe fa1b 	bl	80042e4 <HAL_RCC_GetPCLK1Freq>
 8005eae:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eb6:	69db      	ldr	r3, [r3, #28]
 8005eb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ebc:	f040 810c 	bne.w	80060d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ec0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005eca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005ece:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005ed2:	4622      	mov	r2, r4
 8005ed4:	462b      	mov	r3, r5
 8005ed6:	1891      	adds	r1, r2, r2
 8005ed8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005eda:	415b      	adcs	r3, r3
 8005edc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ede:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005ee2:	4621      	mov	r1, r4
 8005ee4:	eb12 0801 	adds.w	r8, r2, r1
 8005ee8:	4629      	mov	r1, r5
 8005eea:	eb43 0901 	adc.w	r9, r3, r1
 8005eee:	f04f 0200 	mov.w	r2, #0
 8005ef2:	f04f 0300 	mov.w	r3, #0
 8005ef6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005efa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005efe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f02:	4690      	mov	r8, r2
 8005f04:	4699      	mov	r9, r3
 8005f06:	4623      	mov	r3, r4
 8005f08:	eb18 0303 	adds.w	r3, r8, r3
 8005f0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f10:	462b      	mov	r3, r5
 8005f12:	eb49 0303 	adc.w	r3, r9, r3
 8005f16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005f26:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005f2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005f2e:	460b      	mov	r3, r1
 8005f30:	18db      	adds	r3, r3, r3
 8005f32:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f34:	4613      	mov	r3, r2
 8005f36:	eb42 0303 	adc.w	r3, r2, r3
 8005f3a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005f40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005f44:	f7fa fe82 	bl	8000c4c <__aeabi_uldivmod>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	4b61      	ldr	r3, [pc, #388]	@ (80060d4 <UART_SetConfig+0x2d4>)
 8005f4e:	fba3 2302 	umull	r2, r3, r3, r2
 8005f52:	095b      	lsrs	r3, r3, #5
 8005f54:	011c      	lsls	r4, r3, #4
 8005f56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005f60:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005f64:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005f68:	4642      	mov	r2, r8
 8005f6a:	464b      	mov	r3, r9
 8005f6c:	1891      	adds	r1, r2, r2
 8005f6e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005f70:	415b      	adcs	r3, r3
 8005f72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005f78:	4641      	mov	r1, r8
 8005f7a:	eb12 0a01 	adds.w	sl, r2, r1
 8005f7e:	4649      	mov	r1, r9
 8005f80:	eb43 0b01 	adc.w	fp, r3, r1
 8005f84:	f04f 0200 	mov.w	r2, #0
 8005f88:	f04f 0300 	mov.w	r3, #0
 8005f8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005f90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005f94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f98:	4692      	mov	sl, r2
 8005f9a:	469b      	mov	fp, r3
 8005f9c:	4643      	mov	r3, r8
 8005f9e:	eb1a 0303 	adds.w	r3, sl, r3
 8005fa2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005fa6:	464b      	mov	r3, r9
 8005fa8:	eb4b 0303 	adc.w	r3, fp, r3
 8005fac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005fbc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005fc0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	18db      	adds	r3, r3, r3
 8005fc8:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fca:	4613      	mov	r3, r2
 8005fcc:	eb42 0303 	adc.w	r3, r2, r3
 8005fd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fd2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005fd6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005fda:	f7fa fe37 	bl	8000c4c <__aeabi_uldivmod>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	4611      	mov	r1, r2
 8005fe4:	4b3b      	ldr	r3, [pc, #236]	@ (80060d4 <UART_SetConfig+0x2d4>)
 8005fe6:	fba3 2301 	umull	r2, r3, r3, r1
 8005fea:	095b      	lsrs	r3, r3, #5
 8005fec:	2264      	movs	r2, #100	@ 0x64
 8005fee:	fb02 f303 	mul.w	r3, r2, r3
 8005ff2:	1acb      	subs	r3, r1, r3
 8005ff4:	00db      	lsls	r3, r3, #3
 8005ff6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005ffa:	4b36      	ldr	r3, [pc, #216]	@ (80060d4 <UART_SetConfig+0x2d4>)
 8005ffc:	fba3 2302 	umull	r2, r3, r3, r2
 8006000:	095b      	lsrs	r3, r3, #5
 8006002:	005b      	lsls	r3, r3, #1
 8006004:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006008:	441c      	add	r4, r3
 800600a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800600e:	2200      	movs	r2, #0
 8006010:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006014:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006018:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800601c:	4642      	mov	r2, r8
 800601e:	464b      	mov	r3, r9
 8006020:	1891      	adds	r1, r2, r2
 8006022:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006024:	415b      	adcs	r3, r3
 8006026:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006028:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800602c:	4641      	mov	r1, r8
 800602e:	1851      	adds	r1, r2, r1
 8006030:	6339      	str	r1, [r7, #48]	@ 0x30
 8006032:	4649      	mov	r1, r9
 8006034:	414b      	adcs	r3, r1
 8006036:	637b      	str	r3, [r7, #52]	@ 0x34
 8006038:	f04f 0200 	mov.w	r2, #0
 800603c:	f04f 0300 	mov.w	r3, #0
 8006040:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006044:	4659      	mov	r1, fp
 8006046:	00cb      	lsls	r3, r1, #3
 8006048:	4651      	mov	r1, sl
 800604a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800604e:	4651      	mov	r1, sl
 8006050:	00ca      	lsls	r2, r1, #3
 8006052:	4610      	mov	r0, r2
 8006054:	4619      	mov	r1, r3
 8006056:	4603      	mov	r3, r0
 8006058:	4642      	mov	r2, r8
 800605a:	189b      	adds	r3, r3, r2
 800605c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006060:	464b      	mov	r3, r9
 8006062:	460a      	mov	r2, r1
 8006064:	eb42 0303 	adc.w	r3, r2, r3
 8006068:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800606c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006078:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800607c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006080:	460b      	mov	r3, r1
 8006082:	18db      	adds	r3, r3, r3
 8006084:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006086:	4613      	mov	r3, r2
 8006088:	eb42 0303 	adc.w	r3, r2, r3
 800608c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800608e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006092:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006096:	f7fa fdd9 	bl	8000c4c <__aeabi_uldivmod>
 800609a:	4602      	mov	r2, r0
 800609c:	460b      	mov	r3, r1
 800609e:	4b0d      	ldr	r3, [pc, #52]	@ (80060d4 <UART_SetConfig+0x2d4>)
 80060a0:	fba3 1302 	umull	r1, r3, r3, r2
 80060a4:	095b      	lsrs	r3, r3, #5
 80060a6:	2164      	movs	r1, #100	@ 0x64
 80060a8:	fb01 f303 	mul.w	r3, r1, r3
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	00db      	lsls	r3, r3, #3
 80060b0:	3332      	adds	r3, #50	@ 0x32
 80060b2:	4a08      	ldr	r2, [pc, #32]	@ (80060d4 <UART_SetConfig+0x2d4>)
 80060b4:	fba2 2303 	umull	r2, r3, r2, r3
 80060b8:	095b      	lsrs	r3, r3, #5
 80060ba:	f003 0207 	and.w	r2, r3, #7
 80060be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4422      	add	r2, r4
 80060c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80060c8:	e106      	b.n	80062d8 <UART_SetConfig+0x4d8>
 80060ca:	bf00      	nop
 80060cc:	40011000 	.word	0x40011000
 80060d0:	40011400 	.word	0x40011400
 80060d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060dc:	2200      	movs	r2, #0
 80060de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80060e2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80060e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80060ea:	4642      	mov	r2, r8
 80060ec:	464b      	mov	r3, r9
 80060ee:	1891      	adds	r1, r2, r2
 80060f0:	6239      	str	r1, [r7, #32]
 80060f2:	415b      	adcs	r3, r3
 80060f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80060f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80060fa:	4641      	mov	r1, r8
 80060fc:	1854      	adds	r4, r2, r1
 80060fe:	4649      	mov	r1, r9
 8006100:	eb43 0501 	adc.w	r5, r3, r1
 8006104:	f04f 0200 	mov.w	r2, #0
 8006108:	f04f 0300 	mov.w	r3, #0
 800610c:	00eb      	lsls	r3, r5, #3
 800610e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006112:	00e2      	lsls	r2, r4, #3
 8006114:	4614      	mov	r4, r2
 8006116:	461d      	mov	r5, r3
 8006118:	4643      	mov	r3, r8
 800611a:	18e3      	adds	r3, r4, r3
 800611c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006120:	464b      	mov	r3, r9
 8006122:	eb45 0303 	adc.w	r3, r5, r3
 8006126:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800612a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006136:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800613a:	f04f 0200 	mov.w	r2, #0
 800613e:	f04f 0300 	mov.w	r3, #0
 8006142:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006146:	4629      	mov	r1, r5
 8006148:	008b      	lsls	r3, r1, #2
 800614a:	4621      	mov	r1, r4
 800614c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006150:	4621      	mov	r1, r4
 8006152:	008a      	lsls	r2, r1, #2
 8006154:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006158:	f7fa fd78 	bl	8000c4c <__aeabi_uldivmod>
 800615c:	4602      	mov	r2, r0
 800615e:	460b      	mov	r3, r1
 8006160:	4b60      	ldr	r3, [pc, #384]	@ (80062e4 <UART_SetConfig+0x4e4>)
 8006162:	fba3 2302 	umull	r2, r3, r3, r2
 8006166:	095b      	lsrs	r3, r3, #5
 8006168:	011c      	lsls	r4, r3, #4
 800616a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800616e:	2200      	movs	r2, #0
 8006170:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006174:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006178:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800617c:	4642      	mov	r2, r8
 800617e:	464b      	mov	r3, r9
 8006180:	1891      	adds	r1, r2, r2
 8006182:	61b9      	str	r1, [r7, #24]
 8006184:	415b      	adcs	r3, r3
 8006186:	61fb      	str	r3, [r7, #28]
 8006188:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800618c:	4641      	mov	r1, r8
 800618e:	1851      	adds	r1, r2, r1
 8006190:	6139      	str	r1, [r7, #16]
 8006192:	4649      	mov	r1, r9
 8006194:	414b      	adcs	r3, r1
 8006196:	617b      	str	r3, [r7, #20]
 8006198:	f04f 0200 	mov.w	r2, #0
 800619c:	f04f 0300 	mov.w	r3, #0
 80061a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80061a4:	4659      	mov	r1, fp
 80061a6:	00cb      	lsls	r3, r1, #3
 80061a8:	4651      	mov	r1, sl
 80061aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061ae:	4651      	mov	r1, sl
 80061b0:	00ca      	lsls	r2, r1, #3
 80061b2:	4610      	mov	r0, r2
 80061b4:	4619      	mov	r1, r3
 80061b6:	4603      	mov	r3, r0
 80061b8:	4642      	mov	r2, r8
 80061ba:	189b      	adds	r3, r3, r2
 80061bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80061c0:	464b      	mov	r3, r9
 80061c2:	460a      	mov	r2, r1
 80061c4:	eb42 0303 	adc.w	r3, r2, r3
 80061c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80061cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80061d6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80061d8:	f04f 0200 	mov.w	r2, #0
 80061dc:	f04f 0300 	mov.w	r3, #0
 80061e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80061e4:	4649      	mov	r1, r9
 80061e6:	008b      	lsls	r3, r1, #2
 80061e8:	4641      	mov	r1, r8
 80061ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061ee:	4641      	mov	r1, r8
 80061f0:	008a      	lsls	r2, r1, #2
 80061f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80061f6:	f7fa fd29 	bl	8000c4c <__aeabi_uldivmod>
 80061fa:	4602      	mov	r2, r0
 80061fc:	460b      	mov	r3, r1
 80061fe:	4611      	mov	r1, r2
 8006200:	4b38      	ldr	r3, [pc, #224]	@ (80062e4 <UART_SetConfig+0x4e4>)
 8006202:	fba3 2301 	umull	r2, r3, r3, r1
 8006206:	095b      	lsrs	r3, r3, #5
 8006208:	2264      	movs	r2, #100	@ 0x64
 800620a:	fb02 f303 	mul.w	r3, r2, r3
 800620e:	1acb      	subs	r3, r1, r3
 8006210:	011b      	lsls	r3, r3, #4
 8006212:	3332      	adds	r3, #50	@ 0x32
 8006214:	4a33      	ldr	r2, [pc, #204]	@ (80062e4 <UART_SetConfig+0x4e4>)
 8006216:	fba2 2303 	umull	r2, r3, r2, r3
 800621a:	095b      	lsrs	r3, r3, #5
 800621c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006220:	441c      	add	r4, r3
 8006222:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006226:	2200      	movs	r2, #0
 8006228:	673b      	str	r3, [r7, #112]	@ 0x70
 800622a:	677a      	str	r2, [r7, #116]	@ 0x74
 800622c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006230:	4642      	mov	r2, r8
 8006232:	464b      	mov	r3, r9
 8006234:	1891      	adds	r1, r2, r2
 8006236:	60b9      	str	r1, [r7, #8]
 8006238:	415b      	adcs	r3, r3
 800623a:	60fb      	str	r3, [r7, #12]
 800623c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006240:	4641      	mov	r1, r8
 8006242:	1851      	adds	r1, r2, r1
 8006244:	6039      	str	r1, [r7, #0]
 8006246:	4649      	mov	r1, r9
 8006248:	414b      	adcs	r3, r1
 800624a:	607b      	str	r3, [r7, #4]
 800624c:	f04f 0200 	mov.w	r2, #0
 8006250:	f04f 0300 	mov.w	r3, #0
 8006254:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006258:	4659      	mov	r1, fp
 800625a:	00cb      	lsls	r3, r1, #3
 800625c:	4651      	mov	r1, sl
 800625e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006262:	4651      	mov	r1, sl
 8006264:	00ca      	lsls	r2, r1, #3
 8006266:	4610      	mov	r0, r2
 8006268:	4619      	mov	r1, r3
 800626a:	4603      	mov	r3, r0
 800626c:	4642      	mov	r2, r8
 800626e:	189b      	adds	r3, r3, r2
 8006270:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006272:	464b      	mov	r3, r9
 8006274:	460a      	mov	r2, r1
 8006276:	eb42 0303 	adc.w	r3, r2, r3
 800627a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800627c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	663b      	str	r3, [r7, #96]	@ 0x60
 8006286:	667a      	str	r2, [r7, #100]	@ 0x64
 8006288:	f04f 0200 	mov.w	r2, #0
 800628c:	f04f 0300 	mov.w	r3, #0
 8006290:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006294:	4649      	mov	r1, r9
 8006296:	008b      	lsls	r3, r1, #2
 8006298:	4641      	mov	r1, r8
 800629a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800629e:	4641      	mov	r1, r8
 80062a0:	008a      	lsls	r2, r1, #2
 80062a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80062a6:	f7fa fcd1 	bl	8000c4c <__aeabi_uldivmod>
 80062aa:	4602      	mov	r2, r0
 80062ac:	460b      	mov	r3, r1
 80062ae:	4b0d      	ldr	r3, [pc, #52]	@ (80062e4 <UART_SetConfig+0x4e4>)
 80062b0:	fba3 1302 	umull	r1, r3, r3, r2
 80062b4:	095b      	lsrs	r3, r3, #5
 80062b6:	2164      	movs	r1, #100	@ 0x64
 80062b8:	fb01 f303 	mul.w	r3, r1, r3
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	011b      	lsls	r3, r3, #4
 80062c0:	3332      	adds	r3, #50	@ 0x32
 80062c2:	4a08      	ldr	r2, [pc, #32]	@ (80062e4 <UART_SetConfig+0x4e4>)
 80062c4:	fba2 2303 	umull	r2, r3, r2, r3
 80062c8:	095b      	lsrs	r3, r3, #5
 80062ca:	f003 020f 	and.w	r2, r3, #15
 80062ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4422      	add	r2, r4
 80062d6:	609a      	str	r2, [r3, #8]
}
 80062d8:	bf00      	nop
 80062da:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80062de:	46bd      	mov	sp, r7
 80062e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062e4:	51eb851f 	.word	0x51eb851f

080062e8 <__NVIC_SetPriority>:
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	4603      	mov	r3, r0
 80062f0:	6039      	str	r1, [r7, #0]
 80062f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	db0a      	blt.n	8006312 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	b2da      	uxtb	r2, r3
 8006300:	490c      	ldr	r1, [pc, #48]	@ (8006334 <__NVIC_SetPriority+0x4c>)
 8006302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006306:	0112      	lsls	r2, r2, #4
 8006308:	b2d2      	uxtb	r2, r2
 800630a:	440b      	add	r3, r1
 800630c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006310:	e00a      	b.n	8006328 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	b2da      	uxtb	r2, r3
 8006316:	4908      	ldr	r1, [pc, #32]	@ (8006338 <__NVIC_SetPriority+0x50>)
 8006318:	79fb      	ldrb	r3, [r7, #7]
 800631a:	f003 030f 	and.w	r3, r3, #15
 800631e:	3b04      	subs	r3, #4
 8006320:	0112      	lsls	r2, r2, #4
 8006322:	b2d2      	uxtb	r2, r2
 8006324:	440b      	add	r3, r1
 8006326:	761a      	strb	r2, [r3, #24]
}
 8006328:	bf00      	nop
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr
 8006334:	e000e100 	.word	0xe000e100
 8006338:	e000ed00 	.word	0xe000ed00

0800633c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800633c:	b580      	push	{r7, lr}
 800633e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006340:	4b05      	ldr	r3, [pc, #20]	@ (8006358 <SysTick_Handler+0x1c>)
 8006342:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006344:	f002 f85e 	bl	8008404 <xTaskGetSchedulerState>
 8006348:	4603      	mov	r3, r0
 800634a:	2b01      	cmp	r3, #1
 800634c:	d001      	beq.n	8006352 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800634e:	f002 ff53 	bl	80091f8 <xPortSysTickHandler>
  }
}
 8006352:	bf00      	nop
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	e000e010 	.word	0xe000e010

0800635c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800635c:	b580      	push	{r7, lr}
 800635e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006360:	2100      	movs	r1, #0
 8006362:	f06f 0004 	mvn.w	r0, #4
 8006366:	f7ff ffbf 	bl	80062e8 <__NVIC_SetPriority>
#endif
}
 800636a:	bf00      	nop
 800636c:	bd80      	pop	{r7, pc}
	...

08006370 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006376:	f3ef 8305 	mrs	r3, IPSR
 800637a:	603b      	str	r3, [r7, #0]
  return(result);
 800637c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800637e:	2b00      	cmp	r3, #0
 8006380:	d003      	beq.n	800638a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006382:	f06f 0305 	mvn.w	r3, #5
 8006386:	607b      	str	r3, [r7, #4]
 8006388:	e00c      	b.n	80063a4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800638a:	4b0a      	ldr	r3, [pc, #40]	@ (80063b4 <osKernelInitialize+0x44>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d105      	bne.n	800639e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006392:	4b08      	ldr	r3, [pc, #32]	@ (80063b4 <osKernelInitialize+0x44>)
 8006394:	2201      	movs	r2, #1
 8006396:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006398:	2300      	movs	r3, #0
 800639a:	607b      	str	r3, [r7, #4]
 800639c:	e002      	b.n	80063a4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800639e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80063a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80063a4:	687b      	ldr	r3, [r7, #4]
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	370c      	adds	r7, #12
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop
 80063b4:	20000af0 	.word	0x20000af0

080063b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063be:	f3ef 8305 	mrs	r3, IPSR
 80063c2:	603b      	str	r3, [r7, #0]
  return(result);
 80063c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d003      	beq.n	80063d2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80063ca:	f06f 0305 	mvn.w	r3, #5
 80063ce:	607b      	str	r3, [r7, #4]
 80063d0:	e010      	b.n	80063f4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80063d2:	4b0b      	ldr	r3, [pc, #44]	@ (8006400 <osKernelStart+0x48>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d109      	bne.n	80063ee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80063da:	f7ff ffbf 	bl	800635c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80063de:	4b08      	ldr	r3, [pc, #32]	@ (8006400 <osKernelStart+0x48>)
 80063e0:	2202      	movs	r2, #2
 80063e2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80063e4:	f001 fb88 	bl	8007af8 <vTaskStartScheduler>
      stat = osOK;
 80063e8:	2300      	movs	r3, #0
 80063ea:	607b      	str	r3, [r7, #4]
 80063ec:	e002      	b.n	80063f4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80063ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80063f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80063f4:	687b      	ldr	r3, [r7, #4]
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3708      	adds	r7, #8
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	bf00      	nop
 8006400:	20000af0 	.word	0x20000af0

08006404 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800640a:	f3ef 8305 	mrs	r3, IPSR
 800640e:	603b      	str	r3, [r7, #0]
  return(result);
 8006410:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8006412:	2b00      	cmp	r3, #0
 8006414:	d003      	beq.n	800641e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8006416:	f001 fc9b 	bl	8007d50 <xTaskGetTickCountFromISR>
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	e002      	b.n	8006424 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800641e:	f001 fc87 	bl	8007d30 <xTaskGetTickCount>
 8006422:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8006424:	687b      	ldr	r3, [r7, #4]
}
 8006426:	4618      	mov	r0, r3
 8006428:	3708      	adds	r7, #8
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}

0800642e <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 800642e:	b480      	push	{r7}
 8006430:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 8006432:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
}
 8006436:	4618      	mov	r0, r3
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006440:	b580      	push	{r7, lr}
 8006442:	b08e      	sub	sp, #56	@ 0x38
 8006444:	af04      	add	r7, sp, #16
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800644c:	2300      	movs	r3, #0
 800644e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006450:	f3ef 8305 	mrs	r3, IPSR
 8006454:	617b      	str	r3, [r7, #20]
  return(result);
 8006456:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006458:	2b00      	cmp	r3, #0
 800645a:	d17e      	bne.n	800655a <osThreadNew+0x11a>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d07b      	beq.n	800655a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006462:	2380      	movs	r3, #128	@ 0x80
 8006464:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006466:	2318      	movs	r3, #24
 8006468:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800646a:	2300      	movs	r3, #0
 800646c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800646e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006472:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d045      	beq.n	8006506 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d002      	beq.n	8006488 <osThreadNew+0x48>
        name = attr->name;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	699b      	ldr	r3, [r3, #24]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d002      	beq.n	8006496 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	699b      	ldr	r3, [r3, #24]
 8006494:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d008      	beq.n	80064ae <osThreadNew+0x6e>
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	2b38      	cmp	r3, #56	@ 0x38
 80064a0:	d805      	bhi.n	80064ae <osThreadNew+0x6e>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f003 0301 	and.w	r3, r3, #1
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d001      	beq.n	80064b2 <osThreadNew+0x72>
        return (NULL);
 80064ae:	2300      	movs	r3, #0
 80064b0:	e054      	b.n	800655c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	695b      	ldr	r3, [r3, #20]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d003      	beq.n	80064c2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	695b      	ldr	r3, [r3, #20]
 80064be:	089b      	lsrs	r3, r3, #2
 80064c0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d00e      	beq.n	80064e8 <osThreadNew+0xa8>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	2ba7      	cmp	r3, #167	@ 0xa7
 80064d0:	d90a      	bls.n	80064e8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d006      	beq.n	80064e8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	695b      	ldr	r3, [r3, #20]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d002      	beq.n	80064e8 <osThreadNew+0xa8>
        mem = 1;
 80064e2:	2301      	movs	r3, #1
 80064e4:	61bb      	str	r3, [r7, #24]
 80064e6:	e010      	b.n	800650a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d10c      	bne.n	800650a <osThreadNew+0xca>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d108      	bne.n	800650a <osThreadNew+0xca>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d104      	bne.n	800650a <osThreadNew+0xca>
          mem = 0;
 8006500:	2300      	movs	r3, #0
 8006502:	61bb      	str	r3, [r7, #24]
 8006504:	e001      	b.n	800650a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006506:	2300      	movs	r3, #0
 8006508:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	2b01      	cmp	r3, #1
 800650e:	d110      	bne.n	8006532 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006518:	9202      	str	r2, [sp, #8]
 800651a:	9301      	str	r3, [sp, #4]
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	9300      	str	r3, [sp, #0]
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	6a3a      	ldr	r2, [r7, #32]
 8006524:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006526:	68f8      	ldr	r0, [r7, #12]
 8006528:	f001 f928 	bl	800777c <xTaskCreateStatic>
 800652c:	4603      	mov	r3, r0
 800652e:	613b      	str	r3, [r7, #16]
 8006530:	e013      	b.n	800655a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d110      	bne.n	800655a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006538:	6a3b      	ldr	r3, [r7, #32]
 800653a:	b29a      	uxth	r2, r3
 800653c:	f107 0310 	add.w	r3, r7, #16
 8006540:	9301      	str	r3, [sp, #4]
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	9300      	str	r3, [sp, #0]
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800654a:	68f8      	ldr	r0, [r7, #12]
 800654c:	f001 f976 	bl	800783c <xTaskCreate>
 8006550:	4603      	mov	r3, r0
 8006552:	2b01      	cmp	r3, #1
 8006554:	d001      	beq.n	800655a <osThreadNew+0x11a>
            hTask = NULL;
 8006556:	2300      	movs	r3, #0
 8006558:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800655a:	693b      	ldr	r3, [r7, #16]
}
 800655c:	4618      	mov	r0, r3
 800655e:	3728      	adds	r7, #40	@ 0x28
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006564:	b580      	push	{r7, lr}
 8006566:	b088      	sub	sp, #32
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800656c:	2300      	movs	r3, #0
 800656e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006570:	f3ef 8305 	mrs	r3, IPSR
 8006574:	60bb      	str	r3, [r7, #8]
  return(result);
 8006576:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8006578:	2b00      	cmp	r3, #0
 800657a:	d174      	bne.n	8006666 <osMutexNew+0x102>
    if (attr != NULL) {
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d003      	beq.n	800658a <osMutexNew+0x26>
      type = attr->attr_bits;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	61bb      	str	r3, [r7, #24]
 8006588:	e001      	b.n	800658e <osMutexNew+0x2a>
    } else {
      type = 0U;
 800658a:	2300      	movs	r3, #0
 800658c:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	f003 0301 	and.w	r3, r3, #1
 8006594:	2b00      	cmp	r3, #0
 8006596:	d002      	beq.n	800659e <osMutexNew+0x3a>
      rmtx = 1U;
 8006598:	2301      	movs	r3, #1
 800659a:	617b      	str	r3, [r7, #20]
 800659c:	e001      	b.n	80065a2 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800659e:	2300      	movs	r3, #0
 80065a0:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	f003 0308 	and.w	r3, r3, #8
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d15c      	bne.n	8006666 <osMutexNew+0x102>
      mem = -1;
 80065ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80065b0:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d015      	beq.n	80065e4 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d006      	beq.n	80065ce <osMutexNew+0x6a>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	2b4f      	cmp	r3, #79	@ 0x4f
 80065c6:	d902      	bls.n	80065ce <osMutexNew+0x6a>
          mem = 1;
 80065c8:	2301      	movs	r3, #1
 80065ca:	613b      	str	r3, [r7, #16]
 80065cc:	e00c      	b.n	80065e8 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d108      	bne.n	80065e8 <osMutexNew+0x84>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d104      	bne.n	80065e8 <osMutexNew+0x84>
            mem = 0;
 80065de:	2300      	movs	r3, #0
 80065e0:	613b      	str	r3, [r7, #16]
 80065e2:	e001      	b.n	80065e8 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80065e4:	2300      	movs	r3, #0
 80065e6:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d112      	bne.n	8006614 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d007      	beq.n	8006604 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	4619      	mov	r1, r3
 80065fa:	2004      	movs	r0, #4
 80065fc:	f000 fb1f 	bl	8006c3e <xQueueCreateMutexStatic>
 8006600:	61f8      	str	r0, [r7, #28]
 8006602:	e016      	b.n	8006632 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	4619      	mov	r1, r3
 800660a:	2001      	movs	r0, #1
 800660c:	f000 fb17 	bl	8006c3e <xQueueCreateMutexStatic>
 8006610:	61f8      	str	r0, [r7, #28]
 8006612:	e00e      	b.n	8006632 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d10b      	bne.n	8006632 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d004      	beq.n	800662a <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8006620:	2004      	movs	r0, #4
 8006622:	f000 faf4 	bl	8006c0e <xQueueCreateMutex>
 8006626:	61f8      	str	r0, [r7, #28]
 8006628:	e003      	b.n	8006632 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800662a:	2001      	movs	r0, #1
 800662c:	f000 faef 	bl	8006c0e <xQueueCreateMutex>
 8006630:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00c      	beq.n	8006652 <osMutexNew+0xee>
        if (attr != NULL) {
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d003      	beq.n	8006646 <osMutexNew+0xe2>
          name = attr->name;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	60fb      	str	r3, [r7, #12]
 8006644:	e001      	b.n	800664a <osMutexNew+0xe6>
        } else {
          name = NULL;
 8006646:	2300      	movs	r3, #0
 8006648:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800664a:	68f9      	ldr	r1, [r7, #12]
 800664c:	69f8      	ldr	r0, [r7, #28]
 800664e:	f001 f837 	bl	80076c0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d006      	beq.n	8006666 <osMutexNew+0x102>
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d003      	beq.n	8006666 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	f043 0301 	orr.w	r3, r3, #1
 8006664:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006666:	69fb      	ldr	r3, [r7, #28]
}
 8006668:	4618      	mov	r0, r3
 800666a:	3720      	adds	r7, #32
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006670:	b580      	push	{r7, lr}
 8006672:	b086      	sub	sp, #24
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f023 0301 	bic.w	r3, r3, #1
 8006680:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f003 0301 	and.w	r3, r3, #1
 8006688:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800668a:	2300      	movs	r3, #0
 800668c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800668e:	f3ef 8305 	mrs	r3, IPSR
 8006692:	60bb      	str	r3, [r7, #8]
  return(result);
 8006694:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006696:	2b00      	cmp	r3, #0
 8006698:	d003      	beq.n	80066a2 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800669a:	f06f 0305 	mvn.w	r3, #5
 800669e:	617b      	str	r3, [r7, #20]
 80066a0:	e02c      	b.n	80066fc <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d103      	bne.n	80066b0 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80066a8:	f06f 0303 	mvn.w	r3, #3
 80066ac:	617b      	str	r3, [r7, #20]
 80066ae:	e025      	b.n	80066fc <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d011      	beq.n	80066da <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80066b6:	6839      	ldr	r1, [r7, #0]
 80066b8:	6938      	ldr	r0, [r7, #16]
 80066ba:	f000 fb10 	bl	8006cde <xQueueTakeMutexRecursive>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d01b      	beq.n	80066fc <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d003      	beq.n	80066d2 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80066ca:	f06f 0301 	mvn.w	r3, #1
 80066ce:	617b      	str	r3, [r7, #20]
 80066d0:	e014      	b.n	80066fc <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80066d2:	f06f 0302 	mvn.w	r3, #2
 80066d6:	617b      	str	r3, [r7, #20]
 80066d8:	e010      	b.n	80066fc <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80066da:	6839      	ldr	r1, [r7, #0]
 80066dc:	6938      	ldr	r0, [r7, #16]
 80066de:	f000 fdb7 	bl	8007250 <xQueueSemaphoreTake>
 80066e2:	4603      	mov	r3, r0
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d009      	beq.n	80066fc <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d003      	beq.n	80066f6 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80066ee:	f06f 0301 	mvn.w	r3, #1
 80066f2:	617b      	str	r3, [r7, #20]
 80066f4:	e002      	b.n	80066fc <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80066f6:	f06f 0302 	mvn.w	r3, #2
 80066fa:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80066fc:	697b      	ldr	r3, [r7, #20]
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3718      	adds	r7, #24
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}

08006706 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006706:	b580      	push	{r7, lr}
 8006708:	b086      	sub	sp, #24
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f023 0301 	bic.w	r3, r3, #1
 8006714:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f003 0301 	and.w	r3, r3, #1
 800671c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800671e:	2300      	movs	r3, #0
 8006720:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006722:	f3ef 8305 	mrs	r3, IPSR
 8006726:	60bb      	str	r3, [r7, #8]
  return(result);
 8006728:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800672a:	2b00      	cmp	r3, #0
 800672c:	d003      	beq.n	8006736 <osMutexRelease+0x30>
    stat = osErrorISR;
 800672e:	f06f 0305 	mvn.w	r3, #5
 8006732:	617b      	str	r3, [r7, #20]
 8006734:	e01f      	b.n	8006776 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d103      	bne.n	8006744 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800673c:	f06f 0303 	mvn.w	r3, #3
 8006740:	617b      	str	r3, [r7, #20]
 8006742:	e018      	b.n	8006776 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d009      	beq.n	800675e <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800674a:	6938      	ldr	r0, [r7, #16]
 800674c:	f000 fa92 	bl	8006c74 <xQueueGiveMutexRecursive>
 8006750:	4603      	mov	r3, r0
 8006752:	2b01      	cmp	r3, #1
 8006754:	d00f      	beq.n	8006776 <osMutexRelease+0x70>
        stat = osErrorResource;
 8006756:	f06f 0302 	mvn.w	r3, #2
 800675a:	617b      	str	r3, [r7, #20]
 800675c:	e00b      	b.n	8006776 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800675e:	2300      	movs	r3, #0
 8006760:	2200      	movs	r2, #0
 8006762:	2100      	movs	r1, #0
 8006764:	6938      	ldr	r0, [r7, #16]
 8006766:	f000 faf1 	bl	8006d4c <xQueueGenericSend>
 800676a:	4603      	mov	r3, r0
 800676c:	2b01      	cmp	r3, #1
 800676e:	d002      	beq.n	8006776 <osMutexRelease+0x70>
        stat = osErrorResource;
 8006770:	f06f 0302 	mvn.w	r3, #2
 8006774:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006776:	697b      	ldr	r3, [r7, #20]
}
 8006778:	4618      	mov	r0, r3
 800677a:	3718      	adds	r7, #24
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006780:	b480      	push	{r7}
 8006782:	b085      	sub	sp, #20
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	4a07      	ldr	r2, [pc, #28]	@ (80067ac <vApplicationGetIdleTaskMemory+0x2c>)
 8006790:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	4a06      	ldr	r2, [pc, #24]	@ (80067b0 <vApplicationGetIdleTaskMemory+0x30>)
 8006796:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2280      	movs	r2, #128	@ 0x80
 800679c:	601a      	str	r2, [r3, #0]
}
 800679e:	bf00      	nop
 80067a0:	3714      	adds	r7, #20
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop
 80067ac:	20000af4 	.word	0x20000af4
 80067b0:	20000b9c 	.word	0x20000b9c

080067b4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80067b4:	b480      	push	{r7}
 80067b6:	b085      	sub	sp, #20
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	4a07      	ldr	r2, [pc, #28]	@ (80067e0 <vApplicationGetTimerTaskMemory+0x2c>)
 80067c4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	4a06      	ldr	r2, [pc, #24]	@ (80067e4 <vApplicationGetTimerTaskMemory+0x30>)
 80067ca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80067d2:	601a      	str	r2, [r3, #0]
}
 80067d4:	bf00      	nop
 80067d6:	3714      	adds	r7, #20
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr
 80067e0:	20000d9c 	.word	0x20000d9c
 80067e4:	20000e44 	.word	0x20000e44

080067e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f103 0208 	add.w	r2, r3, #8
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006800:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f103 0208 	add.w	r2, r3, #8
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f103 0208 	add.w	r2, r3, #8
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800681c:	bf00      	nop
 800681e:	370c      	adds	r7, #12
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006836:	bf00      	nop
 8006838:	370c      	adds	r7, #12
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr

08006842 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006842:	b480      	push	{r7}
 8006844:	b085      	sub	sp, #20
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
 800684a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	689a      	ldr	r2, [r3, #8]
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	683a      	ldr	r2, [r7, #0]
 8006866:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	683a      	ldr	r2, [r7, #0]
 800686c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	1c5a      	adds	r2, r3, #1
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	601a      	str	r2, [r3, #0]
}
 800687e:	bf00      	nop
 8006880:	3714      	adds	r7, #20
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr

0800688a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800688a:	b480      	push	{r7}
 800688c:	b085      	sub	sp, #20
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
 8006892:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80068a0:	d103      	bne.n	80068aa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	60fb      	str	r3, [r7, #12]
 80068a8:	e00c      	b.n	80068c4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	3308      	adds	r3, #8
 80068ae:	60fb      	str	r3, [r7, #12]
 80068b0:	e002      	b.n	80068b8 <vListInsert+0x2e>
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	60fb      	str	r3, [r7, #12]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	68ba      	ldr	r2, [r7, #8]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d2f6      	bcs.n	80068b2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	685a      	ldr	r2, [r3, #4]
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	683a      	ldr	r2, [r7, #0]
 80068d2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	683a      	ldr	r2, [r7, #0]
 80068de:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	1c5a      	adds	r2, r3, #1
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	601a      	str	r2, [r3, #0]
}
 80068f0:	bf00      	nop
 80068f2:	3714      	adds	r7, #20
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80068fc:	b480      	push	{r7}
 80068fe:	b085      	sub	sp, #20
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	6892      	ldr	r2, [r2, #8]
 8006912:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	6852      	ldr	r2, [r2, #4]
 800691c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	429a      	cmp	r2, r3
 8006926:	d103      	bne.n	8006930 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	689a      	ldr	r2, [r3, #8]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	1e5a      	subs	r2, r3, #1
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
}
 8006944:	4618      	mov	r0, r3
 8006946:	3714      	adds	r7, #20
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d10b      	bne.n	800697c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006968:	f383 8811 	msr	BASEPRI, r3
 800696c:	f3bf 8f6f 	isb	sy
 8006970:	f3bf 8f4f 	dsb	sy
 8006974:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006976:	bf00      	nop
 8006978:	bf00      	nop
 800697a:	e7fd      	b.n	8006978 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800697c:	f002 fbac 	bl	80090d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006988:	68f9      	ldr	r1, [r7, #12]
 800698a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800698c:	fb01 f303 	mul.w	r3, r1, r3
 8006990:	441a      	add	r2, r3
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2200      	movs	r2, #0
 800699a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069ac:	3b01      	subs	r3, #1
 80069ae:	68f9      	ldr	r1, [r7, #12]
 80069b0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80069b2:	fb01 f303 	mul.w	r3, r1, r3
 80069b6:	441a      	add	r2, r3
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	22ff      	movs	r2, #255	@ 0xff
 80069c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	22ff      	movs	r2, #255	@ 0xff
 80069c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d114      	bne.n	80069fc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d01a      	beq.n	8006a10 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	3310      	adds	r3, #16
 80069de:	4618      	mov	r0, r3
 80069e0:	f001 fb3a 	bl	8008058 <xTaskRemoveFromEventList>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d012      	beq.n	8006a10 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80069ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006a20 <xQueueGenericReset+0xd0>)
 80069ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069f0:	601a      	str	r2, [r3, #0]
 80069f2:	f3bf 8f4f 	dsb	sy
 80069f6:	f3bf 8f6f 	isb	sy
 80069fa:	e009      	b.n	8006a10 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	3310      	adds	r3, #16
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7ff fef1 	bl	80067e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	3324      	adds	r3, #36	@ 0x24
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7ff feec 	bl	80067e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006a10:	f002 fb94 	bl	800913c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006a14:	2301      	movs	r3, #1
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3710      	adds	r7, #16
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	e000ed04 	.word	0xe000ed04

08006a24 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b08e      	sub	sp, #56	@ 0x38
 8006a28:	af02      	add	r7, sp, #8
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	607a      	str	r2, [r7, #4]
 8006a30:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d10b      	bne.n	8006a50 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a3c:	f383 8811 	msr	BASEPRI, r3
 8006a40:	f3bf 8f6f 	isb	sy
 8006a44:	f3bf 8f4f 	dsb	sy
 8006a48:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006a4a:	bf00      	nop
 8006a4c:	bf00      	nop
 8006a4e:	e7fd      	b.n	8006a4c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d10b      	bne.n	8006a6e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a5a:	f383 8811 	msr	BASEPRI, r3
 8006a5e:	f3bf 8f6f 	isb	sy
 8006a62:	f3bf 8f4f 	dsb	sy
 8006a66:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006a68:	bf00      	nop
 8006a6a:	bf00      	nop
 8006a6c:	e7fd      	b.n	8006a6a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d002      	beq.n	8006a7a <xQueueGenericCreateStatic+0x56>
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d001      	beq.n	8006a7e <xQueueGenericCreateStatic+0x5a>
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e000      	b.n	8006a80 <xQueueGenericCreateStatic+0x5c>
 8006a7e:	2300      	movs	r3, #0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d10b      	bne.n	8006a9c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a88:	f383 8811 	msr	BASEPRI, r3
 8006a8c:	f3bf 8f6f 	isb	sy
 8006a90:	f3bf 8f4f 	dsb	sy
 8006a94:	623b      	str	r3, [r7, #32]
}
 8006a96:	bf00      	nop
 8006a98:	bf00      	nop
 8006a9a:	e7fd      	b.n	8006a98 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d102      	bne.n	8006aa8 <xQueueGenericCreateStatic+0x84>
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d101      	bne.n	8006aac <xQueueGenericCreateStatic+0x88>
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e000      	b.n	8006aae <xQueueGenericCreateStatic+0x8a>
 8006aac:	2300      	movs	r3, #0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d10b      	bne.n	8006aca <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ab6:	f383 8811 	msr	BASEPRI, r3
 8006aba:	f3bf 8f6f 	isb	sy
 8006abe:	f3bf 8f4f 	dsb	sy
 8006ac2:	61fb      	str	r3, [r7, #28]
}
 8006ac4:	bf00      	nop
 8006ac6:	bf00      	nop
 8006ac8:	e7fd      	b.n	8006ac6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006aca:	2350      	movs	r3, #80	@ 0x50
 8006acc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	2b50      	cmp	r3, #80	@ 0x50
 8006ad2:	d00b      	beq.n	8006aec <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ad8:	f383 8811 	msr	BASEPRI, r3
 8006adc:	f3bf 8f6f 	isb	sy
 8006ae0:	f3bf 8f4f 	dsb	sy
 8006ae4:	61bb      	str	r3, [r7, #24]
}
 8006ae6:	bf00      	nop
 8006ae8:	bf00      	nop
 8006aea:	e7fd      	b.n	8006ae8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006aec:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d00d      	beq.n	8006b14 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006b00:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b06:	9300      	str	r3, [sp, #0]
 8006b08:	4613      	mov	r3, r2
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	68b9      	ldr	r1, [r7, #8]
 8006b0e:	68f8      	ldr	r0, [r7, #12]
 8006b10:	f000 f840 	bl	8006b94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3730      	adds	r7, #48	@ 0x30
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006b1e:	b580      	push	{r7, lr}
 8006b20:	b08a      	sub	sp, #40	@ 0x28
 8006b22:	af02      	add	r7, sp, #8
 8006b24:	60f8      	str	r0, [r7, #12]
 8006b26:	60b9      	str	r1, [r7, #8]
 8006b28:	4613      	mov	r3, r2
 8006b2a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d10b      	bne.n	8006b4a <xQueueGenericCreate+0x2c>
	__asm volatile
 8006b32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b36:	f383 8811 	msr	BASEPRI, r3
 8006b3a:	f3bf 8f6f 	isb	sy
 8006b3e:	f3bf 8f4f 	dsb	sy
 8006b42:	613b      	str	r3, [r7, #16]
}
 8006b44:	bf00      	nop
 8006b46:	bf00      	nop
 8006b48:	e7fd      	b.n	8006b46 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	68ba      	ldr	r2, [r7, #8]
 8006b4e:	fb02 f303 	mul.w	r3, r2, r3
 8006b52:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	3350      	adds	r3, #80	@ 0x50
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f002 fbdf 	bl	800931c <pvPortMalloc>
 8006b5e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d011      	beq.n	8006b8a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	3350      	adds	r3, #80	@ 0x50
 8006b6e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	2200      	movs	r2, #0
 8006b74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006b78:	79fa      	ldrb	r2, [r7, #7]
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	9300      	str	r3, [sp, #0]
 8006b7e:	4613      	mov	r3, r2
 8006b80:	697a      	ldr	r2, [r7, #20]
 8006b82:	68b9      	ldr	r1, [r7, #8]
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f000 f805 	bl	8006b94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006b8a:	69bb      	ldr	r3, [r7, #24]
	}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3720      	adds	r7, #32
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	60b9      	str	r1, [r7, #8]
 8006b9e:	607a      	str	r2, [r7, #4]
 8006ba0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d103      	bne.n	8006bb0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	69ba      	ldr	r2, [r7, #24]
 8006bac:	601a      	str	r2, [r3, #0]
 8006bae:	e002      	b.n	8006bb6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006bbc:	69bb      	ldr	r3, [r7, #24]
 8006bbe:	68ba      	ldr	r2, [r7, #8]
 8006bc0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006bc2:	2101      	movs	r1, #1
 8006bc4:	69b8      	ldr	r0, [r7, #24]
 8006bc6:	f7ff fec3 	bl	8006950 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	78fa      	ldrb	r2, [r7, #3]
 8006bce:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006bd2:	bf00      	nop
 8006bd4:	3710      	adds	r7, #16
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b082      	sub	sp, #8
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00e      	beq.n	8006c06 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	2100      	movs	r1, #0
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 f8a3 	bl	8006d4c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006c06:	bf00      	nop
 8006c08:	3708      	adds	r7, #8
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b086      	sub	sp, #24
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	4603      	mov	r3, r0
 8006c16:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	617b      	str	r3, [r7, #20]
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006c20:	79fb      	ldrb	r3, [r7, #7]
 8006c22:	461a      	mov	r2, r3
 8006c24:	6939      	ldr	r1, [r7, #16]
 8006c26:	6978      	ldr	r0, [r7, #20]
 8006c28:	f7ff ff79 	bl	8006b1e <xQueueGenericCreate>
 8006c2c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f7ff ffd3 	bl	8006bda <prvInitialiseMutex>

		return xNewQueue;
 8006c34:	68fb      	ldr	r3, [r7, #12]
	}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3718      	adds	r7, #24
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}

08006c3e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006c3e:	b580      	push	{r7, lr}
 8006c40:	b088      	sub	sp, #32
 8006c42:	af02      	add	r7, sp, #8
 8006c44:	4603      	mov	r3, r0
 8006c46:	6039      	str	r1, [r7, #0]
 8006c48:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	617b      	str	r3, [r7, #20]
 8006c4e:	2300      	movs	r3, #0
 8006c50:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006c52:	79fb      	ldrb	r3, [r7, #7]
 8006c54:	9300      	str	r3, [sp, #0]
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	6939      	ldr	r1, [r7, #16]
 8006c5c:	6978      	ldr	r0, [r7, #20]
 8006c5e:	f7ff fee1 	bl	8006a24 <xQueueGenericCreateStatic>
 8006c62:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006c64:	68f8      	ldr	r0, [r7, #12]
 8006c66:	f7ff ffb8 	bl	8006bda <prvInitialiseMutex>

		return xNewQueue;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
	}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3718      	adds	r7, #24
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006c74:	b590      	push	{r4, r7, lr}
 8006c76:	b087      	sub	sp, #28
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d10b      	bne.n	8006c9e <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8006c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c8a:	f383 8811 	msr	BASEPRI, r3
 8006c8e:	f3bf 8f6f 	isb	sy
 8006c92:	f3bf 8f4f 	dsb	sy
 8006c96:	60fb      	str	r3, [r7, #12]
}
 8006c98:	bf00      	nop
 8006c9a:	bf00      	nop
 8006c9c:	e7fd      	b.n	8006c9a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	689c      	ldr	r4, [r3, #8]
 8006ca2:	f001 fb9f 	bl	80083e4 <xTaskGetCurrentTaskHandle>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	429c      	cmp	r4, r3
 8006caa:	d111      	bne.n	8006cd0 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	1e5a      	subs	r2, r3, #1
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d105      	bne.n	8006cca <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	2100      	movs	r1, #0
 8006cc4:	6938      	ldr	r0, [r7, #16]
 8006cc6:	f000 f841 	bl	8006d4c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	617b      	str	r3, [r7, #20]
 8006cce:	e001      	b.n	8006cd4 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006cd4:	697b      	ldr	r3, [r7, #20]
	}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	371c      	adds	r7, #28
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd90      	pop	{r4, r7, pc}

08006cde <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006cde:	b590      	push	{r4, r7, lr}
 8006ce0:	b087      	sub	sp, #28
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
 8006ce6:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d10b      	bne.n	8006d0a <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8006cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cf6:	f383 8811 	msr	BASEPRI, r3
 8006cfa:	f3bf 8f6f 	isb	sy
 8006cfe:	f3bf 8f4f 	dsb	sy
 8006d02:	60fb      	str	r3, [r7, #12]
}
 8006d04:	bf00      	nop
 8006d06:	bf00      	nop
 8006d08:	e7fd      	b.n	8006d06 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	689c      	ldr	r4, [r3, #8]
 8006d0e:	f001 fb69 	bl	80083e4 <xTaskGetCurrentTaskHandle>
 8006d12:	4603      	mov	r3, r0
 8006d14:	429c      	cmp	r4, r3
 8006d16:	d107      	bne.n	8006d28 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	1c5a      	adds	r2, r3, #1
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8006d22:	2301      	movs	r3, #1
 8006d24:	617b      	str	r3, [r7, #20]
 8006d26:	e00c      	b.n	8006d42 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006d28:	6839      	ldr	r1, [r7, #0]
 8006d2a:	6938      	ldr	r0, [r7, #16]
 8006d2c:	f000 fa90 	bl	8007250 <xQueueSemaphoreTake>
 8006d30:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d004      	beq.n	8006d42 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	1c5a      	adds	r2, r3, #1
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8006d42:	697b      	ldr	r3, [r7, #20]
	}
 8006d44:	4618      	mov	r0, r3
 8006d46:	371c      	adds	r7, #28
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd90      	pop	{r4, r7, pc}

08006d4c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b08e      	sub	sp, #56	@ 0x38
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	607a      	str	r2, [r7, #4]
 8006d58:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d10b      	bne.n	8006d80 <xQueueGenericSend+0x34>
	__asm volatile
 8006d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d6c:	f383 8811 	msr	BASEPRI, r3
 8006d70:	f3bf 8f6f 	isb	sy
 8006d74:	f3bf 8f4f 	dsb	sy
 8006d78:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006d7a:	bf00      	nop
 8006d7c:	bf00      	nop
 8006d7e:	e7fd      	b.n	8006d7c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d103      	bne.n	8006d8e <xQueueGenericSend+0x42>
 8006d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d101      	bne.n	8006d92 <xQueueGenericSend+0x46>
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e000      	b.n	8006d94 <xQueueGenericSend+0x48>
 8006d92:	2300      	movs	r3, #0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d10b      	bne.n	8006db0 <xQueueGenericSend+0x64>
	__asm volatile
 8006d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d9c:	f383 8811 	msr	BASEPRI, r3
 8006da0:	f3bf 8f6f 	isb	sy
 8006da4:	f3bf 8f4f 	dsb	sy
 8006da8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006daa:	bf00      	nop
 8006dac:	bf00      	nop
 8006dae:	e7fd      	b.n	8006dac <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	d103      	bne.n	8006dbe <xQueueGenericSend+0x72>
 8006db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d101      	bne.n	8006dc2 <xQueueGenericSend+0x76>
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e000      	b.n	8006dc4 <xQueueGenericSend+0x78>
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d10b      	bne.n	8006de0 <xQueueGenericSend+0x94>
	__asm volatile
 8006dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dcc:	f383 8811 	msr	BASEPRI, r3
 8006dd0:	f3bf 8f6f 	isb	sy
 8006dd4:	f3bf 8f4f 	dsb	sy
 8006dd8:	623b      	str	r3, [r7, #32]
}
 8006dda:	bf00      	nop
 8006ddc:	bf00      	nop
 8006dde:	e7fd      	b.n	8006ddc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006de0:	f001 fb10 	bl	8008404 <xTaskGetSchedulerState>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d102      	bne.n	8006df0 <xQueueGenericSend+0xa4>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d101      	bne.n	8006df4 <xQueueGenericSend+0xa8>
 8006df0:	2301      	movs	r3, #1
 8006df2:	e000      	b.n	8006df6 <xQueueGenericSend+0xaa>
 8006df4:	2300      	movs	r3, #0
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d10b      	bne.n	8006e12 <xQueueGenericSend+0xc6>
	__asm volatile
 8006dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dfe:	f383 8811 	msr	BASEPRI, r3
 8006e02:	f3bf 8f6f 	isb	sy
 8006e06:	f3bf 8f4f 	dsb	sy
 8006e0a:	61fb      	str	r3, [r7, #28]
}
 8006e0c:	bf00      	nop
 8006e0e:	bf00      	nop
 8006e10:	e7fd      	b.n	8006e0e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e12:	f002 f961 	bl	80090d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d302      	bcc.n	8006e28 <xQueueGenericSend+0xdc>
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	2b02      	cmp	r3, #2
 8006e26:	d129      	bne.n	8006e7c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006e28:	683a      	ldr	r2, [r7, #0]
 8006e2a:	68b9      	ldr	r1, [r7, #8]
 8006e2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e2e:	f000 fb37 	bl	80074a0 <prvCopyDataToQueue>
 8006e32:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d010      	beq.n	8006e5e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e3e:	3324      	adds	r3, #36	@ 0x24
 8006e40:	4618      	mov	r0, r3
 8006e42:	f001 f909 	bl	8008058 <xTaskRemoveFromEventList>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d013      	beq.n	8006e74 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006e4c:	4b3f      	ldr	r3, [pc, #252]	@ (8006f4c <xQueueGenericSend+0x200>)
 8006e4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e52:	601a      	str	r2, [r3, #0]
 8006e54:	f3bf 8f4f 	dsb	sy
 8006e58:	f3bf 8f6f 	isb	sy
 8006e5c:	e00a      	b.n	8006e74 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d007      	beq.n	8006e74 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006e64:	4b39      	ldr	r3, [pc, #228]	@ (8006f4c <xQueueGenericSend+0x200>)
 8006e66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e6a:	601a      	str	r2, [r3, #0]
 8006e6c:	f3bf 8f4f 	dsb	sy
 8006e70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006e74:	f002 f962 	bl	800913c <vPortExitCritical>
				return pdPASS;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e063      	b.n	8006f44 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d103      	bne.n	8006e8a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e82:	f002 f95b 	bl	800913c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006e86:	2300      	movs	r3, #0
 8006e88:	e05c      	b.n	8006f44 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d106      	bne.n	8006e9e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e90:	f107 0314 	add.w	r3, r7, #20
 8006e94:	4618      	mov	r0, r3
 8006e96:	f001 f943 	bl	8008120 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e9e:	f002 f94d 	bl	800913c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ea2:	f000 fe99 	bl	8007bd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ea6:	f002 f917 	bl	80090d8 <vPortEnterCritical>
 8006eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006eb0:	b25b      	sxtb	r3, r3
 8006eb2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006eb6:	d103      	bne.n	8006ec0 <xQueueGenericSend+0x174>
 8006eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ec6:	b25b      	sxtb	r3, r3
 8006ec8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006ecc:	d103      	bne.n	8006ed6 <xQueueGenericSend+0x18a>
 8006ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ed6:	f002 f931 	bl	800913c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006eda:	1d3a      	adds	r2, r7, #4
 8006edc:	f107 0314 	add.w	r3, r7, #20
 8006ee0:	4611      	mov	r1, r2
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f001 f932 	bl	800814c <xTaskCheckForTimeOut>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d124      	bne.n	8006f38 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006eee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006ef0:	f000 fbce 	bl	8007690 <prvIsQueueFull>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d018      	beq.n	8006f2c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006efc:	3310      	adds	r3, #16
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	4611      	mov	r1, r2
 8006f02:	4618      	mov	r0, r3
 8006f04:	f001 f856 	bl	8007fb4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006f08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f0a:	f000 fb59 	bl	80075c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006f0e:	f000 fe71 	bl	8007bf4 <xTaskResumeAll>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	f47f af7c 	bne.w	8006e12 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006f1a:	4b0c      	ldr	r3, [pc, #48]	@ (8006f4c <xQueueGenericSend+0x200>)
 8006f1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f20:	601a      	str	r2, [r3, #0]
 8006f22:	f3bf 8f4f 	dsb	sy
 8006f26:	f3bf 8f6f 	isb	sy
 8006f2a:	e772      	b.n	8006e12 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006f2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f2e:	f000 fb47 	bl	80075c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f32:	f000 fe5f 	bl	8007bf4 <xTaskResumeAll>
 8006f36:	e76c      	b.n	8006e12 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006f38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f3a:	f000 fb41 	bl	80075c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f3e:	f000 fe59 	bl	8007bf4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006f42:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3738      	adds	r7, #56	@ 0x38
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	e000ed04 	.word	0xe000ed04

08006f50 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b090      	sub	sp, #64	@ 0x40
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	607a      	str	r2, [r7, #4]
 8006f5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d10b      	bne.n	8006f80 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f6c:	f383 8811 	msr	BASEPRI, r3
 8006f70:	f3bf 8f6f 	isb	sy
 8006f74:	f3bf 8f4f 	dsb	sy
 8006f78:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006f7a:	bf00      	nop
 8006f7c:	bf00      	nop
 8006f7e:	e7fd      	b.n	8006f7c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d103      	bne.n	8006f8e <xQueueGenericSendFromISR+0x3e>
 8006f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d101      	bne.n	8006f92 <xQueueGenericSendFromISR+0x42>
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e000      	b.n	8006f94 <xQueueGenericSendFromISR+0x44>
 8006f92:	2300      	movs	r3, #0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d10b      	bne.n	8006fb0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f9c:	f383 8811 	msr	BASEPRI, r3
 8006fa0:	f3bf 8f6f 	isb	sy
 8006fa4:	f3bf 8f4f 	dsb	sy
 8006fa8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006faa:	bf00      	nop
 8006fac:	bf00      	nop
 8006fae:	e7fd      	b.n	8006fac <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	2b02      	cmp	r3, #2
 8006fb4:	d103      	bne.n	8006fbe <xQueueGenericSendFromISR+0x6e>
 8006fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d101      	bne.n	8006fc2 <xQueueGenericSendFromISR+0x72>
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e000      	b.n	8006fc4 <xQueueGenericSendFromISR+0x74>
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d10b      	bne.n	8006fe0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fcc:	f383 8811 	msr	BASEPRI, r3
 8006fd0:	f3bf 8f6f 	isb	sy
 8006fd4:	f3bf 8f4f 	dsb	sy
 8006fd8:	623b      	str	r3, [r7, #32]
}
 8006fda:	bf00      	nop
 8006fdc:	bf00      	nop
 8006fde:	e7fd      	b.n	8006fdc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006fe0:	f002 f95a 	bl	8009298 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006fe4:	f3ef 8211 	mrs	r2, BASEPRI
 8006fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fec:	f383 8811 	msr	BASEPRI, r3
 8006ff0:	f3bf 8f6f 	isb	sy
 8006ff4:	f3bf 8f4f 	dsb	sy
 8006ff8:	61fa      	str	r2, [r7, #28]
 8006ffa:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006ffc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ffe:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007002:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007008:	429a      	cmp	r2, r3
 800700a:	d302      	bcc.n	8007012 <xQueueGenericSendFromISR+0xc2>
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	2b02      	cmp	r3, #2
 8007010:	d12f      	bne.n	8007072 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007014:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007018:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800701c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800701e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007020:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007022:	683a      	ldr	r2, [r7, #0]
 8007024:	68b9      	ldr	r1, [r7, #8]
 8007026:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007028:	f000 fa3a 	bl	80074a0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800702c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007030:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007034:	d112      	bne.n	800705c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800703a:	2b00      	cmp	r3, #0
 800703c:	d016      	beq.n	800706c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800703e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007040:	3324      	adds	r3, #36	@ 0x24
 8007042:	4618      	mov	r0, r3
 8007044:	f001 f808 	bl	8008058 <xTaskRemoveFromEventList>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00e      	beq.n	800706c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d00b      	beq.n	800706c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	601a      	str	r2, [r3, #0]
 800705a:	e007      	b.n	800706c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800705c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007060:	3301      	adds	r3, #1
 8007062:	b2db      	uxtb	r3, r3
 8007064:	b25a      	sxtb	r2, r3
 8007066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007068:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800706c:	2301      	movs	r3, #1
 800706e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007070:	e001      	b.n	8007076 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007072:	2300      	movs	r3, #0
 8007074:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007076:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007078:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007080:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007082:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007084:	4618      	mov	r0, r3
 8007086:	3740      	adds	r7, #64	@ 0x40
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b08c      	sub	sp, #48	@ 0x30
 8007090:	af00      	add	r7, sp, #0
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	60b9      	str	r1, [r7, #8]
 8007096:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007098:	2300      	movs	r3, #0
 800709a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80070a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d10b      	bne.n	80070be <xQueueReceive+0x32>
	__asm volatile
 80070a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070aa:	f383 8811 	msr	BASEPRI, r3
 80070ae:	f3bf 8f6f 	isb	sy
 80070b2:	f3bf 8f4f 	dsb	sy
 80070b6:	623b      	str	r3, [r7, #32]
}
 80070b8:	bf00      	nop
 80070ba:	bf00      	nop
 80070bc:	e7fd      	b.n	80070ba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d103      	bne.n	80070cc <xQueueReceive+0x40>
 80070c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d101      	bne.n	80070d0 <xQueueReceive+0x44>
 80070cc:	2301      	movs	r3, #1
 80070ce:	e000      	b.n	80070d2 <xQueueReceive+0x46>
 80070d0:	2300      	movs	r3, #0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d10b      	bne.n	80070ee <xQueueReceive+0x62>
	__asm volatile
 80070d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070da:	f383 8811 	msr	BASEPRI, r3
 80070de:	f3bf 8f6f 	isb	sy
 80070e2:	f3bf 8f4f 	dsb	sy
 80070e6:	61fb      	str	r3, [r7, #28]
}
 80070e8:	bf00      	nop
 80070ea:	bf00      	nop
 80070ec:	e7fd      	b.n	80070ea <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80070ee:	f001 f989 	bl	8008404 <xTaskGetSchedulerState>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d102      	bne.n	80070fe <xQueueReceive+0x72>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d101      	bne.n	8007102 <xQueueReceive+0x76>
 80070fe:	2301      	movs	r3, #1
 8007100:	e000      	b.n	8007104 <xQueueReceive+0x78>
 8007102:	2300      	movs	r3, #0
 8007104:	2b00      	cmp	r3, #0
 8007106:	d10b      	bne.n	8007120 <xQueueReceive+0x94>
	__asm volatile
 8007108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800710c:	f383 8811 	msr	BASEPRI, r3
 8007110:	f3bf 8f6f 	isb	sy
 8007114:	f3bf 8f4f 	dsb	sy
 8007118:	61bb      	str	r3, [r7, #24]
}
 800711a:	bf00      	nop
 800711c:	bf00      	nop
 800711e:	e7fd      	b.n	800711c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007120:	f001 ffda 	bl	80090d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007128:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800712a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800712c:	2b00      	cmp	r3, #0
 800712e:	d01f      	beq.n	8007170 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007130:	68b9      	ldr	r1, [r7, #8]
 8007132:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007134:	f000 fa1e 	bl	8007574 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800713a:	1e5a      	subs	r2, r3, #1
 800713c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800713e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d00f      	beq.n	8007168 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800714a:	3310      	adds	r3, #16
 800714c:	4618      	mov	r0, r3
 800714e:	f000 ff83 	bl	8008058 <xTaskRemoveFromEventList>
 8007152:	4603      	mov	r3, r0
 8007154:	2b00      	cmp	r3, #0
 8007156:	d007      	beq.n	8007168 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007158:	4b3c      	ldr	r3, [pc, #240]	@ (800724c <xQueueReceive+0x1c0>)
 800715a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800715e:	601a      	str	r2, [r3, #0]
 8007160:	f3bf 8f4f 	dsb	sy
 8007164:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007168:	f001 ffe8 	bl	800913c <vPortExitCritical>
				return pdPASS;
 800716c:	2301      	movs	r3, #1
 800716e:	e069      	b.n	8007244 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d103      	bne.n	800717e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007176:	f001 ffe1 	bl	800913c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800717a:	2300      	movs	r3, #0
 800717c:	e062      	b.n	8007244 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800717e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007180:	2b00      	cmp	r3, #0
 8007182:	d106      	bne.n	8007192 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007184:	f107 0310 	add.w	r3, r7, #16
 8007188:	4618      	mov	r0, r3
 800718a:	f000 ffc9 	bl	8008120 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800718e:	2301      	movs	r3, #1
 8007190:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007192:	f001 ffd3 	bl	800913c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007196:	f000 fd1f 	bl	8007bd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800719a:	f001 ff9d 	bl	80090d8 <vPortEnterCritical>
 800719e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80071a4:	b25b      	sxtb	r3, r3
 80071a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80071aa:	d103      	bne.n	80071b4 <xQueueReceive+0x128>
 80071ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ae:	2200      	movs	r2, #0
 80071b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80071ba:	b25b      	sxtb	r3, r3
 80071bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80071c0:	d103      	bne.n	80071ca <xQueueReceive+0x13e>
 80071c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071c4:	2200      	movs	r2, #0
 80071c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80071ca:	f001 ffb7 	bl	800913c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80071ce:	1d3a      	adds	r2, r7, #4
 80071d0:	f107 0310 	add.w	r3, r7, #16
 80071d4:	4611      	mov	r1, r2
 80071d6:	4618      	mov	r0, r3
 80071d8:	f000 ffb8 	bl	800814c <xTaskCheckForTimeOut>
 80071dc:	4603      	mov	r3, r0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d123      	bne.n	800722a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80071e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071e4:	f000 fa3e 	bl	8007664 <prvIsQueueEmpty>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d017      	beq.n	800721e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80071ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071f0:	3324      	adds	r3, #36	@ 0x24
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	4611      	mov	r1, r2
 80071f6:	4618      	mov	r0, r3
 80071f8:	f000 fedc 	bl	8007fb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80071fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071fe:	f000 f9df 	bl	80075c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007202:	f000 fcf7 	bl	8007bf4 <xTaskResumeAll>
 8007206:	4603      	mov	r3, r0
 8007208:	2b00      	cmp	r3, #0
 800720a:	d189      	bne.n	8007120 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800720c:	4b0f      	ldr	r3, [pc, #60]	@ (800724c <xQueueReceive+0x1c0>)
 800720e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007212:	601a      	str	r2, [r3, #0]
 8007214:	f3bf 8f4f 	dsb	sy
 8007218:	f3bf 8f6f 	isb	sy
 800721c:	e780      	b.n	8007120 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800721e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007220:	f000 f9ce 	bl	80075c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007224:	f000 fce6 	bl	8007bf4 <xTaskResumeAll>
 8007228:	e77a      	b.n	8007120 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800722a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800722c:	f000 f9c8 	bl	80075c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007230:	f000 fce0 	bl	8007bf4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007234:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007236:	f000 fa15 	bl	8007664 <prvIsQueueEmpty>
 800723a:	4603      	mov	r3, r0
 800723c:	2b00      	cmp	r3, #0
 800723e:	f43f af6f 	beq.w	8007120 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007242:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007244:	4618      	mov	r0, r3
 8007246:	3730      	adds	r7, #48	@ 0x30
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}
 800724c:	e000ed04 	.word	0xe000ed04

08007250 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b08e      	sub	sp, #56	@ 0x38
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800725a:	2300      	movs	r3, #0
 800725c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007262:	2300      	movs	r3, #0
 8007264:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007268:	2b00      	cmp	r3, #0
 800726a:	d10b      	bne.n	8007284 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800726c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007270:	f383 8811 	msr	BASEPRI, r3
 8007274:	f3bf 8f6f 	isb	sy
 8007278:	f3bf 8f4f 	dsb	sy
 800727c:	623b      	str	r3, [r7, #32]
}
 800727e:	bf00      	nop
 8007280:	bf00      	nop
 8007282:	e7fd      	b.n	8007280 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007288:	2b00      	cmp	r3, #0
 800728a:	d00b      	beq.n	80072a4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800728c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007290:	f383 8811 	msr	BASEPRI, r3
 8007294:	f3bf 8f6f 	isb	sy
 8007298:	f3bf 8f4f 	dsb	sy
 800729c:	61fb      	str	r3, [r7, #28]
}
 800729e:	bf00      	nop
 80072a0:	bf00      	nop
 80072a2:	e7fd      	b.n	80072a0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80072a4:	f001 f8ae 	bl	8008404 <xTaskGetSchedulerState>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d102      	bne.n	80072b4 <xQueueSemaphoreTake+0x64>
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d101      	bne.n	80072b8 <xQueueSemaphoreTake+0x68>
 80072b4:	2301      	movs	r3, #1
 80072b6:	e000      	b.n	80072ba <xQueueSemaphoreTake+0x6a>
 80072b8:	2300      	movs	r3, #0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d10b      	bne.n	80072d6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80072be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072c2:	f383 8811 	msr	BASEPRI, r3
 80072c6:	f3bf 8f6f 	isb	sy
 80072ca:	f3bf 8f4f 	dsb	sy
 80072ce:	61bb      	str	r3, [r7, #24]
}
 80072d0:	bf00      	nop
 80072d2:	bf00      	nop
 80072d4:	e7fd      	b.n	80072d2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80072d6:	f001 feff 	bl	80090d8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80072da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072de:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80072e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d024      	beq.n	8007330 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80072e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072e8:	1e5a      	subs	r2, r3, #1
 80072ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ec:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80072ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d104      	bne.n	8007300 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80072f6:	f001 f9ff 	bl	80086f8 <pvTaskIncrementMutexHeldCount>
 80072fa:	4602      	mov	r2, r0
 80072fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072fe:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007302:	691b      	ldr	r3, [r3, #16]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d00f      	beq.n	8007328 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800730a:	3310      	adds	r3, #16
 800730c:	4618      	mov	r0, r3
 800730e:	f000 fea3 	bl	8008058 <xTaskRemoveFromEventList>
 8007312:	4603      	mov	r3, r0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d007      	beq.n	8007328 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007318:	4b54      	ldr	r3, [pc, #336]	@ (800746c <xQueueSemaphoreTake+0x21c>)
 800731a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800731e:	601a      	str	r2, [r3, #0]
 8007320:	f3bf 8f4f 	dsb	sy
 8007324:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007328:	f001 ff08 	bl	800913c <vPortExitCritical>
				return pdPASS;
 800732c:	2301      	movs	r3, #1
 800732e:	e098      	b.n	8007462 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d112      	bne.n	800735c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007338:	2b00      	cmp	r3, #0
 800733a:	d00b      	beq.n	8007354 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800733c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007340:	f383 8811 	msr	BASEPRI, r3
 8007344:	f3bf 8f6f 	isb	sy
 8007348:	f3bf 8f4f 	dsb	sy
 800734c:	617b      	str	r3, [r7, #20]
}
 800734e:	bf00      	nop
 8007350:	bf00      	nop
 8007352:	e7fd      	b.n	8007350 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007354:	f001 fef2 	bl	800913c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007358:	2300      	movs	r3, #0
 800735a:	e082      	b.n	8007462 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800735c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800735e:	2b00      	cmp	r3, #0
 8007360:	d106      	bne.n	8007370 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007362:	f107 030c 	add.w	r3, r7, #12
 8007366:	4618      	mov	r0, r3
 8007368:	f000 feda 	bl	8008120 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800736c:	2301      	movs	r3, #1
 800736e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007370:	f001 fee4 	bl	800913c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007374:	f000 fc30 	bl	8007bd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007378:	f001 feae 	bl	80090d8 <vPortEnterCritical>
 800737c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800737e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007382:	b25b      	sxtb	r3, r3
 8007384:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007388:	d103      	bne.n	8007392 <xQueueSemaphoreTake+0x142>
 800738a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800738c:	2200      	movs	r2, #0
 800738e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007394:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007398:	b25b      	sxtb	r3, r3
 800739a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800739e:	d103      	bne.n	80073a8 <xQueueSemaphoreTake+0x158>
 80073a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073a2:	2200      	movs	r2, #0
 80073a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80073a8:	f001 fec8 	bl	800913c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80073ac:	463a      	mov	r2, r7
 80073ae:	f107 030c 	add.w	r3, r7, #12
 80073b2:	4611      	mov	r1, r2
 80073b4:	4618      	mov	r0, r3
 80073b6:	f000 fec9 	bl	800814c <xTaskCheckForTimeOut>
 80073ba:	4603      	mov	r3, r0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d132      	bne.n	8007426 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80073c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80073c2:	f000 f94f 	bl	8007664 <prvIsQueueEmpty>
 80073c6:	4603      	mov	r3, r0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d026      	beq.n	800741a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80073cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d109      	bne.n	80073e8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80073d4:	f001 fe80 	bl	80090d8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80073d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	4618      	mov	r0, r3
 80073de:	f001 f82f 	bl	8008440 <xTaskPriorityInherit>
 80073e2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80073e4:	f001 feaa 	bl	800913c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80073e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073ea:	3324      	adds	r3, #36	@ 0x24
 80073ec:	683a      	ldr	r2, [r7, #0]
 80073ee:	4611      	mov	r1, r2
 80073f0:	4618      	mov	r0, r3
 80073f2:	f000 fddf 	bl	8007fb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80073f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80073f8:	f000 f8e2 	bl	80075c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80073fc:	f000 fbfa 	bl	8007bf4 <xTaskResumeAll>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	f47f af67 	bne.w	80072d6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007408:	4b18      	ldr	r3, [pc, #96]	@ (800746c <xQueueSemaphoreTake+0x21c>)
 800740a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800740e:	601a      	str	r2, [r3, #0]
 8007410:	f3bf 8f4f 	dsb	sy
 8007414:	f3bf 8f6f 	isb	sy
 8007418:	e75d      	b.n	80072d6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800741a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800741c:	f000 f8d0 	bl	80075c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007420:	f000 fbe8 	bl	8007bf4 <xTaskResumeAll>
 8007424:	e757      	b.n	80072d6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007426:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007428:	f000 f8ca 	bl	80075c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800742c:	f000 fbe2 	bl	8007bf4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007430:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007432:	f000 f917 	bl	8007664 <prvIsQueueEmpty>
 8007436:	4603      	mov	r3, r0
 8007438:	2b00      	cmp	r3, #0
 800743a:	f43f af4c 	beq.w	80072d6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800743e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007440:	2b00      	cmp	r3, #0
 8007442:	d00d      	beq.n	8007460 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007444:	f001 fe48 	bl	80090d8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007448:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800744a:	f000 f811 	bl	8007470 <prvGetDisinheritPriorityAfterTimeout>
 800744e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007456:	4618      	mov	r0, r3
 8007458:	f001 f8ca 	bl	80085f0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800745c:	f001 fe6e 	bl	800913c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007460:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007462:	4618      	mov	r0, r3
 8007464:	3738      	adds	r7, #56	@ 0x38
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop
 800746c:	e000ed04 	.word	0xe000ed04

08007470 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007470:	b480      	push	{r7}
 8007472:	b085      	sub	sp, #20
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800747c:	2b00      	cmp	r3, #0
 800747e:	d006      	beq.n	800748e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800748a:	60fb      	str	r3, [r7, #12]
 800748c:	e001      	b.n	8007492 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800748e:	2300      	movs	r3, #0
 8007490:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007492:	68fb      	ldr	r3, [r7, #12]
	}
 8007494:	4618      	mov	r0, r3
 8007496:	3714      	adds	r7, #20
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b086      	sub	sp, #24
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	60b9      	str	r1, [r7, #8]
 80074aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80074ac:	2300      	movs	r3, #0
 80074ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d10d      	bne.n	80074da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d14d      	bne.n	8007562 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	4618      	mov	r0, r3
 80074cc:	f001 f820 	bl	8008510 <xTaskPriorityDisinherit>
 80074d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2200      	movs	r2, #0
 80074d6:	609a      	str	r2, [r3, #8]
 80074d8:	e043      	b.n	8007562 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d119      	bne.n	8007514 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	6858      	ldr	r0, [r3, #4]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074e8:	461a      	mov	r2, r3
 80074ea:	68b9      	ldr	r1, [r7, #8]
 80074ec:	f002 f9c2 	bl	8009874 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	685a      	ldr	r2, [r3, #4]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074f8:	441a      	add	r2, r3
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	685a      	ldr	r2, [r3, #4]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	429a      	cmp	r2, r3
 8007508:	d32b      	bcc.n	8007562 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	605a      	str	r2, [r3, #4]
 8007512:	e026      	b.n	8007562 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	68d8      	ldr	r0, [r3, #12]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800751c:	461a      	mov	r2, r3
 800751e:	68b9      	ldr	r1, [r7, #8]
 8007520:	f002 f9a8 	bl	8009874 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	68da      	ldr	r2, [r3, #12]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800752c:	425b      	negs	r3, r3
 800752e:	441a      	add	r2, r3
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	68da      	ldr	r2, [r3, #12]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	429a      	cmp	r2, r3
 800753e:	d207      	bcs.n	8007550 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	689a      	ldr	r2, [r3, #8]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007548:	425b      	negs	r3, r3
 800754a:	441a      	add	r2, r3
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2b02      	cmp	r3, #2
 8007554:	d105      	bne.n	8007562 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d002      	beq.n	8007562 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	3b01      	subs	r3, #1
 8007560:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	1c5a      	adds	r2, r3, #1
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800756a:	697b      	ldr	r3, [r7, #20]
}
 800756c:	4618      	mov	r0, r3
 800756e:	3718      	adds	r7, #24
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b082      	sub	sp, #8
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007582:	2b00      	cmp	r3, #0
 8007584:	d018      	beq.n	80075b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	68da      	ldr	r2, [r3, #12]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800758e:	441a      	add	r2, r3
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	68da      	ldr	r2, [r3, #12]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	429a      	cmp	r2, r3
 800759e:	d303      	bcc.n	80075a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	68d9      	ldr	r1, [r3, #12]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075b0:	461a      	mov	r2, r3
 80075b2:	6838      	ldr	r0, [r7, #0]
 80075b4:	f002 f95e 	bl	8009874 <memcpy>
	}
}
 80075b8:	bf00      	nop
 80075ba:	3708      	adds	r7, #8
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b084      	sub	sp, #16
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80075c8:	f001 fd86 	bl	80090d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80075d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80075d4:	e011      	b.n	80075fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d012      	beq.n	8007604 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	3324      	adds	r3, #36	@ 0x24
 80075e2:	4618      	mov	r0, r3
 80075e4:	f000 fd38 	bl	8008058 <xTaskRemoveFromEventList>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d001      	beq.n	80075f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80075ee:	f000 fe11 	bl	8008214 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80075f2:	7bfb      	ldrb	r3, [r7, #15]
 80075f4:	3b01      	subs	r3, #1
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80075fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	dce9      	bgt.n	80075d6 <prvUnlockQueue+0x16>
 8007602:	e000      	b.n	8007606 <prvUnlockQueue+0x46>
					break;
 8007604:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	22ff      	movs	r2, #255	@ 0xff
 800760a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800760e:	f001 fd95 	bl	800913c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007612:	f001 fd61 	bl	80090d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800761c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800761e:	e011      	b.n	8007644 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	691b      	ldr	r3, [r3, #16]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d012      	beq.n	800764e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	3310      	adds	r3, #16
 800762c:	4618      	mov	r0, r3
 800762e:	f000 fd13 	bl	8008058 <xTaskRemoveFromEventList>
 8007632:	4603      	mov	r3, r0
 8007634:	2b00      	cmp	r3, #0
 8007636:	d001      	beq.n	800763c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007638:	f000 fdec 	bl	8008214 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800763c:	7bbb      	ldrb	r3, [r7, #14]
 800763e:	3b01      	subs	r3, #1
 8007640:	b2db      	uxtb	r3, r3
 8007642:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007644:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007648:	2b00      	cmp	r3, #0
 800764a:	dce9      	bgt.n	8007620 <prvUnlockQueue+0x60>
 800764c:	e000      	b.n	8007650 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800764e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	22ff      	movs	r2, #255	@ 0xff
 8007654:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007658:	f001 fd70 	bl	800913c <vPortExitCritical>
}
 800765c:	bf00      	nop
 800765e:	3710      	adds	r7, #16
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800766c:	f001 fd34 	bl	80090d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007674:	2b00      	cmp	r3, #0
 8007676:	d102      	bne.n	800767e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007678:	2301      	movs	r3, #1
 800767a:	60fb      	str	r3, [r7, #12]
 800767c:	e001      	b.n	8007682 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800767e:	2300      	movs	r3, #0
 8007680:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007682:	f001 fd5b 	bl	800913c <vPortExitCritical>

	return xReturn;
 8007686:	68fb      	ldr	r3, [r7, #12]
}
 8007688:	4618      	mov	r0, r3
 800768a:	3710      	adds	r7, #16
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007698:	f001 fd1e 	bl	80090d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d102      	bne.n	80076ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80076a8:	2301      	movs	r3, #1
 80076aa:	60fb      	str	r3, [r7, #12]
 80076ac:	e001      	b.n	80076b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80076ae:	2300      	movs	r3, #0
 80076b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80076b2:	f001 fd43 	bl	800913c <vPortExitCritical>

	return xReturn;
 80076b6:	68fb      	ldr	r3, [r7, #12]
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3710      	adds	r7, #16
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80076c0:	b480      	push	{r7}
 80076c2:	b085      	sub	sp, #20
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80076ca:	2300      	movs	r3, #0
 80076cc:	60fb      	str	r3, [r7, #12]
 80076ce:	e014      	b.n	80076fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80076d0:	4a0f      	ldr	r2, [pc, #60]	@ (8007710 <vQueueAddToRegistry+0x50>)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d10b      	bne.n	80076f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80076dc:	490c      	ldr	r1, [pc, #48]	@ (8007710 <vQueueAddToRegistry+0x50>)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	683a      	ldr	r2, [r7, #0]
 80076e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80076e6:	4a0a      	ldr	r2, [pc, #40]	@ (8007710 <vQueueAddToRegistry+0x50>)
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	00db      	lsls	r3, r3, #3
 80076ec:	4413      	add	r3, r2
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80076f2:	e006      	b.n	8007702 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	3301      	adds	r3, #1
 80076f8:	60fb      	str	r3, [r7, #12]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2b07      	cmp	r3, #7
 80076fe:	d9e7      	bls.n	80076d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007700:	bf00      	nop
 8007702:	bf00      	nop
 8007704:	3714      	adds	r7, #20
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr
 800770e:	bf00      	nop
 8007710:	20001244 	.word	0x20001244

08007714 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007714:	b580      	push	{r7, lr}
 8007716:	b086      	sub	sp, #24
 8007718:	af00      	add	r7, sp, #0
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	60b9      	str	r1, [r7, #8]
 800771e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007724:	f001 fcd8 	bl	80090d8 <vPortEnterCritical>
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800772e:	b25b      	sxtb	r3, r3
 8007730:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007734:	d103      	bne.n	800773e <vQueueWaitForMessageRestricted+0x2a>
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	2200      	movs	r2, #0
 800773a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007744:	b25b      	sxtb	r3, r3
 8007746:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800774a:	d103      	bne.n	8007754 <vQueueWaitForMessageRestricted+0x40>
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	2200      	movs	r2, #0
 8007750:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007754:	f001 fcf2 	bl	800913c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800775c:	2b00      	cmp	r3, #0
 800775e:	d106      	bne.n	800776e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	3324      	adds	r3, #36	@ 0x24
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	68b9      	ldr	r1, [r7, #8]
 8007768:	4618      	mov	r0, r3
 800776a:	f000 fc49 	bl	8008000 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800776e:	6978      	ldr	r0, [r7, #20]
 8007770:	f7ff ff26 	bl	80075c0 <prvUnlockQueue>
	}
 8007774:	bf00      	nop
 8007776:	3718      	adds	r7, #24
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}

0800777c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800777c:	b580      	push	{r7, lr}
 800777e:	b08e      	sub	sp, #56	@ 0x38
 8007780:	af04      	add	r7, sp, #16
 8007782:	60f8      	str	r0, [r7, #12]
 8007784:	60b9      	str	r1, [r7, #8]
 8007786:	607a      	str	r2, [r7, #4]
 8007788:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800778a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800778c:	2b00      	cmp	r3, #0
 800778e:	d10b      	bne.n	80077a8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007794:	f383 8811 	msr	BASEPRI, r3
 8007798:	f3bf 8f6f 	isb	sy
 800779c:	f3bf 8f4f 	dsb	sy
 80077a0:	623b      	str	r3, [r7, #32]
}
 80077a2:	bf00      	nop
 80077a4:	bf00      	nop
 80077a6:	e7fd      	b.n	80077a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80077a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d10b      	bne.n	80077c6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80077ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077b2:	f383 8811 	msr	BASEPRI, r3
 80077b6:	f3bf 8f6f 	isb	sy
 80077ba:	f3bf 8f4f 	dsb	sy
 80077be:	61fb      	str	r3, [r7, #28]
}
 80077c0:	bf00      	nop
 80077c2:	bf00      	nop
 80077c4:	e7fd      	b.n	80077c2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80077c6:	23a8      	movs	r3, #168	@ 0xa8
 80077c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	2ba8      	cmp	r3, #168	@ 0xa8
 80077ce:	d00b      	beq.n	80077e8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80077d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077d4:	f383 8811 	msr	BASEPRI, r3
 80077d8:	f3bf 8f6f 	isb	sy
 80077dc:	f3bf 8f4f 	dsb	sy
 80077e0:	61bb      	str	r3, [r7, #24]
}
 80077e2:	bf00      	nop
 80077e4:	bf00      	nop
 80077e6:	e7fd      	b.n	80077e4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80077e8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80077ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d01e      	beq.n	800782e <xTaskCreateStatic+0xb2>
 80077f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d01b      	beq.n	800782e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80077f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077f8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80077fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80077fe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007802:	2202      	movs	r2, #2
 8007804:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007808:	2300      	movs	r3, #0
 800780a:	9303      	str	r3, [sp, #12]
 800780c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800780e:	9302      	str	r3, [sp, #8]
 8007810:	f107 0314 	add.w	r3, r7, #20
 8007814:	9301      	str	r3, [sp, #4]
 8007816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007818:	9300      	str	r3, [sp, #0]
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	68b9      	ldr	r1, [r7, #8]
 8007820:	68f8      	ldr	r0, [r7, #12]
 8007822:	f000 f851 	bl	80078c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007826:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007828:	f000 f8f6 	bl	8007a18 <prvAddNewTaskToReadyList>
 800782c:	e001      	b.n	8007832 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800782e:	2300      	movs	r3, #0
 8007830:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007832:	697b      	ldr	r3, [r7, #20]
	}
 8007834:	4618      	mov	r0, r3
 8007836:	3728      	adds	r7, #40	@ 0x28
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800783c:	b580      	push	{r7, lr}
 800783e:	b08c      	sub	sp, #48	@ 0x30
 8007840:	af04      	add	r7, sp, #16
 8007842:	60f8      	str	r0, [r7, #12]
 8007844:	60b9      	str	r1, [r7, #8]
 8007846:	603b      	str	r3, [r7, #0]
 8007848:	4613      	mov	r3, r2
 800784a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800784c:	88fb      	ldrh	r3, [r7, #6]
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	4618      	mov	r0, r3
 8007852:	f001 fd63 	bl	800931c <pvPortMalloc>
 8007856:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00e      	beq.n	800787c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800785e:	20a8      	movs	r0, #168	@ 0xa8
 8007860:	f001 fd5c 	bl	800931c <pvPortMalloc>
 8007864:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007866:	69fb      	ldr	r3, [r7, #28]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d003      	beq.n	8007874 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800786c:	69fb      	ldr	r3, [r7, #28]
 800786e:	697a      	ldr	r2, [r7, #20]
 8007870:	631a      	str	r2, [r3, #48]	@ 0x30
 8007872:	e005      	b.n	8007880 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007874:	6978      	ldr	r0, [r7, #20]
 8007876:	f001 fe1f 	bl	80094b8 <vPortFree>
 800787a:	e001      	b.n	8007880 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800787c:	2300      	movs	r3, #0
 800787e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007880:	69fb      	ldr	r3, [r7, #28]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d017      	beq.n	80078b6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	2200      	movs	r2, #0
 800788a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800788e:	88fa      	ldrh	r2, [r7, #6]
 8007890:	2300      	movs	r3, #0
 8007892:	9303      	str	r3, [sp, #12]
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	9302      	str	r3, [sp, #8]
 8007898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800789a:	9301      	str	r3, [sp, #4]
 800789c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800789e:	9300      	str	r3, [sp, #0]
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	68b9      	ldr	r1, [r7, #8]
 80078a4:	68f8      	ldr	r0, [r7, #12]
 80078a6:	f000 f80f 	bl	80078c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80078aa:	69f8      	ldr	r0, [r7, #28]
 80078ac:	f000 f8b4 	bl	8007a18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80078b0:	2301      	movs	r3, #1
 80078b2:	61bb      	str	r3, [r7, #24]
 80078b4:	e002      	b.n	80078bc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80078b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80078ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80078bc:	69bb      	ldr	r3, [r7, #24]
	}
 80078be:	4618      	mov	r0, r3
 80078c0:	3720      	adds	r7, #32
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
	...

080078c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b088      	sub	sp, #32
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	607a      	str	r2, [r7, #4]
 80078d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80078d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	461a      	mov	r2, r3
 80078e0:	21a5      	movs	r1, #165	@ 0xa5
 80078e2:	f001 ff29 	bl	8009738 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80078e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80078f0:	3b01      	subs	r3, #1
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	4413      	add	r3, r2
 80078f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80078f8:	69bb      	ldr	r3, [r7, #24]
 80078fa:	f023 0307 	bic.w	r3, r3, #7
 80078fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007900:	69bb      	ldr	r3, [r7, #24]
 8007902:	f003 0307 	and.w	r3, r3, #7
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00b      	beq.n	8007922 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800790a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800790e:	f383 8811 	msr	BASEPRI, r3
 8007912:	f3bf 8f6f 	isb	sy
 8007916:	f3bf 8f4f 	dsb	sy
 800791a:	617b      	str	r3, [r7, #20]
}
 800791c:	bf00      	nop
 800791e:	bf00      	nop
 8007920:	e7fd      	b.n	800791e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d01f      	beq.n	8007968 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007928:	2300      	movs	r3, #0
 800792a:	61fb      	str	r3, [r7, #28]
 800792c:	e012      	b.n	8007954 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800792e:	68ba      	ldr	r2, [r7, #8]
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	4413      	add	r3, r2
 8007934:	7819      	ldrb	r1, [r3, #0]
 8007936:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	4413      	add	r3, r2
 800793c:	3334      	adds	r3, #52	@ 0x34
 800793e:	460a      	mov	r2, r1
 8007940:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007942:	68ba      	ldr	r2, [r7, #8]
 8007944:	69fb      	ldr	r3, [r7, #28]
 8007946:	4413      	add	r3, r2
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d006      	beq.n	800795c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	3301      	adds	r3, #1
 8007952:	61fb      	str	r3, [r7, #28]
 8007954:	69fb      	ldr	r3, [r7, #28]
 8007956:	2b0f      	cmp	r3, #15
 8007958:	d9e9      	bls.n	800792e <prvInitialiseNewTask+0x66>
 800795a:	e000      	b.n	800795e <prvInitialiseNewTask+0x96>
			{
				break;
 800795c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800795e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007960:	2200      	movs	r2, #0
 8007962:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007966:	e003      	b.n	8007970 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800796a:	2200      	movs	r2, #0
 800796c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007972:	2b37      	cmp	r3, #55	@ 0x37
 8007974:	d901      	bls.n	800797a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007976:	2337      	movs	r3, #55	@ 0x37
 8007978:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800797a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800797c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800797e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007982:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007984:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007988:	2200      	movs	r2, #0
 800798a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800798c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800798e:	3304      	adds	r3, #4
 8007990:	4618      	mov	r0, r3
 8007992:	f7fe ff49 	bl	8006828 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007998:	3318      	adds	r3, #24
 800799a:	4618      	mov	r0, r3
 800799c:	f7fe ff44 	bl	8006828 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80079a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079a4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079a8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80079ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80079b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079b4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80079b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b8:	2200      	movs	r2, #0
 80079ba:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80079be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c0:	2200      	movs	r2, #0
 80079c2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80079c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c8:	3354      	adds	r3, #84	@ 0x54
 80079ca:	224c      	movs	r2, #76	@ 0x4c
 80079cc:	2100      	movs	r1, #0
 80079ce:	4618      	mov	r0, r3
 80079d0:	f001 feb2 	bl	8009738 <memset>
 80079d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d6:	4a0d      	ldr	r2, [pc, #52]	@ (8007a0c <prvInitialiseNewTask+0x144>)
 80079d8:	659a      	str	r2, [r3, #88]	@ 0x58
 80079da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079dc:	4a0c      	ldr	r2, [pc, #48]	@ (8007a10 <prvInitialiseNewTask+0x148>)
 80079de:	65da      	str	r2, [r3, #92]	@ 0x5c
 80079e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e2:	4a0c      	ldr	r2, [pc, #48]	@ (8007a14 <prvInitialiseNewTask+0x14c>)
 80079e4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80079e6:	683a      	ldr	r2, [r7, #0]
 80079e8:	68f9      	ldr	r1, [r7, #12]
 80079ea:	69b8      	ldr	r0, [r7, #24]
 80079ec:	f001 fa46 	bl	8008e7c <pxPortInitialiseStack>
 80079f0:	4602      	mov	r2, r0
 80079f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079f4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80079f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d002      	beq.n	8007a02 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80079fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a02:	bf00      	nop
 8007a04:	3720      	adds	r7, #32
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
 8007a0a:	bf00      	nop
 8007a0c:	200054d8 	.word	0x200054d8
 8007a10:	20005540 	.word	0x20005540
 8007a14:	200055a8 	.word	0x200055a8

08007a18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007a20:	f001 fb5a 	bl	80090d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007a24:	4b2d      	ldr	r3, [pc, #180]	@ (8007adc <prvAddNewTaskToReadyList+0xc4>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	3301      	adds	r3, #1
 8007a2a:	4a2c      	ldr	r2, [pc, #176]	@ (8007adc <prvAddNewTaskToReadyList+0xc4>)
 8007a2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007a2e:	4b2c      	ldr	r3, [pc, #176]	@ (8007ae0 <prvAddNewTaskToReadyList+0xc8>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d109      	bne.n	8007a4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007a36:	4a2a      	ldr	r2, [pc, #168]	@ (8007ae0 <prvAddNewTaskToReadyList+0xc8>)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007a3c:	4b27      	ldr	r3, [pc, #156]	@ (8007adc <prvAddNewTaskToReadyList+0xc4>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d110      	bne.n	8007a66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007a44:	f000 fc0a 	bl	800825c <prvInitialiseTaskLists>
 8007a48:	e00d      	b.n	8007a66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007a4a:	4b26      	ldr	r3, [pc, #152]	@ (8007ae4 <prvAddNewTaskToReadyList+0xcc>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d109      	bne.n	8007a66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007a52:	4b23      	ldr	r3, [pc, #140]	@ (8007ae0 <prvAddNewTaskToReadyList+0xc8>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d802      	bhi.n	8007a66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007a60:	4a1f      	ldr	r2, [pc, #124]	@ (8007ae0 <prvAddNewTaskToReadyList+0xc8>)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007a66:	4b20      	ldr	r3, [pc, #128]	@ (8007ae8 <prvAddNewTaskToReadyList+0xd0>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	4a1e      	ldr	r2, [pc, #120]	@ (8007ae8 <prvAddNewTaskToReadyList+0xd0>)
 8007a6e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007a70:	4b1d      	ldr	r3, [pc, #116]	@ (8007ae8 <prvAddNewTaskToReadyList+0xd0>)
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a7c:	4b1b      	ldr	r3, [pc, #108]	@ (8007aec <prvAddNewTaskToReadyList+0xd4>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d903      	bls.n	8007a8c <prvAddNewTaskToReadyList+0x74>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a88:	4a18      	ldr	r2, [pc, #96]	@ (8007aec <prvAddNewTaskToReadyList+0xd4>)
 8007a8a:	6013      	str	r3, [r2, #0]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a90:	4613      	mov	r3, r2
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	4413      	add	r3, r2
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	4a15      	ldr	r2, [pc, #84]	@ (8007af0 <prvAddNewTaskToReadyList+0xd8>)
 8007a9a:	441a      	add	r2, r3
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	3304      	adds	r3, #4
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	4610      	mov	r0, r2
 8007aa4:	f7fe fecd 	bl	8006842 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007aa8:	f001 fb48 	bl	800913c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007aac:	4b0d      	ldr	r3, [pc, #52]	@ (8007ae4 <prvAddNewTaskToReadyList+0xcc>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d00e      	beq.n	8007ad2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8007ae0 <prvAddNewTaskToReadyList+0xc8>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	d207      	bcs.n	8007ad2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007ac2:	4b0c      	ldr	r3, [pc, #48]	@ (8007af4 <prvAddNewTaskToReadyList+0xdc>)
 8007ac4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ac8:	601a      	str	r2, [r3, #0]
 8007aca:	f3bf 8f4f 	dsb	sy
 8007ace:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ad2:	bf00      	nop
 8007ad4:	3708      	adds	r7, #8
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
 8007ada:	bf00      	nop
 8007adc:	20001758 	.word	0x20001758
 8007ae0:	20001284 	.word	0x20001284
 8007ae4:	20001764 	.word	0x20001764
 8007ae8:	20001774 	.word	0x20001774
 8007aec:	20001760 	.word	0x20001760
 8007af0:	20001288 	.word	0x20001288
 8007af4:	e000ed04 	.word	0xe000ed04

08007af8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b08a      	sub	sp, #40	@ 0x28
 8007afc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007afe:	2300      	movs	r3, #0
 8007b00:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007b02:	2300      	movs	r3, #0
 8007b04:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007b06:	463a      	mov	r2, r7
 8007b08:	1d39      	adds	r1, r7, #4
 8007b0a:	f107 0308 	add.w	r3, r7, #8
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7fe fe36 	bl	8006780 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007b14:	6839      	ldr	r1, [r7, #0]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	68ba      	ldr	r2, [r7, #8]
 8007b1a:	9202      	str	r2, [sp, #8]
 8007b1c:	9301      	str	r3, [sp, #4]
 8007b1e:	2300      	movs	r3, #0
 8007b20:	9300      	str	r3, [sp, #0]
 8007b22:	2300      	movs	r3, #0
 8007b24:	460a      	mov	r2, r1
 8007b26:	4924      	ldr	r1, [pc, #144]	@ (8007bb8 <vTaskStartScheduler+0xc0>)
 8007b28:	4824      	ldr	r0, [pc, #144]	@ (8007bbc <vTaskStartScheduler+0xc4>)
 8007b2a:	f7ff fe27 	bl	800777c <xTaskCreateStatic>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	4a23      	ldr	r2, [pc, #140]	@ (8007bc0 <vTaskStartScheduler+0xc8>)
 8007b32:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007b34:	4b22      	ldr	r3, [pc, #136]	@ (8007bc0 <vTaskStartScheduler+0xc8>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d002      	beq.n	8007b42 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	617b      	str	r3, [r7, #20]
 8007b40:	e001      	b.n	8007b46 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007b42:	2300      	movs	r3, #0
 8007b44:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d102      	bne.n	8007b52 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007b4c:	f000 fe3c 	bl	80087c8 <xTimerCreateTimerTask>
 8007b50:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d11b      	bne.n	8007b90 <vTaskStartScheduler+0x98>
	__asm volatile
 8007b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b5c:	f383 8811 	msr	BASEPRI, r3
 8007b60:	f3bf 8f6f 	isb	sy
 8007b64:	f3bf 8f4f 	dsb	sy
 8007b68:	613b      	str	r3, [r7, #16]
}
 8007b6a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007b6c:	4b15      	ldr	r3, [pc, #84]	@ (8007bc4 <vTaskStartScheduler+0xcc>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	3354      	adds	r3, #84	@ 0x54
 8007b72:	4a15      	ldr	r2, [pc, #84]	@ (8007bc8 <vTaskStartScheduler+0xd0>)
 8007b74:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007b76:	4b15      	ldr	r3, [pc, #84]	@ (8007bcc <vTaskStartScheduler+0xd4>)
 8007b78:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007b7c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007b7e:	4b14      	ldr	r3, [pc, #80]	@ (8007bd0 <vTaskStartScheduler+0xd8>)
 8007b80:	2201      	movs	r2, #1
 8007b82:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007b84:	4b13      	ldr	r3, [pc, #76]	@ (8007bd4 <vTaskStartScheduler+0xdc>)
 8007b86:	2200      	movs	r2, #0
 8007b88:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007b8a:	f001 fa01 	bl	8008f90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007b8e:	e00f      	b.n	8007bb0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b96:	d10b      	bne.n	8007bb0 <vTaskStartScheduler+0xb8>
	__asm volatile
 8007b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b9c:	f383 8811 	msr	BASEPRI, r3
 8007ba0:	f3bf 8f6f 	isb	sy
 8007ba4:	f3bf 8f4f 	dsb	sy
 8007ba8:	60fb      	str	r3, [r7, #12]
}
 8007baa:	bf00      	nop
 8007bac:	bf00      	nop
 8007bae:	e7fd      	b.n	8007bac <vTaskStartScheduler+0xb4>
}
 8007bb0:	bf00      	nop
 8007bb2:	3718      	adds	r7, #24
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}
 8007bb8:	0800a8d8 	.word	0x0800a8d8
 8007bbc:	0800822d 	.word	0x0800822d
 8007bc0:	2000177c 	.word	0x2000177c
 8007bc4:	20001284 	.word	0x20001284
 8007bc8:	20000014 	.word	0x20000014
 8007bcc:	20001778 	.word	0x20001778
 8007bd0:	20001764 	.word	0x20001764
 8007bd4:	2000175c 	.word	0x2000175c

08007bd8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007bd8:	b480      	push	{r7}
 8007bda:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007bdc:	4b04      	ldr	r3, [pc, #16]	@ (8007bf0 <vTaskSuspendAll+0x18>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	3301      	adds	r3, #1
 8007be2:	4a03      	ldr	r2, [pc, #12]	@ (8007bf0 <vTaskSuspendAll+0x18>)
 8007be4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007be6:	bf00      	nop
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr
 8007bf0:	20001780 	.word	0x20001780

08007bf4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007c02:	4b42      	ldr	r3, [pc, #264]	@ (8007d0c <xTaskResumeAll+0x118>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d10b      	bne.n	8007c22 <xTaskResumeAll+0x2e>
	__asm volatile
 8007c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c0e:	f383 8811 	msr	BASEPRI, r3
 8007c12:	f3bf 8f6f 	isb	sy
 8007c16:	f3bf 8f4f 	dsb	sy
 8007c1a:	603b      	str	r3, [r7, #0]
}
 8007c1c:	bf00      	nop
 8007c1e:	bf00      	nop
 8007c20:	e7fd      	b.n	8007c1e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007c22:	f001 fa59 	bl	80090d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007c26:	4b39      	ldr	r3, [pc, #228]	@ (8007d0c <xTaskResumeAll+0x118>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	3b01      	subs	r3, #1
 8007c2c:	4a37      	ldr	r2, [pc, #220]	@ (8007d0c <xTaskResumeAll+0x118>)
 8007c2e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c30:	4b36      	ldr	r3, [pc, #216]	@ (8007d0c <xTaskResumeAll+0x118>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d162      	bne.n	8007cfe <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007c38:	4b35      	ldr	r3, [pc, #212]	@ (8007d10 <xTaskResumeAll+0x11c>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d05e      	beq.n	8007cfe <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c40:	e02f      	b.n	8007ca2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c42:	4b34      	ldr	r3, [pc, #208]	@ (8007d14 <xTaskResumeAll+0x120>)
 8007c44:	68db      	ldr	r3, [r3, #12]
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	3318      	adds	r3, #24
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f7fe fe54 	bl	80068fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	3304      	adds	r3, #4
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f7fe fe4f 	bl	80068fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c62:	4b2d      	ldr	r3, [pc, #180]	@ (8007d18 <xTaskResumeAll+0x124>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d903      	bls.n	8007c72 <xTaskResumeAll+0x7e>
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c6e:	4a2a      	ldr	r2, [pc, #168]	@ (8007d18 <xTaskResumeAll+0x124>)
 8007c70:	6013      	str	r3, [r2, #0]
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c76:	4613      	mov	r3, r2
 8007c78:	009b      	lsls	r3, r3, #2
 8007c7a:	4413      	add	r3, r2
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	4a27      	ldr	r2, [pc, #156]	@ (8007d1c <xTaskResumeAll+0x128>)
 8007c80:	441a      	add	r2, r3
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	3304      	adds	r3, #4
 8007c86:	4619      	mov	r1, r3
 8007c88:	4610      	mov	r0, r2
 8007c8a:	f7fe fdda 	bl	8006842 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c92:	4b23      	ldr	r3, [pc, #140]	@ (8007d20 <xTaskResumeAll+0x12c>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d302      	bcc.n	8007ca2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007c9c:	4b21      	ldr	r3, [pc, #132]	@ (8007d24 <xTaskResumeAll+0x130>)
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ca2:	4b1c      	ldr	r3, [pc, #112]	@ (8007d14 <xTaskResumeAll+0x120>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d1cb      	bne.n	8007c42 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d001      	beq.n	8007cb4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007cb0:	f000 fb78 	bl	80083a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007cb4:	4b1c      	ldr	r3, [pc, #112]	@ (8007d28 <xTaskResumeAll+0x134>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d010      	beq.n	8007ce2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007cc0:	f000 f858 	bl	8007d74 <xTaskIncrementTick>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d002      	beq.n	8007cd0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007cca:	4b16      	ldr	r3, [pc, #88]	@ (8007d24 <xTaskResumeAll+0x130>)
 8007ccc:	2201      	movs	r2, #1
 8007cce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	3b01      	subs	r3, #1
 8007cd4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d1f1      	bne.n	8007cc0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007cdc:	4b12      	ldr	r3, [pc, #72]	@ (8007d28 <xTaskResumeAll+0x134>)
 8007cde:	2200      	movs	r2, #0
 8007ce0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007ce2:	4b10      	ldr	r3, [pc, #64]	@ (8007d24 <xTaskResumeAll+0x130>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d009      	beq.n	8007cfe <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007cea:	2301      	movs	r3, #1
 8007cec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007cee:	4b0f      	ldr	r3, [pc, #60]	@ (8007d2c <xTaskResumeAll+0x138>)
 8007cf0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cf4:	601a      	str	r2, [r3, #0]
 8007cf6:	f3bf 8f4f 	dsb	sy
 8007cfa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007cfe:	f001 fa1d 	bl	800913c <vPortExitCritical>

	return xAlreadyYielded;
 8007d02:	68bb      	ldr	r3, [r7, #8]
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3710      	adds	r7, #16
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}
 8007d0c:	20001780 	.word	0x20001780
 8007d10:	20001758 	.word	0x20001758
 8007d14:	20001718 	.word	0x20001718
 8007d18:	20001760 	.word	0x20001760
 8007d1c:	20001288 	.word	0x20001288
 8007d20:	20001284 	.word	0x20001284
 8007d24:	2000176c 	.word	0x2000176c
 8007d28:	20001768 	.word	0x20001768
 8007d2c:	e000ed04 	.word	0xe000ed04

08007d30 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007d36:	4b05      	ldr	r3, [pc, #20]	@ (8007d4c <xTaskGetTickCount+0x1c>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007d3c:	687b      	ldr	r3, [r7, #4]
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	370c      	adds	r7, #12
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr
 8007d4a:	bf00      	nop
 8007d4c:	2000175c 	.word	0x2000175c

08007d50 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d56:	f001 fa9f 	bl	8009298 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007d5e:	4b04      	ldr	r3, [pc, #16]	@ (8007d70 <xTaskGetTickCountFromISR+0x20>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007d64:	683b      	ldr	r3, [r7, #0]
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3708      	adds	r7, #8
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	2000175c 	.word	0x2000175c

08007d74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b086      	sub	sp, #24
 8007d78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d7e:	4b4f      	ldr	r3, [pc, #316]	@ (8007ebc <xTaskIncrementTick+0x148>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	f040 8090 	bne.w	8007ea8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007d88:	4b4d      	ldr	r3, [pc, #308]	@ (8007ec0 <xTaskIncrementTick+0x14c>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007d90:	4a4b      	ldr	r2, [pc, #300]	@ (8007ec0 <xTaskIncrementTick+0x14c>)
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d121      	bne.n	8007de0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007d9c:	4b49      	ldr	r3, [pc, #292]	@ (8007ec4 <xTaskIncrementTick+0x150>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d00b      	beq.n	8007dbe <xTaskIncrementTick+0x4a>
	__asm volatile
 8007da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007daa:	f383 8811 	msr	BASEPRI, r3
 8007dae:	f3bf 8f6f 	isb	sy
 8007db2:	f3bf 8f4f 	dsb	sy
 8007db6:	603b      	str	r3, [r7, #0]
}
 8007db8:	bf00      	nop
 8007dba:	bf00      	nop
 8007dbc:	e7fd      	b.n	8007dba <xTaskIncrementTick+0x46>
 8007dbe:	4b41      	ldr	r3, [pc, #260]	@ (8007ec4 <xTaskIncrementTick+0x150>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	60fb      	str	r3, [r7, #12]
 8007dc4:	4b40      	ldr	r3, [pc, #256]	@ (8007ec8 <xTaskIncrementTick+0x154>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a3e      	ldr	r2, [pc, #248]	@ (8007ec4 <xTaskIncrementTick+0x150>)
 8007dca:	6013      	str	r3, [r2, #0]
 8007dcc:	4a3e      	ldr	r2, [pc, #248]	@ (8007ec8 <xTaskIncrementTick+0x154>)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	6013      	str	r3, [r2, #0]
 8007dd2:	4b3e      	ldr	r3, [pc, #248]	@ (8007ecc <xTaskIncrementTick+0x158>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	4a3c      	ldr	r2, [pc, #240]	@ (8007ecc <xTaskIncrementTick+0x158>)
 8007dda:	6013      	str	r3, [r2, #0]
 8007ddc:	f000 fae2 	bl	80083a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007de0:	4b3b      	ldr	r3, [pc, #236]	@ (8007ed0 <xTaskIncrementTick+0x15c>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	693a      	ldr	r2, [r7, #16]
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d349      	bcc.n	8007e7e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007dea:	4b36      	ldr	r3, [pc, #216]	@ (8007ec4 <xTaskIncrementTick+0x150>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d104      	bne.n	8007dfe <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007df4:	4b36      	ldr	r3, [pc, #216]	@ (8007ed0 <xTaskIncrementTick+0x15c>)
 8007df6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007dfa:	601a      	str	r2, [r3, #0]
					break;
 8007dfc:	e03f      	b.n	8007e7e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dfe:	4b31      	ldr	r3, [pc, #196]	@ (8007ec4 <xTaskIncrementTick+0x150>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	68db      	ldr	r3, [r3, #12]
 8007e06:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007e0e:	693a      	ldr	r2, [r7, #16]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d203      	bcs.n	8007e1e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007e16:	4a2e      	ldr	r2, [pc, #184]	@ (8007ed0 <xTaskIncrementTick+0x15c>)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007e1c:	e02f      	b.n	8007e7e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	3304      	adds	r3, #4
 8007e22:	4618      	mov	r0, r3
 8007e24:	f7fe fd6a 	bl	80068fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d004      	beq.n	8007e3a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	3318      	adds	r3, #24
 8007e34:	4618      	mov	r0, r3
 8007e36:	f7fe fd61 	bl	80068fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e3e:	4b25      	ldr	r3, [pc, #148]	@ (8007ed4 <xTaskIncrementTick+0x160>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d903      	bls.n	8007e4e <xTaskIncrementTick+0xda>
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e4a:	4a22      	ldr	r2, [pc, #136]	@ (8007ed4 <xTaskIncrementTick+0x160>)
 8007e4c:	6013      	str	r3, [r2, #0]
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e52:	4613      	mov	r3, r2
 8007e54:	009b      	lsls	r3, r3, #2
 8007e56:	4413      	add	r3, r2
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	4a1f      	ldr	r2, [pc, #124]	@ (8007ed8 <xTaskIncrementTick+0x164>)
 8007e5c:	441a      	add	r2, r3
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	3304      	adds	r3, #4
 8007e62:	4619      	mov	r1, r3
 8007e64:	4610      	mov	r0, r2
 8007e66:	f7fe fcec 	bl	8006842 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8007edc <xTaskIncrementTick+0x168>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d3b8      	bcc.n	8007dea <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e7c:	e7b5      	b.n	8007dea <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007e7e:	4b17      	ldr	r3, [pc, #92]	@ (8007edc <xTaskIncrementTick+0x168>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e84:	4914      	ldr	r1, [pc, #80]	@ (8007ed8 <xTaskIncrementTick+0x164>)
 8007e86:	4613      	mov	r3, r2
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	4413      	add	r3, r2
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	440b      	add	r3, r1
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d901      	bls.n	8007e9a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007e96:	2301      	movs	r3, #1
 8007e98:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007e9a:	4b11      	ldr	r3, [pc, #68]	@ (8007ee0 <xTaskIncrementTick+0x16c>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d007      	beq.n	8007eb2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	617b      	str	r3, [r7, #20]
 8007ea6:	e004      	b.n	8007eb2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8007ee4 <xTaskIncrementTick+0x170>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	3301      	adds	r3, #1
 8007eae:	4a0d      	ldr	r2, [pc, #52]	@ (8007ee4 <xTaskIncrementTick+0x170>)
 8007eb0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007eb2:	697b      	ldr	r3, [r7, #20]
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3718      	adds	r7, #24
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}
 8007ebc:	20001780 	.word	0x20001780
 8007ec0:	2000175c 	.word	0x2000175c
 8007ec4:	20001710 	.word	0x20001710
 8007ec8:	20001714 	.word	0x20001714
 8007ecc:	20001770 	.word	0x20001770
 8007ed0:	20001778 	.word	0x20001778
 8007ed4:	20001760 	.word	0x20001760
 8007ed8:	20001288 	.word	0x20001288
 8007edc:	20001284 	.word	0x20001284
 8007ee0:	2000176c 	.word	0x2000176c
 8007ee4:	20001768 	.word	0x20001768

08007ee8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b085      	sub	sp, #20
 8007eec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007eee:	4b2b      	ldr	r3, [pc, #172]	@ (8007f9c <vTaskSwitchContext+0xb4>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d003      	beq.n	8007efe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007ef6:	4b2a      	ldr	r3, [pc, #168]	@ (8007fa0 <vTaskSwitchContext+0xb8>)
 8007ef8:	2201      	movs	r2, #1
 8007efa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007efc:	e047      	b.n	8007f8e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8007efe:	4b28      	ldr	r3, [pc, #160]	@ (8007fa0 <vTaskSwitchContext+0xb8>)
 8007f00:	2200      	movs	r2, #0
 8007f02:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f04:	4b27      	ldr	r3, [pc, #156]	@ (8007fa4 <vTaskSwitchContext+0xbc>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	60fb      	str	r3, [r7, #12]
 8007f0a:	e011      	b.n	8007f30 <vTaskSwitchContext+0x48>
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d10b      	bne.n	8007f2a <vTaskSwitchContext+0x42>
	__asm volatile
 8007f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f16:	f383 8811 	msr	BASEPRI, r3
 8007f1a:	f3bf 8f6f 	isb	sy
 8007f1e:	f3bf 8f4f 	dsb	sy
 8007f22:	607b      	str	r3, [r7, #4]
}
 8007f24:	bf00      	nop
 8007f26:	bf00      	nop
 8007f28:	e7fd      	b.n	8007f26 <vTaskSwitchContext+0x3e>
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	3b01      	subs	r3, #1
 8007f2e:	60fb      	str	r3, [r7, #12]
 8007f30:	491d      	ldr	r1, [pc, #116]	@ (8007fa8 <vTaskSwitchContext+0xc0>)
 8007f32:	68fa      	ldr	r2, [r7, #12]
 8007f34:	4613      	mov	r3, r2
 8007f36:	009b      	lsls	r3, r3, #2
 8007f38:	4413      	add	r3, r2
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	440b      	add	r3, r1
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d0e3      	beq.n	8007f0c <vTaskSwitchContext+0x24>
 8007f44:	68fa      	ldr	r2, [r7, #12]
 8007f46:	4613      	mov	r3, r2
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	4413      	add	r3, r2
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	4a16      	ldr	r2, [pc, #88]	@ (8007fa8 <vTaskSwitchContext+0xc0>)
 8007f50:	4413      	add	r3, r2
 8007f52:	60bb      	str	r3, [r7, #8]
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	685a      	ldr	r2, [r3, #4]
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	605a      	str	r2, [r3, #4]
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	685a      	ldr	r2, [r3, #4]
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	3308      	adds	r3, #8
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d104      	bne.n	8007f74 <vTaskSwitchContext+0x8c>
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	685a      	ldr	r2, [r3, #4]
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	605a      	str	r2, [r3, #4]
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	4a0c      	ldr	r2, [pc, #48]	@ (8007fac <vTaskSwitchContext+0xc4>)
 8007f7c:	6013      	str	r3, [r2, #0]
 8007f7e:	4a09      	ldr	r2, [pc, #36]	@ (8007fa4 <vTaskSwitchContext+0xbc>)
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007f84:	4b09      	ldr	r3, [pc, #36]	@ (8007fac <vTaskSwitchContext+0xc4>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	3354      	adds	r3, #84	@ 0x54
 8007f8a:	4a09      	ldr	r2, [pc, #36]	@ (8007fb0 <vTaskSwitchContext+0xc8>)
 8007f8c:	6013      	str	r3, [r2, #0]
}
 8007f8e:	bf00      	nop
 8007f90:	3714      	adds	r7, #20
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr
 8007f9a:	bf00      	nop
 8007f9c:	20001780 	.word	0x20001780
 8007fa0:	2000176c 	.word	0x2000176c
 8007fa4:	20001760 	.word	0x20001760
 8007fa8:	20001288 	.word	0x20001288
 8007fac:	20001284 	.word	0x20001284
 8007fb0:	20000014 	.word	0x20000014

08007fb4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d10b      	bne.n	8007fdc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fc8:	f383 8811 	msr	BASEPRI, r3
 8007fcc:	f3bf 8f6f 	isb	sy
 8007fd0:	f3bf 8f4f 	dsb	sy
 8007fd4:	60fb      	str	r3, [r7, #12]
}
 8007fd6:	bf00      	nop
 8007fd8:	bf00      	nop
 8007fda:	e7fd      	b.n	8007fd8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007fdc:	4b07      	ldr	r3, [pc, #28]	@ (8007ffc <vTaskPlaceOnEventList+0x48>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	3318      	adds	r3, #24
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f7fe fc50 	bl	800688a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007fea:	2101      	movs	r1, #1
 8007fec:	6838      	ldr	r0, [r7, #0]
 8007fee:	f000 fb97 	bl	8008720 <prvAddCurrentTaskToDelayedList>
}
 8007ff2:	bf00      	nop
 8007ff4:	3710      	adds	r7, #16
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	20001284 	.word	0x20001284

08008000 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008000:	b580      	push	{r7, lr}
 8008002:	b086      	sub	sp, #24
 8008004:	af00      	add	r7, sp, #0
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	60b9      	str	r1, [r7, #8]
 800800a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d10b      	bne.n	800802a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008016:	f383 8811 	msr	BASEPRI, r3
 800801a:	f3bf 8f6f 	isb	sy
 800801e:	f3bf 8f4f 	dsb	sy
 8008022:	617b      	str	r3, [r7, #20]
}
 8008024:	bf00      	nop
 8008026:	bf00      	nop
 8008028:	e7fd      	b.n	8008026 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800802a:	4b0a      	ldr	r3, [pc, #40]	@ (8008054 <vTaskPlaceOnEventListRestricted+0x54>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	3318      	adds	r3, #24
 8008030:	4619      	mov	r1, r3
 8008032:	68f8      	ldr	r0, [r7, #12]
 8008034:	f7fe fc05 	bl	8006842 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d002      	beq.n	8008044 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800803e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008042:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008044:	6879      	ldr	r1, [r7, #4]
 8008046:	68b8      	ldr	r0, [r7, #8]
 8008048:	f000 fb6a 	bl	8008720 <prvAddCurrentTaskToDelayedList>
	}
 800804c:	bf00      	nop
 800804e:	3718      	adds	r7, #24
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}
 8008054:	20001284 	.word	0x20001284

08008058 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b086      	sub	sp, #24
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d10b      	bne.n	8008086 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800806e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008072:	f383 8811 	msr	BASEPRI, r3
 8008076:	f3bf 8f6f 	isb	sy
 800807a:	f3bf 8f4f 	dsb	sy
 800807e:	60fb      	str	r3, [r7, #12]
}
 8008080:	bf00      	nop
 8008082:	bf00      	nop
 8008084:	e7fd      	b.n	8008082 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	3318      	adds	r3, #24
 800808a:	4618      	mov	r0, r3
 800808c:	f7fe fc36 	bl	80068fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008090:	4b1d      	ldr	r3, [pc, #116]	@ (8008108 <xTaskRemoveFromEventList+0xb0>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d11d      	bne.n	80080d4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	3304      	adds	r3, #4
 800809c:	4618      	mov	r0, r3
 800809e:	f7fe fc2d 	bl	80068fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080a6:	4b19      	ldr	r3, [pc, #100]	@ (800810c <xTaskRemoveFromEventList+0xb4>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d903      	bls.n	80080b6 <xTaskRemoveFromEventList+0x5e>
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080b2:	4a16      	ldr	r2, [pc, #88]	@ (800810c <xTaskRemoveFromEventList+0xb4>)
 80080b4:	6013      	str	r3, [r2, #0]
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080ba:	4613      	mov	r3, r2
 80080bc:	009b      	lsls	r3, r3, #2
 80080be:	4413      	add	r3, r2
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	4a13      	ldr	r2, [pc, #76]	@ (8008110 <xTaskRemoveFromEventList+0xb8>)
 80080c4:	441a      	add	r2, r3
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	3304      	adds	r3, #4
 80080ca:	4619      	mov	r1, r3
 80080cc:	4610      	mov	r0, r2
 80080ce:	f7fe fbb8 	bl	8006842 <vListInsertEnd>
 80080d2:	e005      	b.n	80080e0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	3318      	adds	r3, #24
 80080d8:	4619      	mov	r1, r3
 80080da:	480e      	ldr	r0, [pc, #56]	@ (8008114 <xTaskRemoveFromEventList+0xbc>)
 80080dc:	f7fe fbb1 	bl	8006842 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080e4:	4b0c      	ldr	r3, [pc, #48]	@ (8008118 <xTaskRemoveFromEventList+0xc0>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d905      	bls.n	80080fa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80080ee:	2301      	movs	r3, #1
 80080f0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80080f2:	4b0a      	ldr	r3, [pc, #40]	@ (800811c <xTaskRemoveFromEventList+0xc4>)
 80080f4:	2201      	movs	r2, #1
 80080f6:	601a      	str	r2, [r3, #0]
 80080f8:	e001      	b.n	80080fe <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80080fa:	2300      	movs	r3, #0
 80080fc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80080fe:	697b      	ldr	r3, [r7, #20]
}
 8008100:	4618      	mov	r0, r3
 8008102:	3718      	adds	r7, #24
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}
 8008108:	20001780 	.word	0x20001780
 800810c:	20001760 	.word	0x20001760
 8008110:	20001288 	.word	0x20001288
 8008114:	20001718 	.word	0x20001718
 8008118:	20001284 	.word	0x20001284
 800811c:	2000176c 	.word	0x2000176c

08008120 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008120:	b480      	push	{r7}
 8008122:	b083      	sub	sp, #12
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008128:	4b06      	ldr	r3, [pc, #24]	@ (8008144 <vTaskInternalSetTimeOutState+0x24>)
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008130:	4b05      	ldr	r3, [pc, #20]	@ (8008148 <vTaskInternalSetTimeOutState+0x28>)
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	605a      	str	r2, [r3, #4]
}
 8008138:	bf00      	nop
 800813a:	370c      	adds	r7, #12
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr
 8008144:	20001770 	.word	0x20001770
 8008148:	2000175c 	.word	0x2000175c

0800814c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b088      	sub	sp, #32
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d10b      	bne.n	8008174 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800815c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008160:	f383 8811 	msr	BASEPRI, r3
 8008164:	f3bf 8f6f 	isb	sy
 8008168:	f3bf 8f4f 	dsb	sy
 800816c:	613b      	str	r3, [r7, #16]
}
 800816e:	bf00      	nop
 8008170:	bf00      	nop
 8008172:	e7fd      	b.n	8008170 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d10b      	bne.n	8008192 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800817a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800817e:	f383 8811 	msr	BASEPRI, r3
 8008182:	f3bf 8f6f 	isb	sy
 8008186:	f3bf 8f4f 	dsb	sy
 800818a:	60fb      	str	r3, [r7, #12]
}
 800818c:	bf00      	nop
 800818e:	bf00      	nop
 8008190:	e7fd      	b.n	800818e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008192:	f000 ffa1 	bl	80090d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008196:	4b1d      	ldr	r3, [pc, #116]	@ (800820c <xTaskCheckForTimeOut+0xc0>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	69ba      	ldr	r2, [r7, #24]
 80081a2:	1ad3      	subs	r3, r2, r3
 80081a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80081ae:	d102      	bne.n	80081b6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80081b0:	2300      	movs	r3, #0
 80081b2:	61fb      	str	r3, [r7, #28]
 80081b4:	e023      	b.n	80081fe <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681a      	ldr	r2, [r3, #0]
 80081ba:	4b15      	ldr	r3, [pc, #84]	@ (8008210 <xTaskCheckForTimeOut+0xc4>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	429a      	cmp	r2, r3
 80081c0:	d007      	beq.n	80081d2 <xTaskCheckForTimeOut+0x86>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	69ba      	ldr	r2, [r7, #24]
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d302      	bcc.n	80081d2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80081cc:	2301      	movs	r3, #1
 80081ce:	61fb      	str	r3, [r7, #28]
 80081d0:	e015      	b.n	80081fe <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	697a      	ldr	r2, [r7, #20]
 80081d8:	429a      	cmp	r2, r3
 80081da:	d20b      	bcs.n	80081f4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	681a      	ldr	r2, [r3, #0]
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	1ad2      	subs	r2, r2, r3
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f7ff ff99 	bl	8008120 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80081ee:	2300      	movs	r3, #0
 80081f0:	61fb      	str	r3, [r7, #28]
 80081f2:	e004      	b.n	80081fe <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	2200      	movs	r2, #0
 80081f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80081fa:	2301      	movs	r3, #1
 80081fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80081fe:	f000 ff9d 	bl	800913c <vPortExitCritical>

	return xReturn;
 8008202:	69fb      	ldr	r3, [r7, #28]
}
 8008204:	4618      	mov	r0, r3
 8008206:	3720      	adds	r7, #32
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}
 800820c:	2000175c 	.word	0x2000175c
 8008210:	20001770 	.word	0x20001770

08008214 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008214:	b480      	push	{r7}
 8008216:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008218:	4b03      	ldr	r3, [pc, #12]	@ (8008228 <vTaskMissedYield+0x14>)
 800821a:	2201      	movs	r2, #1
 800821c:	601a      	str	r2, [r3, #0]
}
 800821e:	bf00      	nop
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr
 8008228:	2000176c 	.word	0x2000176c

0800822c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008234:	f000 f852 	bl	80082dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008238:	4b06      	ldr	r3, [pc, #24]	@ (8008254 <prvIdleTask+0x28>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2b01      	cmp	r3, #1
 800823e:	d9f9      	bls.n	8008234 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008240:	4b05      	ldr	r3, [pc, #20]	@ (8008258 <prvIdleTask+0x2c>)
 8008242:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008246:	601a      	str	r2, [r3, #0]
 8008248:	f3bf 8f4f 	dsb	sy
 800824c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008250:	e7f0      	b.n	8008234 <prvIdleTask+0x8>
 8008252:	bf00      	nop
 8008254:	20001288 	.word	0x20001288
 8008258:	e000ed04 	.word	0xe000ed04

0800825c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008262:	2300      	movs	r3, #0
 8008264:	607b      	str	r3, [r7, #4]
 8008266:	e00c      	b.n	8008282 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	4613      	mov	r3, r2
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	4413      	add	r3, r2
 8008270:	009b      	lsls	r3, r3, #2
 8008272:	4a12      	ldr	r2, [pc, #72]	@ (80082bc <prvInitialiseTaskLists+0x60>)
 8008274:	4413      	add	r3, r2
 8008276:	4618      	mov	r0, r3
 8008278:	f7fe fab6 	bl	80067e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	3301      	adds	r3, #1
 8008280:	607b      	str	r3, [r7, #4]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2b37      	cmp	r3, #55	@ 0x37
 8008286:	d9ef      	bls.n	8008268 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008288:	480d      	ldr	r0, [pc, #52]	@ (80082c0 <prvInitialiseTaskLists+0x64>)
 800828a:	f7fe faad 	bl	80067e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800828e:	480d      	ldr	r0, [pc, #52]	@ (80082c4 <prvInitialiseTaskLists+0x68>)
 8008290:	f7fe faaa 	bl	80067e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008294:	480c      	ldr	r0, [pc, #48]	@ (80082c8 <prvInitialiseTaskLists+0x6c>)
 8008296:	f7fe faa7 	bl	80067e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800829a:	480c      	ldr	r0, [pc, #48]	@ (80082cc <prvInitialiseTaskLists+0x70>)
 800829c:	f7fe faa4 	bl	80067e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80082a0:	480b      	ldr	r0, [pc, #44]	@ (80082d0 <prvInitialiseTaskLists+0x74>)
 80082a2:	f7fe faa1 	bl	80067e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80082a6:	4b0b      	ldr	r3, [pc, #44]	@ (80082d4 <prvInitialiseTaskLists+0x78>)
 80082a8:	4a05      	ldr	r2, [pc, #20]	@ (80082c0 <prvInitialiseTaskLists+0x64>)
 80082aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80082ac:	4b0a      	ldr	r3, [pc, #40]	@ (80082d8 <prvInitialiseTaskLists+0x7c>)
 80082ae:	4a05      	ldr	r2, [pc, #20]	@ (80082c4 <prvInitialiseTaskLists+0x68>)
 80082b0:	601a      	str	r2, [r3, #0]
}
 80082b2:	bf00      	nop
 80082b4:	3708      	adds	r7, #8
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
 80082ba:	bf00      	nop
 80082bc:	20001288 	.word	0x20001288
 80082c0:	200016e8 	.word	0x200016e8
 80082c4:	200016fc 	.word	0x200016fc
 80082c8:	20001718 	.word	0x20001718
 80082cc:	2000172c 	.word	0x2000172c
 80082d0:	20001744 	.word	0x20001744
 80082d4:	20001710 	.word	0x20001710
 80082d8:	20001714 	.word	0x20001714

080082dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b082      	sub	sp, #8
 80082e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80082e2:	e019      	b.n	8008318 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80082e4:	f000 fef8 	bl	80090d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082e8:	4b10      	ldr	r3, [pc, #64]	@ (800832c <prvCheckTasksWaitingTermination+0x50>)
 80082ea:	68db      	ldr	r3, [r3, #12]
 80082ec:	68db      	ldr	r3, [r3, #12]
 80082ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	3304      	adds	r3, #4
 80082f4:	4618      	mov	r0, r3
 80082f6:	f7fe fb01 	bl	80068fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80082fa:	4b0d      	ldr	r3, [pc, #52]	@ (8008330 <prvCheckTasksWaitingTermination+0x54>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	3b01      	subs	r3, #1
 8008300:	4a0b      	ldr	r2, [pc, #44]	@ (8008330 <prvCheckTasksWaitingTermination+0x54>)
 8008302:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008304:	4b0b      	ldr	r3, [pc, #44]	@ (8008334 <prvCheckTasksWaitingTermination+0x58>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	3b01      	subs	r3, #1
 800830a:	4a0a      	ldr	r2, [pc, #40]	@ (8008334 <prvCheckTasksWaitingTermination+0x58>)
 800830c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800830e:	f000 ff15 	bl	800913c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 f810 	bl	8008338 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008318:	4b06      	ldr	r3, [pc, #24]	@ (8008334 <prvCheckTasksWaitingTermination+0x58>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d1e1      	bne.n	80082e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008320:	bf00      	nop
 8008322:	bf00      	nop
 8008324:	3708      	adds	r7, #8
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
 800832a:	bf00      	nop
 800832c:	2000172c 	.word	0x2000172c
 8008330:	20001758 	.word	0x20001758
 8008334:	20001740 	.word	0x20001740

08008338 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008338:	b580      	push	{r7, lr}
 800833a:	b084      	sub	sp, #16
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	3354      	adds	r3, #84	@ 0x54
 8008344:	4618      	mov	r0, r3
 8008346:	f001 fa13 	bl	8009770 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008350:	2b00      	cmp	r3, #0
 8008352:	d108      	bne.n	8008366 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008358:	4618      	mov	r0, r3
 800835a:	f001 f8ad 	bl	80094b8 <vPortFree>
				vPortFree( pxTCB );
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f001 f8aa 	bl	80094b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008364:	e019      	b.n	800839a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800836c:	2b01      	cmp	r3, #1
 800836e:	d103      	bne.n	8008378 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f001 f8a1 	bl	80094b8 <vPortFree>
	}
 8008376:	e010      	b.n	800839a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800837e:	2b02      	cmp	r3, #2
 8008380:	d00b      	beq.n	800839a <prvDeleteTCB+0x62>
	__asm volatile
 8008382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008386:	f383 8811 	msr	BASEPRI, r3
 800838a:	f3bf 8f6f 	isb	sy
 800838e:	f3bf 8f4f 	dsb	sy
 8008392:	60fb      	str	r3, [r7, #12]
}
 8008394:	bf00      	nop
 8008396:	bf00      	nop
 8008398:	e7fd      	b.n	8008396 <prvDeleteTCB+0x5e>
	}
 800839a:	bf00      	nop
 800839c:	3710      	adds	r7, #16
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
	...

080083a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80083a4:	b480      	push	{r7}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083aa:	4b0c      	ldr	r3, [pc, #48]	@ (80083dc <prvResetNextTaskUnblockTime+0x38>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d104      	bne.n	80083be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80083b4:	4b0a      	ldr	r3, [pc, #40]	@ (80083e0 <prvResetNextTaskUnblockTime+0x3c>)
 80083b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80083ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80083bc:	e008      	b.n	80083d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083be:	4b07      	ldr	r3, [pc, #28]	@ (80083dc <prvResetNextTaskUnblockTime+0x38>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	68db      	ldr	r3, [r3, #12]
 80083c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	4a04      	ldr	r2, [pc, #16]	@ (80083e0 <prvResetNextTaskUnblockTime+0x3c>)
 80083ce:	6013      	str	r3, [r2, #0]
}
 80083d0:	bf00      	nop
 80083d2:	370c      	adds	r7, #12
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr
 80083dc:	20001710 	.word	0x20001710
 80083e0:	20001778 	.word	0x20001778

080083e4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80083e4:	b480      	push	{r7}
 80083e6:	b083      	sub	sp, #12
 80083e8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80083ea:	4b05      	ldr	r3, [pc, #20]	@ (8008400 <xTaskGetCurrentTaskHandle+0x1c>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	607b      	str	r3, [r7, #4]

		return xReturn;
 80083f0:	687b      	ldr	r3, [r7, #4]
	}
 80083f2:	4618      	mov	r0, r3
 80083f4:	370c      	adds	r7, #12
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr
 80083fe:	bf00      	nop
 8008400:	20001284 	.word	0x20001284

08008404 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008404:	b480      	push	{r7}
 8008406:	b083      	sub	sp, #12
 8008408:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800840a:	4b0b      	ldr	r3, [pc, #44]	@ (8008438 <xTaskGetSchedulerState+0x34>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d102      	bne.n	8008418 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008412:	2301      	movs	r3, #1
 8008414:	607b      	str	r3, [r7, #4]
 8008416:	e008      	b.n	800842a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008418:	4b08      	ldr	r3, [pc, #32]	@ (800843c <xTaskGetSchedulerState+0x38>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d102      	bne.n	8008426 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008420:	2302      	movs	r3, #2
 8008422:	607b      	str	r3, [r7, #4]
 8008424:	e001      	b.n	800842a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008426:	2300      	movs	r3, #0
 8008428:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800842a:	687b      	ldr	r3, [r7, #4]
	}
 800842c:	4618      	mov	r0, r3
 800842e:	370c      	adds	r7, #12
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr
 8008438:	20001764 	.word	0x20001764
 800843c:	20001780 	.word	0x20001780

08008440 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800844c:	2300      	movs	r3, #0
 800844e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d051      	beq.n	80084fa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800845a:	4b2a      	ldr	r3, [pc, #168]	@ (8008504 <xTaskPriorityInherit+0xc4>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008460:	429a      	cmp	r2, r3
 8008462:	d241      	bcs.n	80084e8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	699b      	ldr	r3, [r3, #24]
 8008468:	2b00      	cmp	r3, #0
 800846a:	db06      	blt.n	800847a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800846c:	4b25      	ldr	r3, [pc, #148]	@ (8008504 <xTaskPriorityInherit+0xc4>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008472:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	6959      	ldr	r1, [r3, #20]
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008482:	4613      	mov	r3, r2
 8008484:	009b      	lsls	r3, r3, #2
 8008486:	4413      	add	r3, r2
 8008488:	009b      	lsls	r3, r3, #2
 800848a:	4a1f      	ldr	r2, [pc, #124]	@ (8008508 <xTaskPriorityInherit+0xc8>)
 800848c:	4413      	add	r3, r2
 800848e:	4299      	cmp	r1, r3
 8008490:	d122      	bne.n	80084d8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	3304      	adds	r3, #4
 8008496:	4618      	mov	r0, r3
 8008498:	f7fe fa30 	bl	80068fc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800849c:	4b19      	ldr	r3, [pc, #100]	@ (8008504 <xTaskPriorityInherit+0xc4>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084aa:	4b18      	ldr	r3, [pc, #96]	@ (800850c <xTaskPriorityInherit+0xcc>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d903      	bls.n	80084ba <xTaskPriorityInherit+0x7a>
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084b6:	4a15      	ldr	r2, [pc, #84]	@ (800850c <xTaskPriorityInherit+0xcc>)
 80084b8:	6013      	str	r3, [r2, #0]
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084be:	4613      	mov	r3, r2
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	4413      	add	r3, r2
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	4a10      	ldr	r2, [pc, #64]	@ (8008508 <xTaskPriorityInherit+0xc8>)
 80084c8:	441a      	add	r2, r3
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	3304      	adds	r3, #4
 80084ce:	4619      	mov	r1, r3
 80084d0:	4610      	mov	r0, r2
 80084d2:	f7fe f9b6 	bl	8006842 <vListInsertEnd>
 80084d6:	e004      	b.n	80084e2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80084d8:	4b0a      	ldr	r3, [pc, #40]	@ (8008504 <xTaskPriorityInherit+0xc4>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80084e2:	2301      	movs	r3, #1
 80084e4:	60fb      	str	r3, [r7, #12]
 80084e6:	e008      	b.n	80084fa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80084ec:	4b05      	ldr	r3, [pc, #20]	@ (8008504 <xTaskPriorityInherit+0xc4>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d201      	bcs.n	80084fa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80084f6:	2301      	movs	r3, #1
 80084f8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80084fa:	68fb      	ldr	r3, [r7, #12]
	}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3710      	adds	r7, #16
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}
 8008504:	20001284 	.word	0x20001284
 8008508:	20001288 	.word	0x20001288
 800850c:	20001760 	.word	0x20001760

08008510 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008510:	b580      	push	{r7, lr}
 8008512:	b086      	sub	sp, #24
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800851c:	2300      	movs	r3, #0
 800851e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d058      	beq.n	80085d8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008526:	4b2f      	ldr	r3, [pc, #188]	@ (80085e4 <xTaskPriorityDisinherit+0xd4>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	693a      	ldr	r2, [r7, #16]
 800852c:	429a      	cmp	r2, r3
 800852e:	d00b      	beq.n	8008548 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008534:	f383 8811 	msr	BASEPRI, r3
 8008538:	f3bf 8f6f 	isb	sy
 800853c:	f3bf 8f4f 	dsb	sy
 8008540:	60fb      	str	r3, [r7, #12]
}
 8008542:	bf00      	nop
 8008544:	bf00      	nop
 8008546:	e7fd      	b.n	8008544 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800854c:	2b00      	cmp	r3, #0
 800854e:	d10b      	bne.n	8008568 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008554:	f383 8811 	msr	BASEPRI, r3
 8008558:	f3bf 8f6f 	isb	sy
 800855c:	f3bf 8f4f 	dsb	sy
 8008560:	60bb      	str	r3, [r7, #8]
}
 8008562:	bf00      	nop
 8008564:	bf00      	nop
 8008566:	e7fd      	b.n	8008564 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800856c:	1e5a      	subs	r2, r3, #1
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800857a:	429a      	cmp	r2, r3
 800857c:	d02c      	beq.n	80085d8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008582:	2b00      	cmp	r3, #0
 8008584:	d128      	bne.n	80085d8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	3304      	adds	r3, #4
 800858a:	4618      	mov	r0, r3
 800858c:	f7fe f9b6 	bl	80068fc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800859c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085a8:	4b0f      	ldr	r3, [pc, #60]	@ (80085e8 <xTaskPriorityDisinherit+0xd8>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d903      	bls.n	80085b8 <xTaskPriorityDisinherit+0xa8>
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085b4:	4a0c      	ldr	r2, [pc, #48]	@ (80085e8 <xTaskPriorityDisinherit+0xd8>)
 80085b6:	6013      	str	r3, [r2, #0]
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085bc:	4613      	mov	r3, r2
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	4413      	add	r3, r2
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	4a09      	ldr	r2, [pc, #36]	@ (80085ec <xTaskPriorityDisinherit+0xdc>)
 80085c6:	441a      	add	r2, r3
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	3304      	adds	r3, #4
 80085cc:	4619      	mov	r1, r3
 80085ce:	4610      	mov	r0, r2
 80085d0:	f7fe f937 	bl	8006842 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80085d4:	2301      	movs	r3, #1
 80085d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80085d8:	697b      	ldr	r3, [r7, #20]
	}
 80085da:	4618      	mov	r0, r3
 80085dc:	3718      	adds	r7, #24
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	bf00      	nop
 80085e4:	20001284 	.word	0x20001284
 80085e8:	20001760 	.word	0x20001760
 80085ec:	20001288 	.word	0x20001288

080085f0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b088      	sub	sp, #32
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80085fe:	2301      	movs	r3, #1
 8008600:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d06c      	beq.n	80086e2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008608:	69bb      	ldr	r3, [r7, #24]
 800860a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800860c:	2b00      	cmp	r3, #0
 800860e:	d10b      	bne.n	8008628 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8008610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008614:	f383 8811 	msr	BASEPRI, r3
 8008618:	f3bf 8f6f 	isb	sy
 800861c:	f3bf 8f4f 	dsb	sy
 8008620:	60fb      	str	r3, [r7, #12]
}
 8008622:	bf00      	nop
 8008624:	bf00      	nop
 8008626:	e7fd      	b.n	8008624 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008628:	69bb      	ldr	r3, [r7, #24]
 800862a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800862c:	683a      	ldr	r2, [r7, #0]
 800862e:	429a      	cmp	r2, r3
 8008630:	d902      	bls.n	8008638 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	61fb      	str	r3, [r7, #28]
 8008636:	e002      	b.n	800863e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008638:	69bb      	ldr	r3, [r7, #24]
 800863a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800863c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800863e:	69bb      	ldr	r3, [r7, #24]
 8008640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008642:	69fa      	ldr	r2, [r7, #28]
 8008644:	429a      	cmp	r2, r3
 8008646:	d04c      	beq.n	80086e2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008648:	69bb      	ldr	r3, [r7, #24]
 800864a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800864c:	697a      	ldr	r2, [r7, #20]
 800864e:	429a      	cmp	r2, r3
 8008650:	d147      	bne.n	80086e2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008652:	4b26      	ldr	r3, [pc, #152]	@ (80086ec <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	69ba      	ldr	r2, [r7, #24]
 8008658:	429a      	cmp	r2, r3
 800865a:	d10b      	bne.n	8008674 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800865c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008660:	f383 8811 	msr	BASEPRI, r3
 8008664:	f3bf 8f6f 	isb	sy
 8008668:	f3bf 8f4f 	dsb	sy
 800866c:	60bb      	str	r3, [r7, #8]
}
 800866e:	bf00      	nop
 8008670:	bf00      	nop
 8008672:	e7fd      	b.n	8008670 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008674:	69bb      	ldr	r3, [r7, #24]
 8008676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008678:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800867a:	69bb      	ldr	r3, [r7, #24]
 800867c:	69fa      	ldr	r2, [r7, #28]
 800867e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008680:	69bb      	ldr	r3, [r7, #24]
 8008682:	699b      	ldr	r3, [r3, #24]
 8008684:	2b00      	cmp	r3, #0
 8008686:	db04      	blt.n	8008692 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008688:	69fb      	ldr	r3, [r7, #28]
 800868a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800868e:	69bb      	ldr	r3, [r7, #24]
 8008690:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008692:	69bb      	ldr	r3, [r7, #24]
 8008694:	6959      	ldr	r1, [r3, #20]
 8008696:	693a      	ldr	r2, [r7, #16]
 8008698:	4613      	mov	r3, r2
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	4413      	add	r3, r2
 800869e:	009b      	lsls	r3, r3, #2
 80086a0:	4a13      	ldr	r2, [pc, #76]	@ (80086f0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80086a2:	4413      	add	r3, r2
 80086a4:	4299      	cmp	r1, r3
 80086a6:	d11c      	bne.n	80086e2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80086a8:	69bb      	ldr	r3, [r7, #24]
 80086aa:	3304      	adds	r3, #4
 80086ac:	4618      	mov	r0, r3
 80086ae:	f7fe f925 	bl	80068fc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80086b2:	69bb      	ldr	r3, [r7, #24]
 80086b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086b6:	4b0f      	ldr	r3, [pc, #60]	@ (80086f4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d903      	bls.n	80086c6 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80086be:	69bb      	ldr	r3, [r7, #24]
 80086c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086c2:	4a0c      	ldr	r2, [pc, #48]	@ (80086f4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80086c4:	6013      	str	r3, [r2, #0]
 80086c6:	69bb      	ldr	r3, [r7, #24]
 80086c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086ca:	4613      	mov	r3, r2
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	4413      	add	r3, r2
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	4a07      	ldr	r2, [pc, #28]	@ (80086f0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80086d4:	441a      	add	r2, r3
 80086d6:	69bb      	ldr	r3, [r7, #24]
 80086d8:	3304      	adds	r3, #4
 80086da:	4619      	mov	r1, r3
 80086dc:	4610      	mov	r0, r2
 80086de:	f7fe f8b0 	bl	8006842 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80086e2:	bf00      	nop
 80086e4:	3720      	adds	r7, #32
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop
 80086ec:	20001284 	.word	0x20001284
 80086f0:	20001288 	.word	0x20001288
 80086f4:	20001760 	.word	0x20001760

080086f8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80086f8:	b480      	push	{r7}
 80086fa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80086fc:	4b07      	ldr	r3, [pc, #28]	@ (800871c <pvTaskIncrementMutexHeldCount+0x24>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d004      	beq.n	800870e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008704:	4b05      	ldr	r3, [pc, #20]	@ (800871c <pvTaskIncrementMutexHeldCount+0x24>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800870a:	3201      	adds	r2, #1
 800870c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800870e:	4b03      	ldr	r3, [pc, #12]	@ (800871c <pvTaskIncrementMutexHeldCount+0x24>)
 8008710:	681b      	ldr	r3, [r3, #0]
	}
 8008712:	4618      	mov	r0, r3
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr
 800871c:	20001284 	.word	0x20001284

08008720 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800872a:	4b21      	ldr	r3, [pc, #132]	@ (80087b0 <prvAddCurrentTaskToDelayedList+0x90>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008730:	4b20      	ldr	r3, [pc, #128]	@ (80087b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	3304      	adds	r3, #4
 8008736:	4618      	mov	r0, r3
 8008738:	f7fe f8e0 	bl	80068fc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008742:	d10a      	bne.n	800875a <prvAddCurrentTaskToDelayedList+0x3a>
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d007      	beq.n	800875a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800874a:	4b1a      	ldr	r3, [pc, #104]	@ (80087b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	3304      	adds	r3, #4
 8008750:	4619      	mov	r1, r3
 8008752:	4819      	ldr	r0, [pc, #100]	@ (80087b8 <prvAddCurrentTaskToDelayedList+0x98>)
 8008754:	f7fe f875 	bl	8006842 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008758:	e026      	b.n	80087a8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800875a:	68fa      	ldr	r2, [r7, #12]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	4413      	add	r3, r2
 8008760:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008762:	4b14      	ldr	r3, [pc, #80]	@ (80087b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	68ba      	ldr	r2, [r7, #8]
 8008768:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800876a:	68ba      	ldr	r2, [r7, #8]
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	429a      	cmp	r2, r3
 8008770:	d209      	bcs.n	8008786 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008772:	4b12      	ldr	r3, [pc, #72]	@ (80087bc <prvAddCurrentTaskToDelayedList+0x9c>)
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	4b0f      	ldr	r3, [pc, #60]	@ (80087b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	3304      	adds	r3, #4
 800877c:	4619      	mov	r1, r3
 800877e:	4610      	mov	r0, r2
 8008780:	f7fe f883 	bl	800688a <vListInsert>
}
 8008784:	e010      	b.n	80087a8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008786:	4b0e      	ldr	r3, [pc, #56]	@ (80087c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008788:	681a      	ldr	r2, [r3, #0]
 800878a:	4b0a      	ldr	r3, [pc, #40]	@ (80087b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	3304      	adds	r3, #4
 8008790:	4619      	mov	r1, r3
 8008792:	4610      	mov	r0, r2
 8008794:	f7fe f879 	bl	800688a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008798:	4b0a      	ldr	r3, [pc, #40]	@ (80087c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	68ba      	ldr	r2, [r7, #8]
 800879e:	429a      	cmp	r2, r3
 80087a0:	d202      	bcs.n	80087a8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80087a2:	4a08      	ldr	r2, [pc, #32]	@ (80087c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	6013      	str	r3, [r2, #0]
}
 80087a8:	bf00      	nop
 80087aa:	3710      	adds	r7, #16
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}
 80087b0:	2000175c 	.word	0x2000175c
 80087b4:	20001284 	.word	0x20001284
 80087b8:	20001744 	.word	0x20001744
 80087bc:	20001714 	.word	0x20001714
 80087c0:	20001710 	.word	0x20001710
 80087c4:	20001778 	.word	0x20001778

080087c8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b08a      	sub	sp, #40	@ 0x28
 80087cc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80087ce:	2300      	movs	r3, #0
 80087d0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80087d2:	f000 fb13 	bl	8008dfc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80087d6:	4b1d      	ldr	r3, [pc, #116]	@ (800884c <xTimerCreateTimerTask+0x84>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d021      	beq.n	8008822 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80087de:	2300      	movs	r3, #0
 80087e0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80087e2:	2300      	movs	r3, #0
 80087e4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80087e6:	1d3a      	adds	r2, r7, #4
 80087e8:	f107 0108 	add.w	r1, r7, #8
 80087ec:	f107 030c 	add.w	r3, r7, #12
 80087f0:	4618      	mov	r0, r3
 80087f2:	f7fd ffdf 	bl	80067b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80087f6:	6879      	ldr	r1, [r7, #4]
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	68fa      	ldr	r2, [r7, #12]
 80087fc:	9202      	str	r2, [sp, #8]
 80087fe:	9301      	str	r3, [sp, #4]
 8008800:	2302      	movs	r3, #2
 8008802:	9300      	str	r3, [sp, #0]
 8008804:	2300      	movs	r3, #0
 8008806:	460a      	mov	r2, r1
 8008808:	4911      	ldr	r1, [pc, #68]	@ (8008850 <xTimerCreateTimerTask+0x88>)
 800880a:	4812      	ldr	r0, [pc, #72]	@ (8008854 <xTimerCreateTimerTask+0x8c>)
 800880c:	f7fe ffb6 	bl	800777c <xTaskCreateStatic>
 8008810:	4603      	mov	r3, r0
 8008812:	4a11      	ldr	r2, [pc, #68]	@ (8008858 <xTimerCreateTimerTask+0x90>)
 8008814:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008816:	4b10      	ldr	r3, [pc, #64]	@ (8008858 <xTimerCreateTimerTask+0x90>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d001      	beq.n	8008822 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800881e:	2301      	movs	r3, #1
 8008820:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d10b      	bne.n	8008840 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800882c:	f383 8811 	msr	BASEPRI, r3
 8008830:	f3bf 8f6f 	isb	sy
 8008834:	f3bf 8f4f 	dsb	sy
 8008838:	613b      	str	r3, [r7, #16]
}
 800883a:	bf00      	nop
 800883c:	bf00      	nop
 800883e:	e7fd      	b.n	800883c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008840:	697b      	ldr	r3, [r7, #20]
}
 8008842:	4618      	mov	r0, r3
 8008844:	3718      	adds	r7, #24
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
 800884a:	bf00      	nop
 800884c:	200017b4 	.word	0x200017b4
 8008850:	0800a8e0 	.word	0x0800a8e0
 8008854:	08008995 	.word	0x08008995
 8008858:	200017b8 	.word	0x200017b8

0800885c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b08a      	sub	sp, #40	@ 0x28
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	607a      	str	r2, [r7, #4]
 8008868:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800886a:	2300      	movs	r3, #0
 800886c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d10b      	bne.n	800888c <xTimerGenericCommand+0x30>
	__asm volatile
 8008874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008878:	f383 8811 	msr	BASEPRI, r3
 800887c:	f3bf 8f6f 	isb	sy
 8008880:	f3bf 8f4f 	dsb	sy
 8008884:	623b      	str	r3, [r7, #32]
}
 8008886:	bf00      	nop
 8008888:	bf00      	nop
 800888a:	e7fd      	b.n	8008888 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800888c:	4b19      	ldr	r3, [pc, #100]	@ (80088f4 <xTimerGenericCommand+0x98>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d02a      	beq.n	80088ea <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	2b05      	cmp	r3, #5
 80088a4:	dc18      	bgt.n	80088d8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80088a6:	f7ff fdad 	bl	8008404 <xTaskGetSchedulerState>
 80088aa:	4603      	mov	r3, r0
 80088ac:	2b02      	cmp	r3, #2
 80088ae:	d109      	bne.n	80088c4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80088b0:	4b10      	ldr	r3, [pc, #64]	@ (80088f4 <xTimerGenericCommand+0x98>)
 80088b2:	6818      	ldr	r0, [r3, #0]
 80088b4:	f107 0110 	add.w	r1, r7, #16
 80088b8:	2300      	movs	r3, #0
 80088ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088bc:	f7fe fa46 	bl	8006d4c <xQueueGenericSend>
 80088c0:	6278      	str	r0, [r7, #36]	@ 0x24
 80088c2:	e012      	b.n	80088ea <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80088c4:	4b0b      	ldr	r3, [pc, #44]	@ (80088f4 <xTimerGenericCommand+0x98>)
 80088c6:	6818      	ldr	r0, [r3, #0]
 80088c8:	f107 0110 	add.w	r1, r7, #16
 80088cc:	2300      	movs	r3, #0
 80088ce:	2200      	movs	r2, #0
 80088d0:	f7fe fa3c 	bl	8006d4c <xQueueGenericSend>
 80088d4:	6278      	str	r0, [r7, #36]	@ 0x24
 80088d6:	e008      	b.n	80088ea <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80088d8:	4b06      	ldr	r3, [pc, #24]	@ (80088f4 <xTimerGenericCommand+0x98>)
 80088da:	6818      	ldr	r0, [r3, #0]
 80088dc:	f107 0110 	add.w	r1, r7, #16
 80088e0:	2300      	movs	r3, #0
 80088e2:	683a      	ldr	r2, [r7, #0]
 80088e4:	f7fe fb34 	bl	8006f50 <xQueueGenericSendFromISR>
 80088e8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80088ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3728      	adds	r7, #40	@ 0x28
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	200017b4 	.word	0x200017b4

080088f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b088      	sub	sp, #32
 80088fc:	af02      	add	r7, sp, #8
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008902:	4b23      	ldr	r3, [pc, #140]	@ (8008990 <prvProcessExpiredTimer+0x98>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	68db      	ldr	r3, [r3, #12]
 8008908:	68db      	ldr	r3, [r3, #12]
 800890a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	3304      	adds	r3, #4
 8008910:	4618      	mov	r0, r3
 8008912:	f7fd fff3 	bl	80068fc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800891c:	f003 0304 	and.w	r3, r3, #4
 8008920:	2b00      	cmp	r3, #0
 8008922:	d023      	beq.n	800896c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	699a      	ldr	r2, [r3, #24]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	18d1      	adds	r1, r2, r3
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	683a      	ldr	r2, [r7, #0]
 8008930:	6978      	ldr	r0, [r7, #20]
 8008932:	f000 f8d5 	bl	8008ae0 <prvInsertTimerInActiveList>
 8008936:	4603      	mov	r3, r0
 8008938:	2b00      	cmp	r3, #0
 800893a:	d020      	beq.n	800897e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800893c:	2300      	movs	r3, #0
 800893e:	9300      	str	r3, [sp, #0]
 8008940:	2300      	movs	r3, #0
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	2100      	movs	r1, #0
 8008946:	6978      	ldr	r0, [r7, #20]
 8008948:	f7ff ff88 	bl	800885c <xTimerGenericCommand>
 800894c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d114      	bne.n	800897e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008958:	f383 8811 	msr	BASEPRI, r3
 800895c:	f3bf 8f6f 	isb	sy
 8008960:	f3bf 8f4f 	dsb	sy
 8008964:	60fb      	str	r3, [r7, #12]
}
 8008966:	bf00      	nop
 8008968:	bf00      	nop
 800896a:	e7fd      	b.n	8008968 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008972:	f023 0301 	bic.w	r3, r3, #1
 8008976:	b2da      	uxtb	r2, r3
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	6a1b      	ldr	r3, [r3, #32]
 8008982:	6978      	ldr	r0, [r7, #20]
 8008984:	4798      	blx	r3
}
 8008986:	bf00      	nop
 8008988:	3718      	adds	r7, #24
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
 800898e:	bf00      	nop
 8008990:	200017ac 	.word	0x200017ac

08008994 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800899c:	f107 0308 	add.w	r3, r7, #8
 80089a0:	4618      	mov	r0, r3
 80089a2:	f000 f859 	bl	8008a58 <prvGetNextExpireTime>
 80089a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	4619      	mov	r1, r3
 80089ac:	68f8      	ldr	r0, [r7, #12]
 80089ae:	f000 f805 	bl	80089bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80089b2:	f000 f8d7 	bl	8008b64 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80089b6:	bf00      	nop
 80089b8:	e7f0      	b.n	800899c <prvTimerTask+0x8>
	...

080089bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b084      	sub	sp, #16
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80089c6:	f7ff f907 	bl	8007bd8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80089ca:	f107 0308 	add.w	r3, r7, #8
 80089ce:	4618      	mov	r0, r3
 80089d0:	f000 f866 	bl	8008aa0 <prvSampleTimeNow>
 80089d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d130      	bne.n	8008a3e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d10a      	bne.n	80089f8 <prvProcessTimerOrBlockTask+0x3c>
 80089e2:	687a      	ldr	r2, [r7, #4]
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	429a      	cmp	r2, r3
 80089e8:	d806      	bhi.n	80089f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80089ea:	f7ff f903 	bl	8007bf4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80089ee:	68f9      	ldr	r1, [r7, #12]
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f7ff ff81 	bl	80088f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80089f6:	e024      	b.n	8008a42 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d008      	beq.n	8008a10 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80089fe:	4b13      	ldr	r3, [pc, #76]	@ (8008a4c <prvProcessTimerOrBlockTask+0x90>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d101      	bne.n	8008a0c <prvProcessTimerOrBlockTask+0x50>
 8008a08:	2301      	movs	r3, #1
 8008a0a:	e000      	b.n	8008a0e <prvProcessTimerOrBlockTask+0x52>
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008a10:	4b0f      	ldr	r3, [pc, #60]	@ (8008a50 <prvProcessTimerOrBlockTask+0x94>)
 8008a12:	6818      	ldr	r0, [r3, #0]
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	1ad3      	subs	r3, r2, r3
 8008a1a:	683a      	ldr	r2, [r7, #0]
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	f7fe fe79 	bl	8007714 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008a22:	f7ff f8e7 	bl	8007bf4 <xTaskResumeAll>
 8008a26:	4603      	mov	r3, r0
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d10a      	bne.n	8008a42 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008a2c:	4b09      	ldr	r3, [pc, #36]	@ (8008a54 <prvProcessTimerOrBlockTask+0x98>)
 8008a2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a32:	601a      	str	r2, [r3, #0]
 8008a34:	f3bf 8f4f 	dsb	sy
 8008a38:	f3bf 8f6f 	isb	sy
}
 8008a3c:	e001      	b.n	8008a42 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008a3e:	f7ff f8d9 	bl	8007bf4 <xTaskResumeAll>
}
 8008a42:	bf00      	nop
 8008a44:	3710      	adds	r7, #16
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
 8008a4a:	bf00      	nop
 8008a4c:	200017b0 	.word	0x200017b0
 8008a50:	200017b4 	.word	0x200017b4
 8008a54:	e000ed04 	.word	0xe000ed04

08008a58 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b085      	sub	sp, #20
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008a60:	4b0e      	ldr	r3, [pc, #56]	@ (8008a9c <prvGetNextExpireTime+0x44>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d101      	bne.n	8008a6e <prvGetNextExpireTime+0x16>
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	e000      	b.n	8008a70 <prvGetNextExpireTime+0x18>
 8008a6e:	2200      	movs	r2, #0
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d105      	bne.n	8008a88 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a7c:	4b07      	ldr	r3, [pc, #28]	@ (8008a9c <prvGetNextExpireTime+0x44>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	60fb      	str	r3, [r7, #12]
 8008a86:	e001      	b.n	8008a8c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3714      	adds	r7, #20
 8008a92:	46bd      	mov	sp, r7
 8008a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a98:	4770      	bx	lr
 8008a9a:	bf00      	nop
 8008a9c:	200017ac 	.word	0x200017ac

08008aa0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008aa8:	f7ff f942 	bl	8007d30 <xTaskGetTickCount>
 8008aac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008aae:	4b0b      	ldr	r3, [pc, #44]	@ (8008adc <prvSampleTimeNow+0x3c>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	68fa      	ldr	r2, [r7, #12]
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d205      	bcs.n	8008ac4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008ab8:	f000 f93a 	bl	8008d30 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2201      	movs	r2, #1
 8008ac0:	601a      	str	r2, [r3, #0]
 8008ac2:	e002      	b.n	8008aca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008aca:	4a04      	ldr	r2, [pc, #16]	@ (8008adc <prvSampleTimeNow+0x3c>)
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3710      	adds	r7, #16
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop
 8008adc:	200017bc 	.word	0x200017bc

08008ae0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b086      	sub	sp, #24
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	60f8      	str	r0, [r7, #12]
 8008ae8:	60b9      	str	r1, [r7, #8]
 8008aea:	607a      	str	r2, [r7, #4]
 8008aec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008aee:	2300      	movs	r3, #0
 8008af0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	68ba      	ldr	r2, [r7, #8]
 8008af6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	68fa      	ldr	r2, [r7, #12]
 8008afc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008afe:	68ba      	ldr	r2, [r7, #8]
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d812      	bhi.n	8008b2c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	1ad2      	subs	r2, r2, r3
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	699b      	ldr	r3, [r3, #24]
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d302      	bcc.n	8008b1a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008b14:	2301      	movs	r3, #1
 8008b16:	617b      	str	r3, [r7, #20]
 8008b18:	e01b      	b.n	8008b52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008b1a:	4b10      	ldr	r3, [pc, #64]	@ (8008b5c <prvInsertTimerInActiveList+0x7c>)
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	3304      	adds	r3, #4
 8008b22:	4619      	mov	r1, r3
 8008b24:	4610      	mov	r0, r2
 8008b26:	f7fd feb0 	bl	800688a <vListInsert>
 8008b2a:	e012      	b.n	8008b52 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008b2c:	687a      	ldr	r2, [r7, #4]
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d206      	bcs.n	8008b42 <prvInsertTimerInActiveList+0x62>
 8008b34:	68ba      	ldr	r2, [r7, #8]
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d302      	bcc.n	8008b42 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	617b      	str	r3, [r7, #20]
 8008b40:	e007      	b.n	8008b52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008b42:	4b07      	ldr	r3, [pc, #28]	@ (8008b60 <prvInsertTimerInActiveList+0x80>)
 8008b44:	681a      	ldr	r2, [r3, #0]
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	3304      	adds	r3, #4
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	4610      	mov	r0, r2
 8008b4e:	f7fd fe9c 	bl	800688a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008b52:	697b      	ldr	r3, [r7, #20]
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3718      	adds	r7, #24
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}
 8008b5c:	200017b0 	.word	0x200017b0
 8008b60:	200017ac 	.word	0x200017ac

08008b64 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b08e      	sub	sp, #56	@ 0x38
 8008b68:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008b6a:	e0ce      	b.n	8008d0a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	da19      	bge.n	8008ba6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008b72:	1d3b      	adds	r3, r7, #4
 8008b74:	3304      	adds	r3, #4
 8008b76:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d10b      	bne.n	8008b96 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b82:	f383 8811 	msr	BASEPRI, r3
 8008b86:	f3bf 8f6f 	isb	sy
 8008b8a:	f3bf 8f4f 	dsb	sy
 8008b8e:	61fb      	str	r3, [r7, #28]
}
 8008b90:	bf00      	nop
 8008b92:	bf00      	nop
 8008b94:	e7fd      	b.n	8008b92 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b9c:	6850      	ldr	r0, [r2, #4]
 8008b9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ba0:	6892      	ldr	r2, [r2, #8]
 8008ba2:	4611      	mov	r1, r2
 8008ba4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	f2c0 80ae 	blt.w	8008d0a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bb4:	695b      	ldr	r3, [r3, #20]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d004      	beq.n	8008bc4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bbc:	3304      	adds	r3, #4
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f7fd fe9c 	bl	80068fc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008bc4:	463b      	mov	r3, r7
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7ff ff6a 	bl	8008aa0 <prvSampleTimeNow>
 8008bcc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2b09      	cmp	r3, #9
 8008bd2:	f200 8097 	bhi.w	8008d04 <prvProcessReceivedCommands+0x1a0>
 8008bd6:	a201      	add	r2, pc, #4	@ (adr r2, 8008bdc <prvProcessReceivedCommands+0x78>)
 8008bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bdc:	08008c05 	.word	0x08008c05
 8008be0:	08008c05 	.word	0x08008c05
 8008be4:	08008c05 	.word	0x08008c05
 8008be8:	08008c7b 	.word	0x08008c7b
 8008bec:	08008c8f 	.word	0x08008c8f
 8008bf0:	08008cdb 	.word	0x08008cdb
 8008bf4:	08008c05 	.word	0x08008c05
 8008bf8:	08008c05 	.word	0x08008c05
 8008bfc:	08008c7b 	.word	0x08008c7b
 8008c00:	08008c8f 	.word	0x08008c8f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c06:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008c0a:	f043 0301 	orr.w	r3, r3, #1
 8008c0e:	b2da      	uxtb	r2, r3
 8008c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c12:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008c16:	68ba      	ldr	r2, [r7, #8]
 8008c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c1a:	699b      	ldr	r3, [r3, #24]
 8008c1c:	18d1      	adds	r1, r2, r3
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c24:	f7ff ff5c 	bl	8008ae0 <prvInsertTimerInActiveList>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d06c      	beq.n	8008d08 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c30:	6a1b      	ldr	r3, [r3, #32]
 8008c32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c34:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008c3c:	f003 0304 	and.w	r3, r3, #4
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d061      	beq.n	8008d08 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008c44:	68ba      	ldr	r2, [r7, #8]
 8008c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c48:	699b      	ldr	r3, [r3, #24]
 8008c4a:	441a      	add	r2, r3
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	9300      	str	r3, [sp, #0]
 8008c50:	2300      	movs	r3, #0
 8008c52:	2100      	movs	r1, #0
 8008c54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c56:	f7ff fe01 	bl	800885c <xTimerGenericCommand>
 8008c5a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008c5c:	6a3b      	ldr	r3, [r7, #32]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d152      	bne.n	8008d08 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c66:	f383 8811 	msr	BASEPRI, r3
 8008c6a:	f3bf 8f6f 	isb	sy
 8008c6e:	f3bf 8f4f 	dsb	sy
 8008c72:	61bb      	str	r3, [r7, #24]
}
 8008c74:	bf00      	nop
 8008c76:	bf00      	nop
 8008c78:	e7fd      	b.n	8008c76 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008c80:	f023 0301 	bic.w	r3, r3, #1
 8008c84:	b2da      	uxtb	r2, r3
 8008c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c88:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008c8c:	e03d      	b.n	8008d0a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008c94:	f043 0301 	orr.w	r3, r3, #1
 8008c98:	b2da      	uxtb	r2, r3
 8008c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c9c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008ca0:	68ba      	ldr	r2, [r7, #8]
 8008ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ca4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ca8:	699b      	ldr	r3, [r3, #24]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d10b      	bne.n	8008cc6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cb2:	f383 8811 	msr	BASEPRI, r3
 8008cb6:	f3bf 8f6f 	isb	sy
 8008cba:	f3bf 8f4f 	dsb	sy
 8008cbe:	617b      	str	r3, [r7, #20]
}
 8008cc0:	bf00      	nop
 8008cc2:	bf00      	nop
 8008cc4:	e7fd      	b.n	8008cc2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cc8:	699a      	ldr	r2, [r3, #24]
 8008cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ccc:	18d1      	adds	r1, r2, r3
 8008cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008cd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008cd4:	f7ff ff04 	bl	8008ae0 <prvInsertTimerInActiveList>
					break;
 8008cd8:	e017      	b.n	8008d0a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cdc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008ce0:	f003 0302 	and.w	r3, r3, #2
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d103      	bne.n	8008cf0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008ce8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008cea:	f000 fbe5 	bl	80094b8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008cee:	e00c      	b.n	8008d0a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cf2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008cf6:	f023 0301 	bic.w	r3, r3, #1
 8008cfa:	b2da      	uxtb	r2, r3
 8008cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cfe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008d02:	e002      	b.n	8008d0a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008d04:	bf00      	nop
 8008d06:	e000      	b.n	8008d0a <prvProcessReceivedCommands+0x1a6>
					break;
 8008d08:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008d0a:	4b08      	ldr	r3, [pc, #32]	@ (8008d2c <prvProcessReceivedCommands+0x1c8>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	1d39      	adds	r1, r7, #4
 8008d10:	2200      	movs	r2, #0
 8008d12:	4618      	mov	r0, r3
 8008d14:	f7fe f9ba 	bl	800708c <xQueueReceive>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	f47f af26 	bne.w	8008b6c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008d20:	bf00      	nop
 8008d22:	bf00      	nop
 8008d24:	3730      	adds	r7, #48	@ 0x30
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}
 8008d2a:	bf00      	nop
 8008d2c:	200017b4 	.word	0x200017b4

08008d30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b088      	sub	sp, #32
 8008d34:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008d36:	e049      	b.n	8008dcc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008d38:	4b2e      	ldr	r3, [pc, #184]	@ (8008df4 <prvSwitchTimerLists+0xc4>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	68db      	ldr	r3, [r3, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d42:	4b2c      	ldr	r3, [pc, #176]	@ (8008df4 <prvSwitchTimerLists+0xc4>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	68db      	ldr	r3, [r3, #12]
 8008d48:	68db      	ldr	r3, [r3, #12]
 8008d4a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	3304      	adds	r3, #4
 8008d50:	4618      	mov	r0, r3
 8008d52:	f7fd fdd3 	bl	80068fc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	6a1b      	ldr	r3, [r3, #32]
 8008d5a:	68f8      	ldr	r0, [r7, #12]
 8008d5c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008d64:	f003 0304 	and.w	r3, r3, #4
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d02f      	beq.n	8008dcc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	699b      	ldr	r3, [r3, #24]
 8008d70:	693a      	ldr	r2, [r7, #16]
 8008d72:	4413      	add	r3, r2
 8008d74:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008d76:	68ba      	ldr	r2, [r7, #8]
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d90e      	bls.n	8008d9c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	68ba      	ldr	r2, [r7, #8]
 8008d82:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	68fa      	ldr	r2, [r7, #12]
 8008d88:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008d8a:	4b1a      	ldr	r3, [pc, #104]	@ (8008df4 <prvSwitchTimerLists+0xc4>)
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	3304      	adds	r3, #4
 8008d92:	4619      	mov	r1, r3
 8008d94:	4610      	mov	r0, r2
 8008d96:	f7fd fd78 	bl	800688a <vListInsert>
 8008d9a:	e017      	b.n	8008dcc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	9300      	str	r3, [sp, #0]
 8008da0:	2300      	movs	r3, #0
 8008da2:	693a      	ldr	r2, [r7, #16]
 8008da4:	2100      	movs	r1, #0
 8008da6:	68f8      	ldr	r0, [r7, #12]
 8008da8:	f7ff fd58 	bl	800885c <xTimerGenericCommand>
 8008dac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d10b      	bne.n	8008dcc <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008db8:	f383 8811 	msr	BASEPRI, r3
 8008dbc:	f3bf 8f6f 	isb	sy
 8008dc0:	f3bf 8f4f 	dsb	sy
 8008dc4:	603b      	str	r3, [r7, #0]
}
 8008dc6:	bf00      	nop
 8008dc8:	bf00      	nop
 8008dca:	e7fd      	b.n	8008dc8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008dcc:	4b09      	ldr	r3, [pc, #36]	@ (8008df4 <prvSwitchTimerLists+0xc4>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d1b0      	bne.n	8008d38 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008dd6:	4b07      	ldr	r3, [pc, #28]	@ (8008df4 <prvSwitchTimerLists+0xc4>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008ddc:	4b06      	ldr	r3, [pc, #24]	@ (8008df8 <prvSwitchTimerLists+0xc8>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a04      	ldr	r2, [pc, #16]	@ (8008df4 <prvSwitchTimerLists+0xc4>)
 8008de2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008de4:	4a04      	ldr	r2, [pc, #16]	@ (8008df8 <prvSwitchTimerLists+0xc8>)
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	6013      	str	r3, [r2, #0]
}
 8008dea:	bf00      	nop
 8008dec:	3718      	adds	r7, #24
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
 8008df2:	bf00      	nop
 8008df4:	200017ac 	.word	0x200017ac
 8008df8:	200017b0 	.word	0x200017b0

08008dfc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b082      	sub	sp, #8
 8008e00:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008e02:	f000 f969 	bl	80090d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008e06:	4b15      	ldr	r3, [pc, #84]	@ (8008e5c <prvCheckForValidListAndQueue+0x60>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d120      	bne.n	8008e50 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008e0e:	4814      	ldr	r0, [pc, #80]	@ (8008e60 <prvCheckForValidListAndQueue+0x64>)
 8008e10:	f7fd fcea 	bl	80067e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008e14:	4813      	ldr	r0, [pc, #76]	@ (8008e64 <prvCheckForValidListAndQueue+0x68>)
 8008e16:	f7fd fce7 	bl	80067e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008e1a:	4b13      	ldr	r3, [pc, #76]	@ (8008e68 <prvCheckForValidListAndQueue+0x6c>)
 8008e1c:	4a10      	ldr	r2, [pc, #64]	@ (8008e60 <prvCheckForValidListAndQueue+0x64>)
 8008e1e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008e20:	4b12      	ldr	r3, [pc, #72]	@ (8008e6c <prvCheckForValidListAndQueue+0x70>)
 8008e22:	4a10      	ldr	r2, [pc, #64]	@ (8008e64 <prvCheckForValidListAndQueue+0x68>)
 8008e24:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008e26:	2300      	movs	r3, #0
 8008e28:	9300      	str	r3, [sp, #0]
 8008e2a:	4b11      	ldr	r3, [pc, #68]	@ (8008e70 <prvCheckForValidListAndQueue+0x74>)
 8008e2c:	4a11      	ldr	r2, [pc, #68]	@ (8008e74 <prvCheckForValidListAndQueue+0x78>)
 8008e2e:	2110      	movs	r1, #16
 8008e30:	200a      	movs	r0, #10
 8008e32:	f7fd fdf7 	bl	8006a24 <xQueueGenericCreateStatic>
 8008e36:	4603      	mov	r3, r0
 8008e38:	4a08      	ldr	r2, [pc, #32]	@ (8008e5c <prvCheckForValidListAndQueue+0x60>)
 8008e3a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008e3c:	4b07      	ldr	r3, [pc, #28]	@ (8008e5c <prvCheckForValidListAndQueue+0x60>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d005      	beq.n	8008e50 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008e44:	4b05      	ldr	r3, [pc, #20]	@ (8008e5c <prvCheckForValidListAndQueue+0x60>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	490b      	ldr	r1, [pc, #44]	@ (8008e78 <prvCheckForValidListAndQueue+0x7c>)
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f7fe fc38 	bl	80076c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008e50:	f000 f974 	bl	800913c <vPortExitCritical>
}
 8008e54:	bf00      	nop
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
 8008e5a:	bf00      	nop
 8008e5c:	200017b4 	.word	0x200017b4
 8008e60:	20001784 	.word	0x20001784
 8008e64:	20001798 	.word	0x20001798
 8008e68:	200017ac 	.word	0x200017ac
 8008e6c:	200017b0 	.word	0x200017b0
 8008e70:	20001860 	.word	0x20001860
 8008e74:	200017c0 	.word	0x200017c0
 8008e78:	0800a8e8 	.word	0x0800a8e8

08008e7c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b085      	sub	sp, #20
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	60f8      	str	r0, [r7, #12]
 8008e84:	60b9      	str	r1, [r7, #8]
 8008e86:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	3b04      	subs	r3, #4
 8008e8c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008e94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	3b04      	subs	r3, #4
 8008e9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	f023 0201 	bic.w	r2, r3, #1
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	3b04      	subs	r3, #4
 8008eaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008eac:	4a0c      	ldr	r2, [pc, #48]	@ (8008ee0 <pxPortInitialiseStack+0x64>)
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	3b14      	subs	r3, #20
 8008eb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008eb8:	687a      	ldr	r2, [r7, #4]
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	3b04      	subs	r3, #4
 8008ec2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f06f 0202 	mvn.w	r2, #2
 8008eca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	3b20      	subs	r3, #32
 8008ed0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3714      	adds	r7, #20
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr
 8008ee0:	08008ee5 	.word	0x08008ee5

08008ee4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b085      	sub	sp, #20
 8008ee8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008eea:	2300      	movs	r3, #0
 8008eec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008eee:	4b13      	ldr	r3, [pc, #76]	@ (8008f3c <prvTaskExitError+0x58>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008ef6:	d00b      	beq.n	8008f10 <prvTaskExitError+0x2c>
	__asm volatile
 8008ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008efc:	f383 8811 	msr	BASEPRI, r3
 8008f00:	f3bf 8f6f 	isb	sy
 8008f04:	f3bf 8f4f 	dsb	sy
 8008f08:	60fb      	str	r3, [r7, #12]
}
 8008f0a:	bf00      	nop
 8008f0c:	bf00      	nop
 8008f0e:	e7fd      	b.n	8008f0c <prvTaskExitError+0x28>
	__asm volatile
 8008f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f14:	f383 8811 	msr	BASEPRI, r3
 8008f18:	f3bf 8f6f 	isb	sy
 8008f1c:	f3bf 8f4f 	dsb	sy
 8008f20:	60bb      	str	r3, [r7, #8]
}
 8008f22:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008f24:	bf00      	nop
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d0fc      	beq.n	8008f26 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008f2c:	bf00      	nop
 8008f2e:	bf00      	nop
 8008f30:	3714      	adds	r7, #20
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr
 8008f3a:	bf00      	nop
 8008f3c:	20000010 	.word	0x20000010

08008f40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008f40:	4b07      	ldr	r3, [pc, #28]	@ (8008f60 <pxCurrentTCBConst2>)
 8008f42:	6819      	ldr	r1, [r3, #0]
 8008f44:	6808      	ldr	r0, [r1, #0]
 8008f46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f4a:	f380 8809 	msr	PSP, r0
 8008f4e:	f3bf 8f6f 	isb	sy
 8008f52:	f04f 0000 	mov.w	r0, #0
 8008f56:	f380 8811 	msr	BASEPRI, r0
 8008f5a:	4770      	bx	lr
 8008f5c:	f3af 8000 	nop.w

08008f60 <pxCurrentTCBConst2>:
 8008f60:	20001284 	.word	0x20001284
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008f64:	bf00      	nop
 8008f66:	bf00      	nop

08008f68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008f68:	4808      	ldr	r0, [pc, #32]	@ (8008f8c <prvPortStartFirstTask+0x24>)
 8008f6a:	6800      	ldr	r0, [r0, #0]
 8008f6c:	6800      	ldr	r0, [r0, #0]
 8008f6e:	f380 8808 	msr	MSP, r0
 8008f72:	f04f 0000 	mov.w	r0, #0
 8008f76:	f380 8814 	msr	CONTROL, r0
 8008f7a:	b662      	cpsie	i
 8008f7c:	b661      	cpsie	f
 8008f7e:	f3bf 8f4f 	dsb	sy
 8008f82:	f3bf 8f6f 	isb	sy
 8008f86:	df00      	svc	0
 8008f88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008f8a:	bf00      	nop
 8008f8c:	e000ed08 	.word	0xe000ed08

08008f90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b086      	sub	sp, #24
 8008f94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008f96:	4b47      	ldr	r3, [pc, #284]	@ (80090b4 <xPortStartScheduler+0x124>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4a47      	ldr	r2, [pc, #284]	@ (80090b8 <xPortStartScheduler+0x128>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d10b      	bne.n	8008fb8 <xPortStartScheduler+0x28>
	__asm volatile
 8008fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fa4:	f383 8811 	msr	BASEPRI, r3
 8008fa8:	f3bf 8f6f 	isb	sy
 8008fac:	f3bf 8f4f 	dsb	sy
 8008fb0:	613b      	str	r3, [r7, #16]
}
 8008fb2:	bf00      	nop
 8008fb4:	bf00      	nop
 8008fb6:	e7fd      	b.n	8008fb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008fb8:	4b3e      	ldr	r3, [pc, #248]	@ (80090b4 <xPortStartScheduler+0x124>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a3f      	ldr	r2, [pc, #252]	@ (80090bc <xPortStartScheduler+0x12c>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d10b      	bne.n	8008fda <xPortStartScheduler+0x4a>
	__asm volatile
 8008fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fc6:	f383 8811 	msr	BASEPRI, r3
 8008fca:	f3bf 8f6f 	isb	sy
 8008fce:	f3bf 8f4f 	dsb	sy
 8008fd2:	60fb      	str	r3, [r7, #12]
}
 8008fd4:	bf00      	nop
 8008fd6:	bf00      	nop
 8008fd8:	e7fd      	b.n	8008fd6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008fda:	4b39      	ldr	r3, [pc, #228]	@ (80090c0 <xPortStartScheduler+0x130>)
 8008fdc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	781b      	ldrb	r3, [r3, #0]
 8008fe2:	b2db      	uxtb	r3, r3
 8008fe4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	22ff      	movs	r2, #255	@ 0xff
 8008fea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	781b      	ldrb	r3, [r3, #0]
 8008ff0:	b2db      	uxtb	r3, r3
 8008ff2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008ff4:	78fb      	ldrb	r3, [r7, #3]
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008ffc:	b2da      	uxtb	r2, r3
 8008ffe:	4b31      	ldr	r3, [pc, #196]	@ (80090c4 <xPortStartScheduler+0x134>)
 8009000:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009002:	4b31      	ldr	r3, [pc, #196]	@ (80090c8 <xPortStartScheduler+0x138>)
 8009004:	2207      	movs	r2, #7
 8009006:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009008:	e009      	b.n	800901e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800900a:	4b2f      	ldr	r3, [pc, #188]	@ (80090c8 <xPortStartScheduler+0x138>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	3b01      	subs	r3, #1
 8009010:	4a2d      	ldr	r2, [pc, #180]	@ (80090c8 <xPortStartScheduler+0x138>)
 8009012:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009014:	78fb      	ldrb	r3, [r7, #3]
 8009016:	b2db      	uxtb	r3, r3
 8009018:	005b      	lsls	r3, r3, #1
 800901a:	b2db      	uxtb	r3, r3
 800901c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800901e:	78fb      	ldrb	r3, [r7, #3]
 8009020:	b2db      	uxtb	r3, r3
 8009022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009026:	2b80      	cmp	r3, #128	@ 0x80
 8009028:	d0ef      	beq.n	800900a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800902a:	4b27      	ldr	r3, [pc, #156]	@ (80090c8 <xPortStartScheduler+0x138>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f1c3 0307 	rsb	r3, r3, #7
 8009032:	2b04      	cmp	r3, #4
 8009034:	d00b      	beq.n	800904e <xPortStartScheduler+0xbe>
	__asm volatile
 8009036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800903a:	f383 8811 	msr	BASEPRI, r3
 800903e:	f3bf 8f6f 	isb	sy
 8009042:	f3bf 8f4f 	dsb	sy
 8009046:	60bb      	str	r3, [r7, #8]
}
 8009048:	bf00      	nop
 800904a:	bf00      	nop
 800904c:	e7fd      	b.n	800904a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800904e:	4b1e      	ldr	r3, [pc, #120]	@ (80090c8 <xPortStartScheduler+0x138>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	021b      	lsls	r3, r3, #8
 8009054:	4a1c      	ldr	r2, [pc, #112]	@ (80090c8 <xPortStartScheduler+0x138>)
 8009056:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009058:	4b1b      	ldr	r3, [pc, #108]	@ (80090c8 <xPortStartScheduler+0x138>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009060:	4a19      	ldr	r2, [pc, #100]	@ (80090c8 <xPortStartScheduler+0x138>)
 8009062:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	b2da      	uxtb	r2, r3
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800906c:	4b17      	ldr	r3, [pc, #92]	@ (80090cc <xPortStartScheduler+0x13c>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a16      	ldr	r2, [pc, #88]	@ (80090cc <xPortStartScheduler+0x13c>)
 8009072:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009076:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009078:	4b14      	ldr	r3, [pc, #80]	@ (80090cc <xPortStartScheduler+0x13c>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4a13      	ldr	r2, [pc, #76]	@ (80090cc <xPortStartScheduler+0x13c>)
 800907e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009082:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009084:	f000 f8da 	bl	800923c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009088:	4b11      	ldr	r3, [pc, #68]	@ (80090d0 <xPortStartScheduler+0x140>)
 800908a:	2200      	movs	r2, #0
 800908c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800908e:	f000 f8f9 	bl	8009284 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009092:	4b10      	ldr	r3, [pc, #64]	@ (80090d4 <xPortStartScheduler+0x144>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4a0f      	ldr	r2, [pc, #60]	@ (80090d4 <xPortStartScheduler+0x144>)
 8009098:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800909c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800909e:	f7ff ff63 	bl	8008f68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80090a2:	f7fe ff21 	bl	8007ee8 <vTaskSwitchContext>
	prvTaskExitError();
 80090a6:	f7ff ff1d 	bl	8008ee4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80090aa:	2300      	movs	r3, #0
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3718      	adds	r7, #24
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}
 80090b4:	e000ed00 	.word	0xe000ed00
 80090b8:	410fc271 	.word	0x410fc271
 80090bc:	410fc270 	.word	0x410fc270
 80090c0:	e000e400 	.word	0xe000e400
 80090c4:	200018b0 	.word	0x200018b0
 80090c8:	200018b4 	.word	0x200018b4
 80090cc:	e000ed20 	.word	0xe000ed20
 80090d0:	20000010 	.word	0x20000010
 80090d4:	e000ef34 	.word	0xe000ef34

080090d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80090d8:	b480      	push	{r7}
 80090da:	b083      	sub	sp, #12
 80090dc:	af00      	add	r7, sp, #0
	__asm volatile
 80090de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090e2:	f383 8811 	msr	BASEPRI, r3
 80090e6:	f3bf 8f6f 	isb	sy
 80090ea:	f3bf 8f4f 	dsb	sy
 80090ee:	607b      	str	r3, [r7, #4]
}
 80090f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80090f2:	4b10      	ldr	r3, [pc, #64]	@ (8009134 <vPortEnterCritical+0x5c>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	3301      	adds	r3, #1
 80090f8:	4a0e      	ldr	r2, [pc, #56]	@ (8009134 <vPortEnterCritical+0x5c>)
 80090fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80090fc:	4b0d      	ldr	r3, [pc, #52]	@ (8009134 <vPortEnterCritical+0x5c>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	2b01      	cmp	r3, #1
 8009102:	d110      	bne.n	8009126 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009104:	4b0c      	ldr	r3, [pc, #48]	@ (8009138 <vPortEnterCritical+0x60>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	b2db      	uxtb	r3, r3
 800910a:	2b00      	cmp	r3, #0
 800910c:	d00b      	beq.n	8009126 <vPortEnterCritical+0x4e>
	__asm volatile
 800910e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009112:	f383 8811 	msr	BASEPRI, r3
 8009116:	f3bf 8f6f 	isb	sy
 800911a:	f3bf 8f4f 	dsb	sy
 800911e:	603b      	str	r3, [r7, #0]
}
 8009120:	bf00      	nop
 8009122:	bf00      	nop
 8009124:	e7fd      	b.n	8009122 <vPortEnterCritical+0x4a>
	}
}
 8009126:	bf00      	nop
 8009128:	370c      	adds	r7, #12
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr
 8009132:	bf00      	nop
 8009134:	20000010 	.word	0x20000010
 8009138:	e000ed04 	.word	0xe000ed04

0800913c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800913c:	b480      	push	{r7}
 800913e:	b083      	sub	sp, #12
 8009140:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009142:	4b12      	ldr	r3, [pc, #72]	@ (800918c <vPortExitCritical+0x50>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d10b      	bne.n	8009162 <vPortExitCritical+0x26>
	__asm volatile
 800914a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800914e:	f383 8811 	msr	BASEPRI, r3
 8009152:	f3bf 8f6f 	isb	sy
 8009156:	f3bf 8f4f 	dsb	sy
 800915a:	607b      	str	r3, [r7, #4]
}
 800915c:	bf00      	nop
 800915e:	bf00      	nop
 8009160:	e7fd      	b.n	800915e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009162:	4b0a      	ldr	r3, [pc, #40]	@ (800918c <vPortExitCritical+0x50>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	3b01      	subs	r3, #1
 8009168:	4a08      	ldr	r2, [pc, #32]	@ (800918c <vPortExitCritical+0x50>)
 800916a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800916c:	4b07      	ldr	r3, [pc, #28]	@ (800918c <vPortExitCritical+0x50>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d105      	bne.n	8009180 <vPortExitCritical+0x44>
 8009174:	2300      	movs	r3, #0
 8009176:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	f383 8811 	msr	BASEPRI, r3
}
 800917e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009180:	bf00      	nop
 8009182:	370c      	adds	r7, #12
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr
 800918c:	20000010 	.word	0x20000010

08009190 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009190:	f3ef 8009 	mrs	r0, PSP
 8009194:	f3bf 8f6f 	isb	sy
 8009198:	4b15      	ldr	r3, [pc, #84]	@ (80091f0 <pxCurrentTCBConst>)
 800919a:	681a      	ldr	r2, [r3, #0]
 800919c:	f01e 0f10 	tst.w	lr, #16
 80091a0:	bf08      	it	eq
 80091a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80091a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091aa:	6010      	str	r0, [r2, #0]
 80091ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80091b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80091b4:	f380 8811 	msr	BASEPRI, r0
 80091b8:	f3bf 8f4f 	dsb	sy
 80091bc:	f3bf 8f6f 	isb	sy
 80091c0:	f7fe fe92 	bl	8007ee8 <vTaskSwitchContext>
 80091c4:	f04f 0000 	mov.w	r0, #0
 80091c8:	f380 8811 	msr	BASEPRI, r0
 80091cc:	bc09      	pop	{r0, r3}
 80091ce:	6819      	ldr	r1, [r3, #0]
 80091d0:	6808      	ldr	r0, [r1, #0]
 80091d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091d6:	f01e 0f10 	tst.w	lr, #16
 80091da:	bf08      	it	eq
 80091dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80091e0:	f380 8809 	msr	PSP, r0
 80091e4:	f3bf 8f6f 	isb	sy
 80091e8:	4770      	bx	lr
 80091ea:	bf00      	nop
 80091ec:	f3af 8000 	nop.w

080091f0 <pxCurrentTCBConst>:
 80091f0:	20001284 	.word	0x20001284
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80091f4:	bf00      	nop
 80091f6:	bf00      	nop

080091f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
	__asm volatile
 80091fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009202:	f383 8811 	msr	BASEPRI, r3
 8009206:	f3bf 8f6f 	isb	sy
 800920a:	f3bf 8f4f 	dsb	sy
 800920e:	607b      	str	r3, [r7, #4]
}
 8009210:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009212:	f7fe fdaf 	bl	8007d74 <xTaskIncrementTick>
 8009216:	4603      	mov	r3, r0
 8009218:	2b00      	cmp	r3, #0
 800921a:	d003      	beq.n	8009224 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800921c:	4b06      	ldr	r3, [pc, #24]	@ (8009238 <xPortSysTickHandler+0x40>)
 800921e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009222:	601a      	str	r2, [r3, #0]
 8009224:	2300      	movs	r3, #0
 8009226:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	f383 8811 	msr	BASEPRI, r3
}
 800922e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009230:	bf00      	nop
 8009232:	3708      	adds	r7, #8
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}
 8009238:	e000ed04 	.word	0xe000ed04

0800923c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800923c:	b480      	push	{r7}
 800923e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009240:	4b0b      	ldr	r3, [pc, #44]	@ (8009270 <vPortSetupTimerInterrupt+0x34>)
 8009242:	2200      	movs	r2, #0
 8009244:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009246:	4b0b      	ldr	r3, [pc, #44]	@ (8009274 <vPortSetupTimerInterrupt+0x38>)
 8009248:	2200      	movs	r2, #0
 800924a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800924c:	4b0a      	ldr	r3, [pc, #40]	@ (8009278 <vPortSetupTimerInterrupt+0x3c>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a0a      	ldr	r2, [pc, #40]	@ (800927c <vPortSetupTimerInterrupt+0x40>)
 8009252:	fba2 2303 	umull	r2, r3, r2, r3
 8009256:	099b      	lsrs	r3, r3, #6
 8009258:	4a09      	ldr	r2, [pc, #36]	@ (8009280 <vPortSetupTimerInterrupt+0x44>)
 800925a:	3b01      	subs	r3, #1
 800925c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800925e:	4b04      	ldr	r3, [pc, #16]	@ (8009270 <vPortSetupTimerInterrupt+0x34>)
 8009260:	2207      	movs	r2, #7
 8009262:	601a      	str	r2, [r3, #0]
}
 8009264:	bf00      	nop
 8009266:	46bd      	mov	sp, r7
 8009268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926c:	4770      	bx	lr
 800926e:	bf00      	nop
 8009270:	e000e010 	.word	0xe000e010
 8009274:	e000e018 	.word	0xe000e018
 8009278:	20000004 	.word	0x20000004
 800927c:	10624dd3 	.word	0x10624dd3
 8009280:	e000e014 	.word	0xe000e014

08009284 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009284:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009294 <vPortEnableVFP+0x10>
 8009288:	6801      	ldr	r1, [r0, #0]
 800928a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800928e:	6001      	str	r1, [r0, #0]
 8009290:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009292:	bf00      	nop
 8009294:	e000ed88 	.word	0xe000ed88

08009298 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009298:	b480      	push	{r7}
 800929a:	b085      	sub	sp, #20
 800929c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800929e:	f3ef 8305 	mrs	r3, IPSR
 80092a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2b0f      	cmp	r3, #15
 80092a8:	d915      	bls.n	80092d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80092aa:	4a18      	ldr	r2, [pc, #96]	@ (800930c <vPortValidateInterruptPriority+0x74>)
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	4413      	add	r3, r2
 80092b0:	781b      	ldrb	r3, [r3, #0]
 80092b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80092b4:	4b16      	ldr	r3, [pc, #88]	@ (8009310 <vPortValidateInterruptPriority+0x78>)
 80092b6:	781b      	ldrb	r3, [r3, #0]
 80092b8:	7afa      	ldrb	r2, [r7, #11]
 80092ba:	429a      	cmp	r2, r3
 80092bc:	d20b      	bcs.n	80092d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80092be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092c2:	f383 8811 	msr	BASEPRI, r3
 80092c6:	f3bf 8f6f 	isb	sy
 80092ca:	f3bf 8f4f 	dsb	sy
 80092ce:	607b      	str	r3, [r7, #4]
}
 80092d0:	bf00      	nop
 80092d2:	bf00      	nop
 80092d4:	e7fd      	b.n	80092d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80092d6:	4b0f      	ldr	r3, [pc, #60]	@ (8009314 <vPortValidateInterruptPriority+0x7c>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80092de:	4b0e      	ldr	r3, [pc, #56]	@ (8009318 <vPortValidateInterruptPriority+0x80>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d90b      	bls.n	80092fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80092e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092ea:	f383 8811 	msr	BASEPRI, r3
 80092ee:	f3bf 8f6f 	isb	sy
 80092f2:	f3bf 8f4f 	dsb	sy
 80092f6:	603b      	str	r3, [r7, #0]
}
 80092f8:	bf00      	nop
 80092fa:	bf00      	nop
 80092fc:	e7fd      	b.n	80092fa <vPortValidateInterruptPriority+0x62>
	}
 80092fe:	bf00      	nop
 8009300:	3714      	adds	r7, #20
 8009302:	46bd      	mov	sp, r7
 8009304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009308:	4770      	bx	lr
 800930a:	bf00      	nop
 800930c:	e000e3f0 	.word	0xe000e3f0
 8009310:	200018b0 	.word	0x200018b0
 8009314:	e000ed0c 	.word	0xe000ed0c
 8009318:	200018b4 	.word	0x200018b4

0800931c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b08a      	sub	sp, #40	@ 0x28
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009324:	2300      	movs	r3, #0
 8009326:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009328:	f7fe fc56 	bl	8007bd8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800932c:	4b5c      	ldr	r3, [pc, #368]	@ (80094a0 <pvPortMalloc+0x184>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d101      	bne.n	8009338 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009334:	f000 f924 	bl	8009580 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009338:	4b5a      	ldr	r3, [pc, #360]	@ (80094a4 <pvPortMalloc+0x188>)
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	4013      	ands	r3, r2
 8009340:	2b00      	cmp	r3, #0
 8009342:	f040 8095 	bne.w	8009470 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d01e      	beq.n	800938a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800934c:	2208      	movs	r2, #8
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	4413      	add	r3, r2
 8009352:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f003 0307 	and.w	r3, r3, #7
 800935a:	2b00      	cmp	r3, #0
 800935c:	d015      	beq.n	800938a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f023 0307 	bic.w	r3, r3, #7
 8009364:	3308      	adds	r3, #8
 8009366:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f003 0307 	and.w	r3, r3, #7
 800936e:	2b00      	cmp	r3, #0
 8009370:	d00b      	beq.n	800938a <pvPortMalloc+0x6e>
	__asm volatile
 8009372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009376:	f383 8811 	msr	BASEPRI, r3
 800937a:	f3bf 8f6f 	isb	sy
 800937e:	f3bf 8f4f 	dsb	sy
 8009382:	617b      	str	r3, [r7, #20]
}
 8009384:	bf00      	nop
 8009386:	bf00      	nop
 8009388:	e7fd      	b.n	8009386 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d06f      	beq.n	8009470 <pvPortMalloc+0x154>
 8009390:	4b45      	ldr	r3, [pc, #276]	@ (80094a8 <pvPortMalloc+0x18c>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	687a      	ldr	r2, [r7, #4]
 8009396:	429a      	cmp	r2, r3
 8009398:	d86a      	bhi.n	8009470 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800939a:	4b44      	ldr	r3, [pc, #272]	@ (80094ac <pvPortMalloc+0x190>)
 800939c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800939e:	4b43      	ldr	r3, [pc, #268]	@ (80094ac <pvPortMalloc+0x190>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80093a4:	e004      	b.n	80093b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80093a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80093aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80093b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	687a      	ldr	r2, [r7, #4]
 80093b6:	429a      	cmp	r2, r3
 80093b8:	d903      	bls.n	80093c2 <pvPortMalloc+0xa6>
 80093ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d1f1      	bne.n	80093a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80093c2:	4b37      	ldr	r3, [pc, #220]	@ (80094a0 <pvPortMalloc+0x184>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d051      	beq.n	8009470 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80093cc:	6a3b      	ldr	r3, [r7, #32]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	2208      	movs	r2, #8
 80093d2:	4413      	add	r3, r2
 80093d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80093d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d8:	681a      	ldr	r2, [r3, #0]
 80093da:	6a3b      	ldr	r3, [r7, #32]
 80093dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80093de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093e0:	685a      	ldr	r2, [r3, #4]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	1ad2      	subs	r2, r2, r3
 80093e6:	2308      	movs	r3, #8
 80093e8:	005b      	lsls	r3, r3, #1
 80093ea:	429a      	cmp	r2, r3
 80093ec:	d920      	bls.n	8009430 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80093ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	4413      	add	r3, r2
 80093f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80093f6:	69bb      	ldr	r3, [r7, #24]
 80093f8:	f003 0307 	and.w	r3, r3, #7
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d00b      	beq.n	8009418 <pvPortMalloc+0xfc>
	__asm volatile
 8009400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009404:	f383 8811 	msr	BASEPRI, r3
 8009408:	f3bf 8f6f 	isb	sy
 800940c:	f3bf 8f4f 	dsb	sy
 8009410:	613b      	str	r3, [r7, #16]
}
 8009412:	bf00      	nop
 8009414:	bf00      	nop
 8009416:	e7fd      	b.n	8009414 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800941a:	685a      	ldr	r2, [r3, #4]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	1ad2      	subs	r2, r2, r3
 8009420:	69bb      	ldr	r3, [r7, #24]
 8009422:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009426:	687a      	ldr	r2, [r7, #4]
 8009428:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800942a:	69b8      	ldr	r0, [r7, #24]
 800942c:	f000 f90a 	bl	8009644 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009430:	4b1d      	ldr	r3, [pc, #116]	@ (80094a8 <pvPortMalloc+0x18c>)
 8009432:	681a      	ldr	r2, [r3, #0]
 8009434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	1ad3      	subs	r3, r2, r3
 800943a:	4a1b      	ldr	r2, [pc, #108]	@ (80094a8 <pvPortMalloc+0x18c>)
 800943c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800943e:	4b1a      	ldr	r3, [pc, #104]	@ (80094a8 <pvPortMalloc+0x18c>)
 8009440:	681a      	ldr	r2, [r3, #0]
 8009442:	4b1b      	ldr	r3, [pc, #108]	@ (80094b0 <pvPortMalloc+0x194>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	429a      	cmp	r2, r3
 8009448:	d203      	bcs.n	8009452 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800944a:	4b17      	ldr	r3, [pc, #92]	@ (80094a8 <pvPortMalloc+0x18c>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4a18      	ldr	r2, [pc, #96]	@ (80094b0 <pvPortMalloc+0x194>)
 8009450:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009454:	685a      	ldr	r2, [r3, #4]
 8009456:	4b13      	ldr	r3, [pc, #76]	@ (80094a4 <pvPortMalloc+0x188>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	431a      	orrs	r2, r3
 800945c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800945e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009462:	2200      	movs	r2, #0
 8009464:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009466:	4b13      	ldr	r3, [pc, #76]	@ (80094b4 <pvPortMalloc+0x198>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	3301      	adds	r3, #1
 800946c:	4a11      	ldr	r2, [pc, #68]	@ (80094b4 <pvPortMalloc+0x198>)
 800946e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009470:	f7fe fbc0 	bl	8007bf4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009474:	69fb      	ldr	r3, [r7, #28]
 8009476:	f003 0307 	and.w	r3, r3, #7
 800947a:	2b00      	cmp	r3, #0
 800947c:	d00b      	beq.n	8009496 <pvPortMalloc+0x17a>
	__asm volatile
 800947e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009482:	f383 8811 	msr	BASEPRI, r3
 8009486:	f3bf 8f6f 	isb	sy
 800948a:	f3bf 8f4f 	dsb	sy
 800948e:	60fb      	str	r3, [r7, #12]
}
 8009490:	bf00      	nop
 8009492:	bf00      	nop
 8009494:	e7fd      	b.n	8009492 <pvPortMalloc+0x176>
	return pvReturn;
 8009496:	69fb      	ldr	r3, [r7, #28]
}
 8009498:	4618      	mov	r0, r3
 800949a:	3728      	adds	r7, #40	@ 0x28
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}
 80094a0:	200054c0 	.word	0x200054c0
 80094a4:	200054d4 	.word	0x200054d4
 80094a8:	200054c4 	.word	0x200054c4
 80094ac:	200054b8 	.word	0x200054b8
 80094b0:	200054c8 	.word	0x200054c8
 80094b4:	200054cc 	.word	0x200054cc

080094b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b086      	sub	sp, #24
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d04f      	beq.n	800956a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80094ca:	2308      	movs	r3, #8
 80094cc:	425b      	negs	r3, r3
 80094ce:	697a      	ldr	r2, [r7, #20]
 80094d0:	4413      	add	r3, r2
 80094d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	685a      	ldr	r2, [r3, #4]
 80094dc:	4b25      	ldr	r3, [pc, #148]	@ (8009574 <vPortFree+0xbc>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4013      	ands	r3, r2
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d10b      	bne.n	80094fe <vPortFree+0x46>
	__asm volatile
 80094e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ea:	f383 8811 	msr	BASEPRI, r3
 80094ee:	f3bf 8f6f 	isb	sy
 80094f2:	f3bf 8f4f 	dsb	sy
 80094f6:	60fb      	str	r3, [r7, #12]
}
 80094f8:	bf00      	nop
 80094fa:	bf00      	nop
 80094fc:	e7fd      	b.n	80094fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d00b      	beq.n	800951e <vPortFree+0x66>
	__asm volatile
 8009506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800950a:	f383 8811 	msr	BASEPRI, r3
 800950e:	f3bf 8f6f 	isb	sy
 8009512:	f3bf 8f4f 	dsb	sy
 8009516:	60bb      	str	r3, [r7, #8]
}
 8009518:	bf00      	nop
 800951a:	bf00      	nop
 800951c:	e7fd      	b.n	800951a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	685a      	ldr	r2, [r3, #4]
 8009522:	4b14      	ldr	r3, [pc, #80]	@ (8009574 <vPortFree+0xbc>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	4013      	ands	r3, r2
 8009528:	2b00      	cmp	r3, #0
 800952a:	d01e      	beq.n	800956a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800952c:	693b      	ldr	r3, [r7, #16]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d11a      	bne.n	800956a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	685a      	ldr	r2, [r3, #4]
 8009538:	4b0e      	ldr	r3, [pc, #56]	@ (8009574 <vPortFree+0xbc>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	43db      	mvns	r3, r3
 800953e:	401a      	ands	r2, r3
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009544:	f7fe fb48 	bl	8007bd8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	685a      	ldr	r2, [r3, #4]
 800954c:	4b0a      	ldr	r3, [pc, #40]	@ (8009578 <vPortFree+0xc0>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4413      	add	r3, r2
 8009552:	4a09      	ldr	r2, [pc, #36]	@ (8009578 <vPortFree+0xc0>)
 8009554:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009556:	6938      	ldr	r0, [r7, #16]
 8009558:	f000 f874 	bl	8009644 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800955c:	4b07      	ldr	r3, [pc, #28]	@ (800957c <vPortFree+0xc4>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	3301      	adds	r3, #1
 8009562:	4a06      	ldr	r2, [pc, #24]	@ (800957c <vPortFree+0xc4>)
 8009564:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009566:	f7fe fb45 	bl	8007bf4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800956a:	bf00      	nop
 800956c:	3718      	adds	r7, #24
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}
 8009572:	bf00      	nop
 8009574:	200054d4 	.word	0x200054d4
 8009578:	200054c4 	.word	0x200054c4
 800957c:	200054d0 	.word	0x200054d0

08009580 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009580:	b480      	push	{r7}
 8009582:	b085      	sub	sp, #20
 8009584:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009586:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800958a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800958c:	4b27      	ldr	r3, [pc, #156]	@ (800962c <prvHeapInit+0xac>)
 800958e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	f003 0307 	and.w	r3, r3, #7
 8009596:	2b00      	cmp	r3, #0
 8009598:	d00c      	beq.n	80095b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	3307      	adds	r3, #7
 800959e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f023 0307 	bic.w	r3, r3, #7
 80095a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80095a8:	68ba      	ldr	r2, [r7, #8]
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	1ad3      	subs	r3, r2, r3
 80095ae:	4a1f      	ldr	r2, [pc, #124]	@ (800962c <prvHeapInit+0xac>)
 80095b0:	4413      	add	r3, r2
 80095b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80095b8:	4a1d      	ldr	r2, [pc, #116]	@ (8009630 <prvHeapInit+0xb0>)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80095be:	4b1c      	ldr	r3, [pc, #112]	@ (8009630 <prvHeapInit+0xb0>)
 80095c0:	2200      	movs	r2, #0
 80095c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	68ba      	ldr	r2, [r7, #8]
 80095c8:	4413      	add	r3, r2
 80095ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80095cc:	2208      	movs	r2, #8
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	1a9b      	subs	r3, r3, r2
 80095d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f023 0307 	bic.w	r3, r3, #7
 80095da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	4a15      	ldr	r2, [pc, #84]	@ (8009634 <prvHeapInit+0xb4>)
 80095e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80095e2:	4b14      	ldr	r3, [pc, #80]	@ (8009634 <prvHeapInit+0xb4>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	2200      	movs	r2, #0
 80095e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80095ea:	4b12      	ldr	r3, [pc, #72]	@ (8009634 <prvHeapInit+0xb4>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	2200      	movs	r2, #0
 80095f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	68fa      	ldr	r2, [r7, #12]
 80095fa:	1ad2      	subs	r2, r2, r3
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009600:	4b0c      	ldr	r3, [pc, #48]	@ (8009634 <prvHeapInit+0xb4>)
 8009602:	681a      	ldr	r2, [r3, #0]
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	4a0a      	ldr	r2, [pc, #40]	@ (8009638 <prvHeapInit+0xb8>)
 800960e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	4a09      	ldr	r2, [pc, #36]	@ (800963c <prvHeapInit+0xbc>)
 8009616:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009618:	4b09      	ldr	r3, [pc, #36]	@ (8009640 <prvHeapInit+0xc0>)
 800961a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800961e:	601a      	str	r2, [r3, #0]
}
 8009620:	bf00      	nop
 8009622:	3714      	adds	r7, #20
 8009624:	46bd      	mov	sp, r7
 8009626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962a:	4770      	bx	lr
 800962c:	200018b8 	.word	0x200018b8
 8009630:	200054b8 	.word	0x200054b8
 8009634:	200054c0 	.word	0x200054c0
 8009638:	200054c8 	.word	0x200054c8
 800963c:	200054c4 	.word	0x200054c4
 8009640:	200054d4 	.word	0x200054d4

08009644 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009644:	b480      	push	{r7}
 8009646:	b085      	sub	sp, #20
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800964c:	4b28      	ldr	r3, [pc, #160]	@ (80096f0 <prvInsertBlockIntoFreeList+0xac>)
 800964e:	60fb      	str	r3, [r7, #12]
 8009650:	e002      	b.n	8009658 <prvInsertBlockIntoFreeList+0x14>
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	60fb      	str	r3, [r7, #12]
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	687a      	ldr	r2, [r7, #4]
 800965e:	429a      	cmp	r2, r3
 8009660:	d8f7      	bhi.n	8009652 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	685b      	ldr	r3, [r3, #4]
 800966a:	68ba      	ldr	r2, [r7, #8]
 800966c:	4413      	add	r3, r2
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	429a      	cmp	r2, r3
 8009672:	d108      	bne.n	8009686 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	685a      	ldr	r2, [r3, #4]
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	685b      	ldr	r3, [r3, #4]
 800967c:	441a      	add	r2, r3
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	68ba      	ldr	r2, [r7, #8]
 8009690:	441a      	add	r2, r3
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	429a      	cmp	r2, r3
 8009698:	d118      	bne.n	80096cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681a      	ldr	r2, [r3, #0]
 800969e:	4b15      	ldr	r3, [pc, #84]	@ (80096f4 <prvInsertBlockIntoFreeList+0xb0>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	429a      	cmp	r2, r3
 80096a4:	d00d      	beq.n	80096c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	685a      	ldr	r2, [r3, #4]
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	441a      	add	r2, r3
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	681a      	ldr	r2, [r3, #0]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	601a      	str	r2, [r3, #0]
 80096c0:	e008      	b.n	80096d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80096c2:	4b0c      	ldr	r3, [pc, #48]	@ (80096f4 <prvInsertBlockIntoFreeList+0xb0>)
 80096c4:	681a      	ldr	r2, [r3, #0]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	601a      	str	r2, [r3, #0]
 80096ca:	e003      	b.n	80096d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681a      	ldr	r2, [r3, #0]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80096d4:	68fa      	ldr	r2, [r7, #12]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	429a      	cmp	r2, r3
 80096da:	d002      	beq.n	80096e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	687a      	ldr	r2, [r7, #4]
 80096e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80096e2:	bf00      	nop
 80096e4:	3714      	adds	r7, #20
 80096e6:	46bd      	mov	sp, r7
 80096e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ec:	4770      	bx	lr
 80096ee:	bf00      	nop
 80096f0:	200054b8 	.word	0x200054b8
 80096f4:	200054c0 	.word	0x200054c0

080096f8 <siprintf>:
 80096f8:	b40e      	push	{r1, r2, r3}
 80096fa:	b500      	push	{lr}
 80096fc:	b09c      	sub	sp, #112	@ 0x70
 80096fe:	ab1d      	add	r3, sp, #116	@ 0x74
 8009700:	9002      	str	r0, [sp, #8]
 8009702:	9006      	str	r0, [sp, #24]
 8009704:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009708:	4809      	ldr	r0, [pc, #36]	@ (8009730 <siprintf+0x38>)
 800970a:	9107      	str	r1, [sp, #28]
 800970c:	9104      	str	r1, [sp, #16]
 800970e:	4909      	ldr	r1, [pc, #36]	@ (8009734 <siprintf+0x3c>)
 8009710:	f853 2b04 	ldr.w	r2, [r3], #4
 8009714:	9105      	str	r1, [sp, #20]
 8009716:	6800      	ldr	r0, [r0, #0]
 8009718:	9301      	str	r3, [sp, #4]
 800971a:	a902      	add	r1, sp, #8
 800971c:	f000 fa0c 	bl	8009b38 <_svfiprintf_r>
 8009720:	9b02      	ldr	r3, [sp, #8]
 8009722:	2200      	movs	r2, #0
 8009724:	701a      	strb	r2, [r3, #0]
 8009726:	b01c      	add	sp, #112	@ 0x70
 8009728:	f85d eb04 	ldr.w	lr, [sp], #4
 800972c:	b003      	add	sp, #12
 800972e:	4770      	bx	lr
 8009730:	20000014 	.word	0x20000014
 8009734:	ffff0208 	.word	0xffff0208

08009738 <memset>:
 8009738:	4402      	add	r2, r0
 800973a:	4603      	mov	r3, r0
 800973c:	4293      	cmp	r3, r2
 800973e:	d100      	bne.n	8009742 <memset+0xa>
 8009740:	4770      	bx	lr
 8009742:	f803 1b01 	strb.w	r1, [r3], #1
 8009746:	e7f9      	b.n	800973c <memset+0x4>

08009748 <strncpy>:
 8009748:	b510      	push	{r4, lr}
 800974a:	3901      	subs	r1, #1
 800974c:	4603      	mov	r3, r0
 800974e:	b132      	cbz	r2, 800975e <strncpy+0x16>
 8009750:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009754:	f803 4b01 	strb.w	r4, [r3], #1
 8009758:	3a01      	subs	r2, #1
 800975a:	2c00      	cmp	r4, #0
 800975c:	d1f7      	bne.n	800974e <strncpy+0x6>
 800975e:	441a      	add	r2, r3
 8009760:	2100      	movs	r1, #0
 8009762:	4293      	cmp	r3, r2
 8009764:	d100      	bne.n	8009768 <strncpy+0x20>
 8009766:	bd10      	pop	{r4, pc}
 8009768:	f803 1b01 	strb.w	r1, [r3], #1
 800976c:	e7f9      	b.n	8009762 <strncpy+0x1a>
	...

08009770 <_reclaim_reent>:
 8009770:	4b29      	ldr	r3, [pc, #164]	@ (8009818 <_reclaim_reent+0xa8>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4283      	cmp	r3, r0
 8009776:	b570      	push	{r4, r5, r6, lr}
 8009778:	4604      	mov	r4, r0
 800977a:	d04b      	beq.n	8009814 <_reclaim_reent+0xa4>
 800977c:	69c3      	ldr	r3, [r0, #28]
 800977e:	b1ab      	cbz	r3, 80097ac <_reclaim_reent+0x3c>
 8009780:	68db      	ldr	r3, [r3, #12]
 8009782:	b16b      	cbz	r3, 80097a0 <_reclaim_reent+0x30>
 8009784:	2500      	movs	r5, #0
 8009786:	69e3      	ldr	r3, [r4, #28]
 8009788:	68db      	ldr	r3, [r3, #12]
 800978a:	5959      	ldr	r1, [r3, r5]
 800978c:	2900      	cmp	r1, #0
 800978e:	d13b      	bne.n	8009808 <_reclaim_reent+0x98>
 8009790:	3504      	adds	r5, #4
 8009792:	2d80      	cmp	r5, #128	@ 0x80
 8009794:	d1f7      	bne.n	8009786 <_reclaim_reent+0x16>
 8009796:	69e3      	ldr	r3, [r4, #28]
 8009798:	4620      	mov	r0, r4
 800979a:	68d9      	ldr	r1, [r3, #12]
 800979c:	f000 f878 	bl	8009890 <_free_r>
 80097a0:	69e3      	ldr	r3, [r4, #28]
 80097a2:	6819      	ldr	r1, [r3, #0]
 80097a4:	b111      	cbz	r1, 80097ac <_reclaim_reent+0x3c>
 80097a6:	4620      	mov	r0, r4
 80097a8:	f000 f872 	bl	8009890 <_free_r>
 80097ac:	6961      	ldr	r1, [r4, #20]
 80097ae:	b111      	cbz	r1, 80097b6 <_reclaim_reent+0x46>
 80097b0:	4620      	mov	r0, r4
 80097b2:	f000 f86d 	bl	8009890 <_free_r>
 80097b6:	69e1      	ldr	r1, [r4, #28]
 80097b8:	b111      	cbz	r1, 80097c0 <_reclaim_reent+0x50>
 80097ba:	4620      	mov	r0, r4
 80097bc:	f000 f868 	bl	8009890 <_free_r>
 80097c0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80097c2:	b111      	cbz	r1, 80097ca <_reclaim_reent+0x5a>
 80097c4:	4620      	mov	r0, r4
 80097c6:	f000 f863 	bl	8009890 <_free_r>
 80097ca:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80097cc:	b111      	cbz	r1, 80097d4 <_reclaim_reent+0x64>
 80097ce:	4620      	mov	r0, r4
 80097d0:	f000 f85e 	bl	8009890 <_free_r>
 80097d4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80097d6:	b111      	cbz	r1, 80097de <_reclaim_reent+0x6e>
 80097d8:	4620      	mov	r0, r4
 80097da:	f000 f859 	bl	8009890 <_free_r>
 80097de:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80097e0:	b111      	cbz	r1, 80097e8 <_reclaim_reent+0x78>
 80097e2:	4620      	mov	r0, r4
 80097e4:	f000 f854 	bl	8009890 <_free_r>
 80097e8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80097ea:	b111      	cbz	r1, 80097f2 <_reclaim_reent+0x82>
 80097ec:	4620      	mov	r0, r4
 80097ee:	f000 f84f 	bl	8009890 <_free_r>
 80097f2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80097f4:	b111      	cbz	r1, 80097fc <_reclaim_reent+0x8c>
 80097f6:	4620      	mov	r0, r4
 80097f8:	f000 f84a 	bl	8009890 <_free_r>
 80097fc:	6a23      	ldr	r3, [r4, #32]
 80097fe:	b14b      	cbz	r3, 8009814 <_reclaim_reent+0xa4>
 8009800:	4620      	mov	r0, r4
 8009802:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009806:	4718      	bx	r3
 8009808:	680e      	ldr	r6, [r1, #0]
 800980a:	4620      	mov	r0, r4
 800980c:	f000 f840 	bl	8009890 <_free_r>
 8009810:	4631      	mov	r1, r6
 8009812:	e7bb      	b.n	800978c <_reclaim_reent+0x1c>
 8009814:	bd70      	pop	{r4, r5, r6, pc}
 8009816:	bf00      	nop
 8009818:	20000014 	.word	0x20000014

0800981c <__errno>:
 800981c:	4b01      	ldr	r3, [pc, #4]	@ (8009824 <__errno+0x8>)
 800981e:	6818      	ldr	r0, [r3, #0]
 8009820:	4770      	bx	lr
 8009822:	bf00      	nop
 8009824:	20000014 	.word	0x20000014

08009828 <__libc_init_array>:
 8009828:	b570      	push	{r4, r5, r6, lr}
 800982a:	4d0d      	ldr	r5, [pc, #52]	@ (8009860 <__libc_init_array+0x38>)
 800982c:	4c0d      	ldr	r4, [pc, #52]	@ (8009864 <__libc_init_array+0x3c>)
 800982e:	1b64      	subs	r4, r4, r5
 8009830:	10a4      	asrs	r4, r4, #2
 8009832:	2600      	movs	r6, #0
 8009834:	42a6      	cmp	r6, r4
 8009836:	d109      	bne.n	800984c <__libc_init_array+0x24>
 8009838:	4d0b      	ldr	r5, [pc, #44]	@ (8009868 <__libc_init_array+0x40>)
 800983a:	4c0c      	ldr	r4, [pc, #48]	@ (800986c <__libc_init_array+0x44>)
 800983c:	f000 fed0 	bl	800a5e0 <_init>
 8009840:	1b64      	subs	r4, r4, r5
 8009842:	10a4      	asrs	r4, r4, #2
 8009844:	2600      	movs	r6, #0
 8009846:	42a6      	cmp	r6, r4
 8009848:	d105      	bne.n	8009856 <__libc_init_array+0x2e>
 800984a:	bd70      	pop	{r4, r5, r6, pc}
 800984c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009850:	4798      	blx	r3
 8009852:	3601      	adds	r6, #1
 8009854:	e7ee      	b.n	8009834 <__libc_init_array+0xc>
 8009856:	f855 3b04 	ldr.w	r3, [r5], #4
 800985a:	4798      	blx	r3
 800985c:	3601      	adds	r6, #1
 800985e:	e7f2      	b.n	8009846 <__libc_init_array+0x1e>
 8009860:	0800aa40 	.word	0x0800aa40
 8009864:	0800aa40 	.word	0x0800aa40
 8009868:	0800aa40 	.word	0x0800aa40
 800986c:	0800aa44 	.word	0x0800aa44

08009870 <__retarget_lock_acquire_recursive>:
 8009870:	4770      	bx	lr

08009872 <__retarget_lock_release_recursive>:
 8009872:	4770      	bx	lr

08009874 <memcpy>:
 8009874:	440a      	add	r2, r1
 8009876:	4291      	cmp	r1, r2
 8009878:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800987c:	d100      	bne.n	8009880 <memcpy+0xc>
 800987e:	4770      	bx	lr
 8009880:	b510      	push	{r4, lr}
 8009882:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009886:	f803 4f01 	strb.w	r4, [r3, #1]!
 800988a:	4291      	cmp	r1, r2
 800988c:	d1f9      	bne.n	8009882 <memcpy+0xe>
 800988e:	bd10      	pop	{r4, pc}

08009890 <_free_r>:
 8009890:	b538      	push	{r3, r4, r5, lr}
 8009892:	4605      	mov	r5, r0
 8009894:	2900      	cmp	r1, #0
 8009896:	d041      	beq.n	800991c <_free_r+0x8c>
 8009898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800989c:	1f0c      	subs	r4, r1, #4
 800989e:	2b00      	cmp	r3, #0
 80098a0:	bfb8      	it	lt
 80098a2:	18e4      	addlt	r4, r4, r3
 80098a4:	f000 f8e0 	bl	8009a68 <__malloc_lock>
 80098a8:	4a1d      	ldr	r2, [pc, #116]	@ (8009920 <_free_r+0x90>)
 80098aa:	6813      	ldr	r3, [r2, #0]
 80098ac:	b933      	cbnz	r3, 80098bc <_free_r+0x2c>
 80098ae:	6063      	str	r3, [r4, #4]
 80098b0:	6014      	str	r4, [r2, #0]
 80098b2:	4628      	mov	r0, r5
 80098b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098b8:	f000 b8dc 	b.w	8009a74 <__malloc_unlock>
 80098bc:	42a3      	cmp	r3, r4
 80098be:	d908      	bls.n	80098d2 <_free_r+0x42>
 80098c0:	6820      	ldr	r0, [r4, #0]
 80098c2:	1821      	adds	r1, r4, r0
 80098c4:	428b      	cmp	r3, r1
 80098c6:	bf01      	itttt	eq
 80098c8:	6819      	ldreq	r1, [r3, #0]
 80098ca:	685b      	ldreq	r3, [r3, #4]
 80098cc:	1809      	addeq	r1, r1, r0
 80098ce:	6021      	streq	r1, [r4, #0]
 80098d0:	e7ed      	b.n	80098ae <_free_r+0x1e>
 80098d2:	461a      	mov	r2, r3
 80098d4:	685b      	ldr	r3, [r3, #4]
 80098d6:	b10b      	cbz	r3, 80098dc <_free_r+0x4c>
 80098d8:	42a3      	cmp	r3, r4
 80098da:	d9fa      	bls.n	80098d2 <_free_r+0x42>
 80098dc:	6811      	ldr	r1, [r2, #0]
 80098de:	1850      	adds	r0, r2, r1
 80098e0:	42a0      	cmp	r0, r4
 80098e2:	d10b      	bne.n	80098fc <_free_r+0x6c>
 80098e4:	6820      	ldr	r0, [r4, #0]
 80098e6:	4401      	add	r1, r0
 80098e8:	1850      	adds	r0, r2, r1
 80098ea:	4283      	cmp	r3, r0
 80098ec:	6011      	str	r1, [r2, #0]
 80098ee:	d1e0      	bne.n	80098b2 <_free_r+0x22>
 80098f0:	6818      	ldr	r0, [r3, #0]
 80098f2:	685b      	ldr	r3, [r3, #4]
 80098f4:	6053      	str	r3, [r2, #4]
 80098f6:	4408      	add	r0, r1
 80098f8:	6010      	str	r0, [r2, #0]
 80098fa:	e7da      	b.n	80098b2 <_free_r+0x22>
 80098fc:	d902      	bls.n	8009904 <_free_r+0x74>
 80098fe:	230c      	movs	r3, #12
 8009900:	602b      	str	r3, [r5, #0]
 8009902:	e7d6      	b.n	80098b2 <_free_r+0x22>
 8009904:	6820      	ldr	r0, [r4, #0]
 8009906:	1821      	adds	r1, r4, r0
 8009908:	428b      	cmp	r3, r1
 800990a:	bf04      	itt	eq
 800990c:	6819      	ldreq	r1, [r3, #0]
 800990e:	685b      	ldreq	r3, [r3, #4]
 8009910:	6063      	str	r3, [r4, #4]
 8009912:	bf04      	itt	eq
 8009914:	1809      	addeq	r1, r1, r0
 8009916:	6021      	streq	r1, [r4, #0]
 8009918:	6054      	str	r4, [r2, #4]
 800991a:	e7ca      	b.n	80098b2 <_free_r+0x22>
 800991c:	bd38      	pop	{r3, r4, r5, pc}
 800991e:	bf00      	nop
 8009920:	2000561c 	.word	0x2000561c

08009924 <sbrk_aligned>:
 8009924:	b570      	push	{r4, r5, r6, lr}
 8009926:	4e0f      	ldr	r6, [pc, #60]	@ (8009964 <sbrk_aligned+0x40>)
 8009928:	460c      	mov	r4, r1
 800992a:	6831      	ldr	r1, [r6, #0]
 800992c:	4605      	mov	r5, r0
 800992e:	b911      	cbnz	r1, 8009936 <sbrk_aligned+0x12>
 8009930:	f000 fba6 	bl	800a080 <_sbrk_r>
 8009934:	6030      	str	r0, [r6, #0]
 8009936:	4621      	mov	r1, r4
 8009938:	4628      	mov	r0, r5
 800993a:	f000 fba1 	bl	800a080 <_sbrk_r>
 800993e:	1c43      	adds	r3, r0, #1
 8009940:	d103      	bne.n	800994a <sbrk_aligned+0x26>
 8009942:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009946:	4620      	mov	r0, r4
 8009948:	bd70      	pop	{r4, r5, r6, pc}
 800994a:	1cc4      	adds	r4, r0, #3
 800994c:	f024 0403 	bic.w	r4, r4, #3
 8009950:	42a0      	cmp	r0, r4
 8009952:	d0f8      	beq.n	8009946 <sbrk_aligned+0x22>
 8009954:	1a21      	subs	r1, r4, r0
 8009956:	4628      	mov	r0, r5
 8009958:	f000 fb92 	bl	800a080 <_sbrk_r>
 800995c:	3001      	adds	r0, #1
 800995e:	d1f2      	bne.n	8009946 <sbrk_aligned+0x22>
 8009960:	e7ef      	b.n	8009942 <sbrk_aligned+0x1e>
 8009962:	bf00      	nop
 8009964:	20005618 	.word	0x20005618

08009968 <_malloc_r>:
 8009968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800996c:	1ccd      	adds	r5, r1, #3
 800996e:	f025 0503 	bic.w	r5, r5, #3
 8009972:	3508      	adds	r5, #8
 8009974:	2d0c      	cmp	r5, #12
 8009976:	bf38      	it	cc
 8009978:	250c      	movcc	r5, #12
 800997a:	2d00      	cmp	r5, #0
 800997c:	4606      	mov	r6, r0
 800997e:	db01      	blt.n	8009984 <_malloc_r+0x1c>
 8009980:	42a9      	cmp	r1, r5
 8009982:	d904      	bls.n	800998e <_malloc_r+0x26>
 8009984:	230c      	movs	r3, #12
 8009986:	6033      	str	r3, [r6, #0]
 8009988:	2000      	movs	r0, #0
 800998a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800998e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009a64 <_malloc_r+0xfc>
 8009992:	f000 f869 	bl	8009a68 <__malloc_lock>
 8009996:	f8d8 3000 	ldr.w	r3, [r8]
 800999a:	461c      	mov	r4, r3
 800999c:	bb44      	cbnz	r4, 80099f0 <_malloc_r+0x88>
 800999e:	4629      	mov	r1, r5
 80099a0:	4630      	mov	r0, r6
 80099a2:	f7ff ffbf 	bl	8009924 <sbrk_aligned>
 80099a6:	1c43      	adds	r3, r0, #1
 80099a8:	4604      	mov	r4, r0
 80099aa:	d158      	bne.n	8009a5e <_malloc_r+0xf6>
 80099ac:	f8d8 4000 	ldr.w	r4, [r8]
 80099b0:	4627      	mov	r7, r4
 80099b2:	2f00      	cmp	r7, #0
 80099b4:	d143      	bne.n	8009a3e <_malloc_r+0xd6>
 80099b6:	2c00      	cmp	r4, #0
 80099b8:	d04b      	beq.n	8009a52 <_malloc_r+0xea>
 80099ba:	6823      	ldr	r3, [r4, #0]
 80099bc:	4639      	mov	r1, r7
 80099be:	4630      	mov	r0, r6
 80099c0:	eb04 0903 	add.w	r9, r4, r3
 80099c4:	f000 fb5c 	bl	800a080 <_sbrk_r>
 80099c8:	4581      	cmp	r9, r0
 80099ca:	d142      	bne.n	8009a52 <_malloc_r+0xea>
 80099cc:	6821      	ldr	r1, [r4, #0]
 80099ce:	1a6d      	subs	r5, r5, r1
 80099d0:	4629      	mov	r1, r5
 80099d2:	4630      	mov	r0, r6
 80099d4:	f7ff ffa6 	bl	8009924 <sbrk_aligned>
 80099d8:	3001      	adds	r0, #1
 80099da:	d03a      	beq.n	8009a52 <_malloc_r+0xea>
 80099dc:	6823      	ldr	r3, [r4, #0]
 80099de:	442b      	add	r3, r5
 80099e0:	6023      	str	r3, [r4, #0]
 80099e2:	f8d8 3000 	ldr.w	r3, [r8]
 80099e6:	685a      	ldr	r2, [r3, #4]
 80099e8:	bb62      	cbnz	r2, 8009a44 <_malloc_r+0xdc>
 80099ea:	f8c8 7000 	str.w	r7, [r8]
 80099ee:	e00f      	b.n	8009a10 <_malloc_r+0xa8>
 80099f0:	6822      	ldr	r2, [r4, #0]
 80099f2:	1b52      	subs	r2, r2, r5
 80099f4:	d420      	bmi.n	8009a38 <_malloc_r+0xd0>
 80099f6:	2a0b      	cmp	r2, #11
 80099f8:	d917      	bls.n	8009a2a <_malloc_r+0xc2>
 80099fa:	1961      	adds	r1, r4, r5
 80099fc:	42a3      	cmp	r3, r4
 80099fe:	6025      	str	r5, [r4, #0]
 8009a00:	bf18      	it	ne
 8009a02:	6059      	strne	r1, [r3, #4]
 8009a04:	6863      	ldr	r3, [r4, #4]
 8009a06:	bf08      	it	eq
 8009a08:	f8c8 1000 	streq.w	r1, [r8]
 8009a0c:	5162      	str	r2, [r4, r5]
 8009a0e:	604b      	str	r3, [r1, #4]
 8009a10:	4630      	mov	r0, r6
 8009a12:	f000 f82f 	bl	8009a74 <__malloc_unlock>
 8009a16:	f104 000b 	add.w	r0, r4, #11
 8009a1a:	1d23      	adds	r3, r4, #4
 8009a1c:	f020 0007 	bic.w	r0, r0, #7
 8009a20:	1ac2      	subs	r2, r0, r3
 8009a22:	bf1c      	itt	ne
 8009a24:	1a1b      	subne	r3, r3, r0
 8009a26:	50a3      	strne	r3, [r4, r2]
 8009a28:	e7af      	b.n	800998a <_malloc_r+0x22>
 8009a2a:	6862      	ldr	r2, [r4, #4]
 8009a2c:	42a3      	cmp	r3, r4
 8009a2e:	bf0c      	ite	eq
 8009a30:	f8c8 2000 	streq.w	r2, [r8]
 8009a34:	605a      	strne	r2, [r3, #4]
 8009a36:	e7eb      	b.n	8009a10 <_malloc_r+0xa8>
 8009a38:	4623      	mov	r3, r4
 8009a3a:	6864      	ldr	r4, [r4, #4]
 8009a3c:	e7ae      	b.n	800999c <_malloc_r+0x34>
 8009a3e:	463c      	mov	r4, r7
 8009a40:	687f      	ldr	r7, [r7, #4]
 8009a42:	e7b6      	b.n	80099b2 <_malloc_r+0x4a>
 8009a44:	461a      	mov	r2, r3
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	42a3      	cmp	r3, r4
 8009a4a:	d1fb      	bne.n	8009a44 <_malloc_r+0xdc>
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	6053      	str	r3, [r2, #4]
 8009a50:	e7de      	b.n	8009a10 <_malloc_r+0xa8>
 8009a52:	230c      	movs	r3, #12
 8009a54:	6033      	str	r3, [r6, #0]
 8009a56:	4630      	mov	r0, r6
 8009a58:	f000 f80c 	bl	8009a74 <__malloc_unlock>
 8009a5c:	e794      	b.n	8009988 <_malloc_r+0x20>
 8009a5e:	6005      	str	r5, [r0, #0]
 8009a60:	e7d6      	b.n	8009a10 <_malloc_r+0xa8>
 8009a62:	bf00      	nop
 8009a64:	2000561c 	.word	0x2000561c

08009a68 <__malloc_lock>:
 8009a68:	4801      	ldr	r0, [pc, #4]	@ (8009a70 <__malloc_lock+0x8>)
 8009a6a:	f7ff bf01 	b.w	8009870 <__retarget_lock_acquire_recursive>
 8009a6e:	bf00      	nop
 8009a70:	20005614 	.word	0x20005614

08009a74 <__malloc_unlock>:
 8009a74:	4801      	ldr	r0, [pc, #4]	@ (8009a7c <__malloc_unlock+0x8>)
 8009a76:	f7ff befc 	b.w	8009872 <__retarget_lock_release_recursive>
 8009a7a:	bf00      	nop
 8009a7c:	20005614 	.word	0x20005614

08009a80 <__ssputs_r>:
 8009a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a84:	688e      	ldr	r6, [r1, #8]
 8009a86:	461f      	mov	r7, r3
 8009a88:	42be      	cmp	r6, r7
 8009a8a:	680b      	ldr	r3, [r1, #0]
 8009a8c:	4682      	mov	sl, r0
 8009a8e:	460c      	mov	r4, r1
 8009a90:	4690      	mov	r8, r2
 8009a92:	d82d      	bhi.n	8009af0 <__ssputs_r+0x70>
 8009a94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009a98:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009a9c:	d026      	beq.n	8009aec <__ssputs_r+0x6c>
 8009a9e:	6965      	ldr	r5, [r4, #20]
 8009aa0:	6909      	ldr	r1, [r1, #16]
 8009aa2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009aa6:	eba3 0901 	sub.w	r9, r3, r1
 8009aaa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009aae:	1c7b      	adds	r3, r7, #1
 8009ab0:	444b      	add	r3, r9
 8009ab2:	106d      	asrs	r5, r5, #1
 8009ab4:	429d      	cmp	r5, r3
 8009ab6:	bf38      	it	cc
 8009ab8:	461d      	movcc	r5, r3
 8009aba:	0553      	lsls	r3, r2, #21
 8009abc:	d527      	bpl.n	8009b0e <__ssputs_r+0x8e>
 8009abe:	4629      	mov	r1, r5
 8009ac0:	f7ff ff52 	bl	8009968 <_malloc_r>
 8009ac4:	4606      	mov	r6, r0
 8009ac6:	b360      	cbz	r0, 8009b22 <__ssputs_r+0xa2>
 8009ac8:	6921      	ldr	r1, [r4, #16]
 8009aca:	464a      	mov	r2, r9
 8009acc:	f7ff fed2 	bl	8009874 <memcpy>
 8009ad0:	89a3      	ldrh	r3, [r4, #12]
 8009ad2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009ad6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ada:	81a3      	strh	r3, [r4, #12]
 8009adc:	6126      	str	r6, [r4, #16]
 8009ade:	6165      	str	r5, [r4, #20]
 8009ae0:	444e      	add	r6, r9
 8009ae2:	eba5 0509 	sub.w	r5, r5, r9
 8009ae6:	6026      	str	r6, [r4, #0]
 8009ae8:	60a5      	str	r5, [r4, #8]
 8009aea:	463e      	mov	r6, r7
 8009aec:	42be      	cmp	r6, r7
 8009aee:	d900      	bls.n	8009af2 <__ssputs_r+0x72>
 8009af0:	463e      	mov	r6, r7
 8009af2:	6820      	ldr	r0, [r4, #0]
 8009af4:	4632      	mov	r2, r6
 8009af6:	4641      	mov	r1, r8
 8009af8:	f000 faa8 	bl	800a04c <memmove>
 8009afc:	68a3      	ldr	r3, [r4, #8]
 8009afe:	1b9b      	subs	r3, r3, r6
 8009b00:	60a3      	str	r3, [r4, #8]
 8009b02:	6823      	ldr	r3, [r4, #0]
 8009b04:	4433      	add	r3, r6
 8009b06:	6023      	str	r3, [r4, #0]
 8009b08:	2000      	movs	r0, #0
 8009b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b0e:	462a      	mov	r2, r5
 8009b10:	f000 fac6 	bl	800a0a0 <_realloc_r>
 8009b14:	4606      	mov	r6, r0
 8009b16:	2800      	cmp	r0, #0
 8009b18:	d1e0      	bne.n	8009adc <__ssputs_r+0x5c>
 8009b1a:	6921      	ldr	r1, [r4, #16]
 8009b1c:	4650      	mov	r0, sl
 8009b1e:	f7ff feb7 	bl	8009890 <_free_r>
 8009b22:	230c      	movs	r3, #12
 8009b24:	f8ca 3000 	str.w	r3, [sl]
 8009b28:	89a3      	ldrh	r3, [r4, #12]
 8009b2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b2e:	81a3      	strh	r3, [r4, #12]
 8009b30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009b34:	e7e9      	b.n	8009b0a <__ssputs_r+0x8a>
	...

08009b38 <_svfiprintf_r>:
 8009b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b3c:	4698      	mov	r8, r3
 8009b3e:	898b      	ldrh	r3, [r1, #12]
 8009b40:	061b      	lsls	r3, r3, #24
 8009b42:	b09d      	sub	sp, #116	@ 0x74
 8009b44:	4607      	mov	r7, r0
 8009b46:	460d      	mov	r5, r1
 8009b48:	4614      	mov	r4, r2
 8009b4a:	d510      	bpl.n	8009b6e <_svfiprintf_r+0x36>
 8009b4c:	690b      	ldr	r3, [r1, #16]
 8009b4e:	b973      	cbnz	r3, 8009b6e <_svfiprintf_r+0x36>
 8009b50:	2140      	movs	r1, #64	@ 0x40
 8009b52:	f7ff ff09 	bl	8009968 <_malloc_r>
 8009b56:	6028      	str	r0, [r5, #0]
 8009b58:	6128      	str	r0, [r5, #16]
 8009b5a:	b930      	cbnz	r0, 8009b6a <_svfiprintf_r+0x32>
 8009b5c:	230c      	movs	r3, #12
 8009b5e:	603b      	str	r3, [r7, #0]
 8009b60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009b64:	b01d      	add	sp, #116	@ 0x74
 8009b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b6a:	2340      	movs	r3, #64	@ 0x40
 8009b6c:	616b      	str	r3, [r5, #20]
 8009b6e:	2300      	movs	r3, #0
 8009b70:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b72:	2320      	movs	r3, #32
 8009b74:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009b78:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b7c:	2330      	movs	r3, #48	@ 0x30
 8009b7e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009d1c <_svfiprintf_r+0x1e4>
 8009b82:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009b86:	f04f 0901 	mov.w	r9, #1
 8009b8a:	4623      	mov	r3, r4
 8009b8c:	469a      	mov	sl, r3
 8009b8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b92:	b10a      	cbz	r2, 8009b98 <_svfiprintf_r+0x60>
 8009b94:	2a25      	cmp	r2, #37	@ 0x25
 8009b96:	d1f9      	bne.n	8009b8c <_svfiprintf_r+0x54>
 8009b98:	ebba 0b04 	subs.w	fp, sl, r4
 8009b9c:	d00b      	beq.n	8009bb6 <_svfiprintf_r+0x7e>
 8009b9e:	465b      	mov	r3, fp
 8009ba0:	4622      	mov	r2, r4
 8009ba2:	4629      	mov	r1, r5
 8009ba4:	4638      	mov	r0, r7
 8009ba6:	f7ff ff6b 	bl	8009a80 <__ssputs_r>
 8009baa:	3001      	adds	r0, #1
 8009bac:	f000 80a7 	beq.w	8009cfe <_svfiprintf_r+0x1c6>
 8009bb0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009bb2:	445a      	add	r2, fp
 8009bb4:	9209      	str	r2, [sp, #36]	@ 0x24
 8009bb6:	f89a 3000 	ldrb.w	r3, [sl]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	f000 809f 	beq.w	8009cfe <_svfiprintf_r+0x1c6>
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009bc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009bca:	f10a 0a01 	add.w	sl, sl, #1
 8009bce:	9304      	str	r3, [sp, #16]
 8009bd0:	9307      	str	r3, [sp, #28]
 8009bd2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009bd6:	931a      	str	r3, [sp, #104]	@ 0x68
 8009bd8:	4654      	mov	r4, sl
 8009bda:	2205      	movs	r2, #5
 8009bdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009be0:	484e      	ldr	r0, [pc, #312]	@ (8009d1c <_svfiprintf_r+0x1e4>)
 8009be2:	f7f6 fb1d 	bl	8000220 <memchr>
 8009be6:	9a04      	ldr	r2, [sp, #16]
 8009be8:	b9d8      	cbnz	r0, 8009c22 <_svfiprintf_r+0xea>
 8009bea:	06d0      	lsls	r0, r2, #27
 8009bec:	bf44      	itt	mi
 8009bee:	2320      	movmi	r3, #32
 8009bf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009bf4:	0711      	lsls	r1, r2, #28
 8009bf6:	bf44      	itt	mi
 8009bf8:	232b      	movmi	r3, #43	@ 0x2b
 8009bfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009bfe:	f89a 3000 	ldrb.w	r3, [sl]
 8009c02:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c04:	d015      	beq.n	8009c32 <_svfiprintf_r+0xfa>
 8009c06:	9a07      	ldr	r2, [sp, #28]
 8009c08:	4654      	mov	r4, sl
 8009c0a:	2000      	movs	r0, #0
 8009c0c:	f04f 0c0a 	mov.w	ip, #10
 8009c10:	4621      	mov	r1, r4
 8009c12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c16:	3b30      	subs	r3, #48	@ 0x30
 8009c18:	2b09      	cmp	r3, #9
 8009c1a:	d94b      	bls.n	8009cb4 <_svfiprintf_r+0x17c>
 8009c1c:	b1b0      	cbz	r0, 8009c4c <_svfiprintf_r+0x114>
 8009c1e:	9207      	str	r2, [sp, #28]
 8009c20:	e014      	b.n	8009c4c <_svfiprintf_r+0x114>
 8009c22:	eba0 0308 	sub.w	r3, r0, r8
 8009c26:	fa09 f303 	lsl.w	r3, r9, r3
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	9304      	str	r3, [sp, #16]
 8009c2e:	46a2      	mov	sl, r4
 8009c30:	e7d2      	b.n	8009bd8 <_svfiprintf_r+0xa0>
 8009c32:	9b03      	ldr	r3, [sp, #12]
 8009c34:	1d19      	adds	r1, r3, #4
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	9103      	str	r1, [sp, #12]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	bfbb      	ittet	lt
 8009c3e:	425b      	neglt	r3, r3
 8009c40:	f042 0202 	orrlt.w	r2, r2, #2
 8009c44:	9307      	strge	r3, [sp, #28]
 8009c46:	9307      	strlt	r3, [sp, #28]
 8009c48:	bfb8      	it	lt
 8009c4a:	9204      	strlt	r2, [sp, #16]
 8009c4c:	7823      	ldrb	r3, [r4, #0]
 8009c4e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009c50:	d10a      	bne.n	8009c68 <_svfiprintf_r+0x130>
 8009c52:	7863      	ldrb	r3, [r4, #1]
 8009c54:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c56:	d132      	bne.n	8009cbe <_svfiprintf_r+0x186>
 8009c58:	9b03      	ldr	r3, [sp, #12]
 8009c5a:	1d1a      	adds	r2, r3, #4
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	9203      	str	r2, [sp, #12]
 8009c60:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009c64:	3402      	adds	r4, #2
 8009c66:	9305      	str	r3, [sp, #20]
 8009c68:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009d2c <_svfiprintf_r+0x1f4>
 8009c6c:	7821      	ldrb	r1, [r4, #0]
 8009c6e:	2203      	movs	r2, #3
 8009c70:	4650      	mov	r0, sl
 8009c72:	f7f6 fad5 	bl	8000220 <memchr>
 8009c76:	b138      	cbz	r0, 8009c88 <_svfiprintf_r+0x150>
 8009c78:	9b04      	ldr	r3, [sp, #16]
 8009c7a:	eba0 000a 	sub.w	r0, r0, sl
 8009c7e:	2240      	movs	r2, #64	@ 0x40
 8009c80:	4082      	lsls	r2, r0
 8009c82:	4313      	orrs	r3, r2
 8009c84:	3401      	adds	r4, #1
 8009c86:	9304      	str	r3, [sp, #16]
 8009c88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c8c:	4824      	ldr	r0, [pc, #144]	@ (8009d20 <_svfiprintf_r+0x1e8>)
 8009c8e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009c92:	2206      	movs	r2, #6
 8009c94:	f7f6 fac4 	bl	8000220 <memchr>
 8009c98:	2800      	cmp	r0, #0
 8009c9a:	d036      	beq.n	8009d0a <_svfiprintf_r+0x1d2>
 8009c9c:	4b21      	ldr	r3, [pc, #132]	@ (8009d24 <_svfiprintf_r+0x1ec>)
 8009c9e:	bb1b      	cbnz	r3, 8009ce8 <_svfiprintf_r+0x1b0>
 8009ca0:	9b03      	ldr	r3, [sp, #12]
 8009ca2:	3307      	adds	r3, #7
 8009ca4:	f023 0307 	bic.w	r3, r3, #7
 8009ca8:	3308      	adds	r3, #8
 8009caa:	9303      	str	r3, [sp, #12]
 8009cac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cae:	4433      	add	r3, r6
 8009cb0:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cb2:	e76a      	b.n	8009b8a <_svfiprintf_r+0x52>
 8009cb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8009cb8:	460c      	mov	r4, r1
 8009cba:	2001      	movs	r0, #1
 8009cbc:	e7a8      	b.n	8009c10 <_svfiprintf_r+0xd8>
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	3401      	adds	r4, #1
 8009cc2:	9305      	str	r3, [sp, #20]
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	f04f 0c0a 	mov.w	ip, #10
 8009cca:	4620      	mov	r0, r4
 8009ccc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cd0:	3a30      	subs	r2, #48	@ 0x30
 8009cd2:	2a09      	cmp	r2, #9
 8009cd4:	d903      	bls.n	8009cde <_svfiprintf_r+0x1a6>
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d0c6      	beq.n	8009c68 <_svfiprintf_r+0x130>
 8009cda:	9105      	str	r1, [sp, #20]
 8009cdc:	e7c4      	b.n	8009c68 <_svfiprintf_r+0x130>
 8009cde:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ce2:	4604      	mov	r4, r0
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	e7f0      	b.n	8009cca <_svfiprintf_r+0x192>
 8009ce8:	ab03      	add	r3, sp, #12
 8009cea:	9300      	str	r3, [sp, #0]
 8009cec:	462a      	mov	r2, r5
 8009cee:	4b0e      	ldr	r3, [pc, #56]	@ (8009d28 <_svfiprintf_r+0x1f0>)
 8009cf0:	a904      	add	r1, sp, #16
 8009cf2:	4638      	mov	r0, r7
 8009cf4:	f3af 8000 	nop.w
 8009cf8:	1c42      	adds	r2, r0, #1
 8009cfa:	4606      	mov	r6, r0
 8009cfc:	d1d6      	bne.n	8009cac <_svfiprintf_r+0x174>
 8009cfe:	89ab      	ldrh	r3, [r5, #12]
 8009d00:	065b      	lsls	r3, r3, #25
 8009d02:	f53f af2d 	bmi.w	8009b60 <_svfiprintf_r+0x28>
 8009d06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009d08:	e72c      	b.n	8009b64 <_svfiprintf_r+0x2c>
 8009d0a:	ab03      	add	r3, sp, #12
 8009d0c:	9300      	str	r3, [sp, #0]
 8009d0e:	462a      	mov	r2, r5
 8009d10:	4b05      	ldr	r3, [pc, #20]	@ (8009d28 <_svfiprintf_r+0x1f0>)
 8009d12:	a904      	add	r1, sp, #16
 8009d14:	4638      	mov	r0, r7
 8009d16:	f000 f879 	bl	8009e0c <_printf_i>
 8009d1a:	e7ed      	b.n	8009cf8 <_svfiprintf_r+0x1c0>
 8009d1c:	0800a994 	.word	0x0800a994
 8009d20:	0800a99e 	.word	0x0800a99e
 8009d24:	00000000 	.word	0x00000000
 8009d28:	08009a81 	.word	0x08009a81
 8009d2c:	0800a99a 	.word	0x0800a99a

08009d30 <_printf_common>:
 8009d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d34:	4616      	mov	r6, r2
 8009d36:	4698      	mov	r8, r3
 8009d38:	688a      	ldr	r2, [r1, #8]
 8009d3a:	690b      	ldr	r3, [r1, #16]
 8009d3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009d40:	4293      	cmp	r3, r2
 8009d42:	bfb8      	it	lt
 8009d44:	4613      	movlt	r3, r2
 8009d46:	6033      	str	r3, [r6, #0]
 8009d48:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009d4c:	4607      	mov	r7, r0
 8009d4e:	460c      	mov	r4, r1
 8009d50:	b10a      	cbz	r2, 8009d56 <_printf_common+0x26>
 8009d52:	3301      	adds	r3, #1
 8009d54:	6033      	str	r3, [r6, #0]
 8009d56:	6823      	ldr	r3, [r4, #0]
 8009d58:	0699      	lsls	r1, r3, #26
 8009d5a:	bf42      	ittt	mi
 8009d5c:	6833      	ldrmi	r3, [r6, #0]
 8009d5e:	3302      	addmi	r3, #2
 8009d60:	6033      	strmi	r3, [r6, #0]
 8009d62:	6825      	ldr	r5, [r4, #0]
 8009d64:	f015 0506 	ands.w	r5, r5, #6
 8009d68:	d106      	bne.n	8009d78 <_printf_common+0x48>
 8009d6a:	f104 0a19 	add.w	sl, r4, #25
 8009d6e:	68e3      	ldr	r3, [r4, #12]
 8009d70:	6832      	ldr	r2, [r6, #0]
 8009d72:	1a9b      	subs	r3, r3, r2
 8009d74:	42ab      	cmp	r3, r5
 8009d76:	dc26      	bgt.n	8009dc6 <_printf_common+0x96>
 8009d78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009d7c:	6822      	ldr	r2, [r4, #0]
 8009d7e:	3b00      	subs	r3, #0
 8009d80:	bf18      	it	ne
 8009d82:	2301      	movne	r3, #1
 8009d84:	0692      	lsls	r2, r2, #26
 8009d86:	d42b      	bmi.n	8009de0 <_printf_common+0xb0>
 8009d88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009d8c:	4641      	mov	r1, r8
 8009d8e:	4638      	mov	r0, r7
 8009d90:	47c8      	blx	r9
 8009d92:	3001      	adds	r0, #1
 8009d94:	d01e      	beq.n	8009dd4 <_printf_common+0xa4>
 8009d96:	6823      	ldr	r3, [r4, #0]
 8009d98:	6922      	ldr	r2, [r4, #16]
 8009d9a:	f003 0306 	and.w	r3, r3, #6
 8009d9e:	2b04      	cmp	r3, #4
 8009da0:	bf02      	ittt	eq
 8009da2:	68e5      	ldreq	r5, [r4, #12]
 8009da4:	6833      	ldreq	r3, [r6, #0]
 8009da6:	1aed      	subeq	r5, r5, r3
 8009da8:	68a3      	ldr	r3, [r4, #8]
 8009daa:	bf0c      	ite	eq
 8009dac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009db0:	2500      	movne	r5, #0
 8009db2:	4293      	cmp	r3, r2
 8009db4:	bfc4      	itt	gt
 8009db6:	1a9b      	subgt	r3, r3, r2
 8009db8:	18ed      	addgt	r5, r5, r3
 8009dba:	2600      	movs	r6, #0
 8009dbc:	341a      	adds	r4, #26
 8009dbe:	42b5      	cmp	r5, r6
 8009dc0:	d11a      	bne.n	8009df8 <_printf_common+0xc8>
 8009dc2:	2000      	movs	r0, #0
 8009dc4:	e008      	b.n	8009dd8 <_printf_common+0xa8>
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	4652      	mov	r2, sl
 8009dca:	4641      	mov	r1, r8
 8009dcc:	4638      	mov	r0, r7
 8009dce:	47c8      	blx	r9
 8009dd0:	3001      	adds	r0, #1
 8009dd2:	d103      	bne.n	8009ddc <_printf_common+0xac>
 8009dd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ddc:	3501      	adds	r5, #1
 8009dde:	e7c6      	b.n	8009d6e <_printf_common+0x3e>
 8009de0:	18e1      	adds	r1, r4, r3
 8009de2:	1c5a      	adds	r2, r3, #1
 8009de4:	2030      	movs	r0, #48	@ 0x30
 8009de6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009dea:	4422      	add	r2, r4
 8009dec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009df0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009df4:	3302      	adds	r3, #2
 8009df6:	e7c7      	b.n	8009d88 <_printf_common+0x58>
 8009df8:	2301      	movs	r3, #1
 8009dfa:	4622      	mov	r2, r4
 8009dfc:	4641      	mov	r1, r8
 8009dfe:	4638      	mov	r0, r7
 8009e00:	47c8      	blx	r9
 8009e02:	3001      	adds	r0, #1
 8009e04:	d0e6      	beq.n	8009dd4 <_printf_common+0xa4>
 8009e06:	3601      	adds	r6, #1
 8009e08:	e7d9      	b.n	8009dbe <_printf_common+0x8e>
	...

08009e0c <_printf_i>:
 8009e0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e10:	7e0f      	ldrb	r7, [r1, #24]
 8009e12:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009e14:	2f78      	cmp	r7, #120	@ 0x78
 8009e16:	4691      	mov	r9, r2
 8009e18:	4680      	mov	r8, r0
 8009e1a:	460c      	mov	r4, r1
 8009e1c:	469a      	mov	sl, r3
 8009e1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009e22:	d807      	bhi.n	8009e34 <_printf_i+0x28>
 8009e24:	2f62      	cmp	r7, #98	@ 0x62
 8009e26:	d80a      	bhi.n	8009e3e <_printf_i+0x32>
 8009e28:	2f00      	cmp	r7, #0
 8009e2a:	f000 80d2 	beq.w	8009fd2 <_printf_i+0x1c6>
 8009e2e:	2f58      	cmp	r7, #88	@ 0x58
 8009e30:	f000 80b9 	beq.w	8009fa6 <_printf_i+0x19a>
 8009e34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009e38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009e3c:	e03a      	b.n	8009eb4 <_printf_i+0xa8>
 8009e3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009e42:	2b15      	cmp	r3, #21
 8009e44:	d8f6      	bhi.n	8009e34 <_printf_i+0x28>
 8009e46:	a101      	add	r1, pc, #4	@ (adr r1, 8009e4c <_printf_i+0x40>)
 8009e48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e4c:	08009ea5 	.word	0x08009ea5
 8009e50:	08009eb9 	.word	0x08009eb9
 8009e54:	08009e35 	.word	0x08009e35
 8009e58:	08009e35 	.word	0x08009e35
 8009e5c:	08009e35 	.word	0x08009e35
 8009e60:	08009e35 	.word	0x08009e35
 8009e64:	08009eb9 	.word	0x08009eb9
 8009e68:	08009e35 	.word	0x08009e35
 8009e6c:	08009e35 	.word	0x08009e35
 8009e70:	08009e35 	.word	0x08009e35
 8009e74:	08009e35 	.word	0x08009e35
 8009e78:	08009fb9 	.word	0x08009fb9
 8009e7c:	08009ee3 	.word	0x08009ee3
 8009e80:	08009f73 	.word	0x08009f73
 8009e84:	08009e35 	.word	0x08009e35
 8009e88:	08009e35 	.word	0x08009e35
 8009e8c:	08009fdb 	.word	0x08009fdb
 8009e90:	08009e35 	.word	0x08009e35
 8009e94:	08009ee3 	.word	0x08009ee3
 8009e98:	08009e35 	.word	0x08009e35
 8009e9c:	08009e35 	.word	0x08009e35
 8009ea0:	08009f7b 	.word	0x08009f7b
 8009ea4:	6833      	ldr	r3, [r6, #0]
 8009ea6:	1d1a      	adds	r2, r3, #4
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	6032      	str	r2, [r6, #0]
 8009eac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009eb0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	e09d      	b.n	8009ff4 <_printf_i+0x1e8>
 8009eb8:	6833      	ldr	r3, [r6, #0]
 8009eba:	6820      	ldr	r0, [r4, #0]
 8009ebc:	1d19      	adds	r1, r3, #4
 8009ebe:	6031      	str	r1, [r6, #0]
 8009ec0:	0606      	lsls	r6, r0, #24
 8009ec2:	d501      	bpl.n	8009ec8 <_printf_i+0xbc>
 8009ec4:	681d      	ldr	r5, [r3, #0]
 8009ec6:	e003      	b.n	8009ed0 <_printf_i+0xc4>
 8009ec8:	0645      	lsls	r5, r0, #25
 8009eca:	d5fb      	bpl.n	8009ec4 <_printf_i+0xb8>
 8009ecc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009ed0:	2d00      	cmp	r5, #0
 8009ed2:	da03      	bge.n	8009edc <_printf_i+0xd0>
 8009ed4:	232d      	movs	r3, #45	@ 0x2d
 8009ed6:	426d      	negs	r5, r5
 8009ed8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009edc:	4859      	ldr	r0, [pc, #356]	@ (800a044 <_printf_i+0x238>)
 8009ede:	230a      	movs	r3, #10
 8009ee0:	e011      	b.n	8009f06 <_printf_i+0xfa>
 8009ee2:	6821      	ldr	r1, [r4, #0]
 8009ee4:	6833      	ldr	r3, [r6, #0]
 8009ee6:	0608      	lsls	r0, r1, #24
 8009ee8:	f853 5b04 	ldr.w	r5, [r3], #4
 8009eec:	d402      	bmi.n	8009ef4 <_printf_i+0xe8>
 8009eee:	0649      	lsls	r1, r1, #25
 8009ef0:	bf48      	it	mi
 8009ef2:	b2ad      	uxthmi	r5, r5
 8009ef4:	2f6f      	cmp	r7, #111	@ 0x6f
 8009ef6:	4853      	ldr	r0, [pc, #332]	@ (800a044 <_printf_i+0x238>)
 8009ef8:	6033      	str	r3, [r6, #0]
 8009efa:	bf14      	ite	ne
 8009efc:	230a      	movne	r3, #10
 8009efe:	2308      	moveq	r3, #8
 8009f00:	2100      	movs	r1, #0
 8009f02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009f06:	6866      	ldr	r6, [r4, #4]
 8009f08:	60a6      	str	r6, [r4, #8]
 8009f0a:	2e00      	cmp	r6, #0
 8009f0c:	bfa2      	ittt	ge
 8009f0e:	6821      	ldrge	r1, [r4, #0]
 8009f10:	f021 0104 	bicge.w	r1, r1, #4
 8009f14:	6021      	strge	r1, [r4, #0]
 8009f16:	b90d      	cbnz	r5, 8009f1c <_printf_i+0x110>
 8009f18:	2e00      	cmp	r6, #0
 8009f1a:	d04b      	beq.n	8009fb4 <_printf_i+0x1a8>
 8009f1c:	4616      	mov	r6, r2
 8009f1e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009f22:	fb03 5711 	mls	r7, r3, r1, r5
 8009f26:	5dc7      	ldrb	r7, [r0, r7]
 8009f28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009f2c:	462f      	mov	r7, r5
 8009f2e:	42bb      	cmp	r3, r7
 8009f30:	460d      	mov	r5, r1
 8009f32:	d9f4      	bls.n	8009f1e <_printf_i+0x112>
 8009f34:	2b08      	cmp	r3, #8
 8009f36:	d10b      	bne.n	8009f50 <_printf_i+0x144>
 8009f38:	6823      	ldr	r3, [r4, #0]
 8009f3a:	07df      	lsls	r7, r3, #31
 8009f3c:	d508      	bpl.n	8009f50 <_printf_i+0x144>
 8009f3e:	6923      	ldr	r3, [r4, #16]
 8009f40:	6861      	ldr	r1, [r4, #4]
 8009f42:	4299      	cmp	r1, r3
 8009f44:	bfde      	ittt	le
 8009f46:	2330      	movle	r3, #48	@ 0x30
 8009f48:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009f4c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009f50:	1b92      	subs	r2, r2, r6
 8009f52:	6122      	str	r2, [r4, #16]
 8009f54:	f8cd a000 	str.w	sl, [sp]
 8009f58:	464b      	mov	r3, r9
 8009f5a:	aa03      	add	r2, sp, #12
 8009f5c:	4621      	mov	r1, r4
 8009f5e:	4640      	mov	r0, r8
 8009f60:	f7ff fee6 	bl	8009d30 <_printf_common>
 8009f64:	3001      	adds	r0, #1
 8009f66:	d14a      	bne.n	8009ffe <_printf_i+0x1f2>
 8009f68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009f6c:	b004      	add	sp, #16
 8009f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f72:	6823      	ldr	r3, [r4, #0]
 8009f74:	f043 0320 	orr.w	r3, r3, #32
 8009f78:	6023      	str	r3, [r4, #0]
 8009f7a:	4833      	ldr	r0, [pc, #204]	@ (800a048 <_printf_i+0x23c>)
 8009f7c:	2778      	movs	r7, #120	@ 0x78
 8009f7e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009f82:	6823      	ldr	r3, [r4, #0]
 8009f84:	6831      	ldr	r1, [r6, #0]
 8009f86:	061f      	lsls	r7, r3, #24
 8009f88:	f851 5b04 	ldr.w	r5, [r1], #4
 8009f8c:	d402      	bmi.n	8009f94 <_printf_i+0x188>
 8009f8e:	065f      	lsls	r7, r3, #25
 8009f90:	bf48      	it	mi
 8009f92:	b2ad      	uxthmi	r5, r5
 8009f94:	6031      	str	r1, [r6, #0]
 8009f96:	07d9      	lsls	r1, r3, #31
 8009f98:	bf44      	itt	mi
 8009f9a:	f043 0320 	orrmi.w	r3, r3, #32
 8009f9e:	6023      	strmi	r3, [r4, #0]
 8009fa0:	b11d      	cbz	r5, 8009faa <_printf_i+0x19e>
 8009fa2:	2310      	movs	r3, #16
 8009fa4:	e7ac      	b.n	8009f00 <_printf_i+0xf4>
 8009fa6:	4827      	ldr	r0, [pc, #156]	@ (800a044 <_printf_i+0x238>)
 8009fa8:	e7e9      	b.n	8009f7e <_printf_i+0x172>
 8009faa:	6823      	ldr	r3, [r4, #0]
 8009fac:	f023 0320 	bic.w	r3, r3, #32
 8009fb0:	6023      	str	r3, [r4, #0]
 8009fb2:	e7f6      	b.n	8009fa2 <_printf_i+0x196>
 8009fb4:	4616      	mov	r6, r2
 8009fb6:	e7bd      	b.n	8009f34 <_printf_i+0x128>
 8009fb8:	6833      	ldr	r3, [r6, #0]
 8009fba:	6825      	ldr	r5, [r4, #0]
 8009fbc:	6961      	ldr	r1, [r4, #20]
 8009fbe:	1d18      	adds	r0, r3, #4
 8009fc0:	6030      	str	r0, [r6, #0]
 8009fc2:	062e      	lsls	r6, r5, #24
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	d501      	bpl.n	8009fcc <_printf_i+0x1c0>
 8009fc8:	6019      	str	r1, [r3, #0]
 8009fca:	e002      	b.n	8009fd2 <_printf_i+0x1c6>
 8009fcc:	0668      	lsls	r0, r5, #25
 8009fce:	d5fb      	bpl.n	8009fc8 <_printf_i+0x1bc>
 8009fd0:	8019      	strh	r1, [r3, #0]
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	6123      	str	r3, [r4, #16]
 8009fd6:	4616      	mov	r6, r2
 8009fd8:	e7bc      	b.n	8009f54 <_printf_i+0x148>
 8009fda:	6833      	ldr	r3, [r6, #0]
 8009fdc:	1d1a      	adds	r2, r3, #4
 8009fde:	6032      	str	r2, [r6, #0]
 8009fe0:	681e      	ldr	r6, [r3, #0]
 8009fe2:	6862      	ldr	r2, [r4, #4]
 8009fe4:	2100      	movs	r1, #0
 8009fe6:	4630      	mov	r0, r6
 8009fe8:	f7f6 f91a 	bl	8000220 <memchr>
 8009fec:	b108      	cbz	r0, 8009ff2 <_printf_i+0x1e6>
 8009fee:	1b80      	subs	r0, r0, r6
 8009ff0:	6060      	str	r0, [r4, #4]
 8009ff2:	6863      	ldr	r3, [r4, #4]
 8009ff4:	6123      	str	r3, [r4, #16]
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ffc:	e7aa      	b.n	8009f54 <_printf_i+0x148>
 8009ffe:	6923      	ldr	r3, [r4, #16]
 800a000:	4632      	mov	r2, r6
 800a002:	4649      	mov	r1, r9
 800a004:	4640      	mov	r0, r8
 800a006:	47d0      	blx	sl
 800a008:	3001      	adds	r0, #1
 800a00a:	d0ad      	beq.n	8009f68 <_printf_i+0x15c>
 800a00c:	6823      	ldr	r3, [r4, #0]
 800a00e:	079b      	lsls	r3, r3, #30
 800a010:	d413      	bmi.n	800a03a <_printf_i+0x22e>
 800a012:	68e0      	ldr	r0, [r4, #12]
 800a014:	9b03      	ldr	r3, [sp, #12]
 800a016:	4298      	cmp	r0, r3
 800a018:	bfb8      	it	lt
 800a01a:	4618      	movlt	r0, r3
 800a01c:	e7a6      	b.n	8009f6c <_printf_i+0x160>
 800a01e:	2301      	movs	r3, #1
 800a020:	4632      	mov	r2, r6
 800a022:	4649      	mov	r1, r9
 800a024:	4640      	mov	r0, r8
 800a026:	47d0      	blx	sl
 800a028:	3001      	adds	r0, #1
 800a02a:	d09d      	beq.n	8009f68 <_printf_i+0x15c>
 800a02c:	3501      	adds	r5, #1
 800a02e:	68e3      	ldr	r3, [r4, #12]
 800a030:	9903      	ldr	r1, [sp, #12]
 800a032:	1a5b      	subs	r3, r3, r1
 800a034:	42ab      	cmp	r3, r5
 800a036:	dcf2      	bgt.n	800a01e <_printf_i+0x212>
 800a038:	e7eb      	b.n	800a012 <_printf_i+0x206>
 800a03a:	2500      	movs	r5, #0
 800a03c:	f104 0619 	add.w	r6, r4, #25
 800a040:	e7f5      	b.n	800a02e <_printf_i+0x222>
 800a042:	bf00      	nop
 800a044:	0800a9a5 	.word	0x0800a9a5
 800a048:	0800a9b6 	.word	0x0800a9b6

0800a04c <memmove>:
 800a04c:	4288      	cmp	r0, r1
 800a04e:	b510      	push	{r4, lr}
 800a050:	eb01 0402 	add.w	r4, r1, r2
 800a054:	d902      	bls.n	800a05c <memmove+0x10>
 800a056:	4284      	cmp	r4, r0
 800a058:	4623      	mov	r3, r4
 800a05a:	d807      	bhi.n	800a06c <memmove+0x20>
 800a05c:	1e43      	subs	r3, r0, #1
 800a05e:	42a1      	cmp	r1, r4
 800a060:	d008      	beq.n	800a074 <memmove+0x28>
 800a062:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a066:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a06a:	e7f8      	b.n	800a05e <memmove+0x12>
 800a06c:	4402      	add	r2, r0
 800a06e:	4601      	mov	r1, r0
 800a070:	428a      	cmp	r2, r1
 800a072:	d100      	bne.n	800a076 <memmove+0x2a>
 800a074:	bd10      	pop	{r4, pc}
 800a076:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a07a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a07e:	e7f7      	b.n	800a070 <memmove+0x24>

0800a080 <_sbrk_r>:
 800a080:	b538      	push	{r3, r4, r5, lr}
 800a082:	4d06      	ldr	r5, [pc, #24]	@ (800a09c <_sbrk_r+0x1c>)
 800a084:	2300      	movs	r3, #0
 800a086:	4604      	mov	r4, r0
 800a088:	4608      	mov	r0, r1
 800a08a:	602b      	str	r3, [r5, #0]
 800a08c:	f7f8 fb8a 	bl	80027a4 <_sbrk>
 800a090:	1c43      	adds	r3, r0, #1
 800a092:	d102      	bne.n	800a09a <_sbrk_r+0x1a>
 800a094:	682b      	ldr	r3, [r5, #0]
 800a096:	b103      	cbz	r3, 800a09a <_sbrk_r+0x1a>
 800a098:	6023      	str	r3, [r4, #0]
 800a09a:	bd38      	pop	{r3, r4, r5, pc}
 800a09c:	20005610 	.word	0x20005610

0800a0a0 <_realloc_r>:
 800a0a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0a4:	4680      	mov	r8, r0
 800a0a6:	4615      	mov	r5, r2
 800a0a8:	460c      	mov	r4, r1
 800a0aa:	b921      	cbnz	r1, 800a0b6 <_realloc_r+0x16>
 800a0ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0b0:	4611      	mov	r1, r2
 800a0b2:	f7ff bc59 	b.w	8009968 <_malloc_r>
 800a0b6:	b92a      	cbnz	r2, 800a0c4 <_realloc_r+0x24>
 800a0b8:	f7ff fbea 	bl	8009890 <_free_r>
 800a0bc:	2400      	movs	r4, #0
 800a0be:	4620      	mov	r0, r4
 800a0c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0c4:	f000 f81a 	bl	800a0fc <_malloc_usable_size_r>
 800a0c8:	4285      	cmp	r5, r0
 800a0ca:	4606      	mov	r6, r0
 800a0cc:	d802      	bhi.n	800a0d4 <_realloc_r+0x34>
 800a0ce:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a0d2:	d8f4      	bhi.n	800a0be <_realloc_r+0x1e>
 800a0d4:	4629      	mov	r1, r5
 800a0d6:	4640      	mov	r0, r8
 800a0d8:	f7ff fc46 	bl	8009968 <_malloc_r>
 800a0dc:	4607      	mov	r7, r0
 800a0de:	2800      	cmp	r0, #0
 800a0e0:	d0ec      	beq.n	800a0bc <_realloc_r+0x1c>
 800a0e2:	42b5      	cmp	r5, r6
 800a0e4:	462a      	mov	r2, r5
 800a0e6:	4621      	mov	r1, r4
 800a0e8:	bf28      	it	cs
 800a0ea:	4632      	movcs	r2, r6
 800a0ec:	f7ff fbc2 	bl	8009874 <memcpy>
 800a0f0:	4621      	mov	r1, r4
 800a0f2:	4640      	mov	r0, r8
 800a0f4:	f7ff fbcc 	bl	8009890 <_free_r>
 800a0f8:	463c      	mov	r4, r7
 800a0fa:	e7e0      	b.n	800a0be <_realloc_r+0x1e>

0800a0fc <_malloc_usable_size_r>:
 800a0fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a100:	1f18      	subs	r0, r3, #4
 800a102:	2b00      	cmp	r3, #0
 800a104:	bfbc      	itt	lt
 800a106:	580b      	ldrlt	r3, [r1, r0]
 800a108:	18c0      	addlt	r0, r0, r3
 800a10a:	4770      	bx	lr

0800a10c <atan2>:
 800a10c:	f000 b800 	b.w	800a110 <__ieee754_atan2>

0800a110 <__ieee754_atan2>:
 800a110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a114:	ec57 6b11 	vmov	r6, r7, d1
 800a118:	4273      	negs	r3, r6
 800a11a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800a298 <__ieee754_atan2+0x188>
 800a11e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800a122:	4333      	orrs	r3, r6
 800a124:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800a128:	4543      	cmp	r3, r8
 800a12a:	ec51 0b10 	vmov	r0, r1, d0
 800a12e:	4635      	mov	r5, r6
 800a130:	d809      	bhi.n	800a146 <__ieee754_atan2+0x36>
 800a132:	4244      	negs	r4, r0
 800a134:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a138:	4304      	orrs	r4, r0
 800a13a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800a13e:	4544      	cmp	r4, r8
 800a140:	468e      	mov	lr, r1
 800a142:	4681      	mov	r9, r0
 800a144:	d907      	bls.n	800a156 <__ieee754_atan2+0x46>
 800a146:	4632      	mov	r2, r6
 800a148:	463b      	mov	r3, r7
 800a14a:	f7f6 f8bf 	bl	80002cc <__adddf3>
 800a14e:	ec41 0b10 	vmov	d0, r0, r1
 800a152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a156:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800a15a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800a15e:	4334      	orrs	r4, r6
 800a160:	d103      	bne.n	800a16a <__ieee754_atan2+0x5a>
 800a162:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a166:	f000 b89b 	b.w	800a2a0 <atan>
 800a16a:	17bc      	asrs	r4, r7, #30
 800a16c:	f004 0402 	and.w	r4, r4, #2
 800a170:	ea53 0909 	orrs.w	r9, r3, r9
 800a174:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800a178:	d107      	bne.n	800a18a <__ieee754_atan2+0x7a>
 800a17a:	2c02      	cmp	r4, #2
 800a17c:	d05f      	beq.n	800a23e <__ieee754_atan2+0x12e>
 800a17e:	2c03      	cmp	r4, #3
 800a180:	d1e5      	bne.n	800a14e <__ieee754_atan2+0x3e>
 800a182:	a141      	add	r1, pc, #260	@ (adr r1, 800a288 <__ieee754_atan2+0x178>)
 800a184:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a188:	e7e1      	b.n	800a14e <__ieee754_atan2+0x3e>
 800a18a:	4315      	orrs	r5, r2
 800a18c:	d106      	bne.n	800a19c <__ieee754_atan2+0x8c>
 800a18e:	f1be 0f00 	cmp.w	lr, #0
 800a192:	da5f      	bge.n	800a254 <__ieee754_atan2+0x144>
 800a194:	a13e      	add	r1, pc, #248	@ (adr r1, 800a290 <__ieee754_atan2+0x180>)
 800a196:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a19a:	e7d8      	b.n	800a14e <__ieee754_atan2+0x3e>
 800a19c:	4542      	cmp	r2, r8
 800a19e:	d10f      	bne.n	800a1c0 <__ieee754_atan2+0xb0>
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 800a1a6:	d107      	bne.n	800a1b8 <__ieee754_atan2+0xa8>
 800a1a8:	2c02      	cmp	r4, #2
 800a1aa:	d84c      	bhi.n	800a246 <__ieee754_atan2+0x136>
 800a1ac:	4b34      	ldr	r3, [pc, #208]	@ (800a280 <__ieee754_atan2+0x170>)
 800a1ae:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a1b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a1b6:	e7ca      	b.n	800a14e <__ieee754_atan2+0x3e>
 800a1b8:	2c02      	cmp	r4, #2
 800a1ba:	d848      	bhi.n	800a24e <__ieee754_atan2+0x13e>
 800a1bc:	4b31      	ldr	r3, [pc, #196]	@ (800a284 <__ieee754_atan2+0x174>)
 800a1be:	e7f6      	b.n	800a1ae <__ieee754_atan2+0x9e>
 800a1c0:	4543      	cmp	r3, r8
 800a1c2:	d0e4      	beq.n	800a18e <__ieee754_atan2+0x7e>
 800a1c4:	1a9b      	subs	r3, r3, r2
 800a1c6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800a1ca:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a1ce:	da1e      	bge.n	800a20e <__ieee754_atan2+0xfe>
 800a1d0:	2f00      	cmp	r7, #0
 800a1d2:	da01      	bge.n	800a1d8 <__ieee754_atan2+0xc8>
 800a1d4:	323c      	adds	r2, #60	@ 0x3c
 800a1d6:	db1e      	blt.n	800a216 <__ieee754_atan2+0x106>
 800a1d8:	4632      	mov	r2, r6
 800a1da:	463b      	mov	r3, r7
 800a1dc:	f7f6 fb56 	bl	800088c <__aeabi_ddiv>
 800a1e0:	ec41 0b10 	vmov	d0, r0, r1
 800a1e4:	f000 f9f4 	bl	800a5d0 <fabs>
 800a1e8:	f000 f85a 	bl	800a2a0 <atan>
 800a1ec:	ec51 0b10 	vmov	r0, r1, d0
 800a1f0:	2c01      	cmp	r4, #1
 800a1f2:	d013      	beq.n	800a21c <__ieee754_atan2+0x10c>
 800a1f4:	2c02      	cmp	r4, #2
 800a1f6:	d015      	beq.n	800a224 <__ieee754_atan2+0x114>
 800a1f8:	2c00      	cmp	r4, #0
 800a1fa:	d0a8      	beq.n	800a14e <__ieee754_atan2+0x3e>
 800a1fc:	a318      	add	r3, pc, #96	@ (adr r3, 800a260 <__ieee754_atan2+0x150>)
 800a1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a202:	f7f6 f861 	bl	80002c8 <__aeabi_dsub>
 800a206:	a318      	add	r3, pc, #96	@ (adr r3, 800a268 <__ieee754_atan2+0x158>)
 800a208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a20c:	e014      	b.n	800a238 <__ieee754_atan2+0x128>
 800a20e:	a118      	add	r1, pc, #96	@ (adr r1, 800a270 <__ieee754_atan2+0x160>)
 800a210:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a214:	e7ec      	b.n	800a1f0 <__ieee754_atan2+0xe0>
 800a216:	2000      	movs	r0, #0
 800a218:	2100      	movs	r1, #0
 800a21a:	e7e9      	b.n	800a1f0 <__ieee754_atan2+0xe0>
 800a21c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a220:	4619      	mov	r1, r3
 800a222:	e794      	b.n	800a14e <__ieee754_atan2+0x3e>
 800a224:	a30e      	add	r3, pc, #56	@ (adr r3, 800a260 <__ieee754_atan2+0x150>)
 800a226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22a:	f7f6 f84d 	bl	80002c8 <__aeabi_dsub>
 800a22e:	4602      	mov	r2, r0
 800a230:	460b      	mov	r3, r1
 800a232:	a10d      	add	r1, pc, #52	@ (adr r1, 800a268 <__ieee754_atan2+0x158>)
 800a234:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a238:	f7f6 f846 	bl	80002c8 <__aeabi_dsub>
 800a23c:	e787      	b.n	800a14e <__ieee754_atan2+0x3e>
 800a23e:	a10a      	add	r1, pc, #40	@ (adr r1, 800a268 <__ieee754_atan2+0x158>)
 800a240:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a244:	e783      	b.n	800a14e <__ieee754_atan2+0x3e>
 800a246:	a10c      	add	r1, pc, #48	@ (adr r1, 800a278 <__ieee754_atan2+0x168>)
 800a248:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a24c:	e77f      	b.n	800a14e <__ieee754_atan2+0x3e>
 800a24e:	2000      	movs	r0, #0
 800a250:	2100      	movs	r1, #0
 800a252:	e77c      	b.n	800a14e <__ieee754_atan2+0x3e>
 800a254:	a106      	add	r1, pc, #24	@ (adr r1, 800a270 <__ieee754_atan2+0x160>)
 800a256:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a25a:	e778      	b.n	800a14e <__ieee754_atan2+0x3e>
 800a25c:	f3af 8000 	nop.w
 800a260:	33145c07 	.word	0x33145c07
 800a264:	3ca1a626 	.word	0x3ca1a626
 800a268:	54442d18 	.word	0x54442d18
 800a26c:	400921fb 	.word	0x400921fb
 800a270:	54442d18 	.word	0x54442d18
 800a274:	3ff921fb 	.word	0x3ff921fb
 800a278:	54442d18 	.word	0x54442d18
 800a27c:	3fe921fb 	.word	0x3fe921fb
 800a280:	0800a9e0 	.word	0x0800a9e0
 800a284:	0800a9c8 	.word	0x0800a9c8
 800a288:	54442d18 	.word	0x54442d18
 800a28c:	c00921fb 	.word	0xc00921fb
 800a290:	54442d18 	.word	0x54442d18
 800a294:	bff921fb 	.word	0xbff921fb
 800a298:	7ff00000 	.word	0x7ff00000
 800a29c:	00000000 	.word	0x00000000

0800a2a0 <atan>:
 800a2a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2a4:	ec55 4b10 	vmov	r4, r5, d0
 800a2a8:	4bbf      	ldr	r3, [pc, #764]	@ (800a5a8 <atan+0x308>)
 800a2aa:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800a2ae:	429e      	cmp	r6, r3
 800a2b0:	46ab      	mov	fp, r5
 800a2b2:	d918      	bls.n	800a2e6 <atan+0x46>
 800a2b4:	4bbd      	ldr	r3, [pc, #756]	@ (800a5ac <atan+0x30c>)
 800a2b6:	429e      	cmp	r6, r3
 800a2b8:	d801      	bhi.n	800a2be <atan+0x1e>
 800a2ba:	d109      	bne.n	800a2d0 <atan+0x30>
 800a2bc:	b144      	cbz	r4, 800a2d0 <atan+0x30>
 800a2be:	4622      	mov	r2, r4
 800a2c0:	462b      	mov	r3, r5
 800a2c2:	4620      	mov	r0, r4
 800a2c4:	4629      	mov	r1, r5
 800a2c6:	f7f6 f801 	bl	80002cc <__adddf3>
 800a2ca:	4604      	mov	r4, r0
 800a2cc:	460d      	mov	r5, r1
 800a2ce:	e006      	b.n	800a2de <atan+0x3e>
 800a2d0:	f1bb 0f00 	cmp.w	fp, #0
 800a2d4:	f340 812b 	ble.w	800a52e <atan+0x28e>
 800a2d8:	a597      	add	r5, pc, #604	@ (adr r5, 800a538 <atan+0x298>)
 800a2da:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a2de:	ec45 4b10 	vmov	d0, r4, r5
 800a2e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2e6:	4bb2      	ldr	r3, [pc, #712]	@ (800a5b0 <atan+0x310>)
 800a2e8:	429e      	cmp	r6, r3
 800a2ea:	d813      	bhi.n	800a314 <atan+0x74>
 800a2ec:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800a2f0:	429e      	cmp	r6, r3
 800a2f2:	d80c      	bhi.n	800a30e <atan+0x6e>
 800a2f4:	a392      	add	r3, pc, #584	@ (adr r3, 800a540 <atan+0x2a0>)
 800a2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2fa:	4620      	mov	r0, r4
 800a2fc:	4629      	mov	r1, r5
 800a2fe:	f7f5 ffe5 	bl	80002cc <__adddf3>
 800a302:	4bac      	ldr	r3, [pc, #688]	@ (800a5b4 <atan+0x314>)
 800a304:	2200      	movs	r2, #0
 800a306:	f7f6 fc27 	bl	8000b58 <__aeabi_dcmpgt>
 800a30a:	2800      	cmp	r0, #0
 800a30c:	d1e7      	bne.n	800a2de <atan+0x3e>
 800a30e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800a312:	e029      	b.n	800a368 <atan+0xc8>
 800a314:	f000 f95c 	bl	800a5d0 <fabs>
 800a318:	4ba7      	ldr	r3, [pc, #668]	@ (800a5b8 <atan+0x318>)
 800a31a:	429e      	cmp	r6, r3
 800a31c:	ec55 4b10 	vmov	r4, r5, d0
 800a320:	f200 80bc 	bhi.w	800a49c <atan+0x1fc>
 800a324:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800a328:	429e      	cmp	r6, r3
 800a32a:	f200 809e 	bhi.w	800a46a <atan+0x1ca>
 800a32e:	4622      	mov	r2, r4
 800a330:	462b      	mov	r3, r5
 800a332:	4620      	mov	r0, r4
 800a334:	4629      	mov	r1, r5
 800a336:	f7f5 ffc9 	bl	80002cc <__adddf3>
 800a33a:	4b9e      	ldr	r3, [pc, #632]	@ (800a5b4 <atan+0x314>)
 800a33c:	2200      	movs	r2, #0
 800a33e:	f7f5 ffc3 	bl	80002c8 <__aeabi_dsub>
 800a342:	2200      	movs	r2, #0
 800a344:	4606      	mov	r6, r0
 800a346:	460f      	mov	r7, r1
 800a348:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a34c:	4620      	mov	r0, r4
 800a34e:	4629      	mov	r1, r5
 800a350:	f7f5 ffbc 	bl	80002cc <__adddf3>
 800a354:	4602      	mov	r2, r0
 800a356:	460b      	mov	r3, r1
 800a358:	4630      	mov	r0, r6
 800a35a:	4639      	mov	r1, r7
 800a35c:	f7f6 fa96 	bl	800088c <__aeabi_ddiv>
 800a360:	f04f 0a00 	mov.w	sl, #0
 800a364:	4604      	mov	r4, r0
 800a366:	460d      	mov	r5, r1
 800a368:	4622      	mov	r2, r4
 800a36a:	462b      	mov	r3, r5
 800a36c:	4620      	mov	r0, r4
 800a36e:	4629      	mov	r1, r5
 800a370:	f7f6 f962 	bl	8000638 <__aeabi_dmul>
 800a374:	4602      	mov	r2, r0
 800a376:	460b      	mov	r3, r1
 800a378:	4680      	mov	r8, r0
 800a37a:	4689      	mov	r9, r1
 800a37c:	f7f6 f95c 	bl	8000638 <__aeabi_dmul>
 800a380:	a371      	add	r3, pc, #452	@ (adr r3, 800a548 <atan+0x2a8>)
 800a382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a386:	4606      	mov	r6, r0
 800a388:	460f      	mov	r7, r1
 800a38a:	f7f6 f955 	bl	8000638 <__aeabi_dmul>
 800a38e:	a370      	add	r3, pc, #448	@ (adr r3, 800a550 <atan+0x2b0>)
 800a390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a394:	f7f5 ff9a 	bl	80002cc <__adddf3>
 800a398:	4632      	mov	r2, r6
 800a39a:	463b      	mov	r3, r7
 800a39c:	f7f6 f94c 	bl	8000638 <__aeabi_dmul>
 800a3a0:	a36d      	add	r3, pc, #436	@ (adr r3, 800a558 <atan+0x2b8>)
 800a3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a6:	f7f5 ff91 	bl	80002cc <__adddf3>
 800a3aa:	4632      	mov	r2, r6
 800a3ac:	463b      	mov	r3, r7
 800a3ae:	f7f6 f943 	bl	8000638 <__aeabi_dmul>
 800a3b2:	a36b      	add	r3, pc, #428	@ (adr r3, 800a560 <atan+0x2c0>)
 800a3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b8:	f7f5 ff88 	bl	80002cc <__adddf3>
 800a3bc:	4632      	mov	r2, r6
 800a3be:	463b      	mov	r3, r7
 800a3c0:	f7f6 f93a 	bl	8000638 <__aeabi_dmul>
 800a3c4:	a368      	add	r3, pc, #416	@ (adr r3, 800a568 <atan+0x2c8>)
 800a3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ca:	f7f5 ff7f 	bl	80002cc <__adddf3>
 800a3ce:	4632      	mov	r2, r6
 800a3d0:	463b      	mov	r3, r7
 800a3d2:	f7f6 f931 	bl	8000638 <__aeabi_dmul>
 800a3d6:	a366      	add	r3, pc, #408	@ (adr r3, 800a570 <atan+0x2d0>)
 800a3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3dc:	f7f5 ff76 	bl	80002cc <__adddf3>
 800a3e0:	4642      	mov	r2, r8
 800a3e2:	464b      	mov	r3, r9
 800a3e4:	f7f6 f928 	bl	8000638 <__aeabi_dmul>
 800a3e8:	a363      	add	r3, pc, #396	@ (adr r3, 800a578 <atan+0x2d8>)
 800a3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ee:	4680      	mov	r8, r0
 800a3f0:	4689      	mov	r9, r1
 800a3f2:	4630      	mov	r0, r6
 800a3f4:	4639      	mov	r1, r7
 800a3f6:	f7f6 f91f 	bl	8000638 <__aeabi_dmul>
 800a3fa:	a361      	add	r3, pc, #388	@ (adr r3, 800a580 <atan+0x2e0>)
 800a3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a400:	f7f5 ff62 	bl	80002c8 <__aeabi_dsub>
 800a404:	4632      	mov	r2, r6
 800a406:	463b      	mov	r3, r7
 800a408:	f7f6 f916 	bl	8000638 <__aeabi_dmul>
 800a40c:	a35e      	add	r3, pc, #376	@ (adr r3, 800a588 <atan+0x2e8>)
 800a40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a412:	f7f5 ff59 	bl	80002c8 <__aeabi_dsub>
 800a416:	4632      	mov	r2, r6
 800a418:	463b      	mov	r3, r7
 800a41a:	f7f6 f90d 	bl	8000638 <__aeabi_dmul>
 800a41e:	a35c      	add	r3, pc, #368	@ (adr r3, 800a590 <atan+0x2f0>)
 800a420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a424:	f7f5 ff50 	bl	80002c8 <__aeabi_dsub>
 800a428:	4632      	mov	r2, r6
 800a42a:	463b      	mov	r3, r7
 800a42c:	f7f6 f904 	bl	8000638 <__aeabi_dmul>
 800a430:	a359      	add	r3, pc, #356	@ (adr r3, 800a598 <atan+0x2f8>)
 800a432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a436:	f7f5 ff47 	bl	80002c8 <__aeabi_dsub>
 800a43a:	4632      	mov	r2, r6
 800a43c:	463b      	mov	r3, r7
 800a43e:	f7f6 f8fb 	bl	8000638 <__aeabi_dmul>
 800a442:	4602      	mov	r2, r0
 800a444:	460b      	mov	r3, r1
 800a446:	4640      	mov	r0, r8
 800a448:	4649      	mov	r1, r9
 800a44a:	f7f5 ff3f 	bl	80002cc <__adddf3>
 800a44e:	4622      	mov	r2, r4
 800a450:	462b      	mov	r3, r5
 800a452:	f7f6 f8f1 	bl	8000638 <__aeabi_dmul>
 800a456:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 800a45a:	4602      	mov	r2, r0
 800a45c:	460b      	mov	r3, r1
 800a45e:	d148      	bne.n	800a4f2 <atan+0x252>
 800a460:	4620      	mov	r0, r4
 800a462:	4629      	mov	r1, r5
 800a464:	f7f5 ff30 	bl	80002c8 <__aeabi_dsub>
 800a468:	e72f      	b.n	800a2ca <atan+0x2a>
 800a46a:	4b52      	ldr	r3, [pc, #328]	@ (800a5b4 <atan+0x314>)
 800a46c:	2200      	movs	r2, #0
 800a46e:	4620      	mov	r0, r4
 800a470:	4629      	mov	r1, r5
 800a472:	f7f5 ff29 	bl	80002c8 <__aeabi_dsub>
 800a476:	4b4f      	ldr	r3, [pc, #316]	@ (800a5b4 <atan+0x314>)
 800a478:	4606      	mov	r6, r0
 800a47a:	460f      	mov	r7, r1
 800a47c:	2200      	movs	r2, #0
 800a47e:	4620      	mov	r0, r4
 800a480:	4629      	mov	r1, r5
 800a482:	f7f5 ff23 	bl	80002cc <__adddf3>
 800a486:	4602      	mov	r2, r0
 800a488:	460b      	mov	r3, r1
 800a48a:	4630      	mov	r0, r6
 800a48c:	4639      	mov	r1, r7
 800a48e:	f7f6 f9fd 	bl	800088c <__aeabi_ddiv>
 800a492:	f04f 0a01 	mov.w	sl, #1
 800a496:	4604      	mov	r4, r0
 800a498:	460d      	mov	r5, r1
 800a49a:	e765      	b.n	800a368 <atan+0xc8>
 800a49c:	4b47      	ldr	r3, [pc, #284]	@ (800a5bc <atan+0x31c>)
 800a49e:	429e      	cmp	r6, r3
 800a4a0:	d21c      	bcs.n	800a4dc <atan+0x23c>
 800a4a2:	4b47      	ldr	r3, [pc, #284]	@ (800a5c0 <atan+0x320>)
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	4620      	mov	r0, r4
 800a4a8:	4629      	mov	r1, r5
 800a4aa:	f7f5 ff0d 	bl	80002c8 <__aeabi_dsub>
 800a4ae:	4b44      	ldr	r3, [pc, #272]	@ (800a5c0 <atan+0x320>)
 800a4b0:	4606      	mov	r6, r0
 800a4b2:	460f      	mov	r7, r1
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	4620      	mov	r0, r4
 800a4b8:	4629      	mov	r1, r5
 800a4ba:	f7f6 f8bd 	bl	8000638 <__aeabi_dmul>
 800a4be:	4b3d      	ldr	r3, [pc, #244]	@ (800a5b4 <atan+0x314>)
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	f7f5 ff03 	bl	80002cc <__adddf3>
 800a4c6:	4602      	mov	r2, r0
 800a4c8:	460b      	mov	r3, r1
 800a4ca:	4630      	mov	r0, r6
 800a4cc:	4639      	mov	r1, r7
 800a4ce:	f7f6 f9dd 	bl	800088c <__aeabi_ddiv>
 800a4d2:	f04f 0a02 	mov.w	sl, #2
 800a4d6:	4604      	mov	r4, r0
 800a4d8:	460d      	mov	r5, r1
 800a4da:	e745      	b.n	800a368 <atan+0xc8>
 800a4dc:	4622      	mov	r2, r4
 800a4de:	462b      	mov	r3, r5
 800a4e0:	4938      	ldr	r1, [pc, #224]	@ (800a5c4 <atan+0x324>)
 800a4e2:	2000      	movs	r0, #0
 800a4e4:	f7f6 f9d2 	bl	800088c <__aeabi_ddiv>
 800a4e8:	f04f 0a03 	mov.w	sl, #3
 800a4ec:	4604      	mov	r4, r0
 800a4ee:	460d      	mov	r5, r1
 800a4f0:	e73a      	b.n	800a368 <atan+0xc8>
 800a4f2:	4b35      	ldr	r3, [pc, #212]	@ (800a5c8 <atan+0x328>)
 800a4f4:	4e35      	ldr	r6, [pc, #212]	@ (800a5cc <atan+0x32c>)
 800a4f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4fe:	f7f5 fee3 	bl	80002c8 <__aeabi_dsub>
 800a502:	4622      	mov	r2, r4
 800a504:	462b      	mov	r3, r5
 800a506:	f7f5 fedf 	bl	80002c8 <__aeabi_dsub>
 800a50a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a50e:	4602      	mov	r2, r0
 800a510:	460b      	mov	r3, r1
 800a512:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a516:	f7f5 fed7 	bl	80002c8 <__aeabi_dsub>
 800a51a:	f1bb 0f00 	cmp.w	fp, #0
 800a51e:	4604      	mov	r4, r0
 800a520:	460d      	mov	r5, r1
 800a522:	f6bf aedc 	bge.w	800a2de <atan+0x3e>
 800a526:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a52a:	461d      	mov	r5, r3
 800a52c:	e6d7      	b.n	800a2de <atan+0x3e>
 800a52e:	a51c      	add	r5, pc, #112	@ (adr r5, 800a5a0 <atan+0x300>)
 800a530:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a534:	e6d3      	b.n	800a2de <atan+0x3e>
 800a536:	bf00      	nop
 800a538:	54442d18 	.word	0x54442d18
 800a53c:	3ff921fb 	.word	0x3ff921fb
 800a540:	8800759c 	.word	0x8800759c
 800a544:	7e37e43c 	.word	0x7e37e43c
 800a548:	e322da11 	.word	0xe322da11
 800a54c:	3f90ad3a 	.word	0x3f90ad3a
 800a550:	24760deb 	.word	0x24760deb
 800a554:	3fa97b4b 	.word	0x3fa97b4b
 800a558:	a0d03d51 	.word	0xa0d03d51
 800a55c:	3fb10d66 	.word	0x3fb10d66
 800a560:	c54c206e 	.word	0xc54c206e
 800a564:	3fb745cd 	.word	0x3fb745cd
 800a568:	920083ff 	.word	0x920083ff
 800a56c:	3fc24924 	.word	0x3fc24924
 800a570:	5555550d 	.word	0x5555550d
 800a574:	3fd55555 	.word	0x3fd55555
 800a578:	2c6a6c2f 	.word	0x2c6a6c2f
 800a57c:	bfa2b444 	.word	0xbfa2b444
 800a580:	52defd9a 	.word	0x52defd9a
 800a584:	3fadde2d 	.word	0x3fadde2d
 800a588:	af749a6d 	.word	0xaf749a6d
 800a58c:	3fb3b0f2 	.word	0x3fb3b0f2
 800a590:	fe231671 	.word	0xfe231671
 800a594:	3fbc71c6 	.word	0x3fbc71c6
 800a598:	9998ebc4 	.word	0x9998ebc4
 800a59c:	3fc99999 	.word	0x3fc99999
 800a5a0:	54442d18 	.word	0x54442d18
 800a5a4:	bff921fb 	.word	0xbff921fb
 800a5a8:	440fffff 	.word	0x440fffff
 800a5ac:	7ff00000 	.word	0x7ff00000
 800a5b0:	3fdbffff 	.word	0x3fdbffff
 800a5b4:	3ff00000 	.word	0x3ff00000
 800a5b8:	3ff2ffff 	.word	0x3ff2ffff
 800a5bc:	40038000 	.word	0x40038000
 800a5c0:	3ff80000 	.word	0x3ff80000
 800a5c4:	bff00000 	.word	0xbff00000
 800a5c8:	0800a9f8 	.word	0x0800a9f8
 800a5cc:	0800aa18 	.word	0x0800aa18

0800a5d0 <fabs>:
 800a5d0:	ec51 0b10 	vmov	r0, r1, d0
 800a5d4:	4602      	mov	r2, r0
 800a5d6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a5da:	ec43 2b10 	vmov	d0, r2, r3
 800a5de:	4770      	bx	lr

0800a5e0 <_init>:
 800a5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5e2:	bf00      	nop
 800a5e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5e6:	bc08      	pop	{r3}
 800a5e8:	469e      	mov	lr, r3
 800a5ea:	4770      	bx	lr

0800a5ec <_fini>:
 800a5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ee:	bf00      	nop
 800a5f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5f2:	bc08      	pop	{r3}
 800a5f4:	469e      	mov	lr, r3
 800a5f6:	4770      	bx	lr
